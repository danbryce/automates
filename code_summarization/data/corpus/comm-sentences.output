<BoL> Returns a list of minidom.Element to add additional flag information . <EoL>
<BoL> Returns a string representing the type of the flag . <EoL>
<BoL> Parses the string argument and returns the native value . <EoL>
<BoL> Returns a serialized string of the value . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns an XML element that contains this flag 's information . <EoL>
<BoL> Returns extra info about this flag in XML . <EoL>
<BoL> Returns parsed flag value as string . <EoL>
<BoL> Internal parse function . <EoL>
<BoL> Returns the serialized value , for use in an XML help text . <EoL>
<BoL> Changes the default value ( and current value too ) for this Flag . <EoL>
<BoL> Returns a str that describes the type of the flag . <EoL>
<BoL> Parses string and sets flag value . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> Serializes a list as a CSV string or unicode . <EoL>
<BoL> Registers a 'Flag ' object with a 'FlagValues ' object . <EoL>
<BoL> Registers a flag whose value is a comma-separated list of strings . <EoL>
<BoL> Registers a flag whose value can be a list of any strings . <EoL>
<BoL> Registers a flag whose value can be any string . <EoL>
<BoL> Creates a DuplicateFlagError by providing flag name and values . <EoL>
<BoL> Initializes EnumParser . <EoL>
<BoL> See base class . <EoL>
<BoL> Determines validity of argument and returns the correct element of enum . <EoL>
<BoL> Initializes EnumParser . <EoL>
<BoL> See base class . <EoL>
<BoL> Determines validity of argument and returns the correct element of enum . <EoL>
<BoL> Parses flags from argv ; stores parsed flags into this FlagValues object . <EoL>
<BoL> Returns True if name is a value ( flag ) in the dict . <EoL>
<BoL> Deletes a previously-defined flag from a flag object . <EoL>
<BoL> Returns list of names of all defined flags . <EoL>
<BoL> Retrieves the 'value ' attribute of the flag -- name . <EoL>
<BoL> Returns the Flag object for the flag -- name . <EoL>
<BoL> Sets the 'value ' attribute of the flag -- name . <EoL>
<BoL> Registers a new flag variable . <EoL>
<BoL> Returns a help string for all known flags . <EoL>
<BoL> Asserts if all validators in the list are satisfied . <EoL>
<BoL> Cleans up unregistered flags from all module - > [ flags ] dictionaries . <EoL>
<BoL> Returns filename from a flagfile_str of form - [ - ] flagfile=filename . <EoL>
<BoL> Checks whether a Flag object is registered under long name or short name . <EoL>
<BoL> Returns the useful ( ! =comments , etc ) lines from a file with flags . <EoL>
<BoL> Returns the list of flags defined by a module . <EoL>
<BoL> Returns the help string for a list of modules . <EoL>
<BoL> Marks the flag -- name as hidden . <EoL>
<BoL> Checks whether flag_string contain a -- flagfile= < foo > directive . <EoL>
<BoL> Helper function to do the main argument parsing . <EoL>
<BoL> Allow set default values for undefined flags . <EoL>
<BoL> Returns a help string for a given module . <EoL>
<BoL> Returns a help string for a given module . <EoL>
<BoL> Returns a help string for the key flags of a given module . <EoL>
<BoL> Sets a function for checking retired flags . <EoL>
<BoL> Returns value if setting flag |name| to |value| returned True . <EoL>
<BoL> Appends flags registered in another FlagValues instance . <EoL>
<BoL> Appends all flags assignments from this FlagInfo object to a file . <EoL>
<BoL> Return the name of the module defining this flag , or default . <EoL>
<BoL> Return the ID of the module defining this flag , or default . <EoL>
<BoL> Returns a dictionary that maps flag names to flag values . <EoL>
<BoL> Returns the dictionary of module_name - > list of defined flags . <EoL>
<BoL> Returns the dictionary of module_id - > list of defined flags . <EoL>
<BoL> Returns a string with the flags assignments from this FlagValues object . <EoL>
<BoL> Returns the value of a flag ( if not None ) or a default value . <EoL>
<BoL> Returns a help string for all known flags . <EoL>
<BoL> Returns the list of key flags for a module . <EoL>
<BoL> Returns whether flags were parsed . <EoL>
<BoL> Returns the dictionary of module_name - > list of key flags . <EoL>
<BoL> Describes the key flags of the main module . <EoL>
<BoL> Explicitly marks flags as parsed . <EoL>
<BoL> Describes the key flags of a module . <EoL>
<BoL> Processes command line args , but also allow args to be read from file . <EoL>
<BoL> Records the module that defines a specific flag . <EoL>
<BoL> Records the module that defines a specific flag . <EoL>
<BoL> Specifies that a flag is a key flag for a module . <EoL>
<BoL> Remove flags that were previously appended from another FlagValues . <EoL>
<BoL> Changes the default value of the named flag object . <EoL>
<BoL> Sets whether or not to use GNU style scanning . <EoL>
<BoL> Unparses all flags to the point before any FLAGS ( argv ) was called . <EoL>
<BoL> Outputs flag documentation in XML format . <EoL>
<BoL> Returns the float value of argument . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns whether the value is outside the bounds or not . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns the int value of argument . <EoL>
<BoL> See base class . <EoL>
<BoL> Parses argument as comma-separated list of strings . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> See base class . <EoL>
<BoL> Parses one or more arguments with the installed parser . <EoL>
<BoL> See base class . <EoL>
<BoL> Initializer . <EoL>
<BoL> Parses argument as whitespace-separated list of strings . <EoL>
<BoL> See base class . <EoL>
<BoL> Returns a serialized string of the Enum class value . <EoL>
<BoL> Returns the correct numeric value of argument . <EoL>
<BoL> Returns an instance of the argument parser cls . <EoL>
<BoL> Returns True if instance is an integer , and not a bool . <EoL>
<BoL> Enforces lower and upper bounds for numeric flags . <EoL>
<BoL> Declares that all flags key to a module are key to the current module . <EoL>
<BoL> Declares one flag as key to the current module . <EoL>
<BoL> Declares that the current module will not define any more key flags . <EoL>
<BoL> Returns Damerau-Levenshtein edit distance from a to b.Recursively defined string distance with memoization . <EoL>
<BoL> Returns an XML DOM element with name and text value . <EoL>
<BoL> Takes a __doc__ string and reformats it as help . <EoL>
<BoL> Convert a dict of values into process call parameters . <EoL>
<BoL> Returns the name of the module that 's calling into this module . <EoL>
<BoL> Returns the module that 's calling into this module . <EoL>
<BoL> Returns helpful similar matches for an invalid flag . <EoL>
<BoL> Returns the integer width of help lines that is used in TextWrap . <EoL>
<BoL> Returns the module that defines a global environment , and its name . <EoL>
<BoL> Converts a value to a python string . <EoL>
<BoL> Wraps a given text to a maximum line length and returns it . <EoL>
<BoL> Removes indentation from triple-quoted strings . <EoL>
<BoL> Constructor . <EoL>
<BoL> Given flag values , returns the input to be given to checker . <EoL>
<BoL> Verifies that constraint is satisfied . <EoL>
<BoL> Constructor . <EoL>
<BoL> Given flag values , returns the input to be given to checker . <EoL>
<BoL> Constructor to create all validators . <EoL>
<BoL> Given flag values , returns the input to be given to checker . <EoL>
<BoL> Returns the names of the flags checked by this validator . <EoL>
<BoL> Register new flags validator to be checked . <EoL>
<BoL> Ensures that flag is not None during program execution . <EoL>
<BoL> Ensures that flags are not None during program execution . <EoL>
<BoL> Looks up the special acquisition attributes of an object . : param str name : The attribute to find , with 'aq ' already stripped . <EoL>
<BoL> Check whether an object has an __of__ method for returning itself in the context of a container . <EoL>
<BoL> Returns a version of the method with self bound to ` wrapper ` <EoL>
<BoL> Declare additional interfaces implemented for instances of a class <EoL>
<BoL> Create an 'attribute ' description <EoL>
<BoL> Returns the documentation for the object . <EoL>
<BoL> Returns the name of the object . <EoL>
<BoL> Returns the value associated with 'tag ' . <EoL>
<BoL> Returns a list of all tags . <EoL>
<BoL> Returns the value associated with 'tag ' . <EoL>
<BoL> Associates 'value ' with 'key ' . <EoL>
<BoL> Gets a token for a given resource via cached tokens . <EoL>
<BoL> Gets a token for a given resource via client credentials . <EoL>
<BoL> Gets a new access token using via a device code . <EoL>
<BoL> Gets a token for a given resource via user credentails . <EoL>
<BoL> Gets the user code info which contains user_code , device_code for authenticating user on device . <EoL>
<BoL> Cancels the polling request to get token with device code . <EoL>
<BoL> output list of tuples in ( key , authentication-result ) <EoL>
<BoL> quote ( 'abc def ' ) - > 'abc % 20def ' <EoL>
<BoL> Parse a URL into 6 components : < scheme > : // < netloc > / < path > ; < params > ? < query > # < fragment > Return a 6-tuple : ( scheme , netloc , path , params , query , fragment ) . <EoL>
<BoL> Get logging options <EoL>
<BoL> The recommended way to call this function with variable content , is to use the ` warn ( `` hello % ( name ) s '' , { `` name '' : `` John Doe '' } ` form , so that this method will scrub pii value when needed . <EoL>
<BoL> The input is a dict with semantic keys , and the output will be a dict with PII values replaced by padding . <EoL>
<BoL> Configure adal logger , including level and handler spec 'd by python logging module . <EoL>
<BoL> Case insensitive comparison . Return true if both are None <EoL>
<BoL> Encode the bytes-like object s using Base64 and return a bytes object . <EoL>
<BoL> Put a parsed URL back together again . <EoL>
<BoL> Given a tag name without any prefix , this function returns a list of the raw content inside this tag as-is . <EoL>
<BoL> classes/types should always be True . <EoL>
<BoL> Either returns an existing member , or creates a new enum class . <EoL>
<BoL> Return the enum member matching ` name ` <EoL>
<BoL> Block attempts to reassign Enum members/constants . <EoL>
<BoL> Convenience method to create a new Enum class . <EoL>
<BoL> Returns the __new__ to be used for creating the enum members . <EoL>
<BoL> Returns the type for creating enum members , and the first inherited enum class . <EoL>
<BoL> Block attempts to reassign NamedConstants . <EoL>
<BoL> Creates a new NamedTuple class or an instance of a NamedTuple subclass . <EoL>
<BoL> classes/types should always be True . <EoL>
<BoL> Either returns an existing member , or creates a new enum class . <EoL>
<BoL> Return the enum member matching ` name ` <EoL>
<BoL> Block attempts to reassign Enum members . <EoL>
<BoL> Convenience method to create a new Enum class . <EoL>
<BoL> Returns the __new__ to be used for creating the enum members . <EoL>
<BoL> Returns the type for creating enum members , and the first inherited enum class . <EoL>
<BoL> Changes anything not dundered or not a constant descriptor . <EoL>
<BoL> Records anything not dundered or not a descriptor . <EoL>
<BoL> check if new generate method supports *args and **kwds <EoL>
<BoL> Extract all members from the value . <EoL>
<BoL> eturns index of highest bit , or -1 if value is zero or negative <EoL>
<BoL> Returns True if obj is a descriptor , False otherwise . <EoL>
<BoL> Returns True if a __dunder__ name , False otherwise . <EoL>
<BoL> Returns True if a _sunder_ name , False otherwise . <EoL>
<BoL> Make the given class un-picklable . <EoL>
<BoL> Create a new Enum subclass that replaces a collection of global constants <EoL>
<BoL> sorts things by value if all same type ; otherwise by name <EoL>
<BoL> export ( [ collection , ] namespace ) - > Export members to target namespace . <EoL>
<BoL> Add a new member to an existing Enum . <EoL>
<BoL> Class decorator that ensures only unique members exist in an enumeration . <EoL>
<BoL> Pickle protocol support <EoL>
<BoL> Return the inverse transform . <EoL>
<BoL> Multiplication <EoL>
<BoL> Create a new object <EoL>
<BoL> Precise string representation . <EoL>
<BoL> Right hand multiplication <EoL>
<BoL> Concise string representation . <EoL>
<BoL> Compare transforms for approximate equality . <EoL>
<BoL> Use same coefficient order as GDAL 's GetGeoTransform ( ) . <EoL>
<BoL> Return the identity transform . <EoL>
<BoL> Transform a sequence of points or vectors in place . <EoL>
<BoL> Create the permutation transform . For 2x2 matrices , there is only one permutation matrix that is not the identity . <EoL>
<BoL> Create a rotation transform at the specified angle . <EoL>
<BoL> Create a scaling transform from a scalar or vector . <EoL>
<BoL> Create a shear transform along one or both axes . <EoL>
<BoL> Return same coefficient order as GDAL 's SetGeoTransform ( ) . <EoL>
<BoL> Create a translation transform from an offset vector . <EoL>
<BoL> Assert that a and b are unorderable <EoL>
<BoL> Special property decorator that caches the computed property value in the object 's instance dict the first time it is accessed . <EoL>
<BoL> Return the cosine and sin for the given angle in degrees . <EoL>
<BoL> Return string for a world file . <EoL>
<BoL> Returns Affine from the contents of a world file string . <EoL>
<BoL> Returns a new subclass of tuple with named fields . <EoL>
<BoL> Create an instance of the class that will use the named test method when executed . Raises a ValueError if the instance does not have a method with the specified name . <EoL>
<BoL> The default assertEqual implementation , not type specific . <EoL>
<BoL> Honour the longMessage attribute when generating failure messages . If longMessage is False this means : * Use only an explicit message if it is provided * Otherwise use the standard message for the assert <EoL>
<BoL> Get a detailed comparison function for the types of the two args . <EoL>
<BoL> Add a function , with arguments , to be called when the test is completed . Functions added are called on a LIFO basis and are called after tearDown on test failure or success . <EoL>
<BoL> Add a type specific assertEqual style function to compare a type . <EoL>
<BoL> Fail if the two objects are unequal as determined by their difference rounded to the given number of decimal places ( default 7 ) and comparing to zero , or by comparing that the between the two objects is more than the given delta . <EoL>
<BoL> Verify the column names in the given table match what is expected . <EoL>
<BoL> Verify the column types in the given table are of the expected types . <EoL>
<BoL> An unordered sequence comparison asserting that the same elements , regardless of order . If the same element occurs more than once , it verifies that the elements occur the same number of times . <EoL>
<BoL> Checks whether actual is a superset of expected . <EoL>
<BoL> Fail if the two objects are unequal as determined by the '==' operator . <EoL>
<BoL> Just like self.assertTrue ( a > b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a > = b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a in b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a is b ) , but with a nicer default message . <EoL>
<BoL> Same as self.assertTrue ( isinstance ( obj , cls ) ) , with a nicer default message . <EoL>
<BoL> Same as self.assertTrue ( obj is None ) , with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a is not b ) , but with a nicer default message . <EoL>
<BoL> Included for symmetry with assertIsNone . <EoL>
<BoL> An unordered sequence specific comparison . It asserts that expected_seq and actual_seq contain the same elements . It is the equivalent of : : <EoL>
<BoL> Just like self.assertTrue ( a < b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a < = b ) , but with a nicer default message . <EoL>
<BoL> A list-specific equality assertion . <EoL>
<BoL> Fail unless a log message of level *level* or higher is emitted on *logger_name* or its children . If omitted , *level* defaults to INFO and *logger* defaults to the root logger . <EoL>
<BoL> Assert that two multi-line strings are equal . <EoL>
<BoL> Fail if the two objects are equal as determined by their difference rounded to the given number of decimal places ( default 7 ) and comparing to zero , or by comparing that the between the two objects is less than the given delta . <EoL>
<BoL> Fail if the two objects are equal as determined by the ' ! =' operator . <EoL>
<BoL> Just like self.assertTrue ( a not in b ) , but with a nicer default message . <EoL>
<BoL> Included for symmetry with assertIsInstance . <EoL>
<BoL> Fail the test if the text matches the regular expression . <EoL>
<BoL> Fail unless an exception of class expected_exception is raised by the callable when invoked with specified positional and keyword arguments . If a different type of exception is raised , it will not be caught , and the test case will be deemed to have suffered an error , exactly as for an unexpected exception . <EoL>
<BoL> Fail the test unless the text matches the regular expression . <EoL>
<BoL> Verify the row names in the given table match what is expected . <EoL>
<BoL> Verify the row data in the given table match what is expected . <EoL>
<BoL> An equality assertion for ordered sequences ( like lists and tuples ) . <EoL>
<BoL> A set-specific equality assertion . <EoL>
<BoL> Fail the test unless the expression is true . <EoL>
<BoL> A tuple-specific equality assertion . <EoL>
<BoL> Fail unless a warning of class warnClass is triggered by the callable when invoked with specified positional and keyword arguments . If a different type of warning is triggered , it will not be handled : depending on the other warning filtering rules in effect , it might be silenced , printed out , or raised as an exception . <EoL>
<BoL> Run the test without collecting errors in a TestResult <EoL>
<BoL> Execute all cleanup functions . Normally called for you after tearDown . <EoL>
<BoL> Fail immediately , with the given message . <EoL>
<BoL> Returns a one-line description of the test , or None if no description has been provided . <EoL>
<BoL> Skip this test . <EoL>
<BoL> Return a context manager that will return the enclosed block of code in a subtest identified by the optional message and keyword parameters . A failure in the subtest marks the test case as failed but resumes execution at the end of the enclosed block , allowing further test code to be executed . <EoL>
<BoL> String representation of this column . May be used as a column name in generated tables . <EoL>
<BoL> Get the data type that should be used when using this aggregation with a : class : ` .TableSet ` to produce a new column . <EoL>
<BoL> Execute this aggregation on a given column and return the result . <EoL>
<BoL> Perform any checks necessary to verify this aggregation can run on the provided table without errors . This is called by : meth : ` .Table.aggregate ` before : meth : ` run ` . <EoL>
<BoL> : returns : : class : ` bool ` <EoL>
<BoL> Cast a single value to : class : ` bool ` . <EoL>
<BoL> Format a given native value for CSV serialization . <EoL>
<BoL> Test , for purposes of type inference , if a value could possibly be coerced to this data type . <EoL>
<BoL> String representation of this column . May be used as a column name in generated tables . <EoL>
<BoL> Equality test with other sequences . <EoL>
<BoL> Retrieve values from this array by index , slice or key . <EoL>
<BoL> Return state values to be pickled . <EoL>
<BoL> Iterate over values . <EoL>
<BoL> Inequality test with other sequences . <EoL>
<BoL> Set values by index , which we want to fail loudly . <EoL>
<BoL> Restore pickled state . <EoL>
<BoL> Print an ascii sample of the contents of this sequence . <EoL>
<BoL> Print a unicode sample of the contents of this sequence . <EoL>
<BoL> Retrieve the contents of this sequence as an : class : ` collections.OrderedDict ` . <EoL>
<BoL> Equivalent to : meth : ` collections.OrderedDict.get ` . <EoL>
<BoL> Equivalent to : meth : ` collections.OrderedDict.items ` . <EoL>
<BoL> Equivalent to : meth : ` collections.OrderedDict.keys ` . <EoL>
<BoL> Get the values in this column , as a tuple . <EoL>
<BoL> Get the distinct values in this column , as a tuple . <EoL>
<BoL> Get the values in this column sorted . <EoL>
<BoL> Get the values in this column with any null values removed . <EoL>
<BoL> Get the values in this column with any null values removed and sorted . <EoL>
<BoL> Returns an instantiated : class : ` .DataType ` which will be appended to the table . <EoL>
<BoL> When invoked with a table , returns a sequence of new column values . <EoL>
<BoL> Perform any checks necessary to verify this computation can run on the provided table without errors . This is called by : meth : ` .Table.compute ` before : meth : ` run ` . <EoL>
<BoL> Coerce a given string value into this column 's data type . <EoL>
<BoL> Format a given native value for JSON serialization . <EoL>
<BoL> Return state values to be pickled . Exclude _parser because parsedatetime can not be pickled . <EoL>
<BoL> Restore state from the unpickled state values . Set _parser to an instance of the parsedatetime Calendar class . <EoL>
<BoL> Cast a single value to a : class : ` datetime.date ` . <EoL>
<BoL> Return state values to be pickled . Exclude _parser because parsedatetime can not be pickled . <EoL>
<BoL> Restore state from the unpickled state values . Set _parser to an instance of the parsedatetime Calendar class . <EoL>
<BoL> Cast a single value to a : class : ` datetime.datetime ` . <EoL>
<BoL> : returns : An instance of : class : ` Quantiles ` . <EoL>
<BoL> Return state values to be pickled . <EoL>
<BoL> Restore pickled state . <EoL>
<BoL> S.index ( value , [ start , [ stop ] ] ) - > integer -- return first index of value . Raises ValueError if the value is not present . <EoL>
<BoL> Equivalent to : meth : ` collections.OrderedDict.values ` . <EoL>
<BoL> : returns : : class : ` int ` . <EoL>
<BoL> Cast a single value to a : class : ` decimal.Decimal ` . <EoL>
<BoL> : returns : : class : ` decimal.Decimal ` <EoL>
<BoL> : returns : : class : ` decimal.Decimal ` <EoL>
<BoL> : returns : : class : ` int ` <EoL>
<BoL> : returns : An instance of : class : ` Quantiles ` . <EoL>
<BoL> Identify which quantile a given value is part of . <EoL>
<BoL> : returns : An instance of : class : ` Quantiles ` . <EoL>
<BoL> : returns : An instance of : class : ` Quantiles ` . <EoL>
<BoL> : returns : : class : ` int ` <EoL>
<BoL> : returns : : class : ` string ` <EoL>
<BoL> Shorthand for : code : ` table.rows [ foo ] ` . <EoL>
<BoL> Shorthand for : code : ` iter ( table.rows ) ` . <EoL>
<BoL> Shorthand for : code : ` len ( table.rows ) ` . <EoL>
<BoL> Print the table 's structure using : meth : ` .Table.print_structure ` . <EoL>
<BoL> Create a new table using the metadata from this one . <EoL>
<BoL> Apply one or more : class : ` .Aggregation ` instances to this table . <EoL>
<BoL> Render a bar chart using : class : ` leather.Chart ` . <EoL>
<BoL> Generates ( approximately ) evenly sized bins for the values in a column . Bins may not be perfectly even if the spread of the data does not divide evenly , but all values will always be included in some bin . <EoL>
<BoL> Render a column chart using : class : ` leather.Chart ` . <EoL>
<BoL> Create a new table by applying one or more : class : ` .Computation ` instances to each row . <EoL>
<BoL> Create a new table with row values converted into columns . <EoL>
<BoL> Create a new table with only unique rows . <EoL>
<BoL> Create a new table without the specified columns . <EoL>
<BoL> Find the first row that passes a test . <EoL>
<BoL> Create a new table from a CSV . <EoL>
<BoL> Parse a DBF file . <EoL>
<BoL> Create a new table from a fixed-width file and a CSV schema . <EoL>
<BoL> Create a new table from a JSON file . <EoL>
<BoL> Create a new table from a Python object . <EoL>
<BoL> Create a new : class : ` agate.Table ` from a given SQL table . Types will be inferred from the database schema . <EoL>
<BoL> Create an agate table from the results of a SQL query . <EoL>
<BoL> Parse an XLS file . <EoL>
<BoL> Parse an XLSX file . <EoL>
<BoL> Create a : class : ` .TableSet ` with a table for each unique key . <EoL>
<BoL> Fill in missing rows in a series . <EoL>
<BoL> Create a new table by joining two table 's on common values . This method implements most varieties of SQL join , in addition to some unique features . <EoL>
<BoL> Create a new table with fewer rows . <EoL>
<BoL> Render a line chart using : class : ` leather.Chart ` . <EoL>
<BoL> Create a new table from a sequence of similar tables . <EoL>
<BoL> Create a new table with columns converted into rows values . <EoL>
<BoL> Create a new table that is sorted . <EoL>
<BoL> Create a new table by grouping the data , aggregating those groups , applying a computation , and then organizing the groups into new rows and columns . <EoL>
<BoL> Print this table as a CSV . <EoL>
<BoL> Print an HTML version of this table.Helper function that formats individual rows . <EoL>
<BoL> Print this table as JSON . <EoL>
<BoL> Print this table 's column names and types as a plain-text table . <EoL>
<BoL> Print a text-based view of the data in this table.Helper function that formats individual rows . <EoL>
<BoL> Create a copy of this table with different column names or row names . <EoL>
<BoL> Render a scatterplot using : class : ` leather.Chart ` . <EoL>
<BoL> Create a new table with only the specified columns . <EoL>
<BoL> Convert this agate table into an intermediate , in-memory sqlite table , run a query against it , and then return the results as a new agate table . <EoL>
<BoL> Write this table to a CSV . This method uses agate 's builtin CSV writer , which supports unicode on both Python 2 and Python 3 . <EoL>
<BoL> Write this table to a JSON file or file-like object . <EoL>
<BoL> Generates a CREATE TABLE statement for this SQL table , but does not execute it . <EoL>
<BoL> Create a new : class : ` .Table ` with only those rows that pass a test . <EoL>
<BoL> Print the tableset 's structure via : meth : ` TableSet.print_structure ` . <EoL>
<BoL> Create a new : class : ` .TableSet ` using the metadata from this one . <EoL>
<BoL> Calls a method on each table in this : class : ` .TableSet ` . <EoL>
<BoL> Aggregate data from the tables in this set by performing some set of column operations on the groups and coalescing the results into a new : class : ` .Table ` . <EoL>
<BoL> Render a lattice/grid of bar charts using : class : ` leather.Lattice ` . <EoL>
<BoL> Calls : meth : ` .Table.bins ` on each table in the TableSet . <EoL>
<BoL> Render a lattice/grid of column charts using : class : ` leather.Lattice ` . <EoL>
<BoL> Calls : meth : ` .Table.compute ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.denormalize ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.distinct ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.exclude ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.find ` on each table in the TableSet . <EoL>
<BoL> Create a new : class : ` TableSet ` from a directory of CSVs . <EoL>
<BoL> Create a new : class : ` TableSet ` from a directory of JSON files or a single JSON object with key value ( Table key and list of row objects ) pairs for each : class : ` Table ` . <EoL>
<BoL> Calls : meth : ` .Table.group_by ` on each table in the TableSet . <EoL>
<BoL> Create a new : class : ` .TableSet ` with only those tables that pass a test . <EoL>
<BoL> Calls : meth : ` .Table.homogenize ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.join ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.limit ` on each table in the TableSet . <EoL>
<BoL> Render a lattice/grid of line charts using : class : ` leather.Lattice ` . <EoL>
<BoL> Convert this TableSet into a single table . This is the inverse of : meth : ` .Table.group_by ` . <EoL>
<BoL> Calls : meth : ` .Table.normalize ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.order_by ` on each table in the TableSet . <EoL>
<BoL> Calls : meth : ` .Table.pivot ` on each table in the TableSet . <EoL>
<BoL> Print the keys and row counts of each table in the tableset . <EoL>
<BoL> Render a lattice/grid of scatterplots using : class : ` leather.Lattice ` . <EoL>
<BoL> Calls : meth : ` .Table.select ` on each table in the TableSet . <EoL>
<BoL> Write each table in this set to a separate CSV in a given directory . <EoL>
<BoL> Write : class : ` TableSet ` to either a set of JSON files for each table or a single nested JSON file . <EoL>
<BoL> Calls : meth : ` .Table.where ` on each table in the TableSet . <EoL>
<BoL> Cast a single value to : func : ` unicode ` ( : func : ` str ` in Python 3 ) . <EoL>
<BoL> Cast a single value to : class : ` datetime.timedelta ` . <EoL>
<BoL> Apply type inference to the provided data and return an array of column types . <EoL>
<BoL> Finds the median value of a given series of values . <EoL>
<BoL> Given a series of values ( such as a : class : ` .Column ` ) returns the most significant decimal places present in any value . <EoL>
<BoL> Dead-simple memoize decorator for instance methods that take no arguments . <EoL>
<BoL> Key method for sorting nulls correctly . <EoL>
<BoL> Returns : code : ` True ` if the given object is an instance of : class : ` .Sequence ` that is not also a string . <EoL>
<BoL> Given a sequence of strings , returns a standardized version of the sequence . If `` ensure_unique `` is True , any duplicate strings will be appended with a unique identifier . <EoL>
<BoL> Returns the system default locale for a given category , based on environment variables . <EoL>
<BoL> Get a global configuration option for agate . <EoL>
<BoL> Set a global configuration option for agate . <EoL>
<BoL> Set a dictionary of options simultaneously . <EoL>
<BoL> A functional version of `` csv.Sniffer ( ) .sniff `` , that extends the list of possible delimiters to include some seen in the wild . <EoL>
<BoL> A replacement for Python 's : func : ` csv.reader ` that uses : class : ` .csv_py3.Reader ` . <EoL>
<BoL> A replacement for Python 's : func : ` csv.writer ` that uses : class : ` .csv_py3.Writer ` . <EoL>
<BoL> Initialize the locale object from the given identifier components . <EoL>
<BoL> Return the system default locale for the specified category . <EoL>
<BoL> Return the display name of the locale using the given locale . <EoL>
<BoL> Return the language of this locale in the given locale . <EoL>
<BoL> Return the script name in the given locale . <EoL>
<BoL> Return the territory name in the given locale . <EoL>
<BoL> Find the best match between available and requested locale strings . <EoL>
<BoL> Create a ` Locale ` instance for the given locale identifier . <EoL>
<BoL> Append a unique identifer to duplicate strings in a given sequence of strings . Identifers are an underscore followed by the occurance number of the specific string . <EoL>
<BoL> A wrapper around : class : ` .fixed.Reader ` , so that it can be used in the same way as a normal CSV reader . <EoL>
<BoL> Given a column index , assign a `` letter '' column name equivalent to Excel . <EoL>
<BoL> Given a number of decimal places creates a formatting string that will display numbers with that precision . <EoL>
<BoL> Recursively parse JSON-like Python objects as a dictionary of paths/keys and values . <EoL>
<BoL> Rounds a pair of minimum and maximum values to form reasonable `` round '' values suitable for use as axis minimum and maximum values . <EoL>
<BoL> Shallow copy operation on arbitrary Python objects . <EoL>
<BoL> Load records into memory . <EoL>
<BoL> Unload records from memory . <EoL>
<BoL> Determine the correct type for a column from a list of cell types . <EoL>
<BoL> Normalize a column of date cells . <EoL>
<BoL> Try to use formatting to determine if a cell contains only time info . <EoL>
<BoL> Construct a Boolean . <EoL>
<BoL> Return a dialect-specific bind processor for this type . <EoL>
<BoL> Return a dialect-specific literal processor for this type . <EoL>
<BoL> Return a dialect-specific result processor for this type . <EoL>
<BoL> Return a dialect-specific registry which caches a dialect-specific implementation , bind processing function , and one or more result processing functions . <EoL>
<BoL> Return the 'unwrapped ' dialect impl for this type . <EoL>
<BoL> Given an impl class , adapt this type to the impl assuming `` emulated '' . <EoL>
<BoL> Given a bind value ( i.e . a : class : ` .BindParameter ` instance ) , return a SQL expression in its place . <EoL>
<BoL> Suggest a type for a 'coerced ' Python value in an expression . <EoL>
<BoL> Given a SELECT column expression , return a wrapping SQL expression . <EoL>
<BoL> Compare this type against the given backend type . <EoL>
<BoL> Compare two values for equality . <EoL>
<BoL> Produce a string-compiled form of this : class : ` .TypeEngine ` . <EoL>
<BoL> Issue CREATE ddl for this type , if applicable . <EoL>
<BoL> Return a dialect-specific implementation for this : class : ` .TypeEngine ` . <EoL>
<BoL> Issue DROP ddl for this type , if applicable . <EoL>
<BoL> Return a copy of this type which has the : attr : ` .should_evaluate_none ` flag set to True . <EoL>
<BoL> Return the corresponding type object from the underlying DB-API , if any . <EoL>
<BoL> Produce a new type object that will utilize the given type when applied to the dialect of the given name . <EoL>
<BoL> Implement the `` + `` operator . <EoL>
<BoL> Implement the `` & `` operator . <EoL>
<BoL> Implement the `` / `` operator . <EoL>
<BoL> Implement the `` == `` operator . <EoL>
<BoL> Implement the `` > = `` operator . <EoL>
<BoL> Implement the [ ] operator . <EoL>
<BoL> Implement the `` > `` operator . <EoL>
<BoL> Construct a new `` Column `` object . <EoL>
<BoL> Implement the `` ~ `` operator . <EoL>
<BoL> Implement the `` < = `` operator . <EoL>
<BoL> implement the < < operator . <EoL>
<BoL> Implement the `` < `` operator . <EoL>
<BoL> Implement the `` % `` operator . <EoL>
<BoL> Implement the `` * `` operator . <EoL>
<BoL> Implement the `` ! = `` operator . <EoL>
<BoL> Implement the `` - `` operator . <EoL>
<BoL> Implement the `` | `` operator . <EoL>
<BoL> Implement the `` + `` operator in reverse . <EoL>
<BoL> Implement the `` / `` operator in reverse . <EoL>
<BoL> Implement the `` % `` operator in reverse . <EoL>
<BoL> Implement the `` * `` operator in reverse . <EoL>
<BoL> implement the > > operator . <EoL>
<BoL> Implement the `` - `` operator in reverse . <EoL>
<BoL> Implement the `` // `` operator in reverse . <EoL>
<BoL> Implement the `` - `` operator . <EoL>
<BoL> Implement the `` // `` operator . <EoL>
<BoL> eturn a copy of this ClauseElement with annotations updated by the given dictionary . <EoL>
<BoL> Return a compiler appropriate for this ClauseElement , given a Dialect . <EoL>
<BoL> Reassign internal elements to be clones of themselves . <EoL>
<BoL> eturn a copy of this : class : ` .ClauseElement ` with annotations removed . <EoL>
<BoL> Initialize the list of child items for this SchemaItem . <EoL>
<BoL> eturn a copy of this ClauseElement with annotations replaced by the given dictionary . <EoL>
<BoL> Produce a : func : ` ~.expression.all_ ` clause against the parent object . <EoL>
<BoL> Produce a : func : ` ~.expression.any_ ` clause against the parent object . <EoL>
<BoL> Produce a : func : ` ~.expression.asc ` clause against the parent object . <EoL>
<BoL> Produce a : func : ` ~.expression.between ` clause against the parent object , given the lower and upper range . <EoL>
<BoL> Return a custom boolean operator . <EoL>
<BoL> Produce a type cast , i.e . `` CAST ( < expression > AS < type > ) `` . <EoL>
<BoL> Produce a : func : ` ~.expression.collate ` clause against the parent object , given the collation string . <EoL>
<BoL> Compare this ColumnElement to another . <EoL>
<BoL> Compile this SQL expression . <EoL>
<BoL> Implement the 'concat ' operator . <EoL>
<BoL> Implement the 'contains ' operator . <EoL>
<BoL> Create a copy of this `` Column `` , unitialized . <EoL>
<BoL> Produce a : func : ` ~.expression.desc ` clause against the parent object . <EoL>
<BoL> Produce a : func : ` ~.expression.distinct ` clause against the parent object . <EoL>
<BoL> Implement the 'endswith ' operator . <EoL>
<BoL> Implement the `` ilike `` operator , e.g . case insensitive LIKE . <EoL>
<BoL> Implement the `` in `` operator . <EoL>
<BoL> Implement the `` IS `` operator . <EoL>
<BoL> Implement the `` IS DISTINCT FROM `` operator . <EoL>
<BoL> Implement the `` IS NOT `` operator . <EoL>
<BoL> Implement the `` IS NOT DISTINCT FROM `` operator . <EoL>
<BoL> Produce a column label , i.e . `` < columnname > AS < name > `` . <EoL>
<BoL> Implement the `` like `` operator . <EoL>
<BoL> Implements a database-specific 'match ' operator . <EoL>
<BoL> implement the `` NOT ILIKE `` operator . <EoL>
<BoL> implement the `` NOT IN `` operator . <EoL>
<BoL> implement the `` NOT LIKE `` operator . <EoL>
<BoL> Produce a : func : ` ~.expression.nullsfirst ` clause against the parent object . <EoL>
<BoL> Produce a : func : ` ~.expression.nullslast ` clause against the parent object . <EoL>
<BoL> Return True if this Column references the given column via foreign key . <EoL>
<BoL> Return True if the given : class : ` .ColumnElement ` has a common ancestor to this : class : ` .ColumnElement ` . <EoL>
<BoL> Implement the `` startswith `` operator . <EoL>
<BoL> Return a new Connection which references this Connection's engine and connection ; but does not have close_with_result enabled , and also whose close ( ) method does nothing . <EoL>
<BoL> Create a shallow copy of this Connection . <EoL>
<BoL> Execute a statement + params on the given cursor . <EoL>
<BoL> Execute a sql.ClauseElement object . <EoL>
<BoL> Execute a sql.Compiled object . <EoL>
<BoL> Execute a schema.DDL object . <EoL>
<BoL> Execute a schema.ColumnDefault object . <EoL>
<BoL> Execute a sql.FunctionElement object . <EoL>
<BoL> Execute a string SQL statement . <EoL>
<BoL> Close the given cursor , catching exceptions and turning into log warnings . <EoL>
<BoL> Begin a transaction and return a transaction handle . <EoL>
<BoL> Begin a nested transaction and return a transaction handle . <EoL>
<BoL> Begin a two-phase or XA transaction and return a transaction handle . <EoL>
<BoL> Close this : class : ` .Connection ` . <EoL>
<BoL> Returns a branched version of this : class : ` .Connection ` . <EoL>
<BoL> Returns a branched version of this : class : ` .Connection ` . <EoL>
<BoL> Emit CREATE statements for the given schema entity . <EoL>
<BoL> Detach the underlying DB-API connection from its connection pool . <EoL>
<BoL> Emit DROP statements for the given schema entity . <EoL>
<BoL> Executes a SQL statement construct and returns a : class : ` .ResultProxy ` . <EoL>
<BoL> Return the current isolation level assigned to this : class : ` .Connection ` . <EoL>
<BoL> Return True if a transaction is in progress . <EoL>
<BoL> Invalidate the underlying DBAPI connection associated with this : class : ` .Connection ` . <EoL>
<BoL> Given a callable object or function , execute it , passing a : class : ` .Connection ` as the first argument . <EoL>
<BoL> Executes and returns the first column of the first row . <EoL>
<BoL> Execute the given function within a transaction boundary . <EoL>
<BoL> and ' at the ClauseElement level . <EoL>
<BoL> Execute the DDL as a ddl_listener . <EoL>
<BoL> or ' at the ClauseElement level . <EoL>
<BoL> Create a shallow copy of this ClauseElement . <EoL>
<BoL> Return a compiler appropriate for this ClauseElement , given a Dialect . <EoL>
<BoL> Allow disable of _create_rule using a callable . <EoL>
<BoL> Return a copy of this DDL against a specific schema item . <EoL>
<BoL> Compare this ClauseElement to the given ClauseElement . <EoL>
<BoL> Execute this DDL immediately . <EoL>
<BoL> Link execution of this DDL to the DDL lifecycle of a SchemaItem . <EoL>
<BoL> Return a callable that will execute this DDLElement conditionally . <EoL>
<BoL> Set non-SQL options for the statement which take effect during execution . <EoL>
<BoL> Return immediate child elements of this : class : ` .ClauseElement ` . <EoL>
<BoL> Return a copy with : func : ` bindparam ( ) ` elements replaced . <EoL>
<BoL> Compile and execute this : class : ` .Executable ` , returning the result 's scalar representation . <EoL>
<BoL> Apply a 'grouping ' to this : class : ` .ClauseElement ` . <EoL>
<BoL> Return a copy with : func : ` bindparam ( ) ` elements replaced . <EoL>
<BoL> Produce an `` adapted '' form of this type , given an `` impl '' class to work with . <EoL>
<BoL> Return a conversion function for processing bind values . <EoL>
<BoL> Return a conversion function for processing literal values that are to be rendered directly without using binds . <EoL>
<BoL> Return a conversion function for processing result row values . <EoL>
<BoL> Proxy all other undefined accessors to the underlying implementation . <EoL>
<BoL> Construct an Interval object . <EoL>
<BoL> # todo <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Return the 'unwrapped ' dialect impl for this type . <EoL>
<BoL> See : meth : ` .TypeEngine.coerce_compared_value ` for a description . <EoL>
<BoL> Given two values , compare them for equality . <EoL>
<BoL> Produce a copy of this : class : ` .TypeDecorator ` instance . <EoL>
<BoL> Return the DBAPI type object represented by this : class : ` .TypeDecorator ` . <EoL>
<BoL> Provide a literal processing function for the given : class : ` .Dialect ` . <EoL>
<BoL> Return a : class : ` .TypeEngine ` object corresponding to a dialect . <EoL>
<BoL> Receive a bound parameter value to be converted . <EoL>
<BoL> Receive a literal parameter value to be rendered inline within a statement . <EoL>
<BoL> Receive a result-row column value to be converted . <EoL>
<BoL> Return a dialect-specific : class : ` .TypeEngine ` instance for this : class : ` .TypeDecorator ` . <EoL>
<BoL> Bind this MetaData to an Engine , Connection , string or URL . <EoL>
<BoL> Associate with this SchemaEvent 's parent object . <EoL>
<BoL> Append a DDL event listener to this `` MetaData `` . <EoL>
<BoL> Clear all Table objects from this MetaData . <EoL>
<BoL> Create all tables stored in this metadata . <EoL>
<BoL> Drop all tables stored in this metadata . <EoL>
<BoL> used to allow SchemaVisitor access <EoL>
<BoL> True if this MetaData is bound to an Engine or Connection . <EoL>
<BoL> Remove the given Table object from this MetaData . <EoL>
<BoL> Construct an INTERVAL . <EoL>
<BoL> Construct a new : class : ` .TIMESTAMP ` . <EoL>
<BoL> Constructor for : class : ` ~.schema.Table ` . <EoL>
<BoL> Return True if this FromClause and the other represent the same lexical identity . <EoL>
<BoL> Called on subclasses to establish the .c collection . <EoL>
<BoL> Given a column added to the .c collection of an underlying selectable , produce the local version of that column , assuming this selectable ultimately should proxy this column . <EoL>
<BoL> Add a 'dependency ' for this Table . <EoL>
<BoL> eturn an alias of this : class : ` .FromClause ` . <EoL>
<BoL> Append a : class : ` ~.schema.Column ` to this : class : ` ~.schema.Table ` . <EoL>
<BoL> Append a : class : ` ~.schema.Constraint ` to this : class : ` ~.schema.Table ` . <EoL>
<BoL> Append a DDL event listener to this `` Table `` . <EoL>
<BoL> Add a new kind of dialect-specific keyword argument for this class . <EoL>
<BoL> Return corresponding_column for the given column , or if None search for a match in the given dictionary . <EoL>
<BoL> Given a : class : ` .ColumnElement ` , return the exported : class : ` .ColumnElement ` object from this : class : ` .Selectable ` which corresponds to that original : class : ` ~sqlalchemy.schema.Column ` via a common ancestor column . <EoL>
<BoL> eturn a SELECT COUNT generated against this : class : ` .FromClause ` . <EoL>
<BoL> Issue a `` CREATE `` statement for this : class : ` .Table ` , using the given : class : ` .Connectable ` for connectivity . <EoL>
<BoL> Generate a : func : ` .delete ` construct against this : class : ` .TableClause ` . <EoL>
<BoL> Issue a `` DROP `` statement for this : class : ` .Table ` , using the given : class : ` .Connectable ` for connectivity . <EoL>
<BoL> Return True if this table exists . <EoL>
<BoL> Generate an : func : ` .insert ` construct against this : class : ` .TableClause ` . <EoL>
<BoL> Return True if this FromClause is 'derived ' from the given FromClause . <EoL>
<BoL> Return a : class : ` .Join ` from this : class : ` .FromClause ` to another : class : ` FromClause ` . <EoL>
<BoL> Return a LATERAL alias of this : class : ` .FromClause ` . <EoL>
<BoL> Return a : class : ` .Join ` from this : class : ` .FromClause ` to another : class : ` FromClause ` , with the `` isouter '' flag set to True . <EoL>
<BoL> eplace all occurrences of FromClause 'old ' with the given Alias object , returning a copy of this : class : ` .FromClause ` . <EoL>
<BoL> eturn a SELECT of this : class : ` .FromClause ` . <EoL>
<BoL> Return a TABLESAMPLE alias of this : class : ` .FromClause ` . <EoL>
<BoL> : param \*columns : A sequence of column names or Column objects . <EoL>
<BoL> Return True if this constraint contains the given column . <EoL>
<BoL> Gets a connection to a specific SQL alchemy backend . <EoL>
<BoL> Creates a sqlalchemy column from agate column data . <EoL>
<BoL> Return an asyncio event loop . <EoL>
<BoL> Equivalent to calling get_event_loop_policy ( ) .new_event_loop ( ) . <EoL>
<BoL> Equivalent to calling get_event_loop_policy ( ) .set_event_loop ( loop ) . <EoL>
<BoL> We are our own iterator . <EoL>
<BoL> Simulate normal file iteration . <EoL>
<BoL> Raise GeneratorExit inside coroutine . <EoL>
<BoL> Send a value into the coroutine . Return next yielded value or raise StopIteration . <EoL>
<BoL> Raise an exception in the coroutine . Return next yielded value or raise StopIteration . <EoL>
<BoL> Single-dispatch generic function decorator.generic_func.dispatch ( cls ) - > < function implementation > generic_func.register ( cls , func ) - > func <EoL>
<BoL> Return number of available connections taking into account the limit , limit_per_host and the connection key . <EoL>
<BoL> Cleanup unused transports . <EoL>
<BoL> Double confirmation for transport close . Some broken ssl servers may leave socket open without proper close . <EoL>
<BoL> Iterates over all waiters till found one that is not finsihed and belongs to a host that has available connections . <EoL>
<BoL> Close all opened transports . <EoL>
<BoL> Create a BasicAuth object from an Authorization HTTP header . <EoL>
<BoL> Encode credentials . <EoL>
<BoL> Returns True if the boundary was reached or False otherwise . <EoL>
<BoL> Decodes data according the specified Content-Encoding or Content-Transfer-Encoding headers value . <EoL>
<BoL> Returns charset parameter from Content-Type header or default . <EoL>
<BoL> Like read ( ) , but assumes that body parts contains JSON data . <EoL>
<BoL> Reads body part data . <EoL>
<BoL> Reads body part content chunk of the specified size . <EoL>
<BoL> Reads body part by line by line . <EoL>
<BoL> Like read ( ) , but reads all the data to the void . <EoL>
<BoL> Like read ( ) , but assumes that body part contains text data . <EoL>
<BoL> Set basic auth . <EoL>
<BoL> Set request content encoding . <EoL>
<BoL> Update request cookies header . <EoL>
<BoL> Update request headers . <EoL>
<BoL> Update destination host , port and connection type ( ssl ) . <EoL>
<BoL> Analyze transfer-encoding header . <EoL>
<BoL> Convert request version to two elements tuple . <EoL>
<BoL> Read response payload . <EoL>
<BoL> Start response processing . <EoL>
<BoL> Close underlying connector . <EoL>
<BoL> Perform HTTP DELETE request . <EoL>
<BoL> Detach connector from session without closing the former . <EoL>
<BoL> Attached to frozen classes as __delattr__ . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Check equality and either forward a NotImplemented or return the result negated . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Attached to frozen classes as __setattr__ . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> extra info from connection transport <EoL>
<BoL> Implements domain matching adhering to RFC 6265 . <EoL>
<BoL> Implements path matching adhering to RFC 6265 . <EoL>
<BoL> Implements date string parsing adhering to RFC 6265 . <EoL>
<BoL> Returns this jar 's cookies filtered by their attributes . <EoL>
<BoL> Encode a list of fields using the multipart/form-data MIME format <EoL>
<BoL> Creates SSLContext instance for usage in asyncio.create_server . <EoL>
<BoL> \ Your worker subclass must arrange to have this method called once every `` self.timeout `` seconds . If you fail in accomplishing this task , the master process will murder your workers . <EoL>
<BoL> Dispatches the response by the ` Content-Type ` header , returning suitable reader instance . <EoL>
<BoL> Ensures that the last read body part is read completely . <EoL>
<BoL> Returns True if the final boundary was reached or False otherwise . <EoL>
<BoL> Returns the next body part reader . <EoL>
<BoL> Constructs reader instance from HTTP response . <EoL>
<BoL> Emits the next multipart body part . <EoL>
<BoL> Reads all the body parts to the void till the final boundary . <EoL>
<BoL> Adds a new body part to multipart writer . <EoL>
<BoL> Write payload . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Sends data to all registered receivers . <EoL>
<BoL> Return True if the buffer is empty and 'feed_eof ' was called . <EoL>
<BoL> Return True if 'feed_eof ' was called . <EoL>
<BoL> Returns an asynchronous iterator that yields all the available data as soon as it is received <EoL>
<BoL> Returns an asynchronous iterator that yields chunks of size n . <EoL>
<BoL> Returns an asynchronous iterator that yields chunks of data as they are received by the server . The yielded objects are tuples of ( bytes , bool ) as returned by the StreamReader.readchunk method . <EoL>
<BoL> Returns a tuple of ( data , end_of_http_chunk ) . When chunked transfer encoding is used , end_of_http_chunk is a boolean indicating if the end of the data corresponds to the end of a HTTP chunk , otherwise it is always False . <EoL>
<BoL> rollback reading some data from stream , inserting it to buffer head . <EoL>
<BoL> Logic to get the correct SSL context <EoL>
<BoL> Close all ongoing DNS calls . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> S.pop ( [ index ] ) - > item -- remove and return item at index ( default last ) . Raise IndexError if list is empty or index is out of range . <EoL>
<BoL> S.remove ( value ) -- remove first occurrence of value . Raise ValueError if the value is not present . <EoL>
<BoL> Ensure that path in URL with authority starts with a leading slash . <EoL>
<BoL> Return decoded human readable string for URL representation . <EoL>
<BoL> A check for absolute URLs . <EoL>
<BoL> A check for default port . <EoL>
<BoL> Join URLs <EoL>
<BoL> Return an URL with scheme , host and port parts only . <EoL>
<BoL> Return a relative part of the URL . <EoL>
<BoL> Return a new URL with query part updated . <EoL>
<BoL> Return a new URL with fragment replaced . <EoL>
<BoL> Return a new URL with host replaced . <EoL>
<BoL> Return a new URL with name ( last part of path ) replaced . <EoL>
<BoL> Return a new URL with password replaced . <EoL>
<BoL> Return a new URL with path replaced . <EoL>
<BoL> Return a new URL with port replaced . <EoL>
<BoL> Return a new URL with query part replaced . <EoL>
<BoL> Return a new URL with scheme replaced . <EoL>
<BoL> Return a new URL with user replaced . <EoL>
<BoL> Clear all cookies . <EoL>
<BoL> Return the jar 's cookies filtered by their attributes . <EoL>
<BoL> Add application to the nested apps stack . <EoL>
<BoL> Freeze the match info . <EoL>
<BoL> Return a dict with additional info useful for introspection <EoL>
<BoL> Release resolve <EoL>
<BoL> Freeze router . <EoL>
<BoL> Post init stage . <EoL>
<BoL> Return MATCH_INFO for given request <EoL>
<BoL> Flush the write buffer . <EoL>
<BoL> Enable HTTP chunked mode <EoL>
<BoL> Enable HTTP body compression <EoL>
<BoL> Write chunk into stream . <EoL>
<BoL> Write last chunk . <EoL>
<BoL> Execute the view handler . <EoL>
<BoL> Private method for setting a cookie 's value <EoL>
<BoL> Dictionary style assignment . <EoL>
<BoL> Return a string suitable for HTTP . <EoL>
<BoL> Return a string suitable for JavaScript . <EoL>
<BoL> Load cookies from a string ( presumably HTTP_COOKIE ) or from a dictionary . Loading cookies from a dictionary 'd' is equivalent to calling : map ( Cookie.__setitem__ , d.keys ( ) , d.values ( ) ) <EoL>
<BoL> eal_value , coded_value = value_decode ( STRING ) Called prior to setting a cookie 's value from the network representation . <EoL>
<BoL> eal_value , coded_value = value_encode ( VALUE ) Called prior to setting a cookie 's value from the dictionary representation . <EoL>
<BoL> Return the next item from the generator . When exhausted , raise StopIteration . <EoL>
<BoL> Raise GeneratorExit inside generator . <EoL>
<BoL> Send a value into the generator . Return next yielded value or raise StopIteration . <EoL>
<BoL> Raise an exception in the generator . Return next yielded value or raise StopIteration . <EoL>
<BoL> A decorator indicating abstract methods . <EoL>
<BoL> Called when some data is received . <EoL>
<BoL> Called when the other end calls write_eof ( ) or equivalent . <EoL>
<BoL> Cast a value to a type . <EoL>
<BoL> Construct an instance of the class from any iterable input . <EoL>
<BoL> Compute the hash value of a set . <EoL>
<BoL> Constructor . <EoL>
<BoL> Close the websocket , sending the specified code and message . <EoL>
<BoL> Send ping message . <EoL>
<BoL> Send pong message . <EoL>
<BoL> Return ` self ` upon entering the runtime context . <EoL>
<BoL> Raise any exception triggered within the runtime context . <EoL>
<BoL> Flush the write buffer . <EoL>
<BoL> Serialize `` obj `` to a JSON formatted `` str `` . <EoL>
<BoL> Cancel all waiters <EoL>
<BoL> Class decorator that fills in missing ordering methods <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Return the bytes representation of the path . This is only recommended to use under Unix . <EoL>
<BoL> Return the string representation of the path , suitable for passing to system calls . <EoL>
<BoL> Open the file pointed by this path and return a file descriptor , as os.open ( ) does . <EoL>
<BoL> Return an absolute version of this path . This function works even if the path does n't point to anything . <EoL>
<BoL> Return the string representation of the path with forward ( / ) slashes . <EoL>
<BoL> Return the path as a 'file ' URI . <EoL>
<BoL> Change the permissions of the path , like os.chmod ( ) . <EoL>
<BoL> Return a new path pointing to the current working directory ( as returned by os.getcwd ( ) ) . <EoL>
<BoL> Whether this path exists . <EoL>
<BoL> Return a new path with expanded ~ and ~user constructs ( as returned by os.path.expanduser ) <EoL>
<BoL> Iterate over this subtree and yield all existing files ( of any kind , including directories ) matching the given pattern . <EoL>
<BoL> Return the group name of the file gid . <EoL>
<BoL> Return a new path pointing to the user 's home directory ( as returned by os.path.expanduser ( '~ ' ) ) . <EoL>
<BoL> True if the path is absolute ( has both a root and , if applicable , a drive ) . <EoL>
<BoL> Whether this path is a block device . <EoL>
<BoL> Whether this path is a character device . <EoL>
<BoL> Whether this path is a directory . <EoL>
<BoL> Whether this path is a FIFO . <EoL>
<BoL> Whether this path is a regular file ( also True for symlinks pointing to regular files ) . <EoL>
<BoL> Return True if the path contains one of the special names reserved by the system , if any . <EoL>
<BoL> Whether this path is a socket . <EoL>
<BoL> Whether this path is a symbolic link . <EoL>
<BoL> Iterate over the files in this directory . <EoL>
<BoL> Combine this path with one or several arguments , and return a new path representing either a subpath ( if all arguments are relative paths ) or a totally different path ( if one of the arguments is anchored ) . <EoL>
<BoL> Like chmod ( ) , except if the path points to a symlink , the symlink's permissions are changed , rather than its target 's . <EoL>
<BoL> Like stat ( ) , except if the path points to a symlink , the symlink's status information is returned , rather than its target 's . <EoL>
<BoL> Return True if this path matches the given pattern . <EoL>
<BoL> Create a new directory at this given path . <EoL>
<BoL> Return the login name of the file owner . <EoL>
<BoL> Open the file in bytes mode , read it , and close the file . <EoL>
<BoL> Open the file in text mode , read it , and close the file . <EoL>
<BoL> Return the relative path to another path identified by the passed arguments . If the operation is not possible ( because this is not a subpath of the other path ) , raise ValueError . <EoL>
<BoL> Rename this path to the given path . <EoL>
<BoL> Rename this path to the given path , clobbering the existing destination if it exists . <EoL>
<BoL> Make the path absolute , resolving all symlinks on the way and also normalizing it ( for example turning slashes into backslashes under Windows ) . <EoL>
<BoL> Recursively yield all existing files ( of any kind , including directories ) matching the given pattern , anywhere in this subtree . <EoL>
<BoL> Remove this directory . The directory must be empty . <EoL>
<BoL> Return whether other_path is the same or not as this file ( as returned by os.path.samefile ( ) ) . <EoL>
<BoL> Return the result of the stat ( ) system call on this path , like os.stat ( ) does . <EoL>
<BoL> Make this path a symlink pointing to the given path . Note the order of arguments ( self , target ) is the reverse of os.symlink 's . <EoL>
<BoL> Create this file with the given access mode , if it does n't exist . <EoL>
<BoL> Remove this file or link . If the path is a directory , use rmdir ( ) instead . <EoL>
<BoL> Return a new path with the file name changed . <EoL>
<BoL> Return a new path with the file suffix changed . <EoL>
<BoL> Open the file in bytes mode , write to it , and close the file . <EoL>
<BoL> Open the file in text mode , write to it , and close the file . <EoL>
<BoL> Attempt to load the netrc file from the path specified by the env-var NETRC or in the default location in the user 's home directory . <EoL>
<BoL> Websocket masking function . <EoL>
<BoL> Returns True when all response data had been read . <EoL>
<BoL> Emits next multipart reader object . <EoL>
<BoL> Releases the connection gracefully , reading all the content to the void . <EoL>
<BoL> Replace % xx escapes by their single-character equivalent . <EoL>
<BoL> Return the next item or raise StopAsyncIteration when exhausted . <EoL>
<BoL> Add a prefix to processed URLs . <EoL>
<BoL> Return a dict with additional info useful for introspection <EoL>
<BoL> Perform a raw match against path <EoL>
<BoL> Resolve resource <EoL>
<BoL> Construct url for resource with additional params . <EoL>
<BoL> Return a dict with additional info useful for introspection <EoL>
<BoL> Construct url for route with additional params . <EoL>
<BoL> Translate log_format into form usable by modulo formatting <EoL>
<BoL> gunicorn compatibility <EoL>
<BoL> Causes on_cleanup signal <EoL>
<BoL> D.pop ( k [ , d ] ) - > v , remove specified key and return the corresponding value . If key is not found , d is returned if given , otherwise KeyError is raised . <EoL>
<BoL> D.popitem ( ) - > ( k , v ) , remove and return some ( key , value ) pair as a 2-tuple ; but raise KeyError if D is empty . <EoL>
<BoL> Causes on_shutdown signal <EoL>
<BoL> Causes on_startup signal <EoL>
<BoL> D.update ( [ E , ] **F ) - > None . Update D from mapping/iterable E and F. If E present and has a .keys ( ) method , does : for k in E : D [ k ] = E [ k ] If E present and lacks .keys ( ) method , does : for ( k , v ) in E : D [ k ] = v In either case , this is followed by : for k , v in F.items ( ) : D [ k ] = v <EoL>
<BoL> This method supports the same args as ArgumentParser.add_argument ( .. ) as well as the additional args below . <EoL>
<BoL> error ( message : string ) <EoL>
<BoL> add_argument ( dest , ... , name=value , ... ) add_argument ( option_string , option_string , ... , name=value , ... ) <EoL>
<BoL> Process a date string , return a datetime object <EoL>
<BoL> Return BODY as JSON . <EoL>
<BoL> Return async iterator to process BODY as multipart . <EoL>
<BoL> Return POST parameters . <EoL>
<BoL> Read request body if present . <EoL>
<BoL> Release request . <EoL>
<BoL> Return BODY as text using encoding from .charset . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Enables automatic chunked transfer encoding . <EoL>
<BoL> Stop accepting new pipelinig messages and close connection when handlers done processing messages <EoL>
<BoL> Force close connection <EoL>
<BoL> Set keep-alive connection mode . <EoL>
<BoL> Worker process is about to exit , we need cleanup everything and stop accepting requests . It is especially important for keep-alive connections . <EoL>
<BoL> Process incoming request . <EoL>
<BoL> Construct url for route with additional params . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Append routes to route table . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Import a module . <EoL>
<BoL> Initialize the logger with a name and an optional level . <EoL>
<BoL> Low-level logging routine which creates a LogRecord and then calls all the handlers of this logger to handle the record . <EoL>
<BoL> Add the specified filter to this handler . <EoL>
<BoL> Add the specified handler to this logger . <EoL>
<BoL> Pass a record to all relevant handlers . <EoL>
<BoL> Log 'msg % args ' with severity 'CRITICAL ' . <EoL>
<BoL> Log 'msg % args ' with severity 'DEBUG ' . <EoL>
<BoL> Log 'msg % args ' with severity 'ERROR ' . <EoL>
<BoL> Convenience method for logging an ERROR with exception information . <EoL>
<BoL> Determine if a record is loggable by consulting all the filters . <EoL>
<BoL> Find the stack frame of the caller so that we can note the source file name , line number and function name . <EoL>
<BoL> Get a logger which is a descendant to this one . <EoL>
<BoL> Get the effective level for this logger . <EoL>
<BoL> Call the handlers for the specified record . <EoL>
<BoL> See if this logger has any handlers configured . <EoL>
<BoL> Log 'msg % args ' with severity 'INFO ' . <EoL>
<BoL> Is this logger enabled for level 'level ' ? <EoL>
<BoL> Log 'msg % args ' with the integer severity 'level ' . <EoL>
<BoL> Remove the specified filter from this handler . <EoL>
<BoL> Remove the specified handler from this logger . <EoL>
<BoL> Set the logging level of this logger . level must be an int or a str . <EoL>
<BoL> Log 'msg % args ' with severity 'WARNING ' . <EoL>
<BoL> Replace special characters `` & '' , `` < `` and `` > '' to HTML-safe sequences . If the optional flag quote is true ( the default ) , the quotation mark characters , both double quote ( `` ) and single quote ( ' ) characters are also translated . <EoL>
<BoL> Convert a time string to a time tuple . <EoL>
<BoL> Returns an iterator equivalent to map ( fn , iter ) . <EoL>
<BoL> Clean-up the resources associated with the Executor . <EoL>
<BoL> Submits a callable to be executed with the given arguments . <EoL>
<BoL> Decorator for overloaded functions/methods . <EoL>
<BoL> Return a dict with additional info useful for introspection <EoL>
<BoL> Return bool if the request satisfies the criteria <EoL>
<BoL> Default handler for Expect header . <EoL>
<BoL> @ contextmanager decorator . <EoL>
<BoL> Shortcut for users whose theme is next to their conf.py . <EoL>
<BoL> Produce a `` chain '' of this : class : ` .Rewriter ` to another . <EoL>
<BoL> Register a function as rewriter for a given type . <EoL>
<BoL> legacy , used by test_autogen_composition at the moment <EoL>
<BoL> Run the context 's object filters and return True if the targets should be part of the autogenerate operation . <EoL>
<BoL> Initialize a new : class : ` .Inspector ` . <EoL>
<BoL> Construct a new dialect-specific Inspector object from the given engine or connection . <EoL>
<BoL> Return information about check constraints in ` table_name ` . <EoL>
<BoL> Return information about columns in ` table_name ` . <EoL>
<BoL> Return information about foreign_keys in ` table_name ` . <EoL>
<BoL> Return information about indexes in ` table_name ` . <EoL>
<BoL> Return information about primary key constraint on ` table_name ` . <EoL>
<BoL> Return information about primary keys in ` table_name ` . <EoL>
<BoL> Return all schema names . <EoL>
<BoL> Return dependency-sorted table and foreign key constraint names in referred to within a particular schema . <EoL>
<BoL> Return information about the table comment for `` table_name `` . <EoL>
<BoL> Return all table names in referred to within a particular schema . <EoL>
<BoL> Return a dictionary of options specified when the table of the given name was created . <EoL>
<BoL> eturn a list of temporary table names for the current bind . <EoL>
<BoL> eturn a list of temporary view names for the current bind . <EoL>
<BoL> Return information about unique constraints in ` table_name ` . <EoL>
<BoL> Return definition for ` view_name ` . <EoL>
<BoL> Return all view names in ` schema ` . <EoL>
<BoL> Compare a database schema to that given in a : class : ` ~sqlalchemy.schema.MetaData ` instance . <EoL>
<BoL> Produce a : class : ` .MigrationScript ` structure based on schema comparison . <EoL>
<BoL> eturn true if the given line is part of a multi-line block , via backslash or triple-quote . <EoL>
<BoL> indent the given line according to the current indent level . <EoL>
<BoL> eturn true if the given line is an 'unindentor ' , relative to the last 'indent ' event received . <EoL>
<BoL> eset the flags which would indicate we are in a backslashed or triple-quoted section . <EoL>
<BoL> close this printer , flushing any remaining lines . <EoL>
<BoL> print a line or lines of python which already contain indentation . <EoL>
<BoL> print a line of python , indenting it according to the current indent level . <EoL>
<BoL> print a series of lines of python . <EoL>
<BoL> Implement a 'safe ' version of ForeignKey._get_colspec ( ) that wo n't fail if the remote table ca n't be resolved . <EoL>
<BoL> produce a __repr__ ( ) object for a string identifier that may use quoted_name ( ) in SQLAlchemy 0.9 and greater . <EoL>
<BoL> Establish a context which provides a : class : ` .EnvironmentContext ` object to env.py scripts . <EoL>
<BoL> Construct a new : class : ` .EnvironmentContext ` . <EoL>
<BoL> Return a context manager that will enclose an operation within a `` transaction '' , as defined by the environment 's offline and transactional DDL settings . <EoL>
<BoL> Execute the given SQL using the current change context . <EoL>
<BoL> Return the current 'bind ' . <EoL>
<BoL> Return the current : class : ` .MigrationContext ` object . <EoL>
<BoL> Return the hex identifier of the 'head ' script revision . <EoL>
<BoL> Return the hex identifier of the 'heads ' script revision ( s ) . <EoL>
<BoL> Get the 'destination ' revision argument . <EoL>
<BoL> Return the 'starting revision ' argument , if the revision was passed using `` start : end `` . <EoL>
<BoL> Return the value passed for the `` -- tag `` argument , if any . <EoL>
<BoL> Return the value ( s ) passed for the `` -x `` argument , if any . <EoL>
<BoL> Return True if the current migrations environment is running in `` offline mode '' . <EoL>
<BoL> Return True if the context is configured to expect a transactional DDL capable backend . <EoL>
<BoL> Run migrations as determined by the current command line configuration as well as versioning information present ( or not ) in the current database connection ( if one is present ) . <EoL>
<BoL> Emit text directly to the `` offline '' SQL stream . <EoL>
<BoL> A hook that is attached to the 'column_reflect ' event for when a Table is reflected from the database during the autogenerate process . <EoL>
<BoL> Emit the string `` BEGIN `` , or the backend-specific equivalent , on the current connection context . <EoL>
<BoL> Emit the string `` COMMIT `` , or the backend-specific equivalent , on the current connection context . <EoL>
<BoL> perform any operations needed on a table before a new one is created to replace it in batch mode . <EoL>
<BoL> Return True if the given : class : ` .BatchOperationsImpl ` would need the table to be recreated and copied in order to proceed . <EoL>
<BoL> A hook called when : meth : ` .EnvironmentContext.run_migrations ` is called . <EoL>
<BoL> locate Column objects within the given expression . <EoL>
<BoL> Register a function as a compiler for a given : class : ` .ClauseElement ` type . <EoL>
<BoL> quote the elements of a dotted name <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Compile and execute this : class : ` .Executable ` . <EoL>
<BoL> Redefine SQLAlchemy 's drop constraint to raise errors for invalid constraint type . <EoL>
<BoL> Construct a new : class : ` .Operations ` <EoL>
<BoL> Indicate a string name that has already had a naming convention applied to it . <EoL>
<BoL> Return the current 'bind ' . <EoL>
<BoL> Return the : class : ` .MigrationContext ` object that's currently in use . <EoL>
<BoL> Register an implementation for a given : class : ` .MigrateOperation ` . <EoL>
<BoL> Produce an 'inline literal ' expression , suitable for using in an INSERT , UPDATE , or DELETE statement . <EoL>
<BoL> Given a : class : ` .MigrateOperation ` , invoke it in terms of this : class : ` .Operations ` instance . <EoL>
<BoL> Register a new operation for this class.\ def % ( name ) s % ( args ) s : % ( doc ) r return op_cls. % ( source_name ) s % ( apply_kw ) s <EoL>
<BoL> Produce a : class : ` .ColumnClause ` object . <EoL>
<BoL> Create an : class : ` .ExcludeConstraint ` object . <EoL>
<BoL> Return True if the given column element compares to this one when targeting within a result row . <EoL>
<BoL> Produce an ascending `` ORDER BY `` clause element . <EoL>
<BoL> Produce a descending `` ORDER BY `` clause element . <EoL>
<BoL> Produce an column-expression-level unary `` DISTINCT `` clause . <EoL>
<BoL> Produce the `` NULLS FIRST `` modifier for an `` ORDER BY `` expression . <EoL>
<BoL> Produce the `` NULLS LAST `` modifier for an `` ORDER BY `` expression . <EoL>
<BoL> Compare this : class : ` UnaryExpression ` against the given : class : ` .ClauseElement ` . <EoL>
<BoL> Return True if the given : class : ` .BatchOperationsImpl ` would need the table to be recreated and copied in order to proceed . <EoL>
<BoL> Execute a SQL construct or string statement . <EoL>
<BoL> Return a tuple of the current 'head versions ' that are represented in the target database . <EoL>
<BoL> Return the current revision , usually that which is present in the `` alembic_version `` table in the database . <EoL>
<BoL> Run the migration scripts established for this : class : ` .MigrationContext ` , if any . <EoL>
<BoL> Stamp the version table with a specific revision . <EoL>
<BoL> epopulate this : class : ` .PrimaryKeyConstraint ` given a set of columns . <EoL>
<BoL> A delete is when we are a. in a downgrade and b. we are going to the `` base '' or we are going to a version that is implied as a dependency on another version that is remaining . <EoL>
<BoL> Produce a : class : ` .ColumnClause ` object that has the : paramref : ` .column.is_literal ` flag set to True . <EoL>
<BoL> Construct an index object . <EoL>
<BoL> Issue a `` CREATE `` statement for this : class : ` .Index ` , using the given : class : ` .Connectable ` for connectivity . <EoL>
<BoL> Issue a `` DROP `` statement for this : class : ` .Index ` , using the given : class : ` .Connectable ` for connectivity . <EoL>
<BoL> emove a column from a ColumnCollection . <EoL>
<BoL> Issue an `` add column '' instruction using the current migration context . <EoL>
<BoL> Issue an `` add column '' instruction using the current batch migration context . <EoL>
<BoL> Issue a `` bulk insert '' operation using the current migration context . <EoL>
<BoL> Issue a `` create index '' instruction using the current batch migration context . <EoL>
<BoL> Issue a `` create primary key '' instruction using the current batch migration context . <EoL>
<BoL> Reverses the COMMENT ON operation against a table . <EoL>
<BoL> Issue a `` create table '' instruction using the current migration context . <EoL>
<BoL> Issue a `` drop column '' instruction using the current batch migration context . <EoL>
<BoL> Issue a `` drop constraint '' instruction using the current batch migration context . <EoL>
<BoL> Issue a `` drop index '' instruction using the current batch migration context . <EoL>
<BoL> Reverses the COMMENT ON operation against a table . <EoL>
<BoL> Issue a `` drop table '' instruction using the current migration context . <EoL>
<BoL> Execute the given SQL using the current migration context . <EoL>
<BoL> create a placeholder Table object for the referent of a ForeignKey . <EoL>
<BoL> Return a copy of this dispatcher that is independently writable . <EoL>
<BoL> Interpret a filename as either a filesystem location or as a package resource . <EoL>
<BoL> Return a boolean value translating from other types if necessary . <EoL>
<BoL> Parse a sectioned configuration file . <EoL>
<BoL> Create a sequence of lookups with 'vars ' taking priority over the 'section ' which takes priority over the DEFAULTSECT . <EoL>
<BoL> Raises a TypeError for non-string values . <EoL>
<BoL> Write a single section to the specified ` fp ' . <EoL>
<BoL> Create a new section in the configuration . Extends RawConfigParser.add_section by validating if the section name is a string . <EoL>
<BoL> Get an option value for a given section . <EoL>
<BoL> Check for the existence of a given option in a given section . <EoL>
<BoL> Indicate whether the named section is present in the configuration . <EoL>
<BoL> Return a list of ( name , value ) tuples for each option in a section . <EoL>
<BoL> Return a list of option names for the given section name . <EoL>
<BoL> Remove a section from the parser and return it as a ( section_name , section_proxy ) tuple . If no section is present , raise KeyError . <EoL>
<BoL> Read and parse a filename or an iterable of filenames . <EoL>
<BoL> Read configuration from a dictionary . <EoL>
<BoL> Like read ( ) but the argument must be a file-like object . <EoL>
<BoL> Read configuration from a given string . <EoL>
<BoL> Deprecated , use read_file instead . <EoL>
<BoL> Remove an option . <EoL>
<BoL> Remove a file section . <EoL>
<BoL> Return a list of section names , excluding [ DEFAULT ] <EoL>
<BoL> Set an option . Extends RawConfigParser.set by validating type and interpolation syntax on the value . <EoL>
<BoL> Write an .ini-format representation of the configuration state . <EoL>
<BoL> Get the names and default values of a callable object 's parameters . <EoL>
<BoL> Given a source path , run the EDITOR for it <EoL>
<BoL> Load a file from the given path as a Python module . <EoL>
<BoL> Given a python source path , locate the .pyc . <EoL>
<BoL> Return a def of this template as a : class : ` .DefTemplate ` . <EoL>
<BoL> eturn a list of defs in the template . <EoL>
<BoL> Render the output of this template as a string . <EoL>
<BoL> Render this : class : ` .Template ` with the given context . <EoL>
<BoL> Render the output of this template as a unicode object . <EoL>
<BoL> Establish the values and/or types of bound parameters within this : class : ` .TextClause ` construct . <EoL>
<BoL> Turn this : class : ` .TextClause ` object into a : class : ` .TextAsFrom ` object that can be embedded into another statement . <EoL>
<BoL> execute a deferred value for serialization purposes . <EoL>
<BoL> Return a copy of this : class : ` .BindParameter ` with the given value set . <EoL>
<BoL> Compare this : class : ` BindParameter ` to the given clause . <EoL>
<BoL> eturn the .comment attribute from a Table or Column <EoL>
<BoL> a workaround for the Index construct 's severe lack of flexibility <EoL>
<BoL> traverse and visit the given expression structure using the default iterator . <EoL>
<BoL> 创建带签名的请求地址，paramnames为需要包含的参数名，用于避免出现过多的参数，默认使用全部参数 <EoL>
<BoL> 二维码管理 - 添加 <EoL>
<BoL> 即时到帐 <EoL>
<BoL> Create website payment for foreigners ( With QR code ) <EoL>
<BoL> Create mobile payment for foreigners <EoL>
<BoL> 担保交易 <EoL>
<BoL> 确认发货 <EoL>
<BoL> 单笔交易查询 , 返回xml . out_trade_no或者trade_no参数必须有一个 . 该接口需要联系支付宝客服签约 . <EoL>
<BoL> 标准双接口 <EoL>
<BoL> 即时到帐 <EoL>
<BoL> 即时到帐token <EoL>
<BoL> ' '' Return a datetime.tzinfo implementation for the given timezone <EoL>
<BoL> Consumer cancelled by server . <EoL>
<BoL> Request a channel close . <EoL>
<BoL> Confirm a channel close . <EoL>
<BoL> Enable/disable flow from peer . <EoL>
<BoL> Signal that the channel is ready . <EoL>
<BoL> Confirm a flow method . <EoL>
<BoL> Acknowledge one or more messages . <EoL>
<BoL> End a queue consumer . <EoL>
<BoL> Direct access to a queue . <EoL>
<BoL> Redeliver unacknowledged messages . <EoL>
<BoL> Reject an incoming message . <EoL>
<BoL> Tear down this object . <EoL>
<BoL> Enable publisher confirms for this channel . <EoL>
<BoL> Enable/disable flow from peer . <EoL>
<BoL> Open a channel for use . <EoL>
<BoL> Purge a queue . <EoL>
<BoL> Commit the current transaction . <EoL>
<BoL> Abandon the current transaction . <EoL>
<BoL> Select standard transaction mode . <EoL>
<BoL> Callback called when connection blocked . <EoL>
<BoL> Request a connection close . <EoL>
<BoL> Confirm a connection close . <EoL>
<BoL> Confirm a connection close . <EoL>
<BoL> Create new channel . <EoL>
<BoL> Send heartbeat packets if necessary . <EoL>
<BoL> Serialize AMQP properties . <EoL>
<BoL> Close this Channel or Connection . <EoL>
<BoL> Convert str to bytes if running under Python 2 . <EoL>
<BoL> Serialize AMQP arguments . <EoL>
<BoL> Ensure p is a promise . <EoL>
<BoL> Return the callable or a weak reference . <EoL>
<BoL> Return True if the queue is empty , False otherwise ( not reliable ! ) . <EoL>
<BoL> Return True if the queue is full , False otherwise ( not reliable ! ) . <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Remove and return an item from the queue without blocking . <EoL>
<BoL> Blocks until all items in the Queue have been gotten and processed . <EoL>
<BoL> Put an item into the queue . <EoL>
<BoL> Put an item into the queue without blocking . <EoL>
<BoL> Return the approximate size of the queue ( not reliable ! ) . <EoL>
<BoL> Indicate that a formerly enqueued task is complete . <EoL>
<BoL> Create transport . <EoL>
<BoL> Get dict items iterator . <EoL>
<BoL> Get dict values iterator . <EoL>
<BoL> Class decorator to ensure class is compatible with Python 2 . <EoL>
<BoL> Convert str to bytes . <EoL>
<BoL> Return the first response to a SASL challenge as a bytes object . <EoL>
<BoL> Convert bytes to str . <EoL>
<BoL> Create amqp method specification tuple . <EoL>
<BoL> Wrap the socket in an SSL object . <EoL>
<BoL> Unwrap a Python 2.6 SSL socket , so we can call shutdown ( ) . <EoL>
<BoL> Write a string out to the SSL socket fully . <EoL>
<BoL> Read exactly n bytes from the socket . <EoL>
<BoL> Do any preliminary work in shutting down the connection . <EoL>
<BoL> Completely write a string to the peer . <EoL>
<BoL> Read exactly n bytes from the peer . <EoL>
<BoL> Do any additional initialization of the class . <EoL>
<BoL> Get exception errno ( if set ) . <EoL>
<BoL> Set flag to close fd after exec . <EoL>
<BoL> Convert hostname : port string to host , port tuple . <EoL>
<BoL> Initializes the instance - basically setting the formatter to None and the filter list to empty . <EoL>
<BoL> Acquire the I/O thread lock . <EoL>
<BoL> Tidy up any resources used by the handler . <EoL>
<BoL> Acquire a thread lock for serializing access to the underlying I/O . <EoL>
<BoL> Ensure all logging output has been flushed . <EoL>
<BoL> Format the specified record . <EoL>
<BoL> Conditionally emit the specified logging record . <EoL>
<BoL> Handle errors which occur during an emit ( ) call . <EoL>
<BoL> Release the I/O thread lock . <EoL>
<BoL> Set the formatter for this handler . <EoL>
<BoL> Set the logging level of this handler . level must be an int or a str . <EoL>
<BoL> Decorator to mark generator as a co-routine . <EoL>
<BoL> Get logger by name . <EoL>
<BoL> Act on any CursorMoveUp commands by deleting preceding tokens <EoL>
<BoL> Prepare attributes for the template <EoL>
<BoL> Load the contents of 'ansi ' into this object <EoL>
<BoL> $ ls -- color=always | ansi2html > directories.html $ sudo tail /var/log/messages | ccze -A | ansi2html > logs.html $ task burndown | ansi2html > burndown.html <EoL>
<BoL> Convert value from Python into a type suitable for insertion in a database query . <EoL>
<BoL> Convert value from the type given by the database connection into a Python type . <EoL>
<BoL> Return a list of field names , suitable for insertion in a query . <EoL>
<BoL> Decode a row . <EoL>
<BoL> Create an iterator on the given cursor . This also deals with the case where a cursor has no results . <EoL>
<BoL> Execute a simple insert statement with the contained values . <EoL>
<BoL> Returns a string for holding replacement values in the query string , e.g . : % s , % s , % s <EoL>
<BoL> Returns a string for holding 'set values ' syntax in the query string , e.g . : col1 = % s , col2 = % s , col3 = % s <EoL>
<BoL> Execute a simple update statement with the contained values . <EoL>
<BoL> Returns the list of converted values . This is useful to let DBAPI do the automatic quoting . <EoL>
<BoL> Counts the number of selected rows . <EoL>
<BoL> Convenience method that creates an encoder and executes an insert statement , and then fetches the data back from the database ( because of defaults ) and returns the new object . <EoL>
<BoL> Create a decoder for the column names described by 'desc ' . <EoL>
<BoL> Convenience method that deletes rows with the given condition . WARNING : if you do not specify any condition , this deletes all the rows in the table ! ( just like SQL ) <EoL>
<BoL> Encode the given columns according to this class ' definition . <EoL>
<BoL> Execute an arbitrary read-write SQL statement and return a decoder for the results . <EoL>
<BoL> Convenience method that gets a single object by its primary key . <EoL>
<BoL> Return a sequence number . This allows us to quickly get the last inserted row id . <EoL>
<BoL> Convenience method that creates an encoder and executes an insert statement . Returns the encoder . <EoL>
<BoL> Convenience method that creates an encoder and executes an update statement . Returns the encoder . <EoL>
<BoL> Attempt to load module name modname , returning it on success , throwing ImportError if module could n't be imported <EoL>
<BoL> deserialize the string to python data types . Raises ValueError if the string could not be parsed . <EoL>
<BoL> Serialize the datastructure to json . <EoL>
<BoL> Serialize the object to JSON . <EoL>
<BoL> Deserialize JSON-encoded object to a Python object . <EoL>
<BoL> Forces anyjson to use a specific json module if it 's available <EoL>
<BoL> Return a list of available Qt interfaces . <EoL>
<BoL> Select an Qt API to use . <EoL>
<BoL> Set the preferred Qt API . <EoL>
<BoL> Utility function that is ran once on Library import . <EoL>
<BoL> Sets a driver . <EoL>
<BoL> Get a driver <EoL>
<BoL> Return the state object attribute that matches the string : param str value : the string to look up : return : the state object attribute that matches the string : rtype : str <EoL>
<BoL> Return the string representation of the state object attribute : param str value : the state object to turn into string : return : the uppercase string that represents the state object : rtype : str <EoL>
<BoL> Return the state object attribute that matches the string : param str value : the string to look up : return : the state object attribute that matches the string : rtype : str <EoL>
<BoL> Return the string representation of the state object attribute : param str value : the state object to turn into string : return : the uppercase string that represents the state object : rtype : str <EoL>
<BoL> Enable library wide debugging to a file-like object . <EoL>
<BoL> Take an integer and make a 1-character byte string . <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> Return a relative version of a path <EoL>
<BoL> lazily compute value for name or raise AttributeError if unknown . <EoL>
<BoL> special version of abspath that will leave paths from jython jars alone <EoL>
<BoL> try to get the version of the named distribution , returs None on failure <EoL>
<BoL> imports a module , then resolves the attrname on it <EoL>
<BoL> initialize given package from the export definitions . <EoL>
<BoL> Join a base URL and a possibly relative URL to form an absolute interpretation of the latter . <EoL>
<BoL> Add any headers needed by the connection . As of v2.0 this does nothing by default , but is left for overriding by users that subclass the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` . <EoL>
<BoL> Builds a : class : ` Response < requests.Response > ` object from a urllib3 response . This should not be called from user code , and is only exposed for use when subclassing the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` <EoL>
<BoL> Verify a SSL certificate . This method should not be called from user code , and is only exposed for use when subclassing the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` . <EoL>
<BoL> Disposes of any internal state . <EoL>
<BoL> Returns a urllib3 connection for the given URL . This should not be called from user code , and is only exposed for use when subclassing the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` . <EoL>
<BoL> Initializes a urllib3 PoolManager . <EoL>
<BoL> Returns a dictionary of the headers to add to any request sent through a proxy . This works with urllib3 magic to ensure that they are correctly sent to the proxy , rather than in a tunnelled request if CONNECT is being used . <EoL>
<BoL> Return urllib3 ProxyManager for the given proxy . <EoL>
<BoL> Obtain the url to use when making the final request . <EoL>
<BoL> Sends PreparedRequest object . Returns Response object . <EoL>
<BoL> Closes all adapters and as such the session <EoL>
<BoL> Sends a DELETE request . Returns : class : ` Response ` object . <EoL>
<BoL> Sends a GET request . Returns : class : ` Response ` object . <EoL>
<BoL> Returns the appropriate connection adapter for the given URL . <EoL>
<BoL> Receives a Response . Returns a redirect URI or `` None `` <EoL>
<BoL> Sends a HEAD request . Returns : class : ` Response ` object . <EoL>
<BoL> Check the environment and merge it with some settings . <EoL>
<BoL> Registers a connection adapter to a prefix . <EoL>
<BoL> Sends a OPTIONS request . Returns : class : ` Response ` object . <EoL>
<BoL> Sends a PATCH request . Returns : class : ` Response ` object . <EoL>
<BoL> Sends a POST request . Returns : class : ` Response ` object . <EoL>
<BoL> Constructs a : class : ` PreparedRequest < PreparedRequest > ` for transmission and returns it . The : class : ` PreparedRequest ` has settings merged from the : class : ` Request < Request > ` instance and those of the : class : ` Session ` . <EoL>
<BoL> Sends a PUT request . Returns : class : ` Response ` object . <EoL>
<BoL> When being redirected we may want to strip authentication from the request to avoid leaking credentials . This method intelligently removes and reapplies authentication where possible to avoid credential loss . <EoL>
<BoL> When being redirected we may want to change the method of the request based on certain specs or browser behavior . <EoL>
<BoL> This method re-evaluates the proxy configuration by considering the environment variables . <EoL>
<BoL> Send a given PreparedRequest . <EoL>
<BoL> Decide whether Authorization header should be removed when redirecting <EoL>
<BoL> ` download_dir ` - If ` None ` then downloaded files will be temporary files that are deleted on close . If set to a value , then downloaded files will be saved to this directory , and will not be automatically deleted . <EoL>
<BoL> Close the temporary file , possibly deleting it . <EoL>
<BoL> Return raw JSON data . <EoL>
<BoL> Determine an output filename to use for the download . <EoL>
<BoL> Determine an output filename based on the ` Content-Disposition ` header . <EoL>
<BoL> Determine an output filename based on the download URL . <EoL>
<BoL> Python 's ` mimetypes.guess_extension ` is no use because it simply returns the first of an unordered set . We use the same set of media types here , but take a reasonable preference on what extension to map to . <EoL>
<BoL> Sanitize output filenames , to remove any potentially unsafe characters . <EoL>
<BoL> Given a path like '/a/b/c.txt ' <EoL>
<BoL> Given an HTTP response , return the decoded data . <EoL>
<BoL> Given the value of a 'Content-Type ' header , return the appropriate decoder for handling the response content . <EoL>
<BoL> Given the value of the encoding , return the appropriate encoder for handling the request content . <EoL>
<BoL> Return the 'options ' for sending the outgoing request . <EoL>
<BoL> Just format the tokens , without any wrapping tags . Yield individual lines . <EoL>
<BoL> Return the css class of this token type prefixed with the classprefix option . <EoL>
<BoL> Return the css classes of this token type prefixed with the classprefix option . <EoL>
<BoL> Highlighted the lines specified in the ` hl_lines ` option by post-processing the token stream coming from ` _format_lines ` . <EoL>
<BoL> Format `` tokensource `` , an iterable of `` ( tokentype , tokenstring ) `` tuples and write it into `` outfile `` . <EoL>
<BoL> The formatting process uses several nested generators ; which of them are used is determined by the user 's options . <EoL>
<BoL> Return CSS style definitions for the classes produced by the current highlighting style . `` arg `` can be a string or list of selectors to insert before the token type classes . <EoL>
<BoL> Wrap the `` source `` , which is a generator yielding individual lines , in custom generators . <EoL>
<BoL> Get a lexer by an alias . <EoL>
<BoL> Return all the links in the document , layed out by tag and operationId . <EoL>
<BoL> Return a single field in a link . <EoL>
<BoL> Return a single link in the document . <EoL>
<BoL> Return all the links in the document , layed out by tag and operationId . <EoL>
<BoL> Return a single field in a link . <EoL>
<BoL> Return a single link in the document . <EoL>
<BoL> Return the valid schema types as a set . <EoL>
<BoL> Return true if all types are valid , and there are no type constraints . <EoL>
<BoL> Return the Python representation of `` s `` ( a `` str `` instance containing a JSON document ) . <EoL>
<BoL> Decode a JSON document from `` s `` ( a `` str `` beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in `` s `` where the document ended . <EoL>
<BoL> Override for isinstance ( instance , cls ) . <EoL>
<BoL> Override for issubclass ( subclass , cls ) . <EoL>
<BoL> Debug helper to print the ABC registry . <EoL>
<BoL> Register a virtual subclass of an ABC . <EoL>
<BoL> Coerce a primitive into a uniquely hashable type , for uniqueness checks . <EoL>
<BoL> This is a fallback technique at best . I 'm not sure if using the registry for this guarantees us the correct answer for all CSIDL_* names . <EoL>
<BoL> Return full path to the user-shared data dir for this application . <EoL>
<BoL> Return full path to the user-shared data dir for this application . <EoL>
<BoL> Return full path to the user-specific cache dir for this application . <EoL>
<BoL> Return full path to the user-specific config dir for this application . <EoL>
<BoL> Return full path to the user-specific data dir for this application . <EoL>
<BoL> Return full path to the user-specific log dir for this application . <EoL>
<BoL> Return full path to the user-specific state dir for this application . <EoL>
<BoL> get an ObjC Class by name <EoL>
<BoL> ensure utf8 bytes <EoL>
<BoL> Wrapper for : [ [ NSProcessInfo processInfo ] beginActivityWithOptions : ( uint64 ) options reason : ( str ) reason ] <EoL>
<BoL> end a process activity assertion <EoL>
<BoL> create a selector name ( for methods ) <EoL>
<BoL> end the caffeinated state started by ` nope ` <EoL>
<BoL> is napping allowed ? <EoL>
<BoL> disable App Nap by setting NSActivityUserInitiatedAllowingIdleSystemSleep <EoL>
<BoL> Create a new appscript reference from an aem reference . <EoL>
<BoL> Print help . Use help ( '-h ' ) for more info . <EoL>
<BoL> Launch a non-running application in the background and send it a 'launch ' event . <EoL>
<BoL> command : Command -- command reference parameters : tuple -- two-item tuple containing tuple of positional args and dict of keyword args realerror : Exception -- the original error raised codecs : AppData -- used to unpack error data as needed <EoL>
<BoL> aemapplicationclass : class -- aem.Application or equivalent constructor : str -- indicates how to construct the aem.Application instance ( 'path ' , 'pid ' , 'url ' , 'aemapp ' , 'current ' ) identifier : any -- value identifying the target application ( its type is dependent on constructor parameter ) terms : bool | module | tuple -- if True , retrieve terminology from target application dynamically ; if false , use only default terminology ; if static glue module or tuple , use terminology from that aemconstructoroptions -- any additional keyword arguments to pass to aemapplicationclass constructor ( e.g . newinstance , hide ) <EoL>
<BoL> Register custom unit type definitions with this Codecs instance e.g . Adobe apps define additional unit types ( ciceros , pixels , etc . ) <EoL>
<BoL> Initialises application target and terminology lookup tables . Called automatically the first time clients retrieve target , typebycode , typebyname , referencebycode , referencebyname ; clients should not need to call it themselves . <EoL>
<BoL> When unpacking object specifiers , unlike AppleScript , appscript caches the original AEDesc for efficiency , allowing the resulting reference to be re-packed much more quickly . <EoL>
<BoL> Specify the AE type for packing str objects . Default is kae.typeUnicodeText , but some older non-Unicode-aware Carbon may require kae.typeChar or kae.typeIntlText . <EoL>
<BoL> Clients may override this to provide additional packers . <EoL>
<BoL> Unpack an Apple event descriptor . desc : aem.ae.AEDesc -- an Apple event descriptor Result : anything -- a Python value , or the AEDesc object if no decoder is found <EoL>
<BoL> Clients may override this to provide additional unpackers . <EoL>
<BoL> References may be compared for equality . <EoL>
<BoL> References are immutable , so may be used as dictionary keys . <EoL>
<BoL> References may be compared for equality . <EoL>
<BoL> AND ( test , ... ) -- > logical AND test <EoL>
<BoL> OR ( test , ... ) -- > logical OR test <EoL>
<BoL> Take an aem reference , e.g . <EoL>
<BoL> Get aetes from local/remote app via an ascrgdte event ; result is a list of byte strings . <EoL>
<BoL> aetes : list of aem.ae.AEDesc <EoL>
<BoL> Dump application terminology data to Python module . <EoL>
<BoL> Dump terminology data to Python module . tables : tuple of list -- five-item tuple : ( classes , enums , properties , elements , commands ) sourcepath : str -- path to source application/scripting addition modulepath : str -- path to generated module <EoL>
<BoL> Build terminology tables from a list of unpacked aete byte strings . Result : tuple of dict -- ( typebycode , typebyname , referencebycode , referencebyname ) <EoL>
<BoL> Build terminology tables for an application . aemapp : aem.Application Result : tuple of dict -- ( typebycode , typebyname , referencebycode , referencebyname ) <EoL>
<BoL> Build terminology tables from a dumped terminology module . Result : tuple of dict -- ( typebycode , typebyname , referencebycode , referencebyname ) <EoL>
<BoL> Read a 2-byte integer . <EoL>
<BoL> Read a MacRoman-encoded Pascal keyword string . <EoL>
<BoL> Read a 4-byte string ( really a long , but represented as an 4-character 8-bit string for readability ) . <EoL>
<BoL> Read a 4-byte OSType . <EoL>
<BoL> : param argument_parser : The argument parser to autocomplete on : type argument_parser : : class : ` argparse.ArgumentParser ` : param always_complete_options : Controls the autocompletion of option strings if an option string opening character ( normally `` - `` ) has not been entered . <EoL>
<BoL> Get the next positional action if it exists . <EoL>
<BoL> Since argparse does n't support much introspection , we monkey-patch it to replace the parse_known_args method and all actions with hooks that tell us which action was last taken or about to be taken , and let us have the parser figure out which subparsers need to be activated ( then recursively monkey-patch those ) . We save all active ArgumentParsers to extract all their possible option names later . <EoL>
<BoL> Visits the active parsers and their actions , executes their completers or introspects them to collect their option strings . Returns the resulting completions as a list of strings . <EoL>
<BoL> Ensures collected completions are Unicode text , de-duplicates them , and excludes those specified by `` exclude `` . Returns the filtered completions as an iterable . <EoL>
<BoL> This function returns a mapping of option names to their help strings for displaying to the user <EoL>
<BoL> If the word under the cursor started with a quote ( as indicated by a nonempty `` cword_prequote `` ) , escapes occurrences of that quote character in the completions , and adds the quote to the beginning of each completion . Otherwise , escapes all characters that bash splits words on ( `` COMP_WORDBREAKS `` ) , and removes portions of completions before the first colon if ( `` COMP_WORDBREAKS `` ) contains a colon . <EoL>
<BoL> Alternate entry point for using the argcomplete completer in a readline-based REPL . See also ` rlcompleter < https : //docs.python.org/2/library/rlcompleter.html # completer-objects > ` _ . Usage : <EoL>
<BoL> Returns True if action will necessarily consume the next argument . isoptional indicates whether the argument is an optional ( starts with - ) . <EoL>
<BoL> Returns True if action could consume more arguments ( i.e. , its pattern is open ) . <EoL>
<BoL> Returns False if the parse would raise an error if no more arguments are given to this action , True otherwise . <EoL>
<BoL> Provide completions on prefix <EoL>
<BoL> Create the completer <EoL>
<BoL> Prints **args** to standard error when running completions . This will interrupt the user 's command line interaction ; use it to indicate an error condition that is preventing your completer from working . <EoL>
<BoL> Wrapper for : meth : ` argparse.ArgumentParser.parse_args ` . <EoL>
<BoL> This method is copied verbatim from ArgumentDefaultsHelpFormatter with a couple of lines added just before the end . <EoL>
<BoL> A wrapper for : func : ` add_commands ` . <EoL>
<BoL> Defines alternative command name ( s ) for given function ( along with its original name ) . Usage : : <EoL>
<BoL> Declares an argument for given function . Does not register the function anywhere , nor does it modify the function in any way . <EoL>
<BoL> Adds types , actions , etc . <EoL>
<BoL> Returns argument specification for given function . Omits special arguments of instance methods ( ` self ` ) and static methods ( usually ` cls ` or something like this ) . <EoL>
<BoL> Returns the : class : ` argparse._SubParsersAction ` instance for given : class : ` ArgumentParser ` instance as would have been returned by : meth : ` ArgumentParser.add_subparsers ` . The problem with the latter is that it only works once and raises an exception on the second attempt , and the public API seems to lack a method to get *existing* subparsers . <EoL>
<BoL> Sets default command ( i.e . a function ) for given parser . <EoL>
<BoL> An ` inspect.getargspec ` with a relaxed sanity check to support Cython . <EoL>
<BoL> Adds support for shell completion via argcomplete_ by patching given ` argparse.ArgumentParser ` ( sub ) class . <EoL>
<BoL> A shortcut for typical confirmation prompt . <EoL>
<BoL> Marks given function as expecting a namespace object . <EoL>
<BoL> Sets given string as command name instead of the function name . The string is used verbatim without further processing . <EoL>
<BoL> Decorator . Wraps given exceptions into : class : ` ~argh.exceptions.CommandError ` . Usage : : <EoL>
<BoL> A wrapper for : func : ` dispatch ` that creates a one-command parser . Uses : attr : ` PARSER_FORMATTER ` . <EoL>
<BoL> A wrapper for : func : ` dispatch ` that creates a parser , adds commands to the parser and dispatches them . Uses : attr : ` PARSER_FORMATTER ` . <EoL>
<BoL> Assumes that ` function ` is a callable . <EoL>
<BoL> Prompts user for input . Correctly handles prompt message encoding . <EoL>
<BoL> Writes given line to given output file . See : func : ` encode_output ` for details . <EoL>
<BoL> Encodes given value so it can be written to given file object . <EoL>
<BoL> Returns all arguments containing given string ( or list thereof ) <EoL>
<BoL> Returns all arguments not containing given string ( or list thereof ) <EoL>
<BoL> Tests if given string is contained in any stored argument . <EoL>
<BoL> Tests if given object is in arguments list . Accepts strings and lists of strings . <EoL>
<BoL> Tests if given [ list of ] string is at given index . <EoL>
<BoL> Returns first found index of given value ( or list of values ) <EoL>
<BoL> Returns first found index containing value ( or list of values ) <EoL>
<BoL> Returns first found index not containing value ( or list of values ) <EoL>
<BoL> Returns argument at given index , else none . <EoL>
<BoL> Returns first argument that contains given string . <EoL>
<BoL> Returns true if argument exists at given index . Accepts : integer . <EoL>
<BoL> Removes and Returns value at given index , else none . <EoL>
<BoL> Removes given arg ( or list thereof ) from Args object . <EoL>
<BoL> Returns all arguments beginning with given string ( or list thereof ) <EoL>
<BoL> Returns value of argument after given found argument ( or list thereof ) . <EoL>
<BoL> Expands directories and globs in given path . <EoL>
<BoL> Tests if an object is a collection . Strings do n't count . <EoL>
<BoL> Return a list of paths matching a pathname pattern . <EoL>
<BoL> Returns a `` datetime `` object , converted to the specified timezone . <EoL>
<BoL> Returns a new : class : ` Arrow < arrow.arrow.Arrow > ` object , representing the `` ceiling '' of the timespan of the : class : ` Arrow < arrow.arrow.Arrow > ` object in a given timeframe . Equivalent to the second element in the 2-tuple returned by : func : ` span < arrow.arrow.Arrow.span > ` . <EoL>
<BoL> Returns a new : class : ` Arrow < arrow.arrow.Arrow > ` object , cloned from the current one . <EoL>
<BoL> Returns a ctime formatted representation of the date and time . <EoL>
<BoL> Returns a `` date `` object with the same year , month and day . <EoL>
<BoL> Returns the daylight savings time adjustment . <EoL>
<BoL> Returns a new : class : ` Arrow < arrow.arrow.Arrow > ` object , representing the `` floor '' of the timespan of the : class : ` Arrow < arrow.arrow.Arrow > ` object in a given timeframe . Equivalent to the first element in the 2-tuple returned by : func : ` span < arrow.arrow.Arrow.span > ` . <EoL>
<BoL> Serializes for the `` for_json `` protocol of simplejson . <EoL>
<BoL> Returns a string representation of the : class : ` Arrow < arrow.arrow.Arrow > ` object , formatted according to a format string . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object from a `` date `` and optional replacement timezone . Time values are set to 0 . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object from a `` datetime `` and optional replacement timezone . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object from a timestamp , converted to the given timezone . <EoL>
<BoL> Returns a localized , humanized representation of a relative difference in time . <EoL>
<BoL> Returns an iterator of tuples , each : class : ` Arrow < arrow.arrow.Arrow > ` objects , representing a series of intervals between two inputs . <EoL>
<BoL> Returns a 3-tuple , ( ISO year , ISO week number , ISO weekday ) . <EoL>
<BoL> Returns an ISO 8601 formatted representation of the date and time . <EoL>
<BoL> Returns the ISO day of the week as an integer ( 1-7 ) . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object , representing `` now '' in the given timezone . <EoL>
<BoL> Returns an iterator of : class : ` Arrow < arrow.arrow.Arrow > ` objects , representing points in time between two inputs . <EoL>
<BoL> Returns a new : class : ` Arrow < arrow.arrow.Arrow > ` object with attributes updated according to inputs . <EoL>
<BoL> Returns a new : class : ` Arrow < arrow.arrow.Arrow > ` object with attributes updated according to inputs . <EoL>
<BoL> Returns two new : class : ` Arrow < arrow.arrow.Arrow > ` objects , representing the timespan of the : class : ` Arrow < arrow.arrow.Arrow > ` object in a given timeframe . <EoL>
<BoL> Returns an iterator of tuples , each : class : ` Arrow < arrow.arrow.Arrow > ` objects , representing a series of timespans between two inputs . <EoL>
<BoL> Formats in the style of `` datetime.strptime `` . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object from a date string and format , in the style of `` datetime.strptime `` . Optionally replaces the parsed timezone . <EoL>
<BoL> Returns a `` time `` object with the same hour , minute , second , microsecond . <EoL>
<BoL> Returns a `` time.struct_time `` , in the current timezone . <EoL>
<BoL> Returns a `` time `` object with the same hour , minute , second , microsecond and tzinfo . <EoL>
<BoL> Returns a new : class : ` Arrow < arrow.arrow.Arrow > ` object , converted to the target timezone . <EoL>
<BoL> Returns the proleptic Gregorian ordinal of the date . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object from a timestamp , in UTC time . <EoL>
<BoL> Constructs an : class : ` Arrow < arrow.arrow.Arrow > ` object , representing `` now '' in UTC time . <EoL>
<BoL> Returns a `` timedelta `` object representing the whole number of minutes difference from UTC time . <EoL>
<BoL> Returns a `` time.struct_time `` , in UTC time . <EoL>
<BoL> Returns the day of the week as an integer ( 0-6 ) . <EoL>
<BoL> Returns an : class : ` Arrow < arrow.arrow.Arrow > ` object based on flexible inputs . <EoL>
<BoL> Returns an : class : ` Arrow < arrow.arrow.Arrow > ` object , representing `` now '' in the given timezone . <EoL>
<BoL> Returns an : class : ` Arrow < arrow.arrow.Arrow > ` object , representing `` now '' in UTC time . <EoL>
<BoL> Returns an : class : ` .ArrowFactory ` for the specified : class : ` Arrow < arrow.arrow.Arrow > ` or derived type . <EoL>
<BoL> Calls the default : class : ` ArrowFactory < arrow.factory.ArrowFactory > ` `` get `` method . <EoL>
<BoL> Calls the default : class : ` ArrowFactory < arrow.factory.ArrowFactory > ` `` now `` method . <EoL>
<BoL> Calls the default : class : ` ArrowFactory < arrow.factory.ArrowFactory > ` `` utcnow `` method . <EoL>
<BoL> Return a version of this object represented entirely using integer values for the relative attributes . <EoL>
<BoL> Returns the day abbreviation for a specified day of the week . <EoL>
<BoL> Returns the day name for a specified day of the week . <EoL>
<BoL> Describes a delta within a timeframe in plain language . <EoL>
<BoL> Returns the meridian indicator for a specified hour and format token . <EoL>
<BoL> Returns the month abbreviation for a specified month of the year . <EoL>
<BoL> Returns the month name for a specified month of the year . <EoL>
<BoL> Returns the month number for a month specified by name or abbreviation . <EoL>
<BoL> Returns the ordinal format of a given integer <EoL>
<BoL> Returns the year for specific locale if available <EoL>
<BoL> Returns the year for specific locale if available <EoL>
<BoL> Czech aware time frame format function , takes into account the differences between past and future forms . <EoL>
<BoL> Hebrew couple of < timeframe > aware <EoL>
<BoL> Slovak aware time frame format function , takes into account the differences between past and future forms . <EoL>
<BoL> Thai normally does n't have any space between words <EoL>
<BoL> Thai always use Buddhist Era ( BE ) which is CE + 543 <EoL>
<BoL> Thai always use Buddhist Era ( BE ) which is CE + 543 <EoL>
<BoL> Returns an appropriate : class : ` Locale < arrow.locales.Locale > ` corresponding to an inpute locale name . <EoL>
<BoL> Least-recently-used cache decorator . <EoL>
<BoL> Equivalent to list ( iterable ) . warn_text will be emitted on all non-iterator operations . <EoL>
<BoL> Inner logic of receive_many ; takes channels , groups by shard , and returns { connection_index : list_names ... } if a query is needed or None for a vacuously empty response . <EoL>
<BoL> Takes an input channel_capacity dict and returns the compiled list of regexes that get_capacity will look for as self.channel_capacity/ <EoL>
<BoL> Returns the correct connection for the current thread . <EoL>
<BoL> Maps the value to a node value between 0 and 4095 using MD5 , then down to one of the ring nodes . <EoL>
<BoL> Deserializes from a byte string . <EoL>
<BoL> Deletes all messages and groups on all shards . <EoL>
<BoL> Gets the correct capacity for the given channel ; either the default , or a matching result from channel_capacity . Returns the first matching result ; if you want to control the order of matches , use an ordered dict as input . <EoL>
<BoL> Adds the channel to the named group for at least 'expiry' seconds ( expiry defaults to message expiry if not provided ) . <EoL>
<BoL> Returns all channels in the group as an iterable . <EoL>
<BoL> Removes the channel from the named group if it is in the group ; does nothing otherwise ( does not error ) <EoL>
<BoL> Given a single encryption key , returns a Fernet instance using it . <EoL>
<BoL> Twisted-native implementation of receive_many . <EoL>
<BoL> Sends a message to the entire group . <EoL>
<BoL> Serializes message to a byte string . <EoL>
<BoL> The curve of points satisfying y^2 = x^3 + a*x + b ( mod p ) <EoL>
<BoL> : param point : A Point object <EoL>
<BoL> : param other : A PrimePoint object <EoL>
<BoL> : param other : A PrimePoint object <EoL>
<BoL> : param curve : A PrimeCurve object <EoL>
<BoL> : param other : An integer to multiple the Point by <EoL>
<BoL> : param other : An integer to multiple the Point by <EoL>
<BoL> : return : A PrimePoint object that is twice this point <EoL>
<BoL> Compute the modular inverse of a ( mod p ) <EoL>
<BoL> Takes a multi-line string and does the following : <EoL>
<BoL> create_string_buffer ( aBytes ) - > character array create_string_buffer ( anInteger ) - > character array create_string_buffer ( aBytes , anInteger ) - > character array <EoL>
<BoL> Ensure a byte string representing a positive integer is a specific width ( in bytes ) <EoL>
<BoL> Converts a byte string to an integer <EoL>
<BoL> Converts an integer to a byte string <EoL>
<BoL> Error handler for decoding UTF-8 parts of a URI into an IRI . Leaves byte sequences encoded in % XX format , but as part of a unicode string . <EoL>
<BoL> Quotes a unicode string for use in a URL <EoL>
<BoL> Unquotes a URI portion from a byte string into unicode using UTF-8 <EoL>
<BoL> Normalizes and encodes a unicode IRI into an ASCII byte string URI <EoL>
<BoL> Returns a user-readable name for the type of an object <EoL>
<BoL> unquote_to_bytes ( 'abc % 20def ' ) - > b'abc def ' . <EoL>
<BoL> Converts an ASCII URI byte string into a unicode IRI <EoL>
<BoL> Parse a URL into 5 components : < scheme > : // < netloc > / < path > ? < query > # < fragment > Return a 5-tuple : ( scheme , netloc , path , query , fragment ) . <EoL>
<BoL> Combine the elements of a tuple as returned by urlsplit ( ) into a complete URL as a string . <EoL>
<BoL> Create an IncrementalDecoder instance . <EoL>
<BoL> Return the current state of the decoder . <EoL>
<BoL> Reset the decoder to the initial state . <EoL>
<BoL> Set the current state of the decoder . <EoL>
<BoL> Creates an IncrementalEncoder instance . <EoL>
<BoL> Return the current state of the encoder . <EoL>
<BoL> Resets the encoder to the initial state . <EoL>
<BoL> Set the current state of the encoder . state must have been returned by getstate ( ) . <EoL>
<BoL> Set the input stream 's current position . <EoL>
<BoL> Registers the teletex codec <EoL>
<BoL> Search function for teletex codec that is passed to codecs.register ( ) <EoL>
<BoL> A fall-back method for print ( ) in Python 2 <EoL>
<BoL> Implements the copy.copy ( ) interface <EoL>
<BoL> Implements the copy.deepcopy ( ) interface <EoL>
<BoL> Allows deleting optional or default fields by name or index <EoL>
<BoL> Allows accessing fields by name or index <EoL>
<BoL> Allows setting field values before passing everything else along to Asn1Value.__init__ ( ) <EoL>
<BoL> : return : An iterator of field key names <EoL>
<BoL> : return : Integer <EoL>
<BoL> : return : A unicode string <EoL>
<BoL> Allows settings fields by name or index <EoL>
<BoL> Since str is different in Python 2 and 3 , this calls the appropriate method , __unicode__ ( ) or __bytes__ ( ) <EoL>
<BoL> A fall-back method for print ( ) in Python 3 <EoL>
<BoL> Copies the contents of another Sequence object to itself <EoL>
<BoL> Determine how a value for a field should be constructed <EoL>
<BoL> : return : A boolean - if the sequence or any children ( recursively ) have been mutated <EoL>
<BoL> Builds a child object if the child has only been parsed into a tuple so far <EoL>
<BoL> Contructs an appropriate Asn1Value object for a field <EoL>
<BoL> Constructs a new copy of the current object , preserving any tagging <EoL>
<BoL> Parses the contents and generates Asn1Value objects based on the definitions from _fields . <EoL>
<BoL> Updates the .contents attribute of the value with the encoded value of all of the child objects <EoL>
<BoL> Generates _field_map , _field_ids and _oid_nums for use in parsing <EoL>
<BoL> Copies the object , preserving any special tagging from it <EoL>
<BoL> Show the binary data and parsed data in a tree structure <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Loads a BER/DER-encoded byte string using the current class as the spec <EoL>
<BoL> Copies the object , applying a new tagging to it <EoL>
<BoL> Determines the spec to use for the field specified . <EoL>
<BoL> Copies the object , removing any special tagging from it <EoL>
<BoL> Sets the value of the object before passing to Asn1Value.__init__ ( ) <EoL>
<BoL> Copies the contents of another Any object to itself <EoL>
<BoL> Show the binary data and parsed data in a tree structure <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Parses the contents generically , or using a spec with optional params <EoL>
<BoL> : param other : The other Primitive to compare to <EoL>
<BoL> Sets the value of the object before passing to Asn1Value.__init__ ( ) <EoL>
<BoL> : return : A unicode string <EoL>
<BoL> Copies the contents of another Asn1Value object to itself <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Converts a dotted unicode string OID into a mapped unicode string <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Converts a mapped unicode string value into a dotted unicode string OID <EoL>
<BoL> Checks to ensure implicit tagging is not being used since it is incompatible with Choice , then forwards on to Asn1Value.__init__ ( ) The Choice type can not be implicitly tagged even if in an implicit module - due to its nature any tagging must be explicit <EoL>
<BoL> Copies the contents of another Choice object to itself <EoL>
<BoL> : return : A unicode string of a human-friendly representation of the class and tag <EoL>
<BoL> Generates _id_map from _alternatives to allow validating contents <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Loads a BER/DER-encoded byte string using the current class as the spec <EoL>
<BoL> Parses the detected alternative <EoL>
<BoL> Ensures that the class and tag specified exist as an alternative <EoL>
<BoL> Reads a signature from a byte string encoding accordint to IEEE P1363 , which is used by Microsoft 's BCryptSignHash ( ) function . <EoL>
<BoL> Dumps a signature to a byte string compatible with Microsoft's BCryptVerifySignature ( ) function . <EoL>
<BoL> Generates _reverse_map from _map <EoL>
<BoL> : return : An integer <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> : return : A byte string <EoL>
<BoL> A method to return a chunk of data that can be combined for constructed method values <EoL>
<BoL> Copies the contents of another OctetString object to itself <EoL>
<BoL> : return : A concatenation of the native values of the contained chunks <EoL>
<BoL> Converts the current object into an object of a different class . The new class must use the ASN.1 encoding for the value . <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> : param other : The other Primitive to compare to <EoL>
<BoL> The optional parameter is not used , but rather included so we don't have to delete it from the parameter dictionary when passing as keyword args <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> : return : A unicode string <EoL>
<BoL> Copies the contents of another AbstractString object to itself <EoL>
<BoL> Sets the value of the string <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Retrieves a boolean version of one of the bits based on a name from the _map <EoL>
<BoL> Sets one of the bits based on a name from the _map <EoL>
<BoL> Allows reconstructing indefinite length values <EoL>
<BoL> Copies the contents of another Constructable object to itself <EoL>
<BoL> Generates _reverse_map from _map <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> : return : True or False <EoL>
<BoL> : return : True or False <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> A byte string of the DER-encoded contents <EoL>
<BoL> Implements the copy.copy ( ) interface <EoL>
<BoL> Implements the copy.deepcopy ( ) interface <EoL>
<BoL> Allows accessing children by index <EoL>
<BoL> : param value : A native Python datatype to initialize the object value with <EoL>
<BoL> : return : An iterator of child values <EoL>
<BoL> : return : Integer <EoL>
<BoL> : return : A unicode string <EoL>
<BoL> Allows settings children by index <EoL>
<BoL> Since str is different in Python 2 and 3 , this calls the appropriate method , __unicode__ ( ) or __bytes__ ( ) <EoL>
<BoL> : return : A unicode string <EoL>
<BoL> Copies the contents of another Concat object to itself <EoL>
<BoL> Copies the object <EoL>
<BoL> Show the binary data and parsed data in a tree structure <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Loads a BER/DER-encoded byte string using the current class as the spec <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Parses a date from a string based on its length <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Allows reconstructing indefinite length values <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> : return : A byte string <EoL>
<BoL> Copies the contents of another OctetBitString object to itself <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> : return : A byte string <EoL>
<BoL> Allows providing a parsed object that will be serialized to get the byte string value <EoL>
<BoL> Copies the contents of another ParsableOctetString object to itself <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Parses the contents generically , or using a spec with optional params <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> : param item : An object of the type cls._child_spec <EoL>
<BoL> Allows removing a child via index <EoL>
<BoL> Allows accessing children via index <EoL>
<BoL> Allows setting child objects and the _child_spec via the spec parameter before passing everything else along to Asn1Value.__init__ ( ) <EoL>
<BoL> : return : An iter ( ) of child objects <EoL>
<BoL> : return : An integer <EoL>
<BoL> Allows overriding a child via index <EoL>
<BoL> Copies the contents of another SequenceOf object to itself <EoL>
<BoL> : return : A boolean - if the sequence or any children ( recursively ) have been mutated <EoL>
<BoL> Builds a child object if the child has only been parsed into a tuple so far <EoL>
<BoL> Constructs a _child_spec value from a native Python data type , or an appropriate Asn1Value object <EoL>
<BoL> Parses the contents and generates Asn1Value objects based on the definitions from _child_spec . <EoL>
<BoL> Encodes all child objects into the contents for this object <EoL>
<BoL> Allows adding a child to the end of the sequence <EoL>
<BoL> Show the binary data and parsed data in a tree structure <EoL>
<BoL> Encodes the value using DER <EoL>
<BoL> Determines the spec to use for child values . <EoL>
<BoL> Parses the contents and generates Asn1Value objects based on the definitions from _fields . <EoL>
<BoL> Encodes all child objects into the contents for this object . <EoL>
<BoL> Generates _field_map , _field_ids and _oid_nums for use in parsing <EoL>
<BoL> Encodes all child objects into the contents for this object . <EoL>
<BoL> Parses a date from a string based on its length <EoL>
<BoL> Sets the value of the object <EoL>
<BoL> Prints out basic information about an Asn1Value object . Extracted for reuse among different classes that customize the debug information . <EoL>
<BoL> Builds a 2-element tuple used to identify fields by grabbing the class_ and tag from an Asn1Value class and the params dict being passed to it <EoL>
<BoL> Constructs the header bytes for an ASN.1 object <EoL>
<BoL> Checks if a value is properly tagged based on the spec , and re/untags as necessary <EoL>
<BoL> Parses a byte string into component parts <EoL>
<BoL> Parses a byte string generically , or using a spec with optional params <EoL>
<BoL> Converts old-style `` tag_type '' and `` tag '' params to `` explicit '' and `` implicit '' <EoL>
<BoL> : param year : The integer 0 <EoL>
<BoL> Raises a TypeError about the other object not being suitable for comparison <EoL>
<BoL> Performs strftime ( ) , always returning a unicode string <EoL>
<BoL> : return : An asn1crypto.util.extended_date of the date <EoL>
<BoL> : return : None or a datetime.timedelta ( ) of the daylight savings time offset <EoL>
<BoL> Formats the date as `` % Y- % m- % d % H : % M : % S '' with the sep param between the date and time portions <EoL>
<BoL> Formats the date using strftime ( ) <EoL>
<BoL> : return : A datetime.time object of the time <EoL>
<BoL> : return : None or the name of the timezone as a unicode string in Python 3 and a byte string in Python 2 <EoL>
<BoL> : return : None or a datetime.timedelta ( ) of the offset from UTC <EoL>
<BoL> Loads a BER/DER-encoded byte string and construct a universal object based on the tag value : <EoL>
<BoL> Creates an ECPoint object from the X and Y integer coordinates of the point <EoL>
<BoL> Returns the X and Y coordinates for this EC point , as native Python integersInvalid EC public key - first byte is incorrectCompressed representations of EC public keys are not supported due to patent US6252960 <EoL>
<BoL> Computes the public key corresponding to the current private key.Unable to compute public key for EC key using Implicit CA parametersUnable to compute public key for EC key over a characteristic two field <EoL>
<BoL> Unwraps the private key into an RSAPrivateKey , DSAPrivateKey or ECPrivateKey object <EoL>
<BoL> Wraps a private key in a PrivateKeyInfo structure <EoL>
<BoL> Unwraps an RSA public key into an RSAPublicKey object . Does not support DSA or EC public keys since they do not have an unwrapped form . <EoL>
<BoL> Wraps a public key in a PublicKeyInfo structure <EoL>
<BoL> Constructs a byte string of an ASN.1 DER-encoded value <EoL>
<BoL> Parses a byte string of ASN.1 BER/DER-encoded data . <EoL>
<BoL> Parses a byte string of ASN.1 BER/DER-encoded data to find the length <EoL>
<BoL> : param year : The integer 0 <EoL>
<BoL> Performs strftime ( ) , always returning a unicode string <EoL>
<BoL> Formats the date as % Y- % m- % d <EoL>
<BoL> Returns a new datetime.date or asn1crypto.util.extended_date object with the specified components replaced <EoL>
<BoL> Formats the date using strftime ( ) <EoL>
<BoL> Return all the python files in a source tree <EoL>
<BoL> Returns the file and line number of a code object . <EoL>
<BoL> Parse a python file into an AST . <EoL>
<BoL> Called if no explicit visitor function exists for a node . <EoL>
<BoL> Visit a node . <EoL>
<BoL> Replace a node after first checking integrity of node stack . <EoL>
<BoL> All the node-specific handlers are setup at object initialization time . <EoL>
<BoL> Walk the tree starting at a given node . <EoL>
<BoL> use write instead of using result directly for initial data , because it may flush preceding data into result . <EoL>
<BoL> self.write is a closure for performance ( to reduce the number of attribute lookups ) . <EoL>
<BoL> Given an AST node object , returns the precedence . <EoL>
<BoL> Given an AST node object , returns a string containing the symbol . <EoL>
<BoL> Set the precedence ( of the parent ) into the children . <EoL>
<BoL> Prettify the source . <EoL>
<BoL> Set the precedence ( of the parent ) into the children . <EoL>
<BoL> Return string 's python representation in triple quotes . <EoL>
<BoL> Open a file in read only mode using the encoding detected by detect_encoding ( ) . <EoL>
<BoL> This ugly little monkey-patcher adds in a helper class to all the AST node types . <EoL>
<BoL> This is optimized to compare two AST trees for equality . It makes several assumptions that are currently true for AST trees used by rtrip , and it does n't examine the _attributes . <EoL>
<BoL> Attempt to add parentheses around the line in order to make it splittable . <EoL>
<BoL> Split a line into groups by assignment ( including augmented assignment ) <EoL>
<BoL> Split a group into two subgroups . The first will be appended to the current line , the second will start the new line . <EoL>
<BoL> Split inputs according to lines . <EoL>
<BoL> We have a line that is too long , so we 're going to try to wrap it . <EoL>
<BoL> Split the string up and force-feed some replacements to make sure it will round-trip OK <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or None <EoL>
<BoL> Attempt to find the line that this node appears on . <EoL>
<BoL> method used in filter_stmts <EoL>
<BoL> we do n't know how to resolve a statement by default <EoL>
<BoL> Get a name for nice representation . <EoL>
<BoL> Visit this node using the given visitor . <EoL>
<BoL> Get the source code that this node represents . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Whether this node defines something that is callable . <EoL>
<BoL> Search for the sequence that contains this child . <EoL>
<BoL> The first parent frame node . <EoL>
<BoL> Check if this node inherits from the given type . <EoL>
<BoL> Get a generator of the inferred values . <EoL>
<BoL> Get a list of the inferred values . <EoL>
<BoL> Instantiate an instance of the defined class . <EoL>
<BoL> An optimized version of list ( get_children ( ) ) [ -1 ] <EoL>
<BoL> Find the field of this node that contains the given child . <EoL>
<BoL> Get the node closest to this one from the given list of nodes . <EoL>
<BoL> The next sibling statement node . <EoL>
<BoL> Get the nodes ( including this one or below ) of the given type . <EoL>
<BoL> Check if this node is the parent of the given node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> The previous sibling statement . <EoL>
<BoL> Outputs a representation of a non-tuple/list , non-node that's contained within an AST , including strings.Outputs a representation of a sequence that 's contained within an AST.Outputs a strings representation of an astroid node . <EoL>
<BoL> Return the root node of the syntax tree . <EoL>
<BoL> The first parent node defining a new scope . <EoL>
<BoL> Define that the given name is declared in the given statement node . <EoL>
<BoL> The first parent node , including self , marked as statement node . <EoL>
<BoL> : param vararg : The name of the variable length arguments . : type vararg : str or NoneThe name of the variable length arguments.The name of the variable length keyword arguments.The names of the required arguments.The default values for arguments that can be passed positionally.The keyword arguments that can not be passed positionally.The default values for keyword arguments that can not be passed positionally.The type annotations of arguments that can be passed positionally.The type annotations of arguments that can not be passed positionally . <EoL>
<BoL> Get the default value for an argument . <EoL>
<BoL> Get the index and : class : ` AssignName ` node for given name . <EoL>
<BoL> Get the arguments formatted as string . <EoL>
<BoL> Check if the given name is defined in the arguments . <EoL>
<BoL> The next sibling statement node . <EoL>
<BoL> The previous sibling statement . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param attrname : The name of the attribute being assigned to . : type attrname : str or NoneThe name of the attribute being assigned to . <EoL>
<BoL> infer a AssignName/AssignAttr : need to inspect the RHS part of the assign node <EoL>
<BoL> infer an Attribute node by using getattr on the associated object <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param name : The name that is assigned to . : type name : str or NoneThe name that is assigned to . <EoL>
<BoL> Filter the given list of statements to remove ignorable statements . <EoL>
<BoL> Lookup the inferred values of the given variable . <EoL>
<BoL> infer a Name : use name lookup rules <EoL>
<BoL> handle block line numbers range for try/finally , for , if and while statements <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Check if a local is defined in this scope . <EoL>
<BoL> The first node the defines the given local . <EoL>
<BoL> Iterate over the names of locals defined in this scoped node . <EoL>
<BoL> Define that the given name is declared in the given statement node . <EoL>
<BoL> append a child , linking it in the tree <EoL>
<BoL> method used in _filter_stmts to get statements and trigger break <EoL>
<BoL> inference 's end for node such as Module , ClassDef , FunctionDef , Const ... <EoL>
<BoL> XXX method for interfacing the scope lookup <EoL>
<BoL> Append a child that should alter the locals of this scope node . <EoL>
<BoL> Get the names of each of the arguments . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Whether this node defines something that is callable . <EoL>
<BoL> Get the qualified names of each of the decorators on this function . <EoL>
<BoL> A human readable type of this node . <EoL>
<BoL> The first parent frame node . <EoL>
<BoL> this method does n't look in the instance_attrs dictionary since it's done by an Instance proxy at inference time . <EoL>
<BoL> Inferred getattr , which returns an iterator of inferred statements . <EoL>
<BoL> Infer what the function returns when called . <EoL>
<BoL> Check if the method is abstract . <EoL>
<BoL> Check if the function is bound to an instance or class . <EoL>
<BoL> Check if this is a generator function . <EoL>
<BoL> Check if this function node represents a method . <EoL>
<BoL> Get the names of the locals and the node that defines the local . <EoL>
<BoL> The names of locals defined in this scoped node . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> Get the 'qualified ' name of the node . <EoL>
<BoL> The first parent node defining a new scope . <EoL>
<BoL> Lookup where the given names is assigned . <EoL>
<BoL> The nodes that define the locals in this scoped node . <EoL>
<BoL> Infer names and other nodes from a *with* statement . <EoL>
<BoL> Get the child nodes below this node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param attrname : The name of the attribute . : type attrname : str or NoneThe name of the attribute . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param op : The operator that is being combined with the assignment . <EoL>
<BoL> Inference logic for augmented binary operations . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get a list of type errors which can occur during inference . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> wrap bound methods of attrs in a InstanceMethod proxies <EoL>
<BoL> inferred getatt <EoL>
<BoL> infer what a class instance is returning when called <EoL>
<BoL> : param op : The operator . : type : str or NoneThe operator . <EoL>
<BoL> Binary operation inference logic . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get a list of type errors which can occur during inference . <EoL>
<BoL> : param op : The operator . : type : str or NoneThe operator . <EoL>
<BoL> Infer a boolean operation ( and / or / not ) . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Try to infer what type.__new__ ( mcs , name , bases , attrs ) returns . <EoL>
<BoL> infer a Call node by trying to guess what the function returns <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Return an iterator with the inferred slots . <EoL>
<BoL> Search the given name in the implicit and the explicit metaclass . <EoL>
<BoL> Iterate over the base classes in prefixed depth first order . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Whether this node defines something that is callable . <EoL>
<BoL> Return the explicit declared metaclass for the current class . <EoL>
<BoL> A human readable type of this node . <EoL>
<BoL> Get an attribute from this class , using Python 's attribute semantic . <EoL>
<BoL> Return the inference of a subscript . <EoL>
<BoL> Whether this class directly inherits from the given node . <EoL>
<BoL> Check if the class has a custom __getattr__ or __getattribute__ . <EoL>
<BoL> Infer the possible values of the given variable . <EoL>
<BoL> Get implicitly defined class definition locals . <EoL>
<BoL> Get the implicit metaclass of the current class . <EoL>
<BoL> infer what a class is returning when called <EoL>
<BoL> Get the list of nodes associated to the given attribute name . <EoL>
<BoL> Iterate over the parents that define the given name as an attribute . <EoL>
<BoL> Get an : class : ` Instance ` of the : class : ` ClassDef ` node . <EoL>
<BoL> Whether this class is a subtype of the given type . <EoL>
<BoL> Get the list of assign nodes associated to the given name . <EoL>
<BoL> Iterate over the parents that define the given name . <EoL>
<BoL> Get the metaclass of this class . <EoL>
<BoL> Iterate over all of the method defined in this class and its parents . <EoL>
<BoL> Get the method resolution order , using C3 linearization . <EoL>
<BoL> Iterate over all of the method defined in this class only . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> Lookup where the given name is assigned . <EoL>
<BoL> Get all the slots for this node . <EoL>
<BoL> Get the child nodes below this node . <EoL>
<BoL> An optimized version of list ( get_children ( ) ) [ -1 ] <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param parent : The parent node in the syntax tree . : type parent : NodeNG or None <EoL>
<BoL> method used in filter_stmts <EoL>
<BoL> The type of assignment that this node performs . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param value : The value that the constant represents . : type value : objectThe value that the constant represents . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Get an item from this node if subscriptable . <EoL>
<BoL> Check if the node has a custom __getattr__ or __getattribute__ . <EoL>
<BoL> An iterator over the elements this node contains . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> The first parent node defining a new scope . <EoL>
<BoL> : param attrname : The name of the attribute that is being deleted . : type attrname : str or NoneThe name of the attribute that is being deleted . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param name : The name that is being deleted . : type name : str or NoneThe name that is being deleted . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or NoneThe key-value pairs contained in the dictionary . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Create a : class : ` Dict ` of constants from a live dictionary . <EoL>
<BoL> Get the key and value nodes below this node . <EoL>
<BoL> Get an item from this node . <EoL>
<BoL> An iterator over the keys this node contains . <EoL>
<BoL> An optimized version of list ( get_children ( ) ) [ -1 ] <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or NoneA map of the name of a local variable to the node defining the local . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> The first parent frame node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Check if this node handles any of the given exceptions . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get the child nodes below this node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or NoneA map of the name of a local variable to the node defining the local . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param names : The names being declared as global . : type names : list ( str ) The names being declared as global . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param names : The names being imported . : type names : list ( tuple ( str , str or None ) ) or NoneThe names being imported . <EoL>
<BoL> infer an Import node : return the imported module/object <EoL>
<BoL> eturn the ast for a module whose name is < modname > imported by < self > <EoL>
<BoL> get name from 'as ' name <EoL>
<BoL> infer a ImportFrom node : return the imported module/object <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Infer the truth value for an Instance <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param arg : The argument being assigned to . : type arg : Name or NoneThe argument being assigned to . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or NoneA map of the name of a local variable to the node defining it.The arguments that the function takes.The contents of the function body . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Infer what the function returns when called . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Create a node of this type from the given list of elements . <EoL>
<BoL> Get an item from this node . <EoL>
<BoL> An iterator over the elements this node contains . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Whether : pep : ` 328 ` absolute import behaviour has been enabled . <EoL>
<BoL> Get a range from where this node starts to where this node ends . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> A human readable type of this node . <EoL>
<BoL> Check if this module has been build from a .py file . <EoL>
<BoL> Infer the possible values of the given variable . <EoL>
<BoL> Get the ast for a given module as if imported from this module . <EoL>
<BoL> The next sibling statement node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> The previous sibling statement . <EoL>
<BoL> The list of the names that are publicly available in this module . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> Get the absolute module name for a relative import . <EoL>
<BoL> Lookup where the given variable is assigned . <EoL>
<BoL> The first parent node , including self , marked as statement node . <EoL>
<BoL> Get a stream to the underlying file or bytes . <EoL>
<BoL> The list of imported names when this module is 'wildcard imported ' . <EoL>
<BoL> : param name : The name that this node refers to . : type name : str or NoneThe name that this node refers to . <EoL>
<BoL> : param names : The names being declared as not local . : type names : list ( str ) The names being declared as not local . <EoL>
<BoL> : param nl : Whether to print a new line . : type nl : bool or NoneWhether to print a new line . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Check if this node raises a : class : ` NotImplementedError ` . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or NoneThe elements in the node . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> : param lineno : The line that this node appears on in the source code . : type lineno : int or NoneA map of the name of a local variable to the node defining the local . <EoL>
<BoL> Determine the boolean value of this node . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Wrap the empty attributes of the Slice in a Const node . <EoL>
<BoL> Infer the possible values of the given attribute on the slice . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> : param ctx : Whether the list is assigned to or loaded from . : type ctx : Context or NoneWhether the starred item is assigned to or loaded from . <EoL>
<BoL> Arguments : self : nodes.Starred node : TODO context : TODO asspath : TODO <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> : param ctx : Whether the subscripted item is assigned to or loaded from . : type ctx : Context or NoneWhether the subscripted item is assigned to or loaded from . <EoL>
<BoL> Inference for subscripts <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get an item from this node . <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> : param op : The operator . : type : str or NoneThe operator . <EoL>
<BoL> Infer what an UnaryOp should return when evaluated . <EoL>
<BoL> Infer what an UnaryOp should return when evaluated . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Get a list of type errors which can occur during inference . <EoL>
<BoL> The boundnode of the regular context with a function called on `` object.__new__ `` will be of type `` object `` , which is incorrect for the argument in general . If no context is given the `` object.__new__ `` call argument will correctly inferred except when inside a call that requires the additional context ( such as a classmethod ) of the boundnode to determine which class the method was called from <EoL>
<BoL> Inference on an Unknown node immediately terminates . <EoL>
<BoL> Get a range from the given line number to where this node ends . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Do some setup after initialisation . <EoL>
<BoL> Given a correct type comment , obtain a FunctionType object <EoL>
<BoL> Cache decorator used for inference tips <EoL>
<BoL> eturn true if the two given statements are mutually exclusive <EoL>
<BoL> Get a CallSite object from the given Call node . <EoL>
<BoL> Check if in the current CallSite were passed *invalid* arguments <EoL>
<BoL> Check if in the current CallSite were passed *invalid* keyword arguments <EoL>
<BoL> infer a function argument value according to the call context <EoL>
<BoL> Makes this visitor behave as a simple function <EoL>
<BoL> Stop newlines in docs being indented by self._stmt_list <EoL>
<BoL> Wrap child in parens only if required to keep same semantics <EoL>
<BoL> Wrap child if : - it has lower precedence - same precedence with position opposite to associativity direction <EoL>
<BoL> eturn a list of nodes to string <EoL>
<BoL> Return an astroid.AugAssign node as string <EoL>
<BoL> eturn an astroid.Function node as string <EoL>
<BoL> eturn an astroid.Assert node as string <EoL>
<BoL> eturn an astroid.Assign node as string <EoL>
<BoL> eturn an astroid.AssAttr node as string <EoL>
<BoL> eturn an astroid.AssName node as string <EoL>
<BoL> eturn an astroid.Getattr node as string <EoL>
<BoL> eturn an astroid.AugAssign node as string <EoL>
<BoL> eturn an astroid.BinOp node as string <EoL>
<BoL> eturn an astroid.BoolOp node as string <EoL>
<BoL> eturn an astroid.Break node as string <EoL>
<BoL> eturn an astroid.Call node as string <EoL>
<BoL> eturn an astroid.ClassDef node as string <EoL>
<BoL> eturn an astroid.Compare node as string <EoL>
<BoL> eturn an astroid.Comprehension node as string <EoL>
<BoL> eturn an astroid.Const node as string <EoL>
<BoL> eturn an astroid.Continue node as string <EoL>
<BoL> eturn an astroid.Decorators node as string <EoL>
<BoL> eturn an astroid.DelAttr node as string <EoL>
<BoL> eturn an astroid.Delete node as string <EoL>
<BoL> eturn an astroid.DelName node as string <EoL>
<BoL> eturn an astroid.Dict node as string <EoL>
<BoL> eturn an astroid.DictComp node as string <EoL>
<BoL> eturn an astroid.Ellipsis node as string <EoL>
<BoL> eturn an Empty node as string <EoL>
<BoL> dummy method for visiting an Empty node <EoL>
<BoL> eturn an astroid.Exec node as string <EoL>
<BoL> eturn an astroid.Discard node as string <EoL>
<BoL> eturn an astroid.ExtSlice node as string <EoL>
<BoL> eturn an astroid.For node as string <EoL>
<BoL> eturn an astroid.Function node as string <EoL>
<BoL> eturn an astroid.GeneratorExp node as string <EoL>
<BoL> eturn an astroid.Global node as string <EoL>
<BoL> eturn an astroid.If node as string <EoL>
<BoL> eturn an astroid.IfExp node as string <EoL>
<BoL> eturn an astroid.Import node as string <EoL>
<BoL> eturn an astroid.ImportFrom node as string <EoL>
<BoL> eturn an astroid.Index node as string <EoL>
<BoL> eturn an astroid.Keyword node as string <EoL>
<BoL> eturn an astroid.Lambda node as string <EoL>
<BoL> eturn an astroid.List node as string <EoL>
<BoL> eturn an astroid.ListComp node as string <EoL>
<BoL> eturn an astroid.Module node as string <EoL>
<BoL> eturn an astroid.Name node as string <EoL>
<BoL> eturn an astroid.Nonlocal node as string <EoL>
<BoL> eturn an astroid.Pass node as string <EoL>
<BoL> eturn an astroid.Print node as string <EoL>
<BoL> eturn an astroid.Raise node as string <EoL>
<BoL> eturn an astroid.Repr node as string <EoL>
<BoL> eturn an astroid.Return node as string <EoL>
<BoL> eturn an astroid.Set node as string <EoL>
<BoL> eturn an astroid.SetComp node as string <EoL>
<BoL> eturn an astroid.Slice node as string <EoL>
<BoL> eturn Starred node as string <EoL>
<BoL> eturn an astroid.Subscript node as string <EoL>
<BoL> eturn an astroid.TryExcept node as string <EoL>
<BoL> eturn an astroid.TryFinally node as string <EoL>
<BoL> eturn an astroid.Tuple node as string <EoL>
<BoL> eturn an astroid.UnaryOp node as string <EoL>
<BoL> eturn an astroid.While node as string <EoL>
<BoL> eturn an astroid.With node as string <EoL>
<BoL> yield an ast.Yield node as string <EoL>
<BoL> Return an astroid.YieldFrom node as string . <EoL>
<BoL> eturn a list of ( name , asname ) formatted as a string <EoL>
<BoL> Return an iterator on statements inferred by each statement in *stmts* . <EoL>
<BoL> Build tree node from data and add some informations <EoL>
<BoL> Handles encoding and delayed nodes after a module has been built <EoL>
<BoL> Store imported names to the locals <EoL>
<BoL> Visit a AssAttr node <EoL>
<BoL> Build astroid from a source code file ( i.e . from an ast ) <EoL>
<BoL> verify this is not an imported class or handle it <EoL>
<BoL> build astroid from a living module ( i.e . using inspect ) this is used when there is no python source code available ( either because it 's a built-in module or because the .py is not available ) <EoL>
<BoL> Build an astroid from a living module instance . <EoL>
<BoL> ecursive method which create a partial ast from real objects ( only function , class , and method are handled ) <EoL>
<BoL> Build astroid from source code string . <EoL>
<BoL> Find expressions in a call to _TRANSIENT_FUNCTION and extract them . <EoL>
<BoL> Extracts the statement on a specific line from an AST . <EoL>
<BoL> The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , readline , in the same way as the tokenize ( ) generator . <EoL>
<BoL> Parses some Python code as a module and extracts a designated AST node . <EoL>
<BoL> Parses a source string in order to obtain an astroid AST from it <EoL>
<BoL> lookup a name into the builtin module return the list of matching statements and the astroid for the builtin module <EoL>
<BoL> eturn an astroid node for a python value <EoL>
<BoL> : param List [ NodeNG ] args : Call positional arguments : param Union [ List [ nodes.Keyword ] , None ] keywords : Call keywords <EoL>
<BoL> Cache result of generator into dictionary <EoL>
<BoL> Clone inference path <EoL>
<BoL> Push node into inference path <EoL>
<BoL> Give a context a boundnode to retrieve the correct function name or attribute value with from further inference . <EoL>
<BoL> Simple decorator to cache result of method calls without args . <EoL>
<BoL> eturn the given infer function wrapped to handle the pathwrapper function handling context <EoL>
<BoL> Get the value as an index for the given instance . <EoL>
<BoL> Return true if all base classes of a class could be inferred . <EoL>
<BoL> Check if *type1* is a subtype of *typ2* . <EoL>
<BoL> Check if *type2* is a supertype of *type1* . <EoL>
<BoL> Check if a node 'isinstance ' any node in class_or_seq <EoL>
<BoL> Check if a type is a subclass of any node in class_or_seq <EoL>
<BoL> Infer length of given node object <EoL>
<BoL> Obtain the type of the given node <EoL>
<BoL> Return the inferred value for the given node . <EoL>
<BoL> Get an inference callable for an augmented binary operation . <EoL>
<BoL> Get an inference callable for a normal binary operation . <EoL>
<BoL> Get contexts for binary operations . <EoL>
<BoL> Search for the first function which encloses the given scope . This can be used for looking up in that function's scope , in case looking up in a lower scope for a particular name fails . <EoL>
<BoL> Infer a binary operation between a left operand and a right operand <EoL>
<BoL> Infer all values based on Dict.items <EoL>
<BoL> Infer all values based on _BaseContainer.elts <EoL>
<BoL> Invoke binary operation inference on the given instance . <EoL>
<BoL> Check if the given const node is NotImplemented . <EoL>
<BoL> Check if type1 is the same as type2 . <EoL>
<BoL> Delete nodes that equate to duplicate keys <EoL>
<BoL> Given an instance specific inference function , return a function to be given to MANAGER.register_transform to set this inference function . <EoL>
<BoL> Get a list of extra paths where this finder can search . <EoL>
<BoL> Find the given module <EoL>
<BoL> Find a spec for the given module . <EoL>
<BoL> Lookup the given special method name in the given *node* <EoL>
<BoL> Look up the given *name* in the current model <EoL>
<BoL> Generate a bound method that can infer the given *obj* . <EoL>
<BoL> get astroid for the given class <EoL>
<BoL> given a module name , return the astroid object <EoL>
<BoL> given an imported module , return the astroid object <EoL>
<BoL> given a module name , return the astroid object <EoL>
<BoL> Cache a module if no module with the same name is known yet . <EoL>
<BoL> infer astroid for the given class <EoL>
<BoL> Registers a hook to resolve imports that can not be found otherwise . <EoL>
<BoL> Visit the transforms and apply them to the given *node* . <EoL>
<BoL> abspath with caching <EoL>
<BoL> Extracts the relative mod path of the file to import from <EoL>
<BoL> emove files/directories in the black list <EoL>
<BoL> if the given directory has a valid __init__ file , return its path , else return None <EoL>
<BoL> eturn true if the given filename should be considered as a python file <EoL>
<BoL> given a mod path ( i.e . split module / package name ) , return the corresponding spec <EoL>
<BoL> check there are some __init__.py all along the way <EoL>
<BoL> given a mod path ( i.e . split module / package name ) , return the corresponding file , giving priority to source file over precompiled file if it exists <EoL>
<BoL> given a package directory return a list of all available python module 's files in the package and its subpackages <EoL>
<BoL> given a dotted name return the module part of the name : <EoL>
<BoL> Return the directory containing the Python library ( standard or site additions ) . <EoL>
<BoL> given a python module 's file name return the matching source file name ( the filename will be returned identically if it 's already an absolute path to a python source file ... ) <EoL>
<BoL> rtype : bool return : True if the filename is a python source file <EoL>
<BoL> eturn true if the given module name is relative to the given file name <EoL>
<BoL> try to guess if a module is a standard python module ( by default , see ` std_path ` parameter 's description ) <EoL>
<BoL> Load a Python module from it 's path . <EoL>
<BoL> Load a python module from its split name . <EoL>
<BoL> Load a Python module from its name . <EoL>
<BoL> given a file path return the corresponding split module 's name ( i.e name of a module or package split on ' . ' ) <EoL>
<BoL> Get the name of the type that this node represents . <EoL>
<BoL> Get a slice or an item , using the given *index* , for the given sequence . <EoL>
<BoL> Get the value of the given slice index . <EoL>
<BoL> update constant classes , so the keys of CONST_CLS can be reused <EoL>
<BoL> Return True if the given node is the child of a decorato <EoL>
<BoL> ecursively generate nodes inferred by the given statement . If the inferred value is a list or a tuple , recurse on the elements <EoL>
<BoL> Retrieve the inferred values of the given attribute name . <EoL>
<BoL> Get the MRO which will be used to lookup attributes in this super . <EoL>
<BoL> ecursive function to resolve multiple assignments <EoL>
<BoL> ecursive function to resolve multiple assignments on loops <EoL>
<BoL> Add a __class__ member to the given func node , if we can determine it . <EoL>
<BoL> astroid boot strapping the builtins module <EoL>
<BoL> create astroid for a living class object , with a given set of base names ( e.g . ancestors ) <EoL>
<BoL> create a Const node and register it in the locals of the given node with the specified name <EoL>
<BoL> create a dummy node and register it in the locals of the given node with the specified name <EoL>
<BoL> create a ImportFrom node and register it in the locals of the given node with the specified name <EoL>
<BoL> create and initialize an astroid ClassDef node <EoL>
<BoL> create and initialize an astroid ImportFrom import statement <EoL>
<BoL> create and initialize an astroid FunctionDef node <EoL>
<BoL> create and initialize an astroid Module node <EoL>
<BoL> create astroid for a living class object <EoL>
<BoL> create astroid for a living data descriptor object <EoL>
<BoL> create astroid for a living function object <EoL>
<BoL> create astroid for a living method descriptor object <EoL>
<BoL> add given arguments to local <EoL>
<BoL> save assignement situation since node.parent is not available yet <EoL>
<BoL> visit a For node by returning a fresh instance of it <EoL>
<BoL> visit an FunctionDef node to become astroid <EoL>
<BoL> visit an AnnAssign node by returning a fresh instance of it <EoL>
<BoL> visit an arg node by returning a fresh AssName instance <EoL>
<BoL> visit an Arguments node by returning a fresh instance of it <EoL>
<BoL> visit a Assert node by returning a fresh instance of it <EoL>
<BoL> visit a Assign node by returning a fresh instance of it <EoL>
<BoL> visit a node and return a AssignName node <EoL>
<BoL> visit an Attribute node by returning a fresh instance of it <EoL>
<BoL> visit a AugAssign node by returning a fresh instance of it <EoL>
<BoL> visit a BinOp node by returning a fresh instance of it <EoL>
<BoL> visit a BoolOp node by returning a fresh instance of it <EoL>
<BoL> visit a Break node by returning a fresh instance of it <EoL>
<BoL> visit a String/Bytes node by returning a fresh instance of Const <EoL>
<BoL> visit a CallFunc node by returning a fresh instance of it <EoL>
<BoL> visit a Compare node by returning a fresh instance of it <EoL>
<BoL> visit a Comprehension node by returning a fresh instance of it <EoL>
<BoL> visit a Const node by returning a fresh instance of it <EoL>
<BoL> visit a Continue node by returning a fresh instance of it <EoL>
<BoL> visit a Decorators node by returning a fresh instance of it <EoL>
<BoL> visit a Delete node by returning a fresh instance of it <EoL>
<BoL> visit a Dict node by returning a fresh instance of it <EoL>
<BoL> visit a DictComp node by returning a fresh instance of it <EoL>
<BoL> visit an Ellipsis node by returning a fresh instance of it <EoL>
<BoL> visit an EmptyNode node by returning a fresh instance of it <EoL>
<BoL> visit an ExceptHandler node by returning a fresh instance of it <EoL>
<BoL> visit an Exec node by returning a fresh instance of it <EoL>
<BoL> visit a Expr node by returning a fresh instance of it <EoL>
<BoL> visit an ExtSlice node by returning a fresh instance of it <EoL>
<BoL> visit a GeneratorExp node by returning a fresh instance of it <EoL>
<BoL> visit a Global node to become astroid <EoL>
<BoL> visit an If node by returning a fresh instance of it <EoL>
<BoL> visit a IfExp node by returning a fresh instance of it <EoL>
<BoL> visit a Import node by returning a fresh instance of it <EoL>
<BoL> visit an ImportFrom node by returning a fresh instance of it <EoL>
<BoL> visit a Index node by returning a fresh instance of it <EoL>
<BoL> visit a Keyword node by returning a fresh instance of it <EoL>
<BoL> visit a Lambda node by returning a fresh instance of it <EoL>
<BoL> visit a List node by returning a fresh instance of it <EoL>
<BoL> visit a ListComp node by returning a fresh instance of it <EoL>
<BoL> visit a Module node by returning a fresh instance of it <EoL>
<BoL> visit a Name node by returning a fresh instance of it <EoL>
<BoL> visit a Nonlocal node and return a new instance of it <EoL>
<BoL> visit a Num node by returning a fresh instance of Const <EoL>
<BoL> visit a Pass node by returning a fresh instance of it <EoL>
<BoL> visit a Print node by returning a fresh instance of it <EoL>
<BoL> visit a Raise node by returning a fresh instance of it <EoL>
<BoL> visit a Backquote node by returning a fresh instance of it <EoL>
<BoL> visit a Return node by returning a fresh instance of it <EoL>
<BoL> visit a Set node by returning a fresh instance of it <EoL>
<BoL> visit a SetComp node by returning a fresh instance of it <EoL>
<BoL> visit a Slice node by returning a fresh instance of it <EoL>
<BoL> visit a Starred node and return a new instance of it <EoL>
<BoL> visit a Subscript node by returning a fresh instance of it <EoL>
<BoL> visit a TryExcept node by returning a fresh instance of it <EoL>
<BoL> visit a TryFinally node by returning a fresh instance of it <EoL>
<BoL> visit a Tuple node by returning a fresh instance of it <EoL>
<BoL> visit a UnaryOp node by returning a fresh instance of it <EoL>
<BoL> visit a While node by returning a fresh instance of it <EoL>
<BoL> visit a Yield node by returning a fresh instance of it <EoL>
<BoL> Merges MROs in *sequences* to a single MRO using the C3 algorithm . <EoL>
<BoL> eturn a ClassDef node type to differ metaclass and exception from 'regular ' classes <EoL>
<BoL> Detect decorator call chaining and see if the end result is a static or a classmethod . <EoL>
<BoL> Return if the given class can be used as a metaclass . <EoL>
<BoL> eturn a list of all argument names <EoL>
<BoL> Get the class that wraps the given node . <EoL>
<BoL> Call matching transforms for the given node if any and return the transformed node . <EoL>
<BoL> Register ` transform ( node ) ` function to be applied on the given astroid 's ` node_class ` if ` predicate ` is None or returns true when called with the node as argument . <EoL>
<BoL> Unregister the given transform . <EoL>
<BoL> Walk the given astroid *tree* and transform each encountered node <EoL>
<BoL> Limit inference amount . <EoL>
<BoL> Get a Proxy from the given name to the given node type . <EoL>
<BoL> Wrapper for ERFA function `` eraA2af `` . <EoL>
<BoL> Wrapper for ERFA function `` eraA2tf `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAf2a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAnp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAnpm `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApcg `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApcg13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApci `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApci13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApco `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApco13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApcs `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApcs13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAper `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAper13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApio `` . <EoL>
<BoL> Wrapper for ERFA function `` eraApio13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtci13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtciq `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtciqn `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtciqz `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtco13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtic13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAticq `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAticqn `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtio13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtioq `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtoc13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtoi13 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraAtoiq `` . <EoL>
<BoL> Wrapper for ERFA function `` eraBi00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraBp00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraBp06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraBpn2xy `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2i00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2i00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2i06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2ibpn `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2ixy `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2ixys `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2s `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2t00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2t00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2t06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2tcio `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2teqx `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2tpe `` . <EoL>
<BoL> Wrapper for ERFA function `` eraC2txy `` . <EoL>
<BoL> Wrapper for ERFA function `` eraCal2jd `` . <EoL>
<BoL> Create an empty array of the right trailing shape . <EoL>
<BoL> Determines whether two or more Numpy arrays can be broadcast with each other based on their shape tuple alone . <EoL>
<BoL> Wrapper for ERFA function `` eraCp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraCpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraCr `` . <EoL>
<BoL> Wrapper for ERFA function `` eraD2dtf `` . <EoL>
<BoL> Wrapper for ERFA function `` eraD2tf `` . <EoL>
<BoL> Wrapper for ERFA function `` eraDat `` . <EoL>
<BoL> Wrapper for ERFA function `` eraDtdb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraDtf2d `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEceq06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEcm06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEe00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEe00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEe00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEe06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEect00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEform `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEo06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEors `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEpb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEpb2jd `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEpj `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEpj2jd `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEpv00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEqec06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEqeq94 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraEra00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFad03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFae03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFaf03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFaju03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFal03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFalp03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFama03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFame03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFane03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFaom03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFapa03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFasa03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFaur03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFave03 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFk52h `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFk5hip `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFk5hz `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFw2m `` . <EoL>
<BoL> Wrapper for ERFA function `` eraFw2xy `` . <EoL>
<BoL> Wrapper for ERFA function `` eraG2icrs `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGc2gd `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGc2gde `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGd2gc `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGd2gce `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGmst00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGmst06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGmst82 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGst00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGst00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGst06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGst06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraGst94 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraH2fk5 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraHfk5z `` . <EoL>
<BoL> Wrapper for ERFA function `` eraIcrs2g `` . <EoL>
<BoL> Wrapper for ERFA function `` eraIr `` . <EoL>
<BoL> Wrapper for ERFA function `` eraJd2cal `` . <EoL>
<BoL> Wrapper for ERFA function `` eraJdcalf `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLd `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLdn `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLdsun `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLteceq `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLtecm `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLteqec `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLtp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLtpb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLtpecl `` . <EoL>
<BoL> Wrapper for ERFA function `` eraLtpequ `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNum00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNum00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNum06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNumat `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNut00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNut00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNut06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNut80 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraNutm80 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraObl06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraObl80 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraP06e `` . <EoL>
<BoL> Wrapper for ERFA function `` eraP2pv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraP2s `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPap `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPas `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPav2pv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPb06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPdp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPfw06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPlan94 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPm `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPmat00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPmat06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPmat76 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPmp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPmpx `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPmsafe `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPn `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPn00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPn00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPn00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPn06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPn06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPnm00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPnm00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPnm06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPnm80 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPom00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPpp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPpsp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPr00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPrec76 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPv2p `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPv2pav `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPv2s `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvdpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvm `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvmpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvppv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvstar `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvtob `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvu `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvup `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPvxpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraPxp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRefco `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRm2v `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRv2m `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRx `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRxp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRxpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRxr `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRy `` . <EoL>
<BoL> Wrapper for ERFA function `` eraRz `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS2c `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS2p `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS2pv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraS2xpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraSepp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraSeps `` . <EoL>
<BoL> Returns the corresponding SOFA version as defined in configure.ac in string format <EoL>
<BoL> Wrapper for ERFA function `` eraSp00 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraStarpm `` . <EoL>
<BoL> Wrapper for ERFA function `` eraStarpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraSxp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraSxpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTaitt `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTaiut1 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTaiutc `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTcbtdb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTcgtt `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTdbtcb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTdbtt `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTf2a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTf2d `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTr `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTrxp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTrxpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTttai `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTttcg `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTttdb `` . <EoL>
<BoL> Wrapper for ERFA function `` eraTtut1 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraUt1tai `` . <EoL>
<BoL> Wrapper for ERFA function `` eraUt1tt `` . <EoL>
<BoL> Wrapper for ERFA function `` eraUt1utc `` . <EoL>
<BoL> Wrapper for ERFA function `` eraUtctai `` . <EoL>
<BoL> Wrapper for ERFA function `` eraUtcut1 `` . <EoL>
<BoL> Returns the package version as defined in configure.ac in string format <EoL>
<BoL> Returns the package major version as defined in configure.ac as integer <EoL>
<BoL> Returns the package micro version as defined in configure.ac as integer <EoL>
<BoL> Returns the package minor version as defined in configure.ac as integer <EoL>
<BoL> Wrapper for ERFA function `` eraXy06 `` . <EoL>
<BoL> Wrapper for ERFA function `` eraXys00a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraXys00b `` . <EoL>
<BoL> Wrapper for ERFA function `` eraXys06a `` . <EoL>
<BoL> Wrapper for ERFA function `` eraZp `` . <EoL>
<BoL> Wrapper for ERFA function `` eraZpv `` . <EoL>
<BoL> Wrapper for ERFA function `` eraZr `` . <EoL>
<BoL> Returns the value of this `` ConfigItem `` <EoL>
<BoL> Validates the provided value based on cfgtype and returns the type-cast value <EoL>
<BoL> Reloads the value of this `` ConfigItem `` from the relevant configuration file . <EoL>
<BoL> Sets the current value of this `` ConfigItem `` . <EoL>
<BoL> Sets this item to a specified value only inside a with block . <EoL>
<BoL> Reload a configuration item from the configuration file . <EoL>
<BoL> Reset a configuration item to its default . <EoL>
<BoL> Temporarily set a configuration value . <EoL>
<BoL> Determines the module/package from which this function is called . <EoL>
<BoL> Gets the configuration object or section associated with a particular package or module . <EoL>
<BoL> Determines the Astropy configuration directory name and creates the directory if it does n't exist . <EoL>
<BoL> Get the filename of the config file associated with the given package or module . <EoL>
<BoL> Determines if a config file can be safely replaced because it doesn't actually contain any meaningful content . <EoL>
<BoL> Reloads configuration settings from a configuration file for the root package of the requested package/module . <EoL>
<BoL> Resolve a name like `` module.object `` to an object and return it . <EoL>
<BoL> Checks if the configuration file for the specified package exists , and if not , copy over the default configuration . If the configuration file looks like it has already been edited , we do not write over it , but instead write a file alongside it named `` pkg.version.cfg `` as a `` template '' for the user . <EoL>
<BoL> Determines the Astropy cache directory name and creates the directory if it does n't exist . <EoL>
<BoL> Implements use as a decorator . <EoL>
<BoL> Locates and return the home directory ( or best approximation ) on this system . <EoL>
<BoL> Wrap numpy ufuncs , taking care of units . <EoL>
<BoL> Quantities should always be treated as non-False ; there is too much potential for ambiguity otherwise . <EoL>
<BoL> Return a copy of this ` Constant ` instance . Since they are by definition immutable , this merely returns another reference to `` self `` . <EoL>
<BoL> Quantities are able to directly convert to other units that have the same physical type . This function is implemented in order to make autocompletion still work correctly in IPython . <EoL>
<BoL> Division between ` Quantity ` objects . <EoL>
<BoL> Format quantities using the new-style python formatting codes as specifiers for the number . <EoL>
<BoL> Quantities are able to directly convert to other units that have the same physical type . <EoL>
<BoL> Division between ` Quantity ` objects . <EoL>
<BoL> In-place multiplication between ` Quantity ` objects and others . <EoL>
<BoL> Inplace division between ` Quantity ` objects and other objects . <EoL>
<BoL> Multiplication between ` Quantity ` objects and other objects . <EoL>
<BoL> Plus the quantity . <EoL>
<BoL> Division between ` Quantity ` objects . <EoL>
<BoL> Right Multiplication between ` Quantity ` objects and other objects . <EoL>
<BoL> Right Division between ` Quantity ` objects and other objects . <EoL>
<BoL> Division between ` Quantity ` objects and other objects . <EoL>
<BoL> Generates a new ` Quantity ` with the units decomposed . Decomposed units have only irreducible units in them ( see ` astropy.units.UnitBase.decompose ` ) . <EoL>
<BoL> Create a Quantity view of some array-like input , and set the unit <EoL>
<BoL> Generate a latex representation of the quantity and its unit . <EoL>
<BoL> Turn result into a quantity with the given unit . <EoL>
<BoL> Set the unit . <EoL>
<BoL> Helper method for to and to_value . <EoL>
<BoL> Wrap a numpy function that processes self , returning a Quantity . <EoL>
<BoL> Generates a new ` Quantity ` with the units decomposed . Decomposed units have only irreducible units in them ( see ` astropy.units.UnitBase.decompose ` ) . <EoL>
<BoL> Insert values along the given axis before the given indices and return a new ` ~astropy.units.Quantity ` object . <EoL>
<BoL> Return a new ` ~astropy.units.Quantity ` object with the specified unit . <EoL>
<BoL> The numerical value , possibly in a different unit . <EoL>
<BoL> Overridden by subclasses to change what kind of view is created based on the output unit of an operation . <EoL>
<BoL> Return string representation for unit <EoL>
<BoL> Try to format units using a formatter . <EoL>
<BoL> Return string representation for unit <EoL>
<BoL> Internal function ( used from ` _get_converter ` ) to apply equivalence pairs . <EoL>
<BoL> Generate a docstring for the unit if the user did n't supply one . This is only used from the constructor and may be overridden in subclasses . <EoL>
<BoL> Returns an identifier that uniquely identifies the physical type of this unit . <EoL>
<BoL> Return a list of registered units with the same physical type as this unit . <EoL>
<BoL> Injects the unit , and all of its aliases , in the given namespace dictionary . <EoL>
<BoL> Returns ` True ` if this unit is equivalent to ` other ` . See ` is_equivalent ` , except that a proper Unit object should be given ( i.e. , no string ) and that the equivalency list should be normalized using ` _normalize_equivalencies ` . <EoL>
<BoL> Normalizes equivalencies , ensuring each is a 4-tuple of the form : : <EoL>
<BoL> Generate latex representation of unit name . This is used by the IPython notebook to print a unit with a nice layout . <EoL>
<BoL> Returns the scale to the specified unit . <EoL>
<BoL> Get a name for this unit that is specific to a particular format . <EoL>
<BoL> Alias for ` to ` for backward compatibility with pynbody . <EoL>
<BoL> Returns ` True ` if this unit is equivalent to `` other `` . <EoL>
<BoL> Return the converted values in the specified unit . <EoL>
<BoL> Output the unit in the given format as a string . <EoL>
<BoL> Converts this unit into ones belonging to the given system . Since more than one result may be possible , a list is always returned . <EoL>
<BoL> Context manager to temporarily set values in the `` constants `` namespace to an older version . See : ref : ` astropy-constants-prior ` for usage . <EoL>
<BoL> Generator to return a Constant object . <EoL>
<BoL> Set all attributes . <EoL>
<BoL> Convert a list to a regex string for matching a directive . <EoL>
<BoL> Create keys/values . <EoL>
<BoL> Return a compiled re object for the format string . <EoL>
<BoL> Return regex pattern for the format string . <EoL>
<BoL> Calculate the Julian day based on the year , week of the year , and day of the week , with week_start_day representing whether the week of the year assumes the week starts on Sunday or Monday ( 6 or 0 ) . <EoL>
<BoL> Return a class cls instance based on the input string and the format string . <EoL>
<BoL> Return a time struct based on the input string and the format string . <EoL>
<BoL> Escape all the characters in pattern except ASCII letters , numbers and ' _ ' . <EoL>
<BoL> Remove items from the sequence when deleting . <EoL>
<BoL> Fetch the item and do string interpolation . <EoL>
<BoL> D.iterkeys ( ) - > an iterator over the keys of D <EoL>
<BoL> Correctly set a value . <EoL>
<BoL> x.__repr__ ( ) < == > repr ( x ) <EoL>
<BoL> Decode ASCII strings to unicode if a self.encoding is specified . <EoL>
<BoL> Decode infile to unicode . Using the specified encoding . <EoL>
<BoL> Decode element to unicode if necessary . <EoL>
<BoL> Handle any BOM , and decode if necessary . <EoL>
<BoL> Deal with a comment . <EoL>
<BoL> Parse the configspec . <EoL>
<BoL> Handle an error according to the error settings . <EoL>
<BoL> Given a value string , unquote , remove comment , handle lists . ( including empty and single member lists ) <EoL>
<BoL> Given a section and a depth level , walk back through the sections parents to see if the depth level matches a previous section . <EoL>
<BoL> Extract the value , where we are in a multiline situation . <EoL>
<BoL> Actually parse the config file . <EoL>
<BoL> Return a safely quoted version of a value . <EoL>
<BoL> Called by validate . Handles setting the configspec on subsections including sections to be validated by __many__ <EoL>
<BoL> Used by `` stringify `` within validate , to turn non-string values into strings . <EoL>
<BoL> Return an unquoted version of a value <EoL>
<BoL> Write an individual line , for the write method <EoL>
<BoL> Write a section marker line <EoL>
<BoL> Accepts a key as input . <EoL>
<BoL> A convenience method which coerces the specified value to a float . <EoL>
<BoL> A convenience method which coerces the specified value to an integer . <EoL>
<BoL> A convenience method which fetches the specified value , guaranteeing that it is a list . <EoL>
<BoL> A version of clear that also affects scalars/sections Also clears comments and configspec . <EoL>
<BoL> Return a deepcopy of self as a dictionary . <EoL>
<BoL> A version of `` get `` that does n't bypass string interpolation . <EoL>
<BoL> D.items ( ) - > list of D 's ( key , value ) pairs , as 2-tuples <EoL>
<BoL> D.iteritems ( ) - > an iterator over the ( key , value ) items of D <EoL>
<BoL> D.itervalues ( ) - > an iterator over the values of D <EoL>
<BoL> D.keys ( ) - > list of D 's keys <EoL>
<BoL> A recursive update - useful for merging config files . <EoL>
<BoL> 'D.pop ( k [ , d ] ) - > v , remove specified key and return the corresponding value . If key is not found , d is returned if given , otherwise KeyError is raised ' <EoL>
<BoL> Pops the first ( key , val ) <EoL>
<BoL> Reload a ConfigObj from file . <EoL>
<BoL> Change a keyname to another , without changing position in sequence . <EoL>
<BoL> Clear ConfigObj instance and restore to 'freshly created ' state . <EoL>
<BoL> Restore ( and return ) default value for the specified key . <EoL>
<BoL> Recursively restore default values to all members that have them . <EoL>
<BoL> A version of setdefault that sets sequence if appropriate . <EoL>
<BoL> A version of update that uses our `` __setitem__ `` . <EoL>
<BoL> D.values ( ) - > list of D 's values <EoL>
<BoL> Write the current ConfigObj as a file <EoL>
<BoL> Helper function to fetch values from owning section . <EoL>
<BoL> The function that does the actual work . <EoL>
<BoL> Implementation-dependent helper function . <EoL>
<BoL> * parent is the section above * depth is the depth level of this section * main is the main ConfigObj * indict is a dictionary to initialise the section with <EoL>
<BoL> A dummy check method , always returns the value unchanged . <EoL>
<BoL> An example function that will turn a nested dictionary of results ( as returned by `` ConfigObj.validate `` ) into a flat list . <EoL>
<BoL> Find all the values and sections not in the configspec from a validated ConfigObj . <EoL>
<BoL> Take apart a `` keyword=list ( 'val , 'val ' ) `` type string . <EoL>
<BoL> Dummy check that always passes <EoL>
<BoL> Unquote a value if necessary . <EoL>
<BoL> Usage : check ( check , value ) <EoL>
<BoL> Given a check , return the default value for the check ( converted to the right type ) . <EoL>
<BoL> Return numbers from inputs or raise VdtParamError . <EoL>
<BoL> A function that exists for test purposes . <EoL>
<BoL> Convert decimal dotted quad string to long integer <EoL>
<BoL> Check that a value is a list , coercing strings into a list with one member . Useful where users forget the trailing comma that turns a single value into a list . <EoL>
<BoL> Check that the value is a list of booleans . <EoL>
<BoL> Check if the value represents a boolean . <EoL>
<BoL> A check that tests that a given value is a float ( an integer will be accepted ) , and optionally - that it is between bounds . <EoL>
<BoL> Check that the value is a list of floats . <EoL>
<BoL> Check that the value is a list of integers . <EoL>
<BoL> A check that tests that a given value is an integer ( int , or long ) and optionally , between bounds . A negative value is accepted , while a float will fail . <EoL>
<BoL> Check that the supplied value is an Internet Protocol address , v.4 , represented by a dotted-quad string , i.e . ' 1.2.3.4 ' . <EoL>
<BoL> Check that the value is a list of IP addresses . <EoL>
<BoL> Check that the value is a list of values . <EoL>
<BoL> Check that the value is a list . <EoL>
<BoL> This check matches the value to any of a set of options . <EoL>
<BoL> Check that the supplied value is a string . <EoL>
<BoL> Check that the value is a list of strings . <EoL>
<BoL> Check that the value is a tuple of values . <EoL>
<BoL> Convert int or long int to dotted quad string <EoL>
<BoL> Determines the URL of the API page for the specified object , and optionally open that page in a web browser . <EoL>
<BoL> Adjust or skip data entries if a row is inconsistent with the header . <EoL>
<BoL> Read the `` table `` and return the results in a format determined by the `` outputter `` attribute . <EoL>
<BoL> Update table columns in place if needed . <EoL>
<BoL> Replace string values in col.str_vals <EoL>
<BoL> Set the fill values of the individual cols based on fill_values of BaseData <EoL>
<BoL> Replace string values in col.str_vals and set masks <EoL>
<BoL> Set the `` data_lines `` attribute to the lines slice comprising the table data values . <EoL>
<BoL> Return a generator that returns a list of column values ( as strings ) for each data line . <EoL>
<BoL> Set fill value for each column and then apply that fill value <EoL>
<BoL> Strip out comment lines and blank lines from list of `` lines `` <EoL>
<BoL> convert all values in table to a list of lists of strings <EoL>
<BoL> Check column names . <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` . <EoL>
<BoL> Generator to yield non-blank and non-comment lines <EoL>
<BoL> Extract any table-level metadata , e.g . <EoL>
<BoL> Get the lines from the `` table `` input . The input table can be one of : <EoL>
<BoL> Process lines for subsequent use . <EoL>
<BoL> Validate the format for the type converters and then copy those which are valid converters for this column ( i.e . converter type is a subclass of col.type ) <EoL>
<BoL> Write `` table `` as list of strings . <EoL>
<BoL> Remove whitespace at the beginning or end of line . This is especially useful for whitespace-delimited files to prevent spurious columns at the beginning or end . <EoL>
<BoL> Remove whitespace at the beginning or end of value . <EoL>
<BoL> Not available for the Cds class ( raises NotImplementedError ) <EoL>
<BoL> Read input data ( file-like object , filename , list of strings , or single string ) into a Table and return the result . <EoL>
<BoL> Write comment lines after , rather than before , the header . <EoL>
<BoL> Adjust row if it is too short . <EoL>
<BoL> Return an iterator over the table `` lines `` , where each iterator output is a list of the split line values . <EoL>
<BoL> Remove whitespace at the beginning or end of line . This is especially useful for whitespace-delimited files to prevent spurious columns at the beginning or end . If splitting on whitespace then replace unquoted tabs with space first <EoL>
<BoL> Update table columns in place if mixin columns are present . <EoL>
<BoL> Actually make the output table give the data and comments . <EoL>
<BoL> Read input data ( file-like object , filename , list of strings , or single string ) into a Table and return the result . <EoL>
<BoL> Use a fast Cython method to write table data to output , where output is a filename or file-like object . <EoL>
<BoL> Actually make the output table give the data and comments . This is slightly different from the base FastBasic method in the way comments are handled . <EoL>
<BoL> Override the default writing behavior in ` FastBasic ` so that column names are commented . <EoL>
<BoL> Override the default write method of ` FastBasic ` to output masked values as empty fields . <EoL>
<BoL> Override the default writing behavior in ` FastBasic ` so that columns names are not included in output . <EoL>
<BoL> Override the default writing behavior in ` FastBasic ` to output a line with column types after the column name line . <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` . <EoL>
<BoL> Split `` line `` on the delimiter and determine column values and column start and end positions . <EoL>
<BoL> Initialize classes for HTML reading and writing . <EoL>
<BoL> Return an iterator of the values with replacements based on fill_values <EoL>
<BoL> Read the `` table `` in HTML format and return a resulting `` Table `` . <EoL>
<BoL> Return data in `` table `` converted to HTML as a list of strings . <EoL>
<BoL> Write `` table `` as list of strings . <EoL>
<BoL> Read input data ( file-like object , filename , list of strings , or single string ) into a Table and return the result . <EoL>
<BoL> Replace tab with space within `` line `` while respecting quoted substrings <EoL>
<BoL> Return only lines that start with the comment regexp . For these lines strip out the matching characters . <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` . <EoL>
<BoL> Skip over CDS header by finding the last section delimite <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` for a CDS header . <EoL>
<BoL> Support converting Table to np.array via np.array ( table ) . <EoL>
<BoL> Determine if `` col `` should be added to the table directly as a mixin column . <EoL>
<BoL> Make sure that names and dtype are both iterable and have the same length as data . <EoL>
<BoL> Make sure that all Column objects have correct class for this type of Table . <EoL>
<BoL> Convert string-like columns to/from bytestring and unicode ( internal only ) . <EoL>
<BoL> Initialize table from a list of Column or mixin objects <EoL>
<BoL> Initialize table from a dictionary of columns <EoL>
<BoL> Initialize table from a list of columns . A column can be a Column object , np.ndarray , mixin , or any other iterable object . <EoL>
<BoL> Initialize table from an ndarray structured array <EoL>
<BoL> Initialize table from an existing Table object <EoL>
<BoL> Check that `` names `` is a tuple or list of strings <EoL>
<BoL> Make `` table `` in-place so that it represents the given list of `` cols `` . <EoL>
<BoL> Create a new table as a referenced slice from self . <EoL>
<BoL> Same as replace_column but issues warnings under various circumstances . <EoL>
<BoL> Set the table masked property . <EoL>
<BoL> Add a new Column object `` col `` to the table . If `` index `` is supplied then insert column before `` index `` position in the list of columns , otherwise append column to the end of the list . <EoL>
<BoL> Add a list of new Column objects `` cols `` to the table . If a corresponding list of `` indexes `` is supplied then insert column before each `` index `` position in the *original* list of columns , otherwise append columns to the end of the list . <EoL>
<BoL> Insert a new index among one or more columns . If there are no indices , make this index the primary table index . <EoL>
<BoL> Add a new row to the end of the table . <EoL>
<BoL> Return the indices which would sort the table according to one or more key columns . This simply calls the ` numpy.argsort ` function on the table with the `` order `` parameter set to `` keys `` . <EoL>
<BoL> Return a new copy of the table in the form of a structured np.ndarray or np.ma.MaskedArray object ( as appropriate ) . <EoL>
<BoL> Convert bytestring columns ( dtype.kind='S ' ) to unicode ( dtype.kind= ' U ' ) using UTF-8 encoding . <EoL>
<BoL> Convert unicode columns ( dtype.kind= ' U ' ) to bytestring ( dtype.kind='S ' ) using UTF-8 encoding . <EoL>
<BoL> Return a copy of the table . <EoL>
<BoL> Return column [ item ] for recarray compatibility . <EoL>
<BoL> Return a copy of self , with masked values filled . <EoL>
<BoL> Create a ` Table ` from a : class : ` pandas.DataFrame ` instance <EoL>
<BoL> Group this table by the specified `` keys `` <EoL>
<BoL> Return the positional index of column `` name `` . <EoL>
<BoL> Return a context manager for an indexing mode . <EoL>
<BoL> Add a new row before the given `` index `` position in the table.Minimal checker for mapping ( dict-like ) interface for obj <EoL>
<BoL> Iterate over the columns of this table . <EoL>
<BoL> Keep only the columns specified ( remove the others ) . <EoL>
<BoL> Read and parse a data table and return as a Table . <EoL>
<BoL> Remove a column from the table . <EoL>
<BoL> Remove several columns from the table . <EoL>
<BoL> Remove all indices involving the given column . If the primary index is removed , the new primary index will be the most recently added remaining index . <EoL>
<BoL> Remove a row from the table . <EoL>
<BoL> Remove rows from the table . <EoL>
<BoL> Rename a column . <EoL>
<BoL> Replace column `` name `` with the new `` col `` object . <EoL>
<BoL> Reverse the row order of table rows . The table is reversed in place and there are no function arguments . <EoL>
<BoL> Render the table in HTML and show it in the IPython notebook . <EoL>
<BoL> Sort the table according to one or more keys . This operates on the existing table and does not return a new table . <EoL>
<BoL> Return a : class : ` pandas.DataFrame ` instance <EoL>
<BoL> Write this Table object out in the specified format . <EoL>
<BoL> Return a tuple containing a function which converts a list into a numpy array and the type produced by the converter function.Convert values `` False '' and `` True '' to bools . Raise an exception for any other string values . <EoL>
<BoL> Call `` writerow_func `` ( either writerow or writerows ) with `` values `` . <EoL>
<BoL> Similar to csv.writer.writerow but with the custom quoting behavior . Returns the written string instead of the length of that string . <EoL>
<BoL> Similar to csv.writer.writerows but with the custom quoting behavior . Returns the written string instead of the length of that string . <EoL>
<BoL> Add self to other , and return a new masked array . <EoL>
<BoL> This is a singleton so just return self . <EoL>
<BoL> Divide other into self , and return a new masked array . <EoL>
<BoL> Check whether other equals self elementwise . <EoL>
<BoL> Convert to float . <EoL>
<BoL> Divide other into self , and return a new masked array . <EoL>
<BoL> x.__getitem__ ( y ) < == > x [ y ] Return whether ` elem ` is a scalar result of indexing ` arr ` , or None if undecidable without promoting nomask to a full mask <EoL>
<BoL> Return the internal state of the masked array , for pickling purposes . <EoL>
<BoL> All instances of this class shall have the same hash . <EoL>
<BoL> Divide self by other in-place . <EoL>
<BoL> Convert to int . <EoL>
<BoL> Convert to long . <EoL>
<BoL> Check whether other does not equal self elementwise . <EoL>
<BoL> Raise self to the power other , masking the potential NaNs/Infs <EoL>
<BoL> Add other to self , and return a new masked array . <EoL>
<BoL> Override of MaskedArray 's __reduce__ . <EoL>
<BoL> Divide self into other , and return a new masked array . <EoL>
<BoL> Multiply other by self , and return a new masked array . <EoL>
<BoL> Raise other to the power self , masking the potential NaNs/Infs <EoL>
<BoL> Subtract self from other , and return a new masked array . <EoL>
<BoL> Divide self into other , and return a new masked array . <EoL>
<BoL> x.__setitem__ ( i , y ) < == > x [ i ] =y <EoL>
<BoL> Set the mask . <EoL>
<BoL> Restore the internal state of the masked array , for pickling purposes . `` state `` is typically the output of the `` __getstate__ `` output , and is a 5-tuple : <EoL>
<BoL> Subtract other from self , and return a new masked array . <EoL>
<BoL> Divide other into self , and return a new masked array . <EoL>
<BoL> Compare self with other using operator.eq or operator.ne . <EoL>
<BoL> Return the current data , as a view of the original underlying data . <EoL>
<BoL> Return the current mask . <EoL>
<BoL> Return the mask of the records . <EoL>
<BoL> Replace masked values with masked_print_option , casting all innermost dtypes to object . <EoL>
<BoL> Return the mask of the records . <EoL>
<BoL> Copies some attributes of obj to self . <EoL>
<BoL> Returns True if all elements evaluate to True . <EoL>
<BoL> Compute the anomalies ( deviations from the arithmetic mean ) along the given axis . <EoL>
<BoL> Returns True if any of the elements of ` a ` evaluate to True . <EoL>
<BoL> Returns array of indices of the maximum values along the given axis . Masked values are treated as if they had the value fill_value . <EoL>
<BoL> Return array of indices to the minimum values along the given axis . <EoL>
<BoL> Return ` a ` where condition is `` True `` . <EoL>
<BoL> Return all the non-masked data as a 1-D array . <EoL>
<BoL> Copy is a no-op on the maskedconstant , as it is a scalar <EoL>
<BoL> Count the non-masked elements of the array along the given axis . <EoL>
<BoL> Return the cumulative product of the array elements over the given axis . <EoL>
<BoL> Return the cumulative sum of the array elements over the given axis . <EoL>
<BoL> a.dot ( b , out=None ) <EoL>
<BoL> Return a copy of self , with masked values filled with a given value . **However** , if there are no masked values to fill , self will be returned instead as an ndarray . <EoL>
<BoL> Return the filling value of the masked array . <EoL>
<BoL> Return the imaginary part of the masked array . <EoL>
<BoL> Return the real part of the masked array . <EoL>
<BoL> Force the mask to hard . <EoL>
<BoL> Return the addresses of the data and mask areas . <EoL>
<BoL> Return a boolean indicating whether the data is contiguous . <EoL>
<BoL> Return the maximum along a given axis . <EoL>
<BoL> Returns the average of the array elements along given axis . <EoL>
<BoL> Return the minimum along a given axis . <EoL>
<BoL> Return the array minimum along the specified axis . <EoL>
<BoL> Return the indices of unmasked elements that are not zero . <EoL>
<BoL> Return the product of the array elements over the given axis . <EoL>
<BoL> Return ( maximum - minimum ) along the given dimension ( i.e . peak-to-peak value ) . <EoL>
<BoL> Set storage-indexed locations to corresponding values . <EoL>
<BoL> Returns a 1D version of self , as a view . <EoL>
<BoL> Give a new shape to the array without changing its data . <EoL>
<BoL> .. warning : : <EoL>
<BoL> Return each element rounded to the given number of decimals . <EoL>
<BoL> Set the filling value of the masked array . <EoL>
<BoL> Reduce a mask to nomask when possible . <EoL>
<BoL> Force the mask to soft . <EoL>
<BoL> Return the sum of the array elements over the given axis . <EoL>
<BoL> Return the array data as a string containing the raw bytes in the array . <EoL>
<BoL> Save a masked array to a file in binary format . <EoL>
<BoL> Transforms a masked array into a flexible-type array . <EoL>
<BoL> Return the data portion of the masked array as a hierarchical Python list . <EoL>
<BoL> This function is a compatibility alias for tobytes . Despite its name it returns bytes not strings . <EoL>
<BoL> ( this docstring should be overwritten ) <EoL>
<BoL> Copy the mask and set the sharedmask flag to False . <EoL>
<BoL> Return a view of the MaskedArray data <EoL>
<BoL> Apply names , include_names and exclude_names to a table . <EoL>
<BoL> Return the appropriate line index , depending on `` line_or_func `` which can be either a function , a positive or negative int , or None . <EoL>
<BoL> Initialize a table reader allowing for common customizations . <EoL>
<BoL> Initialize a table writer allowing for common customizations . This routine is for internal ( package ) use only and is useful because it depends only on the `` core '' module . <EoL>
<BoL> Replace tabs with spaces in given string , preserving quoted substrings <EoL>
<BoL> Extract info from a header keyword line ( # K ) <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` for a DAOphot header . The DAOphot header is specialized so that we just copy the entire BaseHeader get_cols routine and modify as needed . <EoL>
<BoL> Parse a series of column definition lines like below . There may be several such blocks in a single file ( where continuation characters have already been stripped ) . # N ID XCENTER YCENTER MAG MERR MSKY NITER # U # # pixels pixels magnitudes magnitudes counts # # # F % -9d % -10.3f % -10.3f % -12.3f % -14.3f % -15.7g % -6d <EoL>
<BoL> Extract table-level keywords for DAOphot table . These are indicated by a leading ' # K ' prefix . <EoL>
<BoL> Search lines for special continuation character to determine number of continued rows in a datablock . For efficiency , depth gives the upper limit of lines to search . <EoL>
<BoL> find the first index position for the which the callable pred returns False <EoL>
<BoL> find the first index position for the which the callable pred returns True <EoL>
<BoL> Extends the itertools.groupby functionality to arbitrary number of iterators . <EoL>
<BoL> Set the fill values of the individual cols based on fill_values of BaseData <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` . % ECSV [ ] ( ? P < major > \d+ ) \ . ( ? P < minor > \d+ ) \. ? ( ? P < bugfix > \d+ ) ? $ <EoL>
<BoL> Return only non-blank lines that start with the comment regexp . For these lines strip out the matching characters and leading/trailing whitespace . <EoL>
<BoL> Override the default update_meta to do nothing . This process is done in get_cols ( ) for this reader . <EoL>
<BoL> Write header information in the ECSV ASCII format . <EoL>
<BoL> Override the default write_comments to do nothing since this is handled in the custom write method . <EoL>
<BoL> Set context for serialization . <EoL>
<BoL> Context manager to temporarily set the locale to `` name `` . <EoL>
<BoL> Return a traceback of the attempted read formats for the last call to ` ~astropy.io.ascii.read ` where guessing was enabled . This is primarily for debugging . <EoL>
<BoL> Initialize a table reader allowing for common customizations . Most of the default behavior for various parameters is determined by the Reader class . <EoL>
<BoL> Initialize a table writer allowing for common customizations . Most of the default behavior for various parameters is determined by the Writer class . <EoL>
<BoL> Return the line number at which table data ends . <EoL>
<BoL> Return the line number at which table data begins . <EoL>
<BoL> Set columns from header names , handling multicolumns appropriately . <EoL>
<BoL> Return the line number at which header data begins . <EoL>
<BoL> Convert the given input into a list of SoupString rows for further processing . <EoL>
<BoL> Process the data in multidimensional columns . <EoL>
<BoL> Return HTML data from lines as a generator . <EoL>
<BoL> Deep copy operation on arbitrary Python objects . <EoL>
<BoL> Checks whether the given BeautifulSoup tag is the table the user intends to process . <EoL>
<BoL> IPAC writer , modified from FixedWidth writer <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` . <EoL>
<BoL> Generator to yield IPAC header lines , i.e . those starting and ending with delimiter character ( with trailing whitespace stripped ) <EoL>
<BoL> Extract table-level comments and keywords for IPAC table . See : http : //irsa.ipac.caltech.edu/applications/DDGEN/Doc/ipac_tbl.html # kwTake a string value and convert to float , int or str , and strip quotes as needed . <EoL>
<BoL> Write header . <EoL>
<BoL> Format `` val `` according to `` format_ `` for a plain format specifier , old- or new-style format strings , or using a user supplied function . <EoL>
<BoL> Wrap a single paragraph of text , returning a list of wrapped lines . <EoL>
<BoL> extract column names from tablehead <EoL>
<BoL> Remove whitespace and { } at the beginning or end of value . <EoL>
<BoL> Join values together and add a few extra spaces for readability <EoL>
<BoL> Remove whitespace at the beginning or end of line . Also remove \\ at end of line <EoL>
<BoL> Add a value from a dictionary to a list <EoL>
<BoL> Find the first line which matches a patters <EoL>
<BoL> Sorts any number of lists according to : optionally given item sorting key function ( s ) and/or a global sorting key function . <EoL>
<BoL> Read the input `` table `` and return the table . Most of the default behavior for various parameters is determined by the Reader class . <EoL>
<BoL> Set the default value of the `` guess `` parameter for read ( ) <EoL>
<BoL> Initialize the header Column objects from the table `` lines `` for a SExtractor header . The SExtractor header is specialized so that we just copy the entire BaseHeader get_cols routine and modify as needed . <EoL>
<BoL> __array_wrap__ is called at the end of every ufunc . <EoL>
<BoL> Add other to self in-place . <EoL>
<BoL> Floor divide self by other in-place . <EoL>
<BoL> Multiply self by other in-place . <EoL>
<BoL> Raise self to the power other , in place . <EoL>
<BoL> Subtract other from self in-place . <EoL>
<BoL> True divide self by other in-place . <EoL>
<BoL> Return a 3-tuple for pickling a Column . Use the super-class functionality but then add in a 5-tuple of Column-specific values that get used in __setstate__ . <EoL>
<BoL> Restore the internal state of the Column/MaskedColumn for pickling purposes . This requires that the last element of `` state `` is a 5-tuple that has Column-specific state values . <EoL>
<BoL> Emit a warning if any elements of `` value `` will be truncated when `` value `` is assigned to self . <EoL>
<BoL> Copy key column attributes from `` obj `` to self <EoL>
<BoL> Copy current groups into a copy of self `` out `` <EoL>
<BoL> Encode anything that is unicode-ish as utf-8 . This method is only called for Py3+ . <EoL>
<BoL> Make comparison methods which encode the `` other `` object to utf-8 in the case of a bytestring dtype for Py3+ . <EoL>
<BoL> Compare the column attributes of `` col `` to this object . <EoL>
<BoL> Converts the values of the column in-place from the current unit to the given unit . <EoL>
<BoL> Return a copy of the current instance . <EoL>
<BoL> Return a copy of self , with masked values filled with a given value . <EoL>
<BoL> Group this column by the specified `` keys `` <EoL>
<BoL> Insert values along the given axis before the given indices and return a new ` ~astropy.table.MaskedColumn ` object . <EoL>
<BoL> Return an iterator that yields the string-formatted values of this column . <EoL>
<BoL> Interactively browse column with a paging interface . <EoL>
<BoL> Print a formatted string representation of column values . <EoL>
<BoL> Converts this table column to a ` ~astropy.units.Quantity ` object with the requested units . <EoL>
<BoL> Convert 'fast_reader ' key in kwargs into a dict if not already and make sure 'enable ' key is available . <EoL>
<BoL> Get the full list of reader keyword argument dicts that are the basis for the format guessing process . The returned full list will then be : <EoL>
<BoL> Try to read the table using various sets of keyword args . <EoL>
<BoL> Determine if `` table `` probably contains HTML content . See PR # 3693 and issue # 3691 for context . <EoL>
<BoL> For fast_reader read the `` table `` in chunks and vstack to create a single table , OR return a generator of chunk tables . <EoL>
<BoL> For fast_reader read the `` table `` in chunks and return a generator of tables for each chunk.Stub for get_readable_fileobj , which does not seem to work in Py3 for input File-like object , see # 6460 <EoL>
<BoL> Stack tables vertically ( along rows ) <EoL>
<BoL> Iterates through the subclasses of _BaseHDU and uses that class's match_header ( ) method to determine which subclass to instantiate . <EoL>
<BoL> Calculate the value of the `` CHECKSUM `` card in the HDU . <EoL>
<BoL> Calculate the value for the `` DATASUM `` card in the HDU . <EoL>
<BoL> Calculate the value for the `` DATASUM `` card given the input data <EoL>
<BoL> Encodes the checksum `` value `` using the algorithm described in SPR section A.7.2 and returns it as a 16 character string . <EoL>
<BoL> Wipe out any existing table definition keywords from the header . <EoL>
<BoL> Compute the ones-complement checksum of a sequence of bytes . <EoL>
<BoL> Translated from FITS Checksum Proposal by Seaman , Pence , and Rots . Use uint32 literals as a hedge against type promotion to int64 . <EoL>
<BoL> Write the column definition parameters in the ASCII format read by BinTableHDU.load ( ) to fileobj . <EoL>
<BoL> Write the table data in the ASCII format read by BinTableHDU.load ( ) to fileobj . <EoL>
<BoL> Encode a single byte . <EoL>
<BoL> Return raw array from either the HDU 's memory buffer or underlying file . <EoL>
<BoL> Get the table data from an input HDU object . <EoL>
<BoL> Return the current timestamp in ISO 8601 format , with microseconds stripped off . <EoL>
<BoL> Read the table column definitions from the ASCII file output by BinTableHDU.dump ( ) . <EoL>
<BoL> Read the table data from the ASCII file output by BinTableHDU.dump ( ) . <EoL>
<BoL> Populate the new table definition keywords from the header . <EoL>
<BoL> Summarize the HDU : name , dimensions , and formats . <EoL>
<BoL> Update the data upon addition of a new column through the ` ColDefs ` interface . <EoL>
<BoL> If the data is unsigned int 16 , 32 , or 64 add BSCALE/BZERO cards to header . <EoL>
<BoL> _TableBaseHDU verify method . <EoL>
<BoL> Verify the checksum/datasum values if the cards exist in the header . Simply displays warnings if either the checksum or datasum do n't match . <EoL>
<BoL> Copies the data directly from one file/buffer to the new file . <EoL>
<BoL> Add the `` DATASUM `` card to this HDU with the value set to the checksum calculated for the data . <EoL>
<BoL> Make a copy of the table HDU , both header and data are copied . <EoL>
<BoL> Dump the table HDU to a file in ASCII format . The table may be dumped in three separate files , one containing column definitions , one containing header parameters , and one for table data . <EoL>
<BoL> Calculates and returns the number of bytes that this HDU will write to a file . <EoL>
<BoL> Returns a dictionary detailing information about the locations of this HDU within any associated file . The values are only valid after a read or write of the associated file with no intervening changes to the ` HDUList ` . <EoL>
<BoL> Check the existence , location , and value of a required ` Card ` . <EoL>
<BoL> Update header keywords to reflect recent changes of columns . <EoL>
<BoL> Verify all values in the instance . <EoL>
<BoL> Verify that the value in the `` CHECKSUM `` keyword matches the value calculated for the current HDU CHECKSUM . <EoL>
<BoL> Verify that the value in the `` DATASUM `` keyword matches the value calculated for the `` DATASUM `` of the current HDU data . <EoL>
<BoL> Determine whether or not the card is a record-valued keyword card . <EoL>
<BoL> Implements ` Card._check_if_rvkc ` for the case of an unparsed card image . <EoL>
<BoL> Fix the card image for fixable non-standard compliance . <EoL>
<BoL> If a commentary card 's value is too long to fit on a single card , this will render the card as multiple consecutive commentary card of the same type . <EoL>
<BoL> Break up long string value/comment into `` CONTINUE `` cards . <EoL>
<BoL> Sort of addendum to Card.__init__ to set the appropriate internal attributes if the card was determined to be a RVKC . <EoL>
<BoL> If the card image is greater than 80 characters , it should consist of a normal card followed by one or more CONTINUE card . This method returns the subcards that make up this logical card . <EoL>
<BoL> Extract the keyword value from the card image . <EoL>
<BoL> Extract the keyword value from the card image . <EoL>
<BoL> Split the card image between the keyword and the rest of the card . <EoL>
<BoL> Construct a ` Card ` object from a ( raw ) string . <EoL>
<BoL> ` classmethod ` to convert a keyword value that may contain a field-specifier to uppercase . The effect is to raise the key to uppercase and leave the field specifier in its original case . <EoL>
<BoL> Automatically returns the values for the given keyword attribute for all ` Column ` s in this list . <EoL>
<BoL> Exclude listeners when saving the listener 's state , since they may be ephemeral . <EoL>
<BoL> Add an object to the list of listeners to notify of changes to this object . This adds a weakref to the list of listeners that is removed from the listeners list when the listener has no other references to it . <EoL>
<BoL> Utility function used currently only by _init_from_coldefs to help convert columns from binary format to ASCII format or vice versa if necessary ( otherwise performs a straight copy ) . <EoL>
<BoL> Initialize from an existing ColDefs object ( just copy the columns and convert their formats if necessary ) . <EoL>
<BoL> Notify all listeners of some particular state change by calling their `` _update_ < notification > `` method with the given `` *args `` and `` **kwargs `` . <EoL>
<BoL> Removes the specified listener from the listeners list . <EoL>
<BoL> Append one ` Column ` to the column definition . <EoL>
<BoL> Change an attribute ( in the `` KEYWORD_ATTRIBUTES `` list ) of a ` Column ` . <EoL>
<BoL> Change a ` Column ` 's name . <EoL>
<BoL> Change a ` Column ` 's unit . <EoL>
<BoL> Delete ( the definition of ) one ` Column ` . <EoL>
<BoL> Get attribute ( s ) information of the column definition . <EoL>
<BoL> Determine the dtype that the data should be converted to depending on the BITPIX value in the header , and possibly on the BSCALE value as well . Returns None if there should not be any change . <EoL>
<BoL> Summarize the HDU : name , dimensions , and formats . <EoL>
<BoL> Compress the image data so that it may be written to a file . <EoL>
<BoL> Wrap the basic `` _writedata `` method to restore the `` .data `` attribute to the uncompressed image data in the case of an exception . <EoL>
<BoL> Bypasses ` BinTableHDU._writeheader ( ) ` which updates the header with metadata about the data that is meaningless here ; another reason why this class maybe should n't inherit directly from BinTableHDU ... <EoL>
<BoL> Scale image data by using `` BSCALE `` and `` BZERO `` . <EoL>
<BoL> A `` _BaseDiff `` object acts as ` True ` in a boolean context if the two objects compared are identical . Otherwise it acts as ` False ` . <EoL>
<BoL> Returns a new Diff object of a specific subclass from an existing diff object , passing on the values for any arguments they share in common ( such as ignore_keywords ) . <EoL>
<BoL> Generates a text report on the differences ( if any ) between two objects , and either returns it as a string or writes it to a file-like object . <EoL>
<BoL> Construct a FITS record array from a recarray . <EoL>
<BoL> Return a 3-tuple for pickling a FITS_rec . Use the super-class functionality but then add in a tuple of FITS_rec-specific values that get used in __setstate__ . <EoL>
<BoL> Do not store fields in _converted if one of its bases is self , or if it has a common base with self . <EoL>
<BoL> Special handling for ASCII table columns to convert columns containing numeric types to actual numeric arrays from the string representation . <EoL>
<BoL> Perform conversions on any other fixed-width column data types . <EoL>
<BoL> Convert a raw table column of FITS P or Q format descriptors to a VLA column with the array data returned from the heap . <EoL>
<BoL> Convert a raw table column to a bit array as specified by the FITS X format . <EoL>
<BoL> Returns a pointer into the table 's raw data to its heap ( if present ) . <EoL>
<BoL> Returns the base array of self that `` raw data array '' that is the array in the format that it was first read from a file before it was sliced or viewed as a different type in any way . <EoL>
<BoL> Get all the scaling flags and factors for one column . <EoL>
<BoL> Initializes internal attributes specific to FITS-isms . <EoL>
<BoL> Update the parent array , using the ( latest ) scaled array . <EoL>
<BoL> Convert internal array values back to ASCII table representation . <EoL>
<BoL> Update the dtype field names when a column name is changed . <EoL>
<BoL> The Numpy documentation lies ; ` numpy.ndarray.copy ` is not equivalent to ` numpy.copy ` . <EoL>
<BoL> A view of a ` Column ` 's data as an array . <EoL>
<BoL> Given a ` ColDefs ` object of unknown origin , initialize a new ` FITS_rec ` object . <EoL>
<BoL> Display a single row . <EoL>
<BoL> Get the field data of the record . <EoL>
<BoL> Set the field data of the record . <EoL>
<BoL> Calculate the value for the `` DATASUM `` card in the HDU . <EoL>
<BoL> The beginning and end of most _writedata ( ) implementations are the same , but the details of writing the data array itself can vary between HDU types , so that should be implemented in this method . <EoL>
<BoL> Make a copy of the HDU , both header and data are copied . <EoL>
<BoL> Like ` FitsHDU.fromhdulist ( ) ` , but creates a FitsHDU from a file on disk . <EoL>
<BoL> Creates a new FitsHDU from a given HDUList object . <EoL>
<BoL> Get the group parameter value . <EoL>
<BoL> Set the group parameter value . <EoL>
<BoL> Get the group parameter values . <EoL>
<BoL> Calculate the value for the `` DATASUM `` card in the HDU . <EoL>
<BoL> Handle `` pseudo-unsigned '' integers , if the user requested it . Returns the converted data array if so ; otherwise returns None . <EoL>
<BoL> Determine the dtype that the data should be converted to depending on the BITPIX value in the header , and possibly on the BSCALE value as well . Returns None if there should not be any change . <EoL>
<BoL> Internal function for reading image data from a file and apply scale factors to it . Normally this is used for the entire image , but it supports alternate offset/shape for Section support . <EoL>
<BoL> Update the data upon removal of a column through the ` ColDefs ` interface . <EoL>
<BoL> Delete BSCALE/BZERO from header if necessary . <EoL>
<BoL> Basically copy/pasted from ` _ImageBaseHDU._writedata_internal ( ) ` , but we have to get the data 's byte order a different way ... <EoL>
<BoL> Scale image data by using `` BSCALE `` / `` BZERO `` . <EoL>
<BoL> Returns ` True ` if `` item `` is an `` HDU `` _in_ `` self `` or a valid extension specification ( e.g. , integer extension number , extension name , or a tuple of extension name and an extension version ) of a `` HDU `` in `` self `` . <EoL>
<BoL> Return a shallow copy of an HDUList . <EoL>
<BoL> Delete an HDU from the ` HDUList ` , indexed by number or name . <EoL>
<BoL> Get an HDU from the ` HDUList ` , indexed by number or name . <EoL>
<BoL> Construct a ` HDUList ` object . <EoL>
<BoL> Set an HDU to the ` HDUList ` , indexed by number or name . <EoL>
<BoL> Implements flushing changes in update mode when parts of one or more HDU need to be resized . <EoL>
<BoL> Implements flushing changes to a file in update mode . <EoL>
<BoL> Same as index_of , but ensures always returning a positive index or zero . <EoL>
<BoL> Lazily load a single HDU from the fileobj or data string the ` HDUList ` was opened from , unless no further HDUs are found . <EoL>
<BoL> Attempt an operation that accesses an HDU by index/name that can fail if not all HDUs have been read yet . Keep reading HDUs until the operation succeeds or there are no more HDUs to read . <EoL>
<BoL> Determine if any changes to the HDUList will require a file resize when flushing the file . <EoL>
<BoL> Append a new HDU to the ` HDUList ` . <EoL>
<BoL> Close the associated FITS file and memmap object , if any . <EoL>
<BoL> Returns a dictionary detailing information about the locations of the indexed HDU within any associated file . The values are only valid after a read or write of the associated file with no intervening changes to the ` HDUList ` . <EoL>
<BoL> Return the file name associated with the HDUList object if one exists . Otherwise returns None . <EoL>
<BoL> Force a write of the ` HDUList ` back to the file ( for append and update modes only ) . <EoL>
<BoL> Creates an ` HDUList ` instance from a string or other in-memory data buffer containing an entire FITS file . Similar to : meth : ` HDUList.fromfile ` , but does not accept the mode or memmap arguments , as they are only relevant to reading from a file on disk . <EoL>
<BoL> Get the index of an HDU from the ` HDUList ` . <EoL>
<BoL> Summarize the info of the HDUs in this ` HDUList ` . <EoL>
<BoL> Insert an HDU into the ` HDUList ` at the given `` index `` . <EoL>
<BoL> Remove an item from the list and return it . <EoL>
<BoL> Read data of all HDUs into memory . <EoL>
<BoL> Make sure that if the primary header needs the keyword `` EXTEND `` that it has it and it is correct . <EoL>
<BoL> Two Headers are equal only if they have the exact same string representation . <EoL>
<BoL> Construct a ` Header ` from an iterable and/or text file . <EoL>
<BoL> Add a commentary card . <EoL>
<BoL> Returns an index into the ._cards list given a valid lookup key . <EoL>
<BoL> Returns the number of blank cards at the end of the Header . <EoL>
<BoL> Utility method to search a header block for the END card and handle invalid END cards . <EoL>
<BoL> The meat of ` Header.fromfile ` ; in a separate method so that ` Header.fromfile ` itself is just responsible for wrapping file handling . Also used by ` _BaseHDU.fromstring ` . <EoL>
<BoL> Return ` True ` if the input keyword contains a wildcard pattern . <EoL>
<BoL> Given an integer index , return the ( keyword , repeat ) tuple that index refers to . For most keywords the repeat will always be zero , but it may be greater than zero for keywords that are duplicated ( especially commentary keywords ) . <EoL>
<BoL> Inserts a new card before or after an existing card ; used to implement support for the legacy before/after keyword arguments to Header.update ( ) . <EoL>
<BoL> Used to implement Header.__setitem__ and CardAccessor.__setitem__ . <EoL>
<BoL> Given a commentary keyword and value , returns a list of the one or more cards needed to represent the full value . This is primarily used to create the multiple commentary cards needed to represent a long value that wo n't fit into a single commentary card . <EoL>
<BoL> Strip cards specific to a certain kind of header . <EoL>
<BoL> The real update code . If keyword already exists , its value and/or comment will be updated . Otherwise a new card will be appended . <EoL>
<BoL> For all cards with index above idx , increment or decrement its index value in the keyword_indices dict . <EoL>
<BoL> Returns a list of indices of the cards matching the given wildcard pattern . <EoL>
<BoL> Add a blank card . <EoL>
<BoL> Add a `` COMMENT `` card . <EoL>
<BoL> Add a `` HISTORY `` card . <EoL>
<BoL> Appends a new keyword+value card to the end of the Header , similar to ` list.append ` . <EoL>
<BoL> Remove all cards from the header . <EoL>
<BoL> Make a copy of the : class : ` Header ` . <EoL>
<BoL> Returns the count of the given keyword in the header , similar to ` list.count ` if the Header object is treated as a list of keywords . <EoL>
<BoL> Similar to : meth : ` Header.fromstring ` , but reads the header string from a given file-like object or filename . <EoL>
<BoL> Similar to : meth : ` dict.fromkeys ` -- creates a new ` Header ` from an iterable of keywords and an optional default value . <EoL>
<BoL> Creates an HDU header from a byte string containing the entire header data . <EoL>
<BoL> Read a header from a simple text file or file-like object . <EoL>
<BoL> Similar to : meth : ` dict.get ` -- returns the value associated with keyword in the header , or a default value if the keyword is not found . <EoL>
<BoL> Returns the index if the first instance of the given keyword in the header , similar to ` list.index ` if the Header object is treated as a list of keywords . <EoL>
<BoL> Inserts a new keyword+value card into the Header at a given location , similar to ` list.insert ` . <EoL>
<BoL> Like : meth : ` dict.items ` . <EoL>
<BoL> Like : meth : ` dict.keys ` -- iterating directly over the ` Header ` instance has the same behavior . <EoL>
<BoL> Works like : meth : ` list.pop ` if no arguments or an index argument are supplied ; otherwise works like : meth : ` dict.pop ` . <EoL>
<BoL> Similar to : meth : ` dict.popitem ` . <EoL>
<BoL> Removes the first instance of the given keyword from the header similar to ` list.remove ` if the Header object is treated as a list of keywords . <EoL>
<BoL> Rename a card 's keyword in the header . <EoL>
<BoL> Set the value and/or comment and/or position of a specified keyword . <EoL>
<BoL> Similar to : meth : ` dict.setdefault ` . <EoL>
<BoL> Returns a string representation of the header . <EoL>
<BoL> Write the header as text to a file or a file-like object . <EoL>
<BoL> Update the Header with new keyword values , updating the values of existing keywords and appending new keywords otherwise ; similar to ` dict.update ` . <EoL>
<BoL> Like : meth : ` dict.values ` . <EoL>
<BoL> Calculate the value for the `` DATASUM `` card in the HDU . <EoL>
<BoL> Summarize the HDU : name , dimensions , and formats . <EoL>
<BoL> ImageHDU verify method . <EoL>
<BoL> Update the header keywords to agree with the data . <EoL>
<BoL> Construct a ` StreamingHDU ` object given a file name and a header . <EoL>
<BoL> Close the physical FITS file . <EoL>
<BoL> Write the given data to the stream . <EoL>
<BoL> Calculate the value for the `` DATASUM `` card in the HDU . <EoL>
<BoL> ` TableHDU ` verify method . <EoL>
<BoL> Append the header/data to FITS file if filename exists , create if not . <EoL>
<BoL> Iterate the nested structure as a list of strings with appropriate indentations for each level of structure . <EoL>
<BoL> Format a floating number to make sure it gets the decimal point . <EoL>
<BoL> Converts a card value to its appropriate string representation as defined by the FITS format . <EoL>
<BoL> Converts an a string to an int if possible , or to a float . <EoL>
<BoL> Pad blank space to the input string to be multiple of 80 . <EoL>
<BoL> Converts a given string to either an int or a float if necessary . <EoL>
<BoL> Split a long string into parts where each part is no longer than `` strlen `` and no word is cut into two pieces . But if there is one single word which is longer than `` strlen `` , then it will be split in the middle of the word . <EoL>
<BoL> Set the validator for this column attribute . <EoL>
<BoL> Updates the list of the start columns , the list of the widths of each field , and the total width of each record in the table . <EoL>
<BoL> Creates a column format from a Numpy record dtype format . <EoL>
<BoL> Creates a column format object from another column format object regardless of their type . <EoL>
<BoL> Creates a column format from a Numpy record dtype format . <EoL>
<BoL> To make sure the new item has consistent data type to avoid misalignment . <EoL>
<BoL> Compares two numpy recformats using the ordering given by FORMATORDER . <EoL>
<BoL> Converts an array to a new dtype -- if the itemsize of the new dtype is the same as the old dtype and both types are not numeric , a view is returned . Otherwise a new array must be created . <EoL>
<BoL> Convert ASCII table format spec to record format spec . <EoL>
<BoL> Convert FITS format spec to record format spec . <EoL>
<BoL> Convert FITS format spec to record format spec . Do the opposite if reverse=True . <EoL>
<BoL> Convert record format spec to FITS format spec . <EoL>
<BoL> Utility function for converting a dtype object or string that instantiates a dtype ( e.g . 'float32 ' ) into one of the two character Numpy format codes that have been traditionally used by Astropy . <EoL>
<BoL> Turn the TDISPn fortran format pieces into a final Python format string . <EoL>
<BoL> Get the index of the `` key `` in the `` names `` list . <EoL>
<BoL> Construct the P ( or Q ) format column array , both the data descriptors and the data . It returns the output `` data '' array of data type ` dtype ` . <EoL>
<BoL> Parse the `` TFORMn `` keywords for ASCII tables into a `` ( format , width , precision ) `` tuple ( the latter is always zero unless format is one of ' E ' , ' F ' , or 'D ' ) . <EoL>
<BoL> Parse the `` TDIM `` value into a tuple ( may return an empty tuple if the value `` TDIM `` value is empty or invalid ) . <EoL>
<BoL> Parse the `` TDISPn `` keywords for ASCII and binary tables into a `` ( format , width , precision , exponential ) `` tuple ( the TDISP values for ASCII and binary are identical except for 'Lw ' , which is only present in BINTABLE extensions <EoL>
<BoL> Parse `` TFORMn `` keyword for a binary table into a `` ( repeat , format , option ) `` tuple . <EoL>
<BoL> Given a scalar value or string , returns the minimum FITS column format that can represent that value . 'minimum ' is defined by the order given in FORMATORDER . <EoL>
<BoL> Unwrap the X format column into a Boolean array . <EoL>
<BoL> Wrap the X format column Boolean array into an `` UInt8 `` array . <EoL>
<BoL> Indent a block of text . The indentation is applied to each line . <EoL>
<BoL> Returns ` True ` if the given object is iterable . <EoL>
<BoL> Return the items of an iterable paired with its next item . <EoL>
<BoL> Turn the Python format string to a TDISP FITS compliant format string . <EoL>
<BoL> Write summary information about data object to the `` out `` filehandle . By default this prints to standard output via sys.stdout . <EoL>
<BoL> Get the values for the parent `` attrs `` and return as a dict . <EoL>
<BoL> Adjust info indices after column modification . <EoL>
<BoL> This is a mixin-safe version of Column.iter_str_vals . <EoL>
<BoL> Utility method to merge and validate the attributes `` attrs `` for the input table columns `` cols `` . <EoL>
<BoL> Given a sliced object , modify its indices to correctly represent the slice . <EoL>
<BoL> Any instance should evaluate to True , except when it is empty . <EoL>
<BoL> Overrides the default behavior of the ` copy.copy ` function in the python stdlib to behave like ` Time.copy ` . Does *not* make a copy of the JD arrays - only copies by reference . <EoL>
<BoL> Overrides the default behavior of the ` copy.deepcopy ` function in the python stdlib to behave like ` Time.copy ` . Does make a copy of the JD arrays . <EoL>
<BoL> If other is an incompatible object for comparison , return ` False ` . Otherwise , return ` True ` if the time difference between self and other is zero . <EoL>
<BoL> Get dynamic attributes to output format or do timescale conversion . <EoL>
<BoL> If other is an incompatible object for comparison , return ` True ` . Otherwise , return ` False ` if the time difference between self and other is zero . <EoL>
<BoL> Turn argmin , argmax output into an advanced index . <EoL>
<BoL> Create a new time object , possibly applying a method to the arrays . <EoL>
<BoL> Calculate a sidereal time using a IAU precession/nutation model . <EoL>
<BoL> Get ERFA DUT arg = UT1 - UTC . <EoL>
<BoL> Coerce setitem value into an equivalent Time object <EoL>
<BoL> Ensure that ` val ` is matched to length of self . If val has length 1 then broadcast , otherwise cast to double and make sure shape matches . <EoL>
<BoL> This is the key routine that actually does time scale conversions . This is not public and not connected to the read-only scale property . <EoL>
<BoL> If other is of same class as self , compare difference in self.scale . Otherwise , return NotImplemented <EoL>
<BoL> Return indices of the maximum values along the given axis . <EoL>
<BoL> Return indices of the minimum values along the given axis . <EoL>
<BoL> Returns the indices that would sort the time array . <EoL>
<BoL> Return a fully independent copy the Time object , optionally changing the format . <EoL>
<BoL> Return an instance with the specified diagonals . <EoL>
<BoL> Return a copy with the array collapsed into one dimension . <EoL>
<BoL> Find UT1 - UTC differences by interpolating in IERS Table . <EoL>
<BoL> Insert values before the given indices in the column and return a new ` ~astropy.time.Time ` or ` ~astropy.time.TimeDelta ` object . <EoL>
<BoL> Light travel time correction to the barycentre or heliocentre . <EoL>
<BoL> Maximum along a given axis . <EoL>
<BoL> Minimum along a given axis . <EoL>
<BoL> Creates a new object corresponding to the instant in time this method is called . <EoL>
<BoL> Peak to peak ( maximum - minimum ) along a given axis . <EoL>
<BoL> Return an instance with the array collapsed into one dimension . <EoL>
<BoL> Return a replica of the Time object , optionally changing the format . <EoL>
<BoL> Returns an instance containing the same data with a new shape . <EoL>
<BoL> Return a copy sorted along the specified axis . <EoL>
<BoL> Return an instance with single-dimensional shape entries removed <EoL>
<BoL> Convert Time to a string or a numpy.array of strings according to a format specification . See ` time.strftime ` documentation for format specification . <EoL>
<BoL> Parse a string to a Time according to a format specification . See ` time.strptime ` documentation for format specification . <EoL>
<BoL> Return an instance with the given axes interchanged . <EoL>
<BoL> Return a new instance formed from the elements at the given indices . <EoL>
<BoL> Return an instance with the data transposed . <EoL>
<BoL> Decode a Table `` tbl `` that has astropy Columns + appropriate meta-data into the corresponding table with mixin columns ( as appropriate ) . <EoL>
<BoL> Encode a Table `` tbl `` that may have mixin columns to a Table with only astropy Columns + appropriate meta-data to allow subsequent decoding . <EoL>
<BoL> Returns the first item returned by iterating over an iterable object . <EoL>
<BoL> Determine whether ` origin ` is a FITS file . <EoL>
<BoL> Convert an ` ~astropy.table.Table ` object to a FITS ` ~astropy.io.fits.BinTableHDU ` . <EoL>
<BoL> Write a Table object to a FITS file <EoL>
<BoL> When mmap is in use these objects hold a reference to the mmap of the file ( so there is only one , shared by all HDUs that reference this file ) . <EoL>
<BoL> Open a FITS file from a file-like object , i.e . one that has read and/or write methods . <EoL>
<BoL> Open a FITS file from a filename string . <EoL>
<BoL> Open a FITS file from a file object ( including compressed files ) . <EoL>
<BoL> Limited support for zipfile.ZipFile objects containing a single a file . Allows reading only for now by extracting the file to a tempfile . <EoL>
<BoL> Overwrite an existing file if `` overwrite `` is `` True `` , otherwise raise an OSError . The exact behavior of this method depends on the _File object state and is only meant for use within the `` _open_* `` internal methods . <EoL>
<BoL> Attempt to determine if the given file is compressed <EoL>
<BoL> Close the 'physical ' FITS file . <EoL>
<BoL> Similar to file.read ( ) , but returns the contents of the underlying file as a numpy array ( or mmap 'd array if memmap=True ) rather than a string . <EoL>
<BoL> Similar to file.write ( ) , but writes a numpy array instead of a string . <EoL>
<BoL> Matches any HDU that is not recognized as having either the SIMPLE or XTENSION keyword in its header 's first card , but is nonetheless not corrupted . <EoL>
<BoL> Allow file object to already be opened in any of the valid modes and and leave the file in the same state ( opened or closed ) as when the function was called . <EoL>
<BoL> Delete all instances of keyword from a header in a FITS file . <EoL>
<BoL> Returns True if the given file-like object is closed or if f is a string ( and assumed to be a pathname ) . <EoL>
<BoL> Returns the 'mode ' string of a file-like object if such a thing exists . Otherwise returns None . <EoL>
<BoL> Returns the 'name ' of file-like object f , if it has anything that could be called its name . <EoL>
<BoL> Get the header from an extension of a FITS file . <EoL>
<BoL> Get a keyword 's value from a header in a FITS file . <EoL>
<BoL> Print the summary information on a FITS file . <EoL>
<BoL> Compare two parts of a FITS file , including entire FITS files , FITS ` HDUList ` objects and FITS `` HDU `` objects . <EoL>
<BoL> Create a table from the input ASCII files . <EoL>
<BoL> Update the specified extension with the input data/header . <EoL>
<BoL> The `` _BaseDiff `` class does not implement a `` _diff `` method and should not be instantiated directly . Instead instantiate the appropriate subclass of `` _BaseDiff `` for the objects being compared ( for example , use ` HeaderDiff ` to compare two ` Header ` objects . <EoL>
<BoL> This is an abstract HDU type for HDUs that contain table-like data . This is even more abstract than _TableBaseHDU which is specifically for the standard ASCII and Binary Table types . <EoL>
<BoL> Diff two scalar values . If both values are floats , they are compared to within the given absolute and relative tolerance . <EoL>
<BoL> Write a diff between two header keyword values or comments to the specified file-like object . <EoL>
<BoL> Write a diff report between two values to the specified file-like object . <EoL>
<BoL> Get a signature object for the passed callable . <EoL>
<BoL> A version of : func : ` numpy.allclose ` that returns the indices where the two arrays differ , instead of just a boolean value . <EoL>
<BoL> Create a numpy array from a file or a file-like object . <EoL>
<BoL> Write a numpy array to a file or a file-like object . <EoL>
<BoL> Test whether a string is a valid URL <EoL>
<BoL> Write a string to a file , encoding to ASCII if the file is open in binary mode , or decoding if the file is open in text mode . <EoL>
<BoL> Accepts a URL , downloads and optionally caches the result returning the filename , with a name determined by the file 's MD5 hash . If `` cache=True `` and the file is present in the cache , just returns the filename . <EoL>
<BoL> A wrapper around the ` open ( ) ` builtin . <EoL>
<BoL> Returns True if the given object represents an OS-level file ( that is , `` isinstance ( f , file ) `` ) . <EoL>
<BoL> Returns True if the file-like object can be read from . This is a common- sense approximation of io.IOBase.readable . <EoL>
<BoL> Returns True if the file-like object can be written to . This is a common- sense approximation of io.IOBase.writable . <EoL>
<BoL> Takes a unicode array and fills the output string array with the ASCII encodings ( if possible ) of the elements of the input array . The two arrays must be the same size ( though not necessarily the same shape ) . <EoL>
<BoL> Compatibility function for using the recarray base class 's field method . This incorporates the legacy functionality of returning string arrays as Numeric-style chararray objects . <EoL>
<BoL> Returns True if any fields in a structured array have Unicode dtype . <EoL>
<BoL> Performs an in-place rstrip operation on string arrays . This is necessary since the built-in ` np.char.rstrip ` in Numpy does not perform an in-place calculation . <EoL>
<BoL> This class should never be instantiated directly . Either a standard extension HDU type should be used for a specific extension , or NonstandardExtHDU should be used . <EoL>
<BoL> Matches any extension HDU that is not one of the standard extension HDU types . <EoL>
<BoL> Creates a customized copy of the Parameter . <EoL>
<BoL> Differs from the base class : class : ` _writedata ` in that it doesn't automatically add padding , and treats the data as a string of raw bytes instead of an array . <EoL>
<BoL> Matches any HDU that has the 'SIMPLE ' keyword but is not a standard Primary or Groups HDU . <EoL>
<BoL> Attempts to extract an integer number from the given value . If the extraction fails , the value of the 'default ' argument is returned . <EoL>
<BoL> If the array has an mmap.mmap at base of its base chain , return the mmap object ; otherwise return None . <EoL>
<BoL> Used primarily by _BaseHDU.__new__ to find an appropriate HDU class to use based on values in the header . See the _BaseHDU.__new__ docstring . <EoL>
<BoL> Bytes needed to pad the input stringlen to the next FITS block . <EoL>
<BoL> Given a numpy dtype , finds its `` zero '' point , which is exactly in the middle of its range . <EoL>
<BoL> Generator over all subclasses of a given class , in depth first order . <EoL>
<BoL> Given a list of objects , returns a mapping of objects in that list to the index or indices at which that object was found in the list . <EoL>
<BoL> Given a list of parnames , including possible duplicates , returns a new list of parnames with duplicates prepended by one or more underscores to make them unique . This is also case insensitive . <EoL>
<BoL> Create a temporary file name which should not already exist . Use the directory of the input file as the base name of the mkstemp ( ) output . <EoL>
<BoL> This decorator registers a custom SIGINT handler to catch and ignore SIGINT until the wrapped function is completed . <EoL>
<BoL> _ImageBaseHDU is sort of an abstract class for HDUs containing image data ( as opposed to table data ) and should never be used directly . <EoL>
<BoL> This is an abstract type that implements the shared functionality of the ASCII and Binary Table HDU types , which should be used instead of this . <EoL>
<BoL> Ensures that all the data of a binary FITS table ( represented as a FITS_rec object ) is in a big-endian byte order . Columns are swapped in-place one at a time , and then returned to their previous byte order when this context manager exits . <EoL>
<BoL> Helper for implementing __setitem__ on _CardAccessor subclasses ; slices should always be handled in this same way . <EoL>
<BoL> Set the value of a specified commentary card or cards . <EoL>
<BoL> Slices and filter strings return a new _HeaderComments containing the returned cards . Otherwise the comment of a single card is returned . <EoL>
<BoL> Returns a simple list of all keywords and their comments . <EoL>
<BoL> Set/update the comment on specified card or cards . <EoL>
<BoL> Determine the size of a FITS header block if a non-blank separator is used between cards . <EoL>
<BoL> Returns True if the give file or file-like object has a file open in binary mode . When in doubt , returns True by default . <EoL>
<BoL> Write a ` ~numpy.ndarray ` to a file-like object ( which is not supported by ` numpy.ndarray.tofile ` ) . <EoL>
<BoL> Takes care of some corner cases in Python where the mode string is either oddly formatted or does not truly represent the file mode . <EoL>
<BoL> Like : func : ` textwrap.wrap ` but preserves existing paragraphs which : func : ` textwrap.wrap ` does not otherwise handle well . Also handles section headers . <EoL>
<BoL> Return a string representing the path to the file requested from the io.fits test data set . <EoL>
<BoL> Unpickle pickled objects from a specified file and return the contents . <EoL>
<BoL> Encode a Table `` tbl `` that may have mixin columns to a Table with only astropy Columns + appropriate meta-data to allow subsequent decoding . <EoL>
<BoL> Find all structured arrays in an HDF5 file <EoL>
<BoL> Read a Table object from an HDF5 file <EoL>
<BoL> Register HDF5 with Unified I/O . <EoL>
<BoL> Returns the first valid format that can be used to read/write the data in question . Mode can be either 'read ' or 'write ' . <EoL>
<BoL> Determine if class2 is the `` best '' match for class1 in the list of classes . It is assumed that ( class2 in classes ) is True . class2 is the the best match if : <EoL>
<BoL> Update the docstring to include all the available readers / writers for the `` data_class.read `` or `` data_class.write `` functions ( respectively ) . <EoL>
<BoL> Contextmanager to disable documentation updates when registering reader and writer . The documentation is only built once when the contextmanager exits . <EoL>
<BoL> Get the list of registered I/O formats as a Table . <EoL>
<BoL> Get reader for `` data_format `` . <EoL>
<BoL> Get writer for `` data_format `` . <EoL>
<BoL> Loop through identifiers to see which formats match . <EoL>
<BoL> Read in data . <EoL>
<BoL> Associate an identifier function with a specific data type . <EoL>
<BoL> Register a reader function . <EoL>
<BoL> Register a table writer function . <EoL>
<BoL> Unregister an identifier function <EoL>
<BoL> Unregister a reader function <EoL>
<BoL> Unregister a writer function <EoL>
<BoL> Write out data . <EoL>
<BoL> Create a ` VOTableFile ` instance from a given ` astropy.table.Table ` instance . <EoL>
<BoL> Given an key *ref* , finds the first element in the iterator with the attribute ID == *ref* or name == *ref* . <EoL>
<BoL> Given a string *ref* , finds the first element in the iterator where the given attribute == *ref* . <EoL>
<BoL> Often , you know there is only one table in the file , and that 's all you need . This method returns that first table . <EoL>
<BoL> Get a table by its ordinal position in the file . <EoL>
<BoL> Recursively iterate over all COOSYS_ elements in the VOTABLE_ file . <EoL>
<BoL> Recursively iterate over all FIELD_ and PARAM_ elements in the VOTABLE_ file . <EoL>
<BoL> Recursively iterate over all GROUP_ elements in the VOTABLE_ file . <EoL>
<BoL> Recursively iterate over all INFO_ elements in the VOTABLE_ file . <EoL>
<BoL> Iterates over all tables in the VOTable file in a `` flat '' way , ignoring the nesting of resources etc . <EoL>
<BoL> Recursively iterate over all VALUES_ elements in the VOTABLE_ file . <EoL>
<BoL> Set the output storage format of all tables in the file . <EoL>
<BoL> Given an ` ~astropy.table.Table ` object , return a ` ~astropy.io.votable.tree.VOTableFile ` file structure containing just that single table . <EoL>
<BoL> Reads the header of a file to determine if it is a VOTable file . <EoL>
<BoL> Read a Table object from an VO table file <EoL>
<BoL> Convert the object *value* in the native in-memory datatype to a string of bytes suitable for serialization in the BINARY_ format . <EoL>
<BoL> Reads some number of bytes from the BINARY_ format representation by calling the function *read* , and returns the native in-memory object representation for the datatype handled by *self* . <EoL>
<BoL> Convert the object *value* ( in the native in-memory datatype ) to a unicode string suitable for serializing in the TABLEDATA_ format . <EoL>
<BoL> Convert the string *value* from the TABLEDATA_ format into an object with the correct native in-memory datatype and mask flag . <EoL>
<BoL> Returns True when the field can be completely empty . <EoL>
<BoL> Parse a single scalar of the underlying type of the converter . <EoL>
<BoL> Masked arrays of zero length that also have a mask of zero length cause problems in Numpy ( at least in 1.6.2 ) . This function creates a masked array from data and a mask , unless it is zero length . <EoL>
<BoL> Converts a bit array ( a string of bits in a bytes object ) to a boolean Numpy array . <EoL>
<BoL> Converts a numpy boolean array to a bit array ( a string of bits in a bytes object ) . <EoL>
<BoL> Get an appropriate converter instance for a given field . <EoL>
<BoL> Converts a numpy dtype and shape to a dictionary of attributes for a VOTable FIELD element and correspond to that type . <EoL>
<BoL> Given a ` astropy.table.Column ` instance , returns the attributes necessary to create a VOTable FIELD element that corresponds to the type of the column . <EoL>
<BoL> Raise an exception , with proper position information if available . <EoL>
<BoL> Warn , with proper position information if available . <EoL>
<BoL> Remove any common leading whitespace from every line in ` text ` . <EoL>
<BoL> Parses the vo warning string back into its parts . <EoL>
<BoL> Raise an exception , with proper position information if available . <EoL>
<BoL> Reads the header of a file to determine if it is a VOTable file . <EoL>
<BoL> Parses a VOTABLE_ xml file ( or file-like object ) , reading and returning only the first ` ~astropy.io.votable.tree.Table ` instance . <EoL>
<BoL> Resets all of the vo warning state so that warnings that have already been emitted will be emitted again . This is used , for example , by ` validate ` which must emit all warnings each time it is called . <EoL>
<BoL> Prints a validation report for the given file . <EoL>
<BoL> Writes a ` ~astropy.io.votable.tree.VOTableFile ` to a VOTABLE_ xml file . <EoL>
<BoL> For internal use . Parse the XML content of the children of the element . <EoL>
<BoL> For internal use . Output the element to XML . <EoL>
<BoL> Restores a ` Field ` instance from a given ` astropy.table.Column ` instance . <EoL>
<BoL> Sets the attributes of a given ` astropy.table.Column ` instance to match the information in this ` Field ` . <EoL>
<BoL> Make sure that all names and titles in a list of fields are unique , by appending numbers if necessary . <EoL>
<BoL> Lookup the : class : ` Field ` instance that this : class : ` FieldRef ` references . <EoL>
<BoL> Lookup the : class : ` Param ` instance that this : class : `` PARAMref `` references . <EoL>
<BoL> Recursively iterates over all the COOSYS_ elements in the resource and nested resources . <EoL>
<BoL> Recursively iterates over all FIELD_ and PARAM_ elements in the resource , its tables and nested resources . <EoL>
<BoL> Recursively iterates over all the INFO_ elements in the resource and nested resources . <EoL>
<BoL> Recursively iterates over all tables in the resource and nested resources . <EoL>
<BoL> Are the settings on this `` VALUE `` element all the same as the XML defaults ? <EoL>
<BoL> Flush internal buffers . <EoL>
<BoL> Closes open elements , up to ( and including ) the element identified by the given identifier . <EoL>
<BoL> Adds a comment to the output stream . <EoL>
<BoL> Adds character data to the output stream . <EoL>
<BoL> Adds an entire element . This is the same as calling ` start ` , ` data ` , and ` end ` in sequence . The `` text `` argument can be omitted . <EoL>
<BoL> Closes the current element ( opened by the most recent call to ` start ` ) . <EoL>
<BoL> Returns the number of indentation levels the file is currently in . <EoL>
<BoL> Returns a string of spaces that matches the current indentation level . <EoL>
<BoL> Converts an object with a bunch of attributes on an object into a dictionary for use by the ` XMLWriter ` . <EoL>
<BoL> Opens a new element . Attributes can be given as keyword arguments , or as a string/string dictionary . The method returns an opaque identifier that can be passed to the : meth : ` close ` method , to close all open elements up to and including this one . <EoL>
<BoL> A convenience method for creating wrapper elements using the `` with `` statement . <EoL>
<BoL> Context manager to control how XML data tags are cleaned ( escaped ) to remove potentially unsafe characters or constructs . <EoL>
<BoL> Get the default unit format as specified in the VOTable spec . <EoL>
<BoL> Get the unit format based on the configuration . <EoL>
<BoL> Creates a function useful for looking up an element by a given attribute.Given a string *ref* , finds the first element in the iterator where the given attribute == *ref* . <EoL>
<BoL> Like ` _lookup_by_attr_factory ` , but looks in both the `` ID '' and `` name '' attributes.Given an key *ref* , finds the first element in the iterator with the attribute ID == *ref* or name == *ref* . <EoL>
<BoL> Masked arrays can not be resized inplace , and ` np.resize ` and ` ma.resize ` are both incompatible with structured arrays . Therefore , we do all this . <EoL>
<BoL> Raises a ` ~astropy.io.votable.exceptions.VOTableSpecError ` if *year* is not a valid astronomical year as defined by the VOTABLE standard . <EoL>
<BoL> Raises a ` ~astropy.io.votable.exceptions.VOTableSpecError ` if *string* is not a string or Unicode string . <EoL>
<BoL> Warns or raises a ` ~astropy.io.votable.exceptions.VOTableSpecError ` if *ucd* is not a valid ` unified content descriptor ` _ string as defined by the VOTABLE standard . <EoL>
<BoL> Returns the official English description of the given UCD *name* . <EoL>
<BoL> Returns True if *name* is a valid primary name . <EoL>
<BoL> Returns True if *name* is a valid secondary name . <EoL>
<BoL> Returns the standard capitalization form of the given name . <EoL>
<BoL> Returns False if *ucd* is not a valid ` unified content descriptor ` _ . <EoL>
<BoL> Parse the UCD into its component parts . <EoL>
<BoL> Coerces and/or verifies the object *p* into a valid range-list-format parameter . <EoL>
<BoL> Returns a writable file-like object suitable for streaming output . <EoL>
<BoL> Compare two VOTable version identifiers . <EoL>
<BoL> Raises a ` ~astropy.io.votable.exceptions.VOTableSpecError ` if *uri* is not a valid URI . <EoL>
<BoL> Raises a ` ~astropy.io.votable.exceptions.VOTableSpecError ` if *ID* is not a valid XML ID_ . <EoL>
<BoL> Raises a ` ~astropy.io.votable.exceptions.VOTableSpecError ` if *content_type* is not a valid MIME content type . <EoL>
<BoL> Raises a ` ValueError ` if *token* is not a valid XML token . <EoL>
<BoL> Given an arbitrary string , create one that can be used as an xml id . <EoL>
<BoL> Validates the given file against the appropriate VOTable schema . <EoL>
<BoL> Reset logger to its initial state <EoL>
<BoL> Disable colorized output <EoL>
<BoL> Disable logging of exceptions <EoL>
<BoL> Disable logging of warnings.warn ( ) calls <EoL>
<BoL> Enable colorized output <EoL>
<BoL> Enable logging of exceptions <EoL>
<BoL> Enable logging of warnings.warn ( ) calls <EoL>
<BoL> Determine if the exception-logging mechanism is enabled . <EoL>
<BoL> Context manager to temporarily log messages to a file . <EoL>
<BoL> Context manager to temporarily log messages to a list . <EoL>
<BoL> Initialize the handler . <EoL>
<BoL> The formatter for stderr <EoL>
<BoL> Flushes the stream . <EoL>
<BoL> Initializes the Astropy log -- in most circumstances this is called automatically when importing astropy . <EoL>
<BoL> Shut down exception and warning logging ( if enabled ) and clear all Astropy loggers from the logging module 's cache . <EoL>
<BoL> Search the online Astropy documentation for the given query . <EoL>
<BoL> Add a key , data pair . <EoL>
<BoL> Return all data values corresponding to a given key . <EoL>
<BoL> Find the node associated with the given key . <EoL>
<BoL> Returns whether this is a valid BST . <EoL>
<BoL> Return BST items in order as ( key , data ) pairs . <EoL>
<BoL> Return all nodes with keys in the given range . <EoL>
<BoL> Return nodes in the given range . <EoL>
<BoL> Remove data corresponding to the given key . <EoL>
<BoL> Replace all rows with the values they map to in the given dictionary . Any rows not present as keys in the dictionary will have their nodes deleted . <EoL>
<BoL> Assuming the given value has smaller length than keys , return nodes whose keys have this value as a prefix . <EoL>
<BoL> Decrement all rows larger than the given row . <EoL>
<BoL> Increment all rows greater than or equal to the given row . <EoL>
<BoL> Make row order align with key order . <EoL>
<BoL> Return BST rows sorted by key values . <EoL>
<BoL> Return nodes of the BST in the given order . <EoL>
<BoL> Filter groups in the Column based on evaluating function `` func `` on each group sub-table . <EoL>
<BoL> Return a new Column instance which is consistent with the input `` cols `` and has `` length `` rows . <EoL>
<BoL> Determine if `` col `` should be added to the table directly as a mixin column . <EoL>
<BoL> Support converting Row to np.array via np.array ( table ) . <EoL>
<BoL> Display row as a single-line table but with appropriate header line . <EoL>
<BoL> Returns a *read-only* copy of the row values in the form of np.void or np.ma.mvoid objects . <EoL>
<BoL> Add a key , value pair . <EoL>
<BoL> Find rows corresponding to the given key . <EoL>
<BoL> Return a list of key , data tuples . <EoL>
<BoL> Return row values in the given range . <EoL>
<BoL> Remove data from the given key . <EoL>
<BoL> Replace rows with the values in row_map . <EoL>
<BoL> Decrement rows larger than the given row . <EoL>
<BoL> Increment rows greater than or equal to the given row . <EoL>
<BoL> Make row order align with key order . <EoL>
<BoL> Return a list of rows in order sorted by key . <EoL>
<BoL> Return a sliced reference to this sorted array . <EoL>
<BoL> Retrieve the ith slice of the sorted array from begin to end . <EoL>
<BoL> Add a new entry to the sorted array . <EoL>
<BoL> Find all rows matching the given key . <EoL>
<BoL> Return the index of the largest key in data greater than or equal to the given key , data pair . <EoL>
<BoL> Retrieve all array items as a list of pairs of the form [ ( key , [ row 1 , row 2 , ... ] ) , ... ] <EoL>
<BoL> Find values in the given range . <EoL>
<BoL> Remove the given entry from the sorted array . <EoL>
<BoL> Replace all rows with the values they map to in the given dictionary . Any rows not present as keys in the dictionary will have their entries deleted . <EoL>
<BoL> Decrement all row numbers greater than the input row . <EoL>
<BoL> Increment all row numbers greater than or equal to the input row . <EoL>
<BoL> Make row order align with key order . <EoL>
<BoL> Return rows in sorted order . <EoL>
<BoL> Get items from a TableColumns object . : : <EoL>
<BoL> Return a list of columns which are instances of the specified classes . <EoL>
<BoL> Return a list of columns which are not instances of the specified classes . <EoL>
<BoL> Get the output size ( number of lines and character width ) for Column and Table pformat/pprint methods . <EoL>
<BoL> Aggregate each group in the Table into a single row by applying the reduction function `` func `` to group values in each column . <EoL>
<BoL> Filter groups in the Table based on evaluating function `` func `` on each group sub-table . <EoL>
<BoL> Finalizes the masked array . <EoL>
<BoL> Special hook for ufuncs . <EoL>
<BoL> Return a 3-tuple for pickling a MaskedArray . <EoL>
<BoL> Literal string representation . <EoL>
<BoL> Return a new array with fields in ` drop_names ` dropped . <EoL>
<BoL> Add a key , value pair . <EoL>
<BoL> Find rows corresponding to the given key . <EoL>
<BoL> Return a list of key , data tuples . <EoL>
<BoL> Return row values in the given range . <EoL>
<BoL> Remove data from the given key . <EoL>
<BoL> Replace rows with the values in row_map . <EoL>
<BoL> Decrement rows larger than the given row . <EoL>
<BoL> Increment rows greater than or equal to the given row . <EoL>
<BoL> Make row order align with key order . <EoL>
<BoL> Return a list of rows in order sorted by key . <EoL>
<BoL> Return all nodes in this BST . <EoL>
<BoL> Remove the given child . <EoL>
<BoL> Replace this node 's child with a new child . <EoL>
<BoL> Copy the given node . <EoL>
<BoL> Mixin-safe version of Column.copy ( ) ( with copy_data=True ) . <EoL>
<BoL> Prints colors and styles to the terminal uses ANSI escape sequences . <EoL>
<BoL> Parse the number out of a dtype.str value like ' < U5 ' or ' < f8 ' . <EoL>
<BoL> Return a human-oriented string name of the `` dtype `` arg . This can be use by astropy methods that present type information about a data object . <EoL>
<BoL> Fixes column names so that they are compatible with Numpy on Python 2 . Raises a ValueError exception if the column name contains Unicode characters , which can not reasonably be used as a column name . <EoL>
<BoL> Get groups for `` table `` on specified `` keys `` . <EoL>
<BoL> Get groups for `` column `` on specified `` keys `` <EoL>
<BoL> Returns an index in `` table `` corresponding to the `` names `` columns or None if no such index exists . <EoL>
<BoL> Return a deep copy of this index . <EoL>
<BoL> Returns a sliced version of this index . <EoL>
<BoL> Number of rows in index . <EoL>
<BoL> Return the position of col_name in self.columns . <EoL>
<BoL> Return the row values corresponding to key , in sorted order . <EoL>
<BoL> Return an iterable corresponding to the input row specifier . <EoL>
<BoL> Insert a new row from the given values . <EoL>
<BoL> Return rows within the given range . <EoL>
<BoL> Recreate the index based on data in self.columns . <EoL>
<BoL> Remove the given row from the index . <EoL>
<BoL> Remove the given rows from the index . <EoL>
<BoL> Replace the value of a column at a given position . <EoL>
<BoL> Replace an indexed column with an updated reference . <EoL>
<BoL> Modify rows in this index to agree with the specified slice . For example , given an index { ' 5 ' : 1 , ' 2 ' : 0 , ' 3 ' : 2 } on a column [ ' 2 ' , ' 5 ' , ' 3 ' ] , an input col_slice of [ 2 , 0 ] will result in the relabeling { ' 3 ' : 0 , ' 2 ' : 1 } on the sliced column [ ' 3 ' , ' 2 ' ] . <EoL>
<BoL> Return rows whose keys contain the supplied key as a prefix . <EoL>
<BoL> Return rows whose keys have a prefix in the given range . <EoL>
<BoL> Make row numbers follow the same sort order as the keys of the index . <EoL>
<BoL> Returns a list of rows in sorted order based on keys ; essentially acts as an argsort ( ) on columns . <EoL>
<BoL> Returns another slice of this Index slice . <EoL>
<BoL> Return a newly created index from the given slice . <EoL>
<BoL> Convert the input row from sliced coordinates back to original coordinates . <EoL>
<BoL> Convert the input rows to the sliced coordinate system . <EoL>
<BoL> Assign Table row 's by value slice . <EoL>
<BoL> Retrieve Table rows indexes by value slice . <EoL>
<BoL> Retrieve an item from the list of indices . <EoL>
<BoL> Retrieve Table rows by value slice . <EoL>
<BoL> Retrieve Table row 's indices by value slice . <EoL>
<BoL> This creates a subclass of the column 's class which overrides that class 's `` __getitem__ `` , such that when returning a slice of the column , the relevant indices are also copied over to the slice . <EoL>
<BoL> Inputs a table and some subset of its columns , and returns an index corresponding to this subset or None if no such index exists . <EoL>
<BoL> Return true if the object is a class . <EoL>
<BoL> Context manager to temporarily override individual column info.serialize_method dict values . <EoL>
<BoL> Write summary information about column to the `` out `` filehandle . By default this prints to standard output via sys.stdout . <EoL>
<BoL> Return an absolute path . <EoL>
<BoL> Returns the directory component of a pathname <EoL>
<BoL> Join two or more pathname components , inserting '/ ' as needed . <EoL>
<BoL> Return items as a ColumnOrderList , which sorts in the preferred way for column attributes . <EoL>
<BoL> Construct OrderedDict from ! ! omap in yaml safe load . <EoL>
<BoL> Extract information from a column ( apart from the values ) that is required to fully serialize the column . <EoL>
<BoL> Represent ColumnDict in yaml dump . <EoL>
<BoL> Represent OrderedDict in yaml dump . <EoL>
<BoL> This is the same code as BaseRepresenter.represent_sequence ( ) , but the value passed to dump.represent_data ( ) in the loop is a dictionary instead of a tuple . <EoL>
<BoL> Get a header dict from input `` lines `` which should be valid YAML . <EoL>
<BoL> Return lines with a YAML representation of header content from a Table.Custom Dumper that represents OrderedDict as an ! ! omap object.This is a combination of the Python 2 and 3 versions of this method in the PyYAML library to allow the required key ordering via the ColumnOrderList object . The Python 3 version insists on turning the items ( ) mapping into a list object and sorting , which results in alphabetical order for the column keys . <EoL>
<BoL> Return lines with a YAML representation of header content from the `` table `` . <EoL>
<BoL> Add counts from two counters . <EoL>
<BoL> Intersection is the minimum of corresponding counts . <EoL>
<BoL> Inplace add from another counter , keeping only positive counts . <EoL>
<BoL> Inplace intersection is the minimum of corresponding counts . <EoL>
<BoL> Create a new , empty Counter object . <EoL>
<BoL> Inplace union is the maximum of value from either counter . <EoL>
<BoL> Inplace subtract counter , but keep only results with positive counts . <EoL>
<BoL> Subtracts from an empty counter . Strips positive and zero counts , and flips the sign on negative counts . <EoL>
<BoL> Union is the maximum of value in either of the input counters . <EoL>
<BoL> Subtract count , but keep only results with positive counts . <EoL>
<BoL> Internal method to strip elements with a negative or zero count <EoL>
<BoL> Iterator over elements repeating each as many times as its count . <EoL>
<BoL> List the n most common elements and their counts from the most common to the least . If n is None , then list all element counts . <EoL>
<BoL> Like dict.update ( ) but subtracts counts instead of replacing them . <EoL>
<BoL> Like dict.update ( ) but add counts instead of replacing them . <EoL>
<BoL> Use numpy to find the common dtype for a list of structured ndarray columns . <EoL>
<BoL> Find the dtypes descrs resulting from merging the list of arrays ' dtypes , using the column name mapping `` col_name_map `` . <EoL>
<BoL> Partial replacement for ` ~numpy.core.records.fromrecords ` which includes a workaround for the bug with unicode arrays described at : https : //github.com/astropy/astropy/issues/3052 <EoL>
<BoL> Check that tables is a Table or sequence of Tables . Returns the corresponding list of Tables . <EoL>
<BoL> From a list of input objects `` objs `` get merged output object class . <EoL>
<BoL> Stack Tables vertically ( by rows ) <EoL>
<BoL> Use numpy to find the common dtype for a list of columns . <EoL>
<BoL> Find the dtypes descrs resulting from merging the list of arrays ' dtypes , using the column name mapping `` col_name_map `` . <EoL>
<BoL> Take a set difference of table rows . <EoL>
<BoL> Returns the unique rows of a table . <EoL>
<BoL> Iterate through possible string-derived format functions . <EoL>
<BoL> Wrap format function to trap masked values . <EoL>
<BoL> Returns a tuple ( height , width ) containing the height and width of the terminal . <EoL>
<BoL> Return a new Quantity instance which is consistent with the input `` cols `` and has `` length `` rows . <EoL>
<BoL> Iterate through possible string-derived format functions . <EoL>
<BoL> Convert any mixin columns to plain Column or MaskedColumn and return a new table . Exclude any mixin columns in `` exclude_classes `` , which must be a tuple of classes . <EoL>
<BoL> Return new sorted list containing all values in both sequences . <EoL>
<BoL> Return true if ` value ` is an element of the sorted list . <EoL>
<BoL> Return a shallow copy of the sorted list . <EoL>
<BoL> Remove value at ` index ` from sorted list . <EoL>
<BoL> Lookup value at ` index ` in sorted list . <EoL>
<BoL> Update sorted list with values from ` other ` . <EoL>
<BoL> Update the sorted list with ` num ` shallow copies of values . <EoL>
<BoL> Initialize sorted list instance . <EoL>
<BoL> Return an iterator over the sorted list . <EoL>
<BoL> Return the size of the sorted list . <EoL>
<BoL> Return new sorted list with ` num ` shallow copies of values . <EoL>
<BoL> Create new sorted list or sorted-key list instance . <EoL>
<BoL> Return string representation of sorted list . <EoL>
<BoL> Return a reverse iterator over the sorted list . <EoL>
<BoL> Raise not-implemented error . <EoL>
<BoL> Return an index to insert ` value ` in the sorted list . <EoL>
<BoL> Build a positional index for indexing the sorted list . <EoL>
<BoL> Check invariants of sorted list . <EoL>
<BoL> Remove all values from sorted list . <EoL>
<BoL> Delete value at the given ` ( pos , idx ) ` . <EoL>
<BoL> Split sublists with length greater than double the load-factor . <EoL>
<BoL> Return an iterator that slices sorted list using two index pairs . <EoL>
<BoL> Convert an index pair ( lists index , sublist index ) into a single index number that corresponds to the position of the value in the sorted list . <EoL>
<BoL> Convert an index into an index pair ( lists index , sublist index ) that can be used to access the corresponding lists position . <EoL>
<BoL> Reset sorted list load factor . <EoL>
<BoL> Update sorted list by adding all values from ` iterable ` . <EoL>
<BoL> Add ` value ` to sorted list . <EoL>
<BoL> Raise not-implemented error . <EoL>
<BoL> Return an index to insert ` value ` in the sorted list . <EoL>
<BoL> Return number of occurrences of ` value ` in the sorted list . <EoL>
<BoL> Remove ` value ` from sorted list if it is a member . <EoL>
<BoL> Raise not-implemented error . <EoL>
<BoL> Return first index of value in sorted list . <EoL>
<BoL> Raise not-implemented error . <EoL>
<BoL> Return an iterator that slices sorted list from ` start ` to ` stop ` . <EoL>
<BoL> Remove and return value at ` index ` in sorted list . <EoL>
<BoL> Remove ` value ` from sorted list ; ` value ` must be a member . <EoL>
<BoL> Raise not-implemented error . <EoL>
<BoL> Call np.searchsorted or use a custom binary search if necessary . <EoL>
<BoL> Create a new instance , with `` method `` applied to underlying data . <EoL>
<BoL> Return an instance containing copies of the internal data . <EoL>
<BoL> Array-interface compliant full description of a column . <EoL>
<BoL> Constructs a ` TestRunner ` to run in the given path , and returns a `` test ( ) `` function which takes the same arguments as ` TestRunner.run_tests ` . <EoL>
<BoL> Generates the path for multiple packages . <EoL>
<BoL> Return the spec for the specified module . <EoL>
<BoL> Return a validated scale value . <EoL>
<BoL> Input value validation , typically overridden by derived classes <EoL>
<BoL> Return time representation from internal jd1 and jd2 . <EoL>
<BoL> Return a list of subformats where name matches `` pattern `` using fnmatch . <EoL>
<BoL> Write time to a string using a given format . <EoL>
<BoL> Read time from a single string , using a set of possible formats . <EoL>
<BoL> Generator that yields a dict of values corresponding to the calendar date and time for the internal JD values . <EoL>
<BoL> Input value validation , typically overridden by derived classesRemove ndarray subclasses since for jd1/jd2 we want a pure ndarray or a Python or numpy scalar . <EoL>
<BoL> Initialize the internal jd1 and jd2 attributes given val1 and val2 . <EoL>
<BoL> Convert datetime object contained in val1 to jd1 , jd2 <EoL>
<BoL> Convert to ( potentially timezone-aware ) ` ~datetime.datetime ` object . <EoL>
<BoL> Absolute value of a ` TimeDelta ` object . <EoL>
<BoL> Division of ` TimeDelta ` objects by numbers/arrays . <EoL>
<BoL> Multiplication of ` TimeDelta ` objects by numbers/arrays . <EoL>
<BoL> Negation of a ` TimeDelta ` object . <EoL>
<BoL> Division by ` TimeDelta ` objects of numbers/arrays . <EoL>
<BoL> Multiplication of numbers/arrays with ` TimeDelta ` objects . <EoL>
<BoL> Division by ` TimeDelta ` objects of numbers/arrays . <EoL>
<BoL> Division of ` TimeDelta ` objects by numbers/arrays . <EoL>
<BoL> Coerce setitem value into an equivalent TimeDelta object <EoL>
<BoL> This is the key routine that actually does time scale conversions . This is not public and not connected to the read-only scale property . <EoL>
<BoL> Convert to `` datetime.timedelta `` object . <EoL>
<BoL> Check that the scale is in the allowed list of scales , or is ` None ` <EoL>
<BoL> Read time and deprecated scale if present <EoL>
<BoL> Parse the time strings contained in val1 and set jd1 , jd2 <EoL>
<BoL> Set internal jd1 and jd2 from val1 and val2 . Must be provided by derived classes . <EoL>
<BoL> Return a new Time instance which is consistent with the input Time objects `` cols `` and has `` length `` rows . <EoL>
<BoL> Return a new TimeDelta instance which is consistent with the input Time objects `` cols `` and has `` length `` rows . <EoL>
<BoL> If `` val `` or `` val2 `` are masked arrays then fill them and cast to ndarray.Fill the given MaskedArray `` val `` from the first non-masked element in the array . This ensures that upstream Time initialization will succeed . <EoL>
<BoL> Take `` val `` and convert/reshape to an array . If `` copy `` is ` True ` then copy input values . <EoL>
<BoL> Factory to create a function that can be used as an `` option `` for outputting data object summary information . <EoL>
<BoL> Return the sum of `` val1 `` and `` val2 `` as two float64s , an integer part and the fractional remainder . <EoL>
<BoL> When overriding a __dir__ method on an object , you often want to include the `` standard '' members on the object as well . This decorator takes care of that automatically , and all the wrapped function needs to do is return a list of the `` special '' members that would n't be found by the normal Python means . <EoL>
<BoL> Iterate through each of the sub-formats and try substituting simple regular expressions for the strptime codes for year , month , day-of-month , hour , minute , second . <EoL>
<BoL> Like `` day_frac `` , but for quantities with units of time . <EoL>
<BoL> Multiple `` a `` and `` b `` exactly , returning the result as two float64s . The first is the approximate product ( with some floating point error ) and the second is the error of the float64 product . <EoL>
<BoL> Add `` a `` and `` b `` exactly , returning the result as two float64s . The first is the approximate sum ( with some floating point error ) and the second is the error of the float64 sum . <EoL>
<BoL> Split float64 in two aligned parts . <EoL>
<BoL> For compatibility with python copy module . <EoL>
<BoL> Do a comparison between self and other , raising UnitsError when other can not be converted to self because it has different physical unit , and returning NotImplemented when there are other errors . <EoL>
<BoL> Generate a new ` FunctionQuantity ` with the physical unit decomposed . <EoL>
<BoL> Return string representation for unit . <EoL>
<BoL> Add/subtract LogUnit to/from another unit , and adjust physical unit . <EoL>
<BoL> Copy oneself , possibly with a different physical unit . <EoL>
<BoL> Get physical type corresponding to physical unit . <EoL>
<BoL> Generate latex representation of unit name . This is used by the IPython notebook to print a unit with a nice layout . <EoL>
<BoL> Copy the current unit with the physical unit decomposed . <EoL>
<BoL> Transformation from value in physical to value in logarithmic units . Used in equivalency . <EoL>
<BoL> Returns ` True ` if this unit is equivalent to `` other `` . <EoL>
<BoL> Return the converted values in the specified unit . <EoL>
<BoL> Transformation from value in logarithmic to value in physical units . Used in equivalency . <EoL>
<BoL> Output the unit in the given format as a string . <EoL>
<BoL> Transformation from value in physical to value in function units . <EoL>
<BoL> Transformation from value in function to value in physical units . <EoL>
<BoL> Returns ` True ` if the unit is unscaled and dimensionless . <EoL>
<BoL> Return a unit object composed of only irreducible units . <EoL>
<BoL> Adds to the equivalencies enabled in the unit registry . <EoL>
<BoL> Adds to the set of units enabled in the unit registry . <EoL>
<BoL> Notes -- -- - Returns True if two arrays are element-wise equal within a tolerance . <EoL>
<BoL> Generates a summary of units from a given namespace . This is used to generate the docstring for the modules that define the actual units . <EoL>
<BoL> Sets the units enabled in the unit registry . <EoL>
<BoL> Convert between the `` beam `` unit , which is commonly used to express the area of a radio telescope resolution element , and an area on the sky . This equivalency also supports direct conversion between `` Jy/beam `` and `` Jy/steradian `` units , since that is a common operation . <EoL>
<BoL> Defines the conversion between Jy/sr and `` brightness temperature '' , : math : ` T_B ` , in Kelvins . <EoL>
<BoL> Adds to the set of equivalencies enabled in the unit registry . <EoL>
<BoL> Adds to the set of units enabled in the unit registry . <EoL>
<BoL> Get all units in the registry with the same physical type as the given unit . <EoL>
<BoL> Sets the equivalencies enabled in the unit registry . <EoL>
<BoL> Sets the units enabled in the unit registry . <EoL>
<BoL> Set up all of the standard metric prefixes for a unit . This function should not be used directly , but instead use the ` prefixes ` kwarg on ` def_unit ` . <EoL>
<BoL> Validate value is acceptable for conversion purposes . <EoL>
<BoL> Given a list of sequences , modules or dictionaries of units , or single units , return a flat set of all the units found . <EoL>
<BoL> Normalizes equivalencies , ensuring each is a 4-tuple of the form : : <EoL>
<BoL> This is used to reconstruct units when passed around by multiprocessing . <EoL>
<BoL> If either input is a Fraction , convert the other to a Fraction . This ensures that any operation involving a Fraction will use rational arithmetic and preserve precision . <EoL>
<BoL> Sets the equivalencies enabled in the unit registry . <EoL>
<BoL> Convert a power to a floating point value , an integer , or a Fraction . <EoL>
<BoL> A decorator for validating the units of arguments to functions . <EoL>
<BoL> From a list of target units ( either as strings or unit objects ) and physical types , return a list of Unit objects . <EoL>
<BoL> Validates the object passed in to the wrapped function , `` arg `` , with target unit or physical type , `` target `` . <EoL>
<BoL> Adds a new physical unit mapping . <EoL>
<BoL> Allow angles to be equivalent to dimensionless ( with 1 rad = 1 m/m = 1 ) . <EoL>
<BoL> Return the equivalency pairs for the optical convention for velocity . <EoL>
<BoL> Return the equivalency pairs for the radio convention for velocity . <EoL>
<BoL> Return the equivalency pairs for the relativistic convention for velocity . <EoL>
<BoL> Allow logarithmic units to be converted to dimensionless fractions <EoL>
<BoL> Returns a list of equivalence pairs that handle the conversion between mass and energy . <EoL>
<BoL> Returns the equivalence between amu and molar mass . <EoL>
<BoL> Returns a list of equivalence pairs that handle the conversion between parallax angle and distance . <EoL>
<BoL> Convert between pixel distances ( in units of `` pix `` ) and angular units , given a particular `` pixscale `` . <EoL>
<BoL> Convert between lengths ( to be interpreted as lengths in the focal plane ) and angular units with a specified `` platescale `` . <EoL>
<BoL> Returns a list of equivalence pairs that handle spectral wavelength , wave number , frequency , and energy equivalences . <EoL>
<BoL> Convert between Kelvin , Celsius , and Fahrenheit here because Unit and CompositeUnit can not do addition or subtraction properly . <EoL>
<BoL> Convert between Kelvin and keV ( eV ) to an equivalent amount . <EoL>
<BoL> Defines the conversion between Jy/beam and `` thermodynamic temperature '' , : math : ` T_ { CMB } ` , in Kelvins . The thermodynamic temperature is a unit very commonly used in cosmology . See eqn 8 in [ 1 ] <EoL>
<BoL> Convert between quantities with little-h and the equivalent physical units . <EoL>
<BoL> Convert a string to a unit object . <EoL>
<BoL> Convert a unit object to a string . <EoL>
<BoL> Formats a value in exponential notation for LaTeX . <EoL>
<BoL> When a string is n't found in a set of candidates , we can be nice to provide a list of alternatives in the exception . This convenience function helps to format that part of the exception . <EoL>
<BoL> Get a formatter by name . <EoL>
<BoL> abs ( a ) <EoL>
<BoL> a ! = 0 <EoL>
<BoL> Will be math.ceil ( a ) in 3.0 . <EoL>
<BoL> complex ( self ) == complex ( float ( self ) , 0 ) <EoL>
<BoL> divmod ( self , other ) : The pair ( self // other , self % other ) . <EoL>
<BoL> a == b <EoL>
<BoL> float ( self ) = self.numerator / self.denominator <EoL>
<BoL> Will be math.floor ( a ) in 3.0 . <EoL>
<BoL> a // b <EoL>
<BoL> a > = b <EoL>
<BoL> a > b <EoL>
<BoL> hash ( self ) <EoL>
<BoL> a < = b <EoL>
<BoL> a < b <EoL>
<BoL> a % b <EoL>
<BoL> -a <EoL>
<BoL> Constructs a Rational . <EoL>
<BoL> +a : Coerces a subclass instance to Fraction <EoL>
<BoL> a ** b <EoL>
<BoL> divmod ( other , self ) : The pair ( self // other , self % other ) . <EoL>
<BoL> epr ( self ) <EoL>
<BoL> a // b <EoL>
<BoL> a % b <EoL>
<BoL> Will be round ( self , ndigits ) in 3.0 . <EoL>
<BoL> a ** b <EoL>
<BoL> str ( self ) <EoL>
<BoL> trunc ( a ) <EoL>
<BoL> a + b <EoL>
<BoL> a / b <EoL>
<BoL> a * b <EoL>
<BoL> Generates forward and reverse operators given a purely-rational operator and a function from the operator module . <EoL>
<BoL> Helper for comparison operators , for internal use only . <EoL>
<BoL> a - b <EoL>
<BoL> Conjugate is a no-op for Reals . <EoL>
<BoL> Converts a finite Decimal instance to a rational number , exactly . <EoL>
<BoL> Converts a finite float to a rational number , exactly . <EoL>
<BoL> Closest Fraction to self with denominator at most max_denominator . <EoL>
<BoL> Partially decomposes a unit so it is only composed of units that are `` known '' to a given format . <EoL>
<BoL> A wrapper around ` astropy.utils.misc.did_you_mean ` that deals with the display of deprecated units . <EoL>
<BoL> Converts a value for a power ( which may be floating point or a ` fractions.Fraction ` object ) , into a string either looking like an integer or a fraction . <EoL>
<BoL> Groups the powers and bases in the given ` ~astropy.units.CompositeUnit ` into positive powers and negative powers for easy display on either side of a solidus . <EoL>
<BoL> Given a number , split it into its mantissa and base 10 exponent parts , each as strings . If the exponent is too small , it may be returned as the empty string . <EoL>
<BoL> Raises a UnitsWarning about a deprecated unit in a given format . Suggests a decomposed alternative if one is available . <EoL>
<BoL> Returns a given docstring with a deprecation message prepended to it.Given a function or classmethod ( or other function wrapper type ) , get the function object.Returns a wrapped function that displays `` warning_type `` when it is called.Update the docstring and wrap the `` __init__ `` in-place ( or `` __new__ `` if the class or any of the bases overrides `` __new__ `` ) so it will give a deprecation warning when an instance is created . <EoL>
<BoL> Enable magnitude zero point units so they appear in results of ` ~astropy.units.UnitBase.find_equivalent_units ` and ` ~astropy.units.UnitBase.compose ` . <EoL>
<BoL> Given a unit , returns the name of the physical quantity it represents . If it represents an unknown physical quantity , `` `` unknown '' `` is returned . <EoL>
<BoL> Enable Imperial units so they appear in results of ` ~astropy.units.UnitBase.find_equivalent_units ` and ` ~astropy.units.UnitBase.compose ` . <EoL>
<BoL> Notes -- -- - Returns True if two arrays are element-wise equal within a tolerance . <EoL>
<BoL> An equivalency for converting linear flux units ( `` maggys '' ) defined relative to a standard source into a standardized system . <EoL>
<BoL> Return the next value , or raise StopIteration . <EoL>
<BoL> Test whether the items in value can have arbitrary units <EoL>
<BoL> Check that function output can be stored in the output array given . <EoL>
<BoL> Determine the required converters and the unit of the ufunc result . <EoL>
<BoL> Called if a ufunc is not found . <EoL>
<BoL> Import the helpers from the given module using its helper function . <EoL>
<BoL> Register ( but do not import ) a set of ufunc helpers . <EoL>
<BoL> Like Unit._get_converter , except returns None if no scaling is needed , i.e. , if the inferred scale is unity . <EoL>
<BoL> Get the first sentence from a string and remove any carriage returns . <EoL>
<BoL> Generates the `` ( unit , doc , represents , aliases , prefixes ) `` tuple used to format the unit summary docs in ` generate_unit_summary ` . <EoL>
<BoL> Generates table entries for units in a namespace that are just prefixes without the base unit . Note that this is intended to be used *after* ` generate_unit_summary ` and therefore does not include the table header . <EoL>
<BoL> Constructor for JSONEncoder , with sensible defaults . <EoL>
<BoL> Return a JSON string representation of a Python data structure . <EoL>
<BoL> Encode the given object and yield each string representation as available . <EoL>
<BoL> Defined for convenient sorting of ` OrderedDescriptor ` instances , which are defined to sort in their creation order . <EoL>
<BoL> The same as `` namedtuple._adict ( ) `` . <EoL>
<BoL> Determine if the `` filename `` argument is an allowable type for a filename . <EoL>
<BoL> Returns ` True ` if the specified Python module satisfies a minimum version requirement , and ` False ` if not . <EoL>
<BoL> Update the progress bar to the given value ( out of the total given to the constructor ) . <EoL>
<BoL> Update the progress bar to the given value ( out of a total given to the constructor ) . <EoL>
<BoL> Update progress bar via the console or notebook accordingly . <EoL>
<BoL> Update the progress bar to the given value ( out of the total given to the constructor . <EoL>
<BoL> Get the global InteractiveShell instance . Returns None if no InteractiveShell instance is registered . <EoL>
<BoL> Returns a string wrapped in ANSI color codes for coloring the text in a terminal : : <EoL>
<BoL> Decode the supplied byte string using the preferred encoding for the locale ( ` locale.getpreferredencoding ` ) or , if the default encoding is invalid , fall back first on utf-8 , then on latin-1 if the message can not be decoded with utf-8 . <EoL>
<BoL> This utility function contains the logic to determine what streams to use by default for standard out/err . <EoL>
<BoL> Write the supplied string with the given write function like `` write ( s ) `` , but use a writer for the locale 's preferred encoding in case of a UnicodeEncodeError . Failing that attempt to write with 'utf-8 ' or 'latin-1 ' . <EoL>
<BoL> Returns a human-friendly string representing a file size that is 2-4 characters long . <EoL>
<BoL> Returns a human-friendly time string that is always exactly 6 characters long . <EoL>
<BoL> Returns ` True ` if `` file `` is a tty . <EoL>
<BoL> Prints a line of source code , highlighting a particular character position in the line . Useful for displaying the context of error messages . <EoL>
<BoL> Remove ANSI color codes from the string . <EoL>
<BoL> Uses the lock directory method . This is good because ` mkdir ` is atomic at the system call level , so it 's thread-safe . <EoL>
<BoL> Looks for a local file by hash - returns file name if found and a valid file , otherwise returns None . <EoL>
<BoL> Look for data in the source-included data directories and return the path . <EoL>
<BoL> Finds the path to the data cache directory and makes them if they do n't exist . <EoL>
<BoL> Determines if a given directory has enough space to hold a file of a given size . Raises an OSError if the file would be too large . <EoL>
<BoL> Clears the data file cache by deleting the local file ( s ) . <EoL>
<BoL> Computes the MD5 hash for a file . <EoL>
<BoL> Get the list of URLs in the cache . Especially useful for looking up what files are stored in your cache when you do n't have internet access . <EoL>
<BoL> Retrieves the contents of a filename or file-like object . <EoL>
<BoL> Given a path to a directory , returns the amount of free space ( in bytes ) on that filesystem . <EoL>
<BoL> Retrieves a data file from the standard locations and returns its contents as a bytes object . <EoL>
<BoL> Returns the path of all of the data files in a given directory that match a given glob pattern . <EoL>
<BoL> Retrieves a data file from the standard locations for the package and provides the file as a file-like object that reads bytes . <EoL>
<BoL> Returns readable file objects for all of the data files in a given directory that match a given glob pattern . <EoL>
<BoL> Accessor for tempfile.tempdir . <EoL>
<BoL> Check if a download from `` url_key `` is in the cache . <EoL>
<BoL> Get a data object attribute for the `` attributes `` info summary method <EoL>
<BoL> Get the values for object `` attrs `` and return as a dict . <EoL>
<BoL> Utility function for ` wraps ` . <EoL>
<BoL> Replaces the docstring of the decorated object and then formats it . <EoL>
<BoL> Given an exception message string , uses new-style formatting arguments `` { filename } `` , `` { lineno } `` , `` { func } `` and/or `` { text } `` to fill in information about the exception that occurred . For example : <EoL>
<BoL> Returns all the public attributes of a module referenced by name . <EoL>
<BoL> Returns ` True ` if the given object is an instance method of the class it is defined on ( as opposed to a ` staticmethod ` or a ` classmethod ` ) . <EoL>
<BoL> Determines if a given file or directory is hidden . <EoL>
<BoL> Use numpy to find the common dtype for a list of ndarrays . <EoL>
<BoL> Context manager to temporarily enable one or more custom metadata merge strategies . <EoL>
<BoL> Open browser loaded with pizza options near you . <EoL>
<BoL> Given an OS signal number , returns a signal name . If the signal number is unknown , returns `` 'UNKNOWN ' `` . <EoL>
<BoL> A context manager that silences sys.stdout and sys.stderr . <EoL>
<BoL> Remove accents from a Unicode string . <EoL>
<BoL> A wrapper for ` os.walk ` that skips hidden files and directories . <EoL>
<BoL> Returns ` True ` if *uri* is a valid URI as defined in RFC 2396 . <EoL>
<BoL> Returns ` True ` if *ID* is a valid XML ID . <EoL>
<BoL> Returns ` True ` if *content_type* is a valid MIME content type ( syntactically at least ) , as defined by RFC 2045 . <EoL>
<BoL> Returns ` True ` if *token* is a valid XML token , as defined by XML Schema Part 2 . <EoL>
<BoL> Given an arbitrary string , create one that can be used as an xml id . This is rather simplistic at the moment , since it just replaces non-valid characters with underscores . <EoL>
<BoL> Returns a function suitable for streaming input , or a file object . <EoL>
<BoL> Determine the encoding of an XML file by reading its header . <EoL>
<BoL> Returns an iterator over the elements of an XML file . <EoL>
<BoL> Get the lines from a given XML file . Correctly determines the encoding and always returns unicode . <EoL>
<BoL> Validates an XML file against a schema or DTD . <EoL>
<BoL> Enter the watcher 's context and allow starting new processes <EoL>
<BoL> Exit the watcher 's context <EoL>
<BoL> Register a new child handler . <EoL>
<BoL> Attach the watcher to an event loop . <EoL>
<BoL> Close the watcher . <EoL>
<BoL> Removes the handler for process 'pid ' . <EoL>
<BoL> Notification that a TimerHandle has been cancelled . <EoL>
<BoL> Close the loop . <EoL>
<BoL> Register read pipe in event loop . Set the pipe to non-blocking mode . <EoL>
<BoL> Register write pipe in event loop . <EoL>
<BoL> Returns True if the event loop was closed . <EoL>
<BoL> Return whether the event loop is currently running . <EoL>
<BoL> Run the event loop until stop ( ) is called . <EoL>
<BoL> Run the event loop until a Future is done . <EoL>
<BoL> Shutdown all active asynchronous generators . <EoL>
<BoL> Stop the event loop as soon as reasonable . <EoL>
<BoL> Get the event loop for the current context . <EoL>
<BoL> Create and return a new event loop object according to this policy 's rules . If there 's need to set this loop as the event loop for the current context , set_event_loop must be called explicitly . <EoL>
<BoL> Set the watcher for child processes . <EoL>
<BoL> Set the event loop for the current context to loop . <EoL>
<BoL> Stop serving . This leaves existing connections open . <EoL>
<BoL> Coroutine to wait until service is closed . <EoL>
<BoL> Add a Handle to _scheduled ( TimerHandle ) or _ready . <EoL>
<BoL> Like _add_callback ( ) but called from a signal handler . <EoL>
<BoL> Check that the current thread is the thread running the event loop . <EoL>
<BoL> Process selector events . <EoL>
<BoL> Run one full iteration of the event loop . <EoL>
<BoL> Notification that a TimerHandle has been cancelled . <EoL>
<BoL> Write a byte to self-pipe , to wake up the event loop . <EoL>
<BoL> Like call_later ( ) , but uses an absolute time . <EoL>
<BoL> Call the current event loop 's exception handler . <EoL>
<BoL> Arrange for a callback to be called at a given time . <EoL>
<BoL> Arrange for a callback to be called as soon as possible . <EoL>
<BoL> Like call_soon ( ) , but thread-safe . <EoL>
<BoL> Close the event loop . <EoL>
<BoL> Handle an accepted connection . <EoL>
<BoL> Create a Future object attached to the loop . <EoL>
<BoL> Schedule a coroutine object . <EoL>
<BoL> Default exception handler . <EoL>
<BoL> Return an exception handler , or None if the default one is in use . <EoL>
<BoL> Return a task factory , or None if the default one is in use . <EoL>
<BoL> Returns True if the event loop was closed . <EoL>
<BoL> Returns True if the event loop is running . <EoL>
<BoL> Run until stop ( ) is called . <EoL>
<BoL> Run until the Future is done . <EoL>
<BoL> Set handler as the new event loop exception handler . <EoL>
<BoL> Set a task factory that will be used by loop.create_task ( ) . <EoL>
<BoL> Shutdown all active asynchronous generators . <EoL>
<BoL> Stop running the event loop . <EoL>
<BoL> Return the time according to the event loop 's clock . <EoL>
<BoL> Called when the connection is lost or closed . <EoL>
<BoL> Called when a connection is made . <EoL>
<BoL> Called when the transport 's buffer goes over the high-water mark . <EoL>
<BoL> Called when the transport 's buffer drains below the low-water mark . <EoL>
<BoL> Close the transport . <EoL>
<BoL> Get optional transport information . <EoL>
<BoL> Return the current protocol . <EoL>
<BoL> Return True if the transport is closing or closed . <EoL>
<BoL> Set a new protocol . <EoL>
<BoL> Acquire a semaphore . <EoL>
<BoL> Returns True if semaphore can not be acquired immediately . <EoL>
<BoL> By default , wake up one coroutine waiting on this condition , if any . If the calling coroutine has not acquired the lock when this method is called , a RuntimeError is raised . <EoL>
<BoL> Wake up all threads waiting on this condition . <EoL>
<BoL> Wait until notified . <EoL>
<BoL> Wait until a predicate becomes true . <EoL>
<BoL> Called when some datagram is received . <EoL>
<BoL> Called when a send or receive operation raises an OSError . <EoL>
<BoL> Close the transport immediately . <EoL>
<BoL> Send data to the transport . <EoL>
<BoL> Get the watcher for child processes . <EoL>
<BoL> Get the event loop . <EoL>
<BoL> Create a new event loop . <EoL>
<BoL> Set the watcher for child processes . <EoL>
<BoL> Set the event loop . <EoL>
<BoL> Reset the internal flag to false . Subsequently , coroutines calling wait ( ) will block until set ( ) is called to set the internal flag to true again . <EoL>
<BoL> Return True if and only if the internal flag is true . <EoL>
<BoL> Set the internal flag to true . <EoL>
<BoL> Block until the internal flag is true . <EoL>
<BoL> Return True if the queue is empty , False otherwise . <EoL>
<BoL> Return True if there are maxsize items in the queue . <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Block until all items in the queue have been gotten and processed . <EoL>
<BoL> Put an item into the queue . <EoL>
<BoL> Put an item into the queue without blocking . <EoL>
<BoL> Number of items in the queue . <EoL>
<BoL> Indicate that a formerly enqueued task is complete . <EoL>
<BoL> Wake up the first waiter if it is n't done . <EoL>
<BoL> Acquire a lock . <EoL>
<BoL> Return True if lock is acquired . <EoL>
<BoL> Release a lock . <EoL>
<BoL> Pause the receiving end . <EoL>
<BoL> Resume the receiving end . <EoL>
<BoL> Internal helper to validate a signal . <EoL>
<BoL> Internal helper that is the actual signal handler . <EoL>
<BoL> Remove a writer callback . <EoL>
<BoL> Add a reader callback . <EoL>
<BoL> Add a handler for a signal . UNIX only . <EoL>
<BoL> Add a writer callback.. <EoL>
<BoL> Remove a reader callback . <EoL>
<BoL> Remove a handler for a signal . UNIX only . <EoL>
<BoL> Remove a writer callback . <EoL>
<BoL> Accept a connection . <EoL>
<BoL> Connect to a remote socket at address . <EoL>
<BoL> Receive data from the socket . <EoL>
<BoL> Send data to the socket . <EoL>
<BoL> Release a semaphore , incrementing the internal counter by one . When it was zero on entry and another coroutine is waiting for it to become larger than zero again , wake up that coroutine . <EoL>
<BoL> Wait until feed_data ( ) or feed_eof ( ) is called . <EoL>
<BoL> Wakeup read* ( ) functions waiting for data or EOF . <EoL>
<BoL> Return True if the buffer is empty and 'feed_eof ' was called . <EoL>
<BoL> Read up to ` n ` bytes from the stream . <EoL>
<BoL> Read exactly ` n ` bytes . <EoL>
<BoL> Read chunk of data from the stream until newline ( b'\n ' ) is found . <EoL>
<BoL> Read data from the stream until `` separator `` is found . <EoL>
<BoL> Flush the write buffer . <EoL>
<BoL> Called when a file descriptor associated with the child process is closed . <EoL>
<BoL> Called when the subprocess writes data into stdout/stderr pipe . <EoL>
<BoL> Called when subprocess has exited . <EoL>
<BoL> Get subprocess id . <EoL>
<BoL> Get transport for pipe with number fd . <EoL>
<BoL> Get subprocess returncode . <EoL>
<BoL> Kill the subprocess . <EoL>
<BoL> Send signal to subprocess . <EoL>
<BoL> Stop the subprocess . <EoL>
<BoL> Close the transport immediately . <EoL>
<BoL> Return True if this transport supports write_eof ( ) , False if not . <EoL>
<BoL> Return the current size of the write buffer . <EoL>
<BoL> Set the high- and low-water limits for write flow control . <EoL>
<BoL> Write some data bytes to the transport . <EoL>
<BoL> Close the write end after flushing buffered data . <EoL>
<BoL> Write a list ( or any iterable ) of data bytes to the transport . <EoL>
<BoL> Return the running event loop or None . <EoL>
<BoL> Set the running event loop . <EoL>
<BoL> Return an iterator whose values are coroutines . <EoL>
<BoL> Wrap a coroutine in a future . <EoL>
<BoL> Decorator to mark coroutines . <EoL>
<BoL> helper function for Future.__repr__ <EoL>
<BoL> Check for a Future . <EoL>
<BoL> Wait until the process exit and return the process return code . <EoL>
<BoL> Concatenate a sequence of bytes-like objects . <EoL>
<BoL> Return true if the object is a coroutine function . <EoL>
<BoL> Convert regular generator function to a coroutine . <EoL>
<BoL> Return True if obj is a coroutine object . <EoL>
<BoL> Return True if func is a decorated coroutine function . <EoL>
<BoL> Wrap a coroutine or an awaitable in a future . <EoL>
<BoL> Set the event loop . <EoL>
<BoL> Format function arguments and keyword arguments . <EoL>
<BoL> Replacement for traceback.extract_stack ( ) that only does the necessary work for asyncio debug mode . <EoL>
<BoL> Equivalent to calling get_event_loop_policy ( ) .get_child_watcher ( ) . <EoL>
<BoL> Get the current event loop policy . <EoL>
<BoL> Equivalent to calling get_event_loop_policy ( ) .set_child_watcher ( watcher ) . <EoL>
<BoL> Set the current event loop policy . <EoL>
<BoL> Chain two futures so that when one completes , so does the other . <EoL>
<BoL> Internal helper to copy state from another Future . <EoL>
<BoL> Copy state from a future to a concurrent.futures.Future . <EoL>
<BoL> Helper setting the result only if the future was not cancelled . <EoL>
<BoL> Wrap concurrent.futures.Future object . <EoL>
<BoL> Return a future aggregating results from the given coroutines or futures . <EoL>
<BoL> Submit a coroutine object to a given event loop . <EoL>
<BoL> Wait for a future , shielding it from cancellation . <EoL>
<BoL> Coroutine that completes after a given time ( in seconds ) . <EoL>
<BoL> Called when the low-level connection is lost or closed . <EoL>
<BoL> Called when the low-level connection is made . <EoL>
<BoL> Called when some SSL data is received . <EoL>
<BoL> Called when the other end of the low-level stream is half-closed . <EoL>
<BoL> Called when the low-level transport 's buffer goes over the high-water mark . <EoL>
<BoL> Called when the low-level transport 's buffer drains below the low-water mark . <EoL>
<BoL> The *context* argument specifies the ssl.SSLContext to use . <EoL>
<BoL> Start the SSL handshake . <EoL>
<BoL> Feed plaintext data into the pipe . <EoL>
<BoL> Send a potentially `` ragged '' EOF . <EoL>
<BoL> Feed SSL record level data into the pipe . <EoL>
<BoL> Start the SSL shutdown sequence . <EoL>
<BoL> Close the transport immediately . <EoL>
<BoL> Return True if this transport supports write_eof ( ) , False if not . <EoL>
<BoL> Close the transport . <EoL>
<BoL> Get optional transport information . <EoL>
<BoL> Return the current size of the write buffer . <EoL>
<BoL> Pause the receiving end . <EoL>
<BoL> Resume the receiving end . <EoL>
<BoL> Set the high- and low-water limits for write flow control . <EoL>
<BoL> Write some data bytes to the transport . <EoL>
<BoL> Wait until the process exit and return the process return code . <EoL>
<BoL> Internal helper for wait ( ) and wait_for ( ) . <EoL>
<BoL> Helper for asyncio.ensure_future ( ) . <EoL>
<BoL> Wait for the Futures and coroutines given by fs to complete . <EoL>
<BoL> Wait for the single Future or coroutine to complete , with timeout . <EoL>
<BoL> Dummy signal handler . <EoL>
<BoL> Move the temporary file to the target location . <EoL>
<BoL> Return the temporary file to use . <EoL>
<BoL> Open the temporary file . <EoL>
<BoL> Clean up all temporary resources . <EoL>
<BoL> esponsible for clearing as many file caches as possible before commit <EoL>
<BoL> Simple atomic writes . This wraps : py : class : ` AtomicWriter ` : : <EoL>
<BoL> Move `` src `` to `` dst `` . <EoL>
<BoL> Move `` src `` to `` dst `` . If `` dst `` exists , it will be silently overwritten . <EoL>
<BoL> This method should be overridden to return the dunder for the given operator function . <EoL>
<BoL> Default destructor . Use close method instead , or use the class instance as the expression of a with block . <EoL>
<BoL> To be used only internally , in the with-expression protocol . <EoL>
<BoL> Closing destructor for use internally in a with-expression . <EoL>
<BoL> Constructor to PyAudio Multi-thread manager audio IO interface . <EoL>
<BoL> Destructor for this audio interface . Waits the threads to finish their streams , if desired . <EoL>
<BoL> Start another thread playing the given audio sample iterable ( e.g . <EoL>
<BoL> Updates internal status about open recording streams . Should be called only by the internal closing mechanism of children RecStream instances . <EoL>
<BoL> Same as `` close '' . <EoL>
<BoL> Updates internal status about open threads . Should be called only by the internal closing mechanism of AudioThread instances . <EoL>
<BoL> Set a lock object which will be released by the interpreter when the underlying thread state ( see pystate.h ) gets deleted . <EoL>
<BoL> Return whether the thread is alive . <EoL>
<BoL> Wait until the thread terminates . <EoL>
<BoL> Pauses the audio . <EoL>
<BoL> Resume playing the audio . <EoL>
<BoL> Plays the audio . This method plays the audio , and should n't be called explicitly , let the constructor do so . <EoL>
<BoL> Start the thread 's activity . <EoL>
<BoL> Stops the playing thread and close <EoL>
<BoL> Return repr for the module.Find the built-in module.Create a built-in moduleExec a built-in moduleReturn None as built-in modules do not have code objects.Return None as built-in modules do not have source code.Return False as built-in modules are never packages . <EoL>
<BoL> Tests whether all filters in the list are causal ( i.e. , no future-data delay in positive `` z `` exponents ) . <EoL>
<BoL> Tests whether all filters in the list are linear . CascadeFilter and ParallelFilter instances are also linear if all filters they group are linear . <EoL>
<BoL> Tests whether all filters in the list are linear time invariant ( LTI ) . CascadeFilter and ParallelFilter instances are also LTI if all filters they group are LTI . <EoL>
<BoL> Plots the filter zero-pole plane into a formatted MatPlotLib figure with one subplot , labels and title.Find numbers that are almost equal , for the printing sake . Input : list of number pairs ( tuples with size two ) Output : dict of pairs { pair : amount_of_repeats } <EoL>
<BoL> Boolean value of a stream , called by the bool ( ) built-in and by `` if '' tests . As boolean operators `` and '' , `` or '' and `` not '' could n't be overloaded , any trial to cast an instance of this class to a boolean should be seen as a mistake . <EoL>
<BoL> Returns the results from calling elementwise ( where each element is assumed to be callable ) , with the same arguments . <EoL>
<BoL> Returns a Stream of attributes or methods , got in an elementwise fashion . <EoL>
<BoL> Returns the Stream contents iterator . <EoL>
<BoL> Append self with other stream ( s ) . Chaining this way has the behaviour : <EoL>
<BoL> Interface to apply audiolazy.blocks directly in a stream , returning another stream . Use keyword args . <EoL>
<BoL> Returns a `` T '' ( tee ) copy of the given stream , allowing the calling stream to continue being used . <EoL>
<BoL> A lazy way to skip elements in the stream that gives False for the given function . <EoL>
<BoL> Enforces the Stream to finish after `` n `` items . <EoL>
<BoL> A lazy way to apply the given function to each element in the stream . Useful for type casting , like : <EoL>
<BoL> Sees/peeks the next few items in the Stream , without removing them . <EoL>
<BoL> Throws away the first `` n `` values from the Stream . <EoL>
<BoL> Returns a container with the n first elements from the Stream , or less if there are n't enough . Use this without args if you need only one element outside a list . <EoL>
<BoL> IIR , FIR and time variant linear filtering . <EoL>
<BoL> Returns a filter copy . <EoL>
<BoL> Frequency response for this filter . <EoL>
<BoL> Causality test for this filter . <EoL>
<BoL> Test if this filter is LTI ( Linear Time Invariant ) . <EoL>
<BoL> Linear interpolation of fractional delay values . <EoL>
<BoL> Tuple with every key that points to the same value . <EoL>
<BoL> Tuple with every key that points to the given value . Result might be empty . <EoL>
<BoL> Internal method to initialize the class by creating all the operator metadata to be used afterwards . <EoL>
<BoL> Apply the given value to the Poly . <EoL>
<BoL> Inits a polynomial from given data , which can be a list or a dict . <EoL>
<BoL> Number of terms , not values ( be careful ) . <EoL>
<BoL> Power operator . The `` other '' parameter should be an int ( or anything like ) , but it works with float when the Poly has only one term . <EoL>
<BoL> Returns a Poly instance with the same terms , but as a `` T '' ( tee ) copy when they 're Stream instances , allowing maths using a polynomial more than once . <EoL>
<BoL> Differentiate ( n-th derivative , where the default n is 1 ) . <EoL>
<BoL> Integrate without adding an integration constant . <EoL>
<BoL> Boolean that indicates whether is a Laurent polynomial or not . <EoL>
<BoL> Tells whether it is a linear combination of natural powers of `` x `` . <EoL>
<BoL> Pairs ( 2-tuple ) generator where each tuple has a ( power , value ) term , perhaps sorted by power . Useful for casting as dict . <EoL>
<BoL> Array values generator for powers from zero to upper power . Useful to cast as list/tuple and for numpy/scipy integration ( be careful : numpy use the reversed from the output of this function used as input to a list or a tuple constructor ) . <EoL>
<BoL> Finishes the recording stream , so it can raise StopIteration <EoL>
<BoL> Creates a new StrategyDict class and returns an instance of it . The new class is needed to ensure it 'll have a personalized docstring . <EoL>
<BoL> StrategyDict wrapping method for adding a new strategy . <EoL>
<BoL> Constructor for a Stream . <EoL>
<BoL> Returns a new `` T '' ( tee ) copy of this StreamTeeHub without consuming any of the copies done with the constructor . <EoL>
<BoL> Fake function just to avoid using inherited Stream.take implicitly . <EoL>
<BoL> Adds ( enqueues ) an iterable event to the mixer . <EoL>
<BoL> Returns a wavetable lookup synthesis endless stream . <EoL>
<BoL> Gets an item from the table from its index , which can possibly be a float . The data is linearly interpolated . <EoL>
<BoL> Inits a table lookup . The given table should be a sequence , like a list . The cycles input should have the number of cycles in table for frequency calculation afterwards . <EoL>
<BoL> Returns a `` harmonized '' table lookup instance by using a `` harmonics '' dictionary with { partial : amplitude } terms , where all `` partial '' keys have to be integers . <EoL>
<BoL> Returns a new table with values ranging from -1 to 1 , reaching at least one of these , unless there 's no data . <EoL>
<BoL> Loads a Wave audio file.Raw wave data block generator ( following block align ) Raw wave data single sample generator ( 1 or 2 per block ) Wave data generator with data already converted to float or int <EoL>
<BoL> IIR , FIR and time variant linear filtering . <EoL>
<BoL> Takes n-th derivative , multiplying each m-th derivative filter by mul_after before taking next ( m+1 ) -th derivative or returning . <EoL>
<BoL> Change the `` module.__doc__ `` docstring to include a summary table based on its contents as declared on `` module.__all__ `` . <EoL>
<BoL> A deprecation warning emmiter as a decorator . <EoL>
<BoL> Return a string joining the docstring with the pairs summary table . <EoL>
<BoL> Single list with all `` __all__ `` lists from the modules . <EoL>
<BoL> All names in the package directory that matches the given glob , without their extension . Repeated names should appear only once . <EoL>
<BoL> List of module objects from the package , keeping the name order . <EoL>
<BoL> Package initialization , to be called only by `` __init__.py `` . <EoL>
<BoL> List of one-liner strings containing a reStructuredText summary table for the given pairs `` ( name , object ) `` . <EoL>
<BoL> Calculate the autocorrelation of a given 1-D block sequence . <EoL>
<BoL> Linear ADSR envelope . <EoL>
<BoL> Average Magnitude Difference Function non-linear filter for a given size and a fixed lag . <EoL>
<BoL> Linear ADS fading attack stream generator , useful to be multiplied with a given stream . <EoL>
<BoL> Decorator to a class whose instances should avoid casting to a Stream when used with operators applied to them . <EoL>
<BoL> General iterable blockenizer . <EoL>
<BoL> Cache decorator for a function without keyword arguments <EoL>
<BoL> Clips the signal up to both a lower and a higher limit . <EoL>
<BoL> Convert a gain value to dB , from a squared amplitude value to a power gain . <EoL>
<BoL> Convert a gain value to dB , from an amplitude value to a power gain . <EoL>
<BoL> Complex non-optimized Discrete Fourier Transform <EoL>
<BoL> Function auto-map decorator broadcaster.Element-wise decorator for functions known to have 1 input and 1 output be applied directly on iterables . When made to work with more than 1 input , all `` secondary '' parameters will the same in all function calls ( i.e. , they will not even be a copy ) . <EoL>
<BoL> Factorial function that works with really big numbers . <EoL>
<BoL> Linear fading in . <EoL>
<BoL> Linear fading out . Multiply by this one at end to finish and avoid clicks . <EoL>
<BoL> Parametrized decorator for adding/changing a function docstring . <EoL>
<BoL> Converts from frequency ( rad/sample ) to lag ( number of samples ) . <EoL>
<BoL> Given a frequency in Hz , returns its MIDI pitch number . <EoL>
<BoL> Given a frequency in Hz , returns its note string name ( e.g . `` D7 '' ) . <EoL>
<BoL> Constants for using the real bandwidth in the gammatone filter , given its order . Returns a pair : math : ` ( x , y ) = ( 1/a_n , c_n ) ` . <EoL>
<BoL> Gaussian ( normal ) noise stream generator . <EoL>
<BoL> Gets the function from the method in both Python 2 and 3 . <EoL>
<BoL> Impulse stream generator . <EoL>
<BoL> Function to use the generator-based items iterator over built-in dictionaries in both Python 2 and 3 . <EoL>
<BoL> Function to use the generator-based value iterator over built-in dictionaries in both Python 2 and 3 . <EoL>
<BoL> Karplus-Strong `` digitar '' synthesis algorithm . <EoL>
<BoL> Converts from lag ( number of samples ) to frequency ( rad/sample ) . <EoL>
<BoL> Finds the lag matrix for a given 1-D block sequence . <EoL>
<BoL> Create all window and wsymm strategies <EoL>
<BoL> Tee or `` T '' hub auto-copier to help working with Stream instances as well as with numbers . <EoL>
<BoL> Decorator to convert the function output into a Stream . Useful for generator functions . <EoL>
<BoL> Parametrized signal unwrapping . <EoL>
<BoL> Zero-crossing stream . <EoL>
<BoL> Allows unique syntax similar to Python 3 for working with metaclasses in both Python 2 and Python 3 . <EoL>
<BoL> Old Python 2 range ( returns a list ) , working both in Python 2 and 3 . <EoL>
<BoL> Internal function to isolate an exec . Executes `` data `` and returns the `` expr `` evaluation afterwards . <EoL>
<BoL> Formats a `` value * symbol ** power `` as a string . <EoL>
<BoL> Formats the sum of a and b . <EoL>
<BoL> Unit conversion constants . <EoL>
<BoL> Zero padding sample generator ( not a Stream ! ) . <EoL>
<BoL> Tee or `` T '' copy to help working with Stream instances as well as with numbers . <EoL>
<BoL> Solve the Yule-Walker linear system of equations . <EoL>
<BoL> Find the Line Spectral Frequencies ( LSF ) from a given FIR filter . <EoL>
<BoL> Tests whether the given filter is stable or not by using the Line Spectral Frequencies ( LSF ) of the given filter . Needs NumPy . <EoL>
<BoL> Tests whether the given filter is stable or not by using the partial correlation coefficients ( reflection coefficients ) of the given filter . <EoL>
<BoL> Find the toeplitz matrix as a list of lists given its first line/column . <EoL>
<BoL> Signal of `` x `` : 1 if positive , -1 if negative , 0 otherwise . <EoL>
<BoL> Given a MIDI pitch number , returns its frequency in Hz . <EoL>
<BoL> Given a MIDI pitch number , returns its note string name ( e.g . `` C3 '' ) . <EoL>
<BoL> Given a frequency and a frequency range , returns all frequencies in that range that is an integer number of octaves related to the given frequency . <EoL>
<BoL> Given a note string name ( e.g . `` F # 2 '' ) , returns its frequency in Hz . <EoL>
<BoL> Given a note string name ( e.g . `` Bb4 '' ) , returns its MIDI pitch number . <EoL>
<BoL> Round to integer . <EoL>
<BoL> Generic resampler based on Waring-Lagrange interpolators . <EoL>
<BoL> Finite Stream with a straight line , could be used as fade in/out effects . <EoL>
<BoL> Creates a lazy endless counter stream with the given modulo , i.e. , its values ranges from 0. to the given `` modulo '' , somewhat equivalent to : \n Stream ( itertools.count ( start , step ) ) % modulo\n Yet the given step can be an iterable , and doe n't create unneeded big ints . <EoL>
<BoL> Ones stream generator . You may multiply your endless stream by this to enforce an end to it . <EoL>
<BoL> Sinusoid based on the optimized math.sin <EoL>
<BoL> White noise stream generator . <EoL>
<BoL> Zeros/zeroes stream generator . You may sum your endless stream by this to enforce an end to it . <EoL>
<BoL> Creates a reStructuredText simple table ( list of strings ) from a list of lists . <EoL>
<BoL> Finds a useful small doc representation of an object . <EoL>
<BoL> Determines whether CoreAudio is available ( i.e. , we 're running on Mac OS X ) . <EoL>
<BoL> Determine whether Gstreamer and the Python GObject bindings are installed . <EoL>
<BoL> Determines whether the pymad bindings are available . <EoL>
<BoL> Open an audio file using a library that is available on this system . <EoL>
<BoL> Wraps a function so that its gradient can be specified and its invocation can be recorded . For examples , see the docs . <EoL>
<BoL> Function from jinja2/_compat.py . License : BSD . <EoL>
<BoL> Returns a checkpointed version of ` fun ` , where intermediate values computed during the forward pass of ` fun ` are discarded and then recomputed for the backward pass . <EoL>
<BoL> Flags that a function is linear wrt all args <EoL>
<BoL> Get the names and default values of a function 's parameters . <EoL>
<BoL> Builds a function that returns the gradient of the first output and the ( unmodified ) second output of a function that returns two outputs . <EoL>
<BoL> Takes gradients with respect to a named argument . Does n't work on *args or **kwargs . <EoL>
<BoL> Builds a function that returns the exact Hessian-tensor product . The returned function has arguments ( *args , tensor , **kwargs ) , and for vectors takes roughly 4x as long to evaluate as the original function . <EoL>
<BoL> Builds a function for evaluating generalized-Gauss-Newton-vector products at a point . Slightly more expensive than mixed-mode . <EoL>
<BoL> Builds a function that returns the exact tensor-Jacobian product , that is the Jacobian matrix left-multiplied by tensor . The returned function has arguments ( *args , tensor , **kwargs ) . <EoL>
<BoL> Create a DataSource with a local path at destpath . <EoL>
<BoL> Cache the file specified by path . <EoL>
<BoL> Searches for `` path `` and returns full path if found . <EoL>
<BoL> Test if path is a net location . Tests the scheme and netloc . <EoL>
<BoL> Test if the given mode will open a file for writing . <EoL>
<BoL> Test if the filename is a zip file by looking at the file extension . <EoL>
<BoL> Return a tuple containing compressed filename variations . <EoL>
<BoL> Return a sanitised relative path for which os.path.abspath ( os.path.join ( base , path ) ) .startswith ( base ) <EoL>
<BoL> Split zip extension from filename and return filename . <EoL>
<BoL> Return absolute path of file in the DataSource directory . <EoL>
<BoL> Test if path exists . <EoL>
<BoL> Open and return file-like object . <EoL>
<BoL> Return instantiated plugin for doctests <EoL>
<BoL> Generate argv for nosetest command <EoL>
<BoL> Run benchmarks for module using nose . <EoL>
<BoL> Return ( self + other ) , that is string concatenation , element-wise for a pair of array_likes of str or unicode . <EoL>
<BoL> Return ( self == other ) element-wise . <EoL>
<BoL> Return ( self > = other ) element-wise . <EoL>
<BoL> Return ( self > other ) element-wise . <EoL>
<BoL> Return ( self < = other ) element-wise . <EoL>
<BoL> Return ( self < other ) element-wise . <EoL>
<BoL> Return ( self % i ) , that is pre-Python 2.6 string formatting ( iterpolation ) , element-wise for a pair of array_likes of ` string_ ` or ` unicode_ ` . <EoL>
<BoL> Return ( self * i ) , that is string multiple concatenation , element-wise . <EoL>
<BoL> Return ( self ! = other ) element-wise . <EoL>
<BoL> Return ( other + self ) , that is string concatenation , element-wise for a pair of array_likes of ` string_ ` or ` unicode_ ` . <EoL>
<BoL> Return ( self * i ) , that is string multiple concatenation , element-wise . <EoL>
<BoL> Return the indices that sort the array lexicographically . <EoL>
<BoL> Return a copy of ` self ` with only the first character of each element capitalized . <EoL>
<BoL> Return a copy of ` self ` with its elements centered in a string of length ` width ` . <EoL>
<BoL> Returns an array with the number of non-overlapping occurrences of substring ` sub ` in the range [ ` start ` , ` end ` ] . <EoL>
<BoL> Calls ` str.decode ` element-wise . <EoL>
<BoL> Calls ` str.encode ` element-wise . <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element in ` self ` ends with ` suffix ` , otherwise ` False ` . <EoL>
<BoL> Return a copy of each string element where all tab characters are replaced by one or more spaces . <EoL>
<BoL> For each element , return the lowest index in the string where substring ` sub ` is found . <EoL>
<BoL> Like ` find ` , but raises ` ValueError ` when the substring is not found . <EoL>
<BoL> Returns true for each element if all characters in the string are alphanumeric and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if all characters in the string are alphabetic and there is at least one character , false otherwise . <EoL>
<BoL> For each element in ` self ` , return True if there are only decimal characters in the element . <EoL>
<BoL> Returns true for each element if all characters in the string are digits and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character , false otherwise . <EoL>
<BoL> For each element in ` self ` , return True if there are only numeric characters in the element . <EoL>
<BoL> Returns true for each element if there are only whitespace characters in the string and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if the element is a titlecased string and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if all cased characters in the string are uppercase and there is at least one character , false otherwise . <EoL>
<BoL> Return a string which is the concatenation of the strings in the sequence ` seq ` . <EoL>
<BoL> Return an array with the elements of ` self ` left-justified in a string of length ` width ` . <EoL>
<BoL> Return an array with the elements of ` self ` converted to lowercase . <EoL>
<BoL> For each element in ` self ` , return a copy with the leading characters removed . <EoL>
<BoL> Partition each element in ` self ` around ` sep ` . <EoL>
<BoL> For each element in ` self ` , return a copy of the string with all occurrences of substring ` old ` replaced by ` new ` . <EoL>
<BoL> For each element in ` self ` , return the highest index in the string where substring ` sub ` is found , such that ` sub ` is contained within [ ` start ` , ` end ` ] . <EoL>
<BoL> Like ` rfind ` , but raises ` ValueError ` when the substring ` sub ` is not found . <EoL>
<BoL> Return an array with the elements of ` self ` right-justified in a string of length ` width ` . <EoL>
<BoL> Partition each element in ` self ` around ` sep ` . <EoL>
<BoL> For each element in ` self ` , return a list of the words in the string , using ` sep ` as the delimiter string . <EoL>
<BoL> For each element in ` self ` , return a copy with the trailing characters removed . <EoL>
<BoL> For each element in ` self ` , return a list of the words in the string , using ` sep ` as the delimiter string . <EoL>
<BoL> For each element in ` self ` , return a list of the lines in the element , breaking at line boundaries . <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element in ` self ` starts with ` prefix ` , otherwise ` False ` . <EoL>
<BoL> For each element in ` self ` , return a copy with the leading and trailing characters removed . <EoL>
<BoL> For each element in ` self ` , return a copy of the string with uppercase characters converted to lowercase and vice versa . <EoL>
<BoL> For each element in ` self ` , return a titlecased version of the string : words start with uppercase characters , all remaining cased characters are lowercase . <EoL>
<BoL> For each element in ` self ` , return a copy of the string where all characters occurring in the optional argument ` deletechars ` are removed , and the remaining characters have been mapped through the given translation table . <EoL>
<BoL> Return an array with the elements of ` self ` converted to uppercase . <EoL>
<BoL> Return the numeric string left-filled with zeros in a string of length ` width ` . <EoL>
<BoL> make the compression factors and compute the normalization for irfft and rfft . <EoL>
<BoL> Parse the field formats <EoL>
<BoL> convert input field names into a list and assign to the _names attribute <EoL>
<BoL> String representation . <EoL>
<BoL> Gradient for eigenvalues and vectors of a symmetric matrix . <EoL>
<BoL> A convenience function for operations that need to preserve axis orientation . <EoL>
<BoL> A convenience function for operations that want to collapse to a scalar like _align , but are using keepdims=True <EoL>
<BoL> Test whether all matrix elements along a given axis evaluate to True . <EoL>
<BoL> Test whether any array element along a given axis evaluates to True . <EoL>
<BoL> Indexes of the maximum values along an axis . <EoL>
<BoL> Indexes of the minimum values along an axis . <EoL>
<BoL> Return a flattened copy of the matrix . <EoL>
<BoL> Return ` self ` as an ` ndarray ` object . <EoL>
<BoL> Return ` self ` as a flattened ` ndarray ` . <EoL>
<BoL> Returns the ( complex ) conjugate transpose of ` self ` . <EoL>
<BoL> Returns the ( multiplicative ) inverse of invertible ` self ` . <EoL>
<BoL> Returns the transpose of the matrix . <EoL>
<BoL> Return the maximum value along an axis . <EoL>
<BoL> Returns the average of the matrix elements along the given axis . <EoL>
<BoL> Return the minimum value along an axis . <EoL>
<BoL> Return the product of the array elements over the given axis . <EoL>
<BoL> Peak-to-peak ( maximum - minimum ) value along the given axis . <EoL>
<BoL> Return a flattened matrix . <EoL>
<BoL> Return a possibly reshaped matrix . <EoL>
<BoL> Return the standard deviation of the array elements along the given axis . <EoL>
<BoL> Returns the sum of the matrix elements , along the given axis . <EoL>
<BoL> Return the matrix as a ( possibly nested ) list . <EoL>
<BoL> Returns the variance of the matrix elements , along the given axis . <EoL>
<BoL> Write any changes in the array to the file on disk . <EoL>
<BoL> Standard iterator method , returns the index tuple and array value . <EoL>
<BoL> Standard iterator method , updates the index and returns the index tuple . <EoL>
<BoL> Increment the multi-dimensional index by one . <EoL>
<BoL> Builds gradient of functions that choose a single item , such as min or max . <EoL>
<BoL> Returns the array g repeated along axis to fit vector space vs. Also returns the number of repetitions of the array . <EoL>
<BoL> A reproduction of einsum c side einsum parsing in python . <EoL>
<BoL> Return a derivative of this polynomial . <EoL>
<BoL> Return an antiderivative ( indefinite integral ) of this polynomial . <EoL>
<BoL> Pretty-print all fields . <EoL>
<BoL> Return arrays with the results of ` pyfunc ` broadcast ( vectorized ) over ` args ` and ` kwargs ` not in ` excluded ` . <EoL>
<BoL> Return ( ufunc , otypes ) . <EoL>
<BoL> Vectorized call to ` func ` over positional ` args ` . <EoL>
<BoL> Vectorized call over positional arguments with a signature . <EoL>
<BoL> L { MethodicalMachine } is an implementation detail for setting up class-level state ; applications should never need to access it on an instance . <EoL>
<BoL> Generate a L { graphviz.Digraph } that represents this machine's states and transitions . <EoL>
<BoL> Declare an input . <EoL>
<BoL> Declare an output . <EoL>
<BoL> Initialize the set of transitions and the initial state . <EoL>
<BoL> Add the given transition to the outputSymbol . Raise ValueError if there is already a transition with the same inState and inputSymbol . <EoL>
<BoL> All transitions . <EoL>
<BoL> The full set of symbols acceptable to this automaton . <EoL>
<BoL> The full set of symbols which can be produced by this automaton . <EoL>
<BoL> A 2-tuple of ( outState , outputSymbols ) for inputSymbol . <EoL>
<BoL> All valid states ; `` Q '' in the mathematical description of a state machine . <EoL>
<BoL> Transition between states , returning any outputs . <EoL>
<BoL> Preserve the name of the given function on the decorated function . <EoL>
<BoL> Return a function that takes no arguments and returns values returned by output functions produced by the given L { MethodicalInput } in C { oself } 's current state . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Call the underlying method . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Outputs are private , so raise an exception when we attempt to get one . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Declare a state transition within the : class : ` automat.MethodicalMachine ` associated with this : class : ` automat.MethodicalState ` : upon the receipt of the ` input ` , enter the ` state ` , emitting each output in ` outputs ` . <EoL>
<BoL> docstring <EoL>
<BoL> Filter out arguments that were passed to input that output wo n't accept . <EoL>
<BoL> Get the name of all arguments defined in a function signature . <EoL>
<BoL> Normalize inspect.ArgSpec across python versions and convert mutable attributes to immutable types . <EoL>
<BoL> Decorate a function so all its arguments must be passed by keyword . <EoL>
<BoL> Get a L { Transitioner } <EoL>
<BoL> Create a unique Python identifier . <EoL>
<BoL> Create the exception . <EoL>
<BoL> Initialize the rule instance . <EoL>
<BoL> Create a ` PluralRule ` instance for the given rules . If the rules are a ` PluralRule ` object , that object is returned . <EoL>
<BoL> Return the dictionary for the given key in the global data . <EoL>
<BoL> The reverse of : func : ` parse_locale ` . <EoL>
<BoL> Find the best match between available and requested locale strings . <EoL>
<BoL> Parse a locale identifier into a tuple of the form `` ( language , territory , script , variant ) `` . <EoL>
<BoL> Return fractional seconds . <EoL>
<BoL> Return weekday from parsed datetime according to format pattern . <EoL>
<BoL> Return the number of the week of a day within a period . This may be the week number in a year or the week number in a month . <EoL>
<BoL> Ensure the datetime passed has an attached tzinfo . <EoL>
<BoL> Get a datetime out of an `` instant '' ( date , time , datetime , number ) . <EoL>
<BoL> Parse a ` dt_or_tzinfo ` value into a datetime and a tzinfo . <EoL>
<BoL> Get a timezoned time from a given instant . <EoL>
<BoL> Return a date formatted according to the given pattern . <EoL>
<BoL> Format an interval between two instants according to the locale 's rules . <EoL>
<BoL> Return a time and/or date formatted according to the given pattern . <EoL>
<BoL> Return a time formatted according to the given pattern . <EoL>
<BoL> Return the date formatting patterns used by the locale for the specified format . <EoL>
<BoL> Return the datetime formatting patterns used by the locale for the specified format . <EoL>
<BoL> Return the day names used by the locale for the specified format . <EoL>
<BoL> Return the era names used by the locale for the specified format . <EoL>
<BoL> Return the month names used by the locale for the specified format . <EoL>
<BoL> Given a timezone it will return a : class : ` TimezoneTransition ` object that holds the information about the next timezone transition that 's going to happen . For instance this can be used to detect when the next DST change is going to happen and how it looks like . <EoL>
<BoL> Get the day period ID for a given time . <EoL>
<BoL> Return the names for day periods ( AM/PM ) used by the locale . <EoL>
<BoL> Return the quarter names used by the locale for the specified format . <EoL>
<BoL> Return the time formatting patterns used by the locale for the specified format . <EoL>
<BoL> Looks up a timezone by name and returns it . The timezone object returned comes from `` pytz `` and corresponds to the ` tzinfo ` interface and can be used with all of the functions of Babel that operate with dates . <EoL>
<BoL> Return the timezone associated with the given ` datetime ` object formatted as string indicating the offset from GMT . <EoL>
<BoL> u '' '' '' Return a representation of the given timezone using `` location format '' . <EoL>
<BoL> Find the closest match for the given datetime skeleton among the options given . <EoL>
<BoL> Parse a date from a string . <EoL>
<BoL> Parse date , time , and datetime format patterns . <EoL>
<BoL> Parse a time from a string . <EoL>
<BoL> Split an interval-describing datetime pattern into multiple pieces . <EoL>
<BoL> Tokenize date format patterns . <EoL>
<BoL> Turn a date format pattern token stream back into a string . <EoL>
<BoL> Resolve the alias based on the given data . <EoL>
<BoL> Check whether locale data is available for the given locale . <EoL>
<BoL> Load the locale data for the given locale . <EoL>
<BoL> Return a list of all locale identifiers for which locale data is available . <EoL>
<BoL> Merge the data from ` dict2 ` into the ` dict1 ` dictionary , making copies of nested dictionaries . <EoL>
<BoL> Normalize a locale ID by stripping spaces and apply proper casing . <EoL>
<BoL> Factory function that returns a new reentrant lock . <EoL>
<BoL> Tries to find the local timezone configuration . <EoL>
<BoL> Returns the current underlying local timezone object . Generally this function does not need to be used , it 's a better idea to use the : data : ` LOCALTZ ` singleton instead . <EoL>
<BoL> Return the scaling factor to apply to the number before rendering . <EoL>
<BoL> Returns normalized scientific notation components of a value . <EoL>
<BoL> Create the exception . : param identifier : the identifier string of the unsupported currency <EoL>
<BoL> u '' '' '' Return the given number formatted for a specific locale . <EoL>
<BoL> Return the name used by the locale for the specified currency . <EoL>
<BoL> Return currency 's precision . <EoL>
<BoL> Return the symbol used by the locale for the specified currency . <EoL>
<BoL> Return maximum precision of a decimal instance 's fractional part . <EoL>
<BoL> Return minimal quantum of a number , as defined by precision . <EoL>
<BoL> Return the symbol used by the locale to separate decimal fractions . <EoL>
<BoL> Return the symbol used by the locale to separate mantissa and exponent . <EoL>
<BoL> Return the symbol used by the locale to separate groups of thousands . <EoL>
<BoL> Return the plus sign symbol used by the current locale . <EoL>
<BoL> Return the plus sign symbol used by the current locale . <EoL>
<BoL> Returns ` True ` only if a currency is recognized by Babel . <EoL>
<BoL> Return a ` set ` of normalized currency codes . <EoL>
<BoL> Returns the normalized sting of any currency code . <EoL>
<BoL> Parse localized decimal string into a decimal . <EoL>
<BoL> Parse primary and secondary digit grouping <EoL>
<BoL> Parse localized number string into an integer . <EoL>
<BoL> Parse number format patternsCalculate the min and max allowed digits <EoL>
<BoL> Check the currency code is recognized by Babel . <EoL>
<BoL> Compiler factory for the ` _Compiler ` . <EoL>
<BoL> Compiler factory for the ` _Compiler ` . <EoL>
<BoL> Javaish modulo . This modulo operator returns the value with the sign of the dividend rather than the divisor like Python does : <EoL>
<BoL> Extract operands from a decimal , a float or an int , according to ` CLDR rules ` _ . <EoL>
<BoL> Integer range list test . This is the callback for the `` in '' operator of the UTS # 35 pluralization rule language : <EoL>
<BoL> The plural rule as gettext expression . The gettext expression is technically limited to integers and returns indices rather than tags . <EoL>
<BoL> Convert a list/dict of rules or a ` PluralRule ` object into a JavaScript function . This function depends on no external library : <EoL>
<BoL> Convert a list/dict of rules or a ` PluralRule ` object into a regular Python function . This is useful in situations where you need a real function and do n't are about the actual rule object : <EoL>
<BoL> Float range test . This is the callback for the `` within '' operator of the UTS # 35 pluralization rule language : <EoL>
<BoL> Initialize the formatter . <EoL>
<BoL> Return a number in the given currency formatted for the locale . <EoL>
<BoL> Return a date formatted according to the given pattern . <EoL>
<BoL> Return a date and time formatted according to the given pattern . <EoL>
<BoL> Return a decimal number formatted for the locale . <EoL>
<BoL> Return an integer number formatted for the locale . <EoL>
<BoL> Return a number formatted as percentage for the locale . <EoL>
<BoL> Return a number formatted using scientific notation for the locale . <EoL>
<BoL> Return a time formatted according to the given pattern . <EoL>
<BoL> Initialize a simple translations class which is not backed by a real catalog . <EoL>
<BoL> Like `` gettext ( ) `` , but look the message up in the specified domain . <EoL>
<BoL> Like `` ngettext ( ) `` , but look the message up in the specified domain . <EoL>
<BoL> Like `` npgettext `` , but look the message up in the specified ` domain ` . <EoL>
<BoL> Like ` pgettext ( ) ` , but look the message up in the specified ` domain ` . <EoL>
<BoL> Like `` ugettext ( ) `` , but look the message up in the specified domain . <EoL>
<BoL> Like `` ungettext ( ) `` but look the message up in the specified domain . <EoL>
<BoL> Like `` unpgettext `` , but look the message up in the specified ` domain ` . <EoL>
<BoL> Like ` upgettext ( ) ` , but look the message up in the specified ` domain ` . <EoL>
<BoL> Like `` lgettext ( ) `` , but look the message up in the specified domain . <EoL>
<BoL> Like `` lngettext ( ) `` , but look the message up in the specified domain . <EoL>
<BoL> Equivalent to `` dnpgettext ( ) `` , but the translation is returned in the preferred system encoding , if no other encoding was explicitly set with `` bind_textdomain_codeset ( ) `` . <EoL>
<BoL> Equivalent to `` dpgettext ( ) `` , but the translation is returned in the preferred system encoding , if no other encoding was explicitly set with `` bind_textdomain_codeset ( ) `` . <EoL>
<BoL> Equivalent to `` npgettext ( ) `` , but the translation is returned in the preferred system encoding , if no other encoding was explicitly set with `` bind_textdomain_codeset ( ) `` . <EoL>
<BoL> Equivalent to `` pgettext ( ) `` , but the translation is returned in the preferred system encoding , if no other encoding was explicitly set with `` bind_textdomain_codeset ( ) `` . <EoL>
<BoL> Do a plural-forms lookup of a message id . <EoL>
<BoL> Look up the ` context ` and ` message ` id in the catalog and return the corresponding message string , as an 8-bit string encoded with the catalog 's charset encoding , if known . <EoL>
<BoL> Do a plural-forms lookup of a message id . <EoL>
<BoL> Look up the ` context ` and ` message ` id in the catalog and return the corresponding message string , as a Unicode string . <EoL>
<BoL> Initialize the translations catalog . <EoL>
<BoL> Returns a tuple of major version , minor version <EoL>
<BoL> Override this method to support alternative .mo formats . <EoL>
<BoL> Add the given translations to the catalog . <EoL>
<BoL> Load translations from the given directory . <EoL>
<BoL> Merge the given translations into the catalog . <EoL>
<BoL> _fix_sentence_endings ( chunks : [ string ] ) <EoL>
<BoL> _handle_long_word ( chunks : [ string ] , cur_line : [ string ] , cur_len : int , width : int ) <EoL>
<BoL> _munge_whitespace ( text : string ) - > string <EoL>
<BoL> _split ( text : string ) - > [ string ] <EoL>
<BoL> _wrap_chunks ( chunks : [ string ] ) - > [ string ] <EoL>
<BoL> fill ( text : string ) - > string <EoL>
<BoL> wrap ( text : string ) - > [ string ] <EoL>
<BoL> Yield all items in an iterable collection that are distinct . <EoL>
<BoL> Deduce the encoding of a source file from magic comment . <EoL>
<BoL> Parse the compiler flags by : mod : ` __future__ ` from the given Python code . <EoL>
<BoL> Extended pathname pattern matching . <EoL>
<BoL> Simple wrapper around the `` textwrap.wrap `` function in the standard library . This version does not wrap lines on hyphens in words . <EoL>
<BoL> Decorator to process a callback prototype . A callback prototype is a function whose signature includes all the values that will be passed by the callback API in question . The original function will be returned , with a `` prototype.adapt `` attribute which can be used to prepare third party callbacks.Introspect and prepare a third party callback.Wrapper for third party callbacks that discards excess arguments <EoL>
<BoL> Determine if the given value is callable . <EoL>
<BoL> Get all of the items in the collection . <EoL>
<BoL> Push an item onto the end of the collection . <EoL>
<BoL> Chunk the underlying collection . <EoL>
<BoL> Collapse the collection items into a single element ( list ) <EoL>
<BoL> Determine if an element is in the collection <EoL>
<BoL> Diff the collections with the given items <EoL>
<BoL> Execute a callback over each item . <EoL>
<BoL> Create a new collection consisting of every n-th element . <EoL>
<BoL> Run a filter over each of the items . <EoL>
<BoL> Get the first item of the collection . <EoL>
<BoL> Get a flattened list of the items in the collection . <EoL>
<BoL> `` Paginate '' the collection by slicing it into a smaller collection . <EoL>
<BoL> Remove an item from the collection by key . <EoL>
<BoL> Get an element of the collection . <EoL>
<BoL> Concatenate values of a given key as a string . <EoL>
<BoL> Return collection keys . <EoL>
<BoL> Get the last item of the collection . <EoL>
<BoL> Alias for `` pluck '' <EoL>
<BoL> Run a map over each of the item . <EoL>
<BoL> Get the max value of a given key . <EoL>
<BoL> Get the min value of a given key . <EoL>
<BoL> Get the items with the specified keys . <EoL>
<BoL> Get a list with the values of a given key . <EoL>
<BoL> Remove the item at the given index , and return it . If no index is specified , returns the last item . <EoL>
<BoL> Push an item onto the beginning of the collection . <EoL>
<BoL> Pulls an item from the collection . <EoL>
<BoL> Alias for append . <EoL>
<BoL> Put an item in the collection by key . <EoL>
<BoL> Reduce the collection to a single value . <EoL>
<BoL> Create a collection of all elements that do not pass a given truth test . <EoL>
<BoL> Reverse items order . <EoL>
<BoL> Get the collection of items as a serialized object ( ready to be json encoded ) . <EoL>
<BoL> Remove first item of the collection , and return it . <EoL>
<BoL> Sort through each item with a callback . <EoL>
<BoL> Take the first or last n items . <EoL>
<BoL> Get the collection of items as JSON . <EoL>
<BoL> Return collection values . <EoL>
<BoL> Filter items by the given key value pair . <EoL>
<BoL> Get all items except for those with the specified keys . <EoL>
<BoL> Zip the collection together with one or more arrays . <EoL>
<BoL> Creates a new Collection <EoL>
<BoL> Chunk the underlying collection . <EoL>
<BoL> Get a value retrieving callback . <EoL>
<BoL> Get the average value of a given key . <EoL>
<BoL> Create a new Collection instance if the value is n't one already <EoL>
<BoL> Merge the collection with the given items . <EoL>
<BoL> Get the sum of the given values . <EoL>
<BoL> Transform each item in the collection using a callback . <EoL>
<BoL> Return only unique items from the collection list . <EoL>
<BoL> Return true if object can be passed to an `` await `` expression . <EoL>
<BoL> Send a value into the coroutine . <EoL>
<BoL> Main entry point for patching the `` collections.abc `` and `` inspect `` standard library modules . <EoL>
<BoL> Least-recently-used cache decorator.Report cache statisticsClear the cache and cache statistics <EoL>
<BoL> Get the output of git-describe when executed in a given path . <EoL>
<BoL> arange ( [ start , ] stop [ , step , ] , dtype=None , **kwargs ) <EoL>
<BoL> Return the current print options . <EoL>
<BoL> Return a contiguous flattened array . <EoL>
<BoL> Remove the ` name ` attribute . <EoL>
<BoL> Update attributes on-disk . <EoL>
<BoL> Used in ctable.__reduce__ <EoL>
<BoL> Get the variables in ` expression ` . <EoL>
<BoL> eval ( expression , vm=None , out_flavor=None , user_dict=None , **kwargs ) <EoL>
<BoL> Change the defaults for ` clevel ` , ` shuffle ` and ` cname ` params . <EoL>
<BoL> Returns values based on ` key ` . <EoL>
<BoL> Sets values based on ` key ` . <EoL>
<BoL> Get some stats ( nbytes , cbytes and ratio ) about this object . <EoL>
<BoL> Return a list of ` icols ` iterators with ` dtype ` names . <EoL>
<BoL> Return rows where ` boolarr ` is true as an structured array . <EoL>
<BoL> Add a new ` newcol ` object as column . <EoL>
<BoL> Append ` cols ` to this ctable . <EoL>
<BoL> Return a copy of this ctable . <EoL>
<BoL> Create a ctable anew . <EoL>
<BoL> Remove the column named ` name ` or in position ` pos ` . <EoL>
<BoL> Evaluate the ` expression ` on columns and return the result . <EoL>
<BoL> Flush data in internal buffers to disk . <EoL>
<BoL> Get rid of internal caches to free memory . <EoL>
<BoL> Return a ctable object out of a pandas dataframe . <EoL>
<BoL> Return a ctable object out of a compound HDF5 dataset ( PyTables Table ) . <EoL>
<BoL> Create the ` self.rootdir ` directory safely . <EoL>
<BoL> Open an existing ctable on-disk . <EoL>
<BoL> Resize the instance to have ` nitems ` . <EoL>
<BoL> Return a pandas dataframe out of this object . <EoL>
<BoL> Remove the trailing ` nitems ` from this instance . <EoL>
<BoL> Iterate over rows where ` expression ` is true . <EoL>
<BoL> detect_number_of_cores ( ) <EoL>
<BoL> fill ( shape , dtype=float , dflt=None , **kwargs ) Helper function to fill a carray with default values <EoL>
<BoL> fromiter ( iterable , dtype , count , **kwargs ) <EoL>
<BoL> iterblocks ( blen=None , start=0 , stop=None ) <EoL>
<BoL> ones ( shape , dtype=float , **kwargs ) <EoL>
<BoL> open ( rootdir , mode= ' a ' ) <EoL>
<BoL> Print all the versions of packages that bcolz relies on . <EoL>
<BoL> Run command with arguments and return its output . <EoL>
<BoL> set_nthreads ( nthreads ) <EoL>
<BoL> test ( verbose=False , heavy=False ) <EoL>
<BoL> Create an instance of the class that will use the named test method when executed . Raises a ValueError if the instance does not have a method with the specified name . <EoL>
<BoL> The default assertEqual implementation , not type specific . <EoL>
<BoL> Honour the longMessage attribute when generating failure messages . If longMessage is False this means : * Use only an explicit message if it is provided * Otherwise use the standard message for the assert <EoL>
<BoL> Get a detailed comparison function for the types of the two args . <EoL>
<BoL> Add a function , with arguments , to be called when the test is completed . Functions added are called on a LIFO basis and are called after tearDown on test failure or success . <EoL>
<BoL> Add a type specific assertEqual style function to compare a type . <EoL>
<BoL> Checks whether dictionary is a superset of subset . <EoL>
<BoL> Fail if the two objects are unequal as determined by the '==' operator . <EoL>
<BoL> Check that the expression is false . <EoL>
<BoL> Just like self.assertTrue ( a > b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a > = b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a in b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a is b ) , but with a nicer default message . <EoL>
<BoL> Same as self.assertTrue ( isinstance ( obj , cls ) ) , with a nicer default message . <EoL>
<BoL> Same as self.assertTrue ( obj is None ) , with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a is not b ) , but with a nicer default message . <EoL>
<BoL> Included for symmetry with assertIsNone . <EoL>
<BoL> Just like self.assertTrue ( a < b ) , but with a nicer default message . <EoL>
<BoL> Just like self.assertTrue ( a < = b ) , but with a nicer default message . <EoL>
<BoL> A list-specific equality assertion . <EoL>
<BoL> Fail unless a log message of level *level* or higher is emitted on *logger_name* or its children . If omitted , *level* defaults to INFO and *logger* defaults to the root logger . <EoL>
<BoL> Assert that two multi-line strings are equal . <EoL>
<BoL> Fail if the two objects are equal as determined by the ' ! =' operator . <EoL>
<BoL> Just like self.assertTrue ( a not in b ) , but with a nicer default message . <EoL>
<BoL> Included for symmetry with assertIsInstance . <EoL>
<BoL> Fail the test if the text matches the regular expression . <EoL>
<BoL> Fail unless an exception of class expected_exception is raised by the callable when invoked with specified positional and keyword arguments . If a different type of exception is raised , it will not be caught , and the test case will be deemed to have suffered an error , exactly as for an unexpected exception . <EoL>
<BoL> Fail the test unless the text matches the regular expression . <EoL>
<BoL> An equality assertion for ordered sequences ( like lists and tuples ) . <EoL>
<BoL> A set-specific equality assertion . <EoL>
<BoL> Check that the expression is true . <EoL>
<BoL> A tuple-specific equality assertion . <EoL>
<BoL> Fail unless a warning of class warnClass is triggered by the callable when invoked with specified positional and keyword arguments . If a different type of warning is triggered , it will not be handled : depending on the other warning filtering rules in effect , it might be silenced , printed out , or raised as an exception . <EoL>
<BoL> Run the test without collecting errors in a TestResult <EoL>
<BoL> Execute all cleanup functions . Normally called for you after tearDown . <EoL>
<BoL> Fail immediately , with the given message . <EoL>
<BoL> Returns a one-line description of the test , or None if no description has been provided . <EoL>
<BoL> Skip this test . <EoL>
<BoL> Return a context manager that will return the enclosed block of code in a subtest identified by the optional message and keyword parameters . A failure in the subtest marks the test case as failed but resumes execution at the end of the enclosed block , allowing further test code to be executed . <EoL>
<BoL> Skip a test unless the condition is true . <EoL>
<BoL> walk ( dir , classname=None , mode= ' a ' ) <EoL>
<BoL> zeros ( shape , dtype=float , **kwargs ) <EoL>
<BoL> Compute the optimum chunksize for memory I/O in carray/ctable . <EoL>
<BoL> Return the fitted chunksize for expectedsizeinMB . <EoL>
<BoL> Get the length of a ( start , stop , step ) range . <EoL>
<BoL> Return a string for better assessing large number of bytes . <EoL>
<BoL> Protection against creating too small or too large chunks . <EoL>
<BoL> Convert object to a ndarray . <EoL>
<BoL> Generate a random text salt for use with hashpw ( ) . `` log_rounds '' defines the complexity of the hashing , increasing the cost as 2**log_rounds . <EoL>
<BoL> Calling a tag like a function is the same as calling its find_all ( ) method . <EoL>
<BoL> Returns true iff this tag has the same name , the same attributes , and the same contents ( recursively ) as the given tag . <EoL>
<BoL> tag [ key ] returns the value of the 'key ' attribute for the tag , and throws an exception if it 's not there . <EoL>
<BoL> Returns true iff this tag is not identical to the other tag , as defined in __eq__ . <EoL>
<BoL> Setting tag [ key ] sets the value of the 'key ' attribute for the tag . <EoL>
<BoL> Yield all strings of certain classes , possibly stripping them . <EoL>
<BoL> Force an attribute value into a string representation . <EoL>
<BoL> Create a function that performs a CSS selector operation . <EoL>
<BoL> Check if markup looks like it 's actually a url and raise a warning if so . Markup can be unicode or str ( py2 ) / bytes ( py3 ) . <EoL>
<BoL> Pops the tag stack up to and including the most recent instance of the given tag . If inclusivePop is false , pops the tag stack up to but *not* including the most recent instqance of the given tag . <EoL>
<BoL> Should this tag be pretty-printed ? <EoL>
<BoL> Appends the given tag to the contents of this tag . <EoL>
<BoL> Extract all children . If decompose is True , decompose instead . <EoL>
<BoL> Recursively destroys the contents of this tree . <EoL>
<BoL> Destructively rips this element out of the tree . <EoL>
<BoL> Returns the parents of this Tag that match the given criteria . <EoL>
<BoL> Returns the first item that matches the given criteria and appears after this Tag in the document . <EoL>
<BoL> Returns the closest sibling to this Tag that matches the given criteria and appears after this Tag in the document . <EoL>
<BoL> Returns the closest parent of this Tag that matches the given criteria . <EoL>
<BoL> Returns the first item that matches the given criteria and appears before this Tag in the document . <EoL>
<BoL> Returns the closest sibling to this Tag that matches the given criteria and appears before this Tag in the document . <EoL>
<BoL> Format the given string using the given formatter . <EoL>
<BoL> Returns the value of the 'key ' attribute for the tag , or the value given for 'default ' if it does n't have that attribute . <EoL>
<BoL> Push a start tag on to the stack . <EoL>
<BoL> This was kind of misleading because has_key ( ) ( attributes ) was different from __in__ ( contents ) . has_key ( ) is gone in Python 3 , anyway . <EoL>
<BoL> Find the index of a child by identity , not value . Avoids issues with tag.contents.index ( element ) getting the index of equal elements . <EoL>
<BoL> Create a new NavigableString associated with this soup . <EoL>
<BoL> Create a new tag associated with this soup . <EoL>
<BoL> Add an object to the parse tree . <EoL>
<BoL> Perform a CSS selection operation on the current element . <EoL>
<BoL> A copy of a NavigableString has the same contents and class as the original , but it is not connected to the parse tree . <EoL>
<BoL> text.string gives you text . This is for backwards compatibility for Navigable*String , but for CData* it lets you get the string without the CData wrapper . <EoL>
<BoL> Create a new NavigableString . <EoL>
<BoL> Makes the given element the immediate successor of this one . <EoL>
<BoL> Makes the given element the immediate predecessor of this one . <EoL>
<BoL> CData strings are passed into the formatter . But the return value is ignored . <EoL>
<BoL> A copy of a Tag is a new Tag , unconnected to the parse tree . Its contents are a copy of the old Tag 's contents . <EoL>
<BoL> Changes a MS smart quote character to an XML or HTML entity , or an ASCII character . <EoL>
<BoL> Given a string and its encoding , decodes the string into Unicode . % encoding is a string recognized by encodings.aliases <EoL>
<BoL> Replaces class= '' foo bar '' with class= [ `` foo '' , `` bar '' ] <EoL>
<BoL> Might a tag with this name be an empty-element tag ? <EoL>
<BoL> See ` TreeBuilder ` . <EoL>
<BoL> Used with a regular expression to substitute the appropriate XML entity for an XML special character . <EoL>
<BoL> Make a value into a quoted XML attribute , possibly escaping it . <EoL>
<BoL> Wrap an HTML fragment to make it look like a document . <EoL>
<BoL> Find the currently active prefix for the given namespace . <EoL>
<BoL> See ` TreeBuilder ` . <EoL>
<BoL> See ` TreeBuilder ` . <EoL>
<BoL> Register a treebuilder based on its advertised features . <EoL>
<BoL> Move all of this tag 's children into another tag . <EoL>
<BoL> Switch the function used to insert an element from the normal one to the misnested table one and back again <EoL>
<BoL> Create an element but do n't insert it anywhere <EoL>
<BoL> Check if an element exists between the end of the active formatting elements and the last marker . If it does , return it , else return false <EoL>
<BoL> Get the foster parent element , and sibling to insert before ( or None ) when inserting a misnested table node <EoL>
<BoL> Create an element and insert it into the tree <EoL>
<BoL> Insert text data . <EoL>
<BoL> Initialize and reset this instance . <EoL>
<BoL> Handle any buffered data . <EoL>
<BoL> Feed data to the parser . <EoL>
<BoL> Return full source of start tag : ' < ... > ' . <EoL>
<BoL> Return current line number and offset . <EoL>
<BoL> Reset this instance . Loses all unprocessed data . <EoL>
<BoL> Replace certain Unicode characters with named HTML entities . <EoL>
<BoL> Substitute XML entities for special XML characters . <EoL>
<BoL> Given a document , tries to find its declared encoding . <EoL>
<BoL> If a byte-order mark is present , strip it and return the encoding it implies . <EoL>
<BoL> Copy TreeBuilders from the given module into this module . <EoL>
<BoL> Alias one attribute name to another for backward compatibility <EoL>
<BoL> Gets the value for this view as a boolean . ( Python 3 only . ) <EoL>
<BoL> Get a subview of this view . <EoL>
<BoL> Iterate over the keys of a dictionary view or the *subviews* of a list view . <EoL>
<BoL> Gets the value for this view as a boolean . ( Python 2 only . ) <EoL>
<BoL> Create an overlay source to assign a given key under this view . <EoL>
<BoL> Get the value for this view as a bytestring . <EoL>
<BoL> Get the value for this view as a Unicode string . <EoL>
<BoL> Add the package 's default configuration settings . This looks for a YAML file located inside the package for the module ` modname ` if it was given . <EoL>
<BoL> Add the configuration options from the YAML file in the user 's configuration directory ( given by ` config_dir ` ) if it exists . <EoL>
<BoL> Iterates over all subviews from collections at this view from *all* sources . <EoL>
<BoL> Get the value from a list of choices . Equivalent to ` get ( Choice ( choices ) ) ` . <EoL>
<BoL> Get the value as a path . Equivalent to ` get ( Filename ( ) ) ` . <EoL>
<BoL> Get the value as any number type : int or float . Equivalent to ` get ( Number ( ) ) ` . <EoL>
<BoL> Get the value as a sequence of pairs of two strings . Equivalent to ` get ( Pairs ( ) ) ` . <EoL>
<BoL> Get the value as a ( Unicode ) string . Equivalent to ` get ( unicode ) ` on Python 2 and ` get ( str ) ` on Python 3 . <EoL>
<BoL> Get the value as a sequence of strings . Equivalent to ` get ( StrSeq ( ) ) ` . <EoL>
<BoL> Remove all sources from this configuration . <EoL>
<BoL> Get the path to the user configuration directory . The directory is guaranteed to exist as a postcondition ( one may be created if none exist ) . <EoL>
<BoL> Dump the Configuration object to a YAML file . <EoL>
<BoL> Determine whether the view has a setting in any source . <EoL>
<BoL> Return a ( value , source ) pair for the first object found for this view . <EoL>
<BoL> Create a hierarchy of OrderedDicts containing the data from this view , recursively reifying all views to get their represented values . <EoL>
<BoL> Retrieve the value for this view according to the template . <EoL>
<BoL> Iterates over ( key , subview ) pairs contained in dictionaries from *all* sources at this view . If the object for this view in any source is not a dict , then a ConfigTypeError is raised . <EoL>
<BoL> Returns a list containing all the keys available as subviews of the current views . <EoL>
<BoL> Overlay parsed command-line arguments , generated by a library like argparse or optparse , onto this view 's value . `` namespace `` can be a `` dict `` or namespace object . <EoL>
<BoL> Parses the file as YAML and inserts it into the configuration sources with highest priority . <EoL>
<BoL> Points to the location of the user configuration . <EoL>
<BoL> Iterates over all the subviews contained in dictionaries from *all* sources at this view . If the object for this view in any source is not a dict , then a ConfigTypeError is raised . <EoL>
<BoL> Invoking a template on a view gets the view 's value according to the template . <EoL>
<BoL> Create a template that validates any of the values from the iterable ` choices ` . <EoL>
<BoL> Ensure that the value is among the choices ( and remap if the choices are a mapping ) . <EoL>
<BoL> Raise an exception indicating that a value can not be accepted . <EoL>
<BoL> Get the value for a ` ConfigView ` . <EoL>
<BoL> Given either a dictionary or a ` ConfigSource ` object , return a ` ConfigSource ` object . This lets a function accept either type of object as an argument . <EoL>
<BoL> Set the *default* value for this configuration view . The specified value is added as the lowest-priority configuration data source . <EoL>
<BoL> Get the set of currently-redacted sub-key-paths at this view . <EoL>
<BoL> The core ( internal ) data retrieval method . <EoL>
<BoL> The RootView object from which this view is descended . <EoL>
<BoL> *Override* the value for this configuration view . The specified value is added as the highest-priority configuration data source . <EoL>
<BoL> Add or remove a redaction for a key path , which should be an iterable of keys . <EoL>
<BoL> Create a configuration object by reading the automatically-discovered config files for the application for a given name . <EoL>
<BoL> Remove all sources ( and redactions ) from this configuration . <EoL>
<BoL> Find and read the files for this configuration and set them as the sources for this configuration . To disable either discovered user configuration files or the in-package defaults , set ` user ` or ` defaults ` to ` False ` . <EoL>
<BoL> Represent bool as 'yes ' or 'no ' instead of 'true ' or 'false ' . <EoL>
<BoL> If a list has less than 4 items , represent it in inline style ( i.e . comma separated , within square brackets ) . <EoL>
<BoL> Represent a None value with nothing instead of 'none ' . <EoL>
<BoL> Convert the YAML-deserialized value to a value of the desired type . <EoL>
<BoL> Create a template with a given default value . <EoL>
<BoL> Check that the value is an integer . Floats are rounded . <EoL>
<BoL> Create a template according to a dict ( mapping ) . The mapping 's values should themselves either be Types or convertible to Types . <EoL>
<BoL> Get a dict with the same keys as the template and values validated according to the value types . <EoL>
<BoL> Check that the value is an int or a float . <EoL>
<BoL> Ensure that the value follows at least one template . <EoL>
<BoL> Create a new template . <EoL>
<BoL> Create a configuration hierarchy for a list of sources . <EoL>
<BoL> Create a new template . <EoL>
<BoL> Create a template with the added optional ` pattern ` argument , a regular expression string that the value should match . <EoL>
<BoL> Check that the value is a string and matches the pattern . <EoL>
<BoL> Make a subview of a parent view for a given subscript key . <EoL>
<BoL> Create a template that checks that the value is an instance of ` typ ` . <EoL>
<BoL> Returns the path to the package containing the named module or None if the path could not be identified ( e.g. , if `` name == `` __main__ '' `` ) . <EoL>
<BoL> Convert a simple `` shorthand '' Python value to a ` Template ` . <EoL>
<BoL> Return a platform-specific list of candidates for user configuration directories on the system . <EoL>
<BoL> Get the first element from an iterable or raise a ValueError if the iterator generates no values . <EoL>
<BoL> Read a YAML document from a file . If the file can not be read or parsed , a ConfigReadError is raised . <EoL>
<BoL> Scan default_data for comments ( we include empty lines in our definition of comments ) and place them before the same keys in data . <EoL>
<BoL> Generate a ( likely ) gerund form of the English verb . <EoL>
<BoL> Get the reason as a string . <EoL>
<BoL> Log to the provided ` logger ` a human-readable message as an error and a verbose traceback as a debug message . <EoL>
<BoL> Create the human-readable description of the error , sans introduction . <EoL>
<BoL> Get the system 's filesystem encoding . On Windows , this is always UTF-8 ( not MBCS ) . <EoL>
<BoL> Perform a single round of path legalization steps ( sanitation/replacement , encoding from Unicode to bytes , extension-appending , and truncation ) . Return the path ( Unicode if ` fragment ` is set , ` bytes ` otherwise ) and whether truncation was required . <EoL>
<BoL> Use Windows ' ` GetLongPathNameW ` via ctypes to get the canonical , long path given a short filename . <EoL>
<BoL> Return a list consisting of path 's parent directory , its grandparent , and so on . For instance : <EoL>
<BoL> Get the encoding for command-line arguments ( and other OS locale-sensitive strings ) . <EoL>
<BoL> Convert a value to a Unicode object for matching with a query . <EoL>
<BoL> Decodes all unicode characters in a path into ASCII equivalents . <EoL>
<BoL> Given a path , which is either a bytes or a unicode , returns a str path ( ensuring that we never deal with Unicode pathnames ) . <EoL>
<BoL> Check whether the filesystem at the given path is case sensitive . <EoL>
<BoL> Runs the command and returns its output after it has exited . <EoL>
<BoL> Return a list of the path components in path . For instance : <EoL>
<BoL> Convert command arguments to bytestrings on Python 2 and surrogate-escaped strings on Python 3 . <EoL>
<BoL> Copy a plain file . Permissions are not copied . <EoL>
<BoL> Return the number of hardware thread contexts ( cores or SMT threads ) in the system . <EoL>
<BoL> Attempts to decode a bytestring path to a unicode object for the purpose of displaying it to the user . If the ` path ` argument is a list or a tuple , the elements are joined with ` separator ` . <EoL>
<BoL> Get a command for opening a text file . <EoL>
<BoL> Determine whether all strings in ` names ` match at least one of the ` patterns ` , which should be shell glob expressions . <EoL>
<BoL> Create a hard link from path to ` dest ` . <EoL>
<BoL> Return whether or not a file starts with a dot . <EoL>
<BoL> Return whether or not a file is hidden on OS X . <EoL>
<BoL> Return whether or not a file is hidden on Windows . <EoL>
<BoL> Return whether or not a file is hidden . ` path ` should be a bytestring filename . <EoL>
<BoL> Open the files in ` targets ` by ` exec ` ing a new ` command ` , given as a Unicode string . ( The new program takes over , and Python execution ends : this does not fork a subprocess . ) <EoL>
<BoL> Given a path-like Unicode string , produce a legal path . Return the path and a flag indicating whether some replacements had to be ignored ( see below ) . <EoL>
<BoL> Create a symbolic link from path to ` dest ` . <EoL>
<BoL> Attempt to determine the maximum filename length for the filesystem containing ` path ` . <EoL>
<BoL> Make all the enclosing directories of path ( like mkdir -p on the parent ) . <EoL>
<BoL> Rename a file . ` dest ` may not be a directory . <EoL>
<BoL> Provide the canonical form of the path suitable for storing in the database . <EoL>
<BoL> Return the system command that dispatches execution to the correct program . <EoL>
<BoL> Given a sequence of hashble objects , returns the object that is most common in the set and the its number of appearance . The sequence must contain at least one object . <EoL>
<BoL> If path is an empty directory , then remove it . <EoL>
<BoL> Convert a bytestring path to Unicode on Python 3 only . On Python 2 , return the bytestring path unchanged . <EoL>
<BoL> Formats a human-readable M : SS string as a float ( number of seconds ) . <EoL>
<BoL> Remove the file . If ` soft ` , then no error will be raised if the file does not exist . <EoL>
<BoL> Safer equality for paths . <EoL>
<BoL> Takes a path ( as a Unicode string ) and makes sure that it is legal . <EoL>
<BoL> Split a Unicode or bytes string according to shell lexing rules . <EoL>
<BoL> Like ` os.walk ` , but yields things in case-insensitive sorted , breadth-first order . <EoL>
<BoL> Returns a boolean reflecting a human-entered string . <EoL>
<BoL> Convert a path for use by the operating system . <EoL>
<BoL> Convert a string , which can either be bytes or unicode , to unicode . <EoL>
<BoL> Given a bytestring path or a Unicode path fragment , truncate the components to a legal length . In the last component , the extension is preserved . <EoL>
<BoL> Transliterate an Unicode object into an ASCII string <EoL>
<BoL> Returns a version of `` path `` that does not exist on the filesystem . Specifically , if `` path ` itself already exists , then something unique is appended to the path . <EoL>
<BoL> Used for the copy protocol . <EoL>
<BoL> u '' '' '' *x.__eq__ ( other ) ⟺ x == other* <EoL>
<BoL> u '' '' '' *x.__getitem__ ( key ) ⟺ x [ key ] * <EoL>
<BoL> Needed to enable pickling due to use of : attr : ` __slots__ ` and weakrefs . <EoL>
<BoL> Make a new bidirectional dictionary . <EoL>
<BoL> Get an iterator over the items in : attr : ` inv ` . <EoL>
<BoL> Iterator over the contained items . <EoL>
<BoL> The number of contained items . <EoL>
<BoL> See : func : ` repr ` . <EoL>
<BoL> Implemented because use of : attr : ` __slots__ ` would prevent unpickling otherwise . <EoL>
<BoL> Check if *C* is a : class : ` ~collections.abc.Mapping ` that also provides an `` inv `` attribute , thus conforming to the : class : ` BidirectionalMapping ` interface , in which case it will be considered a ( virtual ) C even if it does n't explicitly extend it . <EoL>
<BoL> Check *key* and *val* for any duplication in self . <EoL>
<BoL> The inverse of this bidict type , i.e . one with *_fwdm_cls* and *_invm_cls* swapped . <EoL>
<BoL> Update , rolling back on failure . <EoL>
<BoL> A shallow copy . <EoL>
<BoL> A set-like object providing a view on the contained values . <EoL>
<BoL> The hash of this bidict as determined by its items . <EoL>
<BoL> Make a new ordered bidirectional mapping . <EoL>
<BoL> An iterator over this bidict 's items in order . <EoL>
<BoL> An iterator over this bidict 's items in reverse order . <EoL>
<BoL> Return whether ( key , val ) duplicates an existing item . <EoL>
<BoL> A shallow copy of this ordered bidict . <EoL>
<BoL> Order-sensitive equality check . <EoL>
<BoL> u '' '' '' *x.__delitem__ ( y ) ⟺ del x [ y ] * <EoL>
<BoL> Set the value for *key* to *val* . <EoL>
<BoL> Remove all items . <EoL>
<BoL> Associate *key* with *val* unconditionally . <EoL>
<BoL> Like a bulk : meth : ` forceput ` . <EoL>
<BoL> u '' '' '' *x.pop ( k [ , d ] ) → v* <EoL>
<BoL> u '' '' '' *x.popitem ( ) → ( k , v ) * <EoL>
<BoL> Associate *key* with *val* with the specified duplication policies . <EoL>
<BoL> Like a bulk : meth : ` put ` . <EoL>
<BoL> Like : meth : ` putall ` with default duplication policies . <EoL>
<BoL> Remove all items . <EoL>
<BoL> Move an existing key to the beginning or end of this ordered bidict . <EoL>
<BoL> u '' '' '' *x.popitem ( ) → ( k , v ) * <EoL>
<BoL> Yield the items from the positional argument ( if given ) and then any from *kw* . <EoL>
<BoL> Create a named bidict with the indicated arguments and return an empty instance . Used to make : func : ` bidict.namedbidict ` instances picklable . <EoL>
<BoL> Create a new subclass of *base_type* with custom accessors . <EoL>
<BoL> Return the instance state dictionary but with weakrefs converted to strong refs so that it can be pickled . <EoL>
<BoL> Set the instance state from *state* . <EoL>
<BoL> Iterator yielding nodes in the requested order , i.e . <EoL>
<BoL> Yield the items in *arg* . <EoL>
<BoL> Yield the inverse items of the provided object . <EoL>
<BoL> Returns a synchronized shared array <EoL>
<BoL> Returns a bounded semaphore object <EoL>
<BoL> Returns a condition object <EoL>
<BoL> Returns an event object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a non-recursive lock object <EoL>
<BoL> Returns a manager associated with a running server process <EoL>
<BoL> Returns two connection object connected by a pipe <EoL>
<BoL> Return whether process is alive <EoL>
<BoL> Wait until child process terminates <EoL>
<BoL> Method to be run in sub-process ; can be overridden in sub-class <EoL>
<BoL> Start child process <EoL>
<BoL> Terminate process ; sends SIGTERM signal or uses TerminateProcess ( ) <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a recursive lock object <EoL>
<BoL> Returns a shared array <EoL>
<BoL> Returns a shared object <EoL>
<BoL> Returns a semaphore object <EoL>
<BoL> Returns a synchronized shared object <EoL>
<BoL> Return list of process objects corresponding to live child processes <EoL>
<BoL> Install support for sending connections and sockets between processes <EoL>
<BoL> : exc : ` socket.error ` and : exc : ` IOError ` first got the `` .errno `` attribute in Py2.7 <EoL>
<BoL> Returns the number of CPUs in the system <EoL>
<BoL> Return process object representing the current process <EoL>
<BoL> Class decorator to set metaclass . <EoL>
<BoL> Enable/disable creation of child process by forking the current process . <EoL>
<BoL> Returns a boolean value indicating whether billiard is currently set to create child processes by forking the current python process rather than by starting a new instances of python . <EoL>
<BoL> Check whether this is a fake forked process in a frozen executable . If so then run code specified by commandline and exit . <EoL>
<BoL> Return package logger -- if it does not already exist then it is created <EoL>
<BoL> Turn on logging and add a handler which prints to stderr <EoL>
<BoL> Convert an IntEnum member to a numeric value . If it 's not an IntEnum member return the value itself . <EoL>
<BoL> Sets the path to a python.exe or pythonw.exe binary used to run child processes on Windows instead of sys.executable . Useful for people embedding Python . <EoL>
<BoL> Cancel finalization of the object <EoL>
<BoL> Return whether this finalizer is still waiting to invoke callback <EoL>
<BoL> Automatic retry after EINTR . <EoL>
<BoL> Run all finalizers whose exit priority is not None and at least minpriority <EoL>
<BoL> Returns logger used by multiprocessing <EoL>
<BoL> Returns true if the process is shutting down <EoL>
<BoL> Turn on logging and add a handler which prints to stderr <EoL>
<BoL> Return a case-less variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Return a lower case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Return an upper case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Test if the other alphabet is contained in this one ( OBSOLETE ? ) . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return a lower case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Return an upper case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Test if the other alphabet is contained in this one ( OBSOLETE ? ) . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return a lower case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Return an upper case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Test if the other alphabet is contained in this one ( OBSOLETE ? ) . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return a lower case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Return an upper case variant of the current alphabet ( PRIVATE ) . <EoL>
<BoL> Test if the other alphabet is contained in this one ( OBSOLETE ? ) . <EoL>
<BoL> Return True except for DNA+RNA or Nucleotide+Protein ( PRIVATE ) . <EoL>
<BoL> Return a common but often generic alphabet object ( PRIVATE ) . <EoL>
<BoL> Return a common but often generic base alphabet object ( PRIVATE ) . <EoL>
<BoL> Return the non-gapped non-stop-codon Alphabet object ( PRIVATE ) . <EoL>
<BoL> Return the alphabet without any gap encoder ( PRIVATE ) . <EoL>
<BoL> Check all letters in sequence are in the alphabet ( PRIVATE ) . <EoL>
<BoL> Forward attribute lookups to the original table . <EoL>
<BoL> Return a simple text representation of the codon table . <EoL>
<BoL> Check if codon works as key for ambiguous forward_table . <EoL>
<BoL> Implement dictionary-like behaviour for AmbiguousForwardTable . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Implement get for dictionary-like behaviour . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Extend a codon list to include all possible ambigous codons . <EoL>
<BoL> Return all possible encoded amino acids for ambiguous codon . <EoL>
<BoL> Back a back-table ( naive single codon mapping ) . <EoL>
<BoL> Call special method when opening the file using a with-statement . <EoL>
<BoL> Call special method when closing the file using a with-statement . <EoL>
<BoL> Return File attribute . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Iterate over the lines in the File . <EoL>
<BoL> Return the next line . <EoL>
<BoL> Return the next line in the file , but do not move forward though the file . <EoL>
<BoL> Read the File . <EoL>
<BoL> Read the next line from the file as string . <EoL>
<BoL> Read all the lines from the file as a list of strings . <EoL>
<BoL> Store a line in the cache memory for later use . <EoL>
<BoL> Set the current position at the offset specified . <EoL>
<BoL> Return the current position of the file read/write pointer within the File . <EoL>
<BoL> Return key if contained in the offsets dictionary . <EoL>
<BoL> Return record for the specified key . <EoL>
<BoL> Iterate over the keys . <EoL>
<BoL> Return the number of records . <EoL>
<BoL> Return a string representation of the File object . <EoL>
<BoL> Would allow setting or replacing records , but not implemented . <EoL>
<BoL> Create a string representation of the File object . <EoL>
<BoL> Would clear dictionary , but not implemented . <EoL>
<BoL> Close the file handle being used to read the data . <EoL>
<BoL> Would copy a dictionary , but not implemented . <EoL>
<BoL> Would return a new dictionary with keys and values , but not implemented . <EoL>
<BoL> Return the value in the dictionary . <EoL>
<BoL> Return the raw record from the file as a bytes string . <EoL>
<BoL> Iterate over the ( key , SeqRecord ) items . <EoL>
<BoL> Iterate over the keys . <EoL>
<BoL> Would remove specified record , but not implemented . <EoL>
<BoL> Would remove and return a SeqRecord , but not implemented . <EoL>
<BoL> Would allow adding more values , but not implemented . <EoL>
<BoL> Iterate over the SeqRecord items . <EoL>
<BoL> Return ( identifier , offset , length in bytes ) tuples . <EoL>
<BoL> Return parsed object for this entry . <EoL>
<BoL> Return the raw record from the file as a bytes string ( if implemented ) . <EoL>
<BoL> Return record for the specified key . <EoL>
<BoL> Iterate over the keys . <EoL>
<BoL> Return the number of records indexed . <EoL>
<BoL> Call from __init__ to create a new index ( PRIVATE ) . <EoL>
<BoL> Call from __init__ to re-use an existing index ( PRIVATE ) . <EoL>
<BoL> Close any open file handles . <EoL>
<BoL> Return the value in the dictionary . <EoL>
<BoL> Return the raw record from the file as a bytes string . <EoL>
<BoL> Open a file in binary mode , spot if it is BGZF format etc ( PRIVATE ) . <EoL>
<BoL> Context manager to ensure we are using a handle . <EoL>
<BoL> Check if the mapping has a property for this residue . <EoL>
<BoL> Return property for a residue . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Iterate over the ( entity , property ) list . <EoL>
<BoL> Return number of residues for which the property is available . <EoL>
<BoL> Return entity identifier on atoms ( PRIVATE ) . <EoL>
<BoL> Return the list of residues . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return entity identifier ( PRIVATE ) . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return entity identifier on residue ( PRIVATE ) . <EoL>
<BoL> Test equality . <EoL>
<BoL> Test greater or equal . <EoL>
<BoL> Test greater than . <EoL>
<BoL> Return atom full identifier . <EoL>
<BoL> Test less or equal . <EoL>
<BoL> Test less than . <EoL>
<BoL> Test inequality . <EoL>
<BoL> Print Atom object as < Atom atom_name > . <EoL>
<BoL> Calculate distance between two atoms . <EoL>
<BoL> Return atom weight ( PRIVATE ) . <EoL>
<BoL> Guess element from atom name if not recognised ( PRIVATE ) . <EoL>
<BoL> Create a copy of the Atom . <EoL>
<BoL> Remove reference to parent . <EoL>
<BoL> Set the disordered flag to 1 . <EoL>
<BoL> Return alternative location specifier . <EoL>
<BoL> Return anisotropic B factor . <EoL>
<BoL> Return B factor . <EoL>
<BoL> Return atomic coordinates . <EoL>
<BoL> Return the full id of the atom . <EoL>
<BoL> Return the atom name , including leading and trailing spaces . <EoL>
<BoL> Return the id of the atom ( which is its atom name ) . <EoL>
<BoL> Return level . <EoL>
<BoL> Return atom name . <EoL>
<BoL> Return occupancy . <EoL>
<BoL> Return parent residue . <EoL>
<BoL> Return the serial number . <EoL>
<BoL> Return standard deviation of atomic parameters . <EoL>
<BoL> Return standard deviations of anisotropic temperature factors . <EoL>
<BoL> Return coordinates as Vector . <EoL>
<BoL> Return the disordered flag ( 1 if disordered , 0 otherwise ) . <EoL>
<BoL> Set alternative location specifier . <EoL>
<BoL> Set anisotropic B factor . <EoL>
<BoL> Set isotroptic B factor . <EoL>
<BoL> Set coordinates . <EoL>
<BoL> Set occupancy . <EoL>
<BoL> Set the parent residue . <EoL>
<BoL> Set serial number . <EoL>
<BoL> Set standard deviation of atomic parameters . <EoL>
<BoL> Set standard deviations of anisotropic temperature factors . <EoL>
<BoL> Apply rotation and translation to the atomic coordinates . <EoL>
<BoL> Check if the child has the given id . <EoL>
<BoL> Return if child is greater or equal than other . <EoL>
<BoL> Forward the method call to the selected child . <EoL>
<BoL> Return the child with the given id . <EoL>
<BoL> Return if child is greater than other . <EoL>
<BoL> Create DisorderedAtom . <EoL>
<BoL> Iterate through disordered atoms . <EoL>
<BoL> Return if child is less or equal than other . <EoL>
<BoL> Return the number of children . <EoL>
<BoL> Return if child is less than other . <EoL>
<BoL> Return disordered atom identifier . <EoL>
<BoL> Add a child , associated with a certain id . <EoL>
<BoL> Subtraction with another object . <EoL>
<BoL> Detach the parent . <EoL>
<BoL> Add a disordered atom . <EoL>
<BoL> Get the child object associated with id . <EoL>
<BoL> Return a list of id 's . <EoL>
<BoL> Return list of children . <EoL>
<BoL> Check if there is an object present associated with this id . <EoL>
<BoL> Select the object with given id as the currently active object . <EoL>
<BoL> Return the id . <EoL>
<BoL> Return parent . <EoL>
<BoL> Return 2 , indicating that this Entity is a collection of Entities . <EoL>
<BoL> Set the parent for the object and its children . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return the number of children . <EoL>
<BoL> Add disordered entry . <EoL>
<BoL> Return Vector+other Vector or scalar . <EoL>
<BoL> Validate if i is in array . <EoL>
<BoL> Return Vector ( coords/a ) . <EoL>
<BoL> Return value of array index i . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return Vector.Vector ( dot product ) . <EoL>
<BoL> Return Vector ( -x , -y , -z ) . <EoL>
<BoL> Return VectorxVector ( cross product ) or Vectorxscalar . <EoL>
<BoL> Return vector 3D coordinates . <EoL>
<BoL> Assign values to array index i . <EoL>
<BoL> Return Vector-other Vector or scalar . <EoL>
<BoL> Return angle between two vectors . <EoL>
<BoL> Return a deep copy of the Vector . <EoL>
<BoL> Return ( a copy of ) the array of coordinates . <EoL>
<BoL> Return Vector=Matrix x Vector . <EoL>
<BoL> Return vector norm . <EoL>
<BoL> Normalize the Vector object . <EoL>
<BoL> Return a normalized copy of the Vector . <EoL>
<BoL> Return square of vector norm . <EoL>
<BoL> Return Vector=Vector x Matrix . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Check if the residue is an amino acid ( PRIVATE ) . <EoL>
<BoL> Build and return a list of Polypeptide objects . <EoL>
<BoL> Check if a residue with given id is present in this chain . <EoL>
<BoL> Delete item . <EoL>
<BoL> Test for equality . This compares full_id including the IDs of all parents . <EoL>
<BoL> Validate if id is greater or equal than other.id . <EoL>
<BoL> Return the residue with given id . <EoL>
<BoL> Validate if id is greater than other.id . <EoL>
<BoL> Hash method to allow uniqueness ( set ) . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Iterate over children . <EoL>
<BoL> Validate if id is less or equal than other id . <EoL>
<BoL> Return the number of children . <EoL>
<BoL> Validate if id is less than other.id . <EoL>
<BoL> Test for inequality . <EoL>
<BoL> Return the chain identifier . <EoL>
<BoL> Generate full_id ( PRIVATE ) . <EoL>
<BoL> Reset the full_id ( PRIVATE ) . <EoL>
<BoL> Translate sequence identifier to tuple form ( PRIVATE ) . <EoL>
<BoL> Add a child to the Entity . <EoL>
<BoL> Copy entity recursively . <EoL>
<BoL> Remove a child . <EoL>
<BoL> Detach the parent . <EoL>
<BoL> Return atoms from residues . <EoL>
<BoL> Return the full id . <EoL>
<BoL> Return the id . <EoL>
<BoL> Return iterator over children . <EoL>
<BoL> Return level in hierarchy . <EoL>
<BoL> Return a copy of the list of children . <EoL>
<BoL> Return the parent Entity object . <EoL>
<BoL> Return residues . <EoL>
<BoL> Return a list of undisordered residues . <EoL>
<BoL> Return 1 if a residue with given id is present . <EoL>
<BoL> Add a child to the Entity at a specified position . <EoL>
<BoL> Set the parent Entity object . <EoL>
<BoL> Apply rotation and translation to the atomic coordinates . <EoL>
<BoL> Check if there is a child element with the given id . <EoL>
<BoL> Remove a child . <EoL>
<BoL> Test greater or equal . <EoL>
<BoL> Return the child with given id . <EoL>
<BoL> Test greater than . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Test less or equal . <EoL>
<BoL> Test less than . <EoL>
<BoL> Check if a child with given id exists . <EoL>
<BoL> Create a DSSP object.Serialize a residue 's resseq and icode for easy comparison . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Verify if atoms are not Hydrogen . <EoL>
<BoL> Verify if chain match chain identifier . <EoL>
<BoL> Verify if model match the model identifier . <EoL>
<BoL> Verify if a residue sequence is between the start and end sequence . <EoL>
<BoL> Create the PDBIO object . <EoL>
<BoL> Save structure to a file . <EoL>
<BoL> Check what the user is providing and build a structure . <EoL>
<BoL> Write out selected portion to filename . <EoL>
<BoL> Initialize . <EoL>
<BoL> Create a FastMMCIFParser object . <EoL>
<BoL> Return the structure . <EoL>
<BoL> Check if the given residue is in any of the mapped fragments . <EoL>
<BoL> Get an entry . <EoL>
<BoL> Create instance of FragmentMapper . <EoL>
<BoL> Map ( PRIVATE ) . <EoL>
<BoL> Initialse class . <EoL>
<BoL> Calculate approx CA-CB direction ( PRIVATE ) . <EoL>
<BoL> Return a pseudo CB vector for a Gly residue ( PRIVATE ) . <EoL>
<BoL> Write PyMol script for visualization . <EoL>
<BoL> Initialize class . <EoL>
<BoL> Calculate CB-CA vector ( PRIVATE ) . <EoL>
<BoL> Return True if residue object/string is an amino acid . <EoL>
<BoL> Calculate left multiplying rotation matrix . <EoL>
<BoL> Parse a mmCIF file and return a dictionary . <EoL>
<BoL> Initialise . <EoL>
<BoL> Save the structure to a file . <EoL>
<BoL> Set the mmCIF dictionary to be written out . <EoL>
<BoL> Check what object the user is providing and build a structure . <EoL>
<BoL> Create a PDBParser object . <EoL>
<BoL> Return the structure . <EoL>
<BoL> Initialize . <EoL>
<BoL> Return model identifier . <EoL>
<BoL> Return atoms . <EoL>
<BoL> Return chains . <EoL>
<BoL> Return residues . <EoL>
<BoL> Create the object . <EoL>
<BoL> Neighbor search . <EoL>
<BoL> All neighbor search . <EoL>
<BoL> Print a warning to stdout ( PRIVATE ) . <EoL>
<BoL> Retrieve all PDB entries not present in the local PDB copy . <EoL>
<BoL> Retrieve all obsolete PDB entries not present in local obsolete PDB copy . <EoL>
<BoL> Fetch set of PDB structure files from the PDB server and stores them locally . <EoL>
<BoL> Retrieve the big file containing all the PDB entries and some annotation . <EoL>
<BoL> Return a list of all obsolete entries ever in the PDB . <EoL>
<BoL> Return three lists of the newest weekly files ( added , mod , obsolete ) . <EoL>
<BoL> Retrieve and save a ( big ) file containing all the sequences of PDB entries . <EoL>
<BoL> Retrieve a list of pdb codes in the weekly pdb status file from given URL . <EoL>
<BoL> Fetch PDB structure file from PDB server , and store it locally . <EoL>
<BoL> Update your local copy of the PDB files . <EoL>
<BoL> Get the header of the PDB file , return the rest ( PRIVATE ) . <EoL>
<BoL> Handle exception ( PRIVATE ) . <EoL>
<BoL> Parse the PDB file ( PRIVATE ) . <EoL>
<BoL> Parse the atomic data in the PDB file ( PRIVATE ) . <EoL>
<BoL> Return the header . <EoL>
<BoL> Return the structure . <EoL>
<BoL> Return the trailer . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return 1 if distance between atoms < radius ( PRIVATE ) . <EoL>
<BoL> Return string representation of the polypeptide . <EoL>
<BoL> Get list of C-alpha atoms in the polypeptide . <EoL>
<BoL> Return the list of phi/psi dihedral angles . <EoL>
<BoL> Return the AA sequence as a Seq object . <EoL>
<BoL> List of tau torsions angles for all 4 consecutive Calpha atoms . <EoL>
<BoL> List of theta angles for all 3 consecutive Calpha atoms . <EoL>
<BoL> Add another sequence or string to this sequence . <EoL>
<BoL> Implement the 'in ' keyword , like a python string . <EoL>
<BoL> Compare the sequence to another sequence or a string ( README ) . <EoL>
<BoL> Implement the greater-than or equal operand . <EoL>
<BoL> Return a subsequence of single letter , use my_seq [ index ] . <EoL>
<BoL> Implement the greater-than operand . <EoL>
<BoL> Hash for comparison . <EoL>
<BoL> Multiply Seq in-place . <EoL>
<BoL> Create a Seq object . <EoL>
<BoL> Implement the less-than or equal operand . <EoL>
<BoL> Return the length of the sequence , use len ( my_seq ) . <EoL>
<BoL> Implement the less-than operand . <EoL>
<BoL> Multiply Seq by integer . <EoL>
<BoL> Implement the not-equal operand . <EoL>
<BoL> Add a sequence on the left . <EoL>
<BoL> Return ( truncated ) representation of the sequence for debugging . <EoL>
<BoL> Multiply integer by Seq . <EoL>
<BoL> Return the full sequence as a python string , use str ( my_seq ) . <EoL>
<BoL> Convert string/Seq/MutableSeq to string , checking alphabet ( PRIVATE ) . <EoL>
<BoL> Return the DNA sequence from an RNA sequence by creating a new Seq object . <EoL>
<BoL> Return the complement sequence by creating a new Seq object . <EoL>
<BoL> Return a non-overlapping count , like that of a python string . <EoL>
<BoL> Return an overlapping count . <EoL>
<BoL> Return True if the Seq ends with the given suffix , False otherwise . <EoL>
<BoL> Find method , like that of a python string . <EoL>
<BoL> Return a lower case copy of the sequence . <EoL>
<BoL> Return a new Seq object with leading ( left ) end stripped . <EoL>
<BoL> Return the reverse complement sequence by creating a new Seq object . <EoL>
<BoL> Find from right method , like that of a python string . <EoL>
<BoL> Do a right split method , like that of a python string . <EoL>
<BoL> Return a new Seq object with trailing ( right ) end stripped . <EoL>
<BoL> Split method , like that of a python string . <EoL>
<BoL> Return True if the Seq starts with the given prefix , False otherwise . <EoL>
<BoL> Return a new Seq object with leading and trailing ends stripped . <EoL>
<BoL> Return the full sequence as a MutableSeq object . <EoL>
<BoL> Return the RNA sequence from a DNA sequence by creating a new Seq object . <EoL>
<BoL> Return a copy of the sequence without the gap character ( s ) . <EoL>
<BoL> Return an upper case copy of the sequence . <EoL>
<BoL> Initialize the base class . <EoL>
<BoL> Calculate angle method . <EoL>
<BoL> Calculate dihedral angle method . <EoL>
<BoL> Index to corresponding one letter amino acid name . <EoL>
<BoL> Index to corresponding three letter amino acid name . <EoL>
<BoL> One letter code to index . <EoL>
<BoL> One letter code to three letter code . <EoL>
<BoL> Three letter code to index . <EoL>
<BoL> Three letter code to one letter code . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return disordered residue full identifier . <EoL>
<BoL> Add atom to residue . <EoL>
<BoL> Add a residue object and use its resname as key . <EoL>
<BoL> Sort the atoms in the child Residue objects . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return the residue full id . <EoL>
<BoL> Add an Atom object . <EoL>
<BoL> Set the disordered flag . <EoL>
<BoL> Return atom . <EoL>
<BoL> Return atoms . <EoL>
<BoL> Return the residue name . <EoL>
<BoL> Return the segment identifier . <EoL>
<BoL> Return the list of all atoms , unpack DisorderedAtoms . <EoL>
<BoL> Return 1 if the residue contains disordered atoms . <EoL>
<BoL> Sort child atoms . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Represent the output as a string for debugging . <EoL>
<BoL> Overload this to reject atoms for output . <EoL>
<BoL> Overload this to reject chains for output . <EoL>
<BoL> Overload this to reject models for output . <EoL>
<BoL> Overload this to reject residues for output . <EoL>
<BoL> Translate a list of entities to a list of their ( unique ) parents . <EoL>
<BoL> Unfold entities list to a child level ( e.g . residues in chain ) . <EoL>
<BoL> Return a list of the unique items in the given iterable . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return the structure identifier . <EoL>
<BoL> Return atoms from residue . <EoL>
<BoL> Return chains from models . <EoL>
<BoL> Return models . <EoL>
<BoL> Return residues from chains . <EoL>
<BoL> Initialize . <EoL>
<BoL> Test if aa in sequence fits aa in structure ( PRIVATE ) . <EoL>
<BoL> Create an iterator over all residue pairs . <EoL>
<BoL> Map residues between the structures . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return 1 if all atoms in the residue have a non blank altloc ( PRIVATE ) . <EoL>
<BoL> Return the structure . <EoL>
<BoL> Create a new Chain object with given id . <EoL>
<BoL> Create a new Model object with given id . <EoL>
<BoL> Create a new Residue object . <EoL>
<BoL> Flag a change in segid . <EoL>
<BoL> Initialize a new Structure object with given id . <EoL>
<BoL> Set anisotropic B factor of current Atom . <EoL>
<BoL> Set header . <EoL>
<BoL> Tracks line in the PDB file that is being parsed . <EoL>
<BoL> Set standard deviation of atom position of current Atom . <EoL>
<BoL> Set standard deviation of anisotropic B factor of current Atom . <EoL>
<BoL> Set symmetry . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Rotate/translate a list of atoms . <EoL>
<BoL> Prepare translation/rotation to minimize RMSD between atoms . <EoL>
<BoL> Represent molecular surface as a vertex list array . <EoL>
<BoL> Return angles , axis pair that corresponds to rotation matrix m . <EoL>
<BoL> DSSP dictionary mapping identifiers to properties . <EoL>
<BoL> Return the header lines of a pdb file as a dictionary . <EoL>
<BoL> Return a ( left multiplying ) matrix that mirrors p onto q . <EoL>
<BoL> Return a ( left multiplying ) matrix that rotates p onto q . <EoL>
<BoL> Vector to axis method . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Return rms deviations between coords1 and coords2 ( PRIVATE ) . <EoL>
<BoL> Root mean square deviation of untransformed coordinates . <EoL>
<BoL> Root mean square deviation of superimposed coordinates . <EoL>
<BoL> Right multiplying rotation matrix and translation . <EoL>
<BoL> Get the transformed coordinate set . <EoL>
<BoL> Superimpose the coordinate sets . <EoL>
<BoL> Set the coordinates to be superimposed . <EoL>
<BoL> Compute the determinant of an array . <EoL>
<BoL> Singular Value Decomposition . <EoL>
<BoL> Permute the dimensions of an array . <EoL>
<BoL> Add another sequence or string to this sequence . <EoL>
<BoL> Delete a subsequence of single letter . <EoL>
<BoL> Compare the sequence to another sequence or a string ( README ) . <EoL>
<BoL> Implement the greater-than or equal operand . <EoL>
<BoL> Return a subsequence of single letter , use my_seq [ index ] . <EoL>
<BoL> Implement the greater-than operand . <EoL>
<BoL> Multiply MutableSeq in-place . <EoL>
<BoL> Initialize the class . <EoL>
<BoL> Implement the less-than or equal operand . <EoL>
<BoL> Return the length of the sequence , use len ( my_seq ) . <EoL>
<BoL> Implement the less-than operand . <EoL>
<BoL> Multiply MutableSeq by integer . <EoL>
<BoL> Implement the not-equal operand . <EoL>
<BoL> Add a sequence on the left . <EoL>
<BoL> Return ( truncated ) representation of the sequence for debugging . <EoL>
<BoL> Multiply integer by MutableSeq . <EoL>
<BoL> Set a subsequence of single letter via value parameter . <EoL>
<BoL> Return the full sequence as a python string . <EoL>
<BoL> Add a subsequence to the mutable sequence object . <EoL>
<BoL> Modify the mutable sequence to take on its complement . <EoL>
<BoL> Return a non-overlapping count , like that of a python string . <EoL>
<BoL> Return an overlapping count . <EoL>
<BoL> Add a sequence to the original mutable sequence object . <EoL>
<BoL> Return first occurrence position of a single entry ( i.e . letter ) . <EoL>
<BoL> Add a subsequence to the mutable sequence object at a given index . <EoL>
<BoL> Remove a subsequence of a single letter at given index . <EoL>
<BoL> Remove a subsequence of a single letter from mutable sequence . <EoL>
<BoL> Modify the mutable sequence to reverse itself . <EoL>
<BoL> Modify the mutable sequence to take on its reverse complement . <EoL>
<BoL> Return the full sequence as a new immutable Seq object . <EoL>
<BoL> Add another sequence or string to this sequence . <EoL>
<BoL> Get a subsequence from the UnknownSeq object . <EoL>
<BoL> Multiply UnknownSeq in-place . <EoL>
<BoL> Return the stated length of the unknown sequence . <EoL>
<BoL> Multiply UnknownSeq by integer . <EoL>
<BoL> Add a sequence on the left . <EoL>
<BoL> Return ( truncated ) representation of the sequence for debugging . <EoL>
<BoL> Multiply integer by UnknownSeq . <EoL>
<BoL> Return the unknown sequence as full string of the given length . <EoL>
<BoL> Return an unknown DNA sequence from an unknown RNA sequence . <EoL>
<BoL> Return the complement of an unknown nucleotide equals itself . <EoL>
<BoL> Return a non-overlapping count , like that of a python string . <EoL>
<BoL> Return an overlapping count . <EoL>
<BoL> Return a lower case copy of the sequence . <EoL>
<BoL> Return the reverse complement of an unknown sequence . <EoL>
<BoL> Return an unknown RNA sequence from an unknown DNA sequence . <EoL>
<BoL> Translate an unknown nucleotide sequence into an unknown protein . <EoL>
<BoL> Return a copy of the sequence without the gap character ( s ) . <EoL>
<BoL> Return an upper case copy of the sequence . <EoL>
<BoL> Make a python string translation table ( PRIVATE ) . <EoL>
<BoL> Run the Bio.Seq module 's doctests ( PRIVATE ) . <EoL>
<BoL> Return the RNA sequence back-transcribed into DNA . <EoL>
<BoL> Return the complement sequence of a nucleotide string . <EoL>
<BoL> Return the reverse complement sequence of a nucleotide string . <EoL>
<BoL> Transcribe a DNA sequence into RNA . <EoL>
<BoL> Return a string indicating the HTTP request method . <EoL>
<BoL> Turn byte string or unicode string into a bytes string ( PRIVATE ) . <EoL>
<BoL> Turn byte string or unicode string into a unicode string ( PRIVATE ) . <EoL>
<BoL> Treat a binary ( bytes ) handle like a text ( unicode ) handle ( PRIVATE ) . <EoL>
<BoL> If s is bytes or bytearray , convert to a unicode string ( PRIVATE ) . <EoL>
<BoL> Check if the value is an integer ( PRIVATE ) . <EoL>
<BoL> Return output ( stdout or stderr ) of executing cmd in a shell . <EoL>
<BoL> Clean up temporary files from urlretrieve calls . <EoL>
<BoL> Open the URL url , which can be either a string or a Request object . <EoL>
<BoL> Retrieve a URL into a temporary location on disk . <EoL>
<BoL> Searches through the configured ` config_paths ` for the ` config_name ` file . <EoL>
<BoL> Parse the configuration file , if one is configured , and add it to the ` Bison ` state . <EoL>
<BoL> Parse the ` Schema ` for the ` Bison ` instance to create the set of default values . <EoL>
<BoL> Parse the environment variables for any configuration if an ` env_prefix ` is set . <EoL>
<BoL> Add paths to search for the configuration file . <EoL>
<BoL> Get the value for the configuration ` key ` . <EoL>
<BoL> Parse the configuration sources into ` Bison ` . <EoL>
<BoL> Set a value in the ` Bison ` configuration . <EoL>
<BoL> Validate the ` Bison ` configuration against the ` Scheme ` , if one is set . <EoL>
<BoL> Remove a value from the ` DotDict ` . <EoL>
<BoL> Get a value from the ` DotDict ` . <EoL>
<BoL> Merge the dictionary with the values from another dictionary ( or other DotDict ) . <EoL>
<BoL> Cast a value to the type required by the option , if one is set . <EoL>
<BoL> Build a dictionary of default values from the ` Scheme ` . <EoL>
<BoL> Flatten the scheme into a dictionary where the keys are compound 'dot ' notation keys , and the values are the corresponding options . <EoL>
<BoL> Validate the given config against the ` Scheme ` . <EoL>
<BoL> Parse the environment based on the option configuration . <EoL>
<BoL> Validate that the option constraints are met by the configuration . <EoL>
<BoL> Merge two dictionaries ( or DotDicts ) together . <EoL>
<BoL> Build new dictionaries based off of the dot notation key . <EoL>
<BoL> Insert symbol which is mapped to bitarray into tree <EoL>
<BoL> decode ( code ) - > list <EoL>
<BoL> encode ( code , iterable ) <EoL>
<BoL> fromstring ( string ) <EoL>
<BoL> iterdecode ( code ) - > iterator <EoL>
<BoL> tostring ( ) - > string <EoL>
<BoL> test ( verbosity=1 , repeat=1 ) - > TextTestResult <EoL>
<BoL> Concatenate bitstrings and return new bitstring . <EoL>
<BoL> Bit-wise 'and ' between two bitstrings . Returns new bitstring . <EoL>
<BoL> Return True if any bits are set to 1 , otherwise return False . <EoL>
<BoL> Return whether bs is contained in the current bitstring . <EoL>
<BoL> Return a new copy of the BitArray . <EoL>
<BoL> Delete item or range . <EoL>
<BoL> Return True if two bitstrings have the same binary representation . <EoL>
<BoL> Return a new bitstring representing a slice of the current bitstring . <EoL>
<BoL> Append bs to current bitstring . Return self . <EoL>
<BoL> Shift bits by n to the left in place . Return self . <EoL>
<BoL> Concatenate n copies of self in place . Return self . <EoL>
<BoL> Either specify an 'auto ' initialiser : auto -- a string of comma separated tokens , an integer , a file object , a bytearray , a boolean iterable or another bitstring . <EoL>
<BoL> Return bitstring with every bit inverted . <EoL>
<BoL> Shift bits by n to the right in place . Return self . <EoL>
<BoL> Return the length of the bitstring in bits . <EoL>
<BoL> Return bitstring with bits shifted by n to the left . <EoL>
<BoL> Return bitstring consisting of n concatenations of self . <EoL>
<BoL> Return False if two bitstrings have the same binary representation . <EoL>
<BoL> Bit-wise 'or ' between two bitstrings . Returns new bitstring . <EoL>
<BoL> Append current bitstring to bs and return new bitstring . <EoL>
<BoL> Bit-wise 'and ' between two bitstrings . Returns new bitstring . <EoL>
<BoL> Return representation that could be used to recreate the bitstring . <EoL>
<BoL> Return bitstring consisting of n concatenations of self . <EoL>
<BoL> Bit-wise 'or ' between two bitstrings . Returns new bitstring . <EoL>
<BoL> Return bitstring with bits shifted by n to the right . <EoL>
<BoL> Bit-wise 'xor ' between two bitstrings . Returns new bitstring . <EoL>
<BoL> Set item or range to new value . <EoL>
<BoL> Return approximate string representation of bitstring for printing . <EoL>
<BoL> Bit-wise 'xor ' between two bitstrings . Returns new bitstring . <EoL>
<BoL> Append a bitstring to the current bitstring . <EoL>
<BoL> Check internal self consistency as a debugging aid . <EoL>
<BoL> Reset the bitstring to an empty state . <EoL>
<BoL> Convert bs to a bitstring and return it . <EoL>
<BoL> Create and return a new copy of the Bits ( always in memory ) . <EoL>
<BoL> Delete bits at pos . <EoL>
<BoL> Ensure the data is held in memory , not in a file . <EoL>
<BoL> Quicker version of find when everything 's whole byte and byte aligned . <EoL>
<BoL> Find first occurrence of a compiled regular expression . <EoL>
<BoL> Return interpretation as a binary string . <EoL>
<BoL> Return the data as an ordinary string . <EoL>
<BoL> Interpret the whole bitstring as a float . <EoL>
<BoL> Interpret the whole bitstring as a little-endian float . <EoL>
<BoL> Return the hexadecimal representation as a string prefixed with '0x ' . <EoL>
<BoL> Return data as a two 's complement signed int . <EoL>
<BoL> Return data as a big-endian two 's complement signed int . <EoL>
<BoL> Return the length of the bitstring in bits . <EoL>
<BoL> Return interpretation as an octal string . <EoL>
<BoL> Return data as signed exponential-Golomb code . <EoL>
<BoL> Return data as signed interleaved exponential-Golomb code . <EoL>
<BoL> Return data as unsigned exponential-Golomb code . <EoL>
<BoL> Return data as unsigned interleaved exponential-Golomb code . <EoL>
<BoL> Return data as an unsigned int . <EoL>
<BoL> Return data as a big-endian two 's complement unsigned int . <EoL>
<BoL> Shift bits by n to the left in place . Return self . <EoL>
<BoL> Concatenate n copies of self in place . Return self . <EoL>
<BoL> Helper function containing most of the __ior__ , __iand__ , __ixor__ code . <EoL>
<BoL> Insert bs at pos . <EoL>
<BoL> Flip bit at pos 1 < - > 0 . <EoL>
<BoL> Invert every bit . <EoL>
<BoL> Shift bits by n to the right in place . Return self . <EoL>
<BoL> Overwrite with bs at pos . <EoL>
<BoL> Prepend a bitstring to the current bitstring . <EoL>
<BoL> Read bits and interpret as a binary string . <EoL>
<BoL> Read some bits from the bitstring and return newly constructed bitstring . <EoL>
<BoL> Read bytes and return them . Note that length is in bits . <EoL>
<BoL> Read bits and interpret as a float . <EoL>
<BoL> Read bits and interpret as a little-endian float . <EoL>
<BoL> Read bits and interpret as a hex string . <EoL>
<BoL> Read bits and interpret as a signed int <EoL>
<BoL> Read bits and interpret as a big-endian signed int . <EoL>
<BoL> Read bits and interpret as a little-endian signed int . <EoL>
<BoL> Read bits and interpret as an octal string . <EoL>
<BoL> Return interpretation of next bits as a signed exponential-Golomb code . <EoL>
<BoL> Return interpretation of next bits as a signed interleaved exponential-Golomb code . <EoL>
<BoL> Reads a token from the bitstring and returns the result . <EoL>
<BoL> Return interpretation of next bits as unsigned exponential-Golomb code . <EoL>
<BoL> Return interpretation of next bits as unsigned interleaved exponential-Golomb code . <EoL>
<BoL> Read bits and interpret as an unsigned int . <EoL>
<BoL> Read bits and interpret as a big-endian unsigned int . <EoL>
<BoL> Read bits and interpret as a little-endian unsigned int . <EoL>
<BoL> Reverse all bits in-place . <EoL>
<BoL> Reverse bytes in-place . <EoL>
<BoL> Set bit at pos to 1 . <EoL>
<BoL> Set bitstring from a bitstring , file , bool , integer , array , iterable or string . <EoL>
<BoL> Reset the bitstring to the value given in binstring . <EoL>
<BoL> Same as _setbin_safe , but input is n't sanity checked . binstring must n't start with '0b ' . <EoL>
<BoL> Set the data from a string . <EoL>
<BoL> Unchecked version of _setbytes_safe . <EoL>
<BoL> Use file as source of bits . <EoL>
<BoL> Reset the bitstring to have the value given in hexstring . <EoL>
<BoL> Reset the bitstring to have given signed int interpretation . <EoL>
<BoL> Set bitstring to a big-endian signed int interpretation . <EoL>
<BoL> Reset the bitstring to have the value given in octstring . <EoL>
<BoL> Initialise bitstring with signed exponential-Golomb code for integer i . <EoL>
<BoL> Initialise bitstring with signed interleaved exponential-Golomb code for integer i . <EoL>
<BoL> Initialise bitstring with unsigned exponential-Golomb code for integer i . <EoL>
<BoL> Initialise bitstring with unsigned interleaved exponential-Golomb code for integer i . <EoL>
<BoL> Reset the bitstring to have given unsigned int interpretation . <EoL>
<BoL> Set the bitstring to a big-endian unsigned int interpretation . <EoL>
<BoL> Used internally to get a slice , without error checking . <EoL>
<BoL> Truncate bits from the end of the bitstring . <EoL>
<BoL> Truncate bits from the start of the bitstring . <EoL>
<BoL> Set bit at pos to 0 . <EoL>
<BoL> Validate start and end and return them as positive bit positions . <EoL>
<BoL> Return True if one or many bits are all set to value . <EoL>
<BoL> Return True if any of one or many bits are set to value . <EoL>
<BoL> Append a bitstring to the current bitstring . <EoL>
<BoL> Change the endianness in-place . Return number of repeats of fmt done . <EoL>
<BoL> Remove all bits , reset to zero length . <EoL>
<BoL> Return a copy of the bitstring . <EoL>
<BoL> Return count of total number of either zero or one bits . <EoL>
<BoL> Return bitstring generator by cutting into bits sized chunks . <EoL>
<BoL> Return whether the current bitstring ends with suffix . <EoL>
<BoL> Find first occurrence of substring bs . <EoL>
<BoL> Find all occurrences of bs . Return generator of bit positions . <EoL>
<BoL> Insert bs at bit position pos . <EoL>
<BoL> Invert one or many bits from 0 to 1 or vice versa . <EoL>
<BoL> Return concatenation of bitstrings joined by self . <EoL>
<BoL> Overwrite with bs at bit position pos . <EoL>
<BoL> Prepend a bitstring to the current bitstring . <EoL>
<BoL> Reverse bits in-place . <EoL>
<BoL> Find final occurrence of substring bs . <EoL>
<BoL> Rotate bits to the left in-place . <EoL>
<BoL> Rotate bits to the right in-place . <EoL>
<BoL> Set one or many bits to 1 or 0 . <EoL>
<BoL> Return whether the current bitstring starts with prefix . <EoL>
<BoL> Return the bitstring as bytes , padding with zero bits if needed . <EoL>
<BoL> Write the bitstring to a file object , padding with zero bits if needed . <EoL>
<BoL> Interpret the whole bitstring using fmt and return list . <EoL>
<BoL> Concatenate bitstrings and return new bitstring . <EoL>
<BoL> Return a new copy of the BitStream . <EoL>
<BoL> Either specify an 'auto ' initialiser : auto -- a string of comma separated tokens , an integer , a file object , a bytearray , a boolean iterable or another bitstring . <EoL>
<BoL> Return the current position in the stream in bits . <EoL>
<BoL> Return the current position in the stream in bytes . Must be byte aligned . <EoL>
<BoL> Move to absolute postion bit in bitstream . <EoL>
<BoL> Move to absolute byte-aligned position in stream . <EoL>
<BoL> Align to next byte and return number of skipped bits . <EoL>
<BoL> Interpret next bits according to format string and return result . <EoL>
<BoL> Interpret next bits according to format string ( s ) and return list . <EoL>
<BoL> Prepend a bitstring to the current bitstring . <EoL>
<BoL> Interpret next bits according to the format string and return result . <EoL>
<BoL> Interpret next bits according to format string ( s ) and return list . <EoL>
<BoL> Read up to and including next occurrence of bs and return result . <EoL>
<BoL> Return a new copy of the Bits for the copy module . <EoL>
<BoL> Return an integer hash of the object . <EoL>
<BoL> Either specify an 'auto ' initialiser : auto -- a string of comma separated tokens , an integer , a file object , a bytearray , a boolean iterable , an array or another bitstring . <EoL>
<BoL> data is either a bytearray or a MmapByteArray <EoL>
<BoL> Join another store on to the end of this one . <EoL>
<BoL> Join another store on to the start of this one . <EoL>
<BoL> Direct access to byte data . <EoL>
<BoL> Direct access to byte data . <EoL>
<BoL> Return a new copy of the ConstBitStream for the copy module . <EoL>
<BoL> Either specify an 'auto ' initialiser : auto -- a string of comma separated tokens , an integer , a file object , a bytearray , a boolean iterable or another bitstring . <EoL>
<BoL> Return True if ByteStores a == b . <EoL>
<BoL> Remove whitespace and expand all brackets . <EoL>
<BoL> Return a copy of a ByteStore with the newoffset . <EoL>
<BoL> Pack the values according to the format string and return a new BitStream . <EoL>
<BoL> Parse struct-like format string token into sub-token list . <EoL>
<BoL> Return string made lowercase and with all whitespace removed . <EoL>
<BoL> Divide the format string into tokens and parse them . <EoL>
<BoL> Cleans text and returns sanitized result as unicode <EoL>
<BoL> Linkify specified text <EoL>
<BoL> : arg tree : a treebuilder class controlling the type of tree that will be returned . Built in treebuilders can be accessed through html5lib.treebuilders.getTreeBuilder ( treeType ) <EoL>
<BoL> Parse a HTML document into a well-formed tree <EoL>
<BoL> Parse a HTML fragment into a well-formed tree fragment <EoL>
<BoL> Look for the next sequence of bytes matching a given sequence . If a match is found advance the position to the last byte of the match <EoL>
<BoL> Look for a sequence of bytes at the start of a string . If the bytes are found return True and advance the position to the byte after the match . Otherwise return False and leave the position alone <EoL>
<BoL> Skip past a list of characters <EoL>
<BoL> string - the data to work on for encoding detection <EoL>
<BoL> Return a name , value pair for the next attribute in the stream , if one is found , or None <EoL>
<BoL> Skip over comments <EoL>
<BoL> Initialises the HTMLInputStream . <EoL>
<BoL> Read one character from the stream or queue if available . Return EOF when EOF is reached . <EoL>
<BoL> Returns a string of characters from the stream up to but not including any character in 'characters ' or EOF . 'characters ' must be a container that supports the 'in ' method and iteration over its characters . <EoL>
<BoL> Attempts to detect at BOM at the start of the stream . If an encoding can be determined from the BOM return the name of the encoding otherwise return None <EoL>
<BoL> Report the encoding declared by the meta element <EoL>
<BoL> Produces a file object from source . <EoL>
<BoL> Returns ( line , col ) of the current position in the stream . <EoL>
<BoL> Initialises the HTMLInputStream . <EoL>
<BoL> Produces a file object from source . <EoL>
<BoL> Return the python codec name corresponding to an encoding or None if the string does n't correspond to a valid encoding . <EoL>
<BoL> This is where the magic happens . <EoL>
<BoL> This function returns either U+FFFD or the character based on the decimal or hexadecimal representation . <EoL>
<BoL> This method is a generic handler for emitting the tags . It also sets the state to `` data '' because that 's what 's needed after a token has been emitted . <EoL>
<BoL> This method replaces the need for `` entityInAttributeValueState '' . <EoL>
<BoL> Escape & , < , and > in a string of data . <EoL>
<BoL> Unescape & amp ; , & lt ; , and & gt ; in a string of data . <EoL>
<BoL> Get a TreeBuilder class for various types of trees with built-in support <EoL>
<BoL> Get a TreeWalker class for various types of tree with built-in support <EoL>
<BoL> Parse an HTML document as a string or file-like object into a tree <EoL>
<BoL> Parse an HTML fragment as a string or file-like object into a tree <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Serializes the input token stream using the specified treewalker <EoL>
<BoL> Initialize HTMLSerializer <EoL>
<BoL> Serializes the stream from the treewalker into a string <EoL>
<BoL> Creates a Node <EoL>
<BoL> Insert node as a child of the current node <EoL>
<BoL> Return a shallow copy of the current node i.e . a node with the same name and attributes but with no parent or child nodes <EoL>
<BoL> Return true if the node has children or text , false otherwise <EoL>
<BoL> Insert node as a child of the current node , before refNode in the list of child nodes . Raises ValueError if refNode is not a child of the current node <EoL>
<BoL> Insert data as text in the current node , positioned before the start of node insertBefore or to the end of the node 's text . <EoL>
<BoL> Remove node from the children of the current node <EoL>
<BoL> Move all the children of the current node to newParent . This is needed so that trees that do n't store text as nodes move the text in the correct way <EoL>
<BoL> Create a TreeBuilder <EoL>
<BoL> Switch the function used to insert an element from the normal one to the misnested table one and back again <EoL>
<BoL> Create an element but do n't insert it anywhere <EoL>
<BoL> Check if an element exists between the end of the active formatting elements and the last marker . If it does , return it , else return false <EoL>
<BoL> Return the final tree <EoL>
<BoL> Return the final fragment <EoL>
<BoL> Get the foster parent element , and sibling to insert before ( or None ) when inserting a misnested table node <EoL>
<BoL> Create an element and insert it into the tree <EoL>
<BoL> Insert text data . <EoL>
<BoL> Serialize the subtree of node in the format required by unit tests <EoL>
<BoL> Pretty printer for tree walkers <EoL>
<BoL> : arg tags : list of allowed tags -- everything else is either stripped or escaped ; if None , then this does n't look at tags at all : arg strip : whether to strip disallowed tags ( True ) or escape them ( False ) ; if tags=None , then this does n't have any effect : arg consume_entities : whether to consume entities ( default behavior ) or leave them as is when tokenizing ( BleachHTMLTokenizer-added behavior ) <EoL>
<BoL> Escapes just bare & in HTML attribute values <EoL>
<BoL> Wrap HTMLSerializer.serialize and conver & to & amp ; in attribute values <EoL>
<BoL> Returns the stream history since last ' < ' <EoL>
<BoL> Resets stream history to just ' < ' <EoL>
<BoL> Converts all found entities in the text <EoL>
<BoL> Convert an entity ( minus the & and ; part ) into what it represents <EoL>
<BoL> Returns first entity in stream or None if no entity exists <EoL>
<BoL> Takes a text and generates a list of possible entities <EoL>
<BoL> Given an attrs dict and an is_new bool , runs through callbacks <EoL>
<BoL> Extracts and squashes character sequences in a token stream <EoL>
<BoL> Handle the `` a '' tag <EoL>
<BoL> Handle email addresses in character tokens <EoL>
<BoL> Handle links in character tokens <EoL>
<BoL> Strips non-url bits from the url <EoL>
<BoL> Takes a dict of attributes ( or None ) and returns them alphabetized <EoL>
<BoL> Builds the url regex used by linkifier <EoL>
<BoL> Takes a text ( Python 2 : str/unicode ; Python 3 : unicode ) and converts to unicode <EoL>
<BoL> Convert URL-like strings in an HTML fragment to links <EoL>
<BoL> Handles the case where we 're allowing the tag <EoL>
<BoL> Merge consecutive Characters tokens in a stream <EoL>
<BoL> Handles Characters tokens <EoL>
<BoL> Sanitizes css in style tags^ ( [ -/ : , # % . ' '' \sa-zA-Z0-9 ! ] |\w-\w| ' [ \s\w ] +'\s*| '' [ \s\w ] + '' |\ ( [ \d , % \.\s ] +\ ) ) * $ <EoL>
<BoL> Sanitize a token either by HTML-encoding or dropping . <EoL>
<BoL> Checks a uri value to see if it 's allowed <EoL>
<BoL> Generates attribute filter function for the given attributes value <EoL>
<BoL> Returns appropriate key for sorting attribute names <EoL>
<BoL> Return a new string that is `` text `` formatted with my contents . <EoL>
<BoL> Return a Unicode or whatever you passed in as the first arg ( hopefully a string of some kind ) . <EoL>
<BoL> Instantiate . <EoL>
<BoL> Return a terminal capability , like bold . <EoL>
<BoL> Initialize the terminal . <EoL>
<BoL> Return a new `` FormattingString `` which implicitly receives my notion of `` normal '' . <EoL>
<BoL> Return a tuple of ( terminal height , terminal width ) . <EoL>
<BoL> Return a terminal code for a capname or a sugary name , or an empty Unicode . <EoL>
<BoL> Resolve a color like red or on_bright_green into a callable capability . <EoL>
<BoL> Resolve a sugary or plain capability name , color , or compound formatting function name into a callable capability . <EoL>
<BoL> Return a context manager that enters fullscreen mode while inside it and restores normal mode on leaving . <EoL>
<BoL> Return a context manager that hides the cursor while inside it and makes it visible on leaving . <EoL>
<BoL> Return a context manager for temporarily moving the cursor . <EoL>
<BoL> Return the names of valid color variants , given the base colors . <EoL>
<BoL> Split a possibly compound format string into segments . <EoL>
<BoL> Prune unused sender/receiver bookeeping . Not threadsafe . <EoL>
<BoL> Disconnect a receiver from all senders . <EoL>
<BoL> Disconnect all receivers from a sender . <EoL>
<BoL> Throw away all signal state . Useful for unit tests . <EoL>
<BoL> Connect *receiver* to signal events sent by *sender* . <EoL>
<BoL> Connect the decorated function as a receiver for *sender* . <EoL>
<BoL> Execute a block with the signal temporarily connected to *receiver* . <EoL>
<BoL> Disconnect *receiver* from this signal 's events . <EoL>
<BoL> True if there is probably a receiver for *sender* . <EoL>
<BoL> Iterate all live receivers listening for *sender* . <EoL>
<BoL> Emit this signal on behalf of *sender* , passing on \*\*kwargs . <EoL>
<BoL> An alias for : meth : ` connected_to ` . <EoL>
<BoL> Return the : class : ` NamedSignal ` *name* , creating it if required . <EoL>
<BoL> : param doc : optional . If provided , will be assigned to the signal's __doc__ attribute . <EoL>
<BoL> Return an iterator that yields the weak references to the values . <EoL>
<BoL> Return the : class : ` NamedSignal ` *name* , creating it if required . <EoL>
<BoL> Return a list of weak references to the values . <EoL>
<BoL> Return a strong reference to the bound method . <EoL>
<BoL> Compare with another reference . <EoL>
<BoL> Return a weak-reference-like instance for a bound method.Set self.isDead to True when method or instance is destroyed . <EoL>
<BoL> Create new instance or return current instance . <EoL>
<BoL> Whether we are still a valid reference . <EoL>
<BoL> Give a friendly representation of the object . <EoL>
<BoL> Calculate the reference key for this reference . <EoL>
<BoL> Return a *safe* weak reference to a callable target . <EoL>
<BoL> Construct a new named symbol . <EoL>
<BoL> Return an annotated weak ref , supporting bound instance methods . <EoL>
<BoL> Return an annotated weak ref . <EoL>
<BoL> x.__contains__ ( y ) < == > y in x <EoL>
<BoL> x.__delitem__ ( y ) < == > del x [ y ] <EoL>
<BoL> x.__delslice__ ( i , j ) < == > del x [ i : j ] <EoL>
<BoL> x.__eq__ ( y ) < == > x==y <EoL>
<BoL> x.__ge__ ( y ) < == > x > =y <EoL>
<BoL> x.__getitem__ ( y ) < == > x [ y ] <EoL>
<BoL> x.__gt__ ( y ) < == > x > y <EoL>
<BoL> x.__iter__ ( ) < == > iter ( x ) <EoL>
<BoL> x.__le__ ( y ) < == > x < =y <EoL>
<BoL> x.__len__ ( ) < == > len ( x ) <EoL>
<BoL> x.__lt__ ( y ) < == > x < y <EoL>
<BoL> x.__ne__ ( y ) < == > x ! =y <EoL>
<BoL> x.__repr__ ( ) < == > repr ( x ) <EoL>
<BoL> L.__reversed__ ( ) -- return a reverse iterator over the list <EoL>
<BoL> Locate the point in the list where v would be inserted . <EoL>
<BoL> Same as _bisect_left , but go to the right of equal values <EoL>
<BoL> Add an element . <EoL>
<BoL> L.bisect_right ( v ) - > index <EoL>
<BoL> L.bisect_left ( v ) - > index <EoL>
<BoL> L.count ( value ) - > integer -- return number of occurrences of value <EoL>
<BoL> Remove an element if it is a member . <EoL>
<BoL> L.index ( value ) - > integer -- return first index of value . <EoL>
<BoL> L.pop ( [ index ] ) - > item -- remove and return item at index ( default last ) . <EoL>
<BoL> L.remove ( value ) -- remove first occurrence of value . <EoL>
<BoL> L.update ( iterable ) -- add all elements from iterable into the list <EoL>
<BoL> x.__repr__ ( ) < == > repr ( x ) <EoL>
<BoL> Add an element to the set . <EoL>
<BoL> Remove all elements <EoL>
<BoL> Return a new set with elements in the set that are not in the others . <EoL>
<BoL> Update the set , removing elements found in others . <EoL>
<BoL> Return a new set with elements common to the set and all others . <EoL>
<BoL> Update the set , keeping only elements found in it and all others . <EoL>
<BoL> Test whether every element in the set is in *other* . <EoL>
<BoL> Test whether every element in *other* is in the set . <EoL>
<BoL> Remove an element . If not a member , raise a KeyError . <EoL>
<BoL> Return a new set with elements in either the set or *other* but not both . <EoL>
<BoL> Update the set , keeping only elements found in either set , but not in both . <EoL>
<BoL> Return the union of sets as a new set . <EoL>
<BoL> Update the set , adding elements from all others . <EoL>
<BoL> x.__getitem__ ( y ) < == > x [ y ] <EoL>
<BoL> x.__iter__ ( ) < == > iter ( x ) <EoL>
<BoL> x.__repr__ ( ) < == > repr ( x ) <EoL>
<BoL> L.__reversed__ ( ) -- return a reverse iterator over the list <EoL>
<BoL> x.__repr__ ( ) < == > repr ( x ) <EoL>
<BoL> Add a mapping between a type and an extension . <EoL>
<BoL> Guess the extensions for a file based on its MIME type . <EoL>
<BoL> Guess the extension for a file based on its MIME type . <EoL>
<BoL> Guess the type of a file based on its URL . <EoL>
<BoL> Read a single mime.types-format file , specified by pathname . <EoL>
<BoL> Load the MIME types database from Windows registry . <EoL>
<BoL> Read a single mime.types-format file . <EoL>
<BoL> clib_info ( cname ) <EoL>
<BoL> code_to_name ( code ) <EoL>
<BoL> compressor_list ( ) <EoL>
<BoL> decompress ( bytesobj ) <EoL>
<BoL> decompress_ptr ( bytesobj , address ) <EoL>
<BoL> detect_number_of_cores ( ) <EoL>
<BoL> free_resources ( ) <EoL>
<BoL> get_blocksize ( ) <EoL>
<BoL> get_cbuffer_sizes ( bytesobj ) <EoL>
<BoL> get_clib ( bytesobj ) <EoL>
<BoL> name_to_code ( name ) <EoL>
<BoL> pack_array ( array [ , clevel=9 , shuffle=blosc.SHUFFLE , cname='blosclz ' ] ] ) <EoL>
<BoL> Print all the versions of software that python-blosc relies on . <EoL>
<BoL> set_blocksize ( blocksize ) <EoL>
<BoL> set_nthreads ( nthreads ) <EoL>
<BoL> set_releasegil ( gitstate ) <EoL>
<BoL> unpack_array ( packed_array ) <EoL>
<BoL> Print the Bokeh license to the console . <EoL>
<BoL> Download larger data sets for various Bokeh examples . <EoL>
<BoL> The absolute path of the BokehJS source code in the installed Bokeh source tree . <EoL>
<BoL> Set the default browser that Bokeh should use to show documents with . <EoL>
<BoL> The CSS files in the BokehJS directory . <EoL>
<BoL> Set the version of BokehJS should use for CDN resources when building the docs . <EoL>
<BoL> Set the version to use for building the docs . <EoL>
<BoL> The JS files in the BokehJS directory . <EoL>
<BoL> Set the log level for JavaScript BokehJS code . <EoL>
<BoL> Set whether Bokeh should use minified BokehJS resources . <EoL>
<BoL> Set whether Bokeh should perform validation checks on documents . <EoL>
<BoL> Set whether JSON strings should be pretty-printed . <EoL>
<BoL> Set the log level for python Bokeh code . <EoL>
<BoL> Set ( override ) the type of resources that Bokeh should use when outputting documents . <EoL>
<BoL> Set the root directory for `` relative '' resources . <EoL>
<BoL> Set the secret key . <EoL>
<BoL> Return the secret_key , converted to bytes and cached . <EoL>
<BoL> Set whether the server should only allow sessions signed with our secret key . <EoL>
<BoL> Set whether Bokeh should generate simple numeric model IDs . <EoL>
<BoL> Set whether validation should be performed strictly . <EoL>
<BoL> Set ( override ) the standard reported Bokeh version . <EoL>
<BoL> Get the location of the bokehjs source files . <EoL>
<BoL> Return true if the pathname refers to an existing directory . <EoL>
<BoL> A logging.basicConfig ( ) wrapper that also undoes the default Bokeh-specific configuration . <EoL>
<BoL> Normalize path , eliminating double slashes , etc . <EoL>
<BoL> Return the canonical path of the specified filename , eliminating any symbolic links encountered in the path . <EoL>
<BoL> Get the location of the server subpackage <EoL>
<BoL> Test whether a path exists . Returns False for broken symbolic links <EoL>
<BoL> Expand ~ and ~user constructions . If user or $ HOME is unknown , do nothing . <EoL>
<BoL> Test whether a path is a regular file <EoL>
<BoL> Create a new FunctionBuilder instance based on an existing function . The original function will not be stored or modified . <EoL>
<BoL> Get a dictionary of function arguments with defaults and the respective values . <EoL>
<BoL> Compile and return a new function based on the current values of the FunctionBuilder . <EoL>
<BoL> Remove an argument from this FunctionBuilder 's argument list . The resulting function will have one less argument per call to this function . <EoL>
<BoL> Returns a shallow copy of the function , including code object , globals , closure , etc . <EoL>
<BoL> Return a dictionary of attribute names to values for a given object . Unlike `` obj.__dict__ `` , this function returns all attributes on the object , including ones on parent classes . <EoL>
<BoL> Returns two maps of ( *types* , *funcs* ) from *mod* , optionally ignoring based on the : class : ` bool ` return value of the *ignore* callable . *mod* can be a string name of a module in : data : ` sys.modules ` or the module instance itself . <EoL>
<BoL> Takes a type and returns an iterator over all class variables throughout the type hierarchy ( respecting the MRO ) . <EoL>
<BoL> Class decorator , similar to : func : ` functools.total_ordering ` , except it is used to define ` partial orderings ` _ ( i.e. , it is possible that *x* is neither greater than , equal to , or less than *y* ) . <EoL>
<BoL> Modeled after the built-in : func : ` functools.wraps ` , this function is used to make your decorator 's wrapper functions reflect the wrapped function 's : <EoL>
<BoL> Setup loader paths so that we can load resources . <EoL>
<BoL> Lists the available partitions <EoL>
<BoL> Get a list of available services that can be loaded as resource clients via : py : meth : ` Session.resource ` . <EoL>
<BoL> Get a list of available services that can be loaded as low-level clients via : py : meth : ` Session.client ` . <EoL>
<BoL> Return the : class : ` botocore.credential.Credential ` object associated with this session . <EoL>
<BoL> Get the default session , creating one if needed . <EoL>
<BoL> Create a low-level service client by name using the default session . <EoL>
<BoL> Documents an entire service . <EoL>
<BoL> : type operation_model : dict : param operation_model : The operation model . This comes from the service model , and is the value associated with the operation name in the service model ( i.e `` model [ 'operations ' ] [ op_name ] `` ) . <EoL>
<BoL> Returns the event stream member 's shape if any or None otherwise . <EoL>
<BoL> Returns the streaming member 's shape if any ; or None otherwise . <EoL>
<BoL> Documents a non-data driven method <EoL>
<BoL> Helper method to determine which parameters to ignore for actions <EoL>
<BoL> Returns the module name for a service <EoL>
<BoL> Convert camel case to a `` pythonic '' name . <EoL>
<BoL> Fills out the documentation for a section given a model shape . <EoL>
<BoL> Documents a client and its methods <EoL>
<BoL> Retrieves an objects public methods <EoL>
<BoL> The args and kwargs are the same as the underlying document generation function . These just get proxied to the underlying function . <EoL>
<BoL> Expands tabs to spaces <EoL>
<BoL> Generates the reference documentation for botocore <EoL>
<BoL> Generate the official name of an AWS Service <EoL>
<BoL> Provides a Hierarichial structure to a ReSTDocument <EoL>
<BoL> Adds a new section to the current document structure <EoL>
<BoL> Delete a section <EoL>
<BoL> Flushes a doc structure to a ReSTructed string <EoL>
<BoL> Retrieve a section <EoL>
<BoL> Returns the last content written to the document without removing it from the stack . <EoL>
<BoL> Removes and returns the last content written to the stack . <EoL>
<BoL> Places new content on the stack . <EoL>
<BoL> Write content into the document . <EoL>
<BoL> Write content on a newline . <EoL>
<BoL> Create a resource service client by name using the default session . <EoL>
<BoL> Perform the batch action 's operation on every page of results from the collection . <EoL>
<BoL> : type parent : ServiceResource : param parent : The resource instance to which this action is attached . <EoL>
<BoL> : type parent : ServiceResource : param parent : The resource instance to which this action is attached . <EoL>
<BoL> Perform the action 's request operation after building operation parameters and build any defined resources from the response . <EoL>
<BoL> Perform the wait operation after building operation parameters . <EoL>
<BoL> Handle request parameters that can be filled in from identifiers , resource data members or constants . <EoL>
<BoL> Create a copy of this metadata object . <EoL>
<BoL> Get a resource collection iterator from this manager . <EoL>
<BoL> A generator which yields resource instances after doing the appropriate service operation calls and handling any pagination on your behalf . <EoL>
<BoL> Create a clone of this collection . This is used by the methods below to provide a chainable interface that returns copies rather than the original . This allows things like : <EoL>
<BoL> Get all items from the collection , optionally with a custom page size and item count limit . <EoL>
<BoL> Get items from the collection , passing keyword arguments along as parameters to the underlying service operation , which are typically used to filter the results . <EoL>
<BoL> Return at most this many resources . <EoL>
<BoL> Fetch at most this many resources per service request . <EoL>
<BoL> A generator which yields pages of resource instances after doing the appropriate service operation calls and handling any pagination on your behalf . Non-paginated calls will return a single page of items . <EoL>
<BoL> Given two dict , merge the second dict into the first . <EoL>
<BoL> Returns a list of all the available sub-resources for this Resource . <EoL>
<BoL> Creates a read-only property for identifier attributes . <EoL>
<BoL> Load resource collections from the model . Each collection becomes a : py : class : ` ~boto3.resources.collection.CollectionManager ` instance on the resource instance , which allows you to iterate and filter through the collection 's items . <EoL>
<BoL> Populate required identifiers . These are arguments without which the resource can not be used . Identifiers become arguments for operations on the resource . <EoL>
<BoL> Loads a resource from a model , creating a new : py : class : ` ~boto3.resources.base.ServiceResource ` subclass with the correct properties and methods , named based on the service and resource name , e.g . EC2.Instance . <EoL>
<BoL> Get a `` has `` relationship definition from a model , where the service resource model is treated special in that it contains a relationship to every resource defined for the service . This allows things like `` s3.Object ( 'bucket-name ' , 'key ' ) `` to work even though the JSON does n't define it explicitly . <EoL>
<BoL> Get a possibly renamed value given a category and name . This uses the rename map set up in `` load_rename_map `` , so that method must be called once first . <EoL>
<BoL> Get a list of sub-resources or references . <EoL>
<BoL> Get a dictionary of attribute names to original name and shape models that represent the attributes of this resource . Looks like the following : <EoL>
<BoL> Load a name translation map given a shape . <EoL>
<BoL> Builds a mapping of identifier names to values based on the identifier source location , type , and target . Identifier values may be scalars or lists depending on the source type and location . <EoL>
<BoL> This method provides a basic reverse JMESPath implementation that lets you go from a JMESPath-like string to a possibly deeply nested object . The `` params `` are mutated in-place , so subsequent calls can modify the same element by its index . <EoL>
<BoL> Get a data member from a parent using a JMESPath search query , loading the parent if required . If the parent can not be loaded and no data is present then an exception is raised . <EoL>
<BoL> Return True if all elements of the iterable are not None ( or if the iterable is empty ) . This is like the built-in `` all `` , except checks against None , so 0 and False are allowable values . <EoL>
<BoL> Creates an appropriate empty response for the type that is expected , based on the service model 's shape type . <EoL>
<BoL> Merges the config object with another config object <EoL>
<BoL> Add a stream handler for the given name and level to the logging module . By default , this logs all boto3 messages to `` stdout `` . <EoL>
<BoL> Set up a default session , passing through any parameters to the session constructor . There is no need to call this unless you wish to pass custom parameters , because a default session will be created for you . <EoL>
<BoL> Import module given a name . <EoL>
<BoL> Allow setting the signature version via the choose-signer event . A value of ` botocore.UNSIGNED ` means no signing will be performed . <EoL>
<BoL> Return the entire formatted message as a bytes object . <EoL>
<BoL> Delete all occurrences of a header , if present . <EoL>
<BoL> Get a header value . <EoL>
<BoL> Return the total number of headers , including duplicates . <EoL>
<BoL> Set the value of a header . <EoL>
<BoL> Return the entire formatted message as a string . <EoL>
<BoL> Extended header setting . <EoL>
<BoL> Return the entire formatted message as a bytes object . <EoL>
<BoL> Return the entire formatted message as a string . <EoL>
<BoL> Add the given payload to the current payload . <EoL>
<BoL> Remove the given parameter completely from the Content-Type header . <EoL>
<BoL> Get a header value . <EoL>
<BoL> Return a list of all the values for the named field . <EoL>
<BoL> Return the boundary associated with the payload if present . <EoL>
<BoL> Return the Charset instance associated with the message 's payload . <EoL>
<BoL> Return a list containing the charset ( s ) used in this message . <EoL>
<BoL> Return the charset parameter of the Content-Type header . <EoL>
<BoL> Return the message 's content-disposition if it exists , or None . <EoL>
<BoL> Return the message 's main content type . <EoL>
<BoL> Returns the message 's sub-content type . <EoL>
<BoL> Return the message 's content type . <EoL>
<BoL> Return the ` default ' content type . <EoL>
<BoL> Return the filename associated with the payload if present . <EoL>
<BoL> Return the message 's Content-Type parameters , as a list . <EoL>
<BoL> Return a reference to the payload . <EoL>
<BoL> Find all header lines matching a given header name . <EoL>
<BoL> Return True if the message consists of multiple parts . <EoL>
<BoL> Get all the message 's header fields and values . <EoL>
<BoL> Return a list of all the message 's header field names . <EoL>
<BoL> Return the ( name , value ) header pairs without modification . <EoL>
<BoL> Replace a header . <EoL>
<BoL> Set the boundary parameter in Content-Type to 'boundary ' . <EoL>
<BoL> Set the charset of the payload to a given character set . <EoL>
<BoL> Set the ` default ' content type . <EoL>
<BoL> Set the payload to the given value . <EoL>
<BoL> Store name and value in the model without modification . <EoL>
<BoL> Set the main type and subtype for the Content-Type header . <EoL>
<BoL> Return a list of all the message 's header values . <EoL>
<BoL> Walk over the message tree , yielding each subpart . <EoL>
<BoL> TODO : Do we need this ? <EoL>
<BoL> Return the headers that need to be included in the StringToSign in their canonical form by converting all header keys to lower case , sorting them in alphabetical order and then joining them into a string , separated by newlines . <EoL>
<BoL> Select the headers from the request that need to be included in the StringToSign . <EoL>
<BoL> Return the canonical StringToSign as well as a dict containing the original version of all headers that were included in the StringToSign . <EoL>
<BoL> Encode a bytestring into a bytes object containing multiple lines of base-64 data . <EoL>
<BoL> Returns a date string as specified by RFC 2822 , e.g . : <EoL>
<BoL> Urlencode a dict or list into a string . <EoL>
<BoL> Get the content-length based on the body . <EoL>
<BoL> Test whether a file-like object is a text or a binary stream . <EoL>
<BoL> Establish a socket connection and set nodelay settings on it . <EoL>
<BoL> Add a line of output to the current request buffer . <EoL>
<BoL> Indicate that the last header line has been sent to the server . <EoL>
<BoL> Get the response from the server . <EoL>
<BoL> Send a request header line to the server . <EoL>
<BoL> Alternative to the common request method , which sends the body with chunked encoding and not as one block <EoL>
<BoL> Set up host and port for HTTP CONNECT tunnelling . <EoL>
<BoL> Get a connection . Will return a pooled connection if one is available . <EoL>
<BoL> Helper that always returns a : class : ` urllib3.util.Timeout ` <EoL>
<BoL> Return a fresh : class : ` HTTPConnection ` . <EoL>
<BoL> Put a connection back into the pool . <EoL>
<BoL> Is the error actually a timeout ? Will raise a ReadTimeout or pass <EoL>
<BoL> Called right before a request is made , after the socket is created . <EoL>
<BoL> Close all pooled connections and disable the pool . <EoL>
<BoL> Check if the given `` url `` is a member of the same host as this connection pool . <EoL>
<BoL> Make a request using : meth : ` urlopen ` with the appropriate encoding of `` fields `` based on the `` method `` used . <EoL>
<BoL> Read the number of bytes requested , compensating for partial reads . <EoL>
<BoL> Same as _safe_read , but for reading into a buffer . <EoL>
<BoL> Return the HTTP status code that was sent with the response , or None if the URL is not an HTTP URL . <EoL>
<BoL> Returns the value of the header matching *name* . <EoL>
<BoL> Return list of ( header , value ) tuples . <EoL>
<BoL> Return the real URL of the page . <EoL>
<BoL> Returns an instance of the class mimetools.Message containing meta-information associated with the URL . <EoL>
<BoL> True if the connection is closed . <EoL>
<BoL> Read with at most one underlying system call . If at least one byte is buffered , return that instead . <EoL>
<BoL> Always returns True <EoL>
<BoL> Read up to len ( b ) bytes into bytearray b and return the number of bytes read . <EoL>
<BoL> Return a fresh : class : ` httplib.HTTPSConnection ` . <EoL>
<BoL> Prepare the `` connection `` for : meth : ` urllib3.util.ssl_wrap_socket ` and establish the tunnel if proxy is used . <EoL>
<BoL> Establish tunnel connection early , because otherwise httplib would improperly set Host : header to proxy 's IP : port . <EoL>
<BoL> Called right before a request is made , after the socket is created . <EoL>
<BoL> Resets the streaming body to it 's initial position . <EoL>
<BoL> Constructs a : class : ` AWSPreparedRequest < AWSPreparedRequest > ` . <EoL>
<BoL> Prepares the given HTTP body data . <EoL>
<BoL> Send the currently buffered request and clear the buffer . <EoL>
<BoL> Close the connection to the HTTP server . <EoL>
<BoL> Send ` data ' to the server . `` data `` can be a string object , a bytes object , an array object , a file-like object that supports a .read ( ) method , or an iterable object . <EoL>
<BoL> This method takes a request dict and creates an AWSRequest object from it . <EoL>
<BoL> Check if an operation can be paginated . <EoL>
<BoL> Create a paginator for an operation . <EoL>
<BoL> Returns an object that can wait for some condition . <EoL>
<BoL> Returns the 's3 ' ( sigv2 ) signer if presigning an s3 request . This is intended to be used to set the default signature version for the signer to sigv2 . <EoL>
<BoL> Create paginator object for an operation . <EoL>
<BoL> There are multiple potential sources for the new region to redirect to , but they are n't all universally available for use . This will try to find region from response elements , but will fall back to calling HEAD on the bucket if all else fails . <EoL>
<BoL> This handler retrieves a given bucket 's signing context from the cache and adds it into the request context . <EoL>
<BoL> An S3 request sent to the wrong region will return an error that contains the endpoint the request should be sent to . This handler will add the redirect information to the signing context and then redirect the request . <EoL>
<BoL> : type service_description : dict : param service_description : The service description model . This value is obtained from a botocore.loader.Loader , or from directly loading the file yourself : : <EoL>
<BoL> Find first non None response in a list of tuples . <EoL>
<BoL> This handler looks at S3 requests just before they are signed . <EoL>
<BoL> Switches the current s3 endpoint with an S3 Accelerate endpoint <EoL>
<BoL> This is a handler to force virtual host style s3 addressing no matter the signature version ( which is taken in consideration for the default case ) . If the bucket is not DNS compatible an InvalidDNSName is thrown . <EoL>
<BoL> Splits up a windows command as the built-in command parser would . <EoL>
<BoL> There is a bug in Python versions < 2.6.5 that prevents you from passing unicode keyword args ( # 4978 ) . <EoL>
<BoL> Attempts to get an md5 hashing object . <EoL>
<BoL> Set the timeout of the socket from an HTTPResponse . <EoL>
<BoL> Returns the total seconds in a `` datetime.timedelta `` . <EoL>
<BoL> Like unquote ( ) , but also replace plus signs by spaces , as required for unquoting HTML form values . <EoL>
<BoL> Convert the parsed INI config into a profile map . <EoL>
<BoL> Parse a INI config with profiles . <EoL>
<BoL> Load and combine multiple INI configs with profiles . <EoL>
<BoL> Returns the parsed INI config contents . <EoL>
<BoL> Provide a config value . <EoL>
<BoL> Initalize a ChainProvider . <EoL>
<BoL> Provide the value from the first provider to return non-None . <EoL>
<BoL> Initialize a ConfigChainFactory . <EoL>
<BoL> Initialize a ConfigValueStore . <EoL>
<BoL> Remove an override config variable from the session . <EoL>
<BoL> Retrieve the value associeated with the specified logical_name from the corresponding provider . If no value is found None will be returned . <EoL>
<BoL> Set the provider for a config value . <EoL>
<BoL> Set a configuration variable to a specific value . <EoL>
<BoL> Provide the constant value given during initialization . <EoL>
<BoL> Initialize with the keys in the dictionary to check . <EoL>
<BoL> Provide a config value from a source dictionary . <EoL>
<BoL> Initialize InstanceVarProvider . <EoL>
<BoL> Provide a config value from the session instance vars . <EoL>
<BoL> Initialize ScopedConfigProvider . <EoL>
<BoL> Provide a value from a config file property . <EoL>
<BoL> Get the arguments for assume role based on current configuration . <EoL>
<BoL> Create a predictable cache key for the current configuration . <EoL>
<BoL> Create an STS client using the source credentials . <EoL>
<BoL> Get up-to-date credentials . <EoL>
<BoL> Get credentials by calling assume role . <EoL>
<BoL> Check if credentials are expired . <EoL>
<BoL> Retrieves and validates the role configuration for the profile . <EoL>
<BoL> Look for credentials in boto config file . <EoL>
<BoL> Return a credential provider by its canonical name . <EoL>
<BoL> Return a credential provider by its canonical name . <EoL>
<BoL> Return a credential provider by its METHOD name . <EoL>
<BoL> Validates a given source name . <EoL>
<BoL> Loads source credentials based on the provided configuration . <EoL>
<BoL> : param config_filename : The session configuration scoped to the current profile . <EoL>
<BoL> If there is are credentials in the configuration associated with the session , use those . <EoL>
<BoL> Retrieve JSON metadata from container metadata . <EoL>
<BoL> Retrieve JSON metadata from ECS metadata . <EoL>
<BoL> Loads the credentials from their source & sets them on the object . <EoL>
<BoL> : param providers : A list of `` CredentialProvider `` instances . <EoL>
<BoL> Return a credential provider by name . <EoL>
<BoL> Inserts a new type of `` Credentials `` instance into the chain that will be tried after an existing one . <EoL>
<BoL> Inserts a new instance of `` CredentialProvider `` into the chain that will be tried before an existing one . <EoL>
<BoL> Goes through the credentials chain , returning the first `` Credentials `` that could be loaded . <EoL>
<BoL> Removes a given `` Credentials `` instance from the chain . <EoL>
<BoL> Return immutable credentials . <EoL>
<BoL> : param environ : The environment variables ( defaults to `` os.environ `` if no value is provided ) . <EoL>
<BoL> Search for credentials in explicit environment variables . <EoL>
<BoL> Make a get request to the Instance Metadata Service . <EoL>
<BoL> Retrieve value from a cache key . <EoL>
<BoL> Search for a credential file used by original EC2 CLI tools . <EoL>
<BoL> Check if a refresh is needed . <EoL>
<BoL> Create a default credential resolver . <EoL>
<BoL> Parse a string in one of the supported formats , using the `` parserinfo `` parameters . <EoL>
<BoL> Documents an entire service . <EoL>
<BoL> Traverses the tree , stripping out whitespace until text data is found : param node : The node to strip : return : True if non-whitespace data was found , False otherwise <EoL>
<BoL> Returns the current content of the document as a string . <EoL>
<BoL> Literal code blocks are introduced by ending a paragraph with the special marker : : . The literal block must be indented ( and , like all paragraphs , separated from the surrounding ones by blank lines ) . <EoL>
<BoL> Get the Python default value for a given model type . <EoL>
<BoL> Generates the reference documentation for botocore <EoL>
<BoL> Documents the various paginators for a service <EoL>
<BoL> Get the Python type name for a given model type . <EoL>
<BoL> Documents the various waiters for a service . <EoL>
<BoL> Determines if the provided shape is the special header type jsonvalue . <EoL>
<BoL> : param section : The section to add the docs to . <EoL>
<BoL> Parse a timestamp into a datetime object . <EoL>
<BoL> Documents auto populated parameters <EoL>
<BoL> : type service_name : str : param service_name : Name of the service to modify . <EoL>
<BoL> Return an iterator to yield 1k chunks from the raw stream . <EoL>
<BoL> Return the next 1k chunk from the raw stream . <EoL>
<BoL> Close the underlying http response stream . <EoL>
<BoL> Return an iterator to yield chunks of chunk_size bytes from the raw stream . <EoL>
<BoL> Return an iterator to yield lines from the raw stream . <EoL>
<BoL> Read at most amt bytes from the stream . <EoL>
<BoL> Set the timeout seconds on the socket . <EoL>
<BoL> Convert an HTTP response object to a request dict . <EoL>
<BoL> Verify the endpoint_url is valid . <EoL>
<BoL> Base class for exceptions object on a client <EoL>
<BoL> Retrieves the error class based on the error code <EoL>
<BoL> Creates a ClientExceptions object for the particular service client <EoL>
<BoL> Parse a variable length byte array from the bytes . <EoL>
<BoL> This method consumes none of the provided bytes and returns False . <EoL>
<BoL> Parse a signed 16-bit integer from the bytes . <EoL>
<BoL> Parse a signed 32-bit integer from the bytes . <EoL>
<BoL> Parse a signed 64-bit integer from the bytes . <EoL>
<BoL> Parse the prelude for an event stream message from the bytes . <EoL>
<BoL> This method consumes none of the provided bytes and returns True . <EoL>
<BoL> Parse an unsigned 32-bit integer from the bytes . <EoL>
<BoL> Parse an unsigned 8-bit integer from the bytes . <EoL>
<BoL> Parse a variable length utf-8 string from the bytes . <EoL>
<BoL> Parse a 16-byte uuid from the bytes . <EoL>
<BoL> Closes the underlying streaming body . <EoL>
<BoL> Add data to the buffer . <EoL>
<BoL> Provides the next available message parsed from the stream <EoL>
<BoL> Parses the event stream headers from an event stream message . <EoL>
<BoL> Aliases a non-extant method to an existing method . <EoL>
<BoL> Hoist a header to the hostname . <EoL>
<BoL> Add glacier checksums to the http request . <EoL>
<BoL> Only add a Content-MD5 if the system supports it . <EoL>
<BoL> S3 server-side encryption requires the encryption key to be sent to the server base64 encoded , as well as a base64-encoded MD5 hash of the encryption key . This handler does both if the MD5 has not been set by the caller specifically if the parameter is for the copy-source sse-c key . <EoL>
<BoL> This handler disables request signing by setting the signer name to a special sentinel value . <EoL>
<BoL> This is a required field . <EoL>
<BoL> Check for and split apart Route53 resource IDs , setting only the last piece . <EoL>
<BoL> Convert CopySource param for CopyObject/UploadPartCopy . <EoL>
<BoL> Translate the form used for event emitters . <EoL>
<BoL> Urlencodes a string . <EoL>
<BoL> Choose the operation-specific signer . <EoL>
<BoL> S3 server-side encryption requires the encryption key to be sent to the server base64 encoded , as well as a base64-encoded MD5 hash of the encryption key . This handler does both if the MD5 has not been set by the caller . <EoL>
<BoL> Switches the host using a parameter value from a JSON request body <EoL>
<BoL> Verify S3 Metadata only contains ascii characters . <EoL>
<BoL> Verifies a callable accepts kwargs <EoL>
<BoL> Call all handlers subscribed to an event . <EoL>
<BoL> Emit an event with optional keyword arguments . <EoL>
<BoL> Emit an event by name with arguments passed as keyword args . <EoL>
<BoL> Emit an event by name with arguments passed as keyword args , until the first non- `` None `` response is received . This method prevents subsequent handlers from being invoked . <EoL>
<BoL> Add an item to a key . <EoL>
<BoL> Collect all items that are prefixes of key . <EoL>
<BoL> Remove an item associated with a key . <EoL>
<BoL> Merge a dictionary of override values for self.connection_pool_kw . <EoL>
<BoL> Create a new : class : ` ConnectionPool ` based on host , port , scheme , and any additional pool keyword arguments . <EoL>
<BoL> Empty our store of pools and direct them all to close . <EoL>
<BoL> Get a : class : ` ConnectionPool ` based on the request context . <EoL>
<BoL> Get a : class : ` ConnectionPool ` based on the host , port , and scheme . <EoL>
<BoL> Get a : class : ` ConnectionPool ` based on the provided pool key . <EoL>
<BoL> Similar to : func : ` urllib3.connectionpool.connection_from_url ` . <EoL>
<BoL> Same as : meth : ` urllib3.connectionpool.HTTPConnectionPool.urlopen ` with custom cross-host redirect logic and only sends the request-uri portion of the `` url `` . <EoL>
<BoL> Retrirves the corresponding proxy headers for a given proxy url . <EoL>
<BoL> Retrirves the corresponding proxy url for a given url . <EoL>
<BoL> Sets headers needed by proxies : specifically , the Accept and Host headers . Only sets headers not provided by the user . <EoL>
<BoL> Check that a timeout attribute is valid . <EoL>
<BoL> Create a copy of the timeout object <EoL>
<BoL> Create a new Timeout from a legacy timeout value . <EoL>
<BoL> Gets the time elapsed since the call to : meth : ` start_connect ` . <EoL>
<BoL> Start the timeout clock , used during a connect ( ) attempt <EoL>
<BoL> Process a single extras model into a service model . <EoL>
<BoL> Processes data from a list of loaded extras files into a model <EoL>
<BoL> Checks if the file exists . <EoL>
<BoL> Attempt to load the file path . <EoL>
<BoL> Creates an iterator over all the extras data . <EoL>
<BoL> Create a Loader class . <EoL>
<BoL> Deeply two dictionaries , overriding existing keys in the base . <EoL>
<BoL> Cache the result of a method on a per instance basis . <EoL>
<BoL> Build the model based on the provided members . <EoL>
<BoL> : type members : dict : param members : The denormalized members . <EoL>
<BoL> : type shape_name : string : param shape_name : The name of the shape . <EoL>
<BoL> Generate a unique shape name . <EoL>
<BoL> Method decorator for caching method calls to a single instance . <EoL>
<BoL> Instantiates APICallAttemptEvent associated to the APICallEvent <EoL>
<BoL> Base monitor event <EoL>
<BoL> Serializes monitor events to CSM ( Client Side Monitoring ) format <EoL>
<BoL> Serializes a monitor event to the CSM format <EoL>
<BoL> Abstraction for monitoring clients API calls <EoL>
<BoL> Captures an incoming event from the event emitter <EoL>
<BoL> Register an event emitter to the monito <EoL>
<BoL> Adapts event emitter events to produce monitor events <EoL>
<BoL> Feed an event emitter event to generate a monitor event <EoL>
<BoL> Publishes monitor events to a socket <EoL>
<BoL> Publishes a specified monitor event <EoL>
<BoL> This attempts to convert a deprecated starting token into the new style . <EoL>
<BoL> This handles parsing of old style starting tokens , and attempts to coerce them into the new style . <EoL>
<BoL> Applies a JMESPath expression to a paginator <EoL>
<BoL> Find each encoded value and decode it . <EoL>
<BoL> Return the nested data at the given path . <EoL>
<BoL> Set the value of a key in the given data . <EoL>
<BoL> Decodes an opaque string to a dictionary . <EoL>
<BoL> Encode bytes in given data , keeping track of the path traversed . <EoL>
<BoL> Base64 encode a byte string . <EoL>
<BoL> Encode any bytes in a dict , noting the index of what is encoded . <EoL>
<BoL> Encode any bytes in a list , noting the index of what is encoded . <EoL>
<BoL> Encodes a dictionary to an opaque string . <EoL>
<BoL> Parse the HTTP response given a shape . <EoL>
<BoL> Set default arguments when a parser instance is created . <EoL>
<BoL> Copies the given dictionary ensuring all keys are lowercase strings . <EoL>
<BoL> Resolves an endpoint for a service and region combination . <EoL>
<BoL> Lists the partitions available to the endpoint resolver . <EoL>
<BoL> : param endpoint_data : A dict of partition data . <EoL>
<BoL> Determine if retry criteria matches . <EoL>
<BoL> Handler for a retry . <EoL>
<BoL> Create an exponential delay function based on the attempts . <EoL>
<BoL> Calculate time to sleep based on exponential function . <EoL>
<BoL> Serialize parameters into an HTTP request . <EoL>
<BoL> Converted the passed in value to a datetime object with tzinfo . <EoL>
<BoL> Lists the available partitions found on disk <EoL>
<BoL> Return a list of names of available services . <EoL>
<BoL> Return the : class : ` botocore.credential.Credential ` object associated with this session . <EoL>
<BoL> Retrieve the data associated with ` data_path ` . <EoL>
<BoL> Retrieves the default config for creating clients <EoL>
<BoL> Returns the config values from the config file scoped to the current profile . <EoL>
<BoL> Retrieve the fully merged data associated with a service . <EoL>
<BoL> Get the service model object . <EoL>
<BoL> Set a configuration variable to a specific value . <EoL>
<BoL> Manually create credentials for this session . If you would prefer to use botocore without a config file , environment variables , or IAM roles , you can pass explicit credentials into this method to establish credentials for this session . <EoL>
<BoL> Convenience function to quickly configure full debug output to go to the console . <EoL>
<BoL> Sets the default config for creating clients <EoL>
<BoL> Convenience function to quickly configure any level of logging to a file . <EoL>
<BoL> Return a string suitable for use as a User-Agent header . The string will be of the form : <EoL>
<BoL> Return a new session object . <EoL>
<BoL> Create a CloudFrontSigner . <EoL>
<BoL> Creates a signed CloudFront URL based on given parameters . <EoL>
<BoL> Calculate the timestamp based on the given datetime instance . <EoL>
<BoL> Generates an auth token used to connect to a db with IAM credentials . <EoL>
<BoL> Recursively replace $ ref keys . <EoL>
<BoL> Generate a sample input . <EoL>
<BoL> Calculate a sha256 checksum . <EoL>
<BoL> Calculate a tree hash checksum . <EoL>
<BoL> Check to see if the `` bucket_name `` complies with the restricted DNS naming conventions necessary to allow access via virtual-hosting style . <EoL>
<BoL> Ensures a boolean value if a string or boolean is provided <EoL>
<BoL> Returns encodings from given HTTP Header Dict . <EoL>
<BoL> Return True , if host should be bypassed . <EoL>
<BoL> Returns whether we should bypass proxies or not . <EoL>
<BoL> Validate parameters against a shape model . <EoL>
<BoL> Validates input parameters against a schema . <EoL>
<BoL> Initialize RequestException with ` request ` and ` response ` objects . <EoL>
<BoL> Build the body for a multipart/form-data request . <EoL>
<BoL> Encode parameters in a piece of data . <EoL>
<BoL> Deregister a previously registered hook . Returns True if the hook existed , False if not . <EoL>
<BoL> Prepares the given HTTP auth data . <EoL>
<BoL> Prepares the given HTTP body data . <EoL>
<BoL> Prepares the given HTTP cookie data . <EoL>
<BoL> Prepares the given HTTP headers . <EoL>
<BoL> Prepares the given hooks . <EoL>
<BoL> Prepares the given HTTP method . <EoL>
<BoL> Prepares the given HTTP URL . <EoL>
<BoL> Properly register a hook . <EoL>
<BoL> Constructs a : class : ` PreparedRequest < PreparedRequest > ` for transmission and returns it . <EoL>
<BoL> Returns true if : attr : ` status_code ` is 'OK ' . <EoL>
<BoL> Allows you to use a response as an iterator . <EoL>
<BoL> Returns true if : attr : ` status_code ` is 'OK ' . <EoL>
<BoL> Releases the connection back to the pool . Once this method has been called the underlying `` raw `` object must not be accessed again . <EoL>
<BoL> Iterates over the response data . <EoL>
<BoL> Iterates over the response data , one line at a time . When stream=True is set on the request , this avoids reading the content at once into memory for large responses . <EoL>
<BoL> Returns the json-encoded content of a response , if any . <EoL>
<BoL> Raises stored : class : ` HTTPError ` , if one occurred . <EoL>
<BoL> Like iteritems ( ) , but with all lowercase keys . <EoL>
<BoL> Add any headers needed by the connection . As of v2.0 this does nothing by default , but is left for overriding by users that subclass the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` . <EoL>
<BoL> Builds a : class : ` Response < requests.Response > ` object from a urllib3 response . This should not be called from user code , and is only exposed for use when subclassing the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` <EoL>
<BoL> Verify a SSL certificate . This method should not be called from user code , and is only exposed for use when subclassing the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` . <EoL>
<BoL> Disposes of any internal state . <EoL>
<BoL> Returns a urllib3 connection for the given URL . This should not be called from user code , and is only exposed for use when subclassing the : class : ` HTTPAdapter < requests.adapters.HTTPAdapter > ` . <EoL>
<BoL> Initializes a urllib3 PoolManager . <EoL>
<BoL> Returns a dictionary of the headers to add to any request sent through a proxy . This works with urllib3 magic to ensure that they are correctly sent to the proxy , rather than in a tunnelled request if CONNECT is being used . <EoL>
<BoL> Return urllib3 ProxyManager for the given proxy . <EoL>
<BoL> Obtain the url to use when making the final request . <EoL>
<BoL> Sends PreparedRequest object . Returns Response object . <EoL>
<BoL> Errors when we 're fairly sure that the server did not receive the request , so it should be safe to retry . <EoL>
<BoL> Errors that occur after the request has been started , so we should assume that the server began processing it . <EoL>
<BoL> Backwards-compatibility for the old retries format . <EoL>
<BoL> Formula for computing the current backoff <EoL>
<BoL> Return a new Retry object with incremented retry counters . <EoL>
<BoL> Are we out of retries ? <EoL>
<BoL> Is this method/status code retryable ? ( Based on method/codes whitelists ) <EoL>
<BoL> Sleep between retry attempts using an exponential backoff . <EoL>
<BoL> Returns a Basic Auth string . <EoL>
<BoL> Extract the cookies from the response into a CookieJar . <EoL>
<BoL> Given a url with authentication components , extract them into a tuple of username , password . <EoL>
<BoL> Returns encodings from given HTTP Header Dict . <EoL>
<BoL> Given a URL that may or may not have a scheme , prepend the given scheme . Does not replace a present scheme with the one provided as an argument . <EoL>
<BoL> Given a url remove the fragment and the authentication part <EoL>
<BoL> Sends a DELETE request . <EoL>
<BoL> Sends a GET request . <EoL>
<BoL> Sends a HEAD request . <EoL>
<BoL> Sends a OPTIONS request . <EoL>
<BoL> Sends a PATCH request . <EoL>
<BoL> Sends a POST request . <EoL>
<BoL> Sends a PUT request . <EoL>
<BoL> Constructs and sends a : class : ` Request < Request > ` . <EoL>
<BoL> Takes the given response and tries digest-auth , if needed . <EoL>
<BoL> Reset num_401_calls counter on redirects . <EoL>
<BoL> Parse lists of key , value pairs as described by RFC 2068 Section 2 and convert them into a python dict : <EoL>
<BoL> Given a string object , regardless of type , returns a representation of that string in the native string type , encoding and decoding where necessary . This assumes ASCII unless told otherwise . <EoL>
<BoL> Parse lists as described by RFC 2068 Section 2 . <EoL>
<BoL> Like quote ( ) , but also replace ' ' with '+ ' , as required for quoting HTML form values . <EoL>
<BoL> Removes any existing fragment from URL . <EoL>
<BoL> cookielib has no legitimate use for this method ; add it back if you find one . <EoL>
<BoL> Make a MockResponse for ` cookielib ` to read . <EoL>
<BoL> Deletes a cookie given a name . Wraps `` cookielib.CookieJar `` 's `` remove_cookie_by_name ( ) `` . <EoL>
<BoL> Dict-like __getitem__ ( ) for compatibility with client code . <EoL>
<BoL> Unlike a normal CookieJar , this class is pickleable . <EoL>
<BoL> Return number of contained cookies . <EoL>
<BoL> Dict-like __setitem__ for compatibility with client code . <EoL>
<BoL> Unlike a normal CookieJar , this class is pickleable . <EoL>
<BoL> Return a list of cookie-attributes to be returned to server . <EoL>
<BoL> Return a list of cookies to be returned to server . <EoL>
<BoL> Requests uses this method internally to get cookie values . <EoL>
<BoL> Both `` __get_item__ `` and `` get `` call this function : it 's never used elsewhere in Requests . <EoL>
<BoL> Return list of tuples containing normalised cookie information . <EoL>
<BoL> Add correct Cookie : header to request ( urllib.request.Request object ) . <EoL>
<BoL> Clear some cookies . <EoL>
<BoL> Discard all expired cookies . <EoL>
<BoL> Discard all session cookies . <EoL>
<BoL> Return a copy of this RequestsCookieJar . <EoL>
<BoL> Extract cookies from response , where allowable given the request . <EoL>
<BoL> Dict-like get ( ) that also supports optional domain and path args in order to resolve naming collisions from using one cookie jar over multiple domains . <EoL>
<BoL> Takes as an argument an optional domain and path and returns a plain old Python dict of name-value pairs of cookies that meet the requirements . <EoL>
<BoL> Dict-like items ( ) that returns a list of name-value tuples from the jar . <EoL>
<BoL> Dict-like iteritems ( ) that returns an iterator of name-value tuples from the jar . See iterkeys ( ) and itervalues ( ) . <EoL>
<BoL> Dict-like iterkeys ( ) that returns an iterator of names of cookies from the jar . See itervalues ( ) and iteritems ( ) . <EoL>
<BoL> Dict-like itervalues ( ) that returns an iterator of values of cookies from the jar . See iterkeys ( ) and iteritems ( ) . <EoL>
<BoL> Dict-like keys ( ) that returns a list of names of cookies from the jar . See values ( ) and items ( ) . <EoL>
<BoL> Utility method to list all the domains in the jar . <EoL>
<BoL> Utility method to list all the paths in the jar . <EoL>
<BoL> Return sequence of Cookie objects extracted from response object . <EoL>
<BoL> Returns True if there are multiple domains in the jar . Returns False otherwise . <EoL>
<BoL> Dict-like set ( ) that also supports optional domain and path args in order to resolve naming collisions from using one cookie jar over multiple domains . <EoL>
<BoL> Set a cookie if policy says it 's OK to do so . <EoL>
<BoL> Updates this jar with cookies from another CookieJar or dict-like <EoL>
<BoL> Dict-like values ( ) that returns a list of values of cookies from the jar . See keys ( ) and items ( ) . <EoL>
<BoL> Returns a CookieJar from a key/value dictionary . <EoL>
<BoL> Make a cookie from underspecified parameters . <EoL>
<BoL> Produce an appropriate Cookie header string to be sent with ` request ` , or None . <EoL>
<BoL> Add cookies to cookiejar and returns a merged CookieJar . <EoL>
<BoL> Convert a Morsel object into a Cookie containing the one k/v pair . <EoL>
<BoL> Unsets a cookie by name , by default over all domains and paths . <EoL>
<BoL> Dispatches a hook dictionary on a given piece of data . <EoL>
<BoL> Overridable helper function to format a single header parameter . <EoL>
<BoL> Helper function to format and quote a single header . <EoL>
<BoL> A : class : ` ~urllib3.fields.RequestField ` factory from old-style tuple parameters . <EoL>
<BoL> Renders the headers for this request field . <EoL>
<BoL> Encode a dictionary of `` fields `` using the multipart/form-data MIME format . <EoL>
<BoL> Tries to guess the filename of the given object . <EoL>
<BoL> Iterate over slices of a string . <EoL>
<BoL> Return a dict of parsed link headers proxies . <EoL>
<BoL> Given a url , return a parsed : class : ` .Url ` namedtuple . <EoL>
<BoL> Re-quote the given URI . <EoL>
<BoL> Stream decodes a iterator . <EoL>
<BoL> Take an object and test to see if it can be represented as a dictionary . If it can be , return a list of tuples , e.g. , <EoL>
<BoL> Adds a ( name , value ) pair , does n't overwrite the value if it already exists . <EoL>
<BoL> Generic import function for any type of header-like object . Adapted version of MutableMapping.update in order to insert items with self.add instead of self.__setitem__ <EoL>
<BoL> Read headers from a Python 2 httplib message object . <EoL>
<BoL> Returns a list of all the values for the named field . Returns an empty list if the key does n't exist . <EoL>
<BoL> Iterate over all header lines , including duplicate ones . <EoL>
<BoL> Iterate over all headers , merging duplicate ones together . <EoL>
<BoL> D.pop ( k [ , d ] ) - > v , remove specified key and return the corresponding value . If key is not found , d is returned if given , otherwise KeyError is raised . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Helper for quickly adding a StreamHandler to the logger . Useful for debugging . <EoL>
<BoL> Establish a socket connection and set nodelay settings on it . <EoL>
<BoL> Checks if given fingerprint matches the supplied certificate . <EoL>
<BoL> Resolves the argument to a numeric constant , which can be passed to the wrap_socket function/method from the ssl module . <EoL>
<BoL> like resolve_cert_reqs <EoL>
<BoL> Given a url , return an : class : ` .ConnectionPool ` instance of its host . <EoL>
<BoL> Close all pooled connections and disable the pool . <EoL>
<BoL> Make a request using : meth : ` urlopen ` with the appropriate encoding of `` fields `` based on the `` method `` used . <EoL>
<BoL> Make a request using : meth : ` urlopen ` with the `` fields `` encoded in the url . This is useful for request methods like GET , HEAD , DELETE , etc . <EoL>
<BoL> Deprecated . Use : func : ` .parse_url ` instead . <EoL>
<BoL> Returns True if the connection is dropped and should be closed . <EoL>
<BoL> Helper for quickly disabling all urllib3 warnings . <EoL>
<BoL> Helper function to format and quote a single header parameter . <EoL>
<BoL> Guess the `` Content-Type '' of a file . <EoL>
<BoL> Our embarassingly-simple replacement for mimetools.choose_boundary . <EoL>
<BoL> Iterate over fields . <EoL>
<BoL> .. deprecated : : 1.6 <EoL>
<BoL> Generate a random UUID . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Checks whether a given file-like object is closed . <EoL>
<BoL> Retrieve the current time . This function is mocked out in unit testing . <EoL>
<BoL> Given a string and an iterable of delimiters , split on the first found delimiter . Return two split parts and the matched delimiter . <EoL>
<BoL> Returns a : class : ` Session ` for context-management . <EoL>
<BoL> When being redirected we may want to strip authentication from the request to avoid leaking credentials . This method intelligently removes and reapplies authentication where possible to avoid credential loss . <EoL>
<BoL> This method re-evaluates the proxy configuration by considering the environment variables . <EoL>
<BoL> Return a dict of environment proxies . <EoL>
<BoL> Returns the Requests tuple auth for a given url from netrc . <EoL>
<BoL> Properly merges both requests and session hooks . <EoL>
<BoL> Determines appropriate setting for a given request , taking into account the explicit setting on that request , and the setting in the session . If a setting is a dictionary , they will be merged together using ` dict_class ` <EoL>
<BoL> Returns whether we should bypass proxies or not . <EoL>
<BoL> Returns a CookieJar from a key/value dictionary . <EoL>
<BoL> This function allows you to check if on IP belongs to a network subnet Example : returns True if ip = 192.168.1.1 and net = 192.168.1.0/24 returns False if ip = 192.168.1.1 and net = 192.168.100.0/24 <EoL>
<BoL> Return a string representing the default user agent . <EoL>
<BoL> Returns a key/value dictionary from a CookieJar . <EoL>
<BoL> Returns an internal sequence dictionary update . <EoL>
<BoL> Converts mask from /xx format to xxx.xxx.xxx.xxx Example : if mask is 24 function returns 255.255.255.0 <EoL>
<BoL> Take an object and test to see if it can be represented as a dictionary . Unless it can not be represented as such , return an OrderedDict , e.g. , <EoL>
<BoL> Returns encodings from given content string . <EoL>
<BoL> Returns the requested content back in unicode . <EoL>
<BoL> Very simple check of the cidr format in no_proxy variable <EoL>
<BoL> Parse lists as described by RFC 2068 Section 2 . <EoL>
<BoL> Unquotes a header value . ( Reversal of : func : ` quote_header_value ` ) . This does not use the real unquoting but what browsers are actually using for quoting . <EoL>
<BoL> Un-escape any percent-escape sequences in a URI that are unreserved characters . This leaves all reserved , illegal and non-ASCII bytes encoded . <EoL>
<BoL> Return None <EoL>
<BoL> Return true , if the named module is a package . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> A decorator that defines __unicode__ and __str__ methods under Python 2 . Under Python 3 it does nothing . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> : type name : string : param name : The name of the waiter <EoL>
<BoL> Note that the WaiterModel takes ownership of the waiter_config . <EoL>
<BoL> : type waiter_name : str : param waiter_name : The name of the waiter . The name should match the name ( including the casing ) of the key name in the waiter model file ( typically this is CamelCasing ) . <EoL>
<BoL> Return the current default application . <EoL>
<BoL> Add a new : class : ` Bottle ` instance to the stack <EoL>
<BoL> Search in self.environ for additional user defined attributes . <EoL>
<BoL> Wrap a WSGI environ dictionary . <EoL>
<BoL> Change an environ value and clear all caches that depend on it . <EoL>
<BoL> read body until content-length or MEMFILE_MAX into a string . Raise HTTPError ( 413 ) on requests that are to large . <EoL>
<BoL> Return a new : class : ` Request ` with a shallow : attr : ` environ ` copy . <EoL>
<BoL> Return the content of a cookie . <EoL>
<BoL> Return the value of a request header , or a given default value . <EoL>
<BoL> Shift path segments from : attr : ` path ` to : attr : ` script_name ` and vice versa . <EoL>
<BoL> Add an additional response header , not removing duplicates . <EoL>
<BoL> Returns a copy of self . <EoL>
<BoL> Delete a cookie . Be sure to use the same ` domain ` and ` path ` settings as used to create the cookie . <EoL>
<BoL> Return the value of a previously defined header . If there is no header with that name , return a default value . <EoL>
<BoL> Yield ( header , value ) tuples , skipping headers that are not allowed with the current response status code . <EoL>
<BoL> Create a new cookie or replace an old one . If the ` secret ` parameter is set , create a ` Signed Cookie ` ( described below ) . <EoL>
<BoL> Create a new response header , replacing any previously defined headers with the same name . <EoL>
<BoL> Create a new template . If the source parameter ( str or buffer ) is missing , the name argument is used to guess a template filename . <EoL>
<BoL> This reads or sets the global settings stored in class.settings . <EoL>
<BoL> Run preparations ( parsing , caching , ... ) . It should be possible to call this again to refresh a template or to update settings . <EoL>
<BoL> Render the template with the specified local variables and return a single byte or unicode string . <EoL>
<BoL> Search name in all directories specified in lookup . <EoL>
<BoL> Each instance of : class : 'Bottle ' is a WSGI application . <EoL>
<BoL> Try to convert the parameter into something WSGI compatible and set correct HTTP headers when possible . Support : False , str , unicode , dict , HTTPResponse , HTTPError , file-like , iterable of strings and iterable of unicodes <EoL>
<BoL> Attach a callback to a hook . Three hooks are currently implemented : <EoL>
<BoL> Add a route object , but do not change the : data : ` Route.app ` attribute . <EoL>
<BoL> Close the application and all installed plugins . <EoL>
<BoL> Equals : meth : ` route ` with a `` DELETE `` method parameter . <EoL>
<BoL> Decorator : Register an output handler for a HTTP error code <EoL>
<BoL> Equals : meth : ` route ` . <EoL>
<BoL> Return a string that matches a named route <EoL>
<BoL> Return a decorator that attaches a callback to a hook . See : meth : ` add_hook ` for details . <EoL>
<BoL> Add a plugin to the list of plugins and prepare it for being applied to all routes of this application . A plugin may be a simple decorator or an object that implements the : class : ` Plugin ` API . <EoL>
<BoL> Search for a matching route and return a ( : class : ` Route ` , urlargs ) tuple . <EoL>
<BoL> Merge the routes of another : class : ` Bottle ` application or a list of : class : ` Route ` objects into this application . The routes keep their 'owner ' , meaning that the : data : ` Route.app ` attribute is not changed . <EoL>
<BoL> Mount an application ( : class : ` Bottle ` or plain WSGI ) to a specific URL prefix . Example : : <EoL>
<BoL> Equals : meth : ` route ` with a `` POST `` method parameter . <EoL>
<BoL> Equals : meth : ` route ` with a `` PUT `` method parameter . <EoL>
<BoL> Remove a callback from a hook . <EoL>
<BoL> Reset all routes ( force plugins to be re-applied ) and clear all caches . If an ID or route object is given , only that specific route is affected . <EoL>
<BoL> Calls : func : ` run ` with the same parameters . <EoL>
<BoL> Trigger a hook and return a list of results . <EoL>
<BoL> Uninstall plugins . Pass an instance to remove a specific plugin , a type object to remove all plugins that match that type , a string to remove all plugins with a matching `` name `` attribute or `` True `` to remove all plugins . Return the list of removed plugins . <EoL>
<BoL> The bottle WSGI-interface . <EoL>
<BoL> Load values from an *.ini style config file . <EoL>
<BoL> Import values from a dictionary structure . Nesting can be used to represent namespaces . <EoL>
<BoL> Return the value of a meta field for a key . <EoL>
<BoL> Return an iterable of meta field names defined for a key . <EoL>
<BoL> Set the meta field for a key to a new value . This triggers the on-change handler for existing keys . <EoL>
<BoL> If the first parameter is a string , all keys are prefixed with this namespace . Apart from that it works just as the usual dict.update ( ) . Example : `` update ( 'some.namespace ' , key='value ' ) `` <EoL>
<BoL> Wrapper for file uploads . <EoL>
<BoL> Return the value of a header within the mulripart part . <EoL>
<BoL> Save file to disk or copy its content to an open file ( -like ) object . <EoL>
<BoL> Add a new value to the list of values for this key . <EoL>
<BoL> Returns a copy with all keys and values de- or recoded to match : attr : ` input_encoding ` . <EoL>
<BoL> Return the most recent value for a key . <EoL>
<BoL> Return a ( possibly empty ) list of values for a key . <EoL>
<BoL> Return the value as a unicode string , or the default . <EoL>
<BoL> Replace the list of values with a single value . <EoL>
<BoL> Iterate over all existing files in all registered paths . <EoL>
<BoL> Add a new path to the list of search paths . Return False if the path does not exist . <EoL>
<BoL> Search for a resource and return an absolute file path , or ` None ` . <EoL>
<BoL> Find a resource and return a file object , or raise IOError . <EoL>
<BoL> Yield all Plugins affecting this route . <EoL>
<BoL> Return a list of argument names the callback ( most likely ) accepts as keyword arguments . If the callback is a decorated function , try to recover the original function before inspection . <EoL>
<BoL> Lookup a config field and return its value , first checking the route.config , then route.app.config . <EoL>
<BoL> Return the callback . If the callback is a decorated function , try to recover the original function . <EoL>
<BoL> Do all on-demand work immediately ( useful for debugging ) . <EoL>
<BoL> Forget any cached values . The next time : attr : ` call ` is accessed , all plugins are re-applied . <EoL>
<BoL> Add a new rule or replace the target for an existing rule . <EoL>
<BoL> Add a filter . The provided function is called with the configuration string as parameter and must return a ( regexp , to_python , to_url ) tuple . The first element is a string , the last two are callables or None . <EoL>
<BoL> Build an URL by filling the wildcards in a rule . <EoL>
<BoL> Return a ( target , url_agrs ) tuple or raise HTTPError ( 400/404/405 ) . <EoL>
<BoL> Render the template using keyword arguments as local variables . <EoL>
<BoL> Tokens as a space separated string ( default : < % % > % { { } } ) <EoL>
<BoL> Translate header field name to CGI/WSGI environ key . <EoL>
<BoL> Return the header value as is ( may be bytes or unicode ) . <EoL>
<BoL> Create a virtual package that redirects imports ( see PEP 302 ) . <EoL>
<BoL> Change the debug level . There is only one debug level supported at the moment . <EoL>
<BoL> Yield chunks from a range in a file . No chunk is bigger than maxread . <EoL>
<BoL> Compares two strings in a cryptographically safe way : Runtime is not affected by length of common prefix . <EoL>
<BoL> Turn all capturing groups in a regular expression pattern into non-capturing groups . <EoL>
<BoL> Aborts execution and causes a HTTP error . <EoL>
<BoL> Callback decorator to require HTTP auth ( basic ) . TODO : Add route ( check_auth= ... ) parameter . <EoL>
<BoL> Verify and decode an encoded string . Return an object or None . <EoL>
<BoL> Encode and sign a pickle-able object . Return a ( byte ) string <EoL>
<BoL> Return True if the argument looks like a encoded cookie . <EoL>
<BoL> Like print_exc ( ) but return a string . <EoL>
<BoL> Escape HTML special characters `` & < > `` and quotes `` ' '' `` . <EoL>
<BoL> Escape and quote a string to be used as an HTTP attribute . <EoL>
<BoL> Import a module or fetch an object from a module . <EoL>
<BoL> Load a bottle application from a module and make sure that the import does not affect the current default application , but returns a separate application object . See : func : ` load ` for the target parameter . <EoL>
<BoL> Return a callable that relays calls to the current default app . <EoL>
<BoL> Parse rfc2617 HTTP authentication header string ( basic ) and return ( user , pass ) tuple or None <EoL>
<BoL> Parse rfc1123 , rfc850 and asctime timestamps and return UTC epoch . <EoL>
<BoL> Yield ( start , end ) ranges parsed from a HTTP Range header . <EoL>
<BoL> Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa . <EoL>
<BoL> Shorthand for 'print_exception ( *sys.exc_info ( ) , limit , file ) ' . <EoL>
<BoL> Aborts execution and causes a 303 or 302 redirect , depending on the HTTP protocol version . <EoL>
<BoL> Open a file in a safe way and return : exc : ` HTTPResponse ` with status code 200 , 305 , 403 or 404 . <EoL>
<BoL> Get a rendered template as a string iterator . <EoL>
<BoL> Decorator : renders a template for a handler . The handler can control its behavior like that : <EoL>
<BoL> Return a generator for routes that match the signature ( name , args ) of the func parameter . This may yield more than one route if the function takes optional keyword arguments . The output is best described by example : : <EoL>
<BoL> Sets up the `` pywsgi.Handler `` to work with a websocket response . <EoL>
<BoL> The main request handling method , called by the server . <EoL>
<BoL> Process the incoming request . Parse various headers . <EoL>
<BoL> Read and return the HTTP request line . <EoL>
<BoL> Called when a websocket has been created successfully . <EoL>
<BoL> Called when the handler is ready to send a response back to the remote endpoint . A websocket connection may have not been created . <EoL>
<BoL> Validate and 'upgrade ' the HTTP request to a WebSocket request . <EoL>
<BoL> Attempt to upgrade the current environ into a websocket enabled connection . If successful , the environ dict with be updated with two new entries , ` wsgi.websocket ` and ` wsgi.websocket_version ` . <EoL>
<BoL> Private function for rank a arrays . Compute the median ignoring Nan . <EoL>
<BoL> Sort an array and provide the argsort . <EoL>
<BoL> Compute the mean over the given axis ignoring nans . <EoL>
<BoL> Compute the median along the given axis ignoring nan values . <EoL>
<BoL> Compute the standard deviation over the given axis , ignoring nans . <EoL>
<BoL> Ranks the data , dealing with ties appropriately . <EoL>
<BoL> Squares each element of the input array , and returns the square ( s ) of that . <EoL>
<BoL> Benchmark a single function in detail or , optionally , all functions . <EoL>
<BoL> from bottleneck.benchmark.bench import getarray a = getarray ( % s , ' % s ' , % s , ' % s ' ) axis= % s % s <EoL>
<BoL> Returns the NPV ( Net Present Value ) of a cash flow series . <EoL>
<BoL> The ranking of the last element along the axis , ignoring NaNs . <EoL>
<BoL> Compute the arithmetic mean along the specified axis , ignoring NaNs . <EoL>
<BoL> Return a partitioned copy of an array . <EoL>
<BoL> rankdata ( a , method='average ' ) Assign ranks to data , dealing with ties appropriately . <EoL>
<BoL> View this color map at colorbrewer2.org . This will open colorbrewer2.org in your default web browser . <EoL>
<BoL> A color map that can be used in matplotlib plots . <EoL>
<BoL> Show colors in the IPython Notebook using ipythonblocks . <EoL>
<BoL> Create new object with the same class , update attributes <EoL>
<BoL> Create color map from linear mapping segments <EoL>
<BoL> Return a new color map with *lutsize* entries . <EoL>
<BoL> Make a linear segmented colormap with *name* from a sequence of *colors* which evenly transitions from colors [ 0 ] at val=0 to colors [ -1 ] at val=1 . <EoL>
<BoL> Make a reversed instance of the Colormap . <EoL>
<BoL> Set color to be used for masked values . <EoL>
<BoL> Set a new gamma value and regenerate color map . <EoL>
<BoL> Set color to be used for high out-of-range values . Requires norm.clip = False <EoL>
<BoL> Set color to be used for low out-of-range values . Requires norm.clip = False <EoL>
<BoL> Load all maps of a given type into a dictionary . <EoL>
<BoL> Return a ` BrewerMap ` representation of the specified color map . <EoL>
<BoL> Print the name and number of defined colors of all available color maps . <EoL>
<BoL> Print maps by type and/or number of defined colors . <EoL>
<BoL> Print all available maps of a given type . <EoL>
<BoL> Return specified resource as a string <EoL>
<BoL> View this color palette on the web . Will open a new tab in your web browser . <EoL>
<BoL> Get a Wes Anderson palette by name . <EoL>
<BoL> Print a list of Wes Anderson palettes . <EoL>
<BoL> diff ( src_bytes , dst_bytes ) - > bytes <EoL>
<BoL> file_diff ( src_path , dst_path , patch_path ) <EoL>
<BoL> file_patch ( src_path , dst_path , patch_path ) <EoL>
<BoL> file_patch_inplace ( path , patch_path ) <EoL>
<BoL> patch ( src_bytes , patch_bytes ) - > bytes <EoL>
<BoL> ead a BSDIFF4-format patch from stream 'fi ' <EoL>
<BoL> write a BSDIFF4-format patch to stream 'fo ' <EoL>
<BoL> Set a value <EoL>
<BoL> Declare interfaces provided by a module <EoL>
<BoL> Open a bzip2-compressed file . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Return buffered data without advancing the file position . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Read up to size uncompressed bytes , while trying to avoid making multiple reads from the underlying stream . <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read up to len ( b ) bytes into b . <EoL>
<BoL> Read a line of uncompressed bytes from the file . <EoL>
<BoL> Read a list of lines of uncompressed bytes from the file . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a byte string to the file . <EoL>
<BoL> Write a sequence of byte strings to the file . <EoL>
<BoL> Send a request . Use the request information to see if it exists in the cache and cache the response if we need to and can . <EoL>
<BoL> Normalize the URL to create a safe key for the cache <EoL>
<BoL> Algorithm for caching requests . <EoL>
<BoL> Return a cached response if it exists in the cache , otherwise return False . <EoL>
<BoL> On a 304 we will get a new set of headers that we want to update our cached value with , assuming we have one . <EoL>
<BoL> Decode the data passed in and potentially flush the decoder . <EoL>
<BoL> Catch low-level python exceptions , instead re-raising urllib3 variants , so that low-level exceptions are not leaked in the high-level api . <EoL>
<BoL> Flushes the decoder . Should only be called if the decoder is actually being used . <EoL>
<BoL> Set-up the _decoder attribute if necessary . <EoL>
<BoL> Set initial length value for Response content if available . <EoL>
<BoL> Given an : class : ` httplib.HTTPResponse ` instance `` r `` , return a corresponding : class : ` urllib3.response.HTTPResponse ` object . <EoL>
<BoL> Should we redirect and where to ? <EoL>
<BoL> Similar to : meth : ` httplib.HTTPResponse.read ` , but with two additional parameters : `` decode_content `` and `` cache_content `` . <EoL>
<BoL> Similar to : meth : ` HTTPResponse.read ` , but with an additional parameter : `` decode_content `` . <EoL>
<BoL> A generator wrapper for the read ( ) method . A call will block until `` amt `` bytes have been read from the connection or until the connection is closed . <EoL>
<BoL> Checks if the underlying file-like object looks like a httplib.HTTPResponse object . <EoL>
<BoL> Obtain the number of bytes pulled over the wire so far . May differ from the amount of content returned by : meth : `` HTTPResponse.read `` if bytes are encoded on the wire ( e.g , compressed ) . <EoL>
<BoL> Checks whether a given file-like object is closed . <EoL>
<BoL> Like iteritems ( ) , but with all lowercase keys . <EoL>
<BoL> Verify our vary headers match and construct a real urllib3 HTTPResponse object . <EoL>
<BoL> Parses a URI using the regex given in Appendix B of RFC 3986 . <EoL>
<BoL> Convert a date string to a time tuple . <EoL>
<BoL> Return the size of a cache element 's value . <EoL>
<BoL> Remove and return the ` ( key , value ) ` pair least frequently used . <EoL>
<BoL> Remove and return the ` ( key , value ) ` pair least recently used . <EoL>
<BoL> Remove and return a random ` ( key , value ) ` pair . <EoL>
<BoL> Remove expired items from the cache . <EoL>
<BoL> Remove and return the ` ( key , value ) ` pair least recently used that has not already expired . <EoL>
<BoL> Decorator to wrap a function with a memoizing callable that saves results in a cache . <EoL>
<BoL> Decorator to wrap a class or instance method with a memoizing callable that saves results in a cache . <EoL>
<BoL> Return a cache key for the specified hashable arguments . <EoL>
<BoL> Return a typed cache key for the specified hashable arguments . <EoL>
<BoL> Return the lower supported protocol version . Beta versions are omitted . <EoL>
<BoL> class_tags : list of ClassTag objects <EoL>
<BoL> For some CBOR primary type [ 0..7 ] and an auxiliary unsigned number , return CBOR encoded bytes <EoL>
<BoL> obj : Python object to serialize fp : file-like object capable of .write ( bytes ) <EoL>
<BoL> Parse and return object from fp , a file-like object supporting .read ( n ) <EoL>
<BoL> Parse CBOR bytes and return Python objects . <EoL>
<BoL> Args : msg : str Returns : { `` encoding '' : str , `` confidence '' : float } <EoL>
<BoL> Create a list of BioPython Atoms . <EoL>
<BoL> Initialize the cclibData object . <EoL>
<BoL> Converts appropriate attributes to arrays or lists/dicts of arrays . <EoL>
<BoL> Returns a dictionary of existing data attributes . <EoL>
<BoL> Converts all attributes that are arrays or lists/dicts of arrays to lists . <EoL>
<BoL> Sets data attributes given in a dictionary . <EoL>
<BoL> Check the types of all attributes . <EoL>
<BoL> Write parsed attributes to a file . <EoL>
<BoL> Write parsed attributes to a CML file . <EoL>
<BoL> Write parsed attributes to a JSON file . <EoL>
<BoL> Write parsed attributes to an XML file . <EoL>
<BoL> Create cclib attributes and return a ccData from an OpenBabel molecule . <EoL>
<BoL> Create an Open Babel molecule . <EoL>
<BoL> Read a file with OpenBabel and extract cclib attributes . <EoL>
<BoL> Guess the identity of a particular log file and return an instance of it . <EoL>
<BoL> Initialize the CML writer object . <EoL>
<BoL> Calculate the total dipole moment . <EoL>
<BoL> Check if required attributes are present in ccdata . <EoL>
<BoL> Clean up the index container type and remove zero-based indices to prevent duplicate structures and incorrect ordering when indices are later sorted . <EoL>
<BoL> Based upon the Open Babel/Pybel molecule , create a list of tuples to represent bonding information , where the three integers are the index of the starting atom , the index of the ending atom , and the bond order . <EoL>
<BoL> Create Open Babel and Pybel molecules from ccData . <EoL>
<BoL> Generate the CML representation of the logfile data . <EoL>
<BoL> Create [ Atoms ] section using geometry at the given index . <EoL>
<BoL> Create [ GTO ] section using gbasis . <EoL>
<BoL> Create [ MO ] section . <EoL>
<BoL> Rearrange cartesian F functions in mocoeffs . <EoL>
<BoL> Create [ SCFCONV ] section using gbasis . <EoL>
<BoL> Return filename without extension to be used as title . <EoL>
<BoL> Generate the MOLDEN representation of the logfile data . <EoL>
<BoL> Section : Atomic Numbers . <EoL>
<BoL> Section : Energy = T + Vne + Vee + Vnn . <EoL>
<BoL> Section : Keywords . Return one of GTO , GIAO , CSGT keyword . <EoL>
<BoL> Section : Molecular Orbital Energies . <EoL>
<BoL> Section : Molecular Orbital Occupation Numbers . <EoL>
<BoL> Section : Molecular Orbital Primitive Coefficients . <EoL>
<BoL> Section : Molecular Orbital Spin Types . <EoL>
<BoL> Section : Net Charge . Net charge on molecule . <EoL>
<BoL> Return number of molecular orbitals to be printed . <EoL>
<BoL> Section : Number of Alpha Electrons . <EoL>
<BoL> Section : Number of Beta Electrons . <EoL>
<BoL> Section : Number of Electrons . <EoL>
<BoL> Section : Number of Occupied Molecular Orbitals . <EoL>
<BoL> Section : Number of Nuclei . <EoL>
<BoL> Section : Number of Perturbation . <EoL>
<BoL> Section : Number of Primitives . <EoL>
<BoL> Calculate normalization matrix for normalizing MOcoeffs . <EoL>
<BoL> Normalization factor for Cartesian Gaussian Functions . <EoL>
<BoL> Raw-Primitive Expansion coefficients for each normalized MO . <EoL>
<BoL> Section : Nuclear Charges . <EoL>
<BoL> Section : Nuclear Cartesian Coordinates . Nuclear coordinates in Bohr . <EoL>
<BoL> Section : Nuclear Names . Names of nuclei present in the molecule . <EoL>
<BoL> Section : Primitive Centers . List of nuclear numbers upon which the primitive basis functions are centered . <EoL>
<BoL> Section : Primitive Exponents . Space-separated list of primitive exponents . <EoL>
<BoL> Return primitve mocoeffs array . <EoL>
<BoL> Section : Primitive Types . <EoL>
<BoL> Rearrange cartesian F functions in mocoeffs . Expected order : xxx , yyy , zzz , xyy , xxy , xxz , xzz , yzz , yyz , xyz cclib 's order for GAMESS : XXX , YYY , ZZZ , XXY , XXZ , YYX , YYZ , ZZX , ZZY , XYZ <EoL>
<BoL> Rearranges MO related data according the expected order of Cartesian gaussian primitive types in wfx format . cclib parses mocoeffs in the order they occur in output files . <EoL>
<BoL> Section : Electronic Spin Multiplicity <EoL>
<BoL> Section : Title Return filename without extension to be used as title . <EoL>
<BoL> Ratio of kinetic energy to potential energy . <EoL>
<BoL> Generate the wfx representation of the logfile data . <EoL>
<BoL> Convert the raw contents of the source into the internal representation . <EoL>
<BoL> Returns a pandas.DataFrame of data attributes parsed by cclib from one or more logfiles . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Correct data or do parser-specific validation after parsing is finished . <EoL>
<BoL> Appends a value to an attribute . <EoL>
<BoL> Convert a string to a float . <EoL>
<BoL> Generate a string used for matching degenerate orbital labels <EoL>
<BoL> Use standard symmetry labels instead of ADF labels . <EoL>
<BoL> Parse the logfile , using the assumed extract method of the child . <EoL>
<BoL> Set an attribute and perform a check when it already exists . <EoL>
<BoL> Read trivial line types and check they are what they are supposed to be . <EoL>
<BoL> Update progress . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> DALTON does not require normalizing symmetry labels . <EoL>
<BoL> Parse DALTON geometry lines into an atomcoords array . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Normalise the symmetries used by GAMESS . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Use standard symmetry labels instead of GAMESS UK labels . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Use standard symmetry labels instead of Gaussian labels . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Normalise the symmetries used by Jaguar . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Extract information from the file object inputfile . <EoL>
<BoL> MOPAC does not require normalizing symmetry labels . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Does Molcas require symmetry label normalization ? <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Normalise the symmetries used by Molpro . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> NWChem-specific routines for after parsing a file . <EoL>
<BoL> NWChem-specific routines performed before parsing a file . <EoL>
<BoL> NWChem does not require normalizing symmetry labels . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> ORCA does not require normalizing symmetry labels . <EoL>
<BoL> Parse a charge section , modifies class in place <EoL>
<BoL> Parse the SCF convergence information in condensed format <EoL>
<BoL> Parse SCF convergence when in expanded format . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Parse molecular orbital symmetries and energies from the 'Post-Iterations ' section . <EoL>
<BoL> Set parser-specific variables and do other initial things here . <EoL>
<BoL> Psi3 does not require normalizing symmetry labels . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Parse molecular orbital symmetries and energies from the 'Post-Iterations ' section . <EoL>
<BoL> Psi4 does not require normalizing symmetry labels . <EoL>
<BoL> Parse the nuclear gradient section into a list of lists with shape [ natom , 3 ] . <EoL>
<BoL> Imaginary frequencies are printed as '12.34i ' , rather than '-12.34 ' . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Assign to all instances of the element , because mixed usage isn't allowed within elements . <EoL>
<BoL> Generate the map to go from Q-Chem atom numbering : 'C1 ' , 'C2 ' , 'C3 ' , 'C4 ' , 'C5 ' , 'C6 ' , 'H1 ' , 'H2 ' , 'H3 ' , 'H4 ' , 'C7 ' , ... to cclib atom numbering : 'C1 ' , 'C2 ' , 'C3 ' , 'C4 ' , 'C5 ' , 'C6 ' , 'H7 ' , 'H8 ' , 'H9 ' , 'H10 ' , 'C11 ' , ... for later use . <EoL>
<BoL> From the atomnos , generate a histogram that represents the molecular formula . <EoL>
<BoL> Q-Chem does not require normalizing symmetry labels . <EoL>
<BoL> Parse the population analysis charge block . <EoL>
<BoL> Q-Chem prints most matrices in a standard format ; parse the matrix into a NumPy array of the appropriate shape . <EoL>
<BoL> Q-Chem prints most matrices in a standard format ; parse the matrix into a preallocated NumPy array of the appropriate shape . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Deleting frequencies relating to translations or rotations <EoL>
<BoL> Normalise the symmetries used by Turbomole . <EoL>
<BoL> Splits the lines containing mocoeffs ( each of length 20 ) and converts them to float correctly . <EoL>
<BoL> Determine the correct output format . <EoL>
<BoL> Attempt to open and read computational chemistry data from a file . <EoL>
<BoL> Attempt to read standard molecular formats using other libraries . <EoL>
<BoL> Try to guess the filetype by searching for trigger strings . <EoL>
<BoL> Splits the path to give the filename . Works irrespective of '\' or '/ ' appearing in the path and also with path ending with '/ ' or '\ ' . <EoL>
<BoL> Sorts a list of inputs ( or list of log files ) according to the order defined below . Just appends the unknown files in the end of the sorted list . <EoL>
<BoL> Implement this method in a subclass such that it returns a serializable object for `` o `` , or calls the base implementation ( to raise a `` TypeError `` ) . <EoL>
<BoL> An in-place pretty-print indenter for XML . <EoL>
<BoL> Set all the key-value pairs from a dictionary as element attributes . <EoL>
<BoL> A reimplementation of tostring ( ) found in ElementTree . <EoL>
<BoL> Initialize the Reader object . <EoL>
<BoL> Convert the raw contents of the source into the internal representation . <EoL>
<BoL> Read the raw contents of the source into the Reader . <EoL>
<BoL> Generate the written representation of the logfile data . <EoL>
<BoL> Reformat Molden output file to : - use scientific notation , - split sp molecular orbitals to s and p , and - replace multiple spaces with single . <EoL>
<BoL> Convert Molden style number formatting to scientific notation . 0.9910616900D+02 -- > 9.910617e+01 <EoL>
<BoL> Molden style number rounding in [ Atoms ] section . <EoL>
<BoL> Format lists for pretty print . <EoL>
<BoL> Add opening/closing section_name tags to data . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Check if required attributes are present in data . <EoL>
<BoL> Perform the charge decomposition analysis . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Perform the C squared population analysis . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Calculate the density matrix . <EoL>
<BoL> Returns a representation of the object . <EoL>
<BoL> Returns a string representation of the object . <EoL>
<BoL> Returns the electron count in system . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Perform a calculation of Löwdin population analysis . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Calculate Mayer 's bond orders . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Perform a Mulliken population analysis . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Return the center of mass . <EoL>
<BoL> Return the moment of inertia tensor . <EoL>
<BoL> Return the principal moments of inertia in 3 kinds of units : 1 . <EoL>
<BoL> Return the nuclear repulsion energy . <EoL>
<BoL> Compute the rotational constants in 1/cm or GHz . <EoL>
<BoL> Return the stoichemistry of the object according to the Hill system <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Perform an overlap population analysis given the results of a parse <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Return Boolean indicating if system is closed shell . <EoL>
<BoL> Initialise the Logfile object . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Return the masses for the given nuclei , respresented by their nuclear charges . <EoL>
<BoL> Given a ` periodictable ` element , return the most abundant isotope . <EoL>
<BoL> Standardise the symmetry labels between parsers . <EoL>
<BoL> Open a bzip2-compressed file . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Return buffered data without advancing the file position . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Read up to size uncompressed bytes , while trying to avoid making multiple reads from the underlying stream . Reads up to a buffer 's worth of data if size is negative . <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read bytes into b . <EoL>
<BoL> Read a line of uncompressed bytes from the file . <EoL>
<BoL> Read a list of lines of uncompressed bytes from the file . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a byte string to the file . <EoL>
<BoL> Write a sequence of byte strings to the file . <EoL>
<BoL> Invoke the underlying file object 's fileno ( ) method . <EoL>
<BoL> Implements BufferedIOBase.read1 ( ) <EoL>
<BoL> Return the uncompressed stream file position indicator to the beginning of the file <EoL>
<BoL> Return a file object given a filename or if object specified decompresses it if needed and wrap it up . <EoL>
<BoL> Generate all atomic orbital names that could be used by Molpro . <EoL>
<BoL> Return a representation of the object . <EoL>
<BoL> Return a string representation of the object . <EoL>
<BoL> Normalise the symmetries used by Turbomole . <EoL>
<BoL> Split the given line using the field widths passed in on class initialization . <EoL>
<BoL> Convert from one set of units to another . <EoL>
<BoL> Symmetrize a square NumPy array by reflecting one triangular section across the diagonal to the other . <EoL>
<BoL> Initialize the framework . <EoL>
<BoL> A shortcut for `` self.args.add_argument `` . <EoL>
<BoL> Append a directory `` path `` to the list of directories to parse for config files . <EoL>
<BoL> Append a file `` path `` to the list of configuration files to parse . <EoL>
<BoL> Append a directory `` path `` to the list of directories to scan for plugins . <EoL>
<BoL> Append a directory `` path `` to the list of template directories to parse for templates . <EoL>
<BoL> Add `` signum `` to the list of signals to catch and handle by Cement . <EoL>
<BoL> Close the application . This runs the `` pre_close `` and `` post_close `` hooks allowing plugins/extensions/etc to cleanup at the end of program execution . <EoL>
<BoL> Extend the `` App ( ) `` object with additional functions/classes such as `` app.my_custom_function ( ) `` , etc . It provides an interface for extensions to provide functionality that travel along with the application object . <EoL>
<BoL> This function is useful for reloading a running applications , for example to reload configuration settings , etc . <EoL>
<BoL> Remove a directory `` path `` from the list of template directories to parse for templates . <EoL>
<BoL> This is a simple wrapper around `` self.output.render ( ) `` which simply returns an empty string if no output handler is defined . <EoL>
<BoL> This function wraps everything together ( after `` self._setup ( ) `` is called ) to run the application . <EoL>
<BoL> This function wraps `` self.run ( ) `` with an endless while loop . If any exception is encountered it will be logged and then the application will be reloaded . <EoL>
<BoL> This function wraps all `` _setup `` actons in one call . It is called before `` self.run ( ) `` , allowing the application to be setup but not executed ( possibly letting the developer perform other actions before full execution ) . <EoL>
<BoL> Validate application config settings . <EoL>
<BoL> Get a list of exposed commands for this controller <EoL>
<BoL> Called on every controller just after arguments are parsed ( assuming that the parser has n't thrown an exception ) . <EoL>
<BoL> Called on every controller just before arguments are parsed . Provides an alternative means of adding arguments to the controller , giving more control than using `` Meta.arguments `` . <EoL>
<BoL> Called during application initialization and must `` setup `` the handler object making it ready for the framework or the application to make further calls to it . <EoL>
<BoL> Perform any validation to ensure proper data , meta-data , etc . <EoL>
<BoL> Perform any validation to ensure proper data , meta-data , etc . <EoL>
<BoL> Add arguments to the parser . <EoL>
<BoL> Parse the argument list ( i.e . <EoL>
<BoL> Setup just enough for cement to be able to do debug logging . This is the logger used by the Cement framework , which is setup and accessed before the application is functional ( and more importantly before the applications log handler is usable ) . <EoL>
<BoL> Deletes a key/value from the cache . <EoL>
<BoL> Get the value for a key in the cache . <EoL>
<BoL> Clears all data from the cache . <EoL>
<BoL> Set the key/value in the cache for a set amount of `` time `` . <EoL>
<BoL> Parse a configuration file at `` file_path `` and store it . This function must be provided by the handler implementation ( that is sub-classing this ) . <EoL>
<BoL> Add a new section if it does n't already exist . <EoL>
<BoL> Return a configuration value based on `` section.key `` . <EoL>
<BoL> Return a dict of the entire configuration . <EoL>
<BoL> Return a dict of configuration parameters for `` section `` . <EoL>
<BoL> Return a list of configuration sections . <EoL>
<BoL> Returns whether or not the section exists . <EoL>
<BoL> Return a list of configuration keys from `` section `` . <EoL>
<BoL> Merges a dict object into the configuration . <EoL>
<BoL> Ensure we are using the absolute/expanded path to `` file_path `` , and then call `` self._parse_file `` to parse config file settings from it , overwriting existing config settings . <EoL>
<BoL> Set a configuration value based at `` section.key `` . <EoL>
<BoL> Parse config file settings from `` file_path `` . <EoL>
<BoL> Return an absolute path , while also expanding the `` ~ `` user directory shortcut . <EoL>
<BoL> Reads the application object 's data to dispatch a command from this controller . For example , reading `` self.app.pargs `` to determine what command was passed , and then executing that command function . <EoL>
<BoL> Get all loaded extensions . <EoL>
<BoL> Synonymous with `` get_loaded_extensions ( ) `` . <EoL>
<BoL> Given an extension module name , load or in other-words `` import `` the extension . <EoL>
<BoL> Given a list of extension modules , iterate over the list and pass individually to `` self.load_extension ( ) `` . <EoL>
<BoL> Load an extension whose module is `` ext_module `` . For example , `` cement.ext.ext_json `` . <EoL>
<BoL> Load all extensions from `` ext_list `` . <EoL>
<BoL> Get a handler object . <EoL>
<BoL> Return a list of handlers for a given `` interface `` . <EoL>
<BoL> Register a handler class to an interface . If the same object is already registered then no exception is raised , however if a different object attempts to be registered to the same name a `` InterfaceError `` is raised . <EoL>
<BoL> Check if a handler is registered . <EoL>
<BoL> Resolves the actual handler , as it can be either a string identifying the handler to load from `` self.__handlers__ `` , or it can be an instantiated or non-instantiated handler class . <EoL>
<BoL> Setup a handler class so that it can be used . <EoL>
<BoL> Define a hook namespace that the application and plugins can register hooks in . <EoL>
<BoL> Test whether a hook name is defined . <EoL>
<BoL> List all defined hooks . <EoL>
<BoL> Register a function to a hook . The function will be called , in order of weight , when the hook is run . <EoL>
<BoL> Run all defined hooks in the namespace . <EoL>
<BoL> Define an `` ibc `` ( interface base class ) . <EoL>
<BoL> Test whether `` interface `` is defined . <EoL>
<BoL> Get an interface class . <EoL>
<BoL> Return a list of defined interfaces . <EoL>
<BoL> This is a `` post_setup `` hook that adds the handler override options to the argument parser <EoL>
<BoL> Catch a signal , run the `` signal `` hook , and then raise an exception allowing the app to handle logic elsewhere . <EoL>
<BoL> This is a `` post_argument_parsing `` hook that overrides a configured handler if defined in `` App.Meta.handler_override_options `` and the option is passed at command line with a valid handler label . <EoL>
<BoL> Given a value , determine if it is one of `` [ True , 'true ' , 'yes ' , 'on ' , ' 1 ' , 1 , ] `` ( note : strings are converted to lowercase before comparison ) . <EoL>
<BoL> Reload the module and return it . <EoL>
<BoL> Log to the `` DEBUG `` facility . <EoL>
<BoL> Log to the `` ERROR `` facility . <EoL>
<BoL> Log to the `` FATAL `` facility . <EoL>
<BoL> Return a string representation of the log level . <EoL>
<BoL> Log to the `` INFO `` facility . <EoL>
<BoL> Set the log level . Must except atleast one of : `` [ 'INFO ' , 'WARNING ' , 'ERROR ' , 'DEBUG ' , or 'FATAL ' ] `` . <EoL>
<BoL> Log to the `` WARNING `` facility . <EoL>
<BoL> Send a mail message . Keyword arguments override configuration defaults ( cc , bcc , etc ) . <EoL>
<BoL> Render the `` data `` dict into output in some fashion . This function must accept both `` *args `` and `` **kwargs `` to allow an application to mix output handlers that support different features . <EoL>
<BoL> Returns a list of plugins that are disabled in the config . <EoL>
<BoL> Returns a list of plugins that are enabled in the config . <EoL>
<BoL> Returns a list of plugins that have been loaded . <EoL>
<BoL> Load a plugin whose name is `` plugin_name `` . <EoL>
<BoL> Load all plugins from `` plugins `` . <EoL>
<BoL> Render `` src `` directory as template , including directory and file names , and copy to `` dest `` directory . <EoL>
<BoL> Loads a template file first from `` self.app._meta.template_dirs `` and secondly from `` self.app._meta.template_module `` . The `` template_dirs `` have presedence . <EoL>
<BoL> Render `` content `` as template using using the `` data `` dictionary . <EoL>
<BoL> Render the `` src `` directory path , and copy to `` dest `` . This method must render directory and file **names** as template content , as well as the contents of files . <EoL>
<BoL> Loads a template file first from `` self.app._meta.template_dirs `` and secondly from `` self.app._meta.template_module `` . The `` template_dirs `` have presedence . <EoL>
<BoL> Render `` content `` as a template using the `` data `` dict . <EoL>
<BoL> Add an argument to the parser . <EoL>
<BoL> Parse a list of arguments , and return them as an object . Meaning an argument name of 'foo ' will be stored as parsed_args.foo . <EoL>
<BoL> Remove the temporary directory ( and file ) if it exists , and `` self.cleanup `` is `` True `` . <EoL>
<BoL> Rename a file or directory safely without overwriting an existing backup of the same name . <EoL>
<BoL> Ensure the directory `` path `` exists , and if not create it . <EoL>
<BoL> Ensure the parent directory of `` path `` ( file , or directory ) exists , and if not create it . <EoL>
<BoL> Return a complete , joined path , by first calling `` abspath ( ) `` on the first item to ensure the final path is complete . <EoL>
<BoL> Wrapper around `` os.path.join ( ) `` , `` os.path.abspath ( ) `` , and `` os.path.exists ( ) `` . <EoL>
<BoL> Returns a standard dictionary object to use for application defaults . <EoL>
<BoL> Generate a random MD5 hash for whatever purpose . Useful for testing or any other time that something random is required . <EoL>
<BoL> Wrap text for cleaner output ( this is a simple wrapper around `` textwrap.TextWrapper `` in the standard library ) . <EoL>
<BoL> Convenience for checking if a timeout has expired . <EoL>
<BoL> Construct and return tuple with IO objects : p2cread , p2cwrite , c2pread , c2pwrite , errread , errwrite <EoL>
<BoL> Convenience for _communicate when computing timeouts . <EoL>
<BoL> All callers to this function MUST hold self._waitpid_lock . <EoL>
<BoL> Interact with process : Send data to stdin . <EoL>
<BoL> Kill the process with SIGKILL <EoL>
<BoL> Check if child process has terminated . Set and return returncode attribute . <EoL>
<BoL> Send a signal to the process . <EoL>
<BoL> Terminate the process with SIGTERM <EoL>
<BoL> Wait for child process to terminate . Returns returncode attribute . <EoL>
<BoL> Return whether process is alive <EoL>
<BoL> Wait until child process terminates <EoL>
<BoL> Method to be run in sub-process ; can be overridden in sub-class <EoL>
<BoL> Start child process <EoL>
<BoL> Terminate process ; sends SIGTERM signal or uses TerminateProcess ( ) <EoL>
<BoL> Does not do anything . Is intended to be used in a sub-class to handle user input after it is prompted . <EoL>
<BoL> Prompt the user , and store their input as `` self.input `` . <EoL>
<BoL> Method representing the thread 's activity . <EoL>
<BoL> Wrapper around `` exec_cmd `` and `` exec_cmd2 `` depending on whether capturing output is desired . Defaults to setting the Popen `` shell `` keyword argument to `` True `` ( string command rather than list of command and arguments ) . <EoL>
<BoL> Execute a shell call using Subprocess . <EoL>
<BoL> Similar to `` exec_cmd `` , however does not capture stdout , stderr ( therefore allowing it to print to console ) . <EoL>
<BoL> Wrapper around `` spawn_process `` and `` spawn_thread `` depending on desired execution model . <EoL>
<BoL> A quick wrapper around `` multiprocessing.Process ( ) `` . <EoL>
<BoL> A quick wrapper around `` threading.Thread ( ) `` . By default the `` start ( ) `` function will be called before the spawned thread object is returned See ` Threading < https : //docs.python.org/3/library/threading.html > ` _ for more information on the features of `` Thread ( ) `` . <EoL>
<BoL> Returns a numeric identifier of the latest git changeset . <EoL>
<BoL> Register a definition to the registry . Existing definitions are replaced silently . <EoL>
<BoL> Returns a : class : ` dict ` with all registered definitions mapped to their name . <EoL>
<BoL> Purge all definitions in the registry . <EoL>
<BoL> Add several definitions at once . Existing definitions are replaced silently . <EoL>
<BoL> Retrieve a definition from the registry . <EoL>
<BoL> Unregister definitions from the registry . <EoL>
<BoL> Assign args to kwargs and store configuration.This dictionary holds the configuration arguments that were used to initialize the : class : ` Validator ` instance except the `` error_handler `` . <EoL>
<BoL> Validate a field 's value against its defined rules . <EoL>
<BoL> Validates value against all definitions and logs errors according to the operator . <EoL>
<BoL> Validates that required fields are not missing . <EoL>
<BoL> Normalizes and validates a mapping against a validation-schema of defined rules . <EoL>
<BoL> The arguments will be treated as with this signature : The document that is or was recently processed . <EoL>
<BoL> Removes nodes by index from an errorpath , relatively to the basepaths of self . <EoL>
<BoL> Drops rules from the queue of the rules that still need to be evaluated for the currently processed field . If no arguments are given , the whole queue is emptied . <EoL>
<BoL> Creates and adds one or multiple errors . <EoL>
<BoL> Searches for a field as defined by path . This method is used by the `` dependency `` evaluation logic . <EoL>
<BoL> { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'list ' , 'schema ' : { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'string ' } ] } } , { 'type ' : 'string ' } ] } <EoL>
<BoL> { 'nullable ' : True } <EoL>
<BoL> { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'string ' } ] } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> { 'type ' : 'hashable ' } <EoL>
<BoL> { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'list ' , 'schema ' : { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'string ' } ] } } , { 'type ' : 'string ' } ] } <EoL>
<BoL> { 'type ' : 'list ' , 'logical ' : 'allof ' } <EoL>
<BoL> { 'type ' : 'list ' } <EoL>
<BoL> { 'type ' : 'list ' , 'logical ' : 'anyof ' } <EoL>
<BoL> { 'type ' : ( 'dict ' , 'hashable ' , 'list ' ) , 'validator ' : 'dependencies ' } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> { 'type ' : ( 'hashable ' , 'list ' ) , 'schema ' : { 'type ' : 'hashable ' } } <EoL>
<BoL> { 'type ' : 'list ' } <EoL>
<BoL> { 'type ' : 'list ' , 'validator ' : 'items ' } <EoL>
<BoL> { 'type ' : [ 'dict ' , 'string ' ] , 'validator ' : 'bulk_schema ' , 'forbidden ' : [ 'rename ' , 'rename_handler ' ] } <EoL>
<BoL> { 'nullable ' : False } <EoL>
<BoL> { 'type ' : 'integer ' } <EoL>
<BoL> { 'nullable ' : False } <EoL>
<BoL> { 'type ' : 'integer ' } <EoL>
<BoL> { 'type ' : 'list ' , 'logical ' : 'noneof ' } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> { 'type ' : 'list ' , 'logical ' : 'oneof ' } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> { 'type ' : 'string ' } <EoL>
<BoL> { 'type ' : [ 'dict ' , 'string ' ] , 'anyof ' : [ { 'validator ' : 'schema ' } , { 'validator ' : 'bulk_schema ' } ] } <EoL>
<BoL> { 'type ' : [ 'string ' , 'list ' ] , 'validator ' : 'type ' } <EoL>
<BoL> { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'list ' , 'schema ' : { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'string ' } ] } } , { 'type ' : 'string ' } ] } <EoL>
<BoL> { 'type ' : [ 'dict ' , 'string ' ] , 'validator ' : 'bulk_schema ' , 'forbidden ' : [ 'rename ' , 'rename_handler ' ] } <EoL>
<BoL> Purge the cache of known valid schemas . <EoL>
<BoL> Returns the document normalized according to the specified rules of a schema . <EoL>
<BoL> Wrapper around : meth : ` ~cerberus.Validator.validate ` that returns the normalized and validated document or : obj : ` None ` if validation failed . <EoL>
<BoL> Returns errors in a handler-specific format . <EoL>
<BoL> Optionally initialize a new instance . <EoL>
<BoL> Be a superhero and implement an iterator over errors . <EoL>
<BoL> Add an error to the errors ' container object of a handler . <EoL>
<BoL> Optionally emits an error in the handler 's format to a stream . Or light a LED , or even shut down a power plant . <EoL>
<BoL> Gets called when a validation ends . <EoL>
<BoL> Adds all errors to the handler 's container object . <EoL>
<BoL> Gets called when a validation starts . <EoL>
<BoL> Adds an error or sub-tree to : attr : tree . <EoL>
<BoL> Recursively rewrites the error path to correctly represent logic errors <EoL>
<BoL> Add an error to the tree . <EoL>
<BoL> Returns all errors for a particular path . <EoL>
<BoL> Returns a node for a path . <EoL>
<BoL> Assumes the errors relate to the same document and schema . <EoL>
<BoL> Expects that all other properties are transitively determined . <EoL>
<BoL> Cerberus error messages expect regular binary strings . If unicode is used in a ValidationError message ca n't be printed.Helper encoding unicode strings into binary utf-8 <EoL>
<BoL> Format a Python object into a pretty-printed representation . <EoL>
<BoL> : param validator : An instance of Validator- ( sub- ) class that uses this schema . <EoL>
<BoL> Expand agglutinated rules in a definition-schema . <EoL>
<BoL> Tries to determine heuristically if the schema-constraints are aimed to mappings . <EoL>
<BoL> Validates a schema that defines rules against supported rules . <EoL>
<BoL> { 'allowed ' : ( 'allof ' , 'anyof ' , 'noneof ' , 'oneof ' ) } <EoL>
<BoL> Dynamically create a : class : ` ~cerberus.Validator ` subclass . Docstrings of mixin-classes will be added to the resulting class ' one if `` __doc__ `` is not in : obj : ` namespace ` . <EoL>
<BoL> Be aware that this treats any sequence type with the equal members as equal . As it is used to identify equality of schemas , this can be considered okay as definitions are semantically equal regardless the container type . <EoL>
<BoL> Safely evaluate an expression node or a string containing a Python expression . The string or node provided may only consist of the following Python literal structures : strings , bytes , numbers , tuples , lists , dicts , sets , booleans , and None . <EoL>
<BoL> Create an FFI instance . The 'backend ' argument is used to select a non-default backend , mostly for tests . <EoL>
<BoL> Return the address of a < cdata 'struct-or-union ' > . If 'fields_or_indexes ' are given , returns the address of that field or array item in the structure or array , recursively in case of nested structures . <EoL>
<BoL> Return the natural alignment size in bytes of the C type given as a string . <EoL>
<BoL> Return a callback object or a decorator making such a callback object . <EoL>
<BoL> Similar to a C cast : returns an instance of the named C type initialized with the given 'source ' . The source is casted between integers or pointers of any type . <EoL>
<BoL> Parse the given C source . <EoL>
<BoL> The 'target ' argument gives the final file name of the compiled DLL . <EoL>
<BoL> Close a library obtained with ffi.dlopen ( ) . After this call , access to functions or variables from the library will fail ( possibly with a segmentation fault ) . <EoL>
<BoL> Load and return a dynamic library identified by 'name ' . <EoL>
<BoL> Return a < cdata 'char [ ] ' > that points to the data of the given Python object , which must support the buffer interface . Note that this is not meant to be used on the built-in types str or unicode ( you can build 'char [ ] ' arrays explicitly ) but only on objects containing large quantities of raw data in some other format , like 'array.array ' or numpy arrays . <EoL>
<BoL> Return a new cdata object that points to the same data . Later , when this new cdata object is garbage-collected , 'destructor ( old_cdata_object ) ' will be called . <EoL>
<BoL> Return a string giving the C type 'cdecl ' , which may be itself a string or a < ctype > object . If 'replace_with ' is given , it gives extra text to append ( or insert for more complicated C types ) , like a variable name , or '* ' to get actually the C type 'pointer-to-cdecl ' . <EoL>
<BoL> Includes the typedefs , structs , unions and enums defined in another FFI instance . <EoL>
<BoL> Returns the user type names known to this FFI instance . This returns a tuple containing three lists of names : ( typedef_names , names_of_structs , names_of_unions ) <EoL>
<BoL> ffi.memmove ( dest , src , n ) copies n bytes of memory from src to dest . <EoL>
<BoL> Allocate an instance according to the specified C type and return a pointer to it . <EoL>
<BoL> Return the offset of the named field inside the given structure or array , which must be given as a C type name . <EoL>
<BoL> Windows : if 'enabled_flag ' is True , enable the UNICODE and _UNICODE defines in C , and declare the types like TCHAR and LPTCSTR to be ( pointers to ) wchar_t . <EoL>
<BoL> Return the size in bytes of the argument . It can be a string naming a C type , or a 'cdata ' instance . <EoL>
<BoL> Return a Python string ( or unicode string ) from the 'cdata ' . <EoL>
<BoL> Parse the C type given as a string and return the corresponding < ctype > object . It can also be used on 'cdata ' instance to get its C type . <EoL>
<BoL> Unpack an array of C data of the given length , returning a Python string/unicode/list . <EoL>
<BoL> Verify that the current ffi signatures compile on this machine , and return a dynamic library object . <EoL>
<BoL> Clean up the source : * Replace use of Fn : :Join with Fn : :Sub <EoL>
<BoL> Output some YAML <EoL>
<BoL> Figure out the input format and convert the data to the opposing output format <EoL>
<BoL> Try to guess the input format <EoL>
<BoL> Assume the input is YAML and convert to JSON <EoL>
<BoL> Assume the input is JSON and convert to YAML <EoL>
<BoL> Deal with ! Ref style function format and OrderedDict <EoL>
<BoL> Serializes or deserializes a value by given name . <EoL>
<BoL> Gets a child serializer . <EoL>
<BoL> Equivalent to getattr . <EoL>
<BoL> Registers a link hook . <EoL>
<BoL> Registers a child link to this chain . <EoL>
<BoL> Registers a persistent value to the link . <EoL>
<BoL> Clears all gradient arrays . <EoL>
<BoL> Counts the total number of parameters . <EoL>
<BoL> Unregisters the link hook . <EoL>
<BoL> Disables update rules of all parameters under the link hierarchy . <EoL>
<BoL> Enables update rules of all parameters under the link hierarchy . <EoL>
<BoL> Creates an initialization scope . <EoL>
<BoL> Registers an attribute of a given name as a persistent value . <EoL>
<BoL> Repeats this link multiple times to make a : class : ` ~chainer.Sequential ` . <EoL>
<BoL> Initializes all gradient arrays by zero . <EoL>
<BoL> Returns the child at given index . <EoL>
<BoL> Returns the number of children . <EoL>
<BoL> Registers a child link and adds it to the tail of the list . <EoL>
<BoL> Returns a deep copy of the chainlist . <EoL>
<BoL> Insert a child link at the given index . <EoL>
<BoL> Loads an object from this deserializer . <EoL>
<BoL> Adds a dictionary of scalars . <EoL>
<BoL> Creates a dictionary of mean values . <EoL>
<BoL> Creates a dictionary of statistics . <EoL>
<BoL> Evaluates the cumulative distribution function at the given points . <EoL>
<BoL> Evaluates the inverse cumulative distribution function at the given points . <EoL>
<BoL> Evaluates the log of cumulative distribution function at the given points . <EoL>
<BoL> Evaluates the logarithm of probability at the given points . <EoL>
<BoL> Evaluates the logarithm of survival function at the given points . <EoL>
<BoL> Evaluates the perplexity function at the given points . <EoL>
<BoL> Evaluates probability at the given points . <EoL>
<BoL> Samples random points from the distribution . <EoL>
<BoL> Samples n random points from the distribution . <EoL>
<BoL> Evaluates the survival function at the given points . <EoL>
<BoL> Applies forward propagation with chaining backward references . <EoL>
<BoL> Registers a function hook . <EoL>
<BoL> Applies backprop to output gradient arrays . <EoL>
<BoL> Applies backprop to output gradient arrays on CPU . <EoL>
<BoL> Applies backprop to output gradient arrays on GPU . <EoL>
<BoL> Checks types of input data before forward propagation . <EoL>
<BoL> Unregisters the specified function hook . <EoL>
<BoL> Applies forward propagation to input arrays . <EoL>
<BoL> Applies forward propagation to input arrays on CPU . <EoL>
<BoL> Applies forward propagation to input arrays on GPU . <EoL>
<BoL> Lets specified input variable nodes keep data arrays . <EoL>
<BoL> Lets specified output variable nodes keep data arrays . <EoL>
<BoL> Purges in/out nodes and this function itself from the graph . <EoL>
<BoL> Registers a function hook . <EoL>
<BoL> Computes output variables and grows the computational graph . <EoL>
<BoL> Unregisters the function hook . <EoL>
<BoL> Computes the output arrays from the input NumPy arrays . <EoL>
<BoL> Computes the output arrays from the input CuPy arrays . <EoL>
<BoL> Returns a tuple of retained input variables . <EoL>
<BoL> Returns a tuple of retained output variables . <EoL>
<BoL> Lets specified input variable nodes keep data arrays . <EoL>
<BoL> Lets specified output variable nodes keep data arrays . <EoL>
<BoL> Purges in/out nodes and this function node itself from the graph . <EoL>
<BoL> Callback function invoked when the function hook is registered <EoL>
<BoL> Callback function invoked after backward propagation . <EoL>
<BoL> Callback function invoked before backward propagation . <EoL>
<BoL> Callback function invoked when the function hook is unregistered <EoL>
<BoL> Callback function invoked after forward propagation . <EoL>
<BoL> Callback function invoked before forward propagation . <EoL>
<BoL> Computes gradients w.r.t.\\ specified inputs given output gradients . <EoL>
<BoL> Checks types of input data before forward propagation . <EoL>
<BoL> Computes the output arrays from the input arrays . <EoL>
<BoL> Registers a hook function . <EoL>
<BoL> Invokes hook functions in registration order . <EoL>
<BoL> Creates a new update rule object . <EoL>
<BoL> Starts a new epoch . <EoL>
<BoL> Reallocate gradients cleared by : meth : ` ~chainer.Variable.cleargrad ` . <EoL>
<BoL> Removes a hook function . <EoL>
<BoL> Serializes or deserializes the optimizer . <EoL>
<BoL> Sets loss scaling factor . <EoL>
<BoL> Updates parameters based on a loss function or computed gradients . <EoL>
<BoL> Enables or disables use of : func : ` ~chainer.Link.cleargrads ` in ` update ` . <EoL>
<BoL> Enables use of parameter update in fp32 . <EoL>
<BoL> Initializes given array . <EoL>
<BoL> Accumulates gradient values from given link . <EoL>
<BoL> Returns a generator of all child links . <EoL>
<BoL> Copies the link hierarchy to new one . <EoL>
<BoL> Copies all parameters from given link . <EoL>
<BoL> Returns a generator of all links under the hierarchy . <EoL>
<BoL> Returns a generator of all ( path , link ) pairs under the hierarchy . <EoL>
<BoL> Returns a generator of all ( path , param ) pairs under the hierarchy . <EoL>
<BoL> Returns a generator of all parameters under the link hierarchy . <EoL>
<BoL> Serializes the link object . <EoL>
<BoL> Copies parameter variables and persistent values to CPU . <EoL>
<BoL> Copies parameter variables and persistent values to GPU . <EoL>
<BoL> Copies parameter variables and persistent values to CPU . <EoL>
<BoL> Callback function invoked when the link hook is registered <EoL>
<BoL> Callback function invoked when the link hook is unregistered <EoL>
<BoL> Callback function invoked after a forward call of a link . <EoL>
<BoL> Callback function invoked before a forward call of a link . <EoL>
<BoL> Invokes hook functions in registration order . <EoL>
<BoL> Sets a target link and initializes the optimizer states . <EoL>
<BoL> Updates the parameters . <EoL>
<BoL> Element-wise absolute . <EoL>
<BoL> Element-wise addition . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise division <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise floor division . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Extract elements from array with specified shape , axes and offsets . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Returns the first dimension of the data array . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Matrix multiplication . <EoL>
<BoL> Element-wise multiplication . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise negation . <EoL>
<BoL> This operator is not defined for Variable . <EoL>
<BoL> Element-wise power function . <EoL>
<BoL> Element-wise division . <EoL>
<BoL> Element-wise floor division . <EoL>
<BoL> Matrix multiplication . <EoL>
<BoL> Element-wise power function . <EoL>
<BoL> Element-wise subtraction . <EoL>
<BoL> Element-wise subtraction . <EoL>
<BoL> Accumulates the gradient array from given source variable . <EoL>
<BoL> Copies the data array from given source variable . <EoL>
<BoL> Display a summary of the stored data and location of the Variable { summary } - device : { device } - backend : { backend } - shape : { shape } - dtype : { dtype } - statistics : { stats } - grad : { grad } <EoL>
<BoL> Initializes the uninitialized variable . <EoL>
<BoL> Returns a variable of a different shape and the same content . <EoL>
<BoL> Lets the corresponding variable node keep the underlying array . <EoL>
<BoL> Notifies the variable that the given function is its creator . <EoL>
<BoL> Notifies the variable that the given node is its creator . <EoL>
<BoL> Permute the dimensions of an input variable without copy . <EoL>
<BoL> Deletes the reference to the creator of this variable . <EoL>
<BoL> Deletes references between variable nodes and functions backward . <EoL>
<BoL> Updates the data array using the gradient and the update rule . <EoL>
<BoL> Makes this reporter object current . <EoL>
<BoL> Recovers the previous reporter object to the current . <EoL>
<BoL> Registers an observer of values . <EoL>
<BoL> Registers multiple observers at once . <EoL>
<BoL> Reports observed values . <EoL>
<BoL> Creates a scope to report observed values to `` observation `` . <EoL>
<BoL> Count the number of layers by layer type . <EoL>
<BoL> Flatten nested : class : ` ~chainer.Sequential ` links . <EoL>
<BoL> Forward pass computation . <EoL>
<BoL> Remove layers by layer type . <EoL>
<BoL> Saves an object by this serializer . <EoL>
<BoL> Adds a scalar value . <EoL>
<BoL> Computes the mean . <EoL>
<BoL> Computes and returns the mean and standard deviation values . <EoL>
<BoL> Adds a hook function . <EoL>
<BoL> Initializes the state . <EoL>
<BoL> Removes the specified hook function . <EoL>
<BoL> Serializes the update rule state . <EoL>
<BoL> Invokes hook functions and updates the parameter . <EoL>
<BoL> Updates the parameter . <EoL>
<BoL> Updates the parameter on CPU . <EoL>
<BoL> Updates the parameter on GPU . <EoL>
<BoL> Enables use of parameter update in fp32 . <EoL>
<BoL> Clears the gradient array . <EoL>
<BoL> Copies the data and gradient arrays to CPU . <EoL>
<BoL> Copies the data and gradient arrays to specified GPU . <EoL>
<BoL> Copies the data and gradient arrays to intel64 specific mdarray . <EoL>
<BoL> Initializes the gradient array by zeros . <EoL>
<BoL> Broadcast given variables . <EoL>
<BoL> Broadcast a given variable to a given shape . <EoL>
<BoL> Cast an input variable to a given type . <EoL>
<BoL> Concatenates given variables along an axis . <EoL>
<BoL> Copies the input variable onto the specified device . <EoL>
<BoL> Computes the depth2space transformation for subpixel calculations . <EoL>
<BoL> Take diagonal <EoL>
<BoL> Concatenate variables along third axis ( depth wise ) . <EoL>
<BoL> Expands dimensions of an input variable without copy . <EoL>
<BoL> Flatten a given array into one dimension . <EoL>
<BoL> Flips an input variable in reverse order along the given axis . <EoL>
<BoL> Flip array in the left/right direction . <EoL>
<BoL> Flip array in the up/down direction . <EoL>
<BoL> Concatenate variables horizontally ( column wise ) . <EoL>
<BoL> Extract patches from an image based on the filter . <EoL>
<BoL> Move the source axes to the destination . <EoL>
<BoL> Pad an input variable . <EoL>
<BoL> Pad given arrays to make a matrix . <EoL>
<BoL> Permutates a given variable along an axis . <EoL>
<BoL> Construct an array by repeating a given array . <EoL>
<BoL> Reshapes an input variable without copy . <EoL>
<BoL> Resize images to the given shape . <EoL>
<BoL> Roll the axis backwards to the given position . <EoL>
<BoL> Adds given values to specified elements of an array . <EoL>
<BoL> Select elements stored in given indices . <EoL>
<BoL> Separates an array along a given axis . <EoL>
<BoL> Computes the space2depth transformation for subpixel calculations . <EoL>
<BoL> 2D Spatial Transformer grid . <EoL>
<BoL> 2D Spatial Transformer sampler . <EoL>
<BoL> Make the output of np.split compatible with numpy > = 1.11 <EoL>
<BoL> Checks and convert `` indices_or_sections `` argument <EoL>
<BoL> Splits given variables along an axis . <EoL>
<BoL> Remove demensions of size one from the shape of a ndarray . <EoL>
<BoL> Concatenate variables along a new axis . <EoL>
<BoL> Swap two axes of a variable . <EoL>
<BoL> Construct an array by tiling a given array . <EoL>
<BoL> Permute the dimensions of an input variable without copy . <EoL>
<BoL> Transpose a list of Variables . <EoL>
<BoL> Concatenate variables vertically ( row wise ) . <EoL>
<BoL> Choose elements depending on condition . <EoL>
<BoL> Converts an array or a variable into : class : ` ~chainer.Variable ` . <EoL>
<BoL> Returns whether the input array has NaN values . <EoL>
<BoL> Copies the elements of an ndarray to those of another one . <EoL>
<BoL> Checks if CUDA is available . <EoL>
<BoL> Clears the memoized results for all functions decorated by memoize . <EoL>
<BoL> Copies a : class : ` cupy.ndarray ` object using the default stream . <EoL>
<BoL> Creates an elementwise kernel function . <EoL>
<BoL> Function fusing decorator . <EoL>
<BoL> Gets an appropriate one from : mod : ` numpy ` or : mod : ` cupy ` . <EoL>
<BoL> Gets the device from a device object , an ID integer or an array object . <EoL>
<BoL> Gets the device from a list of CuPy array or a single CuPy array . <EoL>
<BoL> Gets the device from an ID integer . <EoL>
<BoL> Gets the workspace size for cuDNN . <EoL>
<BoL> Makes a function memoizing the result for each argument and device . <EoL>
<BoL> Creates a raw kernel function . <EoL>
<BoL> Sets the workspace size for cuDNN . <EoL>
<BoL> Determines if we should use cuDNN . <EoL>
<BoL> Determines if Tensor Core should be used . <EoL>
<BoL> Copies the given GPU array to host CPU . <EoL>
<BoL> Copies the given CPU array to the specified device . <EoL>
<BoL> Gets an appropriate one from : mod : ` numpy ` or : mod : ` cupy ` . <EoL>
<BoL> Checks if iDeep is available . <EoL>
<BoL> Checks if input arrays are supported for an iDeep primitive . <EoL>
<BoL> Returns if iDeep is available . <EoL>
<BoL> Determines if we should use iDeep . <EoL>
<BoL> Converts graph in dot format . <EoL>
<BoL> Dumps graph as a text . <EoL>
<BoL> show ( file=sys.stdout ) <EoL>
<BoL> show ( file=sys.stdout ) <EoL>
<BoL> using_config ( name , value , config=chainer.config ) <EoL>
<BoL> Computes Cross entropy . <EoL>
<BoL> Concatenate data and transfer them to GPU asynchronously . <EoL>
<BoL> Returns an example or a sequence of examples . <EoL>
<BoL> Returns the number of data points . <EoL>
<BoL> Returns the i-th example . <EoL>
<BoL> With statement context manager method <EoL>
<BoL> With statement context manager method <EoL>
<BoL> Returns self . <EoL>
<BoL> Returns the next batch . <EoL>
<BoL> Finalizes the iterator and possibly releases the resources . <EoL>
<BoL> Python2 alternative of `` __next__ `` . <EoL>
<BoL> Serializes the internal state of the iterator . <EoL>
<BoL> Caches a file if it does not exist , or loads it otherwise . <EoL>
<BoL> Downloads a file and caches it . <EoL>
<BoL> Concatenates a list of examples into array ( s ) . <EoL>
<BoL> Returns the array of data transferred to a target device asynchronously . <EoL>
<BoL> Initiates asynchronous transfer of an array to a target device . <EoL>
<BoL> Send an array to a given device . <EoL>
<BoL> Gets the path to the directory of given dataset . <EoL>
<BoL> Gets the path to the root directory to download and cache datasets . <EoL>
<BoL> Sets the root directory to download and cache datasets . <EoL>
<BoL> Closes a file reader . <EoL>
<BoL> Manually closes all text files . <EoL>
<BoL> Gets the CIFAR-10 dataset . <EoL>
<BoL> Gets the CIFAR-100 dataset . <EoL>
<BoL> Provide a list of the string value names of the labels . <EoL>
<BoL> Creates a set of training/test splits for cross validation . <EoL>
<BoL> Creates a set of training/test splits for cross validation randomly . <EoL>
<BoL> Gets the Penn Tree Bank dataset as long word sequences . <EoL>
<BoL> Gets the Penn Tree Bank word vocabulary . <EoL>
<BoL> Opens a dataset stored in a given path . <EoL>
<BoL> Opens a writer to make a PickleDataset . <EoL>
<BoL> Splits a dataset into two subsets . <EoL>
<BoL> Splits a dataset into `` n `` subsets . <EoL>
<BoL> Splits a dataset into `` n `` subsets randomly . <EoL>
<BoL> Splits a dataset into two subsets randomly . <EoL>
<BoL> Computes Kullback-Leibler divergence . <EoL>
<BoL> Decorator to register KL divergence function . <EoL>
<BoL> Make a context manager which enables back-propagation . <EoL>
<BoL> Perform checks needed for creation of a static schedule.Auto-wrap the supplied function . <EoL>
<BoL> Make a context manager which disables back-propagation . <EoL>
<BoL> Returns a human redable bytes string . <EoL>
<BoL> Prints a summary report of memory profiling in functions . <EoL>
<BoL> Returns a summary of memory profiling in functions . <EoL>
<BoL> Returns total bytes that cupy memory pool acquired from GPU . <EoL>
<BoL> Returns total bytes that functions used from cupy memory pool . <EoL>
<BoL> Returns a human readable time . <EoL>
<BoL> Prints a summary report of time profiling in functions . <EoL>
<BoL> Returns a summary of time profiling in functions . <EoL>
<BoL> Returns total elapsed time in seconds . <EoL>
<BoL> Element-wise absolute error function . <EoL>
<BoL> Computes multiclass classification accuracy of the minibatch . <EoL>
<BoL> Clipped Rectifier Unit function . <EoL>
<BoL> Concatenated Rectified Linear Unit function . <EoL>
<BoL> Exponential Linear Unit function . <EoL>
<BoL> Element-wise hard-sigmoid function . <EoL>
<BoL> Leaky Rectified Linear Unit function . <EoL>
<BoL> Channel-wise log-softmax function . <EoL>
<BoL> Long Short-Term Memory units as an activation function . <EoL>
<BoL> Maxout activation function . <EoL>
<BoL> Parametric ReLU function . <EoL>
<BoL> Rectified Linear Unit function . <EoL>
<BoL> elu ( x , l=1 . / 8 , u=1 . / 3 , * , r=None , return_r=False ) <EoL>
<BoL> Element-wise sigmoid logistic function . <EoL>
<BoL> S-LSTM units as an activation function . <EoL>
<BoL> Softmax function . <EoL>
<BoL> Element-wise softplus function . <EoL>
<BoL> Swish activation function . <EoL>
<BoL> Elementwise hyperbolic tangent function . <EoL>
<BoL> Extract gates by split . <EoL>
<BoL> TreeLSTM unit as an activation function . <EoL>
<BoL> Elementwise arccosine function . <EoL>
<BoL> Elementwise arcsine function . <EoL>
<BoL> Elementwise arctangent function . <EoL>
<BoL> Elementwise arctangent function with two arguments . <EoL>
<BoL> Returns index which holds maximum of array elements over a given axis . <EoL>
<BoL> Computes a state that maximizes a joint probability of the given CRF . <EoL>
<BoL> Returns index which holds minimum of array elements over a given axis . <EoL>
<BoL> Calculate weighted average of array elements over a given axis . <EoL>
<BoL> 1-dimensional spatial average pooling function . <EoL>
<BoL> Spatial average pooling function . <EoL>
<BoL> 3-dimensional spatial average pooling function . <EoL>
<BoL> N-dimensionally spatial average pooling function . <EoL>
<BoL> Computes the determinant of a batch of square matrices . <EoL>
<BoL> Computes the inverse of a batch of square matrices . <EoL>
<BoL> L2 norm ( a.k.a.\\ Euclidean norm ) squared . <EoL>
<BoL> Computes the batch matrix multiplications of two sets of arrays . <EoL>
<BoL> Computes the negative log-likelihood of a Bernoulli distribution . <EoL>
<BoL> Elementwise summation with broadcasting . <EoL>
<BoL> Applies a bilinear function based on given parameters . <EoL>
<BoL> Computes binary classification accuracy of the minibatch . <EoL>
<BoL> BlackOut loss function . <EoL>
<BoL> Elementwise ceil function . <EoL>
<BoL> Calculates Precision , Recall , F beta Score , and support . <EoL>
<BoL> Clips ( limits ) elements of input variable . <EoL>
<BoL> Calculates and stores ` outh ` and ` outw ` . <EoL>
<BoL> Two-dimensional deformable convolution function using computed offset . <EoL>
<BoL> Two-dimensional depthwise convolution function . <EoL>
<BoL> Efficient linear function for one-hot input . <EoL>
<BoL> Linear function , or affine transformation . <EoL>
<BoL> Decorator to mark a function for inclusion in the static schedule . <EoL>
<BoL> Two-dimensional local convolution function . <EoL>
<BoL> Make an array of pointers denoting pointers of tensor descriptors . <EoL>
<BoL> Shift function . <EoL>
<BoL> Computes contrastive loss . <EoL>
<BoL> Elementwise cos function . <EoL>
<BoL> Elementwise hyperbolic cosine function . <EoL>
<BoL> Calculates negative log-likelihood of linear-chain CRF . <EoL>
<BoL> Computes the sum-squared cross-covariance penalty between `` y `` and `` z `` <EoL>
<BoL> Cumulative prod of array elements over a given axis . <EoL>
<BoL> Cumulative sum of array elements over a given axis . <EoL>
<BoL> Computes the DeCov loss of `` h `` <EoL>
<BoL> Computes the determinant of a single square matrix . <EoL>
<BoL> Digamma function . <EoL>
<BoL> dropout ( x , ratio=.5 , * , mask=None , return_mask=False ) <EoL>
<BoL> Einstein summation <EoL>
<BoL> Elementwise error function . <EoL>
<BoL> Elementwise complementary error function . <EoL>
<BoL> Elementwise inverse function of complementary error function . <EoL>
<BoL> Elementwise scaled complementary error function . <EoL>
<BoL> Elementwise inverse function of error function . <EoL>
<BoL> Computes R^2 ( coefficient of determination ) regression score function . <EoL>
<BoL> Elementwise exponential function . <EoL>
<BoL> Elementwise exponential minus one function . <EoL>
<BoL> Fast Fourier transform . <EoL>
<BoL> Elementwise fix function . <EoL>
<BoL> Batch normalization function with fixed statistics . <EoL>
<BoL> Elementwise floor function . <EoL>
<BoL> Elementwise mod function . <EoL>
<BoL> Calls a function without storing intermediate results . <EoL>
<BoL> gaussian ( mean , ln_var , * , eps=None , return_eps=False ) <EoL>
<BoL> Computes the KL-divergence of Gaussian variables from the standard one . <EoL>
<BoL> Computes the negative log-likelihood of a Gaussian distribution . <EoL>
<BoL> Group normalization function . <EoL>
<BoL> Gumbel-Softmax sampling function . <EoL>
<BoL> Computes the hinge loss for a one-of-many classification task . <EoL>
<BoL> Computes the Huber loss . <EoL>
<BoL> Just returns input variables . <EoL>
<BoL> Inverse fast Fourier transform . <EoL>
<BoL> Computes the inverse of square matrix . <EoL>
<BoL> Layer normalization . <EoL>
<BoL> logarithm of gamma function . <EoL>
<BoL> Elementwise linear-interpolation function . <EoL>
<BoL> Local response normalization across neighboring channels . <EoL>
<BoL> Elementwise natural logarithm function . <EoL>
<BoL> Elementwise logarithm function to the base 10 . <EoL>
<BoL> Elementwise natural logarithm plus one function . <EoL>
<BoL> Elementwise logarithm function to the base 2 . <EoL>
<BoL> Logarithm of cumulative distribution function of normal distribution . <EoL>
<BoL> Log-sum-exp of array elements over a given axis . <EoL>
<BoL> Flips a label probability matrix . <EoL>
<BoL> Flips label sequence . <EoL>
<BoL> Flips a path probability matrix . <EoL>
<BoL> Args : embeddings ( : class : ` ~chainer.Variable ` or : class : ` numpy.ndarray ` \ or : class : ` cupy.ndarray ` ) : \ predicted embedding vectors ( batch size , max embedding dimensions , height , width ) <EoL>
<BoL> Sum of array elements over a given axis . <EoL>
<BoL> Elementwise square root function . <EoL>
<BoL> Mean absolute error function . <EoL>
<BoL> Mean squared error function . <EoL>
<BoL> Negative sampling loss function . <EoL>
<BoL> Computes cross entropy loss for pre-sigmoid activations . <EoL>
<BoL> Squared error function . <EoL>
<BoL> Computes triplet loss . <EoL>
<BoL> Parses einsum operands . <EoL>
<BoL> Elementwise hyperbolic sine function . <EoL>
<BoL> Creates an array of pointers to matrices <EoL>
<BoL> Computes the matrix multiplication of two arrays . <EoL>
<BoL> Element-wise maximum of input variables . <EoL>
<BoL> Element-wise minimum of input variables . <EoL>
<BoL> Maximum of array elements over a given axis . <EoL>
<BoL> Minimum of array elements over a given axis . <EoL>
<BoL> Elementwise cumulative distribution function of normal distribution . <EoL>
<BoL> Elementwise inverse function of ndtr . <EoL>
<BoL> Polygamma function . <EoL>
<BoL> Product of array elements over a given axis . <EoL>
<BoL> Elementwise product with broadcasting . <EoL>
<BoL> Elementwise sign function . <EoL>
<BoL> Computes the batched multiplication of sparse and dense matrix . <EoL>
<BoL> Computes elementwise reciprocal of square root of input : math : ` x_i ` . <EoL>
<BoL> Elementwise square function . <EoL>
<BoL> Squared difference of input variables . <EoL>
<BoL> Sum elements along axes to output an array of a given shape . <EoL>
<BoL> Returns the tensor dot product of two arrays along specified axes . <EoL>
<BoL> Elementwise sin function . <EoL>
<BoL> Elementwise tan function . <EoL>
<BoL> zoneout ( h , x , ratio=.5 ) <EoL>
<BoL> L2 norm squared ( a.k.a.\\ Euclidean norm ) . <EoL>
<BoL> Spatial Region of Interest ( ROI ) pooling function . <EoL>
<BoL> Spatial pyramid pooling function . <EoL>
<BoL> Inverse operation of pooling for 2d array . <EoL>
<BoL> Inverse operation of 1-dimensional spatial pooling . <EoL>
<BoL> Inverse operation of 3-dimensional spatial pooling . <EoL>
<BoL> Inverse operation of N-dimensional spatial pooling . <EoL>
<BoL> Returns the current reporter object . <EoL>
<BoL> Resolves Chainer 's default dtype . <EoL>
<BoL> Make and return a new empty ndarray . <EoL>
<BoL> Run post-hooks . <EoL>
<BoL> Run hooks to set correct references . <EoL>
<BoL> Make in-use schedules available for use in next iteration . <EoL>
<BoL> Get a static schedule . <EoL>
<BoL> Append a function to the static schedule . <EoL>
<BoL> Build the static schedule . <EoL>
<BoL> Return the array index if it exists . <EoL>
<BoL> Return True if this schedule is empty . <EoL>
<BoL> Run hooks to update variable array references . <EoL>
<BoL> Run hooks to update output variable array references . <EoL>
<BoL> Update parameter attributes after schedule is executed . <EoL>
<BoL> Run parameter reference updater hooks . <EoL>
<BoL> Set output variables . <EoL>
<BoL> Flatten the input into a tuple of variables . <EoL>
<BoL> Decorator to mark a Chain 's `` __call__ ( ) `` as a static sub-graph . <EoL>
<BoL> Return initialized array . <EoL>
<BoL> Returns if the debug mode is enabled or not in the current thread . <EoL>
<BoL> Sample the next order . <EoL>
<BoL> Resets the population count for collecting population statistics . <EoL>
<BoL> Applies broadcasted elementwise summation . <EoL>
<BoL> Applies the bilinear function to inputs and the internal parameters . <EoL>
<BoL> Makes a Huffman tree from a dictionary containing word counts . <EoL>
<BoL> Computes the loss value for given input and ground truth labels . <EoL>
<BoL> Computes the loss value for given input and ground truth labels . <EoL>
<BoL> Computes a state that maximizes a joint probability . <EoL>
<BoL> Returns new cell state and output of Child-Sum TreeLSTM . <EoL>
<BoL> Computes the loss value for an input and label pair . <EoL>
<BoL> Applies N-dimensional convolution layer . <EoL>
<BoL> Applies the convolution layer . <EoL>
<BoL> Applies the deformable convolution . <EoL>
<BoL> Applies the depthwise convolution layer . <EoL>
<BoL> Applies the convolution layer . <EoL>
<BoL> Extracts the word embedding of given IDs . <EoL>
<BoL> forward ( self , x ) <EoL>
<BoL> Converts a pre-trained caffemodel to a chainer model . <EoL>
<BoL> extract ( self , images , layers= [ 'pool5 ' ] , size= ( 224 , 224 ) ) <EoL>
<BoL> forward ( self , x , layers= [ 'prob ' ] ) <EoL>
<BoL> Computes all the probabilities of given images . <EoL>
<BoL> Apply group normalization to given input . <EoL>
<BoL> Computes the output of the Highway module . <EoL>
<BoL> Computes the output of the Inception module . <EoL>
<BoL> Applies the linear layer . <EoL>
<BoL> Applies the local convolution layer . <EoL>
<BoL> Computes the output of the mlpconv layer . <EoL>
<BoL> Applies the maxout layer . <EoL>
<BoL> Returns new cell state and output of N-ary TreeLSTM . <EoL>
<BoL> Computes the loss value for given input and ground truth labels . <EoL>
<BoL> Applies the parametric ReLU activation function . <EoL>
<BoL> Converts a pre-trained caffemodel to a chainer model . <EoL>
<BoL> extract ( self , images , layers= [ 'pool5 ' ] , size= ( 224 , 224 ) ) <EoL>
<BoL> forward ( self , x , layers= [ 'prob ' ] ) <EoL>
<BoL> Computes all the probabilities of given images . <EoL>
<BoL> Applies broadcasted elementwise product . <EoL>
<BoL> Updates the internal state and returns the LSTM outputs . <EoL>
<BoL> Resets the internal states . <EoL>
<BoL> Updates the internal state and returns the LSTM outputs . <EoL>
<BoL> Resets the internal state . <EoL>
<BoL> Sets the internal state . <EoL>
<BoL> Returns new cell state and updated output of LSTM . <EoL>
<BoL> Converts a pre-trained caffemodel to a chainer model . <EoL>
<BoL> extract ( self , images , layers= [ 'fc7 ' ] , size= ( 224 , 224 ) ) <EoL>
<BoL> forward ( self , x , layers= [ 'prob ' ] ) <EoL>
<BoL> Computes all the probabilities of given images . <EoL>
<BoL> Calls RNN function . <EoL>
<BoL> forward ( self , hx , xs ) <EoL>
<BoL> Calls RNN function . <EoL>
<BoL> forward ( self , hx , cx , xs ) <EoL>
<BoL> Converts the given image to the numpy array for GoogLeNet . <EoL>
<BoL> Converts the given image to the numpy array for ResNets . <EoL>
<BoL> Converts the given image to the numpy array for VGG models . <EoL>
<BoL> Converts the hyperparameter into a dictionary . <EoL>
<BoL> Time-dependent annealed Gaussian noise function from the paper : <EoL>
<BoL> Reports observed values with the current reporter object . <EoL>
<BoL> Returns a report scope with the current reporter . <EoL>
<BoL> Loads an object from the file in HDF5 format . <EoL>
<BoL> Saves an object to the file in HDF5 format . <EoL>
<BoL> Loads an object from the file in NPZ format . <EoL>
<BoL> Saves an object to the file in NPZ format . <EoL>
<BoL> Enables or disables the debug mode in the current thread . <EoL>
<BoL> Invokes the extension . <EoL>
<BoL> Finalizes the extension . <EoL>
<BoL> Initializes up the trainer state . <EoL>
<BoL> Serializes the extension state . <EoL>
<BoL> Decides whether the extension should be called on this iteration . <EoL>
<BoL> Finalizes the updater object . <EoL>
<BoL> Gets a dictionary of all optimizers for this updater . <EoL>
<BoL> Gets the dataset iterator of given name . <EoL>
<BoL> Gets the optimizer of given name . <EoL>
<BoL> Serializes the current state of the updater object . <EoL>
<BoL> Updates the parameters of the target model . <EoL>
<BoL> Connects the updater to the trainer that will call it . <EoL>
<BoL> Returns the extension of a given name . <EoL>
<BoL> Executes the training loop . <EoL>
<BoL> Finalizes the updater object . <EoL>
<BoL> Gets a dictionary of all optimizers for this updater . <EoL>
<BoL> Gets the optimizer of given name . <EoL>
<BoL> Serializes the current state of the updater object . <EoL>
<BoL> Updates the parameters of the target model . <EoL>
<BoL> Executes the evaluator extension . <EoL>
<BoL> Evaluates the model and returns a result dictionary . <EoL>
<BoL> Finalizes the evaluator object . <EoL>
<BoL> Returns a dictionary of all iterators . <EoL>
<BoL> Returns a dictionary of all target links . <EoL>
<BoL> Returns the iterator of the given name . <EoL>
<BoL> Returns the target link of the given name . <EoL>
<BoL> Execute the statistics extension . <EoL>
<BoL> Register a function to compute a certain statistic . <EoL>
<BoL> Returns a trainer extension to take snapshots of a given object . <EoL>
<BoL> Returns a trainer extension to record the learning rate . <EoL>
<BoL> Returns a trainer extension to continuously record a value . <EoL>
<BoL> Convert *c* to an RGBA color . <EoL>
<BoL> Gets a trigger object . <EoL>
<BoL> Decides whether the extension should be called on this iteration . <EoL>
<BoL> Decides whether the training loop should be stopped . <EoL>
<BoL> Decides whether the extension should be called on this iteration . <EoL>
<BoL> Get data type for NCCL <EoL>
<BoL> Put together all gradient arrays and make a single array <EoL>
<BoL> Put together all gradient arrays and make a single array <EoL>
<BoL> Put back contents of the specified array to the related gradient arrays <EoL>
<BoL> Put back contents of the specified array to the related gradient arrays <EoL>
<BoL> Count total size of all gradient arrays of a given link <EoL>
<BoL> Returns a dense matrix format of this sparse matrix . <EoL>
<BoL> Generates a random sample based on given probabilities . <EoL>
<BoL> Make a sampler CPU mode . <EoL>
<BoL> Make a sampler GPU mode . <EoL>
<BoL> Convenient function to generate ` repr ` string with custom named data <EoL>
<BoL> Calculates output size of convolution . <EoL>
<BoL> Calculates output size of deconvolution . <EoL>
<BoL> Declares that user is using an experimental feature . <EoL>
<BoL> Check if a coo matrix with given row and col is C or F order . <EoL>
<BoL> Crop an image into center , corners , and mirror images . <EoL>
<BoL> Check if a coo matrix with given row and col is c_orde <EoL>
<BoL> Returns a single or a batch of matrices in COO format . <EoL>
<BoL> Evaluates the tree to get actual value . <EoL>
<BoL> Returns its length . <EoL>
<BoL> Returns an expression representing its length . <EoL>
<BoL> Assigns user friendly names for the input types . <EoL>
<BoL> Evaluates and tests all given expressions . <EoL>
<BoL> Checks if shapes can be broadcasted together . <EoL>
<BoL> Returns the corresponding : class : ` ~chainer.Variable ` object . <EoL>
<BoL> Returns the holding : class : ` ~chainer.Variable ` object or `` None `` . <EoL>
<BoL> Lets the node hold a reference to the underlying data array . <EoL>
<BoL> Sets a : class : ` ~chainer.Function ` object that created this node . <EoL>
<BoL> Sets a : class : ` ~chainer.FunctionNode ` object that created this node . <EoL>
<BoL> Deletes the reference to the creator of this variable node . <EoL>
<BoL> Return the string representation of a variable . <EoL>
<BoL> Return the string representation of a variable . <EoL>
<BoL> Render template to string . <EoL>
<BoL> Load and return a template file . <EoL>
<BoL> Poor man 's single-line pretty printer . <EoL>
<BoL> Yield all direct child nodes of *node* , that is , all fields that are nodes and all items of fields that are lists of nodes . <EoL>
<BoL> Yield a tuple of `` ( fieldname , value ) `` for each field in `` node._fields `` that is present on *node* . <EoL>
<BoL> Recursively yield all descendant nodes in the tree starting at *node* ( including *node* itself ) , in no specified order . This is useful if you only want to modify nodes in place and do n't care about the context . <EoL>
<BoL> Translation name . <EoL>
<BoL> Translation . <EoL>
<BoL> Converts value given by `` target `` to a string `` s `` if the target is a true value , otherwise `` None `` . <EoL>
<BoL> Converts value given by `` target `` to structure output . <EoL>
<BoL> Converts value given by `` target `` to text . <EoL>
<BoL> The strategy is to find possible expression strings and call the `` validate `` function of the parser to validate . <EoL>
<BoL> Computes source marker location string . <EoL>
<BoL> Insert the data passed from mapping into the text . <EoL>
<BoL> Translate text . <EoL>
<BoL> We coerce the iterable to a tuple and return an iterator after registering it in the repeat dictionary . <EoL>
<BoL> Get the iterator position as a lower-case letter <EoL>
<BoL> Parses a tal : define value . <EoL>
<BoL> Default implementation delegates to `` translate `` method . <EoL>
<BoL> Return statements that assign a value to `` target `` . <EoL>
<BoL> Assign expression string as a text value . <EoL>
<BoL> Assign expression string as object value . <EoL>
<BoL> Concatenate stream . <EoL>
<BoL> Mangles template filename into top-level Python module name . <EoL>
<BoL> If `` s `` is an instance of `` byte_string `` , return `` s.decode ( encoding , errors ) `` , otherwise return `` s `` <EoL>
<BoL> Return a valid Python script of an initializer for *attrs* . <EoL>
<BoL> Store attributes in : attr : ` characteristic_attributes ` on the class . <EoL>
<BoL> Return a list of : class : ` Attribute ` generated by creating new instances for all non-Attributes . <EoL>
<BoL> Create an init for *attrs* that does n't care about defaults , default factories , or argument validators . This is a common case thus it 's worth optimizing for . <EoL>
<BoL> Create return a list of lines that initialize *attrs* while honoring default values . <EoL>
<BoL> A convenience class decorator that allows to *selectively* apply : func : ` with_cmp ` , : func : ` with_repr ` , : func : ` with_init ` , and : func : ` immutable ` to avoid code duplication . <EoL>
<BoL> Class decorator that makes *attrs* of a class immutable.Immutability sentry automatically created by characteristic . <EoL>
<BoL> Strip leading underscores from *attribute_name* . <EoL>
<BoL> A class decorator that adds comparison methods based on *attrs*.Create a tuple of all values of *obj* 's *attrs*.Automatically created by characteristic.Automatically created by characteristic.Automatically created by characteristic.Automatically created by characteristic.Automatically created by characteristic.Automatically created by characteristic.Automatically created by characteristic . <EoL>
<BoL> A class decorator that wraps the `` __init__ `` method of a class and sets *attrs* using passed *keyword arguments* before calling the original `` __init__ `` . <EoL>
<BoL> A class decorator that adds a human readable `` __repr__ `` method to your class using *attrs*.Automatically created by characteristic . <EoL>
<BoL> Stop analyzing the current document and come up with a final prediction . <EoL>
<BoL> Takes a chunk of a document and feeds it through all of the relevant charset probers . <EoL>
<BoL> Reset the UniversalDetector and all of its probers back to their initial states . This is called by `` __init__ `` , so you only need to call this directly in between analyses of different documents . <EoL>
<BoL> feed a character with known length <EoL>
<BoL> eturn confidence based on existing data <EoL>
<BoL> eset analyser , clear any state <EoL>
<BoL> We define three types of bytes : alphabet : english alphabets [ a-zA-Z ] international : international characters [ \x80-\xFF ] marker : everything else [ ^a-zA-Z\x80-\xFF ] <EoL>
<BoL> Returns a copy of `` buf `` that retains only the sequences of English alphabet and high byte characters that are not between < > characters . Also retains English alphabet and high byte characters immediately before occurrences of > . <EoL>
<BoL> Detect the encoding of the given byte string . <EoL>
<BoL> : returns : The number of likelihood categories in the enum . <EoL>
<BoL> List all files versioned in Bazaar in the current directory . <EoL>
<BoL> List all files versioned by git in the current directory . <EoL>
<BoL> List all files under Mercurial control in the current directory . <EoL>
<BoL> List all files under SVN control in the current directory . <EoL>
<BoL> Is this entry interesting ? <EoL>
<BoL> Construct a new TextFile object . <EoL>
<BoL> Close the current file and forget everything we know about it ( filename , current line number ) . <EoL>
<BoL> Open a new file named 'filename ' . This overrides both the 'filename ' and 'file ' arguments to the constructor . <EoL>
<BoL> Read and return a single logical line from the current file ( or from an internal buffer if lines have previously been `` unread '' with 'unreadline ( ) ' ) . <EoL>
<BoL> Read and return the list of all logical lines remaining in the current file . <EoL>
<BoL> Push 'line ' ( a string ) onto an internal buffer that will be checked by future 'readline ( ) ' calls . Handy for implementing a parser with line-at-a-time lookahead . <EoL>
<BoL> Print ( to stderr ) a warning message tied to the current logical line in the current file . <EoL>
<BoL> Gather the various ignore patterns from a MANIFEST.in . <EoL>
<BoL> Gather the various ignore patterns from a MANIFEST.in . <EoL>
<BoL> Compile a glob pattern into a regexp . <EoL>
<BoL> Git/Mercurial/zip files omit directories , let 's add them back . <EoL>
<BoL> Add a prefix to each name in a file list . <EoL>
<BoL> Change the current working directory , temporarily . <EoL>
<BoL> Change a file 's mode by adding a few bits . <EoL>
<BoL> Copy a list of files to destdir , preserving directory structure . <EoL>
<BoL> Detect the version control system used for the current directory . <EoL>
<BoL> Extract version number from sdist filename . <EoL>
<BoL> Does this filename match any of the patterns ? <EoL>
<BoL> Does this filename match any of the regular expressions ? <EoL>
<BoL> Find files matching WARN_ABOUT_FILES_IN_VCS patterns . <EoL>
<BoL> Suggest MANIFEST.in patterns for missing files . <EoL>
<BoL> Return the list of files in an archive . <EoL>
<BoL> Return the pathname of the one file in a directory . <EoL>
<BoL> List all files under version control in the current directory . <EoL>
<BoL> Translate a shell-like glob pattern to a regular expression ; return a string containing the regex . Differs from 'fnmatch.translate ( ) ' in that '* ' does not match `` special characters '' ( which are platform-specific ) . <EoL>
<BoL> Is the directory the root of a Python package ? <EoL>
<BoL> Create a temporary directory , then clean it up . <EoL>
<BoL> Some VCS print directory names with trailing slashes . Strip them . <EoL>
<BoL> Normalize file names . <EoL>
<BoL> Read configuration from setup.cfg . <EoL>
<BoL> Read existing configuration from MANIFEST.in . <EoL>
<BoL> A version of rmtree that can deal with read-only files and directories . <EoL>
<BoL> Run a command [ cmd , arg1 , arg2 , ... ] . <EoL>
<BoL> Strip generated files that are only present in source distributions . <EoL>
<BoL> Strip toplevel name from a file list . <EoL>
<BoL> Make sure filename is Unicode . <EoL>
<BoL> Check the completeness of MANIFEST.in before the release . <EoL>
<BoL> Check whether the input is of nativ `` str `` type . <EoL>
<BoL> Return the byte string as native string in the given encoding . <EoL>
<BoL> Retrieve bytes out of memoryview/buffer or bytes . <EoL>
<BoL> Return the native string as bytes in the given encoding . <EoL>
<BoL> Return the native string as unicode with the given encoding . <EoL>
<BoL> Return error numbers for all errors in errnames on this platform . <EoL>
<BoL> Destructor . Calls close ( ) . <EoL>
<BoL> Context management protocol . Returns self ( an instance of IOBase ) . <EoL>
<BoL> Context management protocol . Calls close ( ) <EoL>
<BoL> Internal : raise a ValueError if file is closed <EoL>
<BoL> Internal : raise UnsupportedOperation if file is not readable <EoL>
<BoL> Internal : raise UnsupportedOperation if file is not seekable <EoL>
<BoL> Internal : raise UnsupportedOperation if file is not writable <EoL>
<BoL> Internal : raise an OSError exception for unsupported operations . <EoL>
<BoL> Read and return up to size bytes , where size is an int . <EoL>
<BoL> Read up to size bytes with at most one read ( ) system call , where size is an int . <EoL>
<BoL> Return a bool indicating whether object was opened for reading . <EoL>
<BoL> Read bytes into a pre-allocated bytes-like object b . <EoL>
<BoL> Read bytes into buffer *b* , using at most one system call <EoL>
<BoL> Read and return a line of bytes from the stream . <EoL>
<BoL> Return a list of lines from the stream . <EoL>
<BoL> Write bytes to buffer . <EoL>
<BoL> File object attached to a socket object . <EoL>
<BoL> Initialize faux file object . <EoL>
<BoL> Write all data from buffer to socket and reset write buffer . <EoL>
<BoL> Read data from the socket to buffer . <EoL>
<BoL> Read line from the socket to buffer . <EoL>
<BoL> Receive message of a size from the socket . <EoL>
<BoL> Send some part of message to the socket . <EoL>
<BoL> Sendall for non-blocking sockets . <EoL>
<BoL> Initialize socket stream reader . <EoL>
<BoL> Read data into *buf* with at most one system call . <EoL>
<BoL> Returns buffered bytes without advancing the position . <EoL>
<BoL> Read size bytes . <EoL>
<BoL> Reads up to size bytes , with at most one read ( ) system call . <EoL>
<BoL> Return a bool indicating whether object was opened for writing . <EoL>
<BoL> Write the given bytes buffer to the IO stream . <EoL>
<BoL> Initialize socket stream writer . <EoL>
<BoL> Initialize ChunkedRFile instance . <EoL>
<BoL> Release resources allocated for rfile . <EoL>
<BoL> Read a chunk from rfile buffer and return it . <EoL>
<BoL> Read HTTP headers and yield them . <EoL>
<BoL> Read a single line from rfile buffer and return it . <EoL>
<BoL> Read all lines from rfile buffer and return them . <EoL>
<BoL> Read headers from the given stream into the given header dict . <EoL>
<BoL> Initialize Gateway instance with request . <EoL>
<BoL> Process the current request . Must be overridden in a subclass . <EoL>
<BoL> Initialize HTTPConnection instance . <EoL>
<BoL> Close kernel socket in outdated Python versions . <EoL>
<BoL> Respond with an error . <EoL>
<BoL> Close the socket underlying this connection . <EoL>
<BoL> Read each request and respond appropriately . <EoL>
<BoL> Return the PID/UID/GID tuple of the peer socket for UNIX sockets.Non-Linux kernels do n't support SO_PEERCRED . <EoL>
<BoL> Return the username and group tuple of the peercreds if available . <EoL>
<BoL> Initialize HTTP request container instance . <EoL>
<BoL> Ensure headers are sent to the client if not already sent . <EoL>
<BoL> Parse the next HTTP request start-line and message-headers . <EoL>
<BoL> Read self.rfile into self.inheaders . Return success . <EoL>
<BoL> Read and parse first line of the HTTP request.This is a dummy check for unicode in URI.Absolute URI is only allowed within proxies.Path should start with a forward slash . <EoL>
<BoL> Call the gateway and write its iterable output . <EoL>
<BoL> Assert , process , and send the HTTP response message-headers . <EoL>
<BoL> Write a simple response back to the client . <EoL>
<BoL> Write unbuffered data to the client . <EoL>
<BoL> Render Server instance representing bind address . <EoL>
<BoL> Create ( or recreate ) the actual socket object . <EoL>
<BoL> Bind the socket to given interface . <EoL>
<BoL> Create ( or recreate ) a UNIX socket object.Trying to access socket.AF_UNIX under Windows causes an AttributeError.File does not exist , which is the primary goal anyway.Linux way of pre-populating fs mode permissions.FreeBSD/macOS pre-populating fs mode permissions . <EoL>
<BoL> Reset server stat counters.. <EoL>
<BoL> Write error message to log . <EoL>
<BoL> Prepare server to serving requests . <EoL>
<BoL> Create and prepare the socket object.Enable SO_REUSEADDR for the current socket . <EoL>
<BoL> Retrieve actual bind addr from bound socket.UNIX domain sockets are strings or bytes . <EoL>
<BoL> Return server uptime . <EoL>
<BoL> Run the server forever , and stop it cleanly on exit . <EoL>
<BoL> Serve requests , after invoking : func : ` prepare ( ) ` . <EoL>
<BoL> Run the server forever . <EoL>
<BoL> Gracefully shutdown a server that is serving forever . <EoL>
<BoL> Accept a new connection and put it on the Queue . <EoL>
<BoL> Initialize KnownLengthRFile instance . <EoL>
<BoL> Return file iterator . <EoL>
<BoL> Generate next file chunk . <EoL>
<BoL> Release resources allocated for rfile . <EoL>
<BoL> Read a chunk from rfile buffer and return it . <EoL>
<BoL> Read a single line from rfile buffer and return it . <EoL>
<BoL> Read all lines from rfile buffer and return them . <EoL>
<BoL> Initialize SizeCheckWrapper instance . <EoL>
<BoL> Return file iterator . <EoL>
<BoL> Generate next file chunk . <EoL>
<BoL> Release resources allocated for rfile . <EoL>
<BoL> Read a chunk from rfile buffer and return it . <EoL>
<BoL> Read a single line from rfile buffer and return it . <EoL>
<BoL> Read all lines from rfile buffer and return them . <EoL>
<BoL> Return an SSL adapter class for the given name . <EoL>
<BoL> Mark the given socket fd as non-inheritable ( POSIX ) . <EoL>
<BoL> Spawn new worker threads ( not above self.max ) . <EoL>
<BoL> Put request into queue . <EoL>
<BoL> Kill off worker threads ( not below self.min ) . <EoL>
<BoL> Start the pool of threads . <EoL>
<BoL> Terminate all worker threads . <EoL>
<BoL> Initialize WorkerThread instance . <EoL>
<BoL> Process incoming HTTP connections . <EoL>
<BoL> Call a WSGI-callable . <EoL>
<BoL> Initialize Application with given root . <EoL>
<BoL> Generate a representation of the Application instance . <EoL>
<BoL> Return the most-specific value for key along path , or default . <EoL>
<BoL> Create and return a Request and Response object . <EoL>
<BoL> Merge the given config into self.config . <EoL>
<BoL> Release the current serving ( request and response ) . <EoL>
<BoL> Use this exception as a request.handler ( raise self ) . <EoL>
<BoL> Translate exception into an HTTPError . <EoL>
<BoL> Modify cherrypy.response status , headers , and body to represent self . <EoL>
<BoL> Use this exception as a request.handler ( raise self ) . <EoL>
<BoL> Modify cherrypy.response status , headers , and body to represent self . <EoL>
<BoL> Compile-time decorator ( turn on the tool in config ) . <EoL>
<BoL> Return a dict of configuration entries for this Tool . <EoL>
<BoL> Copy func parameter names to obj attributes . <EoL>
<BoL> Hook this tool into cherrypy.request . <EoL>
<BoL> Log the given message to the app.log or global log . <EoL>
<BoL> Log an access message to the app.log or global log . <EoL>
<BoL> Close and reopen all file handlers . <EoL>
<BoL> Return now ( ) in Apache Common Log Format ( no timezone ) . <EoL>
<BoL> Add the handlers based on the platform . <EoL>
<BoL> Remove all attributes of self . <EoL>
<BoL> Given an object or a path to an object , get the object and its name . <EoL>
<BoL> Run all check_* methods . <EoL>
<BoL> Initialize Checker instance . <EoL>
<BoL> Process config and warn on each obsolete or deprecated entry . <EoL>
<BoL> Check for App config with extraneous brackets in section names . <EoL>
<BoL> Check for App config with sections that repeat script_name . <EoL>
<BoL> Process config and warn on each obsolete or deprecated entry . <EoL>
<BoL> Process config and warn on each unknown config namespace . <EoL>
<BoL> Assert that config values are of the same type as default values . <EoL>
<BoL> Warn if any socket_host is 'localhost ' . See # 711 . <EoL>
<BoL> Check for mounted Applications that have site-scoped config . <EoL>
<BoL> Check for mounted Applications that have no config . <EoL>
<BoL> Check Application config for incorrect static paths . <EoL>
<BoL> Format a warning . <EoL>
<BoL> Return the given native string as a byte string in the given encoding . <EoL>
<BoL> Return the given native string as a unicode string with the given encoding . <EoL>
<BoL> Return the given string as a native string in the given encoding . <EoL>
<BoL> Decorate for page handlers to set _cp_config . <EoL>
<BoL> Update self from a dict . <EoL>
<BoL> Reset self to default values . <EoL>
<BoL> Update self from a dict , file or filename . <EoL>
<BoL> Config handler for the `` engine '' namespace . <EoL>
<BoL> Register for autoreload if ob is a string ( presumed filename ) . <EoL>
<BoL> Config handler for the `` server '' namespace . <EoL>
<BoL> Namespace handler for the 'tree ' config namespace . <EoL>
<BoL> Merge one app config ( from a dict , file , or filename ) into another . <EoL>
<BoL> Set handler and config for the current request . <EoL>
<BoL> Return the appropriate page handler , plus any virtual path.Collapse all object_trail config into cherrypy.request.config . <EoL>
<BoL> Set handler and config for the current request . <EoL>
<BoL> Set handler and config for the current request . <EoL>
<BoL> Routes dispatcher <EoL>
<BoL> Find the right page handler , and set request.config . <EoL>
<BoL> Inspect callable and test to see if the given args are suitable for it . <EoL>
<BoL> Format a stack trace and the exception information . <EoL>
<BoL> If *obj* is iterable , return an iterator over its items : : <EoL>
<BoL> Produce status , headers , body for a critical error . <EoL>
<BoL> Decorator like classmethod to implement a static class property . <EoL>
<BoL> Remove any headers which should not apply to an error response . <EoL>
<BoL> Return exc ( or sys.exc_info if None ) , formatted . <EoL>
<BoL> Return an HTML page , containing a pretty error response . <EoL>
<BoL> Return now ( ) in RFC3339 UTC Format . <EoL>
<BoL> An alias for `` error `` . <EoL>
<BoL> Write to the access log ( in Apache/NCSA Combined Log format ) . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Flushes the stream . <EoL>
<BoL> Return a given byte encoded value as a string <EoL>
<BoL> Called if a more-specific processor is not found for the `` Content-Type `` . <EoL>
<BoL> Return this entity as a string , whether stored in a file or not . <EoL>
<BoL> Return a file-like object into which the request body will be read . <EoL>
<BoL> Execute the best-match processor for the given media type . <EoL>
<BoL> Read the request body into fp_out ( or make_file ( ) if None ) . <EoL>
<BoL> Called if a more-specific processor is not found for the `` Content-Type `` . <EoL>
<BoL> Read the request body into fp_out ( or make_file ( ) if None ) . <EoL>
<BoL> Read bytes from self.fp and return or write them to a file . <EoL>
<BoL> Process the request entity based on its Content-Type . <EoL>
<BoL> Read bytes from the request body and return or write them to a file . <EoL>
<BoL> Read a line from the request body and return it . <EoL>
<BoL> Read lines from the request body and return them . <EoL>
<BoL> The behavior of 3.2 and lower . Deprecated and will be changed in 3.3 . <EoL>
<BoL> Read all multipart parts into entity.parts . <EoL>
<BoL> Read all multipart/form-data parts into entity.parts or entity.params . <EoL>
<BoL> Read application/x-www-form-urlencoded data into entity.params . <EoL>
<BoL> Bytes version of urllib.parse.unquote_plus . <EoL>
<BoL> Run self.callback ( **self.kwargs ) . <EoL>
<BoL> Hooks sort by priority , ascending , such that hooks of lower priority are run first . <EoL>
<BoL> Append a new Hook made from the supplied arguments . <EoL>
<BoL> Execute all registered Hooks ( callbacks ) for the given point . <EoL>
<BoL> Return UUID4 and keep it for future calls . <EoL>
<BoL> Run cleanup code . ( Core ) <EoL>
<BoL> Call a dispatcher ( which sets self.handler and .config ) . ( Core ) <EoL>
<BoL> Handle the last unanticipated exception . ( Core ) <EoL>
<BoL> Parse HTTP header data into Python structures . ( Core ) <EoL>
<BoL> Parse the query string into Python structures . ( Core ) <EoL>
<BoL> Generate a response for the resource at self.path_info . ( Core ) <EoL>
<BoL> Process the Request . ( Core ) <EoL>
<BoL> Discard self.body but consume any generator such that any finalization can occur , such as is required by caching.tee_output ( ) . <EoL>
<BoL> Collapse self.body to a single string ; replace it and return it . <EoL>
<BoL> Transform headers ( and cookies ) into self.header_list . ( Core ) <EoL>
<BoL> Advance *iterable* by *n* steps . If *n* is `` None `` , consume it entirely . <EoL>
<BoL> Attach error pages declared in config . <EoL>
<BoL> Attach bare hooks declared in config . <EoL>
<BoL> Attach request attributes declared in config . <EoL>
<BoL> Attach response attributes declared in config . <EoL>
<BoL> Initialize Server instance . <EoL>
<BoL> HTTP servers MUST be running in new threads , so that the main thread persists to receive KeyboardInterrupt 's . If an exception is raised in the httpserver 's thread then it's trapped here , and the bus ( and therefore our httpserver ) are shut down . <EoL>
<BoL> Return the base for this server . <EoL>
<BoL> Return a ( httpserver , bind_addr ) pair based on self attributes . <EoL>
<BoL> Restart the HTTP server . <EoL>
<BoL> Start the HTTP server . <EoL>
<BoL> Stop the HTTP server . <EoL>
<BoL> Wait until the HTTP server is ready to receive requests . <EoL>
<BoL> Start the HTTP server . <EoL>
<BoL> Load a module and retrieve an attribute of that module . <EoL>
<BoL> Hook caching into cherrypy.request . <EoL>
<BoL> Hook this tool into cherrypy.request . <EoL>
<BoL> Hook this tool into cherrypy.request . <EoL>
<BoL> Use this tool as a CherryPy page handler . <EoL>
<BoL> Hook this tool into cherrypy.request . <EoL>
<BoL> Drop the current session and make a new one ( with a new id ) . <EoL>
<BoL> Populate request.toolmaps from tools specified in config . <EoL>
<BoL> Run tool._setup ( ) for each tool in our toolmap . <EoL>
<BoL> Return a decorator which registers the function at the given hook point . <EoL>
<BoL> Return the names of all static arguments to the given function . <EoL>
<BoL> Expose the function or class . <EoL>
<BoL> Pre-initialize WSGI env and call WSGI-callable . <EoL>
<BoL> Initialize registry Tree . <EoL>
<BoL> Mount a wsgi callable at the given script_name . <EoL>
<BoL> Mount a new app from a root object , script_name , and config . <EoL>
<BoL> Return the script_name of the app at the given path , or None . <EoL>
<BoL> Close and de-reference the current request and response . ( Core ) <EoL>
<BoL> Create a Request object using environ . <EoL>
<BoL> Translate CGI-environ header names to HTTP header names . <EoL>
<BoL> Config handler for the 'wsgi ' namespace . <EoL>
<BoL> WSGI application callable for the actual CherryPy application . <EoL>
<BoL> Return a new environ dict for WSGI 1.x from the given WSGI u.x environ . <EoL>
<BoL> Detect if the given object is both closable and iterator . <EoL>
<BoL> Return property value . <EoL>
<BoL> Initialize a class property descriptor . <EoL>
<BoL> Resolve given path from relative into absolute form . <EoL>
<BoL> Decorate _cp_dispatch . <EoL>
<BoL> Create an absolute URL for the given path . <EoL>
<BoL> Transform 'token ; key=val ' to ( 'token ' , { 'key ' : 'val ' } ) . <EoL>
<BoL> Return the client address . <EoL>
<BoL> Return the current date and time formatted for a message header . <EoL>
<BoL> Send the blank line ending the MIME headers . <EoL>
<BoL> Handle multiple requests if necessary . <EoL>
<BoL> Decide what to do with an `` Expect : 100-continue '' header . <EoL>
<BoL> Handle a single HTTP request . <EoL>
<BoL> Return the current time formatted for logging . <EoL>
<BoL> Log an error . <EoL>
<BoL> Log an arbitrary message . <EoL>
<BoL> Log an accepted request . <EoL>
<BoL> Parse a request ( internal ) . <EoL>
<BoL> Send and log an error reply . <EoL>
<BoL> Send a MIME header to the headers buffer . <EoL>
<BoL> Add the response header to the headers buffer and log the response code . <EoL>
<BoL> Send the response header only . <EoL>
<BoL> Return the server software version string . <EoL>
<BoL> Given a key , return the actual key stored in self that matches . Raise KeyError if the key is n't found . <EoL>
<BoL> Construct an instance from a string of the form 'token ; key=val ' . <EoL>
<BoL> Return a sorted list of HeaderElements for the given header . <EoL>
<BoL> Return the given header name or value , encoded for HTTP output . <EoL>
<BoL> Prepare the sequence of name , value tuples into a form suitable for transmitting on the wire for HTTP . <EoL>
<BoL> Transform self into a list of ( name , value ) tuples . <EoL>
<BoL> Return a sorted list of HeaderElement.value for the given header . <EoL>
<BoL> Parse a query given as a string argument . <EoL>
<BoL> Decode : rfc : ` 2047 ` TEXT <EoL>
<BoL> Decode the text but only if '= ? ' appears in it . <EoL>
<BoL> Decode a message header value without converting charset . <EoL>
<BoL> Return a list of ( start , stop ) indices from a Range header , or None . <EoL>
<BoL> Return a sorted HeaderElement list from a comma-separated header string . <EoL>
<BoL> Parse a Content-type like header . <EoL>
<BoL> Build a params dictionary from a query_string . <EoL>
<BoL> Return a protocol tuple from the given 'HTTP/x.y ' string . <EoL>
<BoL> Return the given path \*atoms , joined into a single URL . <EoL>
<BoL> Return the given path ` *atoms ` , joined into a single URL . <EoL>
<BoL> Return legal HTTP status Code , Reason-phrase and Message . <EoL>
<BoL> Encode the given object and yield each string representation as available . <EoL>
<BoL> Return the Python representation of `` s `` ( a `` str `` or `` unicode `` instance containing a JSON document ) <EoL>
<BoL> Encode to bytes . <EoL>
<BoL> A CherryPy tool which hooks at before_handler to perform HTTP Basic Access Authentication , as specified in : rfc : ` 2617 ` and : rfc : ` 7617 ` . <EoL>
<BoL> Returns a checkpassword function which checks credentials against a dictionary of the form : { username : password } . <EoL>
<BoL> The hash function H <EoL>
<BoL> Returns the H ( A2 ) string . See : rfc : ` 2617 ` section 3.2.2.3 . <EoL>
<BoL> Returns True if a validated nonce is stale . <EoL>
<BoL> Calculates the Request-Digest . See : rfc : ` 2617 ` section 3.2.2.1 . <EoL>
<BoL> Validate the nonce . Returns True if nonce was generated by synthesize_nonce ( ) and the timestamp is not spoofed , else returns False . <EoL>
<BoL> Respond with 401 status and a WWW-Authenticate header <EoL>
<BoL> A CherryPy tool that hooks at before_handler to perform HTTP Digest Access Authentication , as specified in : rfc : ` 2617 ` . <EoL>
<BoL> Returns a get_ha1 function which obtains a HA1 password hash from a dictionary of the form : { username : HA1 } . <EoL>
<BoL> Returns a get_ha1 function which obtains a plaintext password from a dictionary of the form : { username : password } . <EoL>
<BoL> Returns a get_ha1 function which obtains a HA1 password hash from a flat file with lines of the same format as that produced by the Apache htdigest utility . For example , for realm 'wonderland ' , username 'alice ' , and password '4x5istwelve ' , the htdigest line would be : : <EoL>
<BoL> Parse list of key=value strings where keys are not duplicated . <EoL>
<BoL> Synthesize a nonce value which resists spoofing and can be checked for staleness . Returns a string suitable as the value for 'nonce ' in the www-authenticate header . <EoL>
<BoL> Set the cached value for the given key . <EoL>
<BoL> Return the cached value for the given key , or None . <EoL>
<BoL> Reset the cache to its initial , empty state . <EoL>
<BoL> Remove ALL cached variants of the current resource . <EoL>
<BoL> Return the current variant if in the cache , else None . <EoL>
<BoL> Store the current variant in the cache . <EoL>
<BoL> Reset the cache to its initial , empty state . <EoL>
<BoL> Remove ALL cached variants of the current resource . <EoL>
<BoL> Continuously examine cached objects , expiring stale ones . <EoL>
<BoL> Return the current variant if in the cache , else None . <EoL>
<BoL> Store the current variant in the cache . <EoL>
<BoL> Tool for influencing cache mechanisms using the 'Expires ' header . <EoL>
<BoL> Try to obtain cached output . If fresh enough , raise HTTPError ( 304 ) . <EoL>
<BoL> Tee response output to cache storage . Internal.Tee response.body into a list . <EoL>
<BoL> Provide a temporary user name for anonymous users . <EoL>
<BoL> Assert username . Raise redirect , or return True if request handled . <EoL>
<BoL> Login . May raise redirect , or return True if request handled . <EoL>
<BoL> Logout . May raise redirect , or return True if request handled . <EoL>
<BoL> Return the client 's preferred media-type ( from the given Content-Types ) . <EoL>
<BoL> Raise 405 if request.method not in methods ( default [ 'GET ' , 'HEAD ' ] ) . <EoL>
<BoL> Auto-populate the Vary response header based on request.header access . <EoL>
<BoL> Convert request params based on function annotations , with error handling . <EoL>
<BoL> Wrap response.body in a generator that recursively iterates over body . <EoL>
<BoL> Delete request headers whose field names are included in 'headers ' . <EoL>
<BoL> Detect if the object provided implements the iterator protocol . <EoL>
<BoL> Write request.hooks to the cherrypy error log . <EoL>
<BoL> Write request headers to the cherrypy error log . <EoL>
<BoL> Write the last error 's traceback to the cherrypy error log . <EoL>
<BoL> Raise InternalRedirect or HTTPRedirect to the given url . <EoL>
<BoL> Set headers on the response . <EoL>
<BoL> Redirect if path_info has ( missing|extra ) trailing slash . <EoL>
<BoL> Validate the current ETag against If-Match , If-None-Match headers . <EoL>
<BoL> Validate the current Last-Modified against If-Modified-Since headers . <EoL>
<BoL> Encode a streaming response body . <EoL>
<BoL> Encode a buffered response body . <EoL>
<BoL> Compress 'body ' at the given compress_level . <EoL>
<BoL> Replace or extend the list of charsets used to decode a request entity . <EoL>
<BoL> Initialize file_generator with file `` input `` for chunked access . <EoL>
<BoL> Return iterator . <EoL>
<BoL> Return next chunk of file . <EoL>
<BoL> Ensure response body is iterable and resolves to False when empty . <EoL>
<BoL> Add a Vary header to a response . <EoL>
<BoL> Yield the given file object in chunks . <EoL>
<BoL> Read application/json data into request.json . <EoL>
<BoL> Return a timer that will expire after ` elapsed ` passes . <EoL>
<BoL> Iterate through config and pass it to each namespace handler . <EoL>
<BoL> Convert an INI file to a dictionary <EoL>
<BoL> Resolve 'input ' to dict from a dict , file , or filename . <EoL>
<BoL> Workaround for python 3.5 _ast.Call signature , docs found here https : //greentreesnakes.readthedocs.org/en/latest/nodes.html <EoL>
<BoL> Return a Python3 ast Node compiled from a string . <EoL>
<BoL> Load a module and retrieve a reference to that module . <EoL>
<BoL> Return a Python object compiled from a string . <EoL>
<BoL> Return the number of active sessions . <EoL>
<BoL> Acquire an exclusive lock on the currently-loaded session data . <EoL>
<BoL> Clean up expired sessions . <EoL>
<BoL> D.clear ( ) - > None . Remove all items from D . <EoL>
<BoL> Delete stored session data . <EoL>
<BoL> Return a new session id . <EoL>
<BoL> D.get ( k [ , d ] ) - > D [ k ] if k in D , else d. d defaults to None . <EoL>
<BoL> D.items ( ) - > list of D 's ( key , value ) pairs , as 2-tuples . <EoL>
<BoL> D.keys ( ) - > list of D 's keys . <EoL>
<BoL> Copy stored session data into this session instance . <EoL>
<BoL> Generate the session specific concept of 'now ' . <EoL>
<BoL> Remove the specified key and return the corresponding value . If key is not found , default is returned if given , otherwise KeyError is raised . <EoL>
<BoL> Replace the current session ( with a new id ) . <EoL>
<BoL> Release the lock on the currently-loaded session data . <EoL>
<BoL> Save session data . <EoL>
<BoL> D.setdefault ( k [ , d ] ) - > D.get ( k , d ) , also set D [ k ] =d if k not in D . <EoL>
<BoL> Set up the storage system for file-based sessions . <EoL>
<BoL> D.update ( E ) - > None . Update D from E : for k in E : D [ k ] = E [ k ] . <EoL>
<BoL> D.values ( ) - > list of D 's values . <EoL>
<BoL> Return the number of active sessions . <EoL>
<BoL> Acquire an exclusive lock on the currently-loaded session data . <EoL>
<BoL> Clean up expired sessions . <EoL>
<BoL> Release the lock on the currently-loaded session data . <EoL>
<BoL> Set up the storage system for memcached-based sessions . <EoL>
<BoL> Return the number of active sessions . <EoL>
<BoL> Acquire an exclusive lock on the currently-loaded session data . <EoL>
<BoL> Clean up expired sessions . <EoL>
<BoL> Release the lock on the currently-loaded session data . <EoL>
<BoL> We 'd like to use the `` max-age '' param as indicated in http : //www.faqs.org/rfcs/rfc2109.html but IE doesn't save it to disk and the session is lost if people close the browser . So we have to use the old `` expires '' ... sigh ... <EoL>
<BoL> Close the session object for this request . <EoL>
<BoL> Expire the current session cookie . <EoL>
<BoL> Update the cookie every time the session id changes . <EoL>
<BoL> Save any changed session data . <EoL>
<BoL> Internal . Set response.body to the given file object , perhaps ranged . <EoL>
<BoL> Pre-initialize global mimetype map . <EoL>
<BoL> Serve 'path ' as an application/x-download attachment . <EoL>
<BoL> Serve a static resource from the given ( root + ) filename . <EoL>
<BoL> Set up HTTP status , headers and body within CherryPy . <EoL>
<BoL> Construct HTTP response body for an error response . <EoL>
<BoL> Return 'path ' , doctored for RPC . <EoL>
<BoL> Return ( params , method ) from request body . <EoL>
<BoL> Construct HTTP response body . <EoL>
<BoL> data - > unmarshalled data , method name <EoL>
<BoL> Return the archive filename for the module if relevant . <EoL>
<BoL> Return the file for the module . <EoL>
<BoL> Return the relevant file for the module . <EoL>
<BoL> Ensure filename is absolute to avoid effect of os.chdir . <EoL>
<BoL> Stop the callback 's background task thread and restart it . <EoL>
<BoL> Reload the process if registered files have been modified . <EoL>
<BoL> Start our own background task thread for self.run . <EoL>
<BoL> Stop our callback 's background task thread . <EoL>
<BoL> Register this object as a ( multi-channel ) listener on the bus . <EoL>
<BoL> Return a Set of sys.modules filenames to monitor . <EoL>
<BoL> Unregister this object as a listener on the bus . <EoL>
<BoL> Return the current ( uid , gid ) if available . <EoL>
<BoL> Start our callback in its own background thread . <EoL>
<BoL> Stop the timer if it has n't finished yet . <EoL>
<BoL> Python signal handler ( self.set_handler subscribes it for you ) . <EoL>
<BoL> Return boolean indicating if the current process is running as a daemon . <EoL>
<BoL> Restart if daemonized , else exit . <EoL>
<BoL> Subscribe a handler for the given signal ( number or name ) . <EoL>
<BoL> Subscribe self.handlers to signals . <EoL>
<BoL> Unsubscribe self.handlers from signals . <EoL>
<BoL> Run 'start_thread ' listeners for the current thread . <EoL>
<BoL> Release all threads and run all 'stop_thread ' listeners . <EoL>
<BoL> Release the current thread and run 'stop_thread ' listeners . <EoL>
<BoL> Start the CGI server . <EoL>
<BoL> Stop the HTTP server . <EoL>
<BoL> Start the FCGI server . <EoL>
<BoL> Stop the HTTP server . <EoL>
<BoL> Start the SCGI server . <EoL>
<BoL> Stop the HTTP server . <EoL>
<BoL> On systems where a loopback interface is not available and the server is bound to all interfaces , it 's difficult to determine whether the server is in fact occupying the port . <EoL>
<BoL> Initialize pub/sub bus . <EoL>
<BoL> Assert that the Bus is not running in atexit handler callback . <EoL>
<BoL> Re-execute the current process.It 's probably win32 or GAE <EoL>
<BoL> Prepend current working dir to PATH environment variable if needed . <EoL>
<BoL> Retrieve current Python interpreter 's arguments . <EoL>
<BoL> Retrieve all real arguments of the python interpreter.In some older Python versions ` -m ` 's argument may be substituted with ` -c ` , not ` -m ` It 's containing ` -m -m ` sequence of argumentsThere 's ` -c -c ` before ` -m ` There 's no such module existIt 's containing just ` -c -c ` sequence of argumentsIt looks Py_GetArgcArgv is completely absent in some environments <EoL>
<BoL> Set the CLOEXEC flag on all open files ( except stdin/out/err ) . <EoL>
<BoL> Wait for the EXITING state , KeyboardInterrupt or SystemExit . <EoL>
<BoL> Stop all services and prepare to exit the process . <EoL>
<BoL> Advise all services to reload . <EoL>
<BoL> Log the given message . Append the last traceback if requested . <EoL>
<BoL> Return output of all subscribers for the given channel . <EoL>
<BoL> Restart the process ( may close connections ) . <EoL>
<BoL> Start all services . <EoL>
<BoL> Start 'func ' in a new thread T , then start self ( and return T ) . <EoL>
<BoL> Stop all services . <EoL>
<BoL> Add the given callback at the given channel ( if not present ) . <EoL>
<BoL> Discard the given callback ( if present ) . <EoL>
<BoL> Poll for the given state ( s ) at intervals ; publish to channel . <EoL>
<BoL> Determine whether any error happened in channel . <EoL>
<BoL> Initialize ChannelFailures errors wrapper . <EoL>
<BoL> Render the list of errors , which happened in channel . <EoL>
<BoL> Return a list of seen exception instances . <EoL>
<BoL> Append the current exception to self . <EoL>
<BoL> Mount the given root , start the builtin server ( and engine ) , then block . <EoL>
<BoL> Permanently remove directory from disk <EoL>
<BoL> Flush all in-memory storage to disk <EoL>
<BoL> Pull value from disk into memory <EoL>
<BoL> Filename where key will be held <EoL>
<BoL> Move data from memory onto disk <EoL>
<BoL> Fetch a list of pairs into memory <EoL>
<BoL> Spill in-memory storage to disk until usage is less than available <EoL>
<BoL> Copy ( hard-link ) the contents of chest other to this chest <EoL>
<BoL> D.peekitem ( ) - > ( k , v ) , return the ( key , value ) pair with lowest value ; \n but raise KeyError if D is empty . <EoL>
<BoL> D.popitem ( ) - > ( k , v ) , remove and return the ( key , value ) pair with lowest\nvalue ; but raise KeyError if D is empty . <EoL>
<BoL> Return a filename from any kind of hashable key <EoL>
<BoL> Number of bytes of an object <EoL>
<BoL> Returns a ctime string . <EoL>
<BoL> Returns a datetime.date object . This object retains all information , including timezones . <EoL>
<BoL> Returns a datetime object . <EoL>
<BoL> Returns a timestamp ( seconds since the epoch ) . <EoL>
<BoL> Returns a time string . <EoL>
<BoL> Returns a string representation of this amount of time , like : `` 2 hours and 30 minutes '' or `` 4 days , 2 hours and 40 minutes '' <EoL>
<BoL> Custom date timestamp constructor . ditto <EoL>
<BoL> Custom datetime timestamp constructor . because Windows . again . <EoL>
<BoL> Custom gmtime because yada yada . <EoL>
<BoL> Check if date is in dst . <EoL>
<BoL> Custom mktime because Windows ca n't be arsed to properly do pre-Epoch dates , probably because it 's busy counting all its chromosomes . <EoL>
<BoL> A custom rounding function that 's a bit more 'strict ' . <EoL>
<BoL> Custom strftime because Windows is shit again . <EoL>
<BoL> Returns the current UTC timestamp . <EoL>
<BoL> Tries to guess whether a string represents a time or a time delta and returns the appropriate object . <EoL>
<BoL> Constructor <EoL>
<BoL> Adds a command object . <EoL>
<BoL> Configures the input and output instances based on the user arguments and options . <EoL>
<BoL> Runs the current application <EoL>
<BoL> Finds alternatives of name in collection <EoL>
<BoL> Runs the current application <EoL>
<BoL> Sets the default Command name . <EoL>
<BoL> Sorts command in alphabetical order <EoL>
<BoL> Constructor <EoL>
<BoL> Create a stream from inputs . <EoL>
<BoL> Gets the display returned by the last execution command <EoL>
<BoL> Gets the input instance used by the last execution of the command . <EoL>
<BoL> Gets the output instance used by the last execution of the command . <EoL>
<BoL> Executes the command <EoL>
<BoL> Sets the user inputs . <EoL>
<BoL> Validates the arguments <EoL>
<BoL> Validates the options <EoL>
<BoL> Empties buffer and returns its content . <EoL>
<BoL> Configure the console command using a fluent definition . <EoL>
<BoL> Get the value of a command argument . <EoL>
<BoL> Prompt the user for input . <EoL>
<BoL> Call another command . <EoL>
<BoL> Call another command silently . <EoL>
<BoL> Give the user a single choice from an list of answers . <EoL>
<BoL> Write a string as comment output . <EoL>
<BoL> Confirm a question with the user . <EoL>
<BoL> Returns a Question of specified type . <EoL>
<BoL> Write a string as error output . <EoL>
<BoL> Executes the command . <EoL>
<BoL> Executes the command . <EoL>
<BoL> Write a string as information output . <EoL>
<BoL> Returns whether the command is hidden or not . <EoL>
<BoL> Write a string as information output . <EoL>
<BoL> Write a string as information output to stderr . <EoL>
<BoL> Write a list of elements . <EoL>
<BoL> Merges the application definition with the command definition . <EoL>
<BoL> Get the value of a command option . <EoL>
<BoL> Overwrites the current line . <EoL>
<BoL> Creates a new progress bar <EoL>
<BoL> Write a string as question output . <EoL>
<BoL> Format input to textual table . <EoL>
<BoL> Initialize command . <EoL>
<BoL> Prompt the user for input but hide the answer from the console . <EoL>
<BoL> Sets a new style <EoL>
<BoL> Automatically spin a progress indicator . : param start_message : The message to display when starting : type start_message : str : param end_message : The message to display when finishing : type end_message : str : param fmt : Indicator format : type fmt : str or None <EoL>
<BoL> Return a Table instance . <EoL>
<BoL> Return a TableCell instance <EoL>
<BoL> Return a TableSeparator instance . <EoL>
<BoL> Return a TableStyle instance . <EoL>
<BoL> Write a string as warning output . <EoL>
<BoL> Writes a string without a new line . Useful if you want to use overwrite ( ) . <EoL>
<BoL> Constructor <EoL>
<BoL> Create a stream from inputs . <EoL>
<BoL> Executes the command <EoL>
<BoL> Gets the display returned by the last execution command <EoL>
<BoL> Gets the input instance used by the last execution of the command . <EoL>
<BoL> Gets the output instance used by the last execution of the command . <EoL>
<BoL> Sets the user inputs . <EoL>
<BoL> Describes an object if supported . <EoL>
<BoL> Format a memory in bytes to a human readable representation . <EoL>
<BoL> Format a duration in seconds to a human readable representation . <EoL>
<BoL> Gets the helper set associated with this helper . <EoL>
<BoL> Returns the length of a string . <EoL>
<BoL> Registers a descriptor . <EoL>
<BoL> Sets the helper set associated with this helper . <EoL>
<BoL> Returns the value of a raw option ( not parsed ) . <EoL>
<BoL> Returns true if the raw parameters ( not parsed ) contain a value . <EoL>
<BoL> Constructor <EoL>
<BoL> Returns the default value . <EoL>
<BoL> Returns the description text . <EoL>
<BoL> Returns the argument name <EoL>
<BoL> Returns the validator <EoL>
<BoL> Returns True if the argument can take multiple values <EoL>
<BoL> Returns True if the argument is required . <EoL>
<BoL> Sets the default value . <EoL>
<BoL> Sets the valdidator . <EoL>
<BoL> Gets the list of InputArguments objects . <EoL>
<BoL> Constructor <EoL>
<BoL> Returns true if the option accepts a value . <EoL>
<BoL> Checks whether the given option equals this one . <EoL>
<BoL> Returns the default value . <EoL>
<BoL> Returns the description text . <EoL>
<BoL> Returns the option name . <EoL>
<BoL> Returns the option shortcut . <EoL>
<BoL> Returns the validator <EoL>
<BoL> Returns True if the option is a flag <EoL>
<BoL> Returns True if the option can take multiple values <EoL>
<BoL> Returns True if the option takes an optional value . <EoL>
<BoL> Returns True if the option requires a value . <EoL>
<BoL> Sets the default value . <EoL>
<BoL> Sets the valdidator . <EoL>
<BoL> Constructor <EoL>
<BoL> Adds an argument value <EoL>
<BoL> Adds a long option value <EoL>
<BoL> Adds a short option value <EoL>
<BoL> Returns the first argument from the raw parameters ( not parsed ) <EoL>
<BoL> Returns the value of a raw option ( not parsed ) . <EoL>
<BoL> Returns true if the raw parameters ( not parsed ) contain a value . <EoL>
<BoL> Processes command line arguments . <EoL>
<BoL> Constructor . <EoL>
<BoL> Overwrites a previous message to the output . <EoL>
<BoL> Sets the progress bar maximal steps . <EoL>
<BoL> Sets the progress bar format . <EoL>
<BoL> Advances the progress output X steps . <EoL>
<BoL> Removes the progress bar from the current line . <EoL>
<BoL> Ouput the current progress string . <EoL>
<BoL> Finish the progress output . <EoL>
<BoL> Sets the current progress . <EoL>
<BoL> Start the progress output . <EoL>
<BoL> Constructor . <EoL>
<BoL> Overwrites a previous message to the output . <EoL>
<BoL> Advance the indicator . <EoL>
<BoL> Auto progress . <EoL>
<BoL> Finish the indicator with message . <EoL>
<BoL> Sets the current indicator message . <EoL>
<BoL> Starts the indicator output . <EoL>
<BoL> Autocomplete a question . <EoL>
<BoL> Asks a question to the user . <EoL>
<BoL> Gets a hidden response from user . <EoL>
<BoL> Read user input . <EoL>
<BoL> Validates an attempt . <EoL>
<BoL> Outputs an error message . <EoL>
<BoL> Outputs the question prompt . <EoL>
<BoL> Asks a question to the user . <EoL>
<BoL> Constructor . <EoL>
<BoL> Calculates columns widths . <EoL>
<BoL> Calculate number of columns for this table . <EoL>
<BoL> Copy a row <EoL>
<BoL> Fill cells for a row that contains colspan > 1 . <EoL>
<BoL> Fill rows that contains rowspan > 1 . <EoL>
<BoL> Gets cell width . <EoL>
<BoL> Gets number of columns by row . <EoL>
<BoL> Gets list of columns for the given row . <EoL>
<BoL> Renders table cell with padding . <EoL>
<BoL> Renders vertical column separator . <EoL>
<BoL> Renders table row . <EoL>
<BoL> Renders horizontal header separator . <EoL>
<BoL> Gets the current style for a column . <EoL>
<BoL> : rtype : TableStyle <EoL>
<BoL> Renders table to output . <EoL>
<BoL> Sets table column style . <EoL>
<BoL> Sets table style . <EoL>
<BoL> Sets a style definition . <EoL>
<BoL> Returns abbreviated suggestions in string format . <EoL>
<BoL> Calculates the Levenshtein distance between two strings . <EoL>
<BoL> Runs the command . <EoL>
<BoL> Constructor . <EoL>
<BoL> Asks a question . <EoL>
<BoL> Create a new progress bar <EoL>
<BoL> Formats informational text . <EoL>
<BoL> Constructor . <EoL>
<BoL> Default answer normalizer . <EoL>
<BoL> Extract all of the parameters from the tokens . <EoL>
<BoL> Parse an argument expression . <EoL>
<BoL> Parse an option expression . <EoL>
<BoL> Parse the given console command definition into a dict . <EoL>
<BoL> Constructor . <EoL>
<BoL> Constructor . <EoL>
<BoL> Sorts command in alphabetical order <EoL>
<BoL> Describes an Application instance . <EoL>
<BoL> Describes a Command instance . <EoL>
<BoL> Describes an InputArgument instance . <EoL>
<BoL> Describes an InputDefinition instance . <EoL>
<BoL> Describes an InputOption instance . <EoL>
<BoL> Writes content to output . <EoL>
<BoL> Describes an InputArgument instance . <EoL>
<BoL> Describes an Application instance . <EoL>
<BoL> Describes a Command instance . <EoL>
<BoL> Describes an InputArgument instance . <EoL>
<BoL> Describes an InputDefinition instance . <EoL>
<BoL> Describes an InputOption instance . <EoL>
<BoL> Describes an Application instance . <EoL>
<BoL> Describes a Command instance . <EoL>
<BoL> Describes an InputArgument instance . <EoL>
<BoL> Describes an InputDefinition instance . <EoL>
<BoL> Describes an InputOption instance . <EoL>
<BoL> Formats input option/argument default value . <EoL>
<BoL> Formats command aliases to show them in the command description . <EoL>
<BoL> Describes an Application instance . <EoL>
<BoL> Describes a Command instance . <EoL>
<BoL> Describes an InputArgument instance . <EoL>
<BoL> Describes an InputDefinition instance . <EoL>
<BoL> Describes an InputOption instance . <EoL>
<BoL> Advances the progress output X steps <EoL>
<BoL> Ouputs the current progress string <EoL>
<BoL> Finishes the progress output <EoL>
<BoL> Generates the array map of format variables to values . <EoL>
<BoL> Converts seconds into human-readable format <EoL>
<BoL> Initializes the progress output <EoL>
<BoL> Overwrites a previous message to the output . <EoL>
<BoL> Sets the progress bar character <EoL>
<BoL> Sets the progress bar with <EoL>
<BoL> Sets the progress bar format <EoL>
<BoL> Sets the empty bar character <EoL>
<BoL> Sets the progress character <EoL>
<BoL> Sets the redraw frequency <EoL>
<BoL> Starts the progress output <EoL>
<BoL> Renders table to output . <EoL>
<BoL> Sets table layout type . <EoL>
<BoL> : param callable_ : The callable : type callable_ : callable <EoL>
<BoL> Helper method that can be called when `` value `` is deemed invalid . Can be overriden to provide customized : py : exc : ` ValidationError ` subclasses . <EoL>
<BoL> Check if the value is valid . <EoL>
<BoL> Check if `` value `` is valid . <EoL>
<BoL> Helper function to create an option . <EoL>
<BoL> Constructor . <EoL>
<BoL> Validate a choice . <EoL>
<BoL> Constructor . <EoL>
<BoL> Asks a question <EoL>
<BoL> Asks a question with the user input hidden . <EoL>
<BoL> Formats a caution admonition . <EoL>
<BoL> Asks a choice question . <EoL>
<BoL> Asks for confirmation . <EoL>
<BoL> Formats an error result bar . <EoL>
<BoL> Formats a list . <EoL>
<BoL> Add newline ( s ) . <EoL>
<BoL> Formats a note admonition . <EoL>
<BoL> Formats a section title . <EoL>
<BoL> Formats a success result bar . <EoL>
<BoL> Formats a table . <EoL>
<BoL> Formats a command title . <EoL>
<BoL> Formats a warning result bar . <EoL>
<BoL> Given a context variable this calculates the default value . <EoL>
<BoL> Given a value and context this runs the logic to convert the value as necessary . <EoL>
<BoL> Given a value this runs it properly through the type system . This automatically handles things like ` nargs ` and ` multiple ` as well as composite types . <EoL>
<BoL> Alias for : meth : ` main ` . <EoL>
<BoL> Given a context , this invokes the command . The default implementation is raising a not implemented error . <EoL>
<BoL> This function when given an info name and arguments will kick off the parsing and create a new : class : ` Context ` . It does not invoke the actual command callback though . <EoL>
<BoL> Given a context and a list of arguments this creates the parser and parses the arguments , then modifies the context as necessary . This is automatically invoked by : meth : ` make_context ` . <EoL>
<BoL> Returns the completion results for click.core.Choice <EoL>
<BoL> Helper method to fail with an invalid value message . <EoL>
<BoL> Given a value from an environment variable this splits it up into small chunks depending on the defined envvar list splitter . <EoL>
<BoL> Returns all the pieces that go into the usage line and returns it as a list of strings . <EoL>
<BoL> Writes the epilog into the formatter if it exists . <EoL>
<BoL> Writes the help into the formatter if it exists . <EoL>
<BoL> Writes the help text to the formatter if it exists . <EoL>
<BoL> Writes all the options into the formatter if they exist . <EoL>
<BoL> Writes the usage line into the formatter . <EoL>
<BoL> Formats the help into a string and returns it . This creates a formatter and will call into the following formatting methods : <EoL>
<BoL> Returns the help option object . <EoL>
<BoL> Returns the names for the help option . <EoL>
<BoL> Given a context , this invokes the attached callback ( if it exists ) in the right way . <EoL>
<BoL> Creates the underlying option parser for this command . <EoL>
<BoL> Adds a new multi command to the chain dispatcher . <EoL>
<BoL> Extra format methods for multi methods that adds all the commands after the options . <EoL>
<BoL> Returns the short help of a subcommand <EoL>
<BoL> Adds a result callback to the chain command . <EoL>
<BoL> Aborts the script . <EoL>
<BoL> This decorator remembers a function as callback that should be executed when the context tears down . <EoL>
<BoL> Invokes all close callbacks . <EoL>
<BoL> Like : meth : ` find_object ` but sets the innermost object to a new instance of ` object_type ` if it does not exist . <EoL>
<BoL> Exits the application with a given exit code . <EoL>
<BoL> Aborts the execution of the program with a specific error message . <EoL>
<BoL> Finds the closest object of a given type . <EoL>
<BoL> Finds the outermost context . <EoL>
<BoL> Similar to : meth : ` invoke ` but fills in default keyword arguments from the current context if the other command expects it . This can not invoke callbacks directly , only other commands . <EoL>
<BoL> Helper method to get formatted help page for the current context and command . <EoL>
<BoL> Helper method to get formatted usage string for the current context and command . <EoL>
<BoL> Invokes a command callback in exactly the way it expects . There are two ways to invoke this method : <EoL>
<BoL> Looks up the default for a parameter name . This by default looks into the : attr : ` default_map ` if available . <EoL>
<BoL> Creates the formatter for the help and usage output . <EoL>
<BoL> This helper method can be used with the context object to promote it to the current thread local ( see : func : ` get_current_context ` ) . <EoL>
<BoL> Returns a set of possible completions values , along with their documentation string <EoL>
<BoL> Returns the metavar default for this param if it provides one . <EoL>
<BoL> Optionally might return extra information about a missing parameter . <EoL>
<BoL> Registers another : class : ` Command ` with this group . If the name is not provided , the name of the command is used . <EoL>
<BoL> A shortcut decorator for declaring and attaching a command to the group . This takes the same arguments as : func : ` command ` but immediately registers the created command with this instance by calling into : meth : ` add_command ` . <EoL>
<BoL> A shortcut decorator for declaring and attaching a group to the group . This takes the same arguments as : func : ` group ` but immediately registers the created command with this instance by calling into : meth : ` add_command ` . <EoL>
<BoL> Decreases the indentation . <EoL>
<BoL> Returns the buffer contents . <EoL>
<BoL> Increases the indentation . <EoL>
<BoL> A context manager that increases the indentation . <EoL>
<BoL> Helpful context manager that writes a paragraph , a heading , and the indents . <EoL>
<BoL> Writes a unicode string into the internal buffer . <EoL>
<BoL> Writes a definition list into the buffer . This is how options and commands are usually formatted . <EoL>
<BoL> Writes a heading into the buffer . <EoL>
<BoL> Writes a paragraph into the buffer . <EoL>
<BoL> Writes re-indented text into the buffer . This rewraps and preserves paragraphs . <EoL>
<BoL> Writes a usage line into the buffer . <EoL>
<BoL> Given a context and a command name , this returns a : class : ` Command ` object if it exists or returns ` None ` . <EoL>
<BoL> Returns a list of subcommand names in the order they should appear . <EoL>
<BoL> This is an alternative flow that can be activated in the full value processing if a value does not exist . It will prompt the user until a valid value exists and then returns the processed value as result . <EoL>
<BoL> Adds a positional argument named ` dest ` to the parser . <EoL>
<BoL> Parses positional arguments and returns `` ( values , args , order ) `` for the parsed options and arguments as well as the leftover arguments if there are any . <EoL>
<BoL> Converts the value . This is not invoked for values that are ` None ` ( the missing value ) . <EoL>
<BoL> Return a list of weak references to the keys . <EoL>
<BoL> A stream is misconfigured if its encoding is ASCII . <EoL>
<BoL> Returns the default stream encoding if not found . <EoL>
<BoL> Checks if a given encoding is ascii . <EoL>
<BoL> Ensures that the environment is good for unicode on Python 3 . <EoL>
<BoL> Attaches an argument to the command . <EoL>
<BoL> Clears the terminal screen . This will have the effect of clearing the whole visible space of the terminal and moving the cursor to the top left . This does not do anything if not connected to a terminal . <EoL>
<BoL> Creates a new : class : ` Command ` and uses the decorated function as callback . This will also automatically attach all decorated : func : ` option ` \s and : func : ` argument ` \s as parameters to the command . <EoL>
<BoL> Prompts for confirmation ( yes/no question ) . <EoL>
<BoL> Shortcut for confirmation prompts that can be ignored by passing `` -- yes `` as parameter . <EoL>
<BoL> Internal handler for the bash completion support . <EoL>
<BoL> Context manager that attaches extra information to exceptions that fly . <EoL>
<BoL> Converts a callable or python ty into the most appropriate param ty . <EoL>
<BoL> Prints a message plus a newline to the given file or stdout . On first sight , this looks like the print function , but it has improved support for handling Unicode and binary data that does not fail no matter how badly configured the system is . <EoL>
<BoL> This returns the argument part of sys.argv in the most appropriate form for processing . What this means is that this return value is in a format that works for Click to process but does not necessarily correspond well to what 's actually standard for the interpreter . <EoL>
<BoL> Creates a new : class : ` Group ` with a function as callback . This works otherwise the same as : func : ` command ` just that the ` cls ` parameter is set to : class : ` Group ` . <EoL>
<BoL> Given a sequence of parameters in the order as should be considered for processing and an iterable of parameters that exist , this returns a list in the correct order as they should be processed . <EoL>
<BoL> Given a list of option strings this joins them in the most appropriate way and returns them in the form `` ( formatted_string , any_prefix_is_slash ) `` where the second item in the tuple is a flag that indicates if any of the option prefixes was a slash . <EoL>
<BoL> Converts a value into a valid string . <EoL>
<BoL> Removes the top level from the stack . <EoL>
<BoL> Prompts a user for input . This is a convenience function that can be used to prompt a user for input later . <EoL>
<BoL> Pushes a new context to the current stack . <EoL>
<BoL> Returns the current click context . <EoL>
<BoL> Adds a `` -- help `` option which immediately ends the program printing out the help page . This is usually unnecessary to add as this is added by default to all commands unless suppressed . <EoL>
<BoL> Given an object type this creates a decorator that will work similar to : func : ` pass_obj ` but instead of passing the object of the current context , it will find the innermost context of type : func : ` object_type ` . <EoL>
<BoL> Attaches an option to the command . <EoL>
<BoL> Marks a callback as wanting to receive the current context object as first argument . <EoL>
<BoL> Similar to : func : ` pass_context ` , but only pass the object on the context onwards ( : attr : ` Context.obj ` ) . This is useful if that object represents the state of a nested system . <EoL>
<BoL> Shortcut for password prompts . <EoL>
<BoL> Adds a `` -- version `` option which immediately ends the program printing out the version number . This is implemented as an eager option that prints the version and exits the program in the callback . <EoL>
<BoL> This function takes a text and shows it via an environment specific pager on stdout . <EoL>
<BoL> Formats a filename for user display . <EoL>
<BoL> Returns the current size of the terminal as tuple in the form `` ( width , height ) `` in columns and rows . <EoL>
<BoL> Returns the config folder for the application . The default behavior is to return whatever is most appropriate for the operating system . <EoL>
<BoL> Returns a system stream for byte processing . <EoL>
<BoL> Returns a system stream for text processing . This usually returns a wrapped stream around a binary stream returned from : func : ` get_binary_stream ` but it also can take shortcuts on Python 3 for already correctly configured streams . <EoL>
<BoL> Fetches a single character from the terminal and returns it . <EoL>
<BoL> Internal helper to get the default value of the color flag . If a value is passed it 's returned unchanged , otherwise it 's looked up from the current context . <EoL>
<BoL> This function launches the given URL ( or filename ) in the default viewer application for this file type . <EoL>
<BoL> Given an iterable of arguments and an iterable of nargs specifications , it returns a tuple with all the unpacked arguments at the first index and all remaining arguments as the second . <EoL>
<BoL> Given an argument string this attempts to split it into small parts . <EoL>
<BoL> This command stops execution and waits for the user to press any key to continue . <EoL>
<BoL> This function combines : func : ` echo ` and : func : ` style ` into one call . As such the following two calls are the same : : <EoL>
<BoL> Removes ANSI styling information from a string . Usually it 's not necessary to use this function as Click 's echo function will automatically remove styling if necessary . <EoL>
<BoL> Closes the underlying file , no matter what . <EoL>
<BoL> This function only closes the file if it was opened by the lazy file wrapper . For instance this will never close stdin . <EoL>
<BoL> Opens the file if it 's not yet open . <EoL>
<BoL> Wraps a function so that it swallows exceptions . <EoL>
<BoL> Patch click <EoL>
<BoL> Do the completion for bash <EoL>
<BoL> Do the fish completion <EoL>
<BoL> Do the powershell completion <EoL>
<BoL> Do the zsh completion <EoL>
<BoL> Escape a string with double quotes in order to be parsed as a single element by shlex <EoL>
<BoL> Returns the current shell <EoL>
<BoL> Returns the completion code to be evaluated by the shell <EoL>
<BoL> Install the completion <EoL>
<BoL> Escape a string with single quotes in order to be parsed as a single element by shlex <EoL>
<BoL> Version of shlex.split that silently accept incomplete strings . <EoL>
<BoL> Returns True when string starts with incomplete <EoL>
<BoL> Initialize the enhanced click completion <EoL>
<BoL> Sets a command function as the default command . <EoL>
<BoL> Overrides clicks `` resolve_command `` method and appends *Did you mean ... * suggestions to the raised exception message . <EoL>
<BoL> Transform a query line into a ( lng , lat ) pair of coordinates . <EoL>
<BoL> Extract GeoJSON features from a text file object . <EoL>
<BoL> Accept a filename , stream , or string . Returns an iterator over lines of the query . <EoL>
<BoL> Click callback that normalizes feature input values . <EoL>
<BoL> Takes an iterable of GeoJSON-like Feature mappings or an iterable of objects with a geo interface and normalizes it to the former . <EoL>
<BoL> Takes a feature or a geometry returns feature verbatim or wraps geom in a feature with empty properties <EoL>
<BoL> Returns all arguments containing given string ( or list thereof ) <EoL>
<BoL> Returns all arguments not containing given string ( or list thereof ) <EoL>
<BoL> Tests if given string is contained in any stored argument . <EoL>
<BoL> Tests if given object is in arguments list . Accepts strings and lists of strings . <EoL>
<BoL> Tests if given [ list of ] string is at given index . <EoL>
<BoL> Returns first found index of given value ( or list of values ) <EoL>
<BoL> Returns first found index containing value ( or list of values ) <EoL>
<BoL> Returns first found index not containing value ( or list of values ) <EoL>
<BoL> Returns argument at given index , else none . <EoL>
<BoL> Returns first argument that contains given string . <EoL>
<BoL> Returns true if argument exists at given index . Accepts : integer . <EoL>
<BoL> Removes and Returns value at given index , else none . <EoL>
<BoL> Removes given arg ( or list thereof ) from Args object . <EoL>
<BoL> Returns all arguments beginning with given string ( or list thereof ) <EoL>
<BoL> Returns value of argument after given found argument ( or list thereof ) . <EoL>
<BoL> Expands directories and globs in given path . <EoL>
<BoL> Tests if an object is a collection . Strings do n't count . <EoL>
<BoL> True if this class is actually needed . If false , then the output stream will not be affected , nor will win32 calls be issued , so wrapping stdout is not actually required . This will generally be False on non-Windows platforms , unless optional functionality like autoreset has been requested using kwargs to init ( ) <EoL>
<BoL> Write the given text to our wrapped stream , stripping any ANSI sequences from the text , and optionally converting them into win32 calls . <EoL>
<BoL> Returns piped input via stdin , else None . <EoL>
<BoL> Disables colors . <EoL>
<BoL> Determine console_width . <EoL>
<BoL> Returns a freshly formatted : param string : string to be formatted : type string : basestring or clint.textui.colorred.ColoredString : param cols : max width the text to be formatted : type cols : int : param separator : separator to break rows : type separator : basestring <EoL>
<BoL> Returns given string with right padding . <EoL>
<BoL> Behaves str.split but supports tuples of delimiters . <EoL>
<BoL> Indent util function , compute new indent_string <EoL>
<BoL> Indentation context manager . <EoL>
<BoL> Dedent next strings , use only if you use indent otherwise than as a context . <EoL>
<BoL> Indentation manager , return an indentation context manager . <EoL>
<BoL> Prints given string to stdout . <EoL>
<BoL> Prints given string to stderr . <EoL>
<BoL> Splits string into n sized chunks . <EoL>
<BoL> Progress iterator . Prints a dot for each item being iterated <EoL>
<BoL> Progress iterator . Prints a mill while iterating over the items . <EoL>
<BoL> Validates that the input is in the options list . <EoL>
<BoL> Validates that the input matches the regular expression . <EoL>
<BoL> Try to apply the pattern at the start of the string , returning a match object , or None if no match was found . <EoL>
<BoL> : param prompt : : param options : this can be either a list of strings , in which case it will be presented like : prompt : ( 1 ) this is the first string ( 2 ) this is the second string ( 3 ) this is the third string <EoL>
<BoL> Validates that the input is a valid file . <EoL>
<BoL> Validates that the input is a integer . <EoL>
<BoL> Validates that the input is a valid directory . <EoL>
<BoL> makedirs ( name [ , mode=0o777 ] [ , exist_ok=False ] ) <EoL>
<BoL> Emulates ` mkdir -p ` behavior . <EoL>
<BoL> Return the full path to the Closure Compiler Java archive . <EoL>
<BoL> Return a true filesystem path for specified resource <EoL>
<BoL> Ensure de-pickler imports any package child-modules that are needed by the function <EoL>
<BoL> Clears the pickler 's `` memo '' . <EoL>
<BoL> Find all globals names read or written to by codeblock co <EoL>
<BoL> Turn the function into a tuple of data necessary to recreate it : code , globals , defaults , closure_values , dict <EoL>
<BoL> Plug in system . Register additional pickling functions if modules already loaded <EoL>
<BoL> Store an object in the memo . <EoL>
<BoL> attrgetter serialize <EoL>
<BoL> Save a code object <EoL>
<BoL> Save a class that ca n't be stored as module global . <EoL>
<BoL> Save a file <EoL>
<BoL> Registered with the dispatch to handle all function types . <EoL>
<BoL> Pickles an actual func object . <EoL>
<BoL> Save a `` global '' . <EoL>
<BoL> Inner logic to save instance . Based off pickle.save_inst <EoL>
<BoL> itemgetter serializer ( needed for namedtuple support ) <EoL>
<BoL> Save a module as an import <EoL>
<BoL> This takes a binary file for writing a pickle data stream . <EoL>
<BoL> Write a pickled representation of obj to the open file . <EoL>
<BoL> Set the value of a closure cell . <EoL>
<BoL> Fills in the rest of function data into the skeleton function object <EoL>
<BoL> Return True if the module is special module that can not be imported by its name . <EoL>
<BoL> Get the Python compiler to emit LOAD_FAST ( arg ) ; STORE_DEREF <EoL>
<BoL> Creates a skeleton function object that contains just the provided code and the correct number of cells in func_closure . <EoL>
<BoL> Force every module in modList to be placed into main <EoL>
<BoL> Put attributes from ` class_dict ` back on ` skeleton_class ` . <EoL>
<BoL> Yield ( opcode , argument number ) tuples for all global-referencing instructions in *code* . <EoL>
<BoL> Serialize obj as bytes streamed into file <EoL>
<BoL> Serialize obj as a string of bytes allocated in memory <EoL>
<BoL> Create a new instance of a class . <EoL>
<BoL> Return whether *func* is a Tornado coroutine function . Running coroutines are not supported . <EoL>
<BoL> print_colors ( value , ... , sep= ' ' , end='\n ' , file=sys.stdout ) <EoL>
<BoL> Yield entry point objects from ` group ` matching ` name ` <EoL>
<BoL> Direct wrapper over core_extensions_ensure_registered . <EoL>
<BoL> Direct wrapper over cmark_find_syntax_extension . <EoL>
<BoL> Render the given GitHub-flavored Makrdown to HTML . <EoL>
<BoL> Render the given text to Markdown . <EoL>
<BoL> Render the given text to Markdown , using extensions . <EoL>
<BoL> Parse a document and return the root node . <EoL>
<BoL> Direct wrapper over cmark_parser_attach_syntax_extension . <EoL>
<BoL> Direct wrapper over cmark_parser_feed . <EoL>
<BoL> Direct wrapper over cmark_parser_finish . <EoL>
<BoL> Direct wrapper over cmark_parser_free . <EoL>
<BoL> Direct wrapper over cmark_parser_get_syntax_extensions . <EoL>
<BoL> Direct wrapper over cmark_parser_new . <EoL>
<BoL> Render a given syntax tree as HTML . <EoL>
<BoL> Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . <EoL>
<BoL> Keep accepting lines of input until the command is complete . <EoL>
<BoL> Prints a match list using pyreadline 's _display_completions ( ) This exists to print self.display_matches if it has data . Otherwise matches prints . <EoL>
<BoL> Finalize the shortcuts and settable parameters . <EoL>
<BoL> Generate a transcript file from a given history of commands . <EoL>
<BoL> Show a list of commands which help can be displayed for . <EoL>
<BoL> Initialize the plugin system <EoL>
<BoL> Adds padding to the matches being displayed as tab completion suggestions . <EoL>
<BoL> Customized version of print_topics that can switch between verbose or traditional output <EoL>
<BoL> Called by complete ( ) as the first tab completion function for all commands It determines if it should tab complete for redirection ( | , < , > , > > ) or use the completer function for the current command <EoL>
<BoL> Handles output redirection for > , > > , and | . <EoL>
<BoL> Resets the dynamic objects in the sys module that the py and ipy consoles fight over . <EoL>
<BoL> Handles restoring state after output redirection as well as the actual pipe operation if present . <EoL>
<BoL> Run the command finalization hooks <EoL>
<BoL> Resolve a macro and run the resulting string <EoL>
<BoL> Ensure a function has the given number of parameters . <EoL>
<BoL> Check parameter and return types for postparsing hooks <EoL>
<BoL> Check parameter and return types for pre and post command hooks . <EoL>
<BoL> Check parameter and return types for preloop and postloop hooks . <EoL>
<BoL> Create or overwrite an alias <EoL>
<BoL> Delete aliases <EoL>
<BoL> List some or all aliases <EoL>
<BoL> Display an important message to the user while they are at the prompt in between commands . To the user it appears as if an alert message is printed above the prompt and their current input text and cursor location is left alone . <EoL>
<BoL> Update the prompt while the user is still typing at it . <EoL>
<BoL> Performs tab completion against a list <EoL>
<BoL> Get the function for a command : param command : the name of the command <EoL>
<BoL> Get the method name associated with a given command . <EoL>
<BoL> Get a summary report of read-only settings which the user can not modify at runtime.Commands may be terminated with : { } Arguments at invocation allowed : { } Output redirection and pipes allowed : { } <EoL>
<BoL> This is an outer wrapper around _cmdloop ( ) which deals with extra features provided by cmd2 . <EoL>
<BoL> Display a list of strings as a compact set of columns . <EoL>
<BoL> Override of command method which returns the next possible completion for 'text ' . <EoL>
<BoL> Completes the command argument of help <EoL>
<BoL> Completes the subcommand argument of help <EoL>
<BoL> Method called to complete an input line when no command-specific complete_* ( ) method is available . <EoL>
<BoL> Write a string to a fileobject , stripping ANSI escape sequences if necessary <EoL>
<BoL> Executed when the command given is n't a recognized command implemented by a do_* method . <EoL>
<BoL> Run commands in script file that is encoded as either ASCII or UTF-8 text <EoL>
<BoL> Manage aliases <EoL>
<BoL> Edit a file in a text edito <EoL>
<BoL> Called when < Ctrl > -D is pressed <EoL>
<BoL> Handle cleanup when a script has finished executing <EoL>
<BoL> List available commands or provide detailed help for a specific command <EoL>
<BoL> View , run , edit , save , or clear previously entered commands <EoL>
<BoL> Enter an interactive IPython shell <EoL>
<BoL> Run commands in script file that is encoded as either ASCII or UTF-8 text <EoL>
<BoL> Manage macros <EoL>
<BoL> Invoke Python command or shellRun a Python script file in the interactive console.Function callable from the interactive Python console to exit that environment <EoL>
<BoL> Run a Python script file inside the console <EoL>
<BoL> Exit this application <EoL>
<BoL> Set a settable parameter or show current settings of parameters <EoL>
<BoL> Execute a command as if at the OS prompt <EoL>
<BoL> List available shortcuts <EoL>
<BoL> Called when an empty line is entered in response to the prompt . <EoL>
<BoL> Return a list of alias names . <EoL>
<BoL> Returns a list of all commands . <EoL>
<BoL> Return a list of visible commands , aliases , and macros for tab completion <EoL>
<BoL> Returns names of executables in a user 's path <EoL>
<BoL> Returns a list of help topics <EoL>
<BoL> Return a list of macro names . <EoL>
<BoL> Returns a list of commands that have not been hidden . <EoL>
<BoL> Create or overwrite a macro <EoL>
<BoL> Delete macros <EoL>
<BoL> List some or all macros <EoL>
<BoL> This executes the actual do_* method for a command . <EoL>
<BoL> Top-level function called by cmdloop ( ) to handle parsing a line and running the command and all of its hooks . <EoL>
<BoL> Parse the line into a command name and a string containing the arguments . <EoL>
<BoL> For printing nonessential feedback . Can be silenced with ` quiet ` . Inclusion in redirected output is controlled by ` feedback_to_output ` . <EoL>
<BoL> Hook method executed just after a command dispatch is finished . <EoL>
<BoL> Hook method executed once when the cmdloop ( ) method is about to return . <EoL>
<BoL> Smarter self.stdout.write ( ) ; color aware and adds newline of not present . <EoL>
<BoL> Print output using a pager if it would go off screen and stdout is n't currently being redirected . <EoL>
<BoL> Hook method executed just before the command is processed by `` onecmd ( ) `` and after adding it to the history . <EoL>
<BoL> Hook method executed once when the cmdloop ( ) method is called . <EoL>
<BoL> Began life as a copy of cmd 's cmdloop ; like raw_input but <EoL>
<BoL> Register a hook to be called after the command function . <EoL>
<BoL> Register a function to be called at the end of the command loop . <EoL>
<BoL> Register a function to be called after parsing user input but before running the command <EoL>
<BoL> Register a hook to be called before the command function . <EoL>
<BoL> Register a function to be called at the beginning of the command loop . <EoL>
<BoL> Resets tab completion settings Needs to be called each time readline runs tab completion <EoL>
<BoL> Runs transcript tests for provided file ( s ) . <EoL>
<BoL> Convenience method to run multiple commands by onecmd_plus_hooks . <EoL>
<BoL> Presents a numbered menu to the user . <EoL>
<BoL> Set the terminal window title <EoL>
<BoL> Shows current settings of parameters . <EoL>
<BoL> Signal handler for SIGINTs which typically come from Ctrl-C events . <EoL>
<BoL> Used by tab completion functions to get all tokens through the one being completed : param line : the current input line with leading whitespace removed : param begidx : the beginning index of the prefix text : param endidx : the ending index of the prefix text : return : A 2 item tuple where the items are On Success tokens : list of unquoted tokens this is generally the list needed for tab completion functions raw_tokens : list of tokens with any quotes preserved this can be used to know if a token was quoted or is missing a closing quote <EoL>
<BoL> Returns True if the command succeeded , otherwise False <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Create a new instance of Statement . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Custom override . Sets a default title if one was not given . <EoL>
<BoL> Custom error override . Allows application to control the error being displayed by argparse <EoL>
<BoL> Copy of format_help ( ) from argparse.ArgumentParser with tweaks to separately display required parameters <EoL>
<BoL> Allows an error message override to the error ( ) function , useful when forcing a re-parse of arguments with newly required parameters <EoL>
<BoL> Performs tab completion against a list <EoL>
<BoL> Supports the completion of sub-commands for commands through the cmd2 help command . <EoL>
<BoL> Supports the completion of sub-commands for commands through the cmd2 help command . <EoL>
<BoL> Determine if a token looks like a potential flag . Based on argparse._parse_optional ( ) . <EoL>
<BoL> Register custom argument action types <EoL>
<BoL> Causes readline to display the prompt and input text wherever the cursor is and start reading input from this location . This is the proper way to restore the input line after printing to the screen <EoL>
<BoL> Categorize a function . <EoL>
<BoL> Get the contents of the clipboard / paste buffer . <EoL>
<BoL> Copy text to the clipboard / paste buffer . <EoL>
<BoL> Convert a one-based index to a zero-based index . <EoL>
<BoL> Append a HistoryItem to end of the History list <EoL>
<BoL> Get an item or items from the History list using 1-based indexing.Listcomp filter function for doing a regular expression search of History.Listcomp filter function for doing a case-insensitive string search of History . <EoL>
<BoL> Parses the input string search for a span pattern and if if found , returns a slice from the History list . <EoL>
<BoL> Represent a HistoryItem in a pretty fashion suitable for printing . <EoL>
<BoL> Use the instance attributes as a generic key-value store to copy instance attributes from outer object . <EoL>
<BoL> Create copies of attributes from self.obj inside this Statekeeper instance . <EoL>
<BoL> Overwrite attributes in self.obj with the saved values stored in this Statekeeper instance . <EoL>
<BoL> Given a list of tokens , return a tuple of the command and the args as a string . <EoL>
<BoL> Expand shortcuts and aliases <EoL>
<BoL> Further splits tokens from a command line using punctuation characters <EoL>
<BoL> Determine whether a word is a valid name for a command . <EoL>
<BoL> Tokenize the input and parse it into a Statement object , stripping comments , expanding aliases and shortcuts , and extracting output redirection directives . <EoL>
<BoL> Partially parse input into a Statement object . <EoL>
<BoL> Lex a string into a list of tokens . <EoL>
<BoL> Call this to embed IPython at the current point in your program . <EoL>
<BoL> Parse a quoted string into a list of arguments : param string : the string being parsed : param preserve_quotes : if True , then quotes will not be stripped <EoL>
<BoL> Returns the offset of the current cursor position in rl_line_buffer <EoL>
<BoL> Overcome bug in GNU Readline in relation to calculation of prompt length in presence of ANSI escape codes . <EoL>
<BoL> Sets readline 's prompt : param prompt : the new prompt value <EoL>
<BoL> A decorator to apply a category to a command function . <EoL>
<BoL> Return a current distribution object for a Requirement or string <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Process the arguments at this layer of the argparse command tree . <EoL>
<BoL> Returns a custom list of attribute names to match the sub-commands <EoL>
<BoL> Search for a sub-command matching this item and update internal state to track the traversal <EoL>
<BoL> Provide functionality to call application commands by calling PyscriptBridge ex : app ( 'help ' ) : param command : command line being run : param echo : if True , output will be echoed to stdout/stderr while the command runs this temporarily overrides the value of self.cmd_echo <EoL>
<BoL> Return a custom set of attribute names <EoL>
<BoL> Provide functionality to call application commands as a method of PyscriptBridge ex : app.help ( ) <EoL>
<BoL> Clear the internal contents <EoL>
<BoL> Get the internal contents as bytes <EoL>
<BoL> Get the internal contents as a st <EoL>
<BoL> Read from the internal contents as a str and then clear them out <EoL>
<BoL> Read from the internal contents as bytes and then clear them out <EoL>
<BoL> Add str to internal bytes buffer and if echo is True , echo contents to inner stream <EoL>
<BoL> Helper to encapsulate executing a command and capturing the results : param cmd2_app : cmd2 app that will run the command : param command : command line being run : param echo : if True , output will be echoed to stdout/stderr while the command runs : return : result of the command <EoL>
<BoL> Convenience function for defining a namedtuple with default values <EoL>
<BoL> Quotes a string if it contains spaces and is n't already quoted <EoL>
<BoL> Sorts a list of strings alphabetically . <EoL>
<BoL> Wraps wcswidth to make it compatible with colored strings <EoL>
<BoL> Tries to force a new value into the same type as the current when trying to set the value for a parameter . <EoL>
<BoL> Checks if a string is quoted : param arg : the string being checked for quotes : return : True if a string is quoted <EoL>
<BoL> Returns if a file contains only ASCII or UTF-8 encoded text . <EoL>
<BoL> Converts a string into a list of integers and strings to support natural sorting ( see natural_sort ) . <EoL>
<BoL> Sorts a list of strings case insensitively as well as numerically . <EoL>
<BoL> Normalize and casefold Unicode strings for saner comparisons . <EoL>
<BoL> Removes duplicates from a list while preserving order of the items . <EoL>
<BoL> Strip ANSI escape codes from a string . <EoL>
<BoL> Strip outer quotes from a string . <EoL>
<BoL> Tries to convert the passed-in string to an integer . If that fails , it converts it to lower case using norm_fold . : param input_str : string to convert : return : the string as an integer or a lower case version of the string <EoL>
<BoL> Unquote redirection tokens in a list of command-line arguments This is used when redirection tokens have to be passed to another command : param args : the command line args <EoL>
<BoL> Given a unicode string , return its printable length on a terminal . <EoL>
<BoL> Find the full path of a given editor . <EoL>
<BoL> CFUNCTYPE ( restype , *argtypes , use_errno=False , use_last_error=False ) - > function prototype . <EoL>
<BoL> create_unicode_buffer ( aString ) - > character array create_unicode_buffer ( anInteger ) - > character array create_unicode_buffer ( aString , anInteger ) - > character array <EoL>
<BoL> string_at ( addr [ , size ] ) - > string <EoL>
<BoL> wstring_at ( addr [ , size ] ) - > string <EoL>
<BoL> Compute a checksum of the given data . Used for computing __coconut_hash__ . <EoL>
<BoL> Uniformly format a path . <EoL>
<BoL> Return target information as a version tuple . <EoL>
<BoL> Convert a version string into a version tuple . <EoL>
<BoL> Converts a requirement version tuple into a version string . <EoL>
<BoL> Loads Coconut as an IPython extension.Provides % coconut and % % coconut magics . <EoL>
<BoL> Indents every nonempty line of the given code . <EoL>
<BoL> sequence operator - concatenates actions action1 + action2 - > action_result where action_result performs as : first do all that action1 would do ; then perform all that action2 would do <EoL>
<BoL> dont override - use init <EoL>
<BoL> spawn operator - runs two actions in parallel action1 | action2 - > action_result <EoL>
<BoL> When in the worker role , this method is reliable . <EoL>
<BoL> Init method . <EoL>
<BoL> Dont customize this method : it will not be called when in the component role for certain composite actions ( like Sequence_IntervalAction ) . In such situation the composite will calculate the suitable t and directly call .update ( t ) You customize the action stepping by overriding .update <EoL>
<BoL> When the action must cease to perform this function is called by external code ; after this call no other method should be called . <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> epeats ntimes the action action * n - > action_result where action result performs as : repeat n times the changes that action would do <EoL>
<BoL> False while the step method must be called . <EoL>
<BoL> Gets called by __init__ with all the parameteres received , At this time the target for the action is unknown . Typical use is store parameters needed by the action . <EoL>
<BoL> External code sets self.target and then calls this method . Perform here any extra initialization needed . <EoL>
<BoL> Gets called every frame . ` dt ` is the number of seconds that elapsed since the last call . <EoL>
<BoL> Init method <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> does nothing - dont override <EoL>
<BoL> does nothing - dont override <EoL>
<BoL> does nothing - dont override <EoL>
<BoL> Initialize the Camera Action <EoL>
<BoL> Gets called on every frame 't ' is the time elapsed normalized to [ 0 , 1 ] If this action takes 5 seconds to execute , ` t ` will be equal to 0 at 0 seconds . <EoL>
<BoL> Get the original vertex coordinate . The original vertices are the ones were n't modified by the current action . <EoL>
<BoL> Get the current vertex coordinate <EoL>
<BoL> Set a vertex point is a certain value <EoL>
<BoL> Init method <EoL>
<BoL> Init method . <EoL>
<BoL> Get the 4-original tile coordinates . <EoL>
<BoL> Get the current tile coordinates . <EoL>
<BoL> Initialize the Grid Action <EoL>
<BoL> Set the 4 tile coordinates <EoL>
<BoL> Init method . <EoL>
<BoL> Here we must do out stuff <EoL>
<BoL> Init method <EoL>
<BoL> Init method <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> eturns the spherical coordinates from a cartesian coordinates <EoL>
<BoL> Initialize the camera with spherical coordinates <EoL>
<BoL> Init method . <EoL>
<BoL> Init method <EoL>
<BoL> Init method . <EoL>
<BoL> Reverses the behavior of the action <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> Init method . <EoL>
<BoL> Initializes the Waves actions <EoL>
<BoL> Init method . <EoL>
<BoL> Init method <EoL>
<BoL> Init method <EoL>
<BoL> Returns an action that runs first action_1 and then action_2 The returned action will be instance of the most narrow class posible in InstantAction , IntervalAction , Action <EoL>
<BoL> Returns an action that runs action_1 and action_2 in paralel . The returned action will be instance of the most narrow class posible in InstantAction , IntervalAction , Action <EoL>
<BoL> Called by CocosNode when the texture is already grabbed . The FrameBuffer will be unbound and the texture will be drawn <EoL>
<BoL> Binds the framebuffer to a texture and set a 2d projection before binding to prevent calculating a new texture <EoL>
<BoL> Get the original vertex coordinate . The original vertices are the ones were n't modified by the current action . <EoL>
<BoL> Get the current vertex coordinate <EoL>
<BoL> Initializes the grid creating both a vertex_list for an independent-tiled grid and creating also a vertex_list_indexed for a `` united '' ( non independent tile ) grid . <EoL>
<BoL> Set a vertex point is a certain value <EoL>
<BoL> Return the angle to the vector othe <EoL>
<BoL> Return one vector projected on the vector othe <EoL>
<BoL> Return the angle to the vector othe <EoL>
<BoL> Return one vector projected on the vector othe <EoL>
<BoL> Return the vector rotated around axis through angle theta . Right hand rule applies <EoL>
<BoL> Get the 4-original tile coordinates . <EoL>
<BoL> Get the current tile coordinates . <EoL>
<BoL> Set the 4 tile coordinates <EoL>
<BoL> Choose a random item from range ( start , stop [ , step ] ) . <EoL>
<BoL> pumps all the actions in the node actions container <EoL>
<BoL> Determine whether any actions are running . <EoL>
<BoL> Executes an : class : ` .Action ` . <EoL>
<BoL> Gets a child given its name . <EoL>
<BoL> Walks the nodes tree upwards until it finds a node of the class `` klass `` or returns None . <EoL>
<BoL> Return a list with the node 's children , order is back to front . <EoL>
<BoL> Returns an : class : ` .euclid.Matrix3 ` with the local inverse transformation matrix . <EoL>
<BoL> Returns an : class : ` .euclid.Matrix3 ` with the local transformation matrix <EoL>
<BoL> eturns an : class : ` .euclid.Matrix3 ` with the world inverse transformation matrix . <EoL>
<BoL> Returns an : class : ` .euclid.Matrix3 ` with the world transformation matrix <EoL>
<BoL> Remove this object from its parent , and thus most likely from everything . <EoL>
<BoL> Called every time just before the node enters the stage . <EoL>
<BoL> Called every time just before the node leaves the stage . <EoL>
<BoL> Suspends the execution of actions . <EoL>
<BoL> Time will stop for this node : scheduled callbacks will not be called , worker actions will not be called . <EoL>
<BoL> eturns an : class : ` .euclid.Vector2 ` converted to local space . <EoL>
<BoL> Returns an : class : ` .euclid.Vector2 ` converted to world space . <EoL>
<BoL> Removes an action from the node actions container , potentially calling `` action.stop ( ) `` . <EoL>
<BoL> Resumes the execution of actions . <EoL>
<BoL> Time will continue/start passing for this node and callbacks will be called , worker actions will be called . <EoL>
<BoL> Schedule a function to be called every frame . <EoL>
<BoL> Schedule a function to be called every `` interval `` seconds . <EoL>
<BoL> Removes all actions from the running action list . <EoL>
<BoL> Apply ModelView transformations . <EoL>
<BoL> Remove a function from the schedule . <EoL>
<BoL> All children are placed in to self.batch , so nothing to visit <EoL>
<BoL> Executes callback on all the subtree starting at self . returns a list of all return values that are not `` None `` . <EoL>
<BoL> This is the function you will have to override if you want your subclassed : class : ` CocosNode ` to draw something on screen . <EoL>
<BoL> This function *visits* its children in a recursive way . <EoL>
<BoL> Adds a child and if it becomes part of the active scene , it calls its : meth : ` on_enter ` method . <EoL>
<BoL> Removes a child given its name or object <EoL>
<BoL> Returns the best distance for the camera for the current window size <EoL>
<BoL> Sets the camera using gluLookAt using its eye , center and up_vector <EoL>
<BoL> Restore the camera to the initial position and sets it 's `` dirty `` attribute in False and `` once `` in true . <EoL>
<BoL> Get the nearest timestamp . <EoL>
<BoL> Check if ` ts ` has already got an item scheduled nearby . <EoL>
<BoL> Sleep until the next frame is due . <EoL>
<BoL> Call scheduled functions that elapsed on the last ` update_time ` . <EoL>
<BoL> Get the average FPS of recent history . <EoL>
<BoL> Get the framerate limit . <EoL>
<BoL> Schedule a function to be called every frame . <EoL>
<BoL> Schedule a function to be called every ` interval ` seconds . <EoL>
<BoL> Schedule a function to be called every `` interval `` seconds . <EoL>
<BoL> Schedule a function to be called once after ` delay ` seconds . <EoL>
<BoL> Set the framerate limit . <EoL>
<BoL> Remove a function from the schedule . <EoL>
<BoL> Get the elapsed time since the last call to ` update_time ` . <EoL>
<BoL> sleep time between frames ; 0.0 as as we want to run as fast as possible <EoL>
<BoL> Signify that one frame has passed . <EoL>
<BoL> Get the ( fake ) elapsed time since the last call to ` update_time ` Additionally , take snapshots . <EoL>
<BoL> handles the time progression <EoL>
<BoL> takes screenshots , handles end of screenshot session <EoL>
<BoL> Get the time until the next item is scheduled . <EoL>
<BoL> Signify that one frame has passed . <EoL>
<BoL> handles the time progression <EoL>
<BoL> takes screenshots , handles end of screenshot session <EoL>
<BoL> sleep time between frames ; 0.0 as as we want to run as fast as possible <EoL>
<BoL> Get the ( fake ) elapsed time since the last call to ` update_time ` Additionally , take snapshots . <EoL>
<BoL> Returns a clock object suitable to be used as a pyglet app clock , which will follow a test plan to advance time and take snapshots . <EoL>
<BoL> Returns a clock object suitable to be used as a pyglet app clock , which will provide a steady framerate , and saves a snapshot for each frame from time=0 to time=duration <EoL>
<BoL> Sets the cocos ( or pyglet ) app clock to a custom one <EoL>
<BoL> Implement handler matching on arguments for set_handlers and remove_handlers . <EoL>
<BoL> Makes scene the current scene <EoL>
<BoL> Dispatch a single event to the attached handlers . <EoL>
<BoL> Function decorator for an event handler . Usage : : <EoL>
<BoL> Transforms coordinates that belongs the *real* window size , to the coordinates that belongs to the *virtual* window . <EoL>
<BoL> Returns the size of the window when it was created , and not the actual size of the window . <EoL>
<BoL> Initializes the Director creating the main window . <EoL>
<BoL> Handles the event 'on_draw ' from the pyglet.window.Window <EoL>
<BoL> If the scene stack is empty the appication is terminated . Else pops out a scene from the stack and sets as the running one . <EoL>
<BoL> Pop the top level of event handlers off the stack . <EoL>
<BoL> Suspends the execution of the running scene , pushing it on the stack of suspended scenes . The new scene will be executed . <EoL>
<BoL> Push a level onto the top of the handler stack , then attach zero or more event handlers . <EoL>
<BoL> Register an event type with the dispatcher . <EoL>
<BoL> Remove a single event handler . <EoL>
<BoL> Remove event handlers from the event stack . <EoL>
<BoL> Replaces the running scene with a new one . The running scene is terminated . <EoL>
<BoL> Runs a scene , entering in the Director 's main loop . <EoL>
<BoL> One of two possible methods that are called when the main window is resized . <EoL>
<BoL> Enables/Disables alpha blending in OpenGL using the GL_ONE_MINUS_SRC_ALPHA algorithm . On by default . <EoL>
<BoL> Enables z test . On by default <EoL>
<BoL> Attach a single event handler . <EoL>
<BoL> Attach one or more event handlers to the top level of the handler stack . See : py : meth : ` ~pyglet.event.EventDispatcher.push_handlers ` for the accepted argument types . <EoL>
<BoL> placeholder , will be set to one of set_projection2D or set_projection3D when director.init is called <EoL>
<BoL> Sets a 2D projection ( ortho ) covering all the window <EoL>
<BoL> Sets a 3D projection mantaining the aspect ratio of the original window size <EoL>
<BoL> Will replace the app clock so that now we can ensure a steady frame rate and save one image per frame <EoL>
<BoL> One of two possible methods that are called when the main window is resized . <EoL>
<BoL> Get an environment variable , return None if it does n't exist . <EoL>
<BoL> Method called each frame to render the label . <EoL>
<BoL> Remove the display from its clock 's schedule . <EoL>
<BoL> Scheduled method to update the label text . <EoL>
<BoL> e-initializes data for the next stats time interval . <EoL>
<BoL> Draws the fps view . <EoL>
<BoL> Creates the label used to display fps info . <EoL>
<BoL> Nothing needed , so nothing done . <EoL>
<BoL> Called after the active scene was drawn . Updates stats . <EoL>
<BoL> e-initializes data for the next stats time interval <EoL>
<BoL> Draws the fps view <EoL>
<BoL> Creates the label used to display fps <EoL>
<BoL> Nothing needed , so nothing done <EoL>
<BoL> Called after the active scene was drawn . Updates stats <EoL>
<BoL> Opportunity to draw stats on top of the active scene , called after tick . <EoL>
<BoL> Called once before any other method ; performs initialization . <EoL>
<BoL> last call to this object , opportunity to cleanup / store data . <EoL>
<BoL> Called each time the active scene has been draw ; updates the stats <EoL>
<BoL> eturns an FpsStatsABC instance used to collect and display fps information . <EoL>
<BoL> Delete the framebuffer from the GPU memory <EoL>
<BoL> Create a new framebuffer object <EoL>
<BoL> Set FBO as current rendering target <EoL>
<BoL> Check that currently set framebuffer is ready for rendering <EoL>
<BoL> Map currently bound framebuffer ( not necessarily self ) to texture <EoL>
<BoL> Set default framebuffer as current rendering target <EoL>
<BoL> Capture the current screen . <EoL>
<BoL> Create a texture grabber . <EoL>
<BoL> Returns an instance of the best texture grabbing class <EoL>
<BoL> Rendering done , make sure texture holds what has been rendered . <EoL>
<BoL> Setup call before rendering begins . <EoL>
<BoL> Switches to another of the layers managed by this instance . <EoL>
<BoL> Draws itself <EoL>
<BoL> Event handler for window resizing . <EoL>
<BoL> Called every time just before the node enters the stage . <EoL>
<BoL> Called every time just before the node exits the stage . <EoL>
<BoL> The viewport has changed in some way . <EoL>
<BoL> Sets the position of the viewport for this layer . <EoL>
<BoL> Add the child and then update the manager 's focus / viewport . <EoL>
<BoL> Force the manager to focus on a point , regardless of any managed layer visible boundaries . <EoL>
<BoL> Event handler for Window resize . <EoL>
<BoL> Called every time just before the node enters the stage . <EoL>
<BoL> Called every time just before the node exits the stage . <EoL>
<BoL> deprecated , was renamed as screen_to_world <EoL>
<BoL> deprecated , was renamed as world_to_screen <EoL>
<BoL> Resets the focus at the focus point . <EoL>
<BoL> Translates screen coordinates to world coordinates . <EoL>
<BoL> Makes the point ( fx , fy ) show as near the view 's center as possible . <EoL>
<BoL> Sets OpenGL state for using scissor test . <EoL>
<BoL> Unsets OpenGL state for using scissor test . <EoL>
<BoL> Updates the view size based on the director usable width and height , and on the optional viewport . <EoL>
<BoL> Draws itself and its children into the viewport area . <EoL>
<BoL> Translates world coordinates to screen coordinates . <EoL>
<BoL> Execute a code object . <EoL>
<BoL> Compile and run some source in the interpreter . <EoL>
<BoL> Display the syntax error that just occurred . <EoL>
<BoL> Display the exception that just occurred . <EoL>
<BoL> Write a string . <EoL>
<BoL> Creates a new menu item <EoL>
<BoL> Generate a normal and a selected widget . This method should be implemented by descendents . <EoL>
<BoL> Returns the box that contains the menu item . <EoL>
<BoL> Returns the width of the item . This method should be implemented by descendents . <EoL>
<BoL> Returns the width of the item . This method should be implemented by descendents . <EoL>
<BoL> Return the x position of the item . This method should be implemented by descendents . <EoL>
<BoL> Return the y position of the item . This method should be implemented by descendents . <EoL>
<BoL> Returns whether the point ( x , y ) is inside the menu item . <EoL>
<BoL> Creates a Color Menu Item <EoL>
<BoL> Creates an Entry Menu Item <EoL>
<BoL> Creates a new menu item <EoL>
<BoL> Creates a Multiple Menu Item <EoL>
<BoL> Updates the vertex list <EoL>
<BoL> Test if the point is in the area covered by the ( untransformed ) : class : ` Sprite ` bounding box . Returns : bool <EoL>
<BoL> Force immediate removal of the sprite from video memory . <EoL>
<BoL> When the sprite is not into a batch it will be drawn with this method . If in a batch , this method is not called , and the draw is done by the batch . <EoL>
<BoL> Returns : : class : ` cocos.rect.Rect ` : Local-coordinates Axis Aligned Bounding Box . <EoL>
<BoL> Get a : class : ` cocos.rect.Rect ` for this sprite . <EoL>
<BoL> Set the X and Y coordinates of the sprite simultaneously . <EoL>
<BoL> Simultaneously change the position , rotation or scale . <EoL>
<BoL> Creates a Toggle Menu Item <EoL>
<BoL> Predefined action that performs a slight rotation and then goes back to the original rotation position . <EoL>
<BoL> Predefined action that rotates to 0 degrees in 0.1 seconds <EoL>
<BoL> Predefined action that scales to 1.5 factor in 0.2 seconds <EoL>
<BoL> Predefined action that scales to 1.0 factor in 0.2 seconds <EoL>
<BoL> Compare the two rects . <EoL>
<BoL> Create a Rect with the bottom-left corner at ( x , y ) and dimensions ( width , height ) . <EoL>
<BoL> Compare the two rects . <EoL>
<BoL> bool . True iif intersection with other is smaller than self . <EoL>
<BoL> Return boolean whether the point defined by x , y is inside the rect area . <EoL>
<BoL> Find the intersection of two Rect s . <EoL>
<BoL> Return boolean whether the interior of `` other '' rect ( an object with .x , .y , .width and .height attributes ) overlaps the interior of this Rect in any way . <EoL>
<BoL> Ends the current scene . <EoL>
<BoL> This prepares a streamed music file to be played in this scene . <EoL>
<BoL> Called every time the Scene enters the stage . <EoL>
<BoL> Called every time the : class : ` Scene ` exits the stage . <EoL>
<BoL> Enable music playback for this scene . Nothing happens if music was already playing . <EoL>
<BoL> Stops music playback for this scene . <EoL>
<BoL> Create an ordered group . <EoL>
<BoL> Apply the OpenGL state change . The default implementation does nothing . <EoL>
<BoL> Set this group and its ancestry . <EoL>
<BoL> Repeal the OpenGL state change . The default implementation does nothing . <EoL>
<BoL> Unset this group and its ancestry . <EoL>
<BoL> Indicate that a number of changes to the layout or document are about to occur . <EoL>
<BoL> Remove this layout from its batch . <EoL>
<BoL> Draw this text layout . <EoL>
<BoL> Perform pending layout changes since ` begin_update ` . <EoL>
<BoL> Get a document style value by name . <EoL>
<BoL> Event handler for ` AbstractDocument.on_delete_text ` . <EoL>
<BoL> Event handler for ` AbstractDocument.on_insert_text ` . <EoL>
<BoL> Event handler for ` AbstractDocument.on_style_text ` . <EoL>
<BoL> Set a document style value by name over the whole document . <EoL>
<BoL> Get the Cell at pixel ( x , y ) . <EoL>
<BoL> Return Cell at cell pos= ( i , j ) . <EoL>
<BoL> Return cells ( in [ column ] [ row ] ) that are within the pixel bounds specified by the bottom-left ( left , bottom ) and top-right ( right , top ) corners . <EoL>
<BoL> eturns the grid coordinates for the hex that covers the point ( x , y ) <EoL>
<BoL> Get the neighbor HexCell in the given direction which is one of self.UP , self.DOWN , self.UP_LEFT , self.UP_RIGHT , self.DOWN_LEFT or self.DOWN_RIGHT . <EoL>
<BoL> Get all neighbor cells for the nominated cell . <EoL>
<BoL> Find all cells that match the properties specified . <EoL>
<BoL> Given the current view in map-space pixels , transform it based on the current screen-space transform and figure the region of map-space pixels currently visible . <EoL>
<BoL> Determine whether the indicated rect ( with .x , .y , .width and .height attributes ) located in this Layer is visible . <EoL>
<BoL> stores a XML representation of itself as child of root with type rectmap <EoL>
<BoL> Return Cell at pixel px= ( x , y ) on the map . <EoL>
<BoL> Return cells that intersects the rectangle left , bottom , right , top in an area greater than zero <EoL>
<BoL> eturns the grid coordinates for the hex that covers the point ( x , y ) <EoL>
<BoL> Get the neighbor Cell in the given direction ( dx , dy ) which is one of self.UP , self.DOWN , self.LEFT or self.RIGHT . <EoL>
<BoL> Get all cells touching the sides of the nominated cell . <EoL>
<BoL> Find all elements of the given class in this resource . <EoL>
<BoL> Find all elements of the given class in this resource and all < requires > 'ed resources . <EoL>
<BoL> Save this resource 's XML to the indicated file . <EoL>
<BoL> Add a new Tile to this TileSet , generating a unique id if necessary . <EoL>
<BoL> Find all objects the rect is touching that have the indicated property name set . <EoL>
<BoL> Find all objects with the given properties set . <EoL>
<BoL> Return the first object found at the nominated ( x , y ) coordinate . <EoL>
<BoL> Return objects that overlaps any interior point of the rect with bottom-left ( left , bottom ) and top-right ( right , top ) corners . <EoL>
<BoL> Find all objects with the given properties set to the given values . <EoL>
<BoL> eturns the properties dict reading from the etree node tag <EoL>
<BoL> eturns a bytes object <EoL>
<BoL> decompress the input array of bytes to an array of bytes using gzip <EoL>
<BoL> decompress the input array of bytes to an array of bytes using zlib <EoL>
<BoL> Determine a regular hexagon 's width given its height . <EoL>
<BoL> Load resource ( s ) defined in the indicated XML file . <EoL>
<BoL> Load some tile mapping resources from an XML file . <EoL>
<BoL> Load some tile mapping resources from a TMX file . <EoL>
<BoL> parses tmx tag points into left , bottom , right , top , points <EoL>
<BoL> Return a shell-escaped version of the string *s* . <EoL>
<BoL> package.module : attr style <EoL>
<BoL> package.module.attr style <EoL>
<BoL> Add a subexception related to a child node with the message `` msg `` . `` name `` must be present in the names of the set of child nodes of this exception 's node ; if this is not so , a : exc : ` KeyError ` is raised . <EoL>
<BoL> Return a pretty-formatted string representation of the result of an execution of this exception 's `` asdict `` method <EoL>
<BoL> Add a child exception ; `` exc `` must be an instance of : class : ` colander.Invalid ` or a subclass . <EoL>
<BoL> Return a dictionary containing a basic ( non-language-translated ) error report for this exception . <EoL>
<BoL> Return an iterable of error messages for this exception using the `` msg `` attribute of this error node . <EoL>
<BoL> A generator which returns each path through the exception graph . <EoL>
<BoL> Return True if subnode named `` name `` exists in this node <EoL>
<BoL> Remove a subnode by name <EoL>
<BoL> Get a subnode by name . <EoL>
<BoL> Iterate over the children nodes of this schema node <EoL>
<BoL> Replace a subnode by name . <EoL>
<BoL> Append a subnode to this node . `` node `` must be a SchemaNode . <EoL>
<BoL> Insert a subnode into the position before the node named `` name `` <EoL>
<BoL> Resolve any deferred values attached to this schema node and its children ( recursively ) , using the keywords passed as `` kw `` as input to each deferred value . <EoL>
<BoL> Clone the schema node and return the clone . <EoL>
<BoL> Will call the node 's type 's `` cstruct_children `` method with this node as a first argument , and `` cstruct `` as a second argument . <EoL>
<BoL> Deserialize the : term : ` cstruct ` into an : term : ` appstruct ` based on the schema , run this : term : ` appstruct ` through the preparer , if one is present , then validate the prepared appstruct . The `` cstruct `` value is deserialized into an `` appstruct `` unconditionally . <EoL>
<BoL> Create and return a data structure which is a flattened representation of the passed in struct based on the schema represented by this node . <EoL>
<BoL> Return the subnode associated with `` name `` or `` default `` if no such node exists . <EoL>
<BoL> Traverses the nested data structure using the schema and retrieves the value specified by the dotted name path . <EoL>
<BoL> Insert a subnode into the position `` index `` . `` node `` must be a SchemaNode . <EoL>
<BoL> Raise a : exc : ` colander.Invalid ` exception with the message `` msg `` . <EoL>
<BoL> Serialize the : term : ` appstruct ` to a : term : ` cstruct ` based on the schema represented by this node and return the cstruct . <EoL>
<BoL> Uses the schema to set a value in a nested datastructure from a dotted name path . <EoL>
<BoL> Create and return a data structure with nested substructures based on the schema represented by this node using the flattened representation passed in . This is the inverse operation to : meth : ` colander.SchemaNode.flatten ` . <EoL>
<BoL> Along with the normal `` node `` and `` cstruct `` arguments , this method accepts an additional optional keyword argument : `` accept_scalar `` . This keyword argument can be used to override the constructor value of the same name . <EoL>
<BoL> Along with the normal `` node `` and `` appstruct `` arguments , this method accepts an additional optional keyword argument : `` accept_scalar `` . This keyword argument can be used to override the constructor value of the same name . <EoL>
<BoL> Clone the schema node and return the clone . <EoL>
<BoL> Provided a msgid ( Unicode object or : term : ` translation string ` ) and optionally a mapping object , and a *default value* , return a : term : ` translation string ` object . <EoL>
<BoL> If `` s `` is an instance of `` bytes `` , return `` s.decode ( encoding , errors ) `` , otherwise return `` s `` <EoL>
<BoL> Validator which checks to make sure that the value passes a luhn mod-10 checksum ( credit cards ) . `` value `` must be a string , not an integer . <EoL>
<BoL> True if this class is actually needed . If false , then the output stream will not be affected , nor will win32 calls be issued , so wrapping stdout is not actually required . This will generally be False on non-Windows platforms , unless optional functionality like autoreset has been requested using kwargs to init ( ) <EoL>
<BoL> Write the given text to our wrapped stream , stripping any ANSI sequences from the text , and optionally converting them into win32 calls . <EoL>
<BoL> Add a colormap to the set recognized by : func : ` get_cmap ` . <EoL>
<BoL> Concatenate . <EoL>
<BoL> Retrieve character . <EoL>
<BoL> Yield one color-coded character at a time . <EoL>
<BoL> Length of string without color codes ( what users expect ) . <EoL>
<BoL> String substitution ( like printf ) . <EoL>
<BoL> Multiply string . <EoL>
<BoL> Parse color markup and instantiate . <EoL>
<BoL> Representation of a class instance ( like datetime.datetime.now ( ) ) . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Return a copy of the string with only its first character capitalized . <EoL>
<BoL> Return centered in a string of length width . Padding is done using the specified fill character or space . <EoL>
<BoL> Color-code entire string using specified color . <EoL>
<BoL> Return the number of non-overlapping occurrences of substring sub in string [ start : end ] . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Decode using the codec registered for encoding . encoding defaults to the default encoding . <EoL>
<BoL> Encode using the codec registered for encoding . encoding defaults to the default encoding . <EoL>
<BoL> Return True if ends with the specified suffix , False otherwise . <EoL>
<BoL> Return the lowest index where substring sub is found , such that sub is contained within string [ start : end ] . <EoL>
<BoL> Return a formatted version , using substitutions from args and kwargs . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Like S.find ( ) but raise ValueError when the substring is not found . <EoL>
<BoL> Return True if all characters in string are alphanumeric and there is at least one character in it . <EoL>
<BoL> Return True if all characters in string are alphabetic and there is at least one character in it . <EoL>
<BoL> Return True if there are only decimal characters in string , False otherwise . <EoL>
<BoL> Return True if all characters in string are digits and there is at least one character in it . <EoL>
<BoL> Return True if there are only numeric characters in string , False otherwise . <EoL>
<BoL> Return True if all characters in string are whitespace and there is at least one character in it . <EoL>
<BoL> Return True if string is a titlecased string and there is at least one character in it . <EoL>
<BoL> Return True if all cased characters are uppercase and there is at least one cased character in it . <EoL>
<BoL> Return a string which is the concatenation of the strings in the iterable . <EoL>
<BoL> Return left-justified string of length width . Padding is done using the specified fill character or space . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Return the highest index where substring sub is found , such that sub is contained within string [ start : end ] . <EoL>
<BoL> Like .rfind ( ) but raise ValueError when the substring is not found . <EoL>
<BoL> Return right-justified string of length width . Padding is done using the specified fill character or space . <EoL>
<BoL> Return a list of the lines in the string , breaking at line boundaries . <EoL>
<BoL> Return True if string starts with the specified prefix , False otherwise . <EoL>
<BoL> Return a copy of the string with uppercase characters converted to lowercase and vice versa . <EoL>
<BoL> Return a titlecased version of the string . <EoL>
<BoL> Return a copy of the string , where all characters have been mapped through the given translation table . <EoL>
<BoL> Return a copy of the string converted to uppercase . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Color-code entire string . <EoL>
<BoL> Pad a numeric string with zeros on the left , to fill a field of the specified width . <EoL>
<BoL> Context manager , enables colors on Windows . <EoL>
<BoL> Context manager , disabled colors on Windows . <EoL>
<BoL> Constructor . <EoL>
<BoL> Restore sys.stderr and sys.stdout to their original objects . Resets colors to their original values . <EoL>
<BoL> Enable color text with print ( ) or sys.stdout.write ( ) ( stderr too ) . <EoL>
<BoL> Return True if either stderr or stdout has colors enabled . <EoL>
<BoL> Return value for key or None if colors are disabled . <EoL>
<BoL> Constructor . <EoL>
<BoL> Iterate dictionary . <EoL>
<BoL> Dictionary length . <EoL>
<BoL> Disable all colors . Strips any color tags or codes . <EoL>
<BoL> Disable all colors only if there is no TTY available . <EoL>
<BoL> Enable all colors . Strips any color tags or codes . <EoL>
<BoL> Choose dark colors for all 'auto'-prefixed codes for readability on light backgrounds . <EoL>
<BoL> Choose dark colors for all 'auto'-prefixed codes for readability on light backgrounds . <EoL>
<BoL> List the available tags.Sort /all /fg /bg first , then b i u flash , then auto colors , then dark colors , finally light colors . <EoL>
<BoL> Save original class so decode ( ) returns an instance of it . <EoL>
<BoL> Decode using the codec registered for encoding . Default encoding is 'utf-8 ' . <EoL>
<BoL> Call ` func ` on text portions of incoming color string . <EoL>
<BoL> Build an index between visible characters and a string with invisible color codes . <EoL>
<BoL> Determine what color a character is in the string . <EoL>
<BoL> Perform the actual conversion of tags to ANSI escaped codes . <EoL>
<BoL> Disable all colors . Strip any color tags or codes . <EoL>
<BoL> Disable all colors if there is no TTY available . <EoL>
<BoL> Enable colors . <EoL>
<BoL> Are colors enabled . <EoL>
<BoL> Are background colors for light backgrounds . <EoL>
<BoL> Remove color codes that are rendered ineffective by subsequent codes in one escape sequence then sort codes . <EoL>
<BoL> Choose dark colors for all 'auto'-prefixed codes for readability on light backgrounds . <EoL>
<BoL> Choose dark colors for all 'auto'-prefixed codes for readability on light backgrounds . <EoL>
<BoL> If an attribute/function/etc is not defined in this function , retrieve the one from the original stream . <EoL>
<BoL> Constructor . <EoL>
<BoL> Write to stream . <EoL>
<BoL> Get background color and if console supports ANSI colors natively for both streams . <EoL>
<BoL> Get information about this current console window . <EoL>
<BoL> Load a unique instance of WinDLL into memory , set arg/return types , and get stdout/err handles . <EoL>
<BoL> Return escape codes from a `` log_colors `` dict . <EoL>
<BoL> Format a message from a record object . <EoL>
<BoL> Format and return the specified exception information as a string . <EoL>
<BoL> This method is provided as an extension point for specialized formatting of stack information . <EoL>
<BoL> Return the creation time of the specified LogRecord as formatted text . <EoL>
<BoL> Check if the format uses the creation time of the record . <EoL>
<BoL> Customize the message format based on the log level . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Overwrites the ` reset ` argument to False if stream is not a TTY . <EoL>
<BoL> Only returns colors if STDOUT is a TTY . <EoL>
<BoL> Call `` logging.basicConfig `` and override the formatter it creates . <EoL>
<BoL> Return escape codes from a color sequence . <EoL>
<BoL> Log a message with severity 'CRITICAL ' on the root logger . If the logger has no handlers , call basicConfig ( ) to add a console handler with a pre-defined format . <EoL>
<BoL> Log a message with severity 'DEBUG ' on the root logger . If the logger has no handlers , call basicConfig ( ) to add a console handler with a pre-defined format . <EoL>
<BoL> Log a message with severity 'ERROR ' on the root logger . If the logger has no handlers , call basicConfig ( ) to add a console handler with a pre-defined format . <EoL>
<BoL> Log a message with severity 'ERROR ' on the root logger , with exception information . If the logger has no handlers , basicConfig ( ) is called to add a console handler with a pre-defined format . <EoL>
<BoL> Return a logger with the specified name , creating it if necessary . <EoL>
<BoL> Log a message with severity 'INFO ' on the root logger . If the logger has no handlers , call basicConfig ( ) to add a console handler with a pre-defined format . <EoL>
<BoL> Log 'msg % args ' with the integer severity 'level ' on the root logger . If the logger has no handlers , call basicConfig ( ) to add a console handler with a pre-defined format . <EoL>
<BoL> Modify a function to call `` basicConfig `` first if no handlers exist . <EoL>
<BoL> Log a message with severity 'WARNING ' on the root logger . If the logger has no handlers , call basicConfig ( ) to add a console handler with a pre-defined format . <EoL>
<BoL> Build a color representation from the string representation of an object <EoL>
<BoL> Private helper function ( Do not call directly ) <EoL>
<BoL> Returns a list of nb color HSL tuples between begin_hsl and end_hsl <EoL>
<BoL> Transform hex RGB representation to RGB tuple <EoL>
<BoL> Converts HEX representation to WEB <EoL>
<BoL> Convert HSL representation towards RGB <EoL>
<BoL> Transform RGB tuple to hex RGB representation <EoL>
<BoL> Convert RGB representation towards HSL <EoL>
<BoL> Converts WEB representation to HEX <EoL>
<BoL> Delegates to ` ArgumentParser.error ` <EoL>
<BoL> Delegates to ` ArgumentParser.exit ` <EoL>
<BoL> Delegates to ` ArgumentParser.format_help ` <EoL>
<BoL> Delegates to ` ArgumentParser.format_usage ` <EoL>
<BoL> Delegates to ` ArgumentParser.parse_args ` <EoL>
<BoL> Delegates to ` ArgumentParser.print_help ` <EoL>
<BoL> Delegates to ` ArgumentParser.print_usage ` <EoL>
<BoL> Runs the main command or sub command based on user input <EoL>
<BoL> Set the values object to the function object 's namespace <EoL>
<BoL> Gets a logger object with a pre-initialized console handler . <EoL>
<BoL> Stub . <EoL>
<BoL> Stub . <EoL>
<BoL> Delegates to ` subprocess.check_call ` . <EoL>
<BoL> Delegates to ` subprocess.check_output ` . <EoL>
<BoL> Delegates to ` subprocess.Popen ` . <EoL>
<BoL> Run command with arguments . Wait for command to complete . <EoL>
<BoL> Gets the logger initialized with the ` logger_name ` and a NullHandler . <EoL>
<BoL> Loads a python module from string <EoL>
<BoL> Class decorator to set metaclass . <EoL>
<BoL> Remove an item <EoL>
<BoL> Initializes an instance . <EoL>
<BoL> Add a key-value mapping with a comment . <EoL>
<BoL> Add a namespace to this configuration which can be used to evaluate ( resolve ) dotted-identifier expressions . <EoL>
<BoL> Evaluate items which are instances of L { Reference } or L { Expression } . <EoL>
<BoL> Allows a dictionary-style get operation . <EoL>
<BoL> Obtain a value in the configuration via its path . @ param path : The path of the required value @ type path : str @ return the value at the specified path . @ rtype : any @ raise ConfigError : If the path is invalid <EoL>
<BoL> Return the keys in a similar way to a dictionary . <EoL>
<BoL> Load the configuration from the specified stream . <EoL>
<BoL> Remove a namespace added with L { addNamespace } . <EoL>
<BoL> Save this configuration to the specified stream . <EoL>
<BoL> Set the path for this instance . @ param path : The path - a string which describes how to get to this instance from the root of the hierarchy . @ type path : str <EoL>
<BoL> Write this instance to a stream at the specified indentation level . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Obtain a value from the first configuration in the list which defines it . <EoL>
<BoL> Initialise an instance . <EoL>
<BoL> Handle a mismatch between two objects . <EoL>
<BoL> Merge two configurations . The second configuration is unchanged , and the first is changed to reflect the results of the merge . <EoL>
<BoL> Merge two mappings recursively . The second mapping is unchanged , and the first is changed to reflect the results of the merge . <EoL>
<BoL> Merge two sequences . The second sequence is unchanged , and the first is changed to have the elements of the second appended to it . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Get the next char from the stream . Update line and column numbers appropriately . <EoL>
<BoL> Get a token from the stream . <EoL>
<BoL> Load the configuration from the specified stream . <EoL>
<BoL> Return the current location ( filename , line , column ) in the stream as a string . <EoL>
<BoL> Ensure that the current token type matches the specified value , and advance to the next token . <EoL>
<BoL> Parse a factor in an multiplicative expression ( a * b , a / b , a % b ) <EoL>
<BoL> Parse a key-value pair , and add it to the provided L { Mapping } . <EoL>
<BoL> Parse a mapping . <EoL>
<BoL> Parse the internals of a mapping , and add entries to the provided L { Mapping } . <EoL>
<BoL> Parse a reference . <EoL>
<BoL> Parse a scalar - a terminal value such as a string or number , or an L { Expression } or L { Reference } . <EoL>
<BoL> Parse a sequence . <EoL>
<BoL> Parse a reference suffix . <EoL>
<BoL> Parse a term in an additive expression ( a + b , a - b ) <EoL>
<BoL> Parse a value . <EoL>
<BoL> Set the stream to the specified value , and prepare to read from it . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Write this instance to a stream at the specified indentation level . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Evaluate this instance in the context of a container . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Save this configuration to the specified stream . <EoL>
<BoL> Do whatever it takes to actually log the specified logging record . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Add an element to the reference . <EoL>
<BoL> Find the closest enclosing configuration to the specified container . <EoL>
<BoL> Resolve this instance in the context of a container . <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Add an item to the sequence . <EoL>
<BoL> Save this instance to the specified stream . <EoL>
<BoL> Write this instance to a stream at the specified indentation level . <EoL>
<BoL> A default resolver for merge conflicts . Returns a string indicating what action to take to resolve the conflict . <EoL>
<BoL> This function returns a read-only stream , given its name . The name passed in should correspond to an existing stream , otherwise an exception will be raised . <EoL>
<BoL> See if a passed-in value is an identifier . <EoL>
<BoL> Make a path from a prefix and suffix . <EoL>
<BoL> An overwriting resolver for merge conflicts . Calls L { defaultMergeResolve } , but where a `` mismatch '' is detected , returns `` overwrite '' instead . <EoL>
<BoL> Tries to parse config file path ( s ) from within command_line_args . Returns a list of opened config files , including files specified on the commandline as well as any default_config_files specified in the constructor that are present on disk . <EoL>
<BoL> Converts a config file or env var key + value to a list of commandline args to append to the commandline . <EoL>
<BoL> Returns a string with all args and settings and where they came from ( eg . commandline , config file , enviroment variable or default ) <EoL>
<BoL> Compute a commandline arg key to be used for a config file setting that does n't correspond to any defined configargparse arg ( and so does n't have a user-specified commandline arg key ) . <EoL>
<BoL> This method decides which actions can be set in a config file and what their keys will be . It returns a list of 0 or more config keys that can be used to set the given action 's value in a config file . <EoL>
<BoL> Prints the format_values ( ) string ( to sys.stdout or another file ) . <EoL>
<BoL> Write the given settings to output files . <EoL>
<BoL> Returns a string describing the config file syntax . <EoL>
<BoL> Parses the keys and values from a config file . <EoL>
<BoL> Does the inverse of config parsing by taking parsed values and converting them back to a string representing config file contents . <EoL>
<BoL> Parses the keys + values from a config file . <EoL>
<BoL> Does the inverse of config parsing by taking parsed values and converting them back to a string representing config file contents . <EoL>
<BoL> lazy-import PyYAML so that configargparse does n't have to dependend on it unless this parser is used . <EoL>
<BoL> Parses the keys and values from a config file . <EoL>
<BoL> Does the inverse of config parsing by taking parsed values and converting them back to a string representing config file contents . <EoL>
<BoL> Utility method for checking if any of the potential_command_line_args is already present in existing_args . <EoL>
<BoL> Returns the global ArgumentParser instance with the given name . The 1st time this function is called , a new ArgumentParser instance will be created for the given name , and any args other than `` name '' will be passed on to the ArgumentParser constructor . <EoL>
<BoL> Creates a global ArgumentParser instance with the given name , passing any args other than `` name '' to the ArgumentParser constructor . This instance can then be retrieved using get_argument_parser ( .. ) <EoL>
<BoL> Remove items from the sequence when deleting . <EoL>
<BoL> Fetch the item and do string interpolation . <EoL>
<BoL> D.iterkeys ( ) - > an iterator over the keys of D <EoL>
<BoL> Correctly set a value . Making dictionary values Section instances . <EoL>
<BoL> x.__repr__ ( ) < == > repr ( x ) <EoL>
<BoL> Decode ASCII strings to unicode if a self.encoding is specified . <EoL>
<BoL> Decode infile to unicode . Using the specified encoding . if is a string , it also needs converting to a list . <EoL>
<BoL> Decode element to unicode if necessary . <EoL>
<BoL> Handle any BOM , and decode if necessary . <EoL>
<BoL> Deal with a comment . <EoL>
<BoL> Parse the configspec . <EoL>
<BoL> Handle an error according to the error settings . Either raise the error or store it . The error will have occured at `` cur_index `` <EoL>
<BoL> Given a value string , unquote , remove comment , handle lists . ( including empty and single member lists ) <EoL>
<BoL> Given a section and a depth level , walk back through the sections parents to see if the depth level matches a previous section . Return a reference to the right section , or raise a SyntaxError . <EoL>
<BoL> Extract the value , where we are in a multiline situation . <EoL>
<BoL> Actually parse the config file . <EoL>
<BoL> Return a safely quoted version of a value . <EoL>
<BoL> Called by validate . Handles setting the configspec on subsections including sections to be validated by __many__ <EoL>
<BoL> Used by `` stringify `` within validate , to turn non-string values into strings . <EoL>
<BoL> Return an unquoted version of a value <EoL>
<BoL> Write an individual line , for the write method <EoL>
<BoL> Write a section marker line <EoL>
<BoL> Accepts a key as input . <EoL>
<BoL> A convenience method which coerces the specified value to a float . If the value is an invalid literal for `` float `` , a `` ValueError `` will be raised . <EoL>
<BoL> A convenience method which coerces the specified value to an integer . If the value is an invalid literal for `` int `` , a `` ValueError `` will be raised . <EoL>
<BoL> A convenience method which fetches the specified value , guaranteeing that it is a list . <EoL>
<BoL> A version of clear that also affects scalars/sections Also clears comments and configspec . Leaves other attributes alone : depth/main/parent are not affected <EoL>
<BoL> Return a deepcopy of self as a dictionary . All members that are `` Section `` instances are recursively turned to ordinary dictionaries - by calling their `` dict `` method . <EoL>
<BoL> A version of `` get `` that does n't bypass string interpolation . <EoL>
<BoL> D.items ( ) - > list of D 's ( key , value ) pairs , as 2-tuples <EoL>
<BoL> D.iteritems ( ) - > an iterator over the ( key , value ) items of D <EoL>
<BoL> D.itervalues ( ) - > an iterator over the values of D <EoL>
<BoL> D.keys ( ) - > list of D 's keys <EoL>
<BoL> A recursive update - useful for merging config files . <EoL>
<BoL> 'D.pop ( k [ , d ] ) - > v , remove specified key and return the corresponding value . If key is not found , d is returned if given , otherwise KeyError is raised ' <EoL>
<BoL> Pops the first ( key , val ) <EoL>
<BoL> Reload a ConfigObj from file . This method raises a `` ReloadError `` if the ConfigObj does n't have a filename attribute pointing to a file . <EoL>
<BoL> Change a keyname to another , without changing position in sequence . <EoL>
<BoL> Clear ConfigObj instance and restore to 'freshly created ' state . <EoL>
<BoL> Restore ( and return ) default value for the specified key . <EoL>
<BoL> Recursively restore default values to all members that have them . <EoL>
<BoL> A version of setdefault that sets sequence if appropriate . <EoL>
<BoL> A version of update that uses our `` __setitem__ `` . <EoL>
<BoL> D.values ( ) - > list of D 's values <EoL>
<BoL> Write the current ConfigObj as a file tekNico : FIXME : use StringIO instead of real files <EoL>
<BoL> Helper function to fetch values from owning section . <EoL>
<BoL> The function that does the actual work . <EoL>
<BoL> Implementation-dependent helper function . <EoL>
<BoL> * parent is the section above * depth is the depth level of this section * main is the main ConfigObj * indict is a dictionary to initialise the section with <EoL>
<BoL> A dummy check method , always returns the value unchanged . <EoL>
<BoL> An example function that will turn a nested dictionary of results ( as returned by `` ConfigObj.validate `` ) into a flat list . <EoL>
<BoL> Find all the values and sections not in the configspec from a validated ConfigObj . <EoL>
<BoL> Create a new section in the configuration . <EoL>
<BoL> Set an option . <EoL>
<BoL> Creates a view on a section of the specified ` name ` in ` parser ` . <EoL>
<BoL> Initialize a ChainMap by setting *maps* to the given mappings . If no mappings are provided , a single empty dictionary is used . <EoL>
<BoL> New ChainMap with a new map followed by all previous maps . If no map is provided , an empty dict is used . <EoL>
<BoL> Define C { & } on two L { FlagConstant } instances to create a new L { FlagConstant } instance with only flags set in both instances set . <EoL>
<BoL> @ return : C { False } if this flag 's value is 0 , else C { True } . <EoL>
<BoL> @ param flag : The flag to test for membership in this instance set . <EoL>
<BoL> Implements C { > = } . Order is defined by instantiation order . <EoL>
<BoL> Implements C { > } . Order is defined by instantiation order . <EoL>
<BoL> Define C { ~ } on a L { FlagConstant } instance to create a new L { FlagConstant } instance with all flags not set on this instance set . <EoL>
<BoL> @ return : An iterator of flags set on this instance set . <EoL>
<BoL> Implements C { < = } . Order is defined by instantiation order . <EoL>
<BoL> Implements C { < } . Order is defined by instantiation order . <EoL>
<BoL> Define C { | } on two L { FlagConstant } instances to create a new L { FlagConstant } instance with all flags set in either instance set . <EoL>
<BoL> Return text identifying both which constant this is and which collection it belongs to . <EoL>
<BoL> Define C { ^ } on two L { FlagConstant } instances to create a new L { FlagConstant } instance with only flags set on exactly one instance set . <EoL>
<BoL> Complete the initialization of this L { FlagConstant } . <EoL>
<BoL> Classes representing constants containers are not intended to be instantiated . <EoL>
<BoL> For L { FlagConstant } instances with no explicitly defined value , assign the next power of two as its value . <EoL>
<BoL> Iteration over a L { Names } subclass results in all of the constants it contains . <EoL>
<BoL> Retrieve a constant by its name or raise a C { ValueError } if there is no constant associated with that name . <EoL>
<BoL> Retrieve a constant by its value or raise a C { ValueError } if there is no constant associated with that value . <EoL>
<BoL> Complete the initialization of this L { _Constant } . <EoL>
<BoL> Construct the value for a new constant to add to this container . <EoL>
<BoL> Create a new constants container class . <EoL>
<BoL> Implement a binary operator for a L { FlagConstant } instance . <EoL>
<BoL> Return a recreated instance of self . <EoL>
<BoL> Returns the context manager used to actually wrap the call to the decorated function . <EoL>
<BoL> Helper to correctly register callbacks to __exit__ methods <EoL>
<BoL> Registers an arbitrary callback and arguments . <EoL>
<BoL> Immediately unwind the context stack <EoL>
<BoL> Enters the supplied context manager <EoL>
<BoL> Preserve the context stack by transferring it to a new instance <EoL>
<BoL> Registers a callback with the standard __exit__ method signature <EoL>
<BoL> @ contextmanager decorator . <EoL>
<BoL> Provide for acting like everything in attribute_names is automatically set to None , rather than having to do so explicitly and only at import time . <EoL>
<BoL> Attributes mentioned in attribute_names get validated using functions in attribute_validators , raising an exception on failure . Others get left alone . <EoL>
<BoL> Export this cookie 's attributes as a dict of encoded values . <EoL>
<BoL> Construct an instance from a dict of strings to parse . <EoL>
<BoL> Render as a string formatted for HTTP request headers ( simple 'Cookie : ' style ) . <EoL>
<BoL> Render as a string formatted for HTTP response headers ( detailed 'Set-Cookie : ' style ) . <EoL>
<BoL> Validate a cookie attribute with an appropriate validator . <EoL>
<BoL> Test if a Cookies object is globally 'equal ' to another one by seeing if it looks like a dict such that d [ k ] == self [ k ] . This depends on each Cookie object reporting its equality correctly . <EoL>
<BoL> Add Cookie objects by their names , or create new ones under specified names . <EoL>
<BoL> Parse 'Cookie ' header data into Cookie objects , and add them to this Cookies object . <EoL>
<BoL> Render the dict 's Cookie objects into a string formatted for HTTP request headers ( simple 'Cookie : ' style ) . <EoL>
<BoL> Render the dict 's Cookie objects into list of strings formatted for HTTP response headers ( detailed 'Set-Cookie : ' style ) . <EoL>
<BoL> Turn one or more lines of 'Cookie : ' header data into a dict mapping cookie names to cookie values ( raw strings ) . <EoL>
<BoL> Wrapper to work around lack of .total_seconds ( ) method in Python 3.1 . <EoL>
<BoL> URL-encode strings to make them safe for a cookie value . <EoL>
<BoL> URL-encode strings to make them safe for an extension-av ( extension attribute value ) : < any CHAR except CTLs or `` ; '' > <EoL>
<BoL> Parse an RFC 1123 or asctime-like format date string to produce a Python datetime object ( without a timezone ) . <EoL>
<BoL> Parse and validate an incoming Domain attribute value . <EoL>
<BoL> Parse and validate an incoming Path attribute value . <EoL>
<BoL> Decode URL-encoded strings to UTF-8 containing the escaped chars . <EoL>
<BoL> Render a date ( e.g . an Expires value ) per RFCs 6265/2616/1123 . <EoL>
<BoL> Remove invalid whitespace and/or single pair of dquotes and return None for empty strings . <EoL>
<BoL> Validate a cookie value string . <EoL>
<BoL> * Use an unauthenticated client , and make a request to obtain a token . * Create an authenticated client using eg . ` TokenAuthentication ( token= '' < token > '' ) ` <EoL>
<BoL> Domain string matching against an outgoing request . Patterns starting with '* ' indicate a wildcard domain . <EoL>
<BoL> Validates that keys looking up a link are correct . <EoL>
<BoL> Ensure that parameters passed to the link are correct . Raises a ` ParameterError ` if any parameters do not validate . <EoL>
<BoL> Given a URL determine the appropriate transport instance . <EoL>
<BoL> Takes a bytestring and returns a document . <EoL>
<BoL> Takes a document and returns a bytestring . <EoL>
<BoL> ` download_dir ` - The path to use for file downloads . <EoL>
<BoL> Return raw JSON data . <EoL>
<BoL> Take a Core API document and return Python primitives ready to be rendered into the JSON style encoding . <EoL>
<BoL> The '_type ' and '_meta ' keys are reserved . Prefix with an additional ' _ ' if they occur . <EoL>
<BoL> Return a dictionary of content , for documents , objects and errors . <EoL>
<BoL> Return a graceful link for a URL relative to a base URL . <EoL>
<BoL> Take Python primitives as returned from parsing JSON content , and return a Core API document . <EoL>
<BoL> Unescape '__type ' and '__meta ' keys if they occur . <EoL>
<BoL> Determine an output filename to use for the download . <EoL>
<BoL> Determine an output filename based on the ` Content-Disposition ` header . <EoL>
<BoL> Determine an output filename based on the download URL . <EoL>
<BoL> Sanitize output filenames , to remove any potentially unsafe characters . <EoL>
<BoL> Given a path like '/a/b/c.txt ' <EoL>
<BoL> Python 's ` mimetypes.guess_extension ` is no use because it simply returns the first of an unordered set . We use the same set of media types here , but take a reasonable preference on what extension to map to . <EoL>
<BoL> Document and Object sorting . Regular attributes sorted alphabetically . Links are sorted based on their URL and action . <EoL>
<BoL> Make an HTTP request and return an HTTP response . <EoL>
<BoL> Given an arbitrary return result , coerce it into an Error instance . <EoL>
<BoL> Errors should not contain nested documents or links . If we get a 4xx or 5xx response with a Document , then coerce the document content into plain data . <EoL>
<BoL> Given an HTTP response , return the decoded Core API document . <EoL>
<BoL> Return a dictionary of HTTP headers to use in the outgoing request . <EoL>
<BoL> Separate the params into the various types . <EoL>
<BoL> When a raw file upload is made , determine the Content-Type and Content-Disposition headers to use with the request . <EoL>
<BoL> Given a templated URL and some parameters that have been provided , expand the URL . <EoL>
<BoL> Given a new document , and the link/ancestors it was created , determine if we should : <EoL>
<BoL> Ensure that ` value ` can be encoded as a single form data or a query parameter . <EoL>
<BoL> Ensure that ` value ` can be encoded as form data or as query parameters . <EoL>
<BoL> Ensure that ` value ` can be encoded into JSON . <EoL>
<BoL> Given the value of a 'Content-Type ' header , return the appropriate codec for decoding the request content . <EoL>
<BoL> Given the value of a 'Accept ' header , return the appropriate codec for encoding the response content . <EoL>
<BoL> Check if all of a container 's elements are unique . Successively tries first to rely that the elements are hashable , then falls back on them being sortable , and finally falls back on brute force . <EoL>
<BoL> A hack to make True and 1 and False and 0 unique for `` uniq `` . <EoL>
<BoL> Registers a new error . <EoL>
<BoL> Transforms a json string into an ` Errors ` instance <EoL>
<BoL> Transforms a python list into an ` Errors ` instance <EoL>
<BoL> Returns the `` app_iter `` of the response . <EoL>
<BoL> The body of the response , as a : class : ` bytes ` . This will read in the entire app_iter if necessary . <EoL>
<BoL> A file-like object that can be used to write to the body . If you passed in a list `` app_iter `` , that `` app_iter `` will be modified by writes . <EoL>
<BoL> Get/set/modify the Cache-Control header ( ` HTTP spec section 14.9 < http : //www.w3.org/Protocols/rfc2616/rfc2616-sec14.html # sec14.9 > ` _ ) . <EoL>
<BoL> Set expiration on this request . This sets the response to expire in the given seconds , and any other attributes are used for `` cache_control `` ( e.g. , `` private=True `` ) . <EoL>
<BoL> Get/set the `` charset `` specified in `` Content-Type `` . <EoL>
<BoL> Get/set the `` Content-Type `` header . If no `` Content-Type `` header is set , this will return `` None `` . <EoL>
<BoL> A dictionary of all the parameters in the content type . <EoL>
<BoL> Determine if the the response has a : attr : ` ~Response.body ` . In contrast to simply accessing : attr : ` ~Response.body ` , this method will **not** read the underlying : attr : ` ~Response.app_iter ` . <EoL>
<BoL> The list of response headers . <EoL>
<BoL> The headers in a dictionary-like object . <EoL>
<BoL> Set/get the body of the response as JSON . <EoL>
<BoL> The status string . <EoL>
<BoL> The status as an integer . <EoL>
<BoL> Get/set the text value of the body using the `` charset `` of the `` Content-Type `` or the `` default_body_encoding `` . <EoL>
<BoL> Return a new `` app_iter `` built from the response `` app_iter `` , that serves up only the given `` start : stop `` range . <EoL>
<BoL> Like the normal `` __call__ `` interface , but checks conditional headers : <EoL>
<BoL> Makes a copy of the response . <EoL>
<BoL> Delete a cookie from the client . Note that `` path `` and `` domain `` must match how the cookie was originally set . <EoL>
<BoL> Encode the content with the given encoding ( only `` gzip `` and `` identity `` are supported ) . <EoL>
<BoL> Reads a response from a file-like object ( it must implement `` .read ( size ) `` and `` .readline ( ) `` ) . <EoL>
<BoL> Generate an etag for the response object using an MD5 hash of the body ( the `` body `` parameter , or `` self.body `` if not given ) . <EoL>
<BoL> Merge the cookies that were set on this response with the given `` resp `` object ( which can be any WSGI application ) . <EoL>
<BoL> Unset a cookie with the given name ( remove it from the response ) . <EoL>
<BoL> Add a view to a method and arguments . <EoL>
<BoL> Return the list of origins supported for a given HTTP method <EoL>
<BoL> Returns if the given method support credentials . <EoL>
<BoL> Return an iterable of supported headers for this service . <EoL>
<BoL> Add the ability to define methods using python 's decorators syntax . <EoL>
<BoL> Helper method to `` get_acceptable `` and `` get_contenttypes `` . DRY . <EoL>
<BoL> eturn a list of acceptable egress content-type headers that were defined for this service . <EoL>
<BoL> Return a dictionary of arguments . Takes arguments from the : param conf : param and merges it with the arguments passed in the constructor . <EoL>
<BoL> eturn a list of supported ingress content-type headers that were defined for this service . <EoL>
<BoL> eturn a list of validators for the given method . <EoL>
<BoL> Return the boolean value `` True `` if the case-lowered value of string input `` s `` is a : term : ` truthy string ` . If `` s `` is already one of the boolean values `` True `` or `` False `` , return it . <EoL>
<BoL> Return a list of strings , separating the input based on newlines and , if flatten=True ( the default ) , also split on spaces within each line . <EoL>
<BoL> Return what 's supposed to be the method for CORS operations . ( e.g if the verb is options , look at the A-C-Request-Method header , otherwise return the HTTP verb ) . <EoL>
<BoL> Handles CORS-related post-request things . <EoL>
<BoL> Ensure that the origin header is set and allowed . <EoL>
<BoL> Return a view for the OPTION method . <EoL>
<BoL> Return the Cornice service matching the specified request . <EoL>
<BoL> Create a new TranslationString instance with an updated mapping . <EoL>
<BoL> Interpolate the value `` translated `` which is assumed to be a Unicode object containing zero or more *replacement markers* ( `` $ foo `` or `` $ { bar } `` ) using the `` mapping `` dictionary attached to this instance . If the `` mapping `` dictionary is empty or `` None `` , no interpolation is performed . <EoL>
<BoL> Include the Cornice definitions <EoL>
<BoL> Prepare view args by evaluating complex predicates which get passed through to Pyramid 1:1 . Also resolve predicate definitions passed as callables . <EoL>
<BoL> Compute the cartesian product of `` accept '' and `` content_type '' fields to establish all possible predicate combinations . <EoL>
<BoL> Build a dictionary enriched by `` kind '' of predicate definition list . This is required for evaluation in `` _mungle_view_args `` . <EoL>
<BoL> IE has some rather unfortunately content-type-sniffing behaviour that can be used to trigger XSS attacks via a JSON API , as described here : <EoL>
<BoL> Check whether `` request.content_type `` matches given list of content types . <EoL>
<BoL> Decorate a given view with cornice niceties . <EoL>
<BoL> Fallback view for a given service , called when nothing else matches . <EoL>
<BoL> Return True if the request `` Accept `` header match the list returned by the callable specified in : param : func . <EoL>
<BoL> Return True if the request `` Content-Type `` header match the list returned by the callable specified in : param : func . <EoL>
<BoL> Register a resource and it 's views . <EoL>
<BoL> Register the routes of the given service into the pyramid router . <EoL>
<BoL> Convert an object to a list if it is not already one <EoL>
<BoL> Adds a `` validated '' dict , a custom `` errors '' object and an `` info '' dict to the request object if they do n't already exists <EoL>
<BoL> WSGI application interface <EoL>
<BoL> Return the name of a function or class method . <EoL>
<BoL> Returns an HTTPError with the given status and message . <EoL>
<BoL> Sets the current locale based on the incoming Accept-Language header , if present , and sets a localizer attribute on the request object based on the current locale . <EoL>
<BoL> Setup localization based on the available_languages and pyramid.default_locale_name settings . <EoL>
<BoL> Serialise the `` data `` with the Pyramid renderer . <EoL>
<BoL> Add the key and value , not overwriting any previous value . <EoL>
<BoL> Returns a dictionary where each key is associated with a list of values . <EoL>
<BoL> Create a dict from a cgi.FieldStorage instance <EoL>
<BoL> Return a list of all values matching the key ( may be an empty list ) <EoL>
<BoL> Get one value matching the key , raising a KeyError if multiple values were found . <EoL>
<BoL> Returns a dictionary where the values are either single values , or a list of values when a key/value appears more than once in this dictionary . This is similar to the kind of dictionary often used to represent the variables in a web request . <EoL>
<BoL> Create a dict that is a view on the given list <EoL>
<BoL> Generate a colander validator for data from the given location.Validate the location against the schema defined on the service.A metaclass that will inject a location class attribute into RequestSchema.Instantiate the RequestSchema class.A schema to validate the request 's location attributes . <EoL>
<BoL> Validate the location against the schema defined on the service.A metaclass that will inject a location class attribute into RequestSchema.Instantiate the RequestSchema class.A schema to validate the request 's location attributes . <EoL>
<BoL> Validate the full request against the schema defined on the service . <EoL>
<BoL> Generate a marshmallow validator for data from the given location.Validate the location against the schema defined on the service.A metaclass that will inject a location class attribute into RequestSchema.Instantiate the RequestSchema class.A schema to validate the request 's location attributes . <EoL>
<BoL> Normally ` normalize_messages ` will exist on ` ValidationError ` but pre 2.10 versions do n't have it : param exc : : param no_field_name : : return : <EoL>
<BoL> Validate the location against the schema defined on the service.A metaclass that will inject a location class attribute into RequestSchema.Instantiate the RequestSchema class.A schema to validate the request 's location attributes . <EoL>
<BoL> Validate the full request against the schema defined on the service . <EoL>
<BoL> Extract attributes from the specified ` request ` such as body , url , path , method , querystring , headers , cookies , and returns them in a single dict object . <EoL>
<BoL> Analyze a single morf or code unit . <EoL>
<BoL> Clean up on process shutdown . <EoL>
<BoL> Return the canonical path of the module or file ` morf ` . <EoL>
<BoL> Check a file name against the include/omit/etc , rules , verbosely . <EoL>
<BoL> Check a file name against the include , omit , etc , rules . <EoL>
<BoL> Return a compiled regex for the given exclusion list . <EoL>
<BoL> Drop all the compiled exclusion regexes , a list was modified . <EoL>
<BoL> Get executable files from the plugins . <EoL>
<BoL> Find unexecuted files in ` src_dir ` . <EoL>
<BoL> Get a FileReporter for a module or file name . <EoL>
<BoL> Get a list of FileReporters for a list of modules or file names . <EoL>
<BoL> Set all the initial state . <EoL>
<BoL> Get the name of the module for a set of globals and file name . <EoL>
<BoL> After saving data , look for warnings , post-work , etc . <EoL>
<BoL> Decide whether to trace execution in ` filename ` . <EoL>
<BoL> Decide whether to trace execution in ` filename ` , with a reason.Simple helper to make it easy to return NO . <EoL>
<BoL> Use ` msg ` as a warning . <EoL>
<BoL> Warn about a package or module that we never traced . <EoL>
<BoL> Write out debug info at startup if needed . <EoL>
<BoL> Like ` analysis2 ` but does n't return excluded line numbers . <EoL>
<BoL> Analyze a module . <EoL>
<BoL> Clear the exclude list . <EoL>
<BoL> Combine together a number of similarly-named coverage data files . <EoL>
<BoL> Erase previously-collected coverage data . <EoL>
<BoL> Exclude source lines from execution consideration . <EoL>
<BoL> Get the collected data . <EoL>
<BoL> Return a list of excluded regex patterns . <EoL>
<BoL> Get an option from the configuration . <EoL>
<BoL> Load previously-collected coverage data from the data file . <EoL>
<BoL> Save the collected coverage data to the data file . <EoL>
<BoL> Set an option in the configuration . <EoL>
<BoL> Start measuring code coverage . <EoL>
<BoL> Stop measuring code coverage . <EoL>
<BoL> Return a list of ( key , value ) pairs showing internal information.Make an entry for the sys_info from a list of plug-ins . <EoL>
<BoL> Obsolete method . <EoL>
<BoL> Create a CoverageData . <EoL>
<BoL> Do we have data in self._arcs ? <EoL>
<BoL> Do we have data in self._lines ? <EoL>
<BoL> Open a file appropriately for reading data . <EoL>
<BoL> Read the raw data from a file object . <EoL>
<BoL> Read the raw data from a file , for debugging . <EoL>
<BoL> If we are in paranoid mode , validate that everything is right . <EoL>
<BoL> Validate internal invariants . <EoL>
<BoL> Add measured arc data . <EoL>
<BoL> Add per-file plugin information . <EoL>
<BoL> Add measured line data . <EoL>
<BoL> Add information about the run . <EoL>
<BoL> Contribute ` filename ` 's data to the ` hasher ` . <EoL>
<BoL> Get the list of arcs executed for a file . <EoL>
<BoL> Erase the data in this object . <EoL>
<BoL> Get the plugin name of the file tracer for a file . <EoL>
<BoL> Does this data have arcs ? <EoL>
<BoL> Return a dict summarizing the line coverage data . <EoL>
<BoL> Get the list of lines executed for a file . <EoL>
<BoL> A list of all files that had been measured . <EoL>
<BoL> Read the coverage data from ` filename ` into this object . <EoL>
<BoL> Read the coverage data from the given file object . <EoL>
<BoL> Return the list of dicts of run information . <EoL>
<BoL> Ensure that ` filename ` appears in the data , empty if needed . <EoL>
<BoL> Update this data with data from another ` CoverageData ` . <EoL>
<BoL> Write the coverage data to ` filename ` . <EoL>
<BoL> Write the coverage data to ` file_obj ` . <EoL>
<BoL> Modify the configuration of coverage.py . <EoL>
<BoL> Get the : class : ` FileReporter ` class to use for a file . <EoL>
<BoL> Get a : class : ` FileTracer ` object for a file . <EoL>
<BoL> Yield all of the executable files in ` src_dir ` , recursively . <EoL>
<BoL> Get a list of information useful for debugging . <EoL>
<BoL> Simple initialization of a ` FileReporter ` . <EoL>
<BoL> Get the executable arcs in this file . <EoL>
<BoL> Get the excluded executable lines in this file . <EoL>
<BoL> Get a count of exits from that each line . <EoL>
<BoL> Get the executable lines in this file . <EoL>
<BoL> Provide an English sentence describing a missing arc . <EoL>
<BoL> Get the lines excused from branch coverage in this file . <EoL>
<BoL> Get the relative file name for this file . <EoL>
<BoL> Get the source for the file . <EoL>
<BoL> Generate a series of tokenized lines , one for each line in ` source ` . <EoL>
<BoL> Translate recorded arcs into reported arcs . <EoL>
<BoL> Translate recorded lines into reported lines . <EoL>
<BoL> Get a dynamically computed source file name . <EoL>
<BoL> Does this FileTracer have dynamic source file names ? <EoL>
<BoL> Get the range of source line numbers for a given a call frame . <EoL>
<BoL> The source file name for this file . <EoL>
<BoL> The trace function passed to sys.settrace . <EoL>
<BoL> Has there been any activity ? <EoL>
<BoL> Return a dictionary of statistics , or None . <EoL>
<BoL> For hard-core logging of what this tracer is doing . <EoL>
<BoL> Reset the activity ( ) flag . <EoL>
<BoL> Start this Tracer . <EoL>
<BoL> Stop this Tracer . <EoL>
<BoL> Annotate a single file . <EoL>
<BoL> Find the FileReporters we 'll report on . <EoL>
<BoL> Run the report . <EoL>
<BoL> Run a reporting function on a number of morfs . <EoL>
<BoL> Create a reporter . <EoL>
<BoL> A base for a flat file name to correspond to this file . <EoL>
<BoL> Copy a module so that we are isolated from aggressive mocking . <EoL>
<BoL> Produce a byte string with the ints from ` byte_values ` . <EoL>
<BoL> Turn a bytes object into a sequence of ints . <EoL>
<BoL> Produce the items from dict ` d ` . <EoL>
<BoL> Import a local file as a module . <EoL>
<BoL> Invalidate any import caches that may or may not exist . <EoL>
<BoL> Get the ` next ` function for iterating over ` seq ` . <EoL>
<BoL> Return a list of items from dict ` d ` . <EoL>
<BoL> Convert string ` s ` to bytes . <EoL>
<BoL> Create a collector . <EoL>
<BoL> Has any activity been traced ? <EoL>
<BoL> Clear out existing data , but stay ready for more collection . <EoL>
<BoL> Called on new threads , installs the real tracer . <EoL>
<BoL> Start a new Tracer object , and store it in self.tracers . <EoL>
<BoL> Pause tracing , but be prepared to ` resume ` . <EoL>
<BoL> Clear collected data , and prepare to collect more . <EoL>
<BoL> Resume tracing after a ` pause ` . <EoL>
<BoL> Save the collected data to a ` CoverageData ` .Return a dict like d , but with keys modified by ` abs_file ` . <EoL>
<BoL> Start collecting trace information . <EoL>
<BoL> Stop collecting trace information . <EoL>
<BoL> Who-Tests-What hack : switch to a new who-context . <EoL>
<BoL> Return the class name of the tracer we 're using . <EoL>
<BoL> Return the absolute normalized form of ` filename ` . <EoL>
<BoL> Return a string summarizing the call stack . <EoL>
<BoL> Who-Tests-What hack : Determine whether this frame begins a new who-context . <EoL>
<BoL> Initialize the configuration attributes to their defaults . <EoL>
<BoL> Set an attribute on self if it exists in the ConfigParser . <EoL>
<BoL> Read config values from ` kwargs ` . <EoL>
<BoL> Read configuration from a .rc file . <EoL>
<BoL> Get an option from the configuration . <EoL>
<BoL> Get a dictionary of options for the plugin named ` plugin ` . <EoL>
<BoL> Set an option in the configuration . <EoL>
<BoL> Create the HandyConfigParser . <EoL>
<BoL> Get a value , replacing environment variables also.Called for each $ replacement . ( ? x ) # Use extended regex syntax \ $ ( ? : # A dollar sign , then ( ? P < v1 > \w+ ) | # a plain word , { ( ? P < v2 > \w+ ) } | # or a { -wrapped word , ( ? P < char > [ $ ] ) # or a dollar sign. ) <EoL>
<BoL> Get the contents of a section , as a dictionary . <EoL>
<BoL> Read a list of strings . <EoL>
<BoL> Read a list of full-line regexes . <EoL>
<BoL> Read a file name as UTF-8 configuration data . <EoL>
<BoL> Dummy no-op implementation of a decorator with arguments . <EoL>
<BoL> Read the coverage.py configuration . <EoL>
<BoL> Returns a sorted list of the arcs in the code . <EoL>
<BoL> Returns a sorted list of the arcs actually executed in the code . <EoL>
<BoL> Returns a sorted list of the arcs in the code not executed . <EoL>
<BoL> The missing branch arcs , formatted nicely . <EoL>
<BoL> Returns a sorted list of the executed arcs missing from the code . <EoL>
<BoL> Returns a list of line numbers that have more than one exit . <EoL>
<BoL> Get stats about branches . <EoL>
<BoL> Were arcs measured in this result ? <EoL>
<BoL> Return arcs that were n't executed from branch lines . <EoL>
<BoL> The missing line numbers , formatted nicely . <EoL>
<BoL> How many total branches are there ? <EoL>
<BoL> Create a CoverageDataFiles to manage data files . <EoL>
<BoL> Combine a number of data files together . <EoL>
<BoL> Erase the data from the file storage . <EoL>
<BoL> Read the coverage data . <EoL>
<BoL> Write the collected coverage data to a file . <EoL>
<BoL> Configure the options and output file for debugging . <EoL>
<BoL> Decide whether to output debug information in category ` option ` . <EoL>
<BoL> A context manager to prevent call stacks from being logged . <EoL>
<BoL> Write a line of debug output . <EoL>
<BoL> A list of strings for displaying when dumping state . <EoL>
<BoL> Does ` fpath ` match one of our file name patterns ? <EoL>
<BoL> Compute a hash that changes if the file needs to be re-reported . <EoL>
<BoL> Generate an HTML file for one source file . <EoL>
<BoL> Write the index.html file for this report . <EoL>
<BoL> Make local instances of static files for HTML report . <EoL>
<BoL> Generate an HTML report for ` morfs ` . <EoL>
<BoL> A list of strings for displaying when dumping state . <EoL>
<BoL> Does ` module_name ` indicate a module in one of our packages ? <EoL>
<BoL> Return a list for __init__ ( *args ) to recreate this object . <EoL>
<BoL> How many characters wide can pc_covered_str be ? <EoL>
<BoL> Set the number of decimal places used to report percentages . <EoL>
<BoL> Add the ` pattern ` / ` result ` pair to the list of aliases . <EoL>
<BoL> Map ` path ` through the aliases . <EoL>
<BoL> Dump the important parts of the PathAliases , for debugging . <EoL>
<BoL> Add a plugin object . <EoL>
<BoL> Add a configuring plugin . <EoL>
<BoL> Add a file tracer plugin . <EoL>
<BoL> Add a plugin that does nothing . <EoL>
<BoL> Return a plugin by name . <EoL>
<BoL> Load plugins from ` modules ` . <EoL>
<BoL> Return the line numbers of statements in the file . <EoL>
<BoL> Return the line numbers of statements in the file . <EoL>
<BoL> Does it seem like this file should contain Python ? <EoL>
<BoL> Writes a report summarizing coverage statistics per module.Write a line to the output , adding a newline . <EoL>
<BoL> A list of strings for displaying when dumping state . <EoL>
<BoL> Does ` fpath ` indicate a file in one of our trees ? <EoL>
<BoL> Generate a Cobertura-compatible XML report for ` morfs ` . <EoL>
<BoL> Add to the XML report for a single file . <EoL>
<BoL> Make a nice debug message of what the FileDisposition is doing . <EoL>
<BoL> Construct and initialize a new FileDisposition object . <EoL>
<BoL> Stop any subprocess auto-measurement from writing data . <EoL>
<BoL> Return bool ( b ) , but preserve None . <EoL>
<BoL> Return a canonical file name for ` filename ` . <EoL>
<BoL> Remove a file , and do n't get annoyed if it does n't exist . <EoL>
<BoL> Yield all of the importable Python files in ` dirname ` , recursively . <EoL>
<BoL> Combine a list of regexes into one that matches any of them . <EoL>
<BoL> Does the module object ` mod ` have an existing __file__ ? <EoL>
<BoL> Is the module object ` mod ` a PEP420 namespace module ? <EoL>
<BoL> Monkey-patch the multiprocessing module.Get the original preparation data , and also insert our stowaway . <EoL>
<BoL> Prepare the file patterns for use in a ` FnmatchMatcher ` . <EoL>
<BoL> Call this at Python start-up to perhaps measure coverage . <EoL>
<BoL> Set the directory that ` relative_filename ` will be relative to . <EoL>
<BoL> Return the source file for ` filename ` . <EoL>
<BoL> Write a sequence of ( label , data ) pairs nicely . <EoL>
<BoL> Canonicalize our JSON data so it can be compared . <EoL>
<BoL> Dump the raw data from data files . <EoL>
<BoL> Format data as JSON , but as nicely as possible . <EoL>
<BoL> Add a cwd message for each new cwd . <EoL>
<BoL> Get the output text from the ` DebugControl ` . <EoL>
<BoL> Flush our file . <EoL>
<BoL> Get the process-wide singleton DebugOutputFile . <EoL>
<BoL> Just like file.write , but filter through all our filters . <EoL>
<BoL> A filter to add pid and tid to debug messages . <EoL>
<BoL> Print a summary of the stack to stdout , or someplace else . <EoL>
<BoL> For debugging , we can use aspectlib to trace execution . <EoL>
<BoL> Aspectlib prints stack traces , but includes its own frames . Scrub those out . <EoL>
<BoL> Run ` text ` through a series of filters . <EoL>
<BoL> Produce a sequence of formatted lines from info . <EoL>
<BoL> Make a nice header string . <EoL>
<BoL> Write a log message as forcefully as possible . <EoL>
<BoL> Given a 64-bit id , make a shorter 16-bit one . <EoL>
<BoL> The actual path for non-Windows platforms . <EoL>
<BoL> Convert fnmatch patterns to a compiled regex that matches any of them . <EoL>
<BoL> Is ` filename ` an absolute path on any OS ? <EoL>
<BoL> Return the directory that ` relative_filename ` is relative to . <EoL>
<BoL> Return the relative form of ` filename ` . <EoL>
<BoL> Find the path separator used in this string , or os.sep if none . <EoL>
<BoL> Return a Unicode version of ` filename ` . <EoL>
<BoL> Retrieve the hex digest of the hash . <EoL>
<BoL> Add ` v ` to the hash , recursively if needed . <EoL>
<BoL> Get the hash of ` fname ` 's contents . <EoL>
<BoL> Get the information for index.html for ` fname ` . <EoL>
<BoL> Read the last status in ` directory ` . <EoL>
<BoL> Initialize to empty . <EoL>
<BoL> Set the hash of ` fname ` 's contents . <EoL>
<BoL> Set the information for index.html for ` fname ` . <EoL>
<BoL> Set the hash of the coverage.py settings . <EoL>
<BoL> Get the hash of the coverage.py settings . <EoL>
<BoL> Write the current status to ` directory ` . <EoL>
<BoL> Construct a Templite with the given ` text ` .Force ` buffered ` to the code builder . <EoL>
<BoL> Evaluate dotted expressions at run-time . <EoL>
<BoL> Generate a Python expression for ` expr ` . <EoL>
<BoL> Raise a syntax error using ` msg ` , and showing ` thing ` . <EoL>
<BoL> Track that ` name ` is used as a variable . <EoL>
<BoL> Render this template by applying it to ` context ` . <EoL>
<BoL> Return the path to a data file of ours . <EoL>
<BoL> HTML-escape the text in ` t ` . <EoL>
<BoL> Format a pair of numbers so JavaScript can read them in an attribute . <EoL>
<BoL> Return the contents of a data file of ours . <EoL>
<BoL> Write ` html ` to ` fname ` , properly encoded . <EoL>
<BoL> Helper to raise NotImplementedError in interface stubs . <EoL>
<BoL> A decorator to indicate that a method should n't be called more than once.Inner function that checks the cache . <EoL>
<BoL> Nicely format a list of line numbers . <EoL>
<BoL> Dummy no-op implementation of ` new_contract ` . <EoL>
<BoL> Make a nice string representation of a pair of numbers . <EoL>
<BoL> Determine the encoding to use for output written to ` outfile ` or stdout . <EoL>
<BoL> Wrapper around _bootstrap to start coverage . <EoL>
<BoL> Helper for building the cause of ` finally ` branches . <EoL>
<BoL> Add arcs for things that can be decorated ( classes and functions ) . <EoL>
<BoL> Compute first line number for things that can be decorated ( classes and functions ) . <EoL>
<BoL> A function to make methods for online callable _code_object__ methods . <EoL>
<BoL> Add an arc , including message fragments to use if it is missing . <EoL>
<BoL> Add the arcs for ` node ` . <EoL>
<BoL> Add arcs for the body of a compound statement . <EoL>
<BoL> Examine the AST tree from ` root_node ` to determine possible arcs . <EoL>
<BoL> Search ` node ` looking for a child that has not been optimized away . <EoL>
<BoL> Is this a compile-time constant ? <EoL>
<BoL> What is the right line number to use for this node ? <EoL>
<BoL> Yield the blocks in nearest-to-farthest order . <EoL>
<BoL> Add arcs due to jumps from ` exits ` being breaks . <EoL>
<BoL> Add arcs due to jumps from ` exits ` being continues . <EoL>
<BoL> Add arcs due to jumps from ` exits ` being raises . <EoL>
<BoL> Add arcs due to jumps from ` exits ` being returns . <EoL>
<BoL> Map byte offsets to line numbers in ` code ` . <EoL>
<BoL> Find the statements in ` self.code ` . <EoL>
<BoL> Iterate over all the code objects nested within this one . <EoL>
<BoL> Source can be provided as ` text ` , the text itself , or ` filename ` , from which the text will be read . Excluded lines are those that match ` exclude ` , a regex . <EoL>
<BoL> Run the AstArcAnalyzer and save its results . <EoL>
<BoL> Parse the source to find the interesting facts about its lines . <EoL>
<BoL> Get information about the arcs available in the code . <EoL>
<BoL> Get a count of exits from that each line . <EoL>
<BoL> Return the first line number of the statement including ` line ` . <EoL>
<BoL> Map the line numbers in ` lines ` to the correct first line of the statement . <EoL>
<BoL> Find the lines matching one of a list of regexes . <EoL>
<BoL> Provide an English sentence describing a missing arc . <EoL>
<BoL> Parse source text to find executable lines , excluded lines , etc . <EoL>
<BoL> Implement ` FileReporter.translate_arcs ` . <EoL>
<BoL> Implement ` FileReporter.translate_lines ` . <EoL>
<BoL> Just like the ` compile ` builtin , but works on any Unicode string . <EoL>
<BoL> A stand-in for ` tokenize.generate_tokens ` . <EoL>
<BoL> Return ` source ` , with any encoding declaration neutered . <EoL>
<BoL> Determine the encoding for ` source ` , according to PEP 263.Imitates get_normal_name in tokenizer.c.Get the next source line , or `` .Find an encoding cookie in ` line ` . <EoL>
<BoL> Determine the encoding for ` source ` , according to PEP 263 . <EoL>
<BoL> Return all physical tokens , even line continuations . <EoL>
<BoL> Generate a series of lines , one for each line in ` source ` . <EoL>
<BoL> A short string identifying a frame , for debug messages . <EoL>
<BoL> Add a label to the writer , and return a new ` LabelledDebug ` . <EoL>
<BoL> The prefix to use on messages , combining the labels . <EoL>
<BoL> Write ` message ` , but with the labels prepended . <EoL>
<BoL> Return the source code , as unicode . <EoL>
<BoL> Get data from ` filename ` if it is a zip file path . <EoL>
<BoL> Read the Python source text from ` filename ` . <EoL>
<BoL> Determine if a total should fail due to fail-under . <EoL>
<BoL> Add a line of source to the code . <EoL>
<BoL> Add a section , a sub-CodeBuilder . <EoL>
<BoL> Decrease the current indent for following lines . <EoL>
<BoL> Execute the code , and return a dict of globals it defines . <EoL>
<BoL> Increase the current indent for following lines . <EoL>
<BoL> Make the URL people should start at for this version of coverage.py . <EoL>
<BoL> Create a readable version string from version_info tuple components . <EoL>
<BoL> Return the fraction of ` hit ` / ` num ` , as a string . <EoL>
<BoL> Serialize a minidom node to XML . <EoL>
<BoL> Write msg to standard out and flush . <EoL>
<BoL> Run echo [ lines from diff ] | cmd -p0 <EoL>
<BoL> Write a prompt to stdout and ask for answer in stdin . <EoL>
<BoL> Convert an ASCII string literal into a bytes object <EoL>
<BoL> Run a process and return its output and return code . <EoL>
<BoL> Run tests with command line interface input/output.Test function that adds CLI output <EoL>
<BoL> Tests for matching lines using custom matchers <EoL>
<BoL> Find longest matching block in a [ alo : ahi ] and b [ blo : bhi ] <EoL>
<BoL> Isolate change clusters by eliminating ranges with no changes . <EoL>
<BoL> Return list of triples describing matching subsequences . <EoL>
<BoL> Return list of 5-tuples describing how to turn a into b . <EoL>
<BoL> Return an upper bound on ratio ( ) relatively quickly . <EoL>
<BoL> Return a measure of the sequences ' similarity ( float in [ 0,1 ] ) . <EoL>
<BoL> Return an upper bound on ratio ( ) very quickly . <EoL>
<BoL> Set the first sequence to be compared . <EoL>
<BoL> Set the second sequence to be compared . <EoL>
<BoL> Set the two sequences to be compared . <EoL>
<BoL> Match a glob-like pattern . <EoL>
<BoL> Apply match function based on annotation keyword <EoL>
<BoL> Match a regular expression or return False if invalid . <EoL>
<BoL> Apply an escape match to a line annotated with ' ( esc ) <EoL>
<BoL> Apply a glob match to a line annotated with ' ( glob ) <EoL>
<BoL> Apply a regular expression match to a line annotated with ' ( re ) <EoL>
<BoL> Return a bytes character for a given integer value <EoL>
<BoL> Decode filename ( an os.PathLike , bytes , or str ) from the filesystem encoding with 'surrogateescape ' error handler , return str unchanged . On Windows , use 'strict ' error handler if the file system encoding is 'mbcs ' ( which is the default encoding ) . <EoL>
<BoL> Encode filename ( an os.PathLike , bytes , or str ) to the filesystem encoding with 'surrogateescape ' error handler , return bytes unchanged . On Windows , use 'strict ' error handler if the file system encoding is 'mbcs ' ( which is the default encoding ) . <EoL>
<BoL> Convert an ASCII string literal into a unicode object <EoL>
<BoL> Evaluate e as a unicode string literal <EoL>
<BoL> _match_long_opt ( opt : string ) - > string <EoL>
<BoL> _process_args ( largs : [ string ] , rargs : [ string ] , values : Values ) <EoL>
<BoL> check_values ( values : Values , args : [ string ] ) - > ( values : Values , args : [ string ] ) <EoL>
<BoL> Declare that you are done with this OptionParser . <EoL>
<BoL> Set parsing to stop on the first non-option . Use this if you have a command processor which runs another command that has options of its own and you want to make sure these options do n't get confused . <EoL>
<BoL> Set parsing to not stop on the first non-option , allowing interspersing switches with command arguments . <EoL>
<BoL> error ( msg : string ) <EoL>
<BoL> print_help ( file : file = stdout ) <EoL>
<BoL> print_usage ( file : file = stdout ) <EoL>
<BoL> print_version ( file : file = stdout ) <EoL>
<BoL> Expands ~ and environment variables in path <EoL>
<BoL> Parse command line arguments <EoL>
<BoL> Return the path to cmd or None if not found <EoL>
<BoL> Main entry point . <EoL>
<BoL> Run tests and yield results.Run test file <EoL>
<BoL> Run tests with xUnit XML output.Run test and collect XML output <EoL>
<BoL> Make a function to reset SIGPIPE to SIG_DFL ( for use in subprocesses ) . <EoL>
<BoL> Yield tests in paths in sorted orde <EoL>
<BoL> Directory tree generator . <EoL>
<BoL> Like the string-escape codec , but does n't escape quotes <EoL>
<BoL> Escape a string as an XML CDATA block . <EoL>
<BoL> Replace _cdatasub ( ) regex match <EoL>
<BoL> Escape a string for use as an XML attribute value . <EoL>
<BoL> Replace _quoteattrsub ( ) regex match <EoL>
<BoL> Return the current time in ISO 8601 format <EoL>
<BoL> Converts a ` datetime ` object ` d ` into a UNIX timestamp . <EoL>
<BoL> Converts a 'datetime.timedelta ' object ` td ` into seconds contained in the duration . Note : We can not use ` timedelta.total_seconds ( ) ` because this is not supported by Python 2.6 . <EoL>
<BoL> Converts a UNIX timestamp ` timestamp ` into a ` datetime ` object . <EoL>
<BoL> Generator of all consecutive dates . Can be used instead of implicit call to __iter__ , whenever non-default 'ret_type ' has to be specified . <EoL>
<BoL> Generator of all previous dates . <EoL>
<BoL> Return a map from personality names to actual available ( =installed ) Personality classes . <EoL>
<BoL> Main entry point into Crossbar.io : <EoL>
<BoL> Crossbar.io base package version , eg the string `` `` 18.4.1 '' `` . <EoL>
<BoL> Returns True if the block cipher is supported for CMAC by this backend <EoL>
<BoL> Create a MACContext for calculating a message authentication code . <EoL>
<BoL> Return True if the given cipher and mode are supported . <EoL>
<BoL> Get a CipherContext that can be used for decryption . <EoL>
<BoL> Get a CipherContext that can be used for encryption . <EoL>
<BoL> Load encryption parameters from DER encoded data . <EoL>
<BoL> Loads a private key from DER encoded data . Uses the provided password if the data is encrypted . <EoL>
<BoL> Loads a public key from DER encoded data . <EoL>
<BoL> Returns whether the backend supports DH with these parameter values . <EoL>
<BoL> Returns True if the backend supports the serialization of DH objects with subgroup order ( q ) . <EoL>
<BoL> Generate a DHParameters instance with a modulus of key_size bits . <EoL>
<BoL> Generate a DHPrivateKey instance with parameters as a DH <EoL>
<BoL> Generate a DHPrivateKey instance using key size only . <EoL>
<BoL> Load DHParameters from DHParameterNumbers . <EoL>
<BoL> Load a DHPrivateKey from DHPrivateNumbers <EoL>
<BoL> Load a DHPublicKey from DHPublicNumbers . <EoL>
<BoL> Return True if the hash algorithm is supported by the backend for DSA . <EoL>
<BoL> Return True if the parameters are supported by the backend for DSA . <EoL>
<BoL> Generate a DSAParameters instance with a modulus of key_size bits . <EoL>
<BoL> Generate a DSAPrivateKey instance with parameters as a DSA <EoL>
<BoL> Generate a DSAPrivateKey instance using key size only . <EoL>
<BoL> Returns a DSAParameters provider . <EoL>
<BoL> Returns a DSAPrivateKey provider . <EoL>
<BoL> Returns a DSAPublicKey provider . <EoL>
<BoL> Compute the private key given the private value and curve . <EoL>
<BoL> Returns whether the exchange algorithm is supported by this backend . <EoL>
<BoL> Returns True if the backend supports the named elliptic curve . <EoL>
<BoL> Return an object conforming to the EllipticCurvePrivateKey interface . <EoL>
<BoL> Return an EllipticCurvePrivateKey provider using the given numbers . <EoL>
<BoL> Return an EllipticCurvePublicKey provider using the given numbers . <EoL>
<BoL> Create a MACContext for calculating a message authentication code . <EoL>
<BoL> Return True if the hash algorithm is supported for HMAC by this backend . <EoL>
<BoL> Create a HashContext for calculating a message digest . <EoL>
<BoL> Return True if the hash algorithm is supported by this backend . <EoL>
<BoL> Return True if the hash algorithm is supported for PBKDF2 by this backend . <EoL>
<BoL> Load encryption parameters from PEM encoded data . <EoL>
<BoL> Loads a private key from PEM encoded data , using the provided password if the data is encrypted . <EoL>
<BoL> Loads a public key from PEM encoded data . <EoL>
<BoL> Returns True if the backend supports the given parameters for key generation . <EoL>
<BoL> Generate an RSAPrivateKey instance with public_exponent and a modulus of key_size bits . <EoL>
<BoL> Returns an RSAPrivateKey provider . <EoL>
<BoL> Returns an RSAPublicKey provider . <EoL>
<BoL> Returns True if the backend supports the given padding options . <EoL>
<BoL> Return bytes derived from provided Scrypt parameters . <EoL>
<BoL> Create and sign an X.509 certificate from a CertificateBuilder object . <EoL>
<BoL> Create and sign an X.509 CertificateRevocationList from a CertificateRevocationListBuilder object . <EoL>
<BoL> Create and sign an X.509 CSR from a CSR builder object . <EoL>
<BoL> Create a RevokedCertificate object from a RevokedCertificateBuilder object . <EoL>
<BoL> Load an X.509 certificate from DER encoded data . <EoL>
<BoL> Load an X.509 CSR from DER encoded data . <EoL>
<BoL> Load an X.509 certificate from PEM encoded data . <EoL>
<BoL> Load an X.509 CSR from PEM encoded data . <EoL>
<BoL> Compute the DER encoded bytes of an X509 Name object . <EoL>
<BoL> Returns the signature as bytes . <EoL>
<BoL> Processes the provided bytes and returns nothing . <EoL>
<BoL> Processes the provided bytes and returns nothing . <EoL>
<BoL> Raises an exception if the bytes provided to update do not match the signature or the signature does not match the public key . <EoL>
<BoL> Set the named curve flag on the EC_KEY . This causes OpenSSL to serialize EC keys along with their curve OID which makes deserialization easier . <EoL>
<BoL> Converts a python integer to an ASN1_INTEGER . <EoL>
<BoL> Create an ASN1_OCTET_STRING from a Python byte string . <EoL>
<BoL> Create an ASN1_UTF8STRING from a Python unicode string . This object will be an ASN1_STRING with UTF8 type in OpenSSL and can be decoded with ASN1_STRING_to_UTF8 . <EoL>
<BoL> The X509_NAME created will not be gc 'd . Use _encode_name_gc if needed . <EoL>
<BoL> The sk_X509_NAME_ENTRY created will not be gc 'd . <EoL>
<BoL> Converts a Python string with an ASN.1 object ID in dotted form to a ASN1_OBJECT . <EoL>
<BoL> Serializes the request to DER <EoL>
<BoL> Decrypts the provided ciphertext . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns an RSAPrivateNumbers . <EoL>
<BoL> The RSAPublicKey associated with this private key . <EoL>
<BoL> Signs the data . <EoL>
<BoL> Returns an AsymmetricSignatureContext used for signing data . <EoL>
<BoL> Encrypts the given plaintext . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns an RSAPublicNumbers <EoL>
<BoL> Returns an AsymmetricVerificationContext used for verifying signatures . <EoL>
<BoL> Verifies the signature of the data . <EoL>
<BoL> Performs a key exchange operation using the provided peer 's public key . <EoL>
<BoL> The serialized bytes of the private key . <EoL>
<BoL> The serialized bytes of the public key . <EoL>
<BoL> The serialized bytes of the public key . <EoL>
<BoL> Performs a key exchange operation using the provided peer 's public key . <EoL>
<BoL> The serialized bytes of the private key . <EoL>
<BoL> The serialized bytes of the public key . <EoL>
<BoL> The serialized bytes of the public key . <EoL>
<BoL> Generates and returns a DHPrivateKey . <EoL>
<BoL> Returns the parameters serialized as bytes . <EoL>
<BoL> Returns a DHParameterNumbers . <EoL>
<BoL> Given peer 's DHPublicKey , carry out the key exchange and return shared key as bytes . <EoL>
<BoL> The DHParameters object associated with this private key . <EoL>
<BoL> The DHPublicKey associated with this private key . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns a DHPrivateNumbers . <EoL>
<BoL> The DHParameters object associated with this public key . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns a DHPublicNumbers . <EoL>
<BoL> Generates and returns a DSAPrivateKey . <EoL>
<BoL> Returns a DSAParameterNumbers . <EoL>
<BoL> The DSAParameters object associated with this private key . <EoL>
<BoL> The DSAPublicKey associated with this private key . <EoL>
<BoL> Signs the data <EoL>
<BoL> Returns an AsymmetricSignatureContext used for signing data . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns a DSAPrivateNumbers . <EoL>
<BoL> The DSAParameters object associated with this public key . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns a DSAPublicNumbers . <EoL>
<BoL> Returns an AsymmetricVerificationContext used for signing data . <EoL>
<BoL> Verifies the signature of the data . <EoL>
<BoL> Performs a key exchange operation using the provided algorithm with the provided peer 's public key . <EoL>
<BoL> The EllipticCurvePublicKey for this private key . <EoL>
<BoL> Signs the data <EoL>
<BoL> Returns an AsymmetricSignatureContext used for signing data . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns an EllipticCurvePrivateNumbers . <EoL>
<BoL> Returns the key serialized as bytes . <EoL>
<BoL> Returns an EllipticCurvePublicNumbers . <EoL>
<BoL> Returns an AsymmetricVerificationContext used for signing data . <EoL>
<BoL> Verifies the signature of the data . <EoL>
<BoL> Modular Multiplicative Inverse . Returns x such that : ( x*e ) mod m == 1 <EoL>
<BoL> Compute the CRT private_exponent % ( p - 1 ) value from the RSA private_exponent ( d ) and p . <EoL>
<BoL> Compute the CRT private_exponent % ( q - 1 ) value from the RSA private_exponent ( d ) and q . <EoL>
<BoL> Compute the CRT ( q ** -1 ) % p value from RSA primes p and q . <EoL>
<BoL> Compute factors p and q from the private exponent d. We assume that n has no more than two factors . This function is adapted from code in PyCrypto . <EoL>
<BoL> Authenticates the provided bytes . <EoL>
<BoL> Returns the results of processing the final block as bytes and allows delayed passing of the authentication tag . <EoL>
<BoL> Returns the results of processing the final block as bytes . <EoL>
<BoL> Processes the provided bytes through the cipher and returns the results as bytes . <EoL>
<BoL> Processes the provided bytes and writes the resulting data into the provided buffer . Returns the number of bytes written . <EoL>
<BoL> Checks that all the necessary invariants of this ( mode , algorithm ) combination are met . <EoL>
<BoL> Return a HashContext that is a copy of the current context . <EoL>
<BoL> Finalizes the hash context and returns the hash digest as bytes . <EoL>
<BoL> Processes the provided bytes through the hash . <EoL>
<BoL> Deterministically generates and returns a new key based on the existing key material . <EoL>
<BoL> Checks whether the key generated by the key material matches the expected derived key . Raises an exception if they do not match . <EoL>
<BoL> Return a MACContext that is a copy of the current context . <EoL>
<BoL> Returns the message authentication code as bytes . <EoL>
<BoL> Processes the provided bytes . <EoL>
<BoL> Checks if the generated message authentication code matches the signature . <EoL>
<BoL> Reads the next mpint from the data . <EoL>
<BoL> Retrieves the next RFC 4251 string value from the data . <EoL>
<BoL> Checks equality . <EoL>
<BoL> Computes a hash . <EoL>
<BoL> Checks not equal . <EoL>
<BoL> Returns bytes using digest passed . <EoL>
<BoL> Serializes the certificate to PEM or DER format . <EoL>
<BoL> Returns the public key <EoL>
<BoL> Adds an X.509 extension to the certificate . <EoL>
<BoL> Sets the CA 's distinguished name . <EoL>
<BoL> Sets the certificate expiration time . <EoL>
<BoL> Sets the certificate activation time . <EoL>
<BoL> Sets the requestor 's public key ( as found in the signing request ) . <EoL>
<BoL> Sets the certificate serial number . <EoL>
<BoL> Signs the certificate using the CA 's private key . <EoL>
<BoL> Sets the requestor 's distinguished name . <EoL>
<BoL> Checks equality . <EoL>
<BoL> Returns a revoked certificate ( or slice of revoked certificates ) . <EoL>
<BoL> Iterator over the revoked certificates <EoL>
<BoL> Number of revoked certificates in the CRL . <EoL>
<BoL> Checks not equal . <EoL>
<BoL> Returns bytes using digest passed . <EoL>
<BoL> Returns an instance of RevokedCertificate or None if the serial_number is not in the CRL . <EoL>
<BoL> Verifies signature of revocation list against given public key . <EoL>
<BoL> Serializes the CRL to PEM or DER format . <EoL>
<BoL> Adds an X.509 extension to the certificate revocation list . <EoL>
<BoL> Adds a revoked certificate to the CRL . <EoL>
<BoL> Checks equality . <EoL>
<BoL> Computes a hash . <EoL>
<BoL> Checks not equal . <EoL>
<BoL> Encodes the request to PEM or DER format . <EoL>
<BoL> Returns the public key <EoL>
<BoL> Creates an empty X.509 certificate request ( v1 ) . <EoL>
<BoL> Adds an X.509 extension to the certificate request . <EoL>
<BoL> Signs the request using the requestor 's private key . <EoL>
<BoL> Sets the certificate requestor 's distinguished name . <EoL>
<BoL> Format as RFC4514 Distinguished Name string . For example 'CN=foobar.com , O=Foo Corp , C=US ' <EoL>
<BoL> Format as RFC4514 Distinguished Name string . <EoL>
<BoL> Format as RFC4514 Distinguished Name string . <EoL>
<BoL> Normalizes a datetime to a naive datetime in UTC . <EoL>
<BoL> Parse addr into its constituent realname and email address parts . <EoL>
<BoL> Escape special characters in RFC4514 Distinguished Name value . <EoL>
<BoL> Translate a *group of selectors* to XPath . <EoL>
<BoL> Common implementation for pseudo-classes that never match . <EoL>
<BoL> Translate any parsed selector object . <EoL>
<BoL> Translate an attribute selector . <EoL>
<BoL> ight is an immediate child of left <EoL>
<BoL> Translate a class selector . <EoL>
<BoL> Translate a combined selector . <EoL>
<BoL> ight is a child , grand-child or further descendant of left <EoL>
<BoL> ight is a sibling immediately after left <EoL>
<BoL> Translate a type or universal selector . <EoL>
<BoL> Translate a functional pseudo-class . <EoL>
<BoL> Translate an ID selector . <EoL>
<BoL> ight is a sibling after left , immediately or not <EoL>
<BoL> Translate a pseudo-class . <EoL>
<BoL> Translate a pseudo-element . <EoL>
<BoL> Return the specificity_ of this selector as a tuple of 3 integers . <EoL>
<BoL> Parse a CSS *group of selectors* . <EoL>
<BoL> Lower-case , but only in the ASCII range . <EoL>
<BoL> Parses the arguments for : nth-child ( ) and friends . <EoL>
<BoL> Append '*/ ' to the path to keep the context constrained to a single parent . <EoL>
<BoL> Same as : meth : ` from_xml_root ` , but for documents parsed with an HTML parser like ` html5lib < http : //html5lib.readthedocs.org/ > ` _ , which should be the case of documents with the `` text/html `` MIME type . <EoL>
<BoL> Wrap for selector matching the root of an XML or XHTML document . <EoL>
<BoL> Return an iterator of existing : class : ` ElementWrapper ` objects for this element ’ s ancestors , in reversed tree order ( from : attr : ` parent ` to the root ) <EoL>
<BoL> Return an iterator of newly-created : class : ` ElementWrapper ` objects for this element ’ s child elements , in tree order . <EoL>
<BoL> Return an iterator of existing : class : ` ElementWrapper ` objects for this element ’ s previous siblings , in reversed tree order . <EoL>
<BoL> Return an iterator of newly-created : class : ` ElementWrapper ` objects for the entire subtree rooted at this element , in tree order . <EoL>
<BoL> Return wether this elememt matches any of the given selectors . <EoL>
<BoL> Return the first element ( in tree order ) that matches any of the given selectors . <EoL>
<BoL> Return elements , in tree order , that match any of the given selectors . <EoL>
<BoL> Add a selector and its payload to the matcher . <EoL>
<BoL> Match selectors against the given element . <EoL>
<BoL> Transform ( only ) ASCII letters to lower case : A-Z is mapped to a-z . <EoL>
<BoL> Compile a ( comma-separated ) list of selectors . <EoL>
<BoL> Parse ` < An+B > < http : //dev.w3.org/csswg/css-syntax-3/ # anb > ` _ , as found in ` : nth-child ( ) < http : //dev.w3.org/csswg/selectors/ # nth-child-pseudo > ` _ and related Selector pseudo-classes . <EoL>
<BoL> : param input : A : term : ` string ` , or an iterable of : term : ` component values ` . <EoL>
<BoL> Returns None ( not a qualified name ) or ( ns , local ) , in which None is a wildcard . The empty string for ns is `` no namespace '' . <EoL>
<BoL> during parse exceptions may be handled differently depending on init parameter `` raiseExceptions `` <EoL>
<BoL> Parse given ` cssText ` which is assumed to be the content of a HTML style attribute . <EoL>
<BoL> Replace the default URL fetch function with a custom one . <EoL>
<BoL> : param prefs : instance of Preferences <EoL>
<BoL> Short form of hash , e.g . # 123 instead of # 112233 <EoL>
<BoL> indent a block like a CSSStyleDeclaration to the given level which may be higher than self._level ( e.g . for CSSStyleDeclaration ) <EoL>
<BoL> used by all styledeclarations to get the propertyname used dependent on prefs setting defaultPropertyName and keepAllProperties <EoL>
<BoL> serializes CSSCharsetRule encoding : string <EoL>
<BoL> serializes CSSComment which consists only of commentText <EoL>
<BoL> serializes CSSFontFaceRule <EoL>
<BoL> serializes CSSImportRule <EoL>
<BoL> serializes CSSMediaRule <EoL>
<BoL> serializes CSSNamespaceRule <EoL>
<BoL> serializes CSSPageRule <EoL>
<BoL> serializes CSSStyleRule <EoL>
<BoL> serializes a complete CSSStyleSheet <EoL>
<BoL> serializes CSSUnknownRule anything until `` ; '' or `` { ... } '' + CSSComments <EoL>
<BoL> serializes CSSVariablesRule <EoL>
<BoL> serializes MarginRule <EoL>
<BoL> Style declaration of CSSStyleRule <EoL>
<BoL> a Properties priority `` ! '' S* `` important '' <EoL>
<BoL> Serialize a CSS calc value <EoL>
<BoL> Serialize a CSS function value <EoL>
<BoL> Style declaration of CSSStyleRule <EoL>
<BoL> Serializes a CSSVariable <EoL>
<BoL> Variables of CSSVariableRule . <EoL>
<BoL> Serialize a ColorValue , a HASH simple value or FUNCTION <EoL>
<BoL> Serialize an ExpressionValue ( IE only ) , should at least keep the original syntax <EoL>
<BoL> Serializes a PropertyValue <EoL>
<BoL> a single Selector including comments <EoL>
<BoL> Serializes a Value , valuesOnly is ignored <EoL>
<BoL> comma-separated list of media , default is 'all ' <EoL>
<BoL> a single media used in medialist <EoL>
<BoL> Creates a new CSSStyleSheet . <EoL>
<BoL> A few profiles are predefined . <EoL>
<BoL> Compile all regular expressions into callable objects <EoL>
<BoL> Expand macros in token dictionary <EoL>
<BoL> Add a new profile with name ` profile ` ( e.g . 'CSS level 2 ' ) and the given ` properties ` . <EoL>
<BoL> Add a list of profiles at once . <EoL>
<BoL> Generator : Yield property names , if no ` profiles ` is given all profile 's properties are used . <EoL>
<BoL> Remove ` profile ` or remove ` all ` profiles . <EoL>
<BoL> Check if ` value ` is valid for given property ` name ` using **any** profile . <EoL>
<BoL> Check if ` value ` is valid for given property ` name ` returning `` ( valid , profile ) `` . <EoL>
<BoL> Replace the name of the encoding in the charset rule at the beginning of `` input `` with `` encoding `` . If `` input `` does n't starts with a charset rule , `` input `` will be returned unmodified . <EoL>
<BoL> Detect the encoding of the byte string `` input `` , which contains the beginning of a CSS file . <EoL>
<BoL> Detect the encoding of the unicode string `` input `` , which contains the beginning of a CSS file . <EoL>
<BoL> Retrieve data from `` url `` . cssutils default implementation of fetch URL function . <EoL>
<BoL> Return definition used for parsing . <EoL>
<BoL> Set value of `` seq `` which is readonly . <EoL>
<BoL> Return string value of t ( t may be a string , a list of token tuples or a single tuple in format ( type , value , line , col ) . Mainly used to get a string value of t for error messages . <EoL>
<BoL> adds default productions if not already present , used by _parse only <EoL>
<BoL> The parsable textual representation . <EoL>
<BoL> normalizes x , namely : <EoL>
<BoL> Check if new keyword fits the rule it is used for . <EoL>
<BoL> : param cssText : A parsable DOMString . <EoL>
<BoL> : param encoding : a valid encoding to be used . <EoL>
<BoL> returns tuple ( text , dict-of-namespaces ) or if no namespaces are in cssText returns ( cssText , { } ) <EoL>
<BoL> for STRING returns the actual content without surrounding `` '' or `` and without respective escapes , e.g . : : <EoL>
<BoL> returns tokens of textortokens which may already be tokens in which case simply returns input <EoL>
<BoL> for URI returns the actual content without surrounding url ( ) or url ( `` '' ) , url ( `` ) and without respective escapes , e.g . : : <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : param cssText : textual text to set or tokenlist which is not tokenized anymore . May also be a single token for this rule <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . <EoL>
<BoL> : param style : a CSSStyleDeclaration or string <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.HierarchyRequestErr ` : Raised if the rule can not be inserted at this point in the style sheet . <EoL>
<BoL> : param media : a : class : ` ~cssutils.stylesheets.MediaList ` or string <EoL>
<BoL> Raises xml.dom.SyntaxErr if name is not a string . <EoL>
<BoL> Generator iterating over these rule 's cssRules . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : param cssText : a parseable string or a tuple of ( cssText , dict-of-namespaces ) : Exceptions : - : exc : ` ~xml.dom.NamespaceErr ` : Raised if a specified selector uses an unknown namespace prefix . <EoL>
<BoL> : param media : a : class : ` ~cssutils.stylesheets.MediaList ` or string <EoL>
<BoL> Add ` rule ` to page rule . Same as `` insertRule ( rule ) `` . <EoL>
<BoL> Delete the rule at ` index ` from rules `` cssRules `` . <EoL>
<BoL> Implements base `` insertRule `` . <EoL>
<BoL> Return serialized property cssText <EoL>
<BoL> Used during parse of new sheet only ! : param namespaceURI : the new value for this rules namespaceURI <EoL>
<BoL> : param cssText : initial value for this rules cssText which is parsed : exceptions : - : exc : ` ~xml.dom.HierarchyRequestErr ` : Raised if the rule can not be inserted at this point in the style sheet . <EoL>
<BoL> : param namespaceURI : the initial value for this rules namespaceURI : exceptions : - : exc : ` ~xml.dom.NoModificationAllowedErr ` : ( CSSRule ) Raised if this rule is readonly or a namespaceURI is already set in this rule . <EoL>
<BoL> : param prefix : the new prefix : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . - : exc : ` ~xml.dom.NoModificationAllowedErr ` : Raised if this rule is readonly . <EoL>
<BoL> Parse ` selectorText ` which may also be a list of tokens and returns ( selectorText , seq ) . <EoL>
<BoL> Check if margin is set in the rule . <EoL>
<BoL> Delete the style ( the MarginRule ) for ` margin ` ( which must be normalized ) . <EoL>
<BoL> Retrieve the style ( of MarginRule ) for ` margin ` ( which must be normalized ) . <EoL>
<BoL> Set the style ( of MarginRule ) for ` margin ` ( which must be normalized ) . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> Wrapper for cssutils Selector object . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . <EoL>
<BoL> Wrapper for cssutils Selector object . <EoL>
<BoL> : param style : a CSSStyleDeclaration or string <EoL>
<BoL> Implements base `` insertRule `` . <EoL>
<BoL> Set common attributes for all rules . <EoL>
<BoL> : param cssText : A parsable DOMString . <EoL>
<BoL> ( DOM ) Retrieve a CSS rule by ordinal ` index ` . <EoL>
<BoL> Yield the rules which have the given ` type ` only , one of the constants defined in : class : ` cssutils.css.CSSRule ` . <EoL>
<BoL> Return iterator for all different names in order as set if names are set twice the last one is used ( double reverse ! ) <EoL>
<BoL> Check if a property ( or a property with given name ) is in style . <EoL>
<BoL> Delete property `` CSSName `` from this declaration . If property is not in this declaration return u '' just like removeProperty . <EoL>
<BoL> Retrieve the value of property `` CSSName `` from this declaration . <EoL>
<BoL> Iterator of set Property objects with different normalized names . <EoL>
<BoL> Prevent setting of unknown properties on CSSStyleDeclaration which would not work anyway . For these `` CSSStyleDeclaration.setProperty `` MUST be called explicitly ! <EoL>
<BoL> Set value of property `` CSSName `` . `` value `` may also be a tuple of ( value , priority ) , e.g . style [ 'color ' ] = ( 'red ' , 'important ' ) <EoL>
<BoL> ( cssutils only ) Overwritten here and effectively the same as `` self.removeProperty ( CSSname ) `` . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> ( DOM CSS2Properties ) Overwritten here and effectively the same as `` self.getPropertyValue ( CSSname ) `` . <EoL>
<BoL> Check each contained property for validity . <EoL>
<BoL> Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties . <EoL>
<BoL> ( DOM CSS2Properties ) Overwritten here and effectively the same as `` self.setProperty ( CSSname , value ) `` . <EoL>
<BoL> Generator yielding any known child in this declaration including *all* properties , comments or CSSUnknownrules . <EoL>
<BoL> : returns : serialized property cssText , each property separated by given ` separator ` which may e.g . be `` u '' `` to be able to use cssText directly in an HTML style attribute . `` ; `` is part of each property ( except the last one ) and ** can not ** be set with separator ! <EoL>
<BoL> : param name : optional ` name ` of properties which are requested . <EoL>
<BoL> : param name : of the CSS property , always lowercase ( even if not normalized ) : param normalize : if `` True `` ( DEFAULT ) name will be normalized ( lowercase , no simple escapes ) so `` color '' , `` COLOR '' or `` C\olor '' will all be equivalent <EoL>
<BoL> : param name : of the CSS property , always lowercase ( even if not normalized ) : param normalize : if `` True `` ( DEFAULT ) name will be normalized ( lowercase , no simple escapes ) so `` color '' , `` COLOR '' or `` C\olor '' will all be equivalent <EoL>
<BoL> : param name : of the CSS property , always lowercase ( even if not normalized ) : param normalize : if `` True `` ( DEFAULT ) name will be normalized ( lowercase , no simple escapes ) so `` color '' , `` COLOR '' or `` C\olor '' will all be equivalent <EoL>
<BoL> : param name : of the CSS property , always lowercase ( even if not normalized ) : param normalize : if `` True `` ( DEFAULT ) name will be normalized ( lowercase , no simple escapes ) so `` color '' , `` COLOR '' or `` C\olor '' will all be equivalent <EoL>
<BoL> ( DOM ) Retrieve the properties that have been explicitly set in this declaration block . <EoL>
<BoL> Analoguous to standard dict returns property names which are set in this declaration . <EoL>
<BoL> ( DOM ) Used to remove a CSS property if it has been explicitly set within this declaration block . <EoL>
<BoL> Uses children namespaces if not attached to a sheet , else the sheet's ones . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> Return whether the style declaration is valid . <EoL>
<BoL> : param cssText : a parseable string or a tuple of ( cssText , dict-of-namespaces ) : exceptions : - : exc : ` ~xml.dom.NamespaceErr ` : Raised if the specified selector uses an unknown namespace prefix . <EoL>
<BoL> : param selectorList : A SelectorList which replaces the current selectorList object <EoL>
<BoL> wrapper for cssutils SelectorList object <EoL>
<BoL> : param style : A string or CSSStyleDeclaration which replaces the current style object . <EoL>
<BoL> Encoding set in : class : ` ~cssutils.css.CSSCharsetRule ` or if `` None `` resulting in default `` utf-8 `` encoding being used . <EoL>
<BoL> Check if each contained rule is valid . <EoL>
<BoL> Read ( encoding , enctype , decodedContent ) from ` url ` for @ import sheets . <EoL>
<BoL> Set ` encoding ` of charset rule if present in sheet or insert a new : class : ` ~cssutils.css.CSSCharsetRule ` with given ` encoding ` . If ` encoding ` is None removes charsetrule if present resulting in default encoding of utf-8 . <EoL>
<BoL> Set @ import URL loader , if None the default is used . <EoL>
<BoL> Updates self._variables , called when @ import or @ variables rules is added to sheet . <EoL>
<BoL> Add ` rule ` to style sheet at appropriate position . Same as `` insertRule ( rule , inOrder=True ) `` . <EoL>
<BoL> Delete rule at ` index ` from the style sheet . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . <EoL>
<BoL> Check if a variable is in variable declaration block . : param variableName : a string <EoL>
<BoL> Retrieve the value of variable `` variableName `` from this declaration . <EoL>
<BoL> : param cssText : Shortcut , sets CSSVariablesDeclaration.cssText : param parentRule : The CSS rule that contains this declaration block or None if this CSSVariablesDeclaration is not attached to a CSSRule . : param readonly : defaults to False Format : : variableset : vardeclaration [ ' ; ' S* vardeclaration ] * S* ; vardeclaration : varname ' : ' S* term ; varname : IDENT S* ; <EoL>
<BoL> Iterator of names of set variables . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> Setting this attribute will result in the parsing of the new value and resetting of all the properties in the declaration block including the removal or addition of properties . <EoL>
<BoL> Used to retrieve the value of a variable if it has been explicitly set within this variable declaration block . <EoL>
<BoL> Used to retrieve the variables that have been explicitly set in this variable declaration block . <EoL>
<BoL> Analoguous to standard dict returns variable names which are set in this declaration . <EoL>
<BoL> Used to remove a variable if it has been explicitly set within this variable declaration block . <EoL>
<BoL> Used to set a variable value within this variable declaration block . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . <EoL>
<BoL> : param variables : a CSSVariablesDeclaration or string <EoL>
<BoL> Return definition used for parsing . <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . <EoL>
<BoL> Check if new keyword fits the rule it is used for . <EoL>
<BoL> : param style : A string or CSSStyleDeclaration which replaces the current style object . <EoL>
<BoL> adds default productions if not already present , used by _parse only <EoL>
<BoL> Return serialized property cssText . <EoL>
<BoL> Return True if validation is enabled . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified CSS string value has a syntax error and is unparsable . - : exc : ` ~xml.dom.NoModificationAllowedErr ` : Raised if the rule is readonly . <EoL>
<BoL> : exceptions : - : exc : ` ~xml.dom.SyntaxErr ` : Raised if the specified name has a syntax error and is unparsable . <EoL>
<BoL> priority a string , currently either u '' , u ' ! important ' or u'important ' <EoL>
<BoL> See css.PropertyValue <EoL>
<BoL> Validate value against ` profiles ` which are checked dynamically . <EoL>
<BoL> : param cssText : the parsable cssText of the value : param readonly : defaults to False <EoL>
<BoL> The value at position ` index ` . Alternatively simple use `` PropertyValue [ index ] `` . <EoL>
<BoL> Return serialized format . <EoL>
<BoL> Use children namespaces if not attached to a sheet , else the sheet's ones . <EoL>
<BoL> Overwrite ListSeq.__setitem__ <EoL>
<BoL> : param selectorText : comma-separated list of selectors or a tuple of ( selectorText , dict-of-namespaces ) : exceptions : - : exc : ` ~xml.dom.NamespaceErr ` : Raised if the specified selector uses an unknown namespace prefix . <EoL>
<BoL> Append ` newSelector ` to this list ( a string will be converted to a : class : ` ~cssutils.css.Selector ` ) . <EoL>
<BoL> Closure to keep name known in each properties accessor function DOMname is converted to CSSname here , so actual calls use CSSname . <EoL>
<BoL> Return CSSname for given DOMname e.g . for DOMname 'fontStyle ' returns 'font-style ' . <EoL>
<BoL> Returns DOMname for given CSSname e.g . for CSSname 'font-style ' returns 'fontStyle ' . <EoL>
<BoL> Insert ` rule ` into the rules `` cssRules `` . <EoL>
<BoL> deletes CSSNamespaceRule ( s ) with rule.prefix == prefix <EoL>
<BoL> returns effective prefix for given namespaceURI or raises IndexError if this can not be found <EoL>
<BoL> init <EoL>
<BoL> Read cssText from url and decode it using all relevant methods ( HTTP header , BOM , @ charset ) . Returns <EoL>
<BoL> *prods Prod or Sequence objects options : optional=False <EoL>
<BoL> Check if token matches <EoL>
<BoL> Return : <EoL>
<BoL> Start Choice from zero <EoL>
<BoL> @ rule dummy ( matches ATKEYWORD to remove unknown rule tokens from stream : : <EoL>
<BoL> Return if token matches . <EoL>
<BoL> New tokens generator which has S tokens removed , if followed by anything in `` until `` , normally a `` , `` . <EoL>
<BoL> Build a generator which is the only thing that is parsed ! old classes may use lists etc <EoL>
<BoL> *prods Prod or Choice or Sequence objects **options : minmax = lambda : ( 1 , 1 ) callback returning number of times this sequence may run <EoL>
<BoL> Return current element of Sequence , used by name <EoL>
<BoL> Called by Choice to try to find if Sequence matches . <EoL>
<BoL> Return <EoL>
<BoL> Reset this Sequence if it is nested . <EoL>
<BoL> normalizes x , namely : <EoL>
<BoL> Return new generator starting with token followed by all tokens in `` tokens `` <EoL>
<BoL> set log of errorhandler 's log <EoL>
<BoL> Retrieve all `` url ( urlstring ) `` values ( in e.g . : class : ` cssutils.css.CSSImportRule ` or : class : ` cssutils.css.CSSValue ` objects of given ` sheet ` . <EoL>
<BoL> Return file URL of ` path ` <EoL>
<BoL> Serialize value with quotes e.g . : : <EoL>
<BoL> Retrieve actual value of string without quotes . Escaped quotes inside the value are resolved , e.g . : : <EoL>
<BoL> Serialize value by adding `` url ( ) `` and with quotes if needed e.g . : : <EoL>
<BoL> Return actual content without surrounding `` url ( `` and `` ) '' and removed surrounding quotes too including contained escapes of quotes , e.g . : : <EoL>
<BoL> Replace all URLs in : class : ` cssutils.css.CSSImportRule ` or : class : ` cssutils.css.CSSValue ` objects of given ` sheetOrStyle ` . <EoL>
<BoL> Recurcively combine all rules in given ` sheet ` into a ` target ` sheet . <EoL>
<BoL> Appends val . Adds a single S after each token except as follows : <EoL>
<BoL> Always use named instead of positional parameters . <EoL>
<BoL> Set options resulting in a minified stylesheet . <EoL>
<BoL> Escapes characters not allowed in the current encoding the CSS way with a backslash followed by a uppercase hex code point <EoL>
<BoL> Set the global serializer used by all class in cssutils . <EoL>
<BoL> : param mediaText : Unicodestring of parsable comma separared media or a ( Python ) list of media . <EoL>
<BoL> Overwriting ListSeq.__setitem__ <EoL>
<BoL> : param mediaText : simple value or comma-separated list of media <EoL>
<BoL> Add the ` newMedium ` to the end of the list . <EoL>
<BoL> Delete a medium from the list . <EoL>
<BoL> Return the mediaType of the ` index ` 'th element in the list . If ` index ` is greater than or equal to the number of media in the list , returns `` None `` . <EoL>
<BoL> : param mediaText : unicodestring of parsable media <EoL>
<BoL> : param mediaText : a single media query string , e.g . `` print and ( min-width : 25cm ) `` <EoL>
<BoL> : param mediaType : one of : attr : ` MEDIA_TYPES ` <EoL>
<BoL> Used to retrieve a style sheet by ordinal ` index ` . If ` index ` is greater than or equal to the number of style sheets in the list , this returns `` None `` . <EoL>
<BoL> inits tokenizer with given macros and productions which default to cssutils own macros and productions <EoL>
<BoL> compile productions into callable match objects , order is kept <EoL>
<BoL> eturns macro expanded productions , order of productions is kept <EoL>
<BoL> Push back tokens which have been pulled but not processed . <EoL>
<BoL> Generator : Tokenize text and yield tokens , each token is a tuple of : : <EoL>
<BoL> Check if text has substring string as position pos . <EoL>
<BoL> Check if the suffix of text starting at pos equals expected . <EoL>
<BoL> Shortcut for self.match ( string ) . <EoL>
<BoL> Make sure that the expression is compiled . <EoL>
<BoL> Find all instances of the pattern in the given string . <EoL>
<BoL> Find all instances of the pattern in the given string . <EoL>
<BoL> Attempt to do a match of the regular expression . <EoL>
<BoL> Search the string for the pattern . <EoL>
<BoL> Split the string at the pattern . <EoL>
<BoL> Replace all occurences of the pattern with the given replacement . <EoL>
<BoL> Replace all occurences of the pattern with the given replacement . <EoL>
<BoL> only way to write to a Seq is to initialize it with new items each itemtuple has ( value , type , line ) where line is optional <EoL>
<BoL> if not readonly append to Item 's value at index <EoL>
<BoL> if not readonly replace Item at index with new Item or simply replace value or type <EoL>
<BoL> Creates and initializes the aggregation browser . Subclasses should override this method . <EoL>
<BoL> Returns a list of details for a path . <EoL>
<BoL> Raises ` ArgumentError ` when there is drilldown through high cardinality dimension or level and there is no condition in the cell for the level . <EoL>
<BoL> Returns details for the ` cell ` . <EoL>
<BoL> Gets details for a ` cut ` which should be a ` Cut ` instance . <EoL>
<BoL> Returns a single fact from cube specified by fact key ` key ` <EoL>
<BoL> Return an iterable object with of all facts within cell . ` fields ` is list of fields to be considered in the output . <EoL>
<BoL> Returns a dictionary of available features for the browsed cube . Default implementation returns an empty dictionary . <EoL>
<BoL> Returns ` True ` if function ` function_name ` is bult-in . Returns ` False ` if the browser can not compute the function and post-aggregation calculation should be used . <EoL>
<BoL> Returns empty path details . Default fall-back for backends that do not support the path details . The level key and label are the same derived from the key . <EoL>
<BoL> Prepares the aggregate list for aggregatios . ` aggregates ` might be a list of aggregate names or ` MeasureAggregate ` objects . <EoL>
<BoL> Prepares an order list . Returns list of tuples ( ` attribute ` , ` order_direction ` ) . ` attribute ` is cube 's attribute object . <EoL>
<BoL> Bundle multiple requests from ` queries ` into a single one . <EoL>
<BoL> Tests whether the cube can be used . Refer to the backend's documentation for more information about what is being tested . <EoL>
<BoL> Return cells as iterato <EoL>
<BoL> Return shallow copy of the receiver with cached cells . If cells are an iterator , they are all fetched in a list . <EoL>
<BoL> Returns ` True ` if the result was drilled down by ` dimension ` ( at any level ) <EoL>
<BoL> Returns iterator of drilled-down rows which yields a named tuple with named attributes : ( key , label , path , record ) . <EoL>
<BoL> Return dictionary representation of the aggregation result . Can be used for JSON serialisation . <EoL>
<BoL> Create an attribute from ` metadata ` which can be a dictionary or a string representing the attribute name . <EoL>
<BoL> Localize the attribute , allow localization of the format . <EoL>
<BoL> Returns a copy of the cube translated with ` translation ` <EoL>
<BoL> Returns localized attribute reference for locale ` locale ` . <EoL>
<BoL> Returns list of authorized cubes from ` cubes ` . If none of the cubes are authorized an empty list is returned . <EoL>
<BoL> Returns a list of tuples : ( ` dimension ` , ` hierarchy ` , ` level ` ) . <EoL>
<BoL> Restricts the ` cell ` for ` cube ` according to authorization by ` token ` . <EoL>
<BoL> Creates a Calendar object for providing date/time paths and for relative date/time manipulation . <EoL>
<BoL> Returns current date in the calendar 's timezone . <EoL>
<BoL> Returns a path representing current date and time with ` units ` as path items . <EoL>
<BoL> Returns a path from ` time ` containing date/time ` units ` . ` units ` can be a list of strings or a ` Hierarchy ` object . <EoL>
<BoL> Returns distance between ` time ` and the nearest ` period ` start relative to ` time ` in ` unit ` units . For example : distance between today and start of this year . <EoL>
<BoL> Truncates the ` time ` to calendar unit ` unit ` . Consider week start day from the calendar . <EoL>
<BoL> Returns a new cell that is a conjunction of the two provided cells . The cube has to match . <EoL>
<BoL> cells are considered equal if : * they refer to the same cube * they have same set of cuts ( regardless of their order ) <EoL>
<BoL> Returns ` True ` if the cell contains cuts . <EoL>
<BoL> Return string representation of the cell by using standard cuts-to-string conversion . <EoL>
<BoL> Returns index of first occurence of cut for ` dimension ` . Returns `` None `` if no cut with ` dimension ` is found . <EoL>
<BoL> Returns ` True ` if one of the cuts contains ` level ` of dimension ` dim ` . If ` hierarchy ` is not specified , then dimension 's default hierarchy is used . <EoL>
<BoL> Return first found cut for given ` dimension ` <EoL>
<BoL> Returns a list of tuples : ( ` dimension ` , ` hierarchy ` , ` level ` ) where ` level ` is the deepest level specified in the respective cut . <EoL>
<BoL> Returns cuts for ` dimension ` . If ` exclude ` is ` True ` then the effect is reversed : return all cuts except those with ` dimension ` . <EoL>
<BoL> Create another cell by drilling down ` dimension ` next level on current level 's key ` value ` . <EoL>
<BoL> Returns `` True `` when cell is base cell for ` dimension ` . Cell is base if there is a point cut with path referring to the most detailed level of the dimension ` hierarchy ` . <EoL>
<BoL> Returns a dictionary of dimension names as keys and level depths ( index of deepest level ) . <EoL>
<BoL> Create another cell by slicing through multiple slices . <EoL>
<BoL> Return first point cut for given ` dimension ` <EoL>
<BoL> Create another cell by slicing receiving cell through ` dimension ` at ` path ` . <EoL>
<BoL> Returns a cell that contains only non-hidden cuts . <EoL>
<BoL> Rolls-up cell - goes one or more levels up through dimension hierarchy . It works in similar way as drill down in : meth : ` AggregationBrowser.aggregate ` but in the opposite direction ( it is like `` cd .. `` in a UNIX shell ) . <EoL>
<BoL> Rolls-up cell - goes one or more levels up through dimension hierarchy . If there is no level to go up ( we are at the top level ) , then the cut is removed . <EoL>
<BoL> Returns new cell by slicing receiving cell with ` cut ` . Cut with same dimension as ` cut ` will be replaced , if there is no cut with the same dimension , then the ` cut ` will be appended . <EoL>
<BoL> Returns a dictionary representation of the cell <EoL>
<BoL> Return string representation of the cell by using standard cuts-to-string conversion . <EoL>
<BoL> Creates a cross-table formatter for JSON output . <EoL>
<BoL> Add dimension to cube . Replace dimension with same name . Raises ` ModelInconsistencyError ` when dimension with same name already exists in the receiver . <EoL>
<BoL> Get aggregate object . If ` obj ` is a string , then aggregate with given name is returned , otherwise aggregate object is returned if it belongs to the cube . Returned object is of ` MeasureAggregate ` type . <EoL>
<BoL> Returns aggregtates for measure with ` name ` . Only direct function aggregates are returned . If the measure is specified in an expression , the aggregate is not included in the returned list <EoL>
<BoL> Returns an attribute object ( dimension attribute , measure or detail ) . <EoL>
<BoL> Collect all original and dependant cube attributes for ` attributes ` , sorted by their dependency : starting with attributes that do n't depend on anything . For exapmle , if the ` attributes ` is [ a , b ] and a = c * 2 , then the result list would be [ b , c , a ] or [ c , b , a ] . <EoL>
<BoL> Get dimension object . If ` obj ` is a string , then dimension with given name is returned , otherwise dimension object is returned if it belongs to the cube . <EoL>
<BoL> Create a cube object from ` metadata ` dictionary . The cube has no dimensions attached after creation . You should link the dimensions to the cube according to the ` Cube.dimension_links ` property using ` Cube._add_dimension ( ) ` <EoL>
<BoL> Get a list of aggregates with ` names ` . <EoL>
<BoL> Returns a list of cube 's attributes . If ` aggregated ` is ` True ` then attributes after aggregation are returned , otherwise attributes for a fact are considered . <EoL>
<BoL> Get a list of measures as ` Attribute ` objects . If ` measures ` is ` None ` then all cube 's measures are returned . <EoL>
<BoL> Links ` dimension ` object or a clone of it to the cube according to the specification of cube 's dimension link . See : meth : ` Dimension.clone ` for more information about cloning a dimension . <EoL>
<BoL> Get measure object . If ` obj ` is a string , then measure with given name is returned , otherwise measure object is returned if it belongs to the cube . Returned object is of ` Measure ` type . <EoL>
<BoL> Convert to a dictionary . If ` with_mappings ` is `` True `` ( which is default ) then ` joins ` , ` mappings ` , ` fact ` and ` options ` are included . Should be set to `` False `` when returning a dictionary that will be provided in an user interface or through server API . <EoL>
<BoL> Validate cube . See Model.validate ( ) for more information . <EoL>
<BoL> Returns deepest level number . Subclasses should implement this method <EoL>
<BoL> Returns dictionary representation fo the receiver . The keys are : ` dimension ` . <EoL>
<BoL> Get dimension attribute . ` name ` is an attribute name ( default ) or attribute reference if ` by_ref ` is ` True ` . ` . <EoL>
<BoL> Create a dimension from a ` metadata ` dictionary . Some rules : <EoL>
<BoL> Get hierarchy object either by name or as ` Hierarchy ` . If ` obj ` is `` None `` then default hierarchy is returned . <EoL>
<BoL> Get level by name or as Level object . This method is used for coalescing value <EoL>
<BoL> Return dictionary representation of the dimension <EoL>
<BoL> Validate dimension . See Model.validate ( ) for more information . <EoL>
<BoL> Creates a drilldown object for ` drilldown ` specifictation of ` cell ` . The drilldown object can be used by browsers for convenient access to various drilldown properties . <EoL>
<BoL> Returns a list of tuples : ( ` dimension ` , ` hierarchy ` , ` level ` ) where ` level ` is the deepest level drilled down to . <EoL>
<BoL> Returns drilldown items for dimension ` dim ` . <EoL>
<BoL> Returns list of levels in the drilldown that are of high cardinality and there is no cut for that level in the ` cell ` . <EoL>
<BoL> Returns drilldown items as strings : `` dimension @ hierarchy : level `` . If hierarchy is dimension 's default hierarchy , then it is not included in the string : `` dimension : level `` <EoL>
<BoL> Returns a dictionary where keys are dimension names and values are list of level names for the drilldown . Use this method to populate the result levels attribute . <EoL>
<BoL> A facts iterator object returned by the browser 's ` facts ( ) ` method . <EoL>
<BoL> Create a simple HTML table formatter . See ` CrossTableFormatter ` for information about arguments . <EoL>
<BoL> Dimension hierarchy - specifies order of dimension levels . <EoL>
<BoL> Returns ` True ` if ` level ` is last level of the hierarchy . <EoL>
<BoL> Return all dimension key attributes as a single list . <EoL>
<BoL> Return names of keys for all levels in the hierarchy to ` depth ` . If ` depth ` is ` None ` then all levels are returned . <EoL>
<BoL> Get order index of level . Can be used for ordering and comparing levels within hierarchy . <EoL>
<BoL> Returns levels for given ` depth ` . If ` path ` is longer than hierarchy levels , ` cubes.ArgumentError ` exception is raised <EoL>
<BoL> Returns levels for given path . If path is longer than hierarchy levels , ` cubes.ArgumentError ` exception is raised <EoL>
<BoL> Returns next level in hierarchy after ` level ` . <EoL>
<BoL> Returns True if path is base path for the hierarchy . Base path is a path where there are no more levels to be added - no drill down possible . <EoL>
<BoL> Returns previous level in hierarchy after ` level ` . If ` level ` is first level or `` None `` , returns `` None `` <EoL>
<BoL> Rolls-up the path to the ` level ` . If ` level ` is `` None `` then path is rolled-up only one level . <EoL>
<BoL> Convert to dictionary . Keys : <EoL>
<BoL> Sets ` value ` for ` key ` even if value is null . <EoL>
<BoL> Creates a generator that yields one JSON record per record from ` iterable ` separated by a newline character.. <EoL>
<BoL> Get attribute by ` name ` <EoL>
<BoL> Create a level object from metadata . ` name ` can override level name in the metadata . <EoL>
<BoL> Convert to dictionary <EoL>
<BoL> Abstract class for mappers which maps logical references to physical references ( tables and columns ) . <EoL>
<BoL> Collect all cube attributes and create a dictionary where keys are logical references and values are ` cubes.model.Attribute ` objects . This method should be used after each cube or mappings change . <EoL>
<BoL> Return a list of all attributes of a cube . If ` expand_locales ` is `` True `` , then localized logical reference is returned for each attribute 's locale . <EoL>
<BoL> Returns an attribute with logical reference ` name ` . <EoL>
<BoL> Returns logical reference as string for ` attribute ` in ` dimension ` . If ` dimension ` is `` Null `` then fact table is assumed . The logical reference might have following forms : <EoL>
<BoL> Returns physical reference for attribute . <EoL>
<BoL> Change the mapper 's locale <EoL>
<BoL> Returns tuple ( ` dimension ` , ` attribute ` ) from ` logical_reference ` string . Syntax of the string is : `` dimensions.attribute `` . <EoL>
<BoL> Creates default measure aggregates from a list of receiver's measures . <EoL>
<BoL> Initializes model object basics . Assures that the ` info ` is a dictionary . <EoL>
<BoL> Convert to a dictionary . If ` with_mappings ` is `` True `` ( which is default ) then ` joins ` , ` mappings ` , ` fact ` and ` options ` are included . Should be set to `` False `` when returning a dictionary that will be provided in an user interface or through server API . <EoL>
<BoL> Base class for model providers . Initializes a model provider and sets ` metadata ` – a model metadata dictionary . <EoL>
<BoL> See ` default_metadata ( ) ` for more information . <EoL>
<BoL> Set 's the provider 's ` store ` . <EoL>
<BoL> Returns a cube with ` name ` provided by the receiver . If receiver does not have the cube ` NoSuchCube ` exception is raised . <EoL>
<BoL> Returns a cube metadata by combining model 's global metadata and cube 's metadata . Merged metadata dictionaries : ` browser_options ` , ` mappings ` , ` joins ` . <EoL>
<BoL> Returns an options dictionary for cube ` name ` . <EoL>
<BoL> Returns metadata that are prepended to the provided model metadata . ` metadata ` is user-provided metadata and might be used to decide what kind of default metadata are returned . <EoL>
<BoL> Returns a dimension with ` name ` provided by the receiver . <EoL>
<BoL> Returns a metadata dictionary for dimension ` name ` and optional ` locale ` . <EoL>
<BoL> Returns ` True ` if the provider has cube ` name ` . Otherwise returns ` False ` . <EoL>
<BoL> This method is called after the provider 's ` store ` was set . Override this method if you would like to perform post-initialization from the store . <EoL>
<BoL> Get a list of metadata for cubes in the workspace . Result is a list of dictionaries with keys : ` name ` , ` label ` , ` category ` , ` info ` . <EoL>
<BoL> Return ` True ` if the provider requires a store . Subclasses might override this method . Default implementation returns ` False ` <EoL>
<BoL> Creates a cubes namespace – an object that provides model objects from the providers . <EoL>
<BoL> Registers and merges ` translation ` for language ` lang ` <EoL>
<BoL> Create a namespace ` name ` in the receiver . <EoL>
<BoL> Returns a tuple ( ` namespace ` , ` provider ` , ` basename ` ) where ` namespace ` is a namespace conaining ` cube ` , ` provider ` providers the model for the cube and ` basename ` is a name of the ` cube ` within the ` namespace ` . For example : if cube is `` slicer.nested.cube `` and there is namespace `` slicer `` then that namespace is returned and the ` basename ` will be `` nested.cube `` . <EoL>
<BoL> Retursn a list of cube info dictionaries with keys : ` name ` , ` label ` , ` description ` , ` category ` and ` info ` . <EoL>
<BoL> Returns a tuple ( ` namespace ` , ` remainder ` ) where ` namespace ` is the deepest namespace in the namespace hierarchy and ` remainder ` is the remaining part of the path that has no namespace ( is an object name or contains part of external namespace ) . <EoL>
<BoL> Returns translation in language ` lang ` for model object ` obj ` within ` context ` ( cubes , dimensions , attributes , ... ) . Looks in parent if current namespace does not have the translation . <EoL>
<BoL> Return string representation of point cut , you can use it in URLs <EoL>
<BoL> Returns index of deepest level . <EoL>
<BoL> Returns dictionary representation of the receiver . The keys are : ` dimension ` , ` type ` = `` point `` and ` path ` . <EoL>
<BoL> Return string representation of point cut , you can use it in URLs <EoL>
<BoL> Returns index of deepest level which is equivalent to the longest path . <EoL>
<BoL> Returns dictionary representation of the receiver . The keys are : ` dimension ` , ` type ` = `` range `` , ` from ` and ` to ` paths . <EoL>
<BoL> Return string representation of set cut , you can use it in URLs <EoL>
<BoL> Returns index of deepest level which is equivalent to the longest path . <EoL>
<BoL> Returns dictionary representation of the receiver . The keys are : ` dimension ` , ` type ` = `` range `` and ` set ` as a list of paths . <EoL>
<BoL> Merge ` right ` with its roles . ` right ` has to be a dictionary . <EoL>
<BoL> Creates a JSON encoder that will convert some data values and also allows iterables to be used in the object graph . <EoL>
<BoL> Returns a list of cubes from the metadata . <EoL>
<BoL> Returns browser configuration options for ` cube ` . The options are taken from the configuration file and then overriden by cube's ` browser_options ` attribute . <EoL>
<BoL> Returns namespace with ference ` ref ` <EoL>
<BoL> Returns a store for model specified in ` metadata ` . <EoL>
<BoL> Register a slicer as a model and data provider . <EoL>
<BoL> Add translation ` trans ` for ` locale ` . <EoL>
<BoL> Returns a browser for ` cube ` . <EoL>
<BoL> Returns a cube with full cube namespace reference ` ref ` for user ` identity ` and translated to ` locale ` . <EoL>
<BoL> Returns browser features for ` cube ` <EoL>
<BoL> Return names all available cubes . <EoL>
<BoL> Returns a dimension with ` name ` . <EoL>
<BoL> Flushes the cube lookup cache . <EoL>
<BoL> Opens a store ` name ` . If the store is already open , returns the existing store . <EoL>
<BoL> Get a list of metadata for cubes in the workspace . Result is a list of dictionaries with keys : ` name ` , ` label ` , ` category ` , ` info ` . <EoL>
<BoL> Convenience function for registering the default store . For more information see ` register_store ( ) ` <EoL>
<BoL> Adds a store configuration . <EoL>
<BoL> Raises ArgumentError when objects in ` list_ ` are not instances of ` cls ` <EoL>
<BoL> Raises ArgumentError when ` obj ` is not instance of ` cls ` <EoL>
<BoL> Merge ` right ` with the receiver : <EoL>
<BoL> Returns a cut from ` desc ` dictionary . If ` cube ` is specified , then the dimension is looked up in the cube and set as ` Dimension ` instances , if specified as strings . <EoL>
<BoL> Read a JSON from ` path ` . This is convenience function that provides more descriptive exception handling . <EoL>
<BoL> Return keys from ` deps ` ordered by dependency ( topological sort ) . ` deps ` is a dictionary where keys are strings and values are list of strings where keys is assumed to be dependant on values . <EoL>
<BoL> Converts ` astring ` into a dimension level tuple ( ` dimension ` , ` hierarchy ` , ` level ` ) . <EoL>
<BoL> Returns a list of available calculators . <EoL>
<BoL> Get brewery default logge <EoL>
<BoL> Converts ` drilldown ` into a list of levels to be used to drill down . ` drilldown ` can be : <EoL>
<BoL> Subtract ` amount ` number of ` unit ` s from datetime object ` time ` . <EoL>
<BoL> Return time units for levels in the hierarchy . <EoL>
<BoL> Returns a dimension point path from ` string ` . The path elements are separated by comma `` , `` character . <EoL>
<BoL> Returns a string represeting ` cuts ` . String can be used in URLs <EoL>
<BoL> Returns a string in form `` dimension @ hierarchy `` or `` dimension `` if ` hierarchy ` is `` None `` <EoL>
<BoL> Returns a string representing dimension ` path ` . <EoL>
<BoL> Collect attributes from arguments . ` containers ` are objects with method ` all_attributes ` or might be ` Nulls ` . <EoL>
<BoL> Collect all original and dependant cube attributes for ` attributes ` , sorted by their dependency : starting with attributes that do n't depend on anything . For exapmle , if the ` attributes ` is [ a , b ] and a = c * 2 , then the result list would be [ b , c , a ] or [ c , b , a ] . <EoL>
<BoL> Returns a list of all combinations of ` dimensions ` as tuples . For example , if ` dimensions ` is : `` [ 'date ' , 'product ' ] `` then it returns : <EoL>
<BoL> Create a cartesian product of levels from all ` dimensions ` . For example , if dimensions are _date_ , _product_ then result will be : levels of _date_ X levels of _product_ . Each element of the returned list is a list of tuples ( ` dimension ` , ` level ` ) <EoL>
<BoL> Convert string into an object value of ` value_type ` . The type might be : ` string ` ( no conversion ) , ` integer ` , ` float ` , ` list ` – comma separated list of strings . <EoL>
<BoL> Coalesce ` options ` dictionary according to types dictionary . Keys in ` types ` refer to keys in ` options ` , values of ` types ` are value types : string , list , float , integer or bool . <EoL>
<BoL> Return expanded dictionary : treat keys are paths separated by ` separator ` , create sub-dictionaries as necessary <EoL>
<BoL> Returns a dictionary with localizable attributes of ` obj ` . <EoL>
<BoL> Localize list of attributes . ` translations ` should be a dictionary with keys as attribute names , values are dictionaries with localizable attribute metadata , such as `` label `` or `` description `` . <EoL>
<BoL> Localize common attributes : label and description <EoL>
<BoL> Optionally import package ` name ` . If package does not exist , import a placeholder object , that raises an exception with more detailed description about the missing package . <EoL>
<BoL> Converts ` name ` into label by replacing underscores by spaces . If ` capitalize ` is `` True `` ( default ) then the first letter of the label is capitalized . <EoL>
<BoL> Check if test is below base in a URI tree <EoL>
<BoL> Accept authority or URI and extract only the authority and path . <EoL>
<BoL> Create an opener object from a list of handlers . <EoL>
<BoL> Returns a list of cuboids with all hierarchical level combinations . <EoL>
<BoL> Creates a formatter of type ` type ` . Passes rest of the arguments to the formatters initialization method . <EoL>
<BoL> Return a list of model objects of class ` class_ ` from list of object metadata ` objects ` <EoL>
<BoL> Create a default logge <EoL>
<BoL> Returns a sorted list of attributes by their dependencies . <EoL>
<BoL> Fixes metadata of an attribute . If ` metadata ` is a string it will be converted into a dictionary with key ` `` name '' ` set to the string value . <EoL>
<BoL> Expands ` metadata ` to be as complete as possible cube metadata . ` metadata ` should be a dictionary . <EoL>
<BoL> Expands links to dimensions . ` metadata ` should be a list of strings or dictionaries ( might be mixed ) . Returns a list of dictionaries with at least one key ` name ` . Other keys are : ` hierarchies ` , ` default_hierarchy_name ` , ` nonadditive ` , ` cardinality ` , ` template ` <EoL>
<BoL> Expands ` metadata ` to be as complete as possible dimension metadata . If ` expand_levels ` is ` True ` then levels metadata are expanded as well . <EoL>
<BoL> Returns a level description as a dictionary . <EoL>
<BoL> Create an instance of extension ` _ext_name ` with given arguments . <EoL>
<BoL> Find all entry points . <EoL>
<BoL> Return extension factory . <EoL>
<BoL> Return extenson object by name . Load if necessary . <EoL>
<BoL> Return list of extension names . <EoL>
<BoL> Creates an extension . First argument should be extension 's name . <EoL>
<BoL> Load module ` modulepath ` and return the last module object in the module path . <EoL>
<BoL> Create and return cubes jinja2 environment <EoL>
<BoL> Returns a tuple 9 ` onrows ` , ` oncolumns ` ) containing ` attributes ` . <EoL>
<BoL> Creates a cross table from a drilldown ( might be any list of records ) . ` onrows ` contains list of attribute names to be placed at rows and ` oncolumns ` contains list of attribute names to be placet at columns . ` aggregates_on ` specifies where the aggregates will be incuded : <EoL>
<BoL> Returns translation in language ` lang ` for model object ` obj ` of type ` type_ ` . <EoL>
<BoL> Open the specified file and use it as the stream for logging . <EoL>
<BoL> Open the current base file with the ( original ) mode and encoding . Return the resulting stream . <EoL>
<BoL> Closes the stream . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Opens ` resource ` either as a file with ` open ( ) ` or as URL with ` urlopen ( ) ` . Returns opened handle . <EoL>
<BoL> Returns a hierarchy metadata as a dictionary . <EoL>
<BoL> Reads a model description from ` source ` which can be a filename , URL , file-like object or a path to a directory . Returns a model description dictionary . <EoL>
<BoL> Load logical model a directory specified by ` path ` . Returns a model description dictionary . Model directory bundle has structure : <EoL>
<BoL> Validate model metadata . <EoL>
<BoL> Writes a model metadata bundle into new directory ` target ` from ` metadata ` . Directory should not exist . <EoL>
<BoL> Return list of levels of the conceptual object . Dimension returns just list of itself , hierarchy returns list of it 's dimensions . <EoL>
<BoL> Create dimension hierarchies from ` metadata ` ( a list of dictionaries or strings ) and possibly inherit from ` template ` dimension . <EoL>
<BoL> Return set of variables in expression ` text ` <EoL>
<BoL> Make an ordered dictionary from model objects ` objects ` where keys are object names . <EoL>
<BoL> Look-up a dimension ` name ` in ` provider ` and then in ` namespace ` . <EoL>
<BoL> Returns a localized dimension with ` name ` . <EoL>
<BoL> Collects the source value . If the window for the ` window_key ` is filled , then apply the window function and store the value in the ` record ` to key ` target_attribute ` . <EoL>
<BoL> Returns a moving average window function . <EoL>
<BoL> Extracts a tuple of values from the ` record ` by ` composite_key ` <EoL>
<BoL> Returns the how far down the cursor moved . <EoL>
<BoL> Returns a FSArray of the size of the window containing msg <EoL>
<BoL> Returns the terminal ( row , column ) of the cursor <EoL>
<BoL> Returns the how far down the cursor moved since last render . <EoL>
<BoL> Returns current terminal height and width <EoL>
<BoL> Renders array to terminal , returns the number of lines scrolled offscreen <EoL>
<BoL> Place a FSArray in a FSArray <EoL>
<BoL> Returns two FSArrays with differences underlined <EoL>
<BoL> Prints each row followed by a newline without regard for the terminal window size <EoL>
<BoL> Builds the more compact fmtstrs by using fromstr ( of the control sequences ) <EoL>
<BoL> Returns a new FmtStr with the same content but new formatting <EoL>
<BoL> Copies the current FmtStr 's attributes while changing its string . <EoL>
<BoL> Joins an iterable yielding strings or FmtStrs with self as separato <EoL>
<BoL> S.ljust ( width [ , fillchar ] ) - > string <EoL>
<BoL> Returns a new FmtStr with the same content but some attributes removed <EoL>
<BoL> S.rjust ( width [ , fillchar ] ) - > string <EoL>
<BoL> Shim for easily converting old __setitem__ calls <EoL>
<BoL> Shim for easily converting old __setitem__ calls <EoL>
<BoL> Returns a new FmtStr with the input string spliced into the the original FmtStr at start and end . If end is provided , new_str will replace the substring self.s [ start : end-1 ] . <EoL>
<BoL> Split based on seperator , optionally using a regex <EoL>
<BoL> Return a list of lines , split on newline characters , include line boundaries , if keepends is true . <EoL>
<BoL> Returns the horizontal position of character n of the string <EoL>
<BoL> Slice based on the number of columns it would take to display the substring . <EoL>
<BoL> Constructs a FullscreenWindow <EoL>
<BoL> Renders array to terminal and places ( 0-indexed ) cursor <EoL>
<BoL> Returns the number of characters read and adds them to self.unprocessed_bytes <EoL>
<BoL> Returns keypress identified by adding unprocessed bytes or None <EoL>
<BoL> Returns tuple of whether stdin is ready to read and an event . <EoL>
<BoL> Returns a callback that creates events . <EoL>
<BoL> Returns a callback that schedules events for the future . <EoL>
<BoL> Returns an event or None if no events occur before timeout . <EoL>
<BoL> Returns a callback to creates events , interrupting current event requests . <EoL>
<BoL> Adds bytes to be internal buffer to be read <EoL>
<BoL> Returns a list of strings or format dictionaries to describe the strings . <EoL>
<BoL> Returns processed text , the next token , and unprocessed text ] ) ( ? P < private > ) ( ? P < numbers > ( ? : \d+ ; ) * ( ? : \d+ ) ? ) ( ? P < intermed > ( ? P < command > ( ? P < rest > . * ) <EoL>
<BoL> Whether seq bytes might create a char in encoding if more bytes were added <EoL>
<BoL> Return key pressed from bytes_ or None <EoL>
<BoL> Returns pretty representation of an Event or keypress <EoL>
<BoL> FmtStr repr is build by concatenating these . <EoL>
<BoL> Returns a view of this Chunk from which new Chunks can be requested . <EoL>
<BoL> Reuse an existing Splitter instance for speed . <EoL>
<BoL> Returns by how much two intervals overlap <EoL>
<BoL> Returns a kwargs dictionary by turning args into kwargs <EoL>
<BoL> A sorted , python2/3 stable formatting of a dictionary . <EoL>
<BoL> Also accepts arrays of strings <EoL>
<BoL> fsarray ( list_of_FmtStrs_or_strings , width=None ) - > FSArray <EoL>
<BoL> Elementwise division for matrices . <EoL>
<BoL> Returns the seed value for the random number generator . getseed ( ) <EoL>
<BoL> Elementwise multiplication for matrices . <EoL>
<BoL> Randomly generates a matrix with normally distributed entries . <EoL>
<BoL> Sets the seed value for the random number generator . <EoL>
<BoL> Randomly generates a matrix with uniformly distributed entries . uniform ( nrows , ncols=1 , a=0 , b=1 ) <EoL>
<BoL> Elementwise max for matrices . <EoL>
<BoL> Elementwise min for matrices . <EoL>
<BoL> A wrapped binary operator that can handle non-Expression arguments . <EoL>
<BoL> Return a slice/index into the expression . <EoL>
<BoL> Returns an inequality constraint . <EoL>
<BoL> Returns an inequality constraint . <EoL>
<BoL> The negation of the expression . <EoL>
<BoL> The power operator . <EoL>
<BoL> String to recreate the object . <EoL>
<BoL> Returns a string showing the mathematical expression . <EoL>
<BoL> Check that the value satisfies the leaf 's symbolic attributes . <EoL>
<BoL> Variable must be boolean . <EoL>
<BoL> Converts a non-Expression to a Constant . <EoL>
<BoL> Default is empty list of Constants . <EoL>
<BoL> Returns a shallow copy of the object . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Is the expression affine ? <EoL>
<BoL> Is the expression concave ? <EoL>
<BoL> Is the expression constant ? <EoL>
<BoL> Is the expression convex ? <EoL>
<BoL> Is the expression DCP compliant ? ( i.e. , no unknown curvatures ) . <EoL>
<BoL> Is the expression a matrix ? <EoL>
<BoL> Is the expression negative ? <EoL>
<BoL> Is the expression positive ? <EoL>
<BoL> Leaf nodes are always piecewise linear . <EoL>
<BoL> Leaf nodes are always quadratic . <EoL>
<BoL> Is the expression a scalar ? <EoL>
<BoL> Is the expression a column or row vector ? <EoL>
<BoL> Is the expression all zero ? <EoL>
<BoL> Default is empty list of Parameters . <EoL>
<BoL> Save the value of the primal variable . <EoL>
<BoL> Returns itself as a variable . <EoL>
<BoL> String to recreate the object . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Is the expression negative ? <EoL>
<BoL> Is the expression positive ? <EoL>
<BoL> Returns itself as a parameter . <EoL>
<BoL> Default is empty list of Variables . <EoL>
<BoL> Returns a string with information about the expression . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Returns self as a constant . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Is the expression negative ? <EoL>
<BoL> Is the expression positive ? <EoL>
<BoL> Variable must be an integer . <EoL>
<BoL> Negates the target expression 's objective . <EoL>
<BoL> Returns the constants in the objective . <EoL>
<BoL> Returns info needed to reconstruct the object besides the args . <EoL>
<BoL> The objective must be concave . <EoL>
<BoL> Returns if the objective is a quadratic function . <EoL>
<BoL> Returns the parameters in the objective . <EoL>
<BoL> The value of the objective given the solver primal value . <EoL>
<BoL> Returns the variables in the objective . <EoL>
<BoL> Pass on the target expression 's objective and constraints . <EoL>
<BoL> The objective must be convex . <EoL>
<BoL> The value of the objective given the solver primal value . <EoL>
<BoL> Enforce that var > = 0 . <EoL>
<BoL> Is the expression negative ? <EoL>
<BoL> Is the expression positive ? <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Updates value fields when the problem is infeasible or unbounded . <EoL>
<BoL> Solve a problem and then return the optimal value , status , primal values , and dual values . <EoL>
<BoL> Resets the cached data . <EoL>
<BoL> Saves the values of the dual variables . <EoL>
<BoL> Saves the values of the optimal primal/dual variables . <EoL>
<BoL> Updates the problem state given the solver results . <EoL>
<BoL> Computes the graph implementation of the problem . <EoL>
<BoL> Returns a list of the constants in the problem . <EoL>
<BoL> Returns the problem data used in the call to the solver . <EoL>
<BoL> Does the problem satisfy DCP rules ? <EoL>
<BoL> Is problem a quadratic program ? <EoL>
<BoL> Returns a list of the parameters in the problem . <EoL>
<BoL> Adds a solve method to the Problem class . <EoL>
<BoL> Solves the problem using the specified method . <EoL>
<BoL> Parses the output from a solver and updates the problem state . <EoL>
<BoL> Returns a list of the variables in the problem . <EoL>
<BoL> An expression representing a positive semidefinite matrix . <EoL>
<BoL> An expression representing a symmetric matrix . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Returns a string with information about the expression . <EoL>
<BoL> Returns constraints describing the domain of the atom . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Promotes the lin op if necessary . <EoL>
<BoL> Represent the atom as an affine objective and conic constraints . <EoL>
<BoL> Returns all the constants present in the arguments . <EoL>
<BoL> Converts elementwise gradient into a diagonal matrix for Atom._grad ( ) <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom affine ? <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Is the atom piecewise linear ? <EoL>
<BoL> Is the expression quadratic ? <EoL>
<BoL> Returns the string representation of the function call . <EoL>
<BoL> Wraps an atom 's numeric function that requires numpy ndarrays as input . Ensures both inputs and outputs are the correct matrix types . <EoL>
<BoL> Returns all the parameters present in the arguments . <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Size is the same as the sum of the arguments . <EoL>
<BoL> Verify that all the shapes are the same or can be promoted . <EoL>
<BoL> Returns all the variables present in the arguments . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> By default , the sign is the most general of all the argument signs . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Raises an error if the arguments are invalid . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Is the expression piecewise linear ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Applies the binary operator to the values . <EoL>
<BoL> Default to rules for times . <EoL>
<BoL> Multiply the linear expressions . <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Multiply the linear expressions . <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Multiplication checks for 1D array * 1D array . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Validates the dimensions . <EoL>
<BoL> Multiply the linear expressions . <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Constructs a block matrix . <EoL>
<BoL> Stack the expressions horizontally . <EoL>
<BoL> Stack the expressions vertically . <EoL>
<BoL> Convolve two vectors . <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Same as times . <EoL>
<BoL> The sum of the argument dimensions - 1 . <EoL>
<BoL> Checks that both arguments are vectors , and the first is constant . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . a column argument . <EoL>
<BoL> Returns the axis being summed . <EoL>
<BoL> Depends on axis . <EoL>
<BoL> Checks that the new shape has the same number of entries as the old . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Cumulative sum via difference matrix . <EoL>
<BoL> The same as the input . <EoL>
<BoL> Return a sparse matrix representation of first order difference operator . <EoL>
<BoL> Extracts the diagonal from a matrix or makes a vector a diagonal matrix . <EoL>
<BoL> Extracts the diagonal of a matrix . <EoL>
<BoL> A column vector . <EoL>
<BoL> Convolve two vectors . <EoL>
<BoL> A square matrix . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Convolve two vectors . <EoL>
<BoL> Returns the shape from the rows , cols arguments . <EoL>
<BoL> Checks that the new shape has the same number of entries as the old . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Is the expression concave ? <EoL>
<BoL> Is the expression convex ? <EoL>
<BoL> Is the expression negative ? <EoL>
<BoL> Is the expression positive ? <EoL>
<BoL> Returns the string representation of the expression . <EoL>
<BoL> Vector of kth order differences . <EoL>
<BoL> Returns the ( row slice , column slice ) . <EoL>
<BoL> Returns a canonicalized index into a matrix . <EoL>
<BoL> Gets a slice from a matrix <EoL>
<BoL> Indexing using logical indexing or a list of indices . <EoL>
<BoL> Index/slice into the expression . <EoL>
<BoL> Returns the shape of the index expression . <EoL>
<BoL> Flattens the matrix X into a vector in column-major order . <EoL>
<BoL> Kronecker product of two matrices . <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Same as times . <EoL>
<BoL> The sum of the argument dimensions - 1 . <EoL>
<BoL> Checks that both arguments are vectors , and the first is constant . <EoL>
<BoL> Multiply the expressions elementwise . <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Quadratic if x is quadratic . <EoL>
<BoL> Same as times . <EoL>
<BoL> The sum of the argument dimensions - 1 . <EoL>
<BoL> Checks that the arguments are valid . <EoL>
<BoL> Sum the linear expression 's entries . <EoL>
<BoL> Sum the diagonal entries of the linear expression . <EoL>
<BoL> Always scalar . <EoL>
<BoL> Checks that the argument is a square matrix . <EoL>
<BoL> Vectorized strictly upper triagonal entries . <EoL>
<BoL> A vector . <EoL>
<BoL> Checks that the argument is a square matrix . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Affine times affine is not concave <EoL>
<BoL> Affine times affine is not convex <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Is the expression quadratic ? <EoL>
<BoL> Default to rules for times . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Check dimensions of arguments and linearity . <EoL>
<BoL> A function used by CVXOPT 's nonlinear solver . <EoL>
<BoL> Extract the function variables from the vector x of all variables . <EoL>
<BoL> Formats EXP constraints for the solver . <EoL>
<BoL> Place Df in the gradient of all functions . <EoL>
<BoL> Place H in the Hessian of all functions . <EoL>
<BoL> Place x0 = f ( ) in the vector of all variables . <EoL>
<BoL> Returns the variables involved in the function in order , i.e . f ( vars_ ) = f ( vstack ( variables ) ) <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Returns the parameter M . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Checks that M > = 0 and is constant . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Returns a shallow copy of the power atom . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the expression constant ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> The same sign as the argument . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Requires at least 2 arguments . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Is the atom piecewise linear ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Alias for -min_elemwise { x , 0 } . <EoL>
<BoL> Alias for max_elemwise { x,0 } . <EoL>
<BoL> Form the internal CXVPY constraints to form the weighted geometric mean t < = x^p . <EoL>
<BoL> Test if num is a positive integer power of 2 . <EoL>
<BoL> Return ( t,1 , x ) power tuple <EoL>
<BoL> Return ( x,1 , t ) power tuple <EoL>
<BoL> Return ( x , t,1 ) power tuple <EoL>
<BoL> Alias for alpha*pos ( x ) + beta*neg ( x ) . <EoL>
<BoL> Implementation details of geo_mean . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Returns a shallow copy of the geo_mean atom . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Verify that the argument A is square . <EoL>
<BoL> Miximum eigenvalue ; : math : ` \lambda_ { \min } ( A ) ` . <EoL>
<BoL> Sum of the largest k eigenvalues . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . a column argument . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Quadratic if x is affine and P is constant . <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Checks that the dimensions of x and P match . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . a column argument . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Is the atom piecewise linear ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> : math : ` \min_ { i , j } \ { X_ { i , j } \ } ` . <EoL>
<BoL> Lp , q norm ; : math : ` ( \sum_k ( \sum_l \lvert x_ { k , l } \rvert ) ^q/p ) ^ { 1/q } ` . <EoL>
<BoL> Wrapper on the different norm atoms . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . a column argument . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Is the atom piecewise linear ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the equality constraints for the SDP constraint . <EoL>
<BoL> Returns a LinOp representing the lower triangular entries . <EoL>
<BoL> Formats SDP constraints as inequalities for the solver . <EoL>
<BoL> Alias for : math : ` x^T P x ` . <EoL>
<BoL> Returns constraints describing the domain of the node . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Quadratic if x is affine and y is constant . <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Check dimensions of arguments . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Gives the ( sub/super ) gradient of the atom w.r.t . each argument . <EoL>
<BoL> Returns the parameter k . <EoL>
<BoL> Reduces the atom to an affine expression and list of constraints . <EoL>
<BoL> Is the atom concave ? <EoL>
<BoL> Is the atom convex ? <EoL>
<BoL> Is the composition non-increasing in argument idx ? <EoL>
<BoL> Is the composition non-decreasing in argument idx ? <EoL>
<BoL> Returns sign ( is positive , is negative ) of the expression . <EoL>
<BoL> Returns the ( row , col ) size of the expression . <EoL>
<BoL> Verify that k is a positive integer . <EoL>
<BoL> Sum of the smallest k values . <EoL>
<BoL> The sum of the squares of the entries . <EoL>
<BoL> Total variation of a vector , matrix , or list of matrices . <EoL>
<BoL> Formats SDP constraints as inequalities for the solver . <EoL>
<BoL> Raises an exception when called . <EoL>
<BoL> Returns a string with information about the constraint . <EoL>
<BoL> Returns a string showing the mathematical constraint . <EoL>
<BoL> Raises an error due to chained constraints . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Save the value of the dual variable for the constraint 's parent . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> Both sides must be affine . <EoL>
<BoL> Formats SOC constraints as inequalities for the solver . <EoL>
<BoL> The dimensions of a single cone . <EoL>
<BoL> Formats SOC constraints as inequalities for the solver . <EoL>
<BoL> The number of elementwise cones . <EoL>
<BoL> Formats all the elementwise cones for the solver . <EoL>
<BoL> Formats all the row/column cones for the solver . <EoL>
<BoL> Returns a sparse matrix LinOp that spaces out an expression . <EoL>
<BoL> Casts the second argument of a binary operator as an Expression.A wrapped binary operator that can handle non-Expression arguments . <EoL>
<BoL> String to recreate the object . <EoL>
<BoL> Variable must be semidefinite and symmetric . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Returns a coefficient matrix to create a symmetric matrix . <EoL>
<BoL> String to recreate the object . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Returns the graph implementation of the object . <EoL>
<BoL> A list of constraints describing the closure of the region where the expression is finite . <EoL>
<BoL> Returns info needed to reconstruct the expression besides the args . <EoL>
<BoL> Is the expression concave ? <EoL>
<BoL> Is the expression convex ? <EoL>
<BoL> Is the expression negative ? <EoL>
<BoL> Is the expression positive ? <EoL>
<BoL> Returns the string representation of the expression . <EoL>
<BoL> List the installed solvers . <EoL>
<BoL> Formats the block for block_add . <EoL>
<BoL> Convert an arbitrary value into a matrix of type self.target_matrix . <EoL>
<BoL> Converts a CVXOPT matrix to a NumPy ndarray . <EoL>
<BoL> Converts a NumPy matrix to a CVXOPT matrix . <EoL>
<BoL> Convert 1D Numpy arrays to matrices . <EoL>
<BoL> Convert 2D Numpy matrices or arrays to 1D . <EoL>
<BoL> Dynamic import of CVXOPT dense interface . <EoL>
<BoL> Dynamic import of CVXOPT sparse interface . <EoL>
<BoL> Is the constant a sparse matrix ? <EoL>
<BoL> Return ( is positive , is negative ) . <EoL>
<BoL> Converts a SciPy sparse matrix to a CVXOPT sparse matrix . <EoL>
<BoL> Convert an arbitrary value into a matrix of type self.target_matrix . <EoL>
<BoL> Return an identity matrix . <EoL>
<BoL> Change the shape of the matrix . <EoL>
<BoL> Get the value of the passed matrix , interpreted as a scalar . <EoL>
<BoL> Return the dimensions of the matrix . <EoL>
<BoL> Return a matrix with all 0 's . <EoL>
<BoL> Wrapper on accessing a parameter . <EoL>
<BoL> 1D discrete convolution of two vectors . <EoL>
<BoL> Creates a copy of the constraint modified according to func . <EoL>
<BoL> Wraps a constant . <EoL>
<BoL> Creates an internal equality constraint . <EoL>
<BoL> Creates an internal greater than or equal constraint . <EoL>
<BoL> Creates an internal less than or equal constraint . <EoL>
<BoL> Wraps a parameter . <EoL>
<BoL> Creates a new internal variable . <EoL>
<BoL> Converts the diagonal of a matrix to a vector . <EoL>
<BoL> Converts a vector to a diagonal matrix . <EoL>
<BoL> Divide one linear operator by another . <EoL>
<BoL> Returns the operator in the constraint . <EoL>
<BoL> Get a list of the parameters in the operator . <EoL>
<BoL> Get a list of the variables in the operator and their sizes . <EoL>
<BoL> Returns a new id and updates the id counter . <EoL>
<BoL> Concatenates operators horizontally . <EoL>
<BoL> Indexes/slices an operator . <EoL>
<BoL> Kronecker product of two matrices . <EoL>
<BoL> Multiply two linear operators elementwise . <EoL>
<BoL> Multiply two linear operators , with the constant on the left . <EoL>
<BoL> Negate an operator . <EoL>
<BoL> Promotes a scalar operator to the given size . <EoL>
<BoL> Replaces the given variables in the expression . <EoL>
<BoL> Replaces parameters with constant nodes . <EoL>
<BoL> Reshapes an operator . <EoL>
<BoL> Multiply two linear operators , with the constant on the right . <EoL>
<BoL> Difference of linear operators . <EoL>
<BoL> Sum the entries of an operator . <EoL>
<BoL> Add linear operators . <EoL>
<BoL> Sum the diagonal entries of an operator . <EoL>
<BoL> Transposes an operator . <EoL>
<BoL> Vectorized upper triangular portion of a square matrix . <EoL>
<BoL> Concatenates operators vertically . <EoL>
<BoL> Returns the tangent approximation to the expression . <EoL>
<BoL> Partially optimizes the given problem over the specified variables . <EoL>
<BoL> Solution of KKT equations by a dense LDL factorization of the 3 x 3 system . <EoL>
<BoL> Converts the nonconvex constraint variable ids in dims into indices . <EoL>
<BoL> Raise an error indicating that the solver can not solve a problem . <EoL>
<BoL> Determines the appropriate solver . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Returns the numeric data for the problem . <EoL>
<BoL> Returns the argument for the call to the solver . <EoL>
<BoL> Returns the symbolic data for the problem . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> Is the solver installed ? <EoL>
<BoL> Is the problem a mixed integer program ? <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Returns whether nonlinear constraints are needed . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> Clears the cache if the objective or constraints changed . <EoL>
<BoL> Raises an exception if the solver can not solve the problem . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Compresses A and b by eliminating redundant rows . <EoL>
<BoL> Return the number of nonzeros in row . <EoL>
<BoL> Clear old parameter data . <EoL>
<BoL> Converts the cached representation of the constraints matrix . <EoL>
<BoL> Returns a dummy constraint for the objective . <EoL>
<BoL> Initializes the data structures for the cached matrix . <EoL>
<BoL> Computes a matrix and vector representing a list of constraints . <EoL>
<BoL> Returns an oracle for the nonlinear constraints.Oracle for function value , gradient , and Hessian . <EoL>
<BoL> Returns the matrix and vector for the equality constraint . <EoL>
<BoL> Returns the matrix and vector for the inequality constraint . <EoL>
<BoL> Returns the oracle function for the nonlinear constraints . <EoL>
<BoL> Returns the linear objective and a scalar offset . <EoL>
<BoL> Separate the constraints by type . <EoL>
<BoL> Formats the problem for the solver . <EoL>
<BoL> Maps each variable to a horizontal offset . <EoL>
<BoL> Eliminates unnecessary constraints and short circuits the solver if possible . <EoL>
<BoL> Return only unique elements of a sequence <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Solve using the conelp solver . <EoL>
<BoL> Solve using the cpl solver . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Returns the KKT solver selected by the user . <EoL>
<BoL> Returns the argument for the call to the solver . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Returns whether nonlinear constraints are needed . <EoL>
<BoL> Remove redundant constraints from A and G . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Converts the given matrix to a distributed sparse matrix . <EoL>
<BoL> Converts the given vector to a distributed multivector . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> Converts the given distributed multivector to a 1D array . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Do any of the constraints contain parameters ? <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> If key= ( i , j ) is a pair of integers , return the corresponding element . If either i or j is a slice or sequence , return a new sparse matrix with just these elements . <EoL>
<BoL> interpret other and call one of the following <EoL>
<BoL> Process indices with Ellipsis . Returns modified index . <EoL>
<BoL> Given a slice object , use numpy arange to change it to a 1D array . <EoL>
<BoL> Parse index . Always return a tuple of the form ( row , col ) . Where row/col is a integer , slice , or array of integers . <EoL>
<BoL> An update method for dict data defined for direct access to ` dok_matrix ` data . <EoL>
<BoL> Return this matrix in the passed format . <EoL>
<BoL> Upcast matrix to a floating point format ( if necessary ) <EoL>
<BoL> Cast the matrix elements to a specified type . <EoL>
<BoL> Element-wise complex conjugation . <EoL>
<BoL> Return the conjugate transpose . <EoL>
<BoL> Returns the k-th diagonal of the matrix . <EoL>
<BoL> Ordinary dot product <EoL>
<BoL> This overrides the dict.get method , providing type checking but otherwise equivalent functionality . <EoL>
<BoL> Return the Hermitian transpose of this matrix . <EoL>
<BoL> Get shape of a matrix . <EoL>
<BoL> Returns the j-th column as a ( m x 1 ) DOK matrix . <EoL>
<BoL> Format of a matrix representation as a string . <EoL>
<BoL> Maximum number of elements to display when printed . <EoL>
<BoL> Returns the i-th row as a ( 1 x n ) DOK matrix . <EoL>
<BoL> Element-wise maximum between this and another matrix . <EoL>
<BoL> Compute the arithmetic mean along the specified axis . <EoL>
<BoL> Element-wise minimum between this and another matrix . <EoL>
<BoL> Point-wise multiplication by another matrix <EoL>
<BoL> nonzero indices <EoL>
<BoL> Element-wise power . <EoL>
<BoL> eshape ( self , shape , order= ' C ' , copy=False ) <EoL>
<BoL> Set diagonal or off-diagonal elements of the array . <EoL>
<BoL> Sum the matrix elements over a given axis . <EoL>
<BoL> Return a dense ndarray representation of this matrix . <EoL>
<BoL> Convert this matrix to Block Sparse Row format . <EoL>
<BoL> Convert this matrix to Compressed Sparse Row format . <EoL>
<BoL> Return a dense matrix representation of this matrix . <EoL>
<BoL> Convert this matrix to sparse DIAgonal format . <EoL>
<BoL> Convert this matrix to LInked List format . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> Temporary method to determine whether the given Problem object is suitable for LS solver . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Chooses between the basic and interior point solution . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> Expands n* ( n+1 ) //2 lower triangular to full matrix , with off-diagonal entries scaled by 1/sqrt ( 2 ) . <EoL>
<BoL> Converts the solver output into standard form . <EoL>
<BoL> Imports the solver . <EoL>
<BoL> The interface for matrices passed to the solver . <EoL>
<BoL> The name of the solver . <EoL>
<BoL> Extracts the equality , inequality , and nonlinear constraints . <EoL>
<BoL> The interface for vectors passed to the solver . <EoL>
<BoL> Return a list of separable problems whose sum is the original one . <EoL>
<BoL> Returns the gradient of constant terms in an expression . <EoL>
<BoL> Returns a gradient of all None . <EoL>
<BoL> Converts part of a key into a slice with a start and step . <EoL>
<BoL> Converts an index to a slice . <EoL>
<BoL> Is the slice equivalent to a single index ? <EoL>
<BoL> Does the key contain a list , ndarray , or logical ndarray ? <EoL>
<BoL> Converts None to an empty string . <EoL>
<BoL> Finds the dimensions of a sliced expression . <EoL>
<BoL> Converts a slice into a string . <EoL>
<BoL> Convert everything but None to an int . <EoL>
<BoL> Converts a key ( i.e . two slices ) into a string . <EoL>
<BoL> Check if the key is a valid index . <EoL>
<BoL> Converts a negative index into a positive index . <EoL>
<BoL> Wraps a property so it is lazily evaluated.A lazily evaluated propery . <EoL>
<BoL> Return the : math : ` \ell_\infty ` norm error from approximating the vector a_orig/sum ( a_orig ) with the weight vector w_approx . <EoL>
<BoL> Check that w_dyad is a valid dyadic completion of w . <EoL>
<BoL> Recursively split dyadic tuples to produce a DAG . <EoL>
<BoL> Return the dyadic completion of `` w `` . <EoL>
<BoL> Return a valid fractional weight tuple ( and its dyadic completion ) to represent the weights given by `` a `` . <EoL>
<BoL> Get the maximum denominator in a sequence of `` Fraction `` and `` int `` objects <EoL>
<BoL> Test if frac is a nonnegative dyadic fraction or integer . <EoL>
<BoL> Test if a vector is a valid dyadic weight vector . <EoL>
<BoL> Test if w is a valid weight vector . w must have nonnegative integer or fractional elements , and sum to 1 . <EoL>
<BoL> Return a lower bound on the number of cones needed to represent the tuple . Based on two simple lower bounds . <EoL>
<BoL> Approximate `` a/sum ( a ) `` with tuple of fractions with denominator *exactly* `` denom `` . <EoL>
<BoL> Return first power of 2 > = n . <EoL>
<BoL> Return the number of cones in the tree beyond the known lower bounds . if it is zero , then we know the tuple ca n't be represented in fewer cones . <EoL>
<BoL> Print keys of a dictionary with children ( expected to be a Sequence ) indented underneath . <EoL>
<BoL> Use the string representation of objects in a tuple . <EoL>
<BoL> Split a tuple of dyadic rationals into two children so that d_tup = 1/2* ( child1 + child2 ) . <EoL>
<BoL> Give the shape resulting from multiplying two shapes . <EoL>
<BoL> Give the shape resulting from summing a list of shapes . <EoL>
<BoL> Give the sign resulting from multiplying two expressions . <EoL>
<BoL> Give the sign resulting from summing a list of expressions . <EoL>
<BoL> Pair-wise combine two equal length cycles ( zip ) <EoL>
<BoL> Check equality <EoL>
<BoL> In-place pair-wise combine two equal length cycles ( zip ) <EoL>
<BoL> In-place outer product of two cycles ( ` itertools.product ` ) <EoL>
<BoL> Semi-private init <EoL>
<BoL> Outer product of two cycles ( ` itertools.product ` ) or integer multiplication . <EoL>
<BoL> Compose the 'left ' and 'right ' components of this cycle with the proper operation ( zip or product as of now ) <EoL>
<BoL> Class method to create 'base ' Cycler objects that do not have a 'right ' or 'op ' and for which the 'left ' object is not another Cycler . <EoL>
<BoL> Values by key <EoL>
<BoL> Change a key in this cycler to a new name . Modification is performed in-place . <EoL>
<BoL> Concatenate this cycler and an other . <EoL>
<BoL> Simplify the Cycler <EoL>
<BoL> Create a new ` Cycler ` object from a property name and iterable of values . <EoL>
<BoL> Helper function to compose cycler keys <EoL>
<BoL> Concatenate two cyclers . <EoL>
<BoL> Create a new ` Cycler ` object from a single positional argument , a pair of positional arguments , or the combination of keyword arguments . <EoL>
<BoL> Benchmark cyordereddict.OrderedDict against collections.OrderedDict <EoL>
<BoL> Support array type creation by slicing , e.g . <EoL>
<BoL> Load the extension in IPython . <EoL>
<BoL> Like `` is_partial_args `` for builtins in our `` signatures `` registry <EoL>
<BoL> Like `` is_valid_args `` for builtins in our `` signatures `` registry <EoL>
<BoL> Like `` is_partial_args `` for the given signature spec <EoL>
<BoL> Like `` is_valid_args `` for the given signature spec <EoL>
<BoL> Convert the signature spec in `` module_info `` to add to `` signatures `` <EoL>
<BoL> Return the names of position-only arguments if func has **kwargs <EoL>
<BoL> Does a function have only n positional arguments ? <EoL>
<BoL> Return the number of positional arguments . `` f ( x , y=1 ) `` has 1 <EoL>
<BoL> Like @ property , but returns `` classval `` when used as a class attribute <EoL>
<BoL> Initialize an instance . <EoL>
<BoL> Beta distribution . <EoL>
<BoL> Choose a random element from a non-empty sequence . <EoL>
<BoL> Return a k sized list of population elements chosen with replacement . <EoL>
<BoL> Exponential distribution . <EoL>
<BoL> Gamma distribution . Not the gamma function ! <EoL>
<BoL> Gaussian distribution . <EoL>
<BoL> Return internal state ; can be passed to setstate ( ) later . <EoL>
<BoL> Log normal distribution . <EoL>
<BoL> Normal distribution . <EoL>
<BoL> Pareto distribution . alpha is the shape parameter . <EoL>
<BoL> Return random integer in range [ a , b ] , including both end points . <EoL>
<BoL> Chooses k unique random elements from a population sequence or set . <EoL>
<BoL> Initialize internal state from hashable object . <EoL>
<BoL> Restore internal state from object returned by getstate ( ) . <EoL>
<BoL> Shuffle list x in place , and return None . <EoL>
<BoL> Triangular distribution . <EoL>
<BoL> Circular data distribution . <EoL>
<BoL> Weibull distribution . <EoL>
<BoL> Cleanup pid file at exit . <EoL>
<BoL> These actions will be done after SIGTERM . <EoL>
<BoL> Start daemonization process . <EoL>
<BoL> Initialize the adapter with a logger and a dict-like object which provides contextual information . This constructor signature allows easy stacking of LoggerAdapters , if so desired . <EoL>
<BoL> Low-level log implementation , proxied to allow nested logger adapters . <EoL>
<BoL> Delegate a critical call to the underlying logger . <EoL>
<BoL> Delegate a debug call to the underlying logger . <EoL>
<BoL> Delegate an error call to the underlying logger . <EoL>
<BoL> Delegate an exception call to the underlying logger . <EoL>
<BoL> Get the effective level for the underlying logger . <EoL>
<BoL> See if the underlying logger has any handlers . <EoL>
<BoL> Delegate an info call to the underlying logger . <EoL>
<BoL> Is this logger enabled for level 'level ' ? <EoL>
<BoL> Delegate a log call to the underlying logger , after adding contextual information from this adapter instance . <EoL>
<BoL> Set the specified level on the underlying logger . <EoL>
<BoL> Delegate a warning call to the underlying logger . <EoL>
<BoL> Initialize the formatter with specified format strings . <EoL>
<BoL> Build a logger with the given name . <EoL>
<BoL> Add this output to a logger . <EoL>
<BoL> Manually forces a log file rotation . <EoL>
<BoL> Convert a datetime.timedelta object into a seconds interval for rotating file ouput . <EoL>
<BoL> Manually forces a log file rotation . <EoL>
<BoL> Set default log levels for some loggers . <EoL>
<BoL> Set default log levels for some loggers . <EoL>
<BoL> Handle a halted callback and return an empty 204 response <EoL>
<BoL> Configs from the environ . <EoL>
<BoL> Delete items by ID in the tree of children . <EoL>
<BoL> Recursively find the element with the given ID through the tree of children . <EoL>
<BoL> Yield IDs in the tree of children . <EoL>
<BoL> Return the number of items in the tree . <EoL>
<BoL> Set an element by its ID . <EoL>
<BoL> Yield each item in the tree . <EoL>
<BoL> Yield each item with its path in the tree . <EoL>
<BoL> An alternative way to pass your : class : ` flask.Flask ` application object to Flask-Compress . : meth : ` init_app ` also takes care of some default ` settings ` _ . <EoL>
<BoL> The WSGI server calls the Flask application object as the WSGI application . This calls : meth : ` wsgi_app ` which can be wrapped to applying middleware . <EoL>
<BoL> Return a registered error handler for an exception in this order : blueprint handler for a specific code , app handler for a specific code , blueprint handler for an exception class , app handler for an exception class , or `` None `` if a suitable handler is not found . <EoL>
<BoL> Ensure that we register only exceptions as handler keys <EoL>
<BoL> : type key : None|str : type code_or_exception : int|T < =Exception : type f : callable <EoL>
<BoL> Register a custom template filter . Works exactly like the : meth : ` template_filter ` decorator . <EoL>
<BoL> Register a custom template global function . Works exactly like the : meth : ` template_global ` decorator . <EoL>
<BoL> Register a custom template test . Works exactly like the : meth : ` template_test ` decorator . <EoL>
<BoL> Register a function to be run after each request . <EoL>
<BoL> Create an : class : ` ~flask.ctx.AppContext ` . Use as a `` with `` block to push the context , which will make : data : ` current_app ` point at this application . <EoL>
<BoL> Tries to locate the instance path if it was not provided to the constructor of the application class . It will basically calculate the path to a folder named `` instance `` next to your main file or the package . <EoL>
<BoL> Registers a function to be run before the first request to this instance of the application . <EoL>
<BoL> Registers a function to run before each request . <EoL>
<BoL> Registers a template context processor function . <EoL>
<BoL> Creates the loader for the Jinja2 environment . <EoL>
<BoL> Creates the Jinja2 environment based on : attr : ` jinja_options ` and : meth : ` select_jinja_autoescape ` . <EoL>
<BoL> Creates a URL adapter for the given request . The URL adapter is created at a point where the request context is not yet set up so the request is passed explicitly . <EoL>
<BoL> Does the request dispatching . Matches the URL and returns the return value of the view or error handler . <EoL>
<BoL> Called right before the application context is popped . <EoL>
<BoL> Called after the request is dispatched and the response is returned , right before the request context is popped . <EoL>
<BoL> A decorator to register a function as an endpoint . Example : : <EoL>
<BoL> Register a function to handle errors by code or exception class . <EoL>
<BoL> Given the return value from a view function this finalizes the request by converting it into a response and invoking the postprocessing functions . This is invoked for both normal request dispatching as well as error handlers . <EoL>
<BoL> Dispatches the request and on top of that performs request pre and postprocessing as well as HTTP exception catching and error handling . <EoL>
<BoL> Provides default cache_timeout for the : func : ` send_file ` functions . <EoL>
<BoL> Default exception handling that kicks in when an exception occurs that is not caught . <EoL>
<BoL> Handles an HTTP exception . By default this will invoke the registered error handlers and fall back to returning the exception as response . <EoL>
<BoL> Handle : class : ` ~werkzeug.routing.BuildError ` on : meth : ` url_for ` . <EoL>
<BoL> This method is called whenever an exception occurs that should be handled . <EoL>
<BoL> Injects the URL defaults for the given endpoint directly into the values dictionary passed . This is used internally and automatically called on URL building . <EoL>
<BoL> Iterates over all blueprints by the order they were registered . <EoL>
<BoL> Logs an exception . This is called by : meth : ` handle_exception ` if debugging is disabled and right before the handler is called . The default implementation logs the exception as error on the : attr : ` logger ` . <EoL>
<BoL> Used to create the config attribute by the Flask constructor . The ` instance_relative ` parameter is passed in from the constructor of Flask ( there named ` instance_relative_config ` ) and indicates if the config should be relative to the instance path or the root path of the application . <EoL>
<BoL> This method is called to create the default `` OPTIONS `` response . This can be changed through subclassing to change the default behavior of `` OPTIONS `` responses . <EoL>
<BoL> Creates a new instance of a missing session . Instead of overriding this method we recommend replacing the : class : ` session_interface ` . <EoL>
<BoL> Convert the return value from a view function to an instance of : attr : ` response_class ` . <EoL>
<BoL> Returns the shell context for an interactive shell for this application . This runs all the registered shell context processors . <EoL>
<BoL> Opens a resource from the application 's instance folder ( : attr : ` instance_path ` ) . <EoL>
<BoL> Opens a resource from the application 's resource folder . To see how this works , consider the following folder structure : : <EoL>
<BoL> Creates or opens a new session . <EoL>
<BoL> Called before the request is dispatched . <EoL>
<BoL> Can be overridden in order to modify the response object before it 's sent to the WSGI server . By default this will call all the : meth : ` after_request ` decorated functions . <EoL>
<BoL> Exceptions that are recording during routing are reraised with this method . During debug we are not reraising redirect requests for non `` GET `` , `` HEAD `` , or `` OPTIONS `` requests and we 're raising a different error instead to help debug situations . <EoL>
<BoL> Register a : class : ` ~flask.Blueprint ` on the application . Keyword arguments passed to this method will override the defaults set on the blueprint . <EoL>
<BoL> Alternative error attach function to the : meth : ` errorhandler ` decorator that is more straightforward to use for non decorator usage . <EoL>
<BoL> Create a : class : ` ~flask.ctx.RequestContext ` representing a WSGI environment . Use a `` with `` block to push the context , which will make : data : ` request ` point at this request . <EoL>
<BoL> A decorator that is used to register a view function for a given URL rule . This does the same thing as : meth : ` add_url_rule ` but is intended for decorator usage : : <EoL>
<BoL> Saves the session if it needs updates . <EoL>
<BoL> Returns `` True `` if autoescaping should be active for the given template name . If no template name is given , returns ` True ` . <EoL>
<BoL> Function used internally to send static files from the static folder to the browser . <EoL>
<BoL> Registers a shell context processor function . <EoL>
<BoL> This is called to figure out if an error should be ignored or not as far as the teardown system is concerned . If this function returns `` True `` then the teardown handlers will not be passed the error . <EoL>
<BoL> Registers a function to be called when the application context ends . These functions are typically also called when the request context is popped . <EoL>
<BoL> Register a function to be run at the end of each request , regardless of whether there was an exception or not . These functions are executed when the request context is popped , even if not an actual request was performed . <EoL>
<BoL> A decorator that is used to register custom template filter . You can specify a name for the filter , otherwise the function name will be used . Example : : <EoL>
<BoL> A decorator that is used to register a custom template global function . You can specify a name for the global function , otherwise the function name will be used . Example : : <EoL>
<BoL> A decorator that is used to register custom template test . You can specify a name for the test , otherwise the function name will be used . Example : : <EoL>
<BoL> Create a CLI runner for testing CLI commands . See : ref : ` testing-cli ` . <EoL>
<BoL> Creates a test client for this application . For information about unit testing head over to : ref : ` testing ` . <EoL>
<BoL> Create a : class : ` ~flask.ctx.RequestContext ` for a WSGI environment created from the given values . This is mostly useful during testing , where you may want to run a function that uses request data without dispatching a full request . <EoL>
<BoL> Checks if an HTTP exception should be trapped or not . <EoL>
<BoL> Called before each request and will ensure that it triggers the : attr : ` before_first_request_funcs ` and only exactly once per application instance ( which means process usually ) . <EoL>
<BoL> Update the template context with some commonly used variables . <EoL>
<BoL> Callback function for URL defaults for all view functions of the application . It 's called with the endpoint and values and should update the values passed in place . <EoL>
<BoL> Register a URL value preprocessor function for all view functions in the application . These functions will be called before the : meth : ` before_request ` functions . <EoL>
<BoL> The actual WSGI application . This is not implemented in : meth : ` __call__ ` so that middlewares can be applied without losing a reference to the app object . Instead of doing this : : <EoL>
<BoL> Process this response as WSGI application . <EoL>
<BoL> This method can be called by methods that need a sequence . If ` mutable ` is true , it will also ensure that the response sequence is a standard Python list . <EoL>
<BoL> Return `` True `` if ` Range ` header is present and if underlying resource is considered unchanged when compared with ` If-Range ` header . <EoL>
<BoL> Handle Range Request related headers ( RFC7233 ) . If ` Accept-Ranges ` header is valid , and Range Request is processable , we set the headers as described by the RFC , and wrap the underlying response in a RangeWrapper . <EoL>
<BoL> Wrap existing Response in case of Range Request context . <EoL>
<BoL> Add an etag for the current response if there is none yet . <EoL>
<BoL> Returns the content length if available or ` None ` otherwise . <EoL>
<BoL> Adds a function to the internal list of functions that should be called as part of closing down the response . Since 0.7 this function also returns the function that was passed so that this can be used as a decorator . <EoL>
<BoL> Close the wrapped response if possible . You can also use the object in a with statement which will automatically close it . <EoL>
<BoL> Delete a cookie . Fails silently if key does n't exist . <EoL>
<BoL> Enforce that the WSGI response is a response object of the current type . <EoL>
<BoL> Call this method if you want to make your response object ready for being pickled . <EoL>
<BoL> Create a new response object from an application output . <EoL>
<BoL> Returns the application iterator for the given environ . Depending on the request method and the current status code the return value might be an empty response rather than the one from the response . <EoL>
<BoL> The string representation of the request body . <EoL>
<BoL> Return a tuple in the form `` ( etag , is_weak ) `` . If there is no ETag the return value is `` ( None , None ) `` . <EoL>
<BoL> Parse and return the data as JSON . <EoL>
<BoL> This is automatically called right before the response is started and returns headers modified for the given environment . It returns a copy of the headers from the response with some modifications applied if necessary . <EoL>
<BoL> Returns the final WSGI response as tuple . <EoL>
<BoL> Iter the response encoded with the encoding of the response . If the response object is invoked as WSGI application the return value of this method is used as application iterator unless : attr : ` direct_passthrough ` was activated . <EoL>
<BoL> Converts the response iterator in a list . <EoL>
<BoL> Called if : meth : ` get_json ` parsing fails and is n't silenced . <EoL>
<BoL> Sets a new string as response . <EoL>
<BoL> Set the etag , and override the old one if there was one . <EoL>
<BoL> Create the Dash component docstringA { name } component.\n { description } <EoL>
<BoL> Filter props from the Component arguments to exclude : - Those without a `` type '' or a `` flowType '' field - Those with arg.type.name in { 'func ' , 'symbol ' , 'instanceOf ' } - dashEvents as a name <EoL>
<BoL> Generate a python class object given a class string <EoL>
<BoL> Generate a python class file ( .py ) given a class string <EoL>
<BoL> Dynamically generate class strings to have nicely formatted docstrings , keyword arguments , and reprclass { typename } ( Component ) : `` '' '' { docstring } '' '' '' @ _explicitize_args def __init__ ( self , { default_argtext } ) : self._prop_names = { list_of_valid_keys } self._type = ' { typename } ' self._namespace = ' { namespace } ' self._valid_wildcard_attributes =\ { list_of_valid_wildcard_attr_prefixes } self.available_events = { events } self.available_properties = { list_of_valid_keys } self.available_wildcard_properties =\ { list_of_valid_wildcard_attr_prefixes } <EoL>
<BoL> Convert JS types to Python types for the component definition <EoL>
<BoL> Mapping from the Flow js types to the Python type <EoL>
<BoL> Mapping from the PropTypes js type object to the Python type <EoL>
<BoL> Pull out the dashEvents from the Component props <EoL>
<BoL> Pull out the wildcard attributes from the Component props <EoL>
<BoL> If `` children '' is in props , then move it to the front to respect dash convention <EoL>
<BoL> Pull names of required props from the props object <EoL>
<BoL> Load React component metadata into a format Dash can parse , then create python class files . <EoL>
<BoL> Load React component metadata into a format Dash can parse . <EoL>
<BoL> Update the version of React in _js_dist_dependencies served by dash-renderer to the client <EoL>
<BoL> Threaded cached implementation of dask.get <EoL>
<BoL> The indices of the top k elements of an array . <EoL>
<BoL> Copy of the array , cast to a specified type . <EoL>
<BoL> Compute this dask collection <EoL>
<BoL> Copy array . This is a no-op for dask.arrays , which are immutable <EoL>
<BoL> See da.cumprod for docstring <EoL>
<BoL> See da.cumsum for docstring <EoL>
<BoL> Map a function over blocks of the array with some overlap <EoL>
<BoL> Persist this dask collection into memory <EoL>
<BoL> See da.rechunk for docstring <EoL>
<BoL> Convert dask Array to dask Dataframe <EoL>
<BoL> Convert into an array of `` dask.delayed `` objects , one per chunk . <EoL>
<BoL> Store array in HDF5 file <EoL>
<BoL> Save array to the zarr storage format <EoL>
<BoL> The top k elements of an array . <EoL>
<BoL> Get a view of the array as a new data type <EoL>
<BoL> Test whether all array elements along a given axis evaluate to True . <EoL>
<BoL> Returns True if two arrays are element-wise equal within a tolerance . <EoL>
<BoL> Test whether any array element along a given axis evaluates to True . <EoL>
<BoL> Apply a function to 1-D slices along the given axis . <EoL>
<BoL> Apply a function repeatedly over multiple axes . <EoL>
<BoL> Return evenly spaced values from ` start ` to ` stop ` with step size ` step ` . <EoL>
<BoL> Returns the indices of the maximum values along an axis . <EoL>
<BoL> Returns the indices of the minimum values along an axis . <EoL>
<BoL> Extract the indices of the k largest elements from a on the given axis , and return them sorted from largest to smallest . If k is negative , extract the indices of the -k smallest elements instead , and return them sorted from smallest to largest . <EoL>
<BoL> Find the indices of array elements that are non-zero , grouped by element . <EoL>
<BoL> Evenly round to the given number of decimals . <EoL>
<BoL> Decorator for `` dask.array.gufunc `` . <EoL>
<BoL> Convert the input to a dask array . <EoL>
<BoL> Convert the input to a dask array . <EoL>
<BoL> Convert inputs to arrays with at least one dimension . <EoL>
<BoL> View inputs as arrays with at least two dimensions . <EoL>
<BoL> View inputs as arrays with at least three dimensions . <EoL>
<BoL> Compute the weighted average along the specified axis . <EoL>
<BoL> Assemble an nd-array from nested lists of blocks . <EoL>
<BoL> Tensor operation : Generalized inner and outer products <EoL>
<BoL> Broadcast any number of arrays against each other . <EoL>
<BoL> Broadcast an array to a new shape . <EoL>
<BoL> Construct an array from an index array and a set of arrays to choose from . <EoL>
<BoL> Returns the Real distance from 0 . Called for abs ( self ) . <EoL>
<BoL> self + othe <EoL>
<BoL> self & othe <EoL>
<BoL> True if self ! = 0 . Called for bool ( self ) . <EoL>
<BoL> Finds the least Integral > = self . <EoL>
<BoL> self == othe <EoL>
<BoL> float ( self ) == float ( int ( self ) ) <EoL>
<BoL> Finds the greatest Integral < = self . <EoL>
<BoL> self // other : The floor ( ) of self/other . <EoL>
<BoL> Called whenever an index is needed , such as in slicing <EoL>
<BoL> int ( self ) <EoL>
<BoL> ~self <EoL>
<BoL> self < = othe <EoL>
<BoL> self < < othe <EoL>
<BoL> self < other <EoL>
<BoL> self % othe <EoL>
<BoL> self * othe <EoL>
<BoL> -self <EoL>
<BoL> self | othe <EoL>
<BoL> +self <EoL>
<BoL> self ** exponent % modulus , but maybe faster . <EoL>
<BoL> other + self <EoL>
<BoL> other & self <EoL>
<BoL> other // self : The floor ( ) of other/self . <EoL>
<BoL> other < < self <EoL>
<BoL> other % self <EoL>
<BoL> other * self <EoL>
<BoL> other | self <EoL>
<BoL> Rounds self to ndigits decimal places , defaulting to 0 . <EoL>
<BoL> base ** self <EoL>
<BoL> other > > self <EoL>
<BoL> self > > othe <EoL>
<BoL> other - self <EoL>
<BoL> other / self <EoL>
<BoL> other ^ self <EoL>
<BoL> self - othe <EoL>
<BoL> self / other : Should promote to float when necessary . <EoL>
<BoL> trunc ( self ) : Truncates self to an Integral . <EoL>
<BoL> self ^ othe <EoL>
<BoL> Chunk and combine function of argtopk <EoL>
<BoL> Final aggregation function of argtopk <EoL>
<BoL> Preparatory step for argtopk <EoL>
<BoL> Coarsen array by applying reduction to fixed size neighborhoods <EoL>
<BoL> Concatenate zero or more iterables , any of which may be infinite . <EoL>
<BoL> A wrapper for functions that do n't provide keepdims to ensure that they do . <EoL>
<BoL> Return the maximum of an array or maximum along an axis . <EoL>
<BoL> Compute the arithmetic mean along the specified axis . <EoL>
<BoL> Return the minimum of an array or minimum along an axis . <EoL>
<BoL> Return the indices of the maximum values in the specified axis ignoring NaNs . <EoL>
<BoL> Return the indices of the minimum values in the specified axis ignoring NaNs . <EoL>
<BoL> Return the cumulative product of array elements over a given axis treating Not a Numbers ( NaNs ) as one . The cumulative product does not change when NaNs are encountered and leading NaNs are replaced by ones . <EoL>
<BoL> Return the cumulative sum of array elements over a given axis treating Not a Numbers ( NaNs ) as zero . The cumulative sum does not change when NaNs are encountered and leading NaNs are replaced by zeros . <EoL>
<BoL> Return the maximum of an array or maximum along an axis , ignoring any NaNs . When all-NaN slices are encountered a `` RuntimeWarning `` is raised and NaN is returned for that slice . <EoL>
<BoL> Return minimum of an array or minimum along an axis , ignoring any NaNs . When all-NaN slices are encountered a `` RuntimeWarning `` is raised and Nan is returned for that slice . <EoL>
<BoL> Return the product of array elements over a given axis treating Not a Numbers ( NaNs ) as ones . <EoL>
<BoL> Sort a complex array using the real part first , then the imaginary part . <EoL>
<BoL> Return the sum of array elements over a given axis treating Not a Numbers ( NaNs ) as zero . <EoL>
<BoL> Compute the variance along the specified axis , while ignoring NaNs . <EoL>
<BoL> Return the product of array elements over a given axis . <EoL>
<BoL> Chunk function of ` slice_with_int_dask_array_on_axis ` . Slice one chunk of x by one chunk of idx . <EoL>
<BoL> Final aggregation function of ` slice_with_int_dask_array_on_axis ` . Aggregate all chunks of x by one chunk of idx , reordering the output of ` slice_with_int_dask_array ` . <EoL>
<BoL> Compute the standard deviation along the specified axis . <EoL>
<BoL> Sum of array elements over a given axis . <EoL>
<BoL> Take values from the input array by matching 1d index and data slices . <EoL>
<BoL> Chunk and combine function of topk <EoL>
<BoL> Final aggregation function of topk <EoL>
<BoL> Trim boundaries off of array <EoL>
<BoL> Compute the variance along the specified axis . <EoL>
<BoL> Return selected slices of an array along given axis . <EoL>
<BoL> Compute several dask collections at once . <EoL>
<BoL> Concatenate arrays along an existing axis <EoL>
<BoL> bind operator to this class <EoL>
<BoL> Call the corresponding method based on type of argument . <EoL>
<BoL> Return the function implementation for the given `` cls `` <EoL>
<BoL> Register dispatch of ` func ` on arguments of type ` type ` <EoL>
<BoL> Register a registration function which will be called if the *toplevel* module ( e.g . 'pandas ' ) is ever loaded . <EoL>
<BoL> Construct a HighLevelGraph from a new layer and a set of collections <EoL>
<BoL> Iterate over x , yielding ( index , value , entering ) , where <EoL>
<BoL> Check if the chunks are regular <EoL>
<BoL> Recursively Concatenate nested lists of arrays along axes <EoL>
<BoL> Calls a function and converts its result to the given dtype . <EoL>
<BoL> Get axis along which point-wise slicing results lie <EoL>
<BoL> Point wise indexing with broadcasting . <EoL>
<BoL> Point wise indexing with only NumPy Arrays . <EoL>
<BoL> Pull out point-wise slices from block <EoL>
<BoL> Rotate block so that points are on the first dimension <EoL>
<BoL> Tries to infer output dtype of `` func `` for a small set of input arguments . <EoL>
<BoL> Determine automatic chunks <EoL>
<BoL> Construct a chunks tuple that broadcasts many chunks tuples <EoL>
<BoL> Determines output shape from broadcasting arrays . <EoL>
<BoL> Chunks tuple from nested list of arrays <EoL>
<BoL> Find the common block dimensions from the list of block dimensions <EoL>
<BoL> Compute a graph as if it were of type cls . <EoL>
<BoL> Recursive np.concatenate <EoL>
<BoL> Recursively call np.concatenate along axes <EoL>
<BoL> Make nested iterators concrete lists <EoL>
<BoL> First element in a nested list <EoL>
<BoL> Decorator to attach original class 's docstring to the wrapped method . <EoL>
<BoL> Dot product of many aligned chunks <EoL>
<BoL> Apply elementwise function across arguments <EoL>
<BoL> Return the factors of an integer <EoL>
<BoL> Find number of occurrences of each value in seq <EoL>
<BoL> Create a dask array from a dask delayed value <EoL>
<BoL> Create dask array in a single block by calling a function <EoL>
<BoL> Load dask array from stack of npy files <EoL>
<BoL> Load array from the zarr storage format <EoL>
<BoL> Get the name of a function . <EoL>
<BoL> Fuse stacked slices together <EoL>
<BoL> A getter function that optimizations feel comfortable inlining <EoL>
<BoL> A simple wrapper around `` getter `` . <EoL>
<BoL> Allow function to be taken over by globals <EoL>
<BoL> Handle out parameters <EoL>
<BoL> Returns `` True `` if `` x `` is a dask collection <EoL>
<BoL> A function inserted in a Dask graph for storing a chunk . <EoL>
<BoL> Call a function on every element within a nested container <EoL>
<BoL> Normalize user provided arguments to blockwise or map_blocks <EoL>
<BoL> Offsets inputs by offset <EoL>
<BoL> Parse byte string to numbers <EoL>
<BoL> Persist multiple Dask collections into memory <EoL>
<BoL> Ensure that this value remains this value in a dask graph <EoL>
<BoL> Replace ... with slices , : , : , : <EoL>
<BoL> Reshape iterator to nested shape <EoL>
<BoL> Creates a Dask graph for loading stored `` keys `` from `` dsk `` . <EoL>
<BoL> Return a chunk dimension that is close to an even multiple or factor <EoL>
<BoL> Get the shape of nested list <EoL>
<BoL> Master function for array slicing <EoL>
<BoL> Translate chunks tuple to a set of slices in product order <EoL>
<BoL> Stack arrays along a new axis <EoL>
<BoL> Create a new task with the values substituted <EoL>
<BoL> Store arrays in HDF5 file <EoL>
<BoL> Write dask array to a stack of .npy files <EoL>
<BoL> Deterministic token <EoL>
<BoL> Permute axes of nested list <EoL>
<BoL> Unify chunks across a sequence of arrays <EoL>
<BoL> Return Pearson product-moment correlation coefficients . <EoL>
<BoL> Counts the number of non-zero values in the array `` a `` . <EoL>
<BoL> Repeatedly apply binary function to a sequence , accumulating results <EoL>
<BoL> Extract a diagonal or construct a diagonal array . <EoL>
<BoL> Return a new array with the same shape and type as a given array . <EoL>
<BoL> Return a 2-D Array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Construct an array by executing a function over each coordinate . <EoL>
<BoL> Return a full array with the same shape and type as a given array . <EoL>
<BoL> Helper function for finding shapes and chunks of end pads . <EoL>
<BoL> Implements NumPy 's `` indices `` for Dask Arrays . <EoL>
<BoL> Helper function to find the linear ramp for a chunk . <EoL>
<BoL> Return coordinate matrices from coordinate vectors . <EoL>
<BoL> Return an array of ones with the same shape and type as a given array . <EoL>
<BoL> Helper function for padding edges . <EoL>
<BoL> Helper function for padding boundaries with values in the array . <EoL>
<BoL> Helper function for padding boundaries with statistics from the array . <EoL>
<BoL> Helper function for padding boundaries with a user defined function . <EoL>
<BoL> Repeat elements of an array . <EoL>
<BoL> A sequence of overlapping subsequences <EoL>
<BoL> Construct an array by repeating A the number of times given by reps . <EoL>
<BoL> Lower triangle of an array with elements above the ` k ` -th diagonal zeroed . <EoL>
<BoL> Upper triangle of an array with elements above the ` k ` -th diagonal zeroed . <EoL>
<BoL> Return an array of zeros with the same shape and type as a given array . <EoL>
<BoL> Return the cumulative product of elements along a given axis . <EoL>
<BoL> Return the cumulative sum of the elements along a given axis . <EoL>
<BoL> Calculate the n-th discrete difference along the given axis . <EoL>
<BoL> Return the indices of the bins to which each value in input array belongs . <EoL>
<BoL> Stack arrays in sequence depth wise ( along third axis ) . <EoL>
<BoL> The differences between consecutive elements of an array . <EoL>
<BoL> einsum ( subscripts , *operands , out=None , dtype=None , order= ' K ' , casting='safe ' , optimize=False ) <EoL>
<BoL> A reproduction of numpy 's _parse_einsum_input ( ) which in itself is a reproduction of c side einsum parsing in python . <EoL>
<BoL> Return the elements of an array that satisfy some condition . <EoL>
<BoL> For computing the output chunks of [ i ] fft* <EoL>
<BoL> For computing the output chunks of irfft* <EoL>
<BoL> For computing the output chunks of rfft* <EoL>
<BoL> Wrap 1D , 2D , and ND real and complex FFT functions <EoL>
<BoL> Return the Discrete Fourier Transform sample frequencies . <EoL>
<BoL> Shift the zero-frequency component to the center of the spectrum . <EoL>
<BoL> The inverse of ` fftshift ` . Although identical for even-length ` x ` , the functions differ by one sample for odd-length ` x ` . <EoL>
<BoL> Return the Discrete Fourier Transform sample frequencies ( for usage with rfft , irfft ) . <EoL>
<BoL> Return indices that are non-zero in the flattened version of a . <EoL>
<BoL> Reverse element order along axis . <EoL>
<BoL> Flip array in the left/right direction . <EoL>
<BoL> Flip array in the up/down direction . <EoL>
<BoL> Blocked variant of : func : ` numpy.histogram ` . <EoL>
<BoL> Stack arrays in sequence horizontally ( column wise ) . <EoL>
<BoL> Insert values along the given axis before the given indices . <EoL>
<BoL> Returns a boolean array where two arrays are element-wise equal within a tolerance . <EoL>
<BoL> Calculates ` element in test_elements ` , broadcasting over ` element ` only . Returns a boolean array of the same shape as ` element ` that is True where an element of ` element ` is in ` test_elements ` and False otherwise . <EoL>
<BoL> pandas.isnull for dask arrays <EoL>
<BoL> Wrap numpy random function to produce dask.array random function <EoL>
<BoL> Private function to perform Cholesky decomposition , which returns both lower and upper triangulars . <EoL>
<BoL> A wrapper for np.linalg.qr that handles arrays with 0 rows <EoL>
<BoL> Create a Blockwise symbolic mutable mapping <EoL>
<BoL> Returns the Cholesky decomposition , : math : ` A = L L^* ` or : math : ` A = U^* U ` of a Hermitian positive-definite matrix A . <EoL>
<BoL> Compression level to use in svd_compressed <EoL>
<BoL> Randomly sample matrix to find most active subspace <EoL>
<BoL> Compute the inverse of a matrix with LU decomposition and forward / backward substitutions . <EoL>
<BoL> Return the least-squares solution to a linear matrix equation using QR decomposition . <EoL>
<BoL> Matrix or vector norm . <EoL>
<BoL> Compute the qr factorization of a matrix . <EoL>
<BoL> Direct Short-and-Fat QR <EoL>
<BoL> Solve the equation `` a x = b `` for `` x `` . <EoL>
<BoL> Solve the equation ` a x = b ` for ` x ` , assuming a is a triangular matrix . <EoL>
<BoL> Compute the singular value decomposition of a matrix . <EoL>
<BoL> Randomly compressed rank-k thin Singular Value Decomposition . <EoL>
<BoL> Return the weighted average of array over the given axis . <EoL>
<BoL> Return input as an array with masked data replaced by a fill value . <EoL>
<BoL> Return input with invalid data masked and replaced by a fill value . <EoL>
<BoL> Return the data of a masked array as an ndarray . <EoL>
<BoL> Return the mask of a masked array , or full boolean array of False . <EoL>
<BoL> Mask an array where equal to a given value . <EoL>
<BoL> Mask an array where greater than a given value . <EoL>
<BoL> Mask an array where greater than or equal to a given value . <EoL>
<BoL> Mask an array inside a given interval . <EoL>
<BoL> Mask an array where invalid values occur ( NaNs or infs ) . <EoL>
<BoL> Mask an array where less than a given value . <EoL>
<BoL> Mask an array where less than or equal to a given value . <EoL>
<BoL> Mask an array where ` not ` equal to a given value . <EoL>
<BoL> Mask an array outside a given interval . <EoL>
<BoL> Mask using floating point equality . <EoL>
<BoL> Mask an array where a condition is met . <EoL>
<BoL> Set the filling value of a , if a is a masked array . <EoL>
<BoL> Map a function over blocks of the array with some overlap <EoL>
<BoL> Return the indices of the elements that are non-zero . <EoL>
<BoL> pandas.notnull for dask arrays <EoL>
<BoL> Implementation of numpy.divide that works with dtype kwarg . <EoL>
<BoL> Return new dask with only the tasks required to calculate keys . <EoL>
<BoL> Find keys to avoid fusion <EoL>
<BoL> Replace Nones in slices with integers <EoL>
<BoL> High level optimization of stacked Blockwise layers <EoL>
<BoL> Optimize slices <EoL>
<BoL> Compute the outer product of two vectors . <EoL>
<BoL> Similar to dask.array.chunk.trim but requires one to specificy the boundary condition . <EoL>
<BoL> Pads an array which has 'none ' as the boundary type . Used to simplify trimming arrays which use 'none ' . <EoL>
<BoL> Add boundary conditions to an array before overlaping <EoL>
<BoL> Add constant slice to either side of array <EoL>
<BoL> Get all neighboring keys around center <EoL>
<BoL> Merge a collection of dictionaries <EoL>
<BoL> Each reflect each boundary value outwards <EoL>
<BoL> Share boundaries between neighboring blocks <EoL>
<BoL> Share boundaries between neighboring blocks <EoL>
<BoL> Copy a slice of an array around to its other side <EoL>
<BoL> Pipe a value through a sequence of functions <EoL>
<BoL> Reflect boundaries of array on the same side <EoL>
<BoL> Trim sides from each block <EoL>
<BoL> Trim sides from each block . <EoL>
<BoL> Approximate percentile of 1-D array <EoL>
<BoL> Evaluate a piecewise-defined function . <EoL>
<BoL> Range of values ( maximum - minimum ) along an axis . <EoL>
<BoL> Apply RandomState method with seed <EoL>
<BoL> Copy docstring from one function to another <EoL>
<BoL> Return a list of arrays that can initialize `` np.random.RandomState `` . <EoL>
<BoL> Convert blocks in dask array x for new chunks . <EoL>
<BoL> Merge intermediate results from `` arg_* `` functions <EoL>
<BoL> Generic function for argreduction . <EoL>
<BoL> Compose functions to operate in series . <EoL>
<BoL> Generic function for cumulative reduction <EoL>
<BoL> Get element in a sequence or dict <EoL>
<BoL> Version of inspect.getargspec that works with partial and warps . <EoL>
<BoL> List of list of tuple keys <EoL>
<BoL> Create an argreduction callable <EoL>
<BoL> A reduction to count the number of elements <EoL>
<BoL> A reduction to count the number of elements <EoL>
<BoL> Partial reduction across multiple axes . <EoL>
<BoL> Partition all elements of sequence into tuples of length at most n <EoL>
<BoL> plucks an element or several elements from each item in a sequence . <EoL>
<BoL> Extract the k largest elements from a on the given axis , and return them sorted from largest to smallest . If k is negative , extract the -k smallest elements instead , and return them sorted from smallest to largest . <EoL>
<BoL> Validate an input to axis= keywords <EoL>
<BoL> Reshape array to new shape <EoL>
<BoL> Roll array elements along a given axis . <EoL>
<BoL> Round an array to the given number of decimals . <EoL>
<BoL> Any Real can be converted to a native float object . <EoL>
<BoL> self**exponent ; should promote to float or complex when necessary . <EoL>
<BoL> x : nd-array array of one block coord : 1d-array or scalar coordinate along which the gradient is computed . axis : int axis along which the gradient is computed array_locs : actual location along axis . None if coordinate is scalar grad_kwargs : keyword to be passed to np.gradient <EoL>
<BoL> Helper/wrapper function for : func : ` numpy.unique ` . <EoL>
<BoL> Interleave a sequence of sequences <EoL>
<BoL> Like functools.wraps , but safe to use even if wrapped is not a function . <EoL>
<BoL> Split an array into a list of arrays ( using slices ) at the given breaks <EoL>
<BoL> Remove single-dimensional entries from the shape of an array . <EoL>
<BoL> Interchange two axes of an array . <EoL>
<BoL> Take elements from an array along an axis . <EoL>
<BoL> Compute tensor dot product along specified axes for arrays > = 1-D . <EoL>
<BoL> Stack arrays in sequence vertically ( row wise ) . <EoL>
<BoL> Sanitize a one-element index . <EoL>
<BoL> Returns a dict of { blocknum : slice } <EoL>
<BoL> Check validity of index for a given dimension <EoL>
<BoL> Create a function to insert value at many locations in sequence . <EoL>
<BoL> Is sequence sorted ? <EoL>
<BoL> Normalize slicing indexes <EoL>
<BoL> Normalize slices to canonical form <EoL>
<BoL> Flip negative indices around to positive ones <EoL>
<BoL> Sanitize the elements for indexing along one axis <EoL>
<BoL> Dask array indexing with slices and integers <EoL>
<BoL> Slice x with one or more dask arrays of bools <EoL>
<BoL> Slice x with at most one 1D dask arrays of ints . <EoL>
<BoL> Slice a ND dask array with a 1D dask arrays of ints along the given axis . <EoL>
<BoL> Handle indexing with Nones <EoL>
<BoL> Fancy indexing along blocked array dasks <EoL>
<BoL> Construct a plan to slice chunks with the given index <EoL>
<BoL> Index array with an iterable of index <EoL>
<BoL> Wrap up numpy function into dask.array <EoL>
<BoL> Check that graph is well named and non-overlapping <EoL>
<BoL> Transform np creation function into blocked version <EoL>
<BoL> Convert ( r , g , b ) triple to `` # RRGGBB '' string <EoL>
<BoL> Given a list of dask vals , return a single graph and a list of keys such that `` get ( dsk , keys ) `` is equivalent to `` [ v.compute ( ) for v in vals ] `` . <EoL>
<BoL> Convert many collections into a single dask graph , after optimization <EoL>
<BoL> Get scheduler function <EoL>
<BoL> Group a collection by a key function <EoL>
<BoL> Same as hash_buffer , but returns its result in hex-encoded form . <EoL>
<BoL> Identity function . Return x <EoL>
<BoL> Optimize several dask collections at once . <EoL>
<BoL> Get value from Dask <EoL>
<BoL> Extract collections in preparation for compute/persist/etc ... <EoL>
<BoL> Visualize several dask graphs at once . <EoL>
<BoL> A simple subs function that works both on tuples and strings <EoL>
<BoL> Tensor operation <EoL>
<BoL> Rewrite a stack of Blockwise expressions into a single blockwise expression <EoL>
<BoL> Normalize a python object and merge all sub-graphs . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Return buffered data without advancing the file position . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Read up to size uncompressed bytes , while trying to avoid making multiple reads from the underlying stream . Reads up to a buffer 's worth of data if size is negative . <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read a line of uncompressed bytes from the file . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a bytes object to the file . <EoL>
<BoL> Compress data in one shot and return the compressed string . Optional argument is the compression level , in range of 0-9 . <EoL>
<BoL> Decompress a gzip compressed string in one shot . Return the decompressed string . <EoL>
<BoL> Compress a block of data . <EoL>
<BoL> Decompress a block of data . <EoL>
<BoL> Close all encapsulated file objects <EoL>
<BoL> Returns a function that receives a single integer and returns it as a string padded by enough zero characters to align with maximum possible integer <EoL>
<BoL> Expand paths if they have a `` * `` in them . <EoL>
<BoL> Create a filesystem object from a protocol and options . <EoL>
<BoL> Get the hdfs driver implementation . <EoL>
<BoL> Get an equivalent pyarrow filesystem . <EoL>
<BoL> Attempt to import a required dependency . <EoL>
<BoL> Infer storage options from URL path and merge it with existing storage options . <EoL>
<BoL> Read a block of bytes from a file <EoL>
<BoL> Get an equivalent pyarrow filesystem <EoL>
<BoL> Ensure paths are absolute and normalized <EoL>
<BoL> For a template path , return matching files <EoL>
<BoL> Make any intermediate directories to make path writable <EoL>
<BoL> Make a file-like object <EoL>
<BoL> Size in bytes of the file at path <EoL>
<BoL> Unique identifier , so we can tell if a file changed <EoL>
<BoL> Seek current file to next byte after a delimiter bytestring <EoL>
<BoL> Allows callbacks to work with nested schedulers . <EoL>
<BoL> Normalizes a callback to a tuple <EoL>
<BoL> Take an iterable of callbacks , return a list of each callback . <EoL>
<BoL> Add an element . <EoL>
<BoL> This is slow ( creates N new iterators ! ) but effective . <EoL>
<BoL> Remove an element . Do not raise an exception if absent . <EoL>
<BoL> Return the popped value . Raise KeyError if empty . <EoL>
<BoL> Bind a method to class <EoL>
<BoL> Get all non `` *args/**kwargs `` arguments for a function <EoL>
<BoL> Collect configuration from paths and environment variables <EoL>
<BoL> Collect config from environment variables <EoL>
<BoL> Collect configuration from yaml files <EoL>
<BoL> Expand environment variables in a nested config dictionary <EoL>
<BoL> Get elements from global config <EoL>
<BoL> Update a sequence of nested dictionaries <EoL>
<BoL> Replaces underscores with hyphens in string keys <EoL>
<BoL> Replaces underscores with hyphens for keys for a nested Mapping <EoL>
<BoL> Update configuration by re-reading yaml files and env variables <EoL>
<BoL> Rename old keys to new keys <EoL>
<BoL> Assign value into a nested configuration dictionary <EoL>
<BoL> Update a nested dictionary with values from another <EoL>
<BoL> Add a new set of defaults to the configuration <EoL>
<BoL> Deprecated : see dask.config.set instead <EoL>
<BoL> Do the actual work of collecting data and executing a function <EoL>
<BoL> Get the immediate tasks on which this task depends <EoL>
<BoL> Get dependencies and dependents from dask dask graph <EoL>
<BoL> Return a list of nodes that form a cycle if Dask is not a DAG . <EoL>
<BoL> Whether `` x `` has anything to compute . <EoL>
<BoL> Does Dask form a directed acyclic graph when calculating keys ? <EoL>
<BoL> Is x hashable ? <EoL>
<BoL> Is x a runnable task ? <EoL>
<BoL> A generator to preorder-traverse a task . <EoL>
<BoL> Perform a substitution on a task <EoL>
<BoL> Return a list of keys of dask sorted in topological order . <EoL>
<BoL> Generate data for a single partition of a dask bag <EoL>
<BoL> Make a Dask Bag filled with data randomly generated by the mimesis projet <EoL>
<BoL> Make a dataset of random people <EoL>
<BoL> A naive synchronous version of get_async <EoL>
<BoL> Produce a 20-bytes hash of *buf* using SHA1 . <EoL>
<BoL> Hash a bytes-like ( buffer-compatible ) object . <EoL>
<BoL> A naive synchronous version of apply_async <EoL>
<BoL> Default get_id <EoL>
<BoL> Compute task and handle all administration <EoL>
<BoL> Fire off a task to the thread pool <EoL>
<BoL> Identity function . Returns x . <EoL>
<BoL> Get nested index from collection <EoL>
<BoL> Order nodes in dask graph <EoL>
<BoL> Remove data from temporary storage <EoL>
<BoL> Sorting key function that is robust to different types <EoL>
<BoL> Start state from a dask <EoL>
<BoL> Return the current multiprocessing context . <EoL>
<BoL> Initialize a worker process before running any tasks in it . <EoL>
<BoL> Metaclass that wraps exception type in RemoteException <EoL>
<BoL> Subroutine of fuse . <EoL>
<BoL> Create new keys for `` fuse `` tasks <EoL>
<BoL> Create new keys for fused tasks <EoL>
<BoL> Set of functions contained within nested task <EoL>
<BoL> Fuse getitem with lower operation <EoL>
<BoL> Return new dask graph with linear sequence of tasks fused together . <EoL>
<BoL> Fuse selections with lower operation . <EoL>
<BoL> Return new dask with the given keys inlined with their values . <EoL>
<BoL> Number of total data elements on which this key depends <EoL>
<BoL> Number of total data elements that depend on key <EoL>
<BoL> Provides a generator of tasks for imap and imap_unordered with appropriate handling for iterables which throw exceptions during iteration . <EoL>
<BoL> Cleanup after any worker processes which have exited due to reaching their specified lifetime . Returns True if any workers were cleaned up . <EoL>
<BoL> Clean up any exited workers and start replacements for them . <EoL>
<BoL> Bring the number of pool processes up to the specified number , for use after reaping workers which have exited . <EoL>
<BoL> Equivalent of ` func ( *args , **kwds ) ` . <EoL>
<BoL> Equivalent of ` map ( ) ` -- can be MUCH slower than ` Pool.map ( ) ` . <EoL>
<BoL> Like ` imap ( ) ` method but ordering of results is arbitrary . <EoL>
<BoL> Apply ` func ` to each element in ` iterable ` , collecting the results in a list that is returned . <EoL>
<BoL> Like ` map ( ) ` method but the elements of the ` iterable ` are expected to be iterables as well and will be unpacked as arguments . Hence ` func ` and ( a , b ) becomes func ( a , b ) . <EoL>
<BoL> Return the current Thread object , corresponding to the caller 's thread of control . <EoL>
<BoL> Must return a method used by binary operator <EoL>
<BoL> Must return a method used by unary operator <EoL>
<BoL> Formats an ascii table for given columns and rows . <EoL>
<BoL> Apply function inside nested lists <EoL>
<BoL> Turn string or bytes to bytes <EoL>
<BoL> Ensure that a file does not exist . <EoL>
<BoL> Turn string or bytes to bytes <EoL>
<BoL> Dumps a number of textfiles to disk <EoL>
<BoL> Get an instance of the appropriate lock for a certain situation based on scheduler used . <EoL>
<BoL> Is this object a numpy array or something similar ? <EoL>
<BoL> Sorting ` key ` function for performing a natural sort on a collection of strings <EoL>
<BoL> Pseudorandom array of integer indexes <EoL>
<BoL> Does this function take multiple arguments ? <EoL>
<BoL> Returns a data shape object of the subarray with 'leading' dimensions removed . In the case of a measure such as CType , 'leading ' must be 0 , and self is returned . <EoL>
<BoL> From Numpy dtype . <EoL>
<BoL> To Numpy dtype . <EoL>
<BoL> The DataShape of an indexed subarray <EoL>
<BoL> Returns a data shape object of the subarray with 'leading' dimensions removed . <EoL>
<BoL> Convert a decimal datashape to a NumPy dtype . <EoL>
<BoL> To Numpy record dtype . <EoL>
<BoL> To Numpy record dtype . <EoL>
<BoL> Adds all the default datashape types to the symbol table . <EoL>
<BoL> Concatenates a list of dshapes together along the first axis . Raises an error if there is a mismatch along another axis or the measures are different . <EoL>
<BoL> Clean up types prior to insertion into DataShape <EoL>
<BoL> Upcast a ( shape , dtype ) tuple if possible . <EoL>
<BoL> Normalize time input to one of 'year ' , 'second ' , 'millisecond ' , etc.. Example -- -- -- - <EoL>
<BoL> Pretty print a datashape <EoL>
<BoL> Downcast a datashape object into a Numpy ( shape , dtype ) tuple if possible . <EoL>
<BoL> Throw away the shape information and just return the measure as NumPy dtype instance . <EoL>
<BoL> Helper for using metaclasses in a py2/3 compatible way . <EoL>
<BoL> Topological sort algorithm by Kahn [ 1 ] - O ( nodes + vertices ) <EoL>
<BoL> Naive timedelta string parser <EoL>
<BoL> Group a collection by a key function <EoL>
<BoL> Is an array of strings <EoL>
<BoL> Is a component a dimension ? <EoL>
<BoL> Is this dshape a record type ? <EoL>
<BoL> Find common shared dshape <EoL>
<BoL> Performs lowest common dshape and also null aware <EoL>
<BoL> Unpack DataShape constructor if unnecessary <EoL>
<BoL> Parse a datashape . For a thorough description see http : //blaze.pydata.org/docs/datashape.html <EoL>
<BoL> Parse a bunch of datashapes all at once . <EoL>
<BoL> Returns True if the datashape has an ellipsis <EoL>
<BoL> Returns True if datashape has a variable dimension <EoL>
<BoL> Reverses direction of dependence dict <EoL>
<BoL> Has a boolean measure <EoL>
<BoL> Is a collection of items , has dimension <EoL>
<BoL> Has a date or datetime measure <EoL>
<BoL> Contains no variable dimensions <EoL>
<BoL> Does datashape contain only one dtype ? <EoL>
<BoL> Has a numeric measure <EoL>
<BoL> Has a numeric measure <EoL>
<BoL> Is this dshape a single dtype ? <EoL>
<BoL> Can be represented by a two dimensional with fixed columns <EoL>
<BoL> A generator which lexes a datashape string into a sequence of tokens . <EoL>
<BoL> Match argument types to the parameter types of a signature <EoL>
<BoL> Get the maximum width for a particular numeric type <EoL>
<BoL> Check whether a binary operation 's dshape came from : class : ` ~datashape.coretypes.Option ` typed operands and construct an : class : ` ~datashape.coretypes.Option ` type accordingly . <EoL>
<BoL> Advances self.pos by one , if it is not already at the end . <EoL>
<BoL> boolean : BOOLEAN <EoL>
<BoL> boolean_list : boolean COMMA boolean_list | boolean <EoL>
<BoL> datashape : datashape_nooption | QUESTIONMARK datashape_nooption | EXCLAMATIONMARK datashape_nooption <EoL>
<BoL> datashape_list : datashape COMMA datashape_list | datashape <EoL>
<BoL> datashape_nooption : dim ASTERISK datashape | dtype <EoL>
<BoL> dim : typevar | ellipsis_typevar | type | type_constr | INTEGER | ELLIPSIS typevar : NAME_UPPER ellipsis_typevar : NAME_UPPER ELLIPSIS type : NAME_LOWER type_constr : NAME_LOWER LBRACKET type_arg_list RBRACKET <EoL>
<BoL> dtype : typevar | type | type_constr | struct_type | funcproto_or_tuple_type typevar : NAME_UPPER ellipsis_typevar : NAME_UPPER ELLIPSIS type : NAME_LOWER type_constr : NAME_LOWER LBRACKET type_arg_list RBRACKET struct_type : LBRACE ... funcproto_or_tuple_type : LPAREN ... <EoL>
<BoL> funcproto_or_tuple_type : tuple_type RARROW datashape | tuple_type tuple_type : LPAREN tuple_item_list RPAREN | LPAREN tuple_item_list COMMA RPAREN | LPAREN RPAREN tuple_item_list : datashape COMMA tuple_item_list | datashape <EoL>
<BoL> integer : INTEGER <EoL>
<BoL> integer_list : INTEGER COMMA integer_list | INTEGER <EoL>
<BoL> string : STRING <EoL>
<BoL> string_list : STRING COMMA string_list | STRING <EoL>
<BoL> struct_field : struct_field_name COLON datashape struct_field_name : NAME_LOWER | NAME_UPPER | NAME_OTHER | STRING <EoL>
<BoL> struct_type : LBRACE struct_field_list RBRACE | LBRACE struct_field_list COMMA RBRACE <EoL>
<BoL> type_arg : datashape | INTEGER | STRING | BOOLEAN | list_type_arg list_type_arg : LBRACKET RBRACKET | LBRACKET datashape_list RBRACKET | LBRACKET integer_list RBRACKET | LBRACKET string_list RBRACKET <EoL>
<BoL> type_arg_list : type_arg COMMA type_arg_list | type_kwarg_list | type_arg type_kwarg_list : type_kwarg COMMA type_kwarg_list | type_kwarg <EoL>
<BoL> type_kwarg : NAME_LOWER EQUAL type_arg <EoL>
<BoL> Looks up a symbol in the provided symbol table dictionary for syntactic sugar , raising a standard error message if the symbol is missing . <EoL>
<BoL> Parses a single datashape from a string . <EoL>
<BoL> Number of dimensions of datashape <EoL>
<BoL> Collect terms in expression that match predicate <EoL>
<BoL> Promote two scalar dshapes to a possibly larger , but compatible type . <EoL>
<BoL> Simple temporary type constructor for complex <EoL>
<BoL> Simple temporary type constructor for funcproto <EoL>
<BoL> Simple temporary type constructor for struct <EoL>
<BoL> Simple temporary type constructor for typevar as a dim <EoL>
<BoL> Simple temporary type constructor for typevar as a dtype <EoL>
<BoL> Get the super type of a concrete numeric type <EoL>
<BoL> Validate a datashape to see whether it is well-formed . <EoL>
<BoL> Map ` f ` over ` t ` , calling ` f ` with type ` t ` and the map result of the mapping ` f ` over ` t ` 's parameters . <EoL>
<BoL> Parse string representing date and/or time in recognizable localized formats . Supports parsing multiple languages and timezones . <EoL>
<BoL> Get a locale instance . <EoL>
<BoL> Parse with formats and return a dictionary with 'period ' and 'obj_date ' . <EoL>
<BoL> Get the computers configured local timezone , if any . <EoL>
<BoL> Attemps to parse time part of date strings like ' 1 day ago , 2 PM ' <EoL>
<BoL> Check if the locale is applicable to translate date string . <EoL>
<BoL> Translate the date string to its English equivalent . <EoL>
<BoL> Check if tokens are valid tokens for the locale . <EoL>
<BoL> Split the date string using translations in locale info . <EoL>
<BoL> Parse date and time from given date string . <EoL>
<BoL> Return a time struct based on the input string and the format string . <EoL>
<BoL> Monkey patching _strptime to avoid problems related with non-english locale changes on the system . <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> ignores trailing whitespace <EoL>
<BoL> True if table has any records <EoL>
<BoL> data can be a record , template , dict , or tuple <EoL>
<BoL> iterates over the table 's records <EoL>
<BoL> returns number of records in table <EoL>
<BoL> constructs fieldblock for disk table <EoL>
<BoL> dBase III and Clipper <EoL>
<BoL> Returns field information Name Type ( Length [ , Decimals ] ) <EoL>
<BoL> returns index of next available record towards direction <EoL>
<BoL> builds the FieldList of names , types , and descriptions <EoL>
<BoL> standardizes field specs <EoL>
<BoL> Raises ` DbfError ` if table is closed <EoL>
<BoL> Returns a group of three bytes , in integer form , of the date <EoL>
<BoL> Returns a Date ( ) of the packed three-byte date passed in <EoL>
<BoL> synchronizes the disk file with current data <EoL>
<BoL> adds field ( s ) to the table layout ; format is Name Type ( Length , Decimals ) [ ; Name Type ( Length , Decimals ) [ ... ] ] backup table is created with _backup appended to name then zaps table , recreates current structure , and copies records back from the backup <EoL>
<BoL> set fields to allow null values -- NO LONGER ALLOWED , MUST BE SET AT TABLE CREATION <EoL>
<BoL> adds < multiple > blank records , and fills fields with dict/tuple values if present <EoL>
<BoL> sets record index to bottom of table ( end of table ) <EoL>
<BoL> closes disk files , flushing record data to disk ensures table data is available if keep_table ensures memo data is available if keep_memos <EoL>
<BoL> creates a backup table <EoL>
<BoL> creates an in-memory index using the function key <EoL>
<BoL> returns a record template that can be used like a record <EoL>
<BoL> removes field ( s ) from the table creates backup files with _backup appended to the file name , then modifies current structure <EoL>
<BoL> set fields to not allow null values <EoL>
<BoL> returns ( field type , size , dec , class ) of field <EoL>
<BoL> changes the record pointer to the first matching ( deleted ) record where should be either an integer , or 'top ' or 'bottom ' . top - > before first record bottom - > after last record <EoL>
<BoL> returns the index of record between start and stop start and stop default to the first and last record <EoL>
<BoL> returns a new table of the same type <EoL>
<BoL> returns True if field allows Nulls <EoL>
<BoL> ( re ) opens disk table , ( re ) initializes data structures <EoL>
<BoL> physically removes all deleted records <EoL>
<BoL> criteria is a string that will be converted into a function that returns a List of all matching records <EoL>
<BoL> reprocess all indices for this table <EoL>
<BoL> renames an existing field <EoL>
<BoL> resizes field ( C only at this time ) creates backup file , then modifies current structure <EoL>
<BoL> move index to the next nth available record <EoL>
<BoL> return field specification list suitable for creating same table layout fields should be a list of fields or None for all fields in table <EoL>
<BoL> sets record index to top of table ( beginning of table ) <EoL>
<BoL> removes all records from table -- this can not be undone ! <EoL>
<BoL> date should be either a datetime.date or date/month/day should all be appropriate integers <EoL>
<BoL> year may be a datetime.datetime <EoL>
<BoL> constructs fieldblock for disk table <EoL>
<BoL> builds the FieldList of names , types , and descriptions <EoL>
<BoL> Helper to correctly register callbacks to __exit__ methods <EoL>
<BoL> Registers an arbitrary callback and arguments . <EoL>
<BoL> Immediately unwind the context stack <EoL>
<BoL> Enters the supplied context manager <EoL>
<BoL> Preserve the context stack by transferring it to a new instance <EoL>
<BoL> Registers a callback with the standard __exit__ method signature <EoL>
<BoL> builds the FieldList of names , types , and descriptions <EoL>
<BoL> Returns a group of three bytes , in integer form , of the date <EoL>
<BoL> Returns a Date ( ) of the packed three-byte date passed in <EoL>
<BoL> reads the sector indicated , and returns a Node object <EoL>
<BoL> if key is an integer , returns the matching record ; if key is a [ slice | string | tuple | record ] returns a List ; raises NotFoundError on failure <EoL>
<BoL> removes all entries from index <EoL>
<BoL> table_name , record_number <EoL>
<BoL> raises error if table is closed <EoL>
<BoL> reindexes all records <EoL>
<BoL> returns the index of record between start and stop start and stop default to the first and last record <EoL>
<BoL> returns the index of match between start and stop start and stop default to the first and last record . if nearest is true returns the location of where the match should be otherwise raises NotFoundError <EoL>
<BoL> criteria is a callback that returns a truthy value for matching record <EoL>
<BoL> returns dbf.List of all ( partially ) matching records <EoL>
<BoL> implemented by subclass ; must return True if underlying structure meets need <EoL>
<BoL> Return a Vapor record as the last record in the iteration if include_vapor is True <EoL>
<BoL> returns the index of record between start and stop start and stop default to the first and last record <EoL>
<BoL> table_name , record_number <EoL>
<BoL> criteria is a callback that returns a truthy value for matching record <EoL>
<BoL> AND ( conjunction ) x & y : True iff both x , y are True False iff at least one of x , y is False Unknown otherwise <EoL>
<BoL> commits each record to disk before returning the next one ; undoes all changes to that record if exception raised if records is a table , it will be opened and closed if necessary filter function should return True to skip record , False to keep <EoL>
<BoL> record = ascii array of entire record ; layout=record specification ; memo = memo object for table <EoL>
<BoL> stores field updates to disk ; if any errors restores previous contents and propogates exception <EoL>
<BoL> creates a blank record data chunk <EoL>
<BoL> rerun all indices with this record <EoL>
<BoL> calls appropriate routine to convert value stored in field from array <EoL>
<BoL> discards all changes since ._start_flux ( ) <EoL>
<BoL> Allows record.field_name = ... and record [ ... ] = ... ; must use ._commit_flux ( ) to commit changes <EoL>
<BoL> calls appropriate routine to convert value to bytes , and save it in record <EoL>
<BoL> record = ascii array of entire record ; layout=record specification <EoL>
<BoL> Flushes field updates to disk If any errors restores previous contents and raises ` DbfError ` <EoL>
<BoL> Calls appropriate routine to convert value stored in field from array <EoL>
<BoL> discards all changes since ._start_flux ( ) <EoL>
<BoL> Allows record.field_name = ... and record [ ... ] = ... ; must use ._commit_flux ( ) to commit changes <EoL>
<BoL> calls appropriate routine to convert value to ascii bytes , and save it in record <EoL>
<BoL> Vapor records are always False <EoL>
<BoL> record = ascii array of entire record layout=record specification memo = memo object for table <EoL>
<BoL> record should be from the source table <EoL>
<BoL> checks memo file for problems <EoL>
<BoL> builds the FieldList of names , types , and descriptions from the disk file <EoL>
<BoL> returns a template of each record instead of the record itself if records is a table , it will be opened and closed if necessary <EoL>
<BoL> hour may be a datetime.time or a str ( Time ) <EoL>
<BoL> builds the FieldList of names , types , and descriptions <EoL>
<BoL> Gets the memo in block <EoL>
<BoL> Stores data in memo file , returns block number <EoL>
<BoL> dBase IV specific <EoL>
<BoL> Retrieve memo contents from disk <EoL>
<BoL> Initialize disk file usage <EoL>
<BoL> Store memo contents to disk <EoL>
<BoL> Resets memo structure back to zero memos <EoL>
<BoL> returns parameter unchanged <EoL>
<BoL> ensures each tuple is the same length , using filler [ -missing ] for the gaps <EoL>
<BoL> adds fields to an existing table <EoL>
<BoL> marks record as deleted <EoL>
<BoL> deletes fields from an existing table <EoL>
<BoL> writes the records using CSV or tab-delimited format , using the filename given if specified , otherwise the table name if table_or_records is a collection of records ( not an actual table ) they should all be of the same format <EoL>
<BoL> extends all iters to longest one , using last value from each as necessary <EoL>
<BoL> fields in table/record , keys in dict <EoL>
<BoL> generic routine for error text for the add ... ( ) functions <EoL>
<BoL> prints the first record of a table <EoL>
<BoL> saves data into a record 's fields ; writes to disk if not in flux keys with no matching field will raise a FieldMissingError exception unless drop_missing == True ; if an Exception occurs the record is restored before reraising <EoL>
<BoL> returns the list of field names of a table <EoL>
<BoL> just what it says ; ) <EoL>
<BoL> returns integers 0 - len ( sequence ) <EoL>
<BoL> prints table info <EoL>
<BoL> marked for deletion ? <EoL>
<BoL> because we ca n't do ` NoneType ( *args , **kwargs ) ` <EoL>
<BoL> Returns a four-bye integer from the value , or raises DbfError <EoL>
<BoL> Returns a two-bye integer from the value , or raises DbfError <EoL>
<BoL> Returns an 11 byte , upper-cased , null padded string suitable for field names ; raises DbfError if the string is bigger than 10 bytes <EoL>
<BoL> recognized pql commands are SELECT , UPDATE | REPLACE , DELETE , RECALL , ADD , DROP <EoL>
<BoL> creates a function matching to apply command to each record in recordsdef func ( records ) : `` ' % s `` ' _changed = 0 for _rec in records : _tmp = dbf.create_template ( _rec ) % s <EoL>
<BoL> creates a function matching the pql criteriadef func ( records ) : `` ' % s `` ' _matched = dbf.List ( ) for _rec in records : % s <EoL>
<BoL> physical record number <EoL>
<BoL> renames a field in a table <EoL>
<BoL> sets record 's fields back to blank values , except for fields in keep_fields <EoL>
<BoL> Returns the string in bytes as fielddef [ CLASS ] or fielddef [ EMPTY ] <EoL>
<BoL> Returns the currency value in bytes <EoL>
<BoL> Returns the ascii coded date as fielddef [ CLASS ] or fielddef [ EMPTY ] <EoL>
<BoL> Returns the double in bytes as fielddef [ CLASS ] ( 'default ' == float ) <EoL>
<BoL> Returns the binary number stored in bytes in little-endian format as fielddef [ CLASS ] <EoL>
<BoL> Returns True if bytes is 't ' , 'T ' , ' y ' , or ' Y' None if ' ? ' False otherwise <EoL>
<BoL> Returns the block of data from a memo file <EoL>
<BoL> Returns the number stored in bytes as integer if field spec for decimals is 0 , float otherwise <EoL>
<BoL> returns the date/time stored in bytes ; dates < = 01/01/1981 00:00:00 may not be accurate ; BC dates are nulled . <EoL>
<BoL> Returns the block of data from a memo file <EoL>
<BoL> moves record pointer forward 1 ; returns False if Eof/Bof reached table must be derived from _Navigation or have skip ( ) method <EoL>
<BoL> returns as_type ( ) of [ fieldnames and ] values . <EoL>
<BoL> return scientific notation with not more than decimals-1 decimal places <EoL>
<BoL> table associated with table | record | index <EoL>
<BoL> returns the definition of a field ( or all fields ) <EoL>
<BoL> returns text representation of a table 's dbf version <EoL>
<BoL> marks record as active <EoL>
<BoL> Returns the value in the four-byte integer passed in <EoL>
<BoL> Returns the value in the two-byte integer passed in <EoL>
<BoL> Returns a normal , lower-cased string from a null-padded byte string <EoL>
<BoL> called if a data type is not supported for that style of table <EoL>
<BoL> returns the string as bytes ( not unicode ) as fielddef [ CLASS ] or fielddef [ EMPTY ] <EoL>
<BoL> Returns the value to be stored in the record 's disk data <EoL>
<BoL> Returns the Date or datetime.date object ascii-encoded ( yyyymmdd ) <EoL>
<BoL> returns the value to be stored in the record 's disk data <EoL>
<BoL> Returns value in little-endian binary format <EoL>
<BoL> Returns 'T ' if logical is True , ' F ' if False , ' ? ' otherwise <EoL>
<BoL> Writes string as a memo , returns the block number it was saved into <EoL>
<BoL> returns value as ascii representation , rounding decimal portion as necessary <EoL>
<BoL> Sets the date/time stored in moment moment must have fields : year , month , day , hour , minute , second , microsecond <EoL>
<BoL> Writes string as a memo , returns the block number it was saved into <EoL>
<BoL> write record data to disk ( updates indices ) <EoL>
<BoL> Create a new field parser <EoL>
<BoL> Create a lookup table for field types . <EoL>
<BoL> Checks if the field_type is supported by the parser <EoL>
<BoL> Parse field and return value <EoL>
<BoL> Parse flags field and return as byte string <EoL>
<BoL> Parse integer or autoincrement field and return int . <EoL>
<BoL> Parse time field ( T ) <EoL>
<BoL> Binary memo field or double precision floating point number <EoL>
<BoL> Parse char field and return unicode string <EoL>
<BoL> Parse date field and return datetime.date or None <EoL>
<BoL> Parse float field and return float or None <EoL>
<BoL> OLE Object stored in memofile . <EoL>
<BoL> Parse logical field and return True , False or None <EoL>
<BoL> Parse memo field ( M , G , B or P ) <EoL>
<BoL> Parse numeric field ( N ) <EoL>
<BoL> Parse long field ( O ) and return float . <EoL>
<BoL> Picture stored in memofile . <EoL>
<BoL> Parse currency field ( Y ) and return decimal.Decimal . <EoL>
<BoL> Read struct from a file-like object ( implenting read ( ) ) . <EoL>
<BoL> Unpack struct from binary string and return a named tuple . <EoL>
<BoL> Convert 2-digit year to 4-digit year . <EoL>
<BoL> Look for a file in a case insensitive way . <EoL>
<BoL> Case insensitive version of fnmatch.fnmatch ( ) <EoL>
<BoL> Case insensitive version of glob.glob ( ) <EoL>
<BoL> Convert glob pattern to case insensitive form . <EoL>
<BoL> Get a memo from the file . <EoL>
<BoL> Warns about some type of deprecation that has been ( or will be ) made . <EoL>
<BoL> Helper to fix/workaround https : //bugs.python.org/issue3445 <EoL>
<BoL> Generate a name from callable . <EoL>
<BoL> Get class name for object . <EoL>
<BoL> Gets the `` self `` object attached to this method ( or none ) . <EoL>
<BoL> Context manager decorato <EoL>
<BoL> Context manager decorato <EoL>
<BoL> Append `` a `` to the list of the virtual ancestors , unless it is already included . <EoL>
<BoL> decorate ( func , caller ) decorates a function using a caller . If the caller is a generator function , the resulting function will be a generator function . <EoL>
<BoL> decorator ( caller ) converts a caller function into a decorato <EoL>
<BoL> Factory of decorators turning a function into a generic function dispatching on the given arguments.Make sure one passes the expected number of argumentsDecorator turning a function into a generic functionGet a list of sets of virtual ancestors for the given typesGet a list of virtual MROs , one for each typeDecorator to register an implementation for the given typesAn utility to introspect the dispatch algorithm <EoL>
<BoL> Return true if the object is a user-defined generator function . <EoL>
<BoL> Return the subfield of this field named `` name `` or raise a : exc : ` KeyError ` if a subfield does not exist named `` name `` . <EoL>
<BoL> Iterate over the children fields of this field . <EoL>
<BoL> Clone the field and its subfields , retaining attribute information . <EoL>
<BoL> Deserialize the pstruct into a cstruct and return the cstruct . <EoL>
<BoL> Create an end-mapping tag ( a literal ) . <EoL>
<BoL> Create a start-rename tag ( a literal ) . <EoL>
<BoL> Create an end-sequence tag ( a literal ) . <EoL>
<BoL> Return the root field in the field hierarchy ( the form field ) <EoL>
<BoL> Return a sequence of two tuples in the form [ ( `` requirement_name `` , `` version `` ) , .. ] . <EoL>
<BoL> Return a resources dictionary in the form `` { 'js ' : [ seq ] , 'css ' : [ seq ] } `` . <EoL>
<BoL> Render the field ( or form ) to HTML using `` appstruct `` as a set of default values and returns the HTML string . <EoL>
<BoL> Render the template named `` template `` using `` kw `` as the top-level keyword arguments ( augmented with `` field `` and `` cstruct `` if necessary ) <EoL>
<BoL> Serialize the cstruct into HTML and return the HTML string . <EoL>
<BoL> Set the cstruct of this node ( and its child nodes ) using `` appstruct `` as input . <EoL>
<BoL> Set the callable that will act as a default renderer for instances of the associated class when no `` renderer `` argument is provided to the class ' constructor . Useful when you 'd like to use an alternate templating system . <EoL>
<BoL> Set the cstruct of this node ( and its child nodes ) using `` pstruct `` as input . <EoL>
<BoL> set widgets of the child fields of this field or form element . `` widgets `` should be a dictionary in the form : : <EoL>
<BoL> Create a start-mapping tag ( a literal ) . <EoL>
<BoL> Create a start-rename tag ( a literal ) . <EoL>
<BoL> Create a start-sequence tag ( a literal ) . <EoL>
<BoL> Use the translator passed to the renderer of this field to translate the msgid into a term and return the term . If the renderer does not have a translator , this method will return the msgid . <EoL>
<BoL> Validate the set of controls returned by a form submission against the schema associated with this field or form . <EoL>
<BoL> Validate the pstruct passed . Works exactly like the : class : ` deform.field.validate ` method , except it accepts a pstruct instead of a set of form controls . A usage example follows : : <EoL>
<BoL> Serialize a dictionary representing partial file information to a dictionary containing information expected by a file upload widget . <EoL>
<BoL> Used to reserialize the form in such a way that the user will see error markers in the form HTML . <EoL>
<BoL> If `` s `` is an instance of `` text_type `` , return `` s.encode ( encoding , errors ) `` , otherwise return `` s `` <EoL>
<BoL> If `` s `` is an instance of `` binary_type `` , return `` s.decode ( encoding , errors ) `` , otherwise return `` s `` <EoL>
<BoL> Create a factory which will generate translation strings without requiring that each call to the factory be passed a `` domain `` value . <EoL>
<BoL> Initialize ZPT widget rendering for Deform forms . <EoL>
<BoL> When necessary , use the result of calling this function as a Chameleon template 'translate ' function ( e.g . <EoL>
<BoL> The `` handle_error `` method of a widget must : <EoL>
<BoL> Choose whether < opt > is selected or not . <EoL>
<BoL> Return a dictionary representing the resources required for a particular set of requirements ( as returned by : meth : ` deform.Field.get_widget_requirements ` ) . <EoL>
<BoL> Set the CSS resources for the requirement/version pair , using `` resources `` as the set of relative resource paths . <EoL>
<BoL> Set the Javascript resources for the requirement/version pair , using `` resources `` as the set of relative resource paths . <EoL>
<BoL> The `` deserialize `` method of a widget must deserialize a : term : ` pstruct ` value to a : term : ` cstruct ` value and return the : term : ` cstruct ` value . <EoL>
<BoL> The `` serialize `` method of a widget must serialize a : term : ` cstruct ` value to an HTML rendering . <EoL>
<BoL> ( Deprecated ) Handle doctype declaration <EoL>
<BoL> Finish feeding data to parser and return element structure . <EoL>
<BoL> Feed encoded data to parser . <EoL>
<BoL> Python 3.3 hides the pure Python code but defusedxml requires it . <EoL>
<BoL> Incrementally parse XML document into ElementTree . <EoL>
<BoL> Parse XML document into element tree . <EoL>
<BoL> Monkey patch and defuse all stdlib packages <EoL>
<BoL> Check docinfo of an element tree for DTD and entity declarations <EoL>
<BoL> Blocks until process is complete . <EoL>
<BoL> Waits on the given pattern to appear in std_out <EoL>
<BoL> Runs the current command and passes its output to the next given process . <EoL>
<BoL> Runs the given command , with or without pexpect functionality enabled . <EoL>
<BoL> Sends the given string or signal to std_in . <EoL>
<BoL> This is to support iterators over a file-like object . <EoL>
<BoL> Run in a thread to move output from a pipe to a queue . <EoL>
<BoL> This compiles a pattern-string or a list of pattern-strings . <EoL>
<BoL> This seeks through the stream until a pattern is matched . <EoL>
<BoL> This is the common loop used inside expect . The 'searcher ' should be an instance of searcher_re or searcher_string , which describes how and what to search for in the input . <EoL>
<BoL> Expose file descriptor for a file-like interface <EoL>
<BoL> This does nothing . It is here to support the interface for a File-like object . <EoL>
<BoL> Overridden in subclass using tty <EoL>
<BoL> Sends a Unix signal to the subprocess . <EoL>
<BoL> This reads at most `` size '' bytes from the file ( less if the read hits EOF before obtaining size bytes ) . <EoL>
<BoL> This reads and returns one entire line . <EoL>
<BoL> This reads until EOF using readline ( ) and returns a list containing the lines thus read . <EoL>
<BoL> Send data to the subprocess ' stdin . <EoL>
<BoL> Closes the stdin pipe from the writing end . <EoL>
<BoL> Wraps send ( ) , sending string `` s `` to child process , with os.linesep automatically appended . Returns number of bytes written . <EoL>
<BoL> Wait for the subprocess to finish . <EoL>
<BoL> This is similar to send ( ) except that there is no return value . <EoL>
<BoL> This calls write ( ) for each element in the sequence . <EoL>
<BoL> Parses command strings and returns a Popen-ready list . <EoL>
<BoL> Check whether pid exists in the current process table . <EoL>
<BoL> Implement __getattr__ to call ` shift_date ` function when function called does not exist <EoL>
<BoL> Shift datetime in ` direction ` in _VALID_SHIFT_DIRECTIONS and by some unit in _VALID_SHIFTS and shift that amount by some multiple , defined by by args [ 0 ] if it exists <EoL>
<BoL> Return a date string formatted to the given pattern . <EoL>
<BoL> Humanize relative to now : <EoL>
<BoL> Returns a new Delorean object after applying replace on the existing datetime object . <EoL>
<BoL> Shifts the timezone from the current timezone to the specified timezone associated with the Delorean object , modifying the Delorean object and returning the modified object . <EoL>
<BoL> Truncate the delorian object to the nearest s ( second , minute , hour , day , month , year ) <EoL>
<BoL> Move datetime given delta by given direction <EoL>
<BoL> This method given a timezone returns a localized datetime object . <EoL>
<BoL> This method takes a timedelta and return the number of seconds it represents with the resolution of 10**6 <EoL>
<BoL> This method returns true if the datetime is naive else returns false <EoL>
<BoL> Given a naive datetime object this method will return a localized datetime object <EoL>
<BoL> Move datetime 1 month in the chosen direction . unit is a no-op , to keep the API the same as the day case <EoL>
<BoL> Move datetime 1 week in the chosen direction . unit is a no-op , to keep the API the same as the day case <EoL>
<BoL> Move datetime 1 year in the chosen direction . unit is a no-op , to keep the API the same as the day case <EoL>
<BoL> Given a object with a timezone return a datetime object normalized to the proper timezone . <EoL>
<BoL> Return a Delorean object for the current local date and time , setting the timezone to the local timezone of the caller . <EoL>
<BoL> Parses a datetime string and returns a ` Delorean ` object . <EoL>
<BoL> This an alternative way to generating sets of Delorean objects with DAILY stops <EoL>
<BoL> This an alternative way to generating sets of Delorean objects with HOURLY stops <EoL>
<BoL> This an alternative way to generating sets of Delorean objects with MONTHLY stops <EoL>
<BoL> This an alternative way to generating sets of Delorean objects with YEARLY stops <EoL>
<BoL> Output a string that would generate this RRULE if passed to rrulestr . This is mostly compatible with RFC2445 , except for the dateutil-specific extension BYEASTER . <EoL>
<BoL> If a ` BYXXX ` sequence is passed to the constructor at the same level as ` FREQ ` ( e.g . ` FREQ=HOURLY , BYHOUR= { 2,4,7 } , INTERVAL=3 ` ) , there are some specifications which can not be reached given some starting conditions . <EoL>
<BoL> Calculates the next value in a sequence where the ` FREQ ` parameter is specified along with a ` BYXXX ` parameter at the same `` level '' ( e.g . ` HOURLY ` specified with ` BYHOUR ` ) . <EoL>
<BoL> Returns the first recurrence after the given datetime instance . <EoL>
<BoL> Returns the last recurrence before the given datetime instance . <EoL>
<BoL> Returns all the occurrences of the rrule between after and before . <EoL>
<BoL> Returns the number of recurrences in this set . It will have go trough the whole recurrence , if this has n't been done before . <EoL>
<BoL> Generator which yields up to ` count ` recurrences after the given datetime instance , equivalent to ` after ` . <EoL>
<BoL> Return a Delorean object for the current UTC date and time , setting the timezone to UTC . <EoL>
<BoL> Return all ocurrences of the item . <EoL>
<BoL> Query for items passing PyQuery args explicitly . <EoL>
<BoL> Return ocurrence ( the first one , unless specified ) of the item . <EoL>
<BoL> Clean extracted value . <EoL>
<BoL> Extract value from given PyQuery element . <EoL>
<BoL> Return True if given url is an absolute URL . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Constructs a matplotlib patch from a geometric object <EoL>
<BoL> Returns a shallow copy of the ` Path ` , which will share the vertices and codes with the source ` Path ` . <EoL>
<BoL> Returns a deepcopy of the ` Path ` . The ` Path ` will not be readonly , even if the source ` Path ` is . <EoL>
<BoL> Creates a Path instance without the expense of calling the constructor <EoL>
<BoL> Return an arc on the unit circle from angle *theta1* to angle *theta2* ( in degrees ) . <EoL>
<BoL> Return a Path representing a circle of a given radius and center . <EoL>
<BoL> Clip the path to the given bounding box . <EoL>
<BoL> Returns whether this ( closed ) path completely contains the given path . <EoL>
<BoL> Returns whether the ( closed ) path contains the given point . <EoL>
<BoL> Returns a bool array which is `` True `` if the ( closed ) path contains the corresponding point . <EoL>
<BoL> Returns the extents ( *xmin* , *ymin* , *xmax* , *ymax* ) of the path . <EoL>
<BoL> Returns a new path resampled to length N x steps . Does not currently handle interpolating curves . <EoL>
<BoL> Returns *True* if this path intersects a given : class : ` ~matplotlib.transforms.Bbox ` . <EoL>
<BoL> Returns *True* if this path intersects another given path . <EoL>
<BoL> Make a compound path from a list of Path objects . <EoL>
<BoL> Make a compound path object to draw a number of polygons with equal numbers of sides XY is a ( numpolys x numsides x 2 ) numpy array of vertices . Return object is a : class : ` Path ` <EoL>
<BoL> Convert this path to a list of polygons or polylines . <EoL>
<BoL> Return a transformed copy of the path . <EoL>
<BoL> Return the readonly : class : ` Path ` of the unit circle . <EoL>
<BoL> Return a : class : ` Path ` of the right half of a unit circle . The circle is approximated using cubic Bezier curves . This uses 4 splines around the circle using the approach presented here : <EoL>
<BoL> Return a : class : ` Path ` instance of the unit rectangle from ( 0 , 0 ) to ( 1 , 1 ) . <EoL>
<BoL> Return a : class : ` Path ` for a unit regular asterisk with the given numVertices and radius of 1.0 , centered at ( 0 , 0 ) . <EoL>
<BoL> Return a : class : ` Path ` instance for a unit regular polygon with the given *numVertices* and radius of 1.0 , centered at ( 0 , 0 ) . <EoL>
<BoL> Return a : class : ` Path ` for a unit regular star with the given numVertices and radius of 1.0 , centered at ( 0 , 0 ) . <EoL>
<BoL> Return a wedge of the unit circle from angle *theta1* to angle *theta2* ( in degrees ) . <EoL>
<BoL> *path* is a : class : ` matplotlib.path.Path ` object . <EoL>
<BoL> Adds a callback function that will be called whenever one of the : class : ` Artist ` 's properties changes . <EoL>
<BoL> Test whether the mouse event occurred in the patch . <EoL>
<BoL> Returns `` True `` if the given *point* is inside the path ( transformed with its transform attribute ) . <EoL>
<BoL> Returns a bool array which is `` True `` if the ( closed ) path contains the corresponding point . ( transformed with its transform attribute ) . <EoL>
<BoL> For artists in an axes , if the xaxis has units support , convert *x* using xaxis unit type <EoL>
<BoL> For artists in an axes , if the yaxis has units support , convert *y* using yaxis unit type <EoL>
<BoL> Find artist objects . <EoL>
<BoL> Return *cursor data* string formatted . <EoL>
<BoL> Return filter function to be used for agg filter . <EoL>
<BoL> Return the alpha value used for blending - not supported on all backends <EoL>
<BoL> Returns True if the : class : ` Patch ` is to be drawn with antialiasing . <EoL>
<BoL> Return a list of the child : class : ` Artist ` s this : class : ` Artist ` contains . <EoL>
<BoL> Return the _contains test used by the artist , or *None* for default . <EoL>
<BoL> Get the cursor data for a given event . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` instance which maps data coordinates to physical coordinates . <EoL>
<BoL> Return the edge color of the : class : ` Patch ` . <EoL>
<BoL> Return a : class : ` ~matplotlib.transforms.Bbox ` object defining the axis-aligned extents of the : class : ` Patch ` . <EoL>
<BoL> Return the face color of the : class : ` Patch ` . <EoL>
<BoL> Return the ` .Figure ` instance the artist belongs to . <EoL>
<BoL> Returns the group id . <EoL>
<BoL> Return boolean flag , `` True `` if artist is included in layout calculations . <EoL>
<BoL> Get the label used for this artist in the legend . <EoL>
<BoL> Return the linestyle . <EoL>
<BoL> Return the line width in points . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` instance which takes patch coordinates to data coordinates . <EoL>
<BoL> Return the picker object used by this artist . <EoL>
<BoL> Return whether the artist is to be rasterized . <EoL>
<BoL> Returns the sketch parameters for the artist . <EoL>
<BoL> Returns the snap setting which may be : <EoL>
<BoL> Like ` Artist.get_window_extent ` , but includes any clipping . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` applied to the : class : ` Patch ` . <EoL>
<BoL> Return the clip path with the non-affine part of its transformation applied , and the remaining affine part of its transformation . <EoL>
<BoL> Returns the url . <EoL>
<BoL> Return a copy of the vertices used in this patch <EoL>
<BoL> Return the artist 's zorder . <EoL>
<BoL> List the children of the artist which contain the mouse event *event* . <EoL>
<BoL> Returns whether the artist is assigned to a ` .Figure ` . <EoL>
<BoL> Returns *True* if : class : ` Artist ` has a transform explicitly set . <EoL>
<BoL> Fire an event when property changed , calling all of the registered callbacks . <EoL>
<BoL> Process pick event <EoL>
<BoL> return a dictionary mapping property name - > value for all Artist props <EoL>
<BoL> Remove the artist from the figure if possible . <EoL>
<BoL> Remove a callback based on its *id* . <EoL>
<BoL> A property batch setter . Pass *kwargs* to set properties . <EoL>
<BoL> Set the agg filter . <EoL>
<BoL> Set the alpha transparency of the patch . <EoL>
<BoL> Set the artist 's animation state . <EoL>
<BoL> Set whether to use antialiased rendering . <EoL>
<BoL> Set the patch capstyle <EoL>
<BoL> Set the artist 's clip ` .Bbox ` . <EoL>
<BoL> Set whether artist uses clipping . <EoL>
<BoL> Set the artist 's clip path , which may be : <EoL>
<BoL> Set both the edgecolor and the facecolor . <EoL>
<BoL> Replace the contains test used by this artist . The new picker should be a callable function which determines whether the artist is hit by the mouse event : : <EoL>
<BoL> Set the patch edge color . <EoL>
<BoL> Set the patch face color . <EoL>
<BoL> Set the ` .Figure ` instance the artist belongs to . <EoL>
<BoL> Set whether to fill the patch . <EoL>
<BoL> Sets the ( group ) id for the artist . <EoL>
<BoL> Set the hatching pattern <EoL>
<BoL> Set if artist is to be included in layout calculations , E.g . : doc : ` /tutorials/intermediate/constrainedlayout_guide ` , ` .Figure.tight_layout ( ) ` , and `` fig.savefig ( fname , bbox_inches='tight ' ) `` . <EoL>
<BoL> Set the patch joinstyle <EoL>
<BoL> Set the label to *s* for auto legend . <EoL>
<BoL> Set the patch linestyle . <EoL>
<BoL> Set the patch linewidth in points <EoL>
<BoL> Set the path effects . <EoL>
<BoL> Set the epsilon for picking used by this artist <EoL>
<BoL> Force rasterized ( bitmap ) drawing in vector backend output . <EoL>
<BoL> Sets the sketch parameters . <EoL>
<BoL> Sets the snap setting which may be : <EoL>
<BoL> Set the artist transform . <EoL>
<BoL> Sets the url for the artist . <EoL>
<BoL> Set the artist 's visibility . <EoL>
<BoL> Set the zorder for the artist . Artists with lower zorder values are drawn first . <EoL>
<BoL> Update this artist 's properties from the dictionary *prop*.Sorting out how to update property ( setter or setattr ) . <EoL>
<BoL> Updates this : class : ` Patch ` from the properties of *other* . <EoL>
<BoL> Constructs a compound matplotlib path from a Shapely or GeoJSON-like geometric object <EoL>
<BoL> Convert the input to an array . <EoL>
<BoL> Return a new array of given shape and type , filled with ones . <EoL>
<BoL> Call a subprocess , return return-code and stdout . When *this* process exits , kills the subprocess . <EoL>
<BoL> Whether ( it looks like ) a tty is available . <EoL>
<BoL> Test whether a subprocess call succeeds . <EoL>
<BoL> Internal function to get the app that should be used . <EoL>
<BoL> Ask the user to confirm something via an ok-cancel question . <EoL>
<BoL> Ask the user whether to retry something via a retry-cancel question . <EoL>
<BoL> Ask the user a yes-no question . <EoL>
<BoL> Show a message to let the user know that something failed . <EoL>
<BoL> Inform the user about something . <EoL>
<BoL> Get whether Dialite is supported for the current platform . <EoL>
<BoL> Warn the user about something . <EoL>
<BoL> Advance into the _decoded_chars buffer . <EoL>
<BoL> Read and decode the next chunk of data from the BufferedReader . <EoL>
<BoL> Rewind the _decoded_chars buffer . <EoL>
<BoL> Set the _decoded_chars buffer . <EoL>
<BoL> Reset the encoder ( merely useful for proper BOM handling ) <EoL>
<BoL> extend pickle with all of dill 's registered types <EoL>
<BoL> get object located at the given memory address ( inverse of id ( obj ) ) <EoL>
<BoL> lookup name if module is imported <EoL>
<BoL> get map of imported modules <EoL>
<BoL> get memory address of proxy 's reference object <EoL>
<BoL> print a trace through the stack when pickling ; useful for debugging <EoL>
<BoL> check pickling of an object across another process <EoL>
<BoL> use pickling to 'copy ' an object <EoL>
<BoL> pickle an object to a file <EoL>
<BoL> pickle the current state of __main__ to a file <EoL>
<BoL> pickle an object to a string <EoL>
<BoL> unpickle an object from a file <EoL>
<BoL> update the __main__ module with the state from the session file <EoL>
<BoL> unpickle an object from a string <EoL>
<BoL> expose dispatch table for user-created extensions <EoL>
<BoL> quick check if object pickles with dill <EoL>
<BoL> print citation <EoL>
<BoL> get items in object that fail to pickle <EoL>
<BoL> get objects that fail to pickle <EoL>
<BoL> get types for objects that fail to pickle <EoL>
<BoL> Find the chain of referrers for obj . Chain will start with obj . <EoL>
<BoL> get the code object for the given function or method <EoL>
<BoL> get errors for objects that fail to pickle <EoL>
<BoL> get objects defined in enclosing code that are referred to by func <EoL>
<BoL> get the module of the object <EoL>
<BoL> get objects defined in global scope that are referred to by func <EoL>
<BoL> Return true if the object is a code object . <EoL>
<BoL> Return true if the object is a frame object . <EoL>
<BoL> Return true if the object is a user-defined function . <EoL>
<BoL> Return true if the object is an instance method . <EoL>
<BoL> Return true if the object is a traceback . <EoL>
<BoL> get the code objects for any nested functions ( e.g . in a closure ) <EoL>
<BoL> get the names of any globals found within func <EoL>
<BoL> get outermost enclosing object ( i.e . the outer function in a closure ) <EoL>
<BoL> Find the chain of referents for obj . Chain will end with obj . <EoL>
<BoL> get the names of objects in the global scope referred to by func <EoL>
<BoL> get functions defined inside of func ( e.g . inner functions in a closure ) <EoL>
<BoL> get names of variables defined by func <EoL>
<BoL> add ( or remove ) dill types to/from the pickle registry <EoL>
<BoL> print license <EoL>
<BoL> load pickleable and/or unpickleable types to `` dill.types `` <EoL>
<BoL> get import for closured objects ; return a dict of 'name ' and 'import <EoL>
<BoL> get source code for closured objects ; return a dict of 'name' and 'code blocks <EoL>
<BoL> create a function enclosure around the source of some object <EoL>
<BoL> get the name of the object . for lambdas , get the name of the pointer <EoL>
<BoL> helper to build a likely import string from head and tail of namespace . ( 'head ' , 'tail ' ) are used in the following context : `` from head import tail '' <EoL>
<BoL> True if object has an attribute that stores it 's __code__ <EoL>
<BoL> check if object is in the 'types ' module <EoL>
<BoL> True if object is a class instance type ( and is not a builtin ) <EoL>
<BoL> check if object is a string-like type <EoL>
<BoL> check if lambda object 'func ' matches raw line of code 'line <EoL>
<BoL> _namespace ( obj ) ; return namespace hierarchy ( as a list of names ) for the given object . For an instance , find the class hierarchy . <EoL>
<BoL> outdent lines of code , accounting for docs and line continuations <EoL>
<BoL> dump to source ' , where the code includes a pickled object . <EoL>
<BoL> Return the entire source file and starting line number for an object . For interactively-defined objects , the 'file ' is the interpreter 's history . <EoL>
<BoL> Extract the block of code at the top of the given list of lines . <EoL>
<BoL> Return a list of source lines and starting line number for an object . Interactively-defined objects refer to lines in the interpreter 's history . <EoL>
<BoL> Work out which source or compiled file an object was defined in . <EoL>
<BoL> get the likely import string for the given object <EoL>
<BoL> Return the module an object was defined in , or None if not found . <EoL>
<BoL> Return the filename that can be used to locate an object 's source . Return None if no way can be identified to get the source . <EoL>
<BoL> Return a list of source lines and starting line number for an object . Interactively-defined objects refer to lines in the interpreter 's history . <EoL>
<BoL> get an importable string ( i.e . source code or the import string ) for the given object , including any required objects from the enclosing and global scope <EoL>
<BoL> indent a block of code with whitespace ( default is 4 spaces ) <EoL>
<BoL> Return the indent size , in spaces , at the start of a line of text . <EoL>
<BoL> Return true if the object is a built-in function or method . <EoL>
<BoL> Return true if the object is a module . <EoL>
<BoL> outdent a block of code ( default is to strip all leading whitespace ) <EoL>
<BoL> builds a context that temporarily replaces the given stream name <EoL>
<BoL> dill.dump of object to a NamedTemporaryFile . <EoL>
<BoL> dill.dump of object to a buffer . <EoL>
<BoL> write object source to a buffer ( instead of dill.dump ) Loads by with dill.temp.loadIO_source . Returns the buffer object . <EoL>
<BoL> load an object that was stored with dill.temp.dump <EoL>
<BoL> load an object that was stored with dill.temp.dumpIO <EoL>
<BoL> load an object that was stored with dill.temp.dumpIO_source <EoL>
<BoL> load an object that was stored with dill.temp.dump_source <EoL>
<BoL> Return ` True ` if ` key ` matching item is found in cache . <EoL>
<BoL> Delete corresponding item for ` key ` from cache . <EoL>
<BoL> Return corresponding value for ` key ` from cache . <EoL>
<BoL> Initialize cache instance . <EoL>
<BoL> Set ` key ` and ` value ` item in cache . <EoL>
<BoL> Add ` key ` and ` value ` item to cache . <EoL>
<BoL> Check database and file system consistency . <EoL>
<BoL> Remove all items from cache . <EoL>
<BoL> Close database connection . <EoL>
<BoL> Create tag index on cache database . <EoL>
<BoL> Cull items from cache until volume is less than size limit . <EoL>
<BoL> Decrement value by delta for item with key . <EoL>
<BoL> Delete corresponding item for ` key ` from cache . <EoL>
<BoL> Drop tag index on cache database . <EoL>
<BoL> Remove items with matching ` tag ` from cache . <EoL>
<BoL> Remove expired items from cache . <EoL>
<BoL> Retrieve value from cache . If ` key ` is missing , return ` default ` . <EoL>
<BoL> Increment value by delta for item with key . <EoL>
<BoL> Iterate Cache keys in database sort order . <EoL>
<BoL> Remove corresponding item for ` key ` from cache and return value . <EoL>
<BoL> Return file handle value corresponding to ` key ` from cache . <EoL>
<BoL> Reset ` key ` and ` value ` item from Settings table . <EoL>
<BoL> Return cache statistics hits and misses . <EoL>
<BoL> Return estimated total size of cache on disk . <EoL>
<BoL> deque.__delitem__ ( index ) < == > del deque [ index ] <EoL>
<BoL> deque.__getitem__ ( index ) < == > deque [ index ] <EoL>
<BoL> deque.__iadd__ ( iterable ) < == > deque += iterable <EoL>
<BoL> Initialize deque instance . <EoL>
<BoL> deque.__iter__ ( ) < == > iter ( deque ) <EoL>
<BoL> deque.__len__ ( ) < == > len ( deque ) <EoL>
<BoL> deque.__repr__ ( ) < == > repr ( deque ) <EoL>
<BoL> deque.__reversed__ ( ) < == > reversed ( deque ) <EoL>
<BoL> deque.__setitem__ ( index , value ) < == > deque [ index ] = value <EoL>
<BoL> Add ` value ` to back of deque . <EoL>
<BoL> Add ` value ` to front of deque . <EoL>
<BoL> Remove all elements from deque . <EoL>
<BoL> Return number of occurrences of ` value ` in deque . <EoL>
<BoL> Extend back side of deque with values from ` iterable ` . <EoL>
<BoL> Extend front side of deque with value from ` iterable ` . <EoL>
<BoL> Initialize deque using ` cache ` . <EoL>
<BoL> Remove and return value at back of deque . <EoL>
<BoL> Remove and return value at front of deque . <EoL>
<BoL> Remove first occurrence of ` value ` in deque . <EoL>
<BoL> Reverse deque in place . <EoL>
<BoL> Rotate deque right by ` steps ` . <EoL>
<BoL> Initialize disk instance . <EoL>
<BoL> Convert fields ` mode ` , ` filename ` , and ` value ` from Cache table to value . <EoL>
<BoL> Return filename and full-path tuple for file storage . <EoL>
<BoL> Convert fields ` key ` and ` raw ` from Cache table to key . <EoL>
<BoL> Compute portable hash for ` key ` . <EoL>
<BoL> Convert ` key ` to fields key and raw for Cache table . <EoL>
<BoL> Remove a file given by ` filename ` . <EoL>
<BoL> Convert ` value ` to fields size , mode , filename , and value for Cache table . <EoL>
<BoL> Return ` True ` if ` key ` matching item is found in cache . <EoL>
<BoL> Delete corresponding item for ` key ` from cache . <EoL>
<BoL> Return corresponding value for ` key ` from cache . <EoL>
<BoL> Set ` key ` and ` value ` item in cache . <EoL>
<BoL> Add ` key ` and ` value ` item to cache . <EoL>
<BoL> Check database and file system consistency . <EoL>
<BoL> Remove all items from cache . <EoL>
<BoL> Create tag index on cache database . <EoL>
<BoL> Cull items from cache until volume is less than size limit . <EoL>
<BoL> Decrement value by delta for item with key . <EoL>
<BoL> Delete corresponding item for ` key ` from cache . <EoL>
<BoL> Return Deque with given ` name ` in subdirectory . <EoL>
<BoL> Drop tag index on cache database . <EoL>
<BoL> Remove items with matching ` tag ` from cache . <EoL>
<BoL> Remove expired items from cache . <EoL>
<BoL> Increment value by delta for item with key . <EoL>
<BoL> Return Index with given ` name ` in subdirectory . <EoL>
<BoL> Memoizing cache decorator . <EoL>
<BoL> Return file handle corresponding to ` key ` from cache . <EoL>
<BoL> Reset ` key ` and ` value ` item from Settings table . <EoL>
<BoL> Set ` key ` and ` value ` item in cache . <EoL>
<BoL> Return cache statistics hits and misses . <EoL>
<BoL> Return estimated total size of cache on disk . <EoL>
<BoL> index.__delitem__ ( key ) < == > del index [ key ] <EoL>
<BoL> index.__eq__ ( other ) < == > index == other <EoL>
<BoL> index.__getitem__ ( key ) < == > index [ key ] <EoL>
<BoL> Initialize index in directory and update items . <EoL>
<BoL> index.__iter__ ( ) < == > iter ( index ) <EoL>
<BoL> index.__len__ ( ) < == > len ( index ) <EoL>
<BoL> index.__ne__ ( other ) < == > index ! = other <EoL>
<BoL> index.__repr__ ( ) < == > repr ( index ) <EoL>
<BoL> index.__reversed__ ( ) < == > reversed ( index ) <EoL>
<BoL> index.__setitem__ ( key , value ) < == > index [ key ] = value <EoL>
<BoL> Remove all items from index . <EoL>
<BoL> Initialize index using ` cache ` and update items . <EoL>
<BoL> Set-like object providing a view of index items . <EoL>
<BoL> Set-like object providing a view of index keys . <EoL>
<BoL> Remove corresponding item for ` key ` from index and return value . <EoL>
<BoL> Remove and return item pair . <EoL>
<BoL> Pull key and value item pair from ` side ` of queue in index . <EoL>
<BoL> Push ` value ` onto ` side ` of queue in index identified by ` prefix ` . <EoL>
<BoL> Set and get value for ` key ` in index using ` default ` . <EoL>
<BoL> Set-like object providing a view of index values . <EoL>
<BoL> User-callable function to create and return a unique temporary directory . The return value is the pathname of the directory . <EoL>
<BoL> Recursively delete a directory tree . <EoL>
<BoL> Returns configured DATABASE dictionary from DATABASE_URL . <EoL>
<BoL> Parses a database URL . <EoL>
<BoL> Derives a PEP386-compliant version number from VERSION . <EoL>
<BoL> Depending on the combination of python version and whether we're connecting over http or https , we might need to access _sock , which may or may not exist ; or we may need to just settimeout on socket itself , which also may or may not have settimeout on it . To avoid missing the correct one , we try both . <EoL>
<BoL> A generator of multiplexed data blocks read from a buffered response . <EoL>
<BoL> A generator of multiplexed data blocks coming from a response stream . <EoL>
<BoL> Raises stored : class : ` APIError ` , if one occurred . <EoL>
<BoL> Prepare the kwargs for an HTTP request by inserting the timeout parameter , if not already present . <EoL>
<BoL> Generator for data coming from a chunked-encoded HTTP response . <EoL>
<BoL> Stream result for TTY-enabled container and raw binary data <EoL>
<BoL> Like `` attach `` , but returns the underlying socket-like object for the HTTP request . <EoL>
<BoL> List configs <EoL>
<BoL> Configure a plugin . <EoL>
<BoL> Create a config <EoL>
<BoL> Create an endpoint config dictionary to be used with : py : meth : ` create_networking_config ` . <EoL>
<BoL> Create a dictionary for the `` host_config `` argument to : py : meth : ` create_container ` . <EoL>
<BoL> Create a networking config dictionary to be used as the `` networking_config `` parameter in : py : meth : ` create_container ` . <EoL>
<BoL> Create a new plugin . <EoL>
<BoL> Create a secret <EoL>
<BoL> Create a : py : class : ` docker.types.SwarmSpec ` instance that can be used as the `` swarm_spec `` argument in : py : meth : ` ~docker.api.swarm.SwarmApiMixin.init_swarm ` . <EoL>
<BoL> Get data usage information . <EoL>
<BoL> Inspect changes on a container 's filesystem . <EoL>
<BoL> Disable an installed plugin . <EoL>
<BoL> Enable an installed plugin . <EoL>
<BoL> Get real-time events from the server . Similar to the `` docker events `` command . <EoL>
<BoL> Return low-level information about an exec command . <EoL>
<BoL> Resize the tty session used by the specified exec command . <EoL>
<BoL> Export the contents of a filesystem as a tar archive . <EoL>
<BoL> Retrieve a file or folder from a container in the form of a tar archive . <EoL>
<BoL> Get a tarball of an image . Similar to the `` docker save `` command . <EoL>
<BoL> Get the unlock key for this Swarm manager . <EoL>
<BoL> Show the history of an image . <EoL>
<BoL> List images . Similar to the `` docker images `` command . <EoL>
<BoL> Display system-wide information . Identical to the `` docker info `` command . <EoL>
<BoL> Retrieve config metadata <EoL>
<BoL> Identical to the ` docker inspect ` command , but only for containers . <EoL>
<BoL> Get image digest and platform information by contacting the registry . <EoL>
<BoL> Get detailed information about an image . Similar to the `` docker inspect `` command , but only for images . <EoL>
<BoL> Get detailed information about a network . <EoL>
<BoL> Retrieve low-level information about a swarm node <EoL>
<BoL> Retrieve plugin metadata . <EoL>
<BoL> Retrieve secret metadata <EoL>
<BoL> Return information about a service . <EoL>
<BoL> Retrieve low-level information about the current swarm . <EoL>
<BoL> Retrieve information about a task . <EoL>
<BoL> Retrieve volume info by name . <EoL>
<BoL> Kill a container or send a signal to a container . <EoL>
<BoL> Leave a swarm . <EoL>
<BoL> Load an image that was previously saved using : py : meth : ` ~docker.api.image.ImageApiMixin.get_image ` ( or `` docker save `` ) . Similar to `` docker load `` . <EoL>
<BoL> List networks . Similar to the `` docker networks ls `` command . <EoL>
<BoL> List swarm nodes . <EoL>
<BoL> Pauses all processes within a container . <EoL>
<BoL> Checks the server is responsive . An exception will be raised if it is n't responding . <EoL>
<BoL> Retrieve list of privileges to be granted to a plugin . <EoL>
<BoL> Retrieve a list of installed plugins . <EoL>
<BoL> Lookup the public-facing port that is NAT-ed to `` private_port `` . Identical to the `` docker port `` command . <EoL>
<BoL> Delete the builder cache <EoL>
<BoL> Delete stopped containers <EoL>
<BoL> Delete unused images <EoL>
<BoL> Delete unused networks <EoL>
<BoL> Delete unused volumes <EoL>
<BoL> Pull and install a plugin . After the plugin is installed , it can be enabled using : py : meth : ` ~enable_plugin ` . <EoL>
<BoL> Push a plugin to the registry . <EoL>
<BoL> Insert a file or folder in an existing container using a tar archive as source . <EoL>
<BoL> Force a reload of the auth configuration <EoL>
<BoL> Remove a config <EoL>
<BoL> Remove a container . Similar to the `` docker rm `` command . <EoL>
<BoL> Remove an image . Similar to the `` docker rmi `` command . <EoL>
<BoL> Remove a network . Similar to the `` docker network rm `` command . <EoL>
<BoL> Remove a node from the swarm . <EoL>
<BoL> Remove an installed plugin . <EoL>
<BoL> Remove a secret <EoL>
<BoL> Stop and remove a service . <EoL>
<BoL> Remove a volume . Similar to the `` docker volume rm `` command . <EoL>
<BoL> Rename a container . Similar to the `` docker rename `` command . <EoL>
<BoL> Resize the tty session . <EoL>
<BoL> Restart a container . Similar to the `` docker restart `` command . <EoL>
<BoL> Search for images on Docker Hub . Similar to the `` docker search `` command . <EoL>
<BoL> List secrets <EoL>
<BoL> List services . <EoL>
<BoL> Start a container . Similar to the `` docker start `` command , but does n't support attach options . <EoL>
<BoL> Stream statistics for a specific container . Similar to the `` docker stats `` command . <EoL>
<BoL> Stops a container . Similar to the `` docker stop `` command . <EoL>
<BoL> Tag an image into a repository . Similar to the `` docker tag `` command . <EoL>
<BoL> Retrieve a list of tasks . <EoL>
<BoL> Display the running processes of a container . <EoL>
<BoL> Unlock a locked swarm . <EoL>
<BoL> Unpause all processes within a container . <EoL>
<BoL> Update the node 's configuration <EoL>
<BoL> Upgrade an installed plugin . <EoL>
<BoL> Returns version information from the server . Similar to the `` docker version `` command . <EoL>
<BoL> List volumes currently registered by the docker daemon . Similar to the `` docker volume ls `` command . <EoL>
<BoL> Block until a container stops , then return its exit code . Similar to the `` docker wait `` command . <EoL>
<BoL> Return a client configured from environment variables . <EoL>
<BoL> Instantiate a new ProxyConfig from a dictionary that represents a client configuration , as described in ` the documentation ` _ . <EoL>
<BoL> Return a dictionary representing the environment variables used to set the proxy settings . <EoL>
<BoL> Given a list of strings representing environment variables , prepend the environment variables corresponding to the proxy settings . <EoL>
<BoL> Ensure assert_hostname is set correctly on our pool <EoL>
<BoL> Configure a client with these TLS options . <EoL>
<BoL> Iterate through frames read from the socket and return the result . <EoL>
<BoL> Create a suitable APIError from requests.exceptions.HTTPError . <EoL>
<BoL> Utility to demultiplex stdout and stderr when reading frames from the socket . <EoL>
<BoL> Return a generator of frames read from socket . A frame is a tuple where the first item is the stream number and the second item is a chunk of data . <EoL>
<BoL> Given a stream of text , return a stream of json objects . This handles streams which are inconsistently buffered ( some entries may be newline delimited , and others are not ) . <EoL>
<BoL> Closes the event streaming . <EoL>
<BoL> Loads authentication data from a Docker configuration file in the given root directory or if config_path is passed use given path . Lookup priority : explicit config_path parameter > DOCKER_CONFIG environment variable > ~/.docker/config.json > ~/.dockercfg <EoL>
<BoL> Parses authentication entries <EoL>
<BoL> Returns the authentication data from the given auth configuration for a specific registry . <EoL>
<BoL> Parses authentication entries <EoL>
<BoL> Get a config . <EoL>
<BoL> List configs . Similar to the `` docker config ls `` command . <EoL>
<BoL> Create a model from a set of attributes . <EoL>
<BoL> Create a container without starting it . Similar to `` docker create `` . <EoL>
<BoL> Get a container by name or ID . <EoL>
<BoL> Build an image and return it . <EoL>
<BoL> Gets an image . <EoL>
<BoL> Gets the registry data for an image . <EoL>
<BoL> List images on the server . <EoL>
<BoL> Load an image that was previously saved using : py : meth : ` ~docker.models.images.Image.save ` ( or `` docker save `` ) . Similar to `` docker load `` . <EoL>
<BoL> Pull an image of the given name and return it . <EoL>
<BoL> Create a network . Similar to the `` docker network create `` . <EoL>
<BoL> Get a network by its ID . <EoL>
<BoL> List networks . Similar to the `` docker networks ls `` command . <EoL>
<BoL> Get a node . <EoL>
<BoL> List swarm nodes . <EoL>
<BoL> Create a new plugin . <EoL>
<BoL> Gets a plugin . <EoL>
<BoL> Pull and install a plugin . <EoL>
<BoL> List plugins installed on the server . <EoL>
<BoL> Get a secret . <EoL>
<BoL> List secrets . Similar to the `` docker secret ls `` command . <EoL>
<BoL> Create a service . Similar to the `` docker service create `` command . <EoL>
<BoL> Get a service . <EoL>
<BoL> List services . <EoL>
<BoL> Inspect the swarm on the server and store the response in : py : attr : ` attrs ` . <EoL>
<BoL> Create a volume . <EoL>
<BoL> Get a volume . <EoL>
<BoL> List volumes . Similar to the `` docker volume ls `` command . <EoL>
<BoL> Load this object from the server again and update `` attrs `` with the new data . <EoL>
<BoL> Remove this config . <EoL>
<BoL> Attach to this container . <EoL>
<BoL> Like : py : meth : ` attach ` , but returns the underlying socket-like object for the HTTP request . <EoL>
<BoL> Commit a container to an image . Similar to the `` docker commit `` command . <EoL>
<BoL> Inspect changes on a container 's filesystem . <EoL>
<BoL> Export the contents of the container 's filesystem as a tar archive . <EoL>
<BoL> Retrieve a file or folder from the container in the form of a tar archive . <EoL>
<BoL> Kill or send a signal to the container . <EoL>
<BoL> Get logs from this container . Similar to the `` docker logs `` command . <EoL>
<BoL> Pauses all processes within this container . <EoL>
<BoL> Insert a file or folder in this container using a tar archive as source . <EoL>
<BoL> Remove this container . Similar to the `` docker rm `` command . <EoL>
<BoL> Rename this container . Similar to the `` docker rename `` command . <EoL>
<BoL> Resize the tty session . <EoL>
<BoL> Restart this container . Similar to the `` docker restart `` command . <EoL>
<BoL> Start this container . Similar to the `` docker start `` command , but does n't support attach options . <EoL>
<BoL> Stream statistics for this container . Similar to the `` docker stats `` command . <EoL>
<BoL> Stops a container . Similar to the `` docker stop `` command . <EoL>
<BoL> Display the running processes of the container . <EoL>
<BoL> Unpause all processes within the container . <EoL>
<BoL> Update resource configuration of the containers . <EoL>
<BoL> Block until the container stops , then return its exit code . Similar to the `` docker wait `` command . <EoL>
<BoL> Show the history of an image . <EoL>
<BoL> Get a tarball of an image . Similar to the `` docker save `` command . <EoL>
<BoL> Tag this image into a repository . Similar to the `` docker tag `` command . <EoL>
<BoL> Convert arguments to create ( ) to arguments to create_container ( ) . <EoL>
<BoL> Check whether the given platform identifier is available for this digest . <EoL>
<BoL> Pull the image digest . <EoL>
<BoL> Connect a container to this network . <EoL>
<BoL> Disconnect a container from this network . <EoL>
<BoL> Remove this network . <EoL>
<BoL> Remove this node from the swarm . <EoL>
<BoL> Update the node 's configuration . <EoL>
<BoL> Update the plugin 's settings . <EoL>
<BoL> Disable the plugin . <EoL>
<BoL> Enable the plugin . <EoL>
<BoL> Push the plugin to a remote registry . <EoL>
<BoL> Remove the plugin from the server . <EoL>
<BoL> Upgrade the plugin . <EoL>
<BoL> Remove this secret . <EoL>
<BoL> Force update the service even if no changes require it . <EoL>
<BoL> Get log stream for the service . Note : This method works only for services with the `` json-file `` or `` journald `` logging drivers . <EoL>
<BoL> Stop and remove the service . <EoL>
<BoL> Scale service container . <EoL>
<BoL> List the tasks in this service . <EoL>
<BoL> Update a service 's configuration . Similar to the `` docker service update `` command . <EoL>
<BoL> Remove this volume . <EoL>
<BoL> Set a the value for `` key `` to `` value `` inside the `` config `` dict . <EoL>
<BoL> Remove the `` key `` property from the `` config `` dict . <EoL>
<BoL> Given a root directory path and a list of .dockerignore patterns , return an iterator of all paths ( both regular files and directories ) in the root directory that do *not* match any of the patterns . <EoL>
<BoL> Test whether FILENAME matches PATTERN . <EoL>
<BoL> Compare docker versions <EoL>
<BoL> Get the user 's home directory , using the same logic as the Docker Engine client - use % USERPROFILE % on Windows , $ HOME/getuid on POSIX . <EoL>
<BoL> Convert a UTC datetime to a Unix timestamp <EoL>
<BoL> Clear the pattern cache <EoL>
<BoL> Test whether FILENAME matches PATTERN , including case . This is a version of fnmatch ( ) which does n't case-normalize its arguments . <EoL>
<BoL> Translate a shell PATTERN to a regular expression . <EoL>
<BoL> Attempt to parse a json object from a buffer . If there is at least one object , return it and the rest of the buffer , otherwise return None . <EoL>
<BoL> Given a generator which yields strings and a splitter function , joins all input , splits on the separator and yields each chunk . Unlike string.split ( ) , each chunk includes the trailing separator , except for the last one if none was found on the end of the input . <EoL>
<BoL> Given a stream of bytes or text , if any of the items in the stream are bytes convert them to text . This function can be removed once we return text streams instead of byte streams . <EoL>
<BoL> Reads a line-separated environment file . The format of each line should be `` key=value '' . <EoL>
<BoL> Returns a generator of data read from the socket when the tty setting is not enabled . <EoL>
<BoL> Return a generator of data read from the socket when the tty setting is enabled . <EoL>
<BoL> Returns the stream and size of the next frame of data waiting to be read from socket , according to the protocol defined here : <EoL>
<BoL> Reads at most n bytes from socket <EoL>
<BoL> Reads exactly n bytes from socket Raises SocketError if there is n't enough data <EoL>
<BoL> Split host and port , returning numeric port . <EoL>
<BoL> Caching wrapper around client.exec_inspect <EoL>
<BoL> does execed process have allocated tty ? <EoL>
<BoL> Returns True if the PTY should operate in raw mode . <EoL>
<BoL> resize pty of an execed process <EoL>
<BoL> Return a single socket which is processing all I/O to exec <EoL>
<BoL> start execution <EoL>
<BoL> Initialize the PTY using the docker.Client instance and container dict . <EoL>
<BoL> Resize the container 's PTY . <EoL>
<BoL> Initialize the PTY using the docker.Client instance and container dict . <EoL>
<BoL> Thin wrapper around client.inspect_container ( ) . <EoL>
<BoL> Returns True if the PTY should operate in raw mode . <EoL>
<BoL> resize pty within container <EoL>
<BoL> Returns a tuple of sockets connected to the pty ( stdin , stdout , stderr ) . <EoL>
<BoL> Present the PTY of the container inside the current process . <EoL>
<BoL> Initialize a new Demuxer reading from ` stream ` . <EoL>
<BoL> Delegates to underlying Stream . <EoL>
<BoL> Delegates to underlying Stream . <EoL>
<BoL> Returns the fileno ( ) of the underlying Stream . <EoL>
<BoL> Delegates to underlying Stream . <EoL>
<BoL> Read up to ` n ` bytes of data from the Stream , after demuxing . <EoL>
<BoL> Delegates the the underlying Stream . <EoL>
<BoL> Returns the ` fileno ( ) ` of the reader end of the Pump . <EoL>
<BoL> Flush ` n ` bytes of data from the reader Stream to the writer Stream . <EoL>
<BoL> Returns True if the read stream is done ( either it 's returned EOF or the pump does n't have wait_for_output set ) , and the write side does not have pending bytes to send . <EoL>
<BoL> Initialize the Stream for the file descriptor ` fd ` . <EoL>
<BoL> Flushes as much pending data from the internal write buffer as possible . <EoL>
<BoL> Return the fileno ( ) of the file descriptor . <EoL>
<BoL> Returns True if the stream has data waiting to be written . <EoL>
<BoL> Return ` n ` bytes of data from the Stream , or None at end of stream . <EoL>
<BoL> Write ` data ` to the Stream . <EoL>
<BoL> Select the streams from ` read_streams ` that are ready for reading , and streams from ` write_streams ` ready for writing . <EoL>
<BoL> Set the given file-descriptor blocking or non-blocking . <EoL>
<BoL> are we dealing with a tty or not ? <EoL>
<BoL> if we have terminal , resize it <EoL>
<BoL> Return sockets for streams . <EoL>
<BoL> start execution <EoL>
<BoL> Invoked on entering a ` with ` block . <EoL>
<BoL> Invoked on exiting a ` with ` block . <EoL>
<BoL> Initialize a new WINCH handler for the given PTY . <EoL>
<BoL> Start trapping WINCH signals and resizing the PTY . <EoL>
<BoL> Stop trapping WINCH signals and restore the previous WINCH handler . <EoL>
<BoL> Present the PTY of the container inside the current process . <EoL>
<BoL> Invoked when a ` with ` block is first entered . <EoL>
<BoL> Invoked when a ` with ` block is finished . <EoL>
<BoL> Initialize a terminal for the tty with stdin attached to ` fd ` . <EoL>
<BoL> Returns True if the TTY should operate in raw mode . <EoL>
<BoL> Saves the current terminal attributes and makes the tty raw . <EoL>
<BoL> Restores the terminal attributes back to before setting raw mode . <EoL>
<BoL> Return a tuple ( rows , cols ) representing the size of the TTY ` fd ` . <EoL>
<BoL> Make pattern-tree tips point to same object if they are equal . <EoL>
<BoL> Fix elements that should accumulate/increment values . <EoL>
<BoL> Parse ` argv ` based on command-line interface described in ` doc ` . <EoL>
<BoL> Parse command-line argument vector . <EoL>
<BoL> atom : := ' ( ' expr ' ) ' | ' [ ' expr ' ] ' | 'options' | long | shorts | argument | command ; <EoL>
<BoL> expr : := seq ( '| ' seq ) * ; <EoL>
<BoL> long : := ' -- ' chars [ ( ' ' | '= ' ) chars ] ; <EoL>
<BoL> seq : := ( atom [ ' ... ' ] ) * ; <EoL>
<BoL> shorts : := '- ' ( chars ) * [ [ ' ' ] chars ] ; <EoL>
<BoL> Transforms required by this class . Override in subclasses . <EoL>
<BoL> Is ` format ` supported by this component ? <EoL>
<BoL> Stands for 'qualified name ' , a utility function to turn a namespace prefixed tag name into a Clark-notation qualified tag name for lxml . For example , `` qn ( ' p : cSld ' ) `` returns `` ' { http : //schemas ... /main } cSld ' `` . Source : https : //github.com/python-openxml/python-docx/ <EoL>
<BoL> A string representing the textual content of this run , with content child elements like `` < w : tab/ > `` translated to their Python equivalent . Adapted from : https : //github.com/python-openxml/python-docx/ <EoL>
<BoL> Return a : class : ` .CachedValue ` given a value . <EoL>
<BoL> Like invalidate , but regenerates the value instead <EoL>
<BoL> Configure from a configuration dictionary and a prefix . <EoL>
<BoL> Remove a value from the cache . <EoL>
<BoL> Remove multiple values from the cache . <EoL>
<BoL> Return a value from the cache , based on the given key . <EoL>
<BoL> Return multiple values from the cache , based on the given keys . <EoL>
<BoL> Invalidate this : class : ` .CacheRegion ` . <EoL>
<BoL> Place a new value in the cache under the given key . <EoL>
<BoL> Place new values in the cache under the given keys . <EoL>
<BoL> Takes a ProxyBackend instance or class and wraps the attached backend . <EoL>
<BoL> Construct a new : class : ` .CacheBackend ` . <EoL>
<BoL> Delete a value from the cache . <EoL>
<BoL> Delete multiple values from the cache . <EoL>
<BoL> Retrieve a value from the cache . <EoL>
<BoL> Retrieve multiple values from the cache . <EoL>
<BoL> Return an optional mutexing object for the given key . <EoL>
<BoL> Set a value in the cache . <EoL>
<BoL> Set multiple values in the cache . <EoL>
<BoL> Ensure __repr__ is a consistent value in case NoValue is used to fill another cache key . <EoL>
<BoL> Instantiate a new : class : ` .CacheRegion ` . <EoL>
<BoL> Take a backend as an argument and setup the self.proxied property . Return an object that be used as a backend by a : class : ` .CacheRegion ` object . <EoL>
<BoL> Return true if the creation function has proceeded at least once . <EoL>
<BoL> Return true if the expiration time is reached , or no value is available . <EoL>
<BoL> Create a new : class : ` .NameRegistry ` . <EoL>
<BoL> Get and possibly create the value . <EoL>
<BoL> Region invalidation . <EoL>
<BoL> Check timestamp to determine if it was hard invalidated . <EoL>
<BoL> Check timestamp to determine if it was invalidated . <EoL>
<BoL> Check timestamp to determine if it was soft invalidated . <EoL>
<BoL> Indicate the region was invalidated in hard mode . <EoL>
<BoL> Indicate the region was invalidated in soft mode . <EoL>
<BoL> Return a function that generates a string key , based on a given function as well as arguments to the returned function itself . <EoL>
<BoL> Return a function that generates a string key , based on a given function as well as arguments to the returned function itself . <EoL>
<BoL> a key mangler that mangles if the length of the key is past a certain threshold . <EoL>
<BoL> a SHA1 key mangler . <EoL>
<BoL> Coerce to a list . <EoL>
<BoL> Prepare keyword arguments ( targets , dependencies , changed , cmd line options ) Inspect python callable and add missing arguments : - that the callable expects - have not been passed ( as a regular arg or as keyword arg ) - are available internally through the task object <EoL>
<BoL> Reads 'input_ ' until process is terminated . Writes 'input_ ' content to 'capture ' ( string ) and 'realtime ' stream <EoL>
<BoL> Execute command action <EoL>
<BoL> Expand action using task meta informations if action is a string . Convert ` Path ` elements to ` str ` if action is a list . @ returns : string - > expanded string if action is a string list - string - > expanded list of command elements <EoL>
<BoL> Construct a PurePath from one or several strings and or existing PurePath objects . The strings and path objects are combined so as to yield a canonicalized path , which is incorporated into the new PurePath object . <EoL>
<BoL> Execute command action <EoL>
<BoL> eturn full exception description ( includes traceback ) <EoL>
<BoL> get Exception name <EoL>
<BoL> @ param writers - file stream like objects <EoL>
<BoL> adds a stream to the list of writers @ param isatty : ( bool ) if specified overwrites real isatty from stream <EoL>
<BoL> flush all streams <EoL>
<BoL> write 'text ' to all streams <EoL>
<BoL> Create action using proper constructor based on the parameter type <EoL>
<BoL> eturn a list with ( callable , *args , **kwargs ) ref can be a simple callable or a tuple <EoL>
<BoL> get all sub-commands : return dict : name - Command class <EoL>
<BoL> Notice for application subclassing DoitMain with old API <EoL>
<BoL> ead config from INI files <EoL>
<BoL> print doit version ( includes path location ) <EoL>
<BoL> process cmd line set `` global '' variables/parameters return list of args without processed variables <EoL>
<BoL> entry point for all commands <EoL>
<BoL> load task from a module or dict with module members <EoL>
<BoL> un doit using task_creators <EoL>
<BoL> check if watched files was modified since execution started <EoL>
<BoL> to be subclassed - actual command implementation <EoL>
<BoL> find all file deps @ param tasks ( dict ) @ param sel_tasks ( list - str ) <EoL>
<BoL> eturn task loader : param task_loader : a TaskLoader class : param cmds : dict of available commands <EoL>
<BoL> un callback if any after task execution <EoL>
<BoL> check if this version of doit satisfy minimum required version Minimum version specified by configuration on dodo . <EoL>
<BoL> loop executing tasks until process is interrupted <EoL>
<BoL> eturn PluginDict of DB backends , including core and plugins <EoL>
<BoL> eturn checker class to be used by dep_manage <EoL>
<BoL> get command name as used from command line <EoL>
<BoL> from base class - merge base_options , loader_options and cmd_options <EoL>
<BoL> eturn help text <EoL>
<BoL> helper . just parse parameters and execute command <EoL>
<BoL> Run tasks and wait for file system event <EoL>
<BoL> eturn list with long options for getopt <EoL>
<BoL> eturn tuple - CmdOption from matching opt_str . or None - ( bool ) matched inverse <EoL>
<BoL> eturn string with short options for getopt <EoL>
<BoL> overwrite self.options default values <EoL>
<BoL> parse arguments into options ( params ) and positional arguments <EoL>
<BoL> load dodo.py , set attributes and call self._execute <EoL>
<BoL> @ param file_list ( list-str ) : files to be watched <EoL>
<BoL> calls platform specific handle <EoL>
<BoL> loop implementation for darwin platform <EoL>
<BoL> loop implementation for linux platform <EoL>
<BoL> this should be sub-classed <EoL>
<BoL> Infinite loop watching for file modifications @ loop_callback : used to stop loop on unittests <EoL>
<BoL> eturn dict of all available reporters <EoL>
<BoL> Run command with arguments . Wait for command to complete or timeout , then return the returncode attribute . <EoL>
<BoL> iterator of select_tasks and its dependencies <EoL>
<BoL> print using a 2-columns format <EoL>
<BoL> eturn string with help for option choices <EoL>
<BoL> eturn list of string of option 's help doc <EoL>
<BoL> eturn string of option 's short and long name i.e . : -f ARG , -- file=ARG <EoL>
<BoL> set default value , value is already the expected type <EoL>
<BoL> convert string to boolean <EoL>
<BoL> convert string value to option type value <EoL>
<BoL> aise error is value is not a valid choice <EoL>
<BoL> configure command <EoL>
<BoL> execute command : param opt_values : ( dict ) with cmd_options values : param pos_args : ( list ) of cmd-line positional arguments <EoL>
<BoL> @ reutrn list of CmdOption <EoL>
<BoL> Open/create a DB file <EoL>
<BoL> should be just : : return key in self._dbm <EoL>
<BoL> save/close DBM file <EoL>
<BoL> Get value stored in the DB . <EoL>
<BoL> @ return bool if task_id is in DB <EoL>
<BoL> emove saved dependencies from DB for taskId <EoL>
<BoL> emove saved dependencies from DB for all tasks <EoL>
<BoL> Store value in the DB . <EoL>
<BoL> Write DB in file <EoL>
<BoL> get the result saved from a task @ return dict or md5sum <EoL>
<BoL> Check if task is up to date . set task.dep_changed <EoL>
<BoL> get saved value from task @ param task_id ( str ) @ param key_name ( str ) : key result dict of the value <EoL>
<BoL> get all saved values from a task @ return dict <EoL>
<BoL> mark task to be ignored <EoL>
<BoL> emove saved info from task <EoL>
<BoL> save info after a task is successfully executed <EoL>
<BoL> check if task is marked to be ignored <EoL>
<BoL> Open/create a DB file <EoL>
<BoL> load db content from file <EoL>
<BoL> save DB content in file <EoL>
<BoL> Get value stored in the DB . <EoL>
<BoL> @ return bool if task_id is in DB <EoL>
<BoL> emove saved dependencies from DB for taskId <EoL>
<BoL> emove saved dependencies from DB for all tasks <EoL>
<BoL> Store value in the DB . <EoL>
<BoL> ead all items from a ConfigParser section containing plugins <EoL>
<BoL> load and return a single plugin <EoL>
<BoL> eturn a standard dict with all plugins loaded <EoL>
<BoL> Open/create a sqlite3 DB fileconvert row to dictcreate table if not exists doit ( task_id text not null primary key , task_data json ) ; <EoL>
<BoL> save/close sqlite3 DB file <EoL>
<BoL> Get value stored in the DB . <EoL>
<BoL> emove saved dependencies from DB for taskId <EoL>
<BoL> emove saved dependencies from DB for all task <EoL>
<BoL> Store value in the DB . <EoL>
<BoL> load tasks and DOIT_CONFIG <EoL>
<BoL> check task exist <EoL>
<BoL> find all subtasks for a given task @ param tasks ( dict - Task ) @ param task ( Task ) <EoL>
<BoL> convert a version string or tuple into a 3-element tuple with ints Any part that is not a number ( dev0 , a2 , b4 ) will be converted to -1 <EoL>
<BoL> ensure task clean-action is executed only once <EoL>
<BoL> build nodes with sub-tasks but no other task_dep <EoL>
<BoL> build node including task_dep 's <EoL>
<BoL> eturn list of tasks in the order they should be ` clean ` <EoL>
<BoL> check if user input task_dep or setup_task that doesnt exist <EoL>
<BoL> Select tasks specified by filter . <EoL>
<BoL> get list of tasks that match pattern <EoL>
<BoL> process cmd line task options [ task_name [ -task_opt [ opt_value ] ] ... ] ... add task to list ` filter_list ` and set task.options from params @ return list - str : of elements not yet <EoL>
<BoL> add implicit task_dep for ` task ` for newly added ` file_dep ` <EoL>
<BoL> @ param task_selection : list of strings with task names/params @ return ( list - string ) each element is the name of a task <EoL>
<BoL> set/add task_dep based on file_dep on a target from another task @ param targets : ( dict ) fileName - > task_name @ param task_list : ( list - Task ) task with newly added file_dep <EoL>
<BoL> eturn a TaskDispatcher generator <EoL>
<BoL> eturn case item for completion of specific sub-command <EoL>
<BoL> create a text line for completion of a command arg <EoL>
<BoL> eturn list of arguments lines for zsh completion <EoL>
<BoL> create the content for `` case '' statement with all command options ( { cmd_name } ) _command_args= ( { args_body } `` ) ; ; <EoL>
<BoL> Guess which db package to use to open a db file . <EoL>
<BoL> emove saved data successful runs from DB <EoL>
<BoL> : param cmds : PluginDict <EoL>
<BoL> execute help for specific task <EoL>
<BoL> execute cmd 'help ' <EoL>
<BoL> print help for 'task ' usage <EoL>
<BoL> print doit `` usage '' ( basic help ) instructions <EoL>
<BoL> mark tasks to be ignored @ param ignore_tasks : ( list - str ) tasks to be ignored . <EoL>
<BoL> eturn string with description of reason task is not up-to-date <EoL>
<BoL> list of tasks <EoL>
<BoL> eturn list of task based on selected 'filter_tasks ' <EoL>
<BoL> print a single task <EoL>
<BoL> Returns a queue object <EoL>
<BoL> get values from other tasksget single value or dict from task 's saved values <EoL>
<BoL> handle all task failures/errors <EoL>
<BoL> process result received from sub-process <EoL>
<BoL> create and start sub-processes @ param job_q : ( multiprocessing.Queue ) tasks to be executed @ param result_q : ( multiprocessing.Queue ) collect task results @ return list of Process <EoL>
<BoL> initialization for run_tasks <EoL>
<BoL> check if multiprocessing module is available <EoL>
<BoL> execute task 's actions <EoL>
<BoL> executed on child processes @ param job_q : task queue , * None elements indicate process can terminate * JobHold indicate process should wait for next task * JobTask / JobTaskPickle task to be executed <EoL>
<BoL> finish running tasks <EoL>
<BoL> get next task to be dispatched to sub-process <EoL>
<BoL> handles result <EoL>
<BoL> entry point to run tasks @ ivar task_dispatcher ( TaskDispatcher ) <EoL>
<BoL> controls subprocesses task dispatching and result collection <EoL>
<BoL> Returns bool , task should be executed * side-effect : set task.options <EoL>
<BoL> un teardown from all tasks <EoL>
<BoL> This will actually run/execute the tasks . <EoL>
<BoL> eturn tuple ( out , err ) streams to be used <EoL>
<BoL> eturn effective verbosity used on task <EoL>
<BoL> 1 ) wrap the original action with strace and save output in file 2 ) add a second task that will generate the report from temp file <EoL>
<BoL> emove existing output file if any and do sanity checking <EoL>
<BoL> wrap task actions into strace command <EoL>
<BoL> emove attributes that never used on process that only execute tasks <EoL>
<BoL> used on default sorting of tasks ( alphabetically by name ) <EoL>
<BoL> calc_dep input <EoL>
<BoL> put input into file_dep <EoL>
<BoL> convert task_dep input into actaul task_dep and wild_dep <EoL>
<BoL> add/extend uptodate values <EoL>
<BoL> init for dependency related attributes <EoL>
<BoL> process task `` doc '' attribute <EoL>
<BoL> task getargs attribute define implicit task dependencies <EoL>
<BoL> convert valid targets to ` str ` <EoL>
<BoL> wrap uptodate callables <EoL>
<BoL> check input task attribute is correct type/value <EoL>
<BoL> Execute task 's clean @ ivar outstream : 'write ' output into this stream @ ivar dryrun ( bool ) : if True clean tasks are not executed ( just print out what would be executed ) <EoL>
<BoL> Executes the task . @ return failure : see CmdAction.execute <EoL>
<BoL> Executes task 's teardown @ return failure : see CmdAction.execute <EoL>
<BoL> Put default values on options . <EoL>
<BoL> emove attributes that might contain unpickleble content mostly probably closures <EoL>
<BoL> un value_savers updating self.values <EoL>
<BoL> String representation on output . <EoL>
<BoL> expand all kinds of dep input <EoL>
<BoL> update self with data from pickled Task <EoL>
<BoL> ead file witn strace output , return dict with deps , targets <EoL>
<BoL> overwrite to keep track of _non_default_keys <EoL>
<BoL> add default values from another dict @ param source : ( dict ) <EoL>
<BoL> set default value for given key <EoL>
<BoL> like dict.update but do not update items that have a non-default value <EoL>
<BoL> eturn platform.system platform module has many regexp , so importing it is slow ... import only if required <EoL>
<BoL> eset task & generator after task is created by its own ` loader ` <EoL>
<BoL> get node 's next step <EoL>
<BoL> wrap generato <EoL>
<BoL> eturn generator dispatching tasks <EoL>
<BoL> eturn ExecNode for task_name if not created yet <EoL>
<BoL> get ExecNode from ( in order ) : .1 ready .2 tasks_to_run ( list in reverse order ) <EoL>
<BoL> updates node.wait_run @ param node ( ExecNode ) @ param task_list ( list - str ) tasks that node should wait for @ param calc ( bool ) task_list is for calc_dep <EoL>
<BoL> updates 'ready ' and 'waiting ' queues after processed @ param processed ( ExecNode ) or None <EoL>
<BoL> Create tasks from a task generator result . <EoL>
<BoL> decorator for a generator to discard/filter-out None valueswrap generato <EoL>
<BoL> Annotate a task-creator function with delayed loader info <EoL>
<BoL> sets state and append reason for not being up-to-date : return boolean : processing should be interrupted <EoL>
<BoL> eturn str with error message <EoL>
<BoL> sets state and reason for not being up-to-date : return boolean : processing should be interrupted <EoL>
<BoL> Check if file in file_path is modified from previous `` state '' . <EoL>
<BoL> Compute the state of a task after it has been successfully executed . <EoL>
<BoL> Check if file in file_path is modified from previous `` state '' . <EoL>
<BoL> @ returns float : mtime for file ` dep ` <EoL>
<BoL> @ param <EoL>
<BoL> Calculate the md5 sum from file content . <EoL>
<BoL> eturn md5 from string or unicode <EoL>
<BoL> working-directory from where the doit command was invoked on shell <EoL>
<BoL> Defines a `` % doit `` magic function [ 1 ] that discovers and execute tasks from IPython 's interactive variables ( global namespace ) .Run *doit* with ` task_creators ` from all interactive variables ( IPython 's global namespace ) . <EoL>
<BoL> generate a single task from a dict returned by a task generato <EoL>
<BoL> generate a single task from a dict yielded by task generator <EoL>
<BoL> get functions defined in the ` namespace ` and select the task-creators <EoL>
<BoL> Create a task instance from dictionary . <EoL>
<BoL> eturn only values from generators if any generator yields another generator it is recursively called <EoL>
<BoL> Find python module defining tasks , it is called `` dodo '' file.aise exception if file on given path doesnt exist <EoL>
<BoL> @ param dodo_module ( dict ) dict with module members <EoL>
<BoL> Find task-creators and create tasks <EoL>
<BoL> : param category str : plugin category name : param name str : plugin name ( as used by doit ) : param location str : python object location as < module > : < attr > <EoL>
<BoL> eturn obj , get from cache or load <EoL>
<BoL> load/import reference to obj from named module/obj <EoL>
<BoL> called when execution finishes with a failure <EoL>
<BoL> called when execution finishes successfully <EoL>
<BoL> error during cleanup <EoL>
<BoL> called when finished running all tasks <EoL>
<BoL> called when execution starts <EoL>
<BoL> called when task is selected ( check if up-to-date ) <EoL>
<BoL> called just after tasks have been loaded before execution starts <EoL>
<BoL> error from doit ( not from a task execution ) <EoL>
<BoL> skipped ignored task <EoL>
<BoL> skipped up-to-date task <EoL>
<BoL> called when starts the execution of teardown action <EoL>
<BoL> skipped ignored task <EoL>
<BoL> skipped up-to-date task <EoL>
<BoL> called when execution finishes with a failure <EoL>
<BoL> called when execution finishes successfully <EoL>
<BoL> error during cleanup <EoL>
<BoL> called when finished running all tasks <EoL>
<BoL> called when execution starts <EoL>
<BoL> called when task is selected ( check if up-to-date ) <EoL>
<BoL> error from doit ( not from a task execution ) <EoL>
<BoL> skipped ignored task <EoL>
<BoL> skipped up-to-date task <EoL>
<BoL> called when starts the execution of teardown action <EoL>
<BoL> called when task finishes its execution <EoL>
<BoL> called when task starts its execution <EoL>
<BoL> convert result data to dictionary <EoL>
<BoL> over-write base to do nothing <EoL>
<BoL> substitute any reporter method with a dispatching method <EoL>
<BoL> ignore this on MReporte <EoL>
<BoL> just return passed parameter - make a callable from any value <EoL>
<BoL> emove all targets from a task <EoL>
<BoL> extract first non-blank line from text , to extract docstring title <EoL>
<BoL> eturn True if result is the same as last run <EoL>
<BoL> : param setup_dep : controls if dependent task is task_dep or setup <EoL>
<BoL> get result from a group task the result is the combination of results of all sub-tasks <EoL>
<BoL> get result from a single task <EoL>
<BoL> to be called by doit when create the task <EoL>
<BoL> egister action that saves the timestamp and check current timestamp <EoL>
<BoL> initialize the callable <EoL>
<BoL> eturn True if config values are UNCHANGED <EoL>
<BoL> create a folder in the given path if it doesnt exist yet . <EoL>
<BoL> execute task just once used when user manually manages a dependency <EoL>
<BoL> start debugger , make sure stdout shows pdb output . output is not restored . <EoL>
<BoL> eturn task name task actions <EoL>
<BoL> Run an interactive session . <EoL>
<BoL> Push a line to the interpreter . <EoL>
<BoL> Write a prompt and read a line . <EoL>
<BoL> Reset the input buffer . <EoL>
<BoL> Automatically type and execute all commands . <EoL>
<BoL> Closely emulate the interactive Python console . <EoL>
<BoL> Patched click echo function . <EoL>
<BoL> Echo each character in `` text `` as keyboard characters are pressed . Characters are echo 'd `` speed `` characters at a time . <EoL>
<BoL> Enables terminal raw mode during the context . <EoL>
<BoL> Constructor . <EoL>
<BoL> Creates a fresh class clone per instance . This is required due to ad-hoc stub properties are class attributes <EoL>
<BoL> Matches if object is an instance of , or inherits from , a given type . <EoL>
<BoL> Generates a description of the object . <EoL>
<BoL> Decorates another matcher , or provides shortcuts to the frequently used `` is ( equal_to ( x ) ) `` and `` is ( instance_of ( x ) ) `` . <EoL>
<BoL> Generates a description of why the matcher has not accepted the item . <EoL>
<BoL> Evaluates the matcher for argument item . <EoL>
<BoL> Matches if object is greater than or equal to a given value . <EoL>
<BoL> Matches if object is less than or equal to a given value . <EoL>
<BoL> Poll the given matcher each 'delta ' seconds until 'matcher' matches 'actual ' or 'timeout ' is reached . <EoL>
<BoL> Get the mapping of arguments to values . <EoL>
<BoL> Parse a duration string to a datetime.timedelta <EoL>
<BoL> Format a datetime.timedelta to a duration string <EoL>
<BoL> kwargs holds initial dynaconf configuration <EoL>
<BoL> Allow direct call of settings ( 'val ' ) in place of settings.get ( 'val ' ) <EoL>
<BoL> Allow getting keys from self.store using dot notation <EoL>
<BoL> handle initialization for the customization cases <EoL>
<BoL> Initial setup , run once . <EoL>
<BoL> Allows user to reconfigure settings object passing a new settings module or separated kwargs <EoL>
<BoL> Raise ValidationError if invalid <EoL>
<BoL> Due to the way pickling works in python 3 , we need to make sure the box config is created as early as possible . <EoL>
<BoL> Perform value lookup for all items in current dictionary , generating all sub Box objects , while also running ` box_it_up ` on any of those sub box objects . <EoL>
<BoL> Turn the Box and sub Boxes back into a native python dictionary . <EoL>
<BoL> Must be implemented by subclasses to initialize the wrapped object . <EoL>
<BoL> Allow direct call of ` settings ( 'val ' ) ` in place of ` settings.get ( 'val ' ) ` <EoL>
<BoL> stores reference in ` _deleted ` for proper error management <EoL>
<BoL> Allow getting variables as dict keys ` settings [ 'KEY ' ] ` <EoL>
<BoL> Execute loaders and custom initialization <EoL>
<BoL> Allow ` settings.FOO = 'value ' ` and deal with ` _deleted ` <EoL>
<BoL> Allow ` settings [ 'KEY ' ] = 'value ' ` <EoL>
<BoL> Perform dotted key lookups and keep track of where we are . <EoL>
<BoL> Partial method for get with bool cast <EoL>
<BoL> Partial method for get with float cast <EoL>
<BoL> Partial method for get with int cast <EoL>
<BoL> Partial method for get with json cast <EoL>
<BoL> Clean all loaded values to reload when switching envs <EoL>
<BoL> Execute all internal and registered loaders <EoL>
<BoL> Check if key exists <EoL>
<BoL> Return True if env variable is exported <EoL>
<BoL> Feature flagging system write flags to redis $ dynaconf write redis -s DASHBOARD=1 -e premiumuser meaning : Any premium user has DASHBOARD feature enabled <EoL>
<BoL> this context manager force the load of a key direct from the store : : <EoL>
<BoL> Get value from environment variable using os.environ.get <EoL>
<BoL> This is a shortcut to ` get ( key , fresh=True ) ` . always reload from loaders store before getting the var . <EoL>
<BoL> Redirects to store object <EoL>
<BoL> This is deprecated , kept for compat <EoL>
<BoL> Used to interactively change the env Example of settings.toml : : <EoL>
<BoL> Path containing PROJECT_ROOT_FOR_DYNACONF <EoL>
<BoL> Clean end Execute all loaders <EoL>
<BoL> Unset on all references <EoL>
<BoL> Unset based on a list of keys <EoL>
<BoL> This context manager allows the contextual use of a different env Example of settings.toml : : <EoL>
<BoL> Redirects to store object <EoL>
<BoL> To keep backwards compat change the kwargs to new names <EoL>
<BoL> Loads default settings and check if there are overridings exported as environment variables <EoL>
<BoL> Enable external service loaders like ` VAULT_ ` and ` REDIS_ ` looks forenv variables like ` REDIS_ENABLED_FOR_DYNACONF ` <EoL>
<BoL> Recursively merge two data structures <EoL>
<BoL> Get or create inner logge <EoL>
<BoL> First try to get value from dynaconf then from Flask <EoL>
<BoL> Flask templates always expects a None when key is not found in config <EoL>
<BoL> perform the initial load <EoL>
<BoL> Loads a configuration from an environment variable pointing to a configuration file . This is basically just a shortcut with nicer error messages for this line of code : : <EoL>
<BoL> Updates the values in the config from a JSON file . This function behaves as if the JSON object was a dictionary and passed to the : meth : ` from_mapping ` function . <EoL>
<BoL> Updates the config like : meth : ` update ` ignoring items with non-upper keys . <EoL>
<BoL> Updates the values from the given object . An object can be of one of the following two types : <EoL>
<BoL> Updates the values in the config from a Python file . This function behaves as if the file was imported as module with the : meth : ` from_object ` function . <EoL>
<BoL> Gets config from dynaconf variables if variables does not exists in dynaconf try getting from ` app.config ` to support runtime settings . <EoL>
<BoL> Returns a dictionary containing a subset of configuration options that match the specified namespace/prefix . Example usage : : <EoL>
<BoL> Search in increasingly higher folders for the given file <EoL>
<BoL> Reads and loads in to ` self.obj ` a single key or all keys from source <EoL>
<BoL> Reads and loads in to `` obj '' a single key or all keys from source file . <EoL>
<BoL> Write data to a settings file . <EoL>
<BoL> Reads and loads in to `` obj '' a single key or all keys from source file . <EoL>
<BoL> Write data to a settings file . <EoL>
<BoL> If settings_module is a filename path import it . <EoL>
<BoL> Tries to import a python module <EoL>
<BoL> Write data to a settings file . <EoL>
<BoL> Reads and loads in to `` obj '' a single key or all keys from source file . <EoL>
<BoL> Write data to a settings file . <EoL>
<BoL> Reads and loads in to `` obj '' a single key or all keys from source file . <EoL>
<BoL> Write data to a settings file . <EoL>
<BoL> Respond to boolean duck-typing . <EoL>
<BoL> Equality check for a singleton . <EoL>
<BoL> Unambiguously identify this string-based representation of Missing , used as a singleton . <EoL>
<BoL> Yield directories starting from the given directory up to the root <EoL>
<BoL> Pass in a callable that returns the object to be wrapped . <EoL>
<BoL> A decorator that allows a function to be called with one or more lazy arguments . If none of the args are lazy , the function is evaluated immediately , otherwise a __proxy__ is returned that will evaluate the function when needed . <EoL>
<BoL> Turns any callable into a lazy evaluated callable . <EoL>
<BoL> Splits the values into two sets , based on the return value of the function ( True/False ) . e.g . : <EoL>
<BoL> @ int @ bool @ float @ json ( for lists and dicts ) strings does not need converters <EoL>
<BoL> Uses TOML syntax to parse data <EoL>
<BoL> Equal <EoL>
<BoL> Greater than <EoL>
<BoL> Greater than or equal <EoL>
<BoL> Identity check using ID <EoL>
<BoL> Existence <EoL>
<BoL> Inexistence <EoL>
<BoL> Type check <EoL>
<BoL> Lower than <EoL>
<BoL> Lower than or equal <EoL>
<BoL> Not equal <EoL>
<BoL> Create a new read capacity from a response <EoL>
<BoL> Create a new write capacity from a response <EoL>
<BoL> Raise this exception with the original traceback <EoL>
<BoL> Decode a dynamo value into a python value <EoL>
<BoL> Run the decoder on a dict of values <EoL>
<BoL> Encode a value into the Dynamo dict format <EoL>
<BoL> Run the encoder on a dict of values <EoL>
<BoL> Same as encode_keys but a no-op if already in Dynamo format <EoL>
<BoL> Run the encoder on a value <EoL>
<BoL> Set an encoder method for a data type <EoL>
<BoL> Do a scan or query and aggregate the results into a Count <EoL>
<BoL> Get the value for ReturnConsumedCapacity from provided value <EoL>
<BoL> Add a RateLimit to the connection <EoL>
<BoL> Make a request to DynamoDB using the raw botocore API <EoL>
<BoL> Remove all hooks from all events <EoL>
<BoL> Delete a table <EoL>
<BoL> Get the details about a table <EoL>
<BoL> Sleep with exponential backoff <EoL>
<BoL> Context manager that applies a RateLimit to the connection <EoL>
<BoL> List all tables . <EoL>
<BoL> Remove a RateLimit from the connection <EoL>
<BoL> Subscribe a callback to an event <EoL>
<BoL> Unsubscribe a hook from an event <EoL>
<BoL> Construct the schema definition for this table <EoL>
<BoL> Returns the attribute definition <EoL>
<BoL> Get the schema definition with this field as a hash key <EoL>
<BoL> Get the schema definition with this field as a range key <EoL>
<BoL> Create an index that projects all attributes <EoL>
<BoL> Create an index from returned Dynamo data <EoL>
<BoL> Create an index that projects only key attributes <EoL>
<BoL> Construct the schema definition for this index <EoL>
<BoL> Create a new index <EoL>
<BoL> Delete an index <EoL>
<BoL> Get all attrs necessary for the update ( empty unless Create ) <EoL>
<BoL> Get the serialized Dynamo format for the update <EoL>
<BoL> Update the throughput on the index <EoL>
<BoL> Shortcut for creating an ADD update <EoL>
<BoL> Get the attributes for the update <EoL>
<BoL> Shortcut for creating a DELETE update <EoL>
<BoL> Get the expected values for the update <EoL>
<BoL> Shortcut for creating a PUT update <EoL>
<BoL> Apply the filter and item_limit , and return True to accept <EoL>
<BoL> Return a copy of the limit <EoL>
<BoL> Called after a fetch . Updates the ScannedCount <EoL>
<BoL> Set the Limit parameter into the request args <EoL>
<BoL> Create an index that projects all attributes <EoL>
<BoL> Create an index from returned Dynamo data <EoL>
<BoL> Create an index that projects key attributes plus some others <EoL>
<BoL> Create an index that projects only key attributes <EoL>
<BoL> Create the index schema <EoL>
<BoL> Check the consumed capacity against the limit and sleep <EoL>
<BoL> Getter for a consumed capacity storage dict <EoL>
<BoL> Create a Table from returned Dynamo data <EoL>
<BoL> Create Throughput from returned Dynamo data <EoL>
<BoL> Construct the schema definition for the throughput <EoL>
<BoL> Make a BatchWriteItem call to Dynamo <EoL>
<BoL> Perform a batch write and handle the response <EoL>
<BoL> Delete an item <EoL>
<BoL> Flush pending items to Dynamo <EoL>
<BoL> Write an item ( will overwrite existing data ) <EoL>
<BoL> Resend all unprocessed items <EoL>
<BoL> True if a flush is needed <EoL>
<BoL> Construct index capacity map from a request fragment <EoL>
<BoL> Factory method for ConsumedCapacity from a response object <EoL>
<BoL> Encode an item write command <EoL>
<BoL> Encode an item delete command <EoL>
<BoL> Encode an item put command <EoL>
<BoL> Encode query constraints in Dynamo format <EoL>
<BoL> Check if a value is equivalent to null in Dynamo <EoL>
<BoL> Factory method <EoL>
<BoL> Update the consumed capacity metrics <EoL>
<BoL> Construct the kwargs to pass to batch_get_item <EoL>
<BoL> Fetch a set of items from their keys <EoL>
<BoL> Fetch more results from Dynamo <EoL>
<BoL> Build the Expected parameters from a dict <EoL>
<BoL> Build ExpresionAttributeValues from a value or kwargs <EoL>
<BoL> Translate a botocore.exceptions.ClientError into a dynamo3 error <EoL>
<BoL> Convert snake_case to CamelCase <EoL>
<BoL> Add a timestamp and date to the data <EoL>
<BoL> Fetch additional results from the server and return an iterator <EoL>
<BoL> Merge two dicts of addable values <EoL>
<BoL> Encode a dict for the DynamoDB format <EoL>
<BoL> Encode a list for the DynamoDB format <EoL>
<BoL> Encode a set for the DynamoDB format <EoL>
<BoL> Convert a float to a 38-precision Decimal <EoL>
<BoL> Returns True if the value is a Dynamo-formatted value <EoL>
<BoL> hashfunc= should behave like hashlib.sha1 . <EoL>
<BoL> Calculates ' k ' from data itself , removing the need for strong random generator and producing deterministic ( reproducible ) signatures . See RFC 6979 for more details . <EoL>
<BoL> public_key is of class Public_key ; secret_multiplier is a large integer . <EoL>
<BoL> Return a signature for the provided hash , using the provided random nonce . <EoL>
<BoL> generator is the Point that generates the group , point is the Point that defines the public key . <EoL>
<BoL> Verify that signature is a valid signature of hash . Return True if the signature is valid . <EoL>
<BoL> Convert an integer into a string of bytes , compute its SHA-1 hash , and convert the result to an integer . <EoL>
<BoL> Convert integer x into a string of bytes , as per X9.62 . <EoL>
<BoL> Is ( x , y ) a valid public key based on the specified generator ? <EoL>
<BoL> Convert a string of bytes into an integer , as per X9.62 . <EoL>
<BoL> The curve of points satisfying y^2 = x^3 + a*x + b ( mod p ) . <EoL>
<BoL> Is the point ( x , y ) on this curve ? <EoL>
<BoL> Add one point to another point . <EoL>
<BoL> Return True if the points are identical , False otherwise . <EoL>
<BoL> curve , x , y , order ; order ( optional ) is the order of this point . <EoL>
<BoL> Multiply a point by an integer . <EoL>
<BoL> Multiply a point by an integer . <EoL>
<BoL> Return a new point that is twice the old . <EoL>
<BoL> We expect that on curve c , ( x1 , y1 ) + ( x2 , y2 ) = ( x3 , y3 ) .We expect that on curve c , 2* ( x1 , y1 ) = ( x3 , y3 ) .We expect that on curve c , 2*INFINITY = INFINITY.We expect that on curve c , m* ( x1 , y1 ) = ( x3 , y3 ) . <EoL>
<BoL> Return a random integer k such that 1 < = k < order , uniformly distributed across that range . <EoL>
<BoL> Return Carmichael function of n . <EoL>
<BoL> Return the Carmichael function of a number that is represented as a list of ( prime , exponent ) pairs . <EoL>
<BoL> Carmichael function of the given power of the given prime . <EoL>
<BoL> Decompose n into a list of ( prime , exponent ) pairs . <EoL>
<BoL> Greatest common divisor . <EoL>
<BoL> Greatest common divisor using Euclid 's algorithm . <EoL>
<BoL> Inverse of a mod m . <EoL>
<BoL> Return True if x is prime , False otherwise . <EoL>
<BoL> Jacobi symbol <EoL>
<BoL> Return the order of x in the multiplicative group mod m ' , where m ' is the largest factor of m relatively prime to x . <EoL>
<BoL> Return the largest factor of a relatively prime to b . <EoL>
<BoL> Least common multiple . <EoL>
<BoL> Least common multiple of two integers . <EoL>
<BoL> Return the order of x in the multiplicative group mod m . <EoL>
<BoL> Return the Euler totient function of n . <EoL>
<BoL> Polynomial exponentiation modulo a polynomial over ints mod p . <EoL>
<BoL> Polynomial multiplication modulo a polynomial over ints mod p . <EoL>
<BoL> Reduce poly by polymod , integer arithmetic modulo p . <EoL>
<BoL> Modular square root of a , mod p , p prime . <EoL>
<BoL> order - order of the DSA generator used in the signature secexp - secure exponent ( private key ) in numeric form hash_func - reference to the same hash function used for generating hash data - hash in binary form of the signing data <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> This Python routine `` unpacks '' scipy sparse matrices G and A into the data structures that we need for calling ECOS ' csolve routine . <EoL>
<BoL> : arg host : hostname of the node ( default : localhost ) : arg port : port to use ( integer , default : 9200 ) : arg url_prefix : optional url prefix for elasticsearch : arg timeout : default timeout in seconds ( float , default : 10 ) <EoL>
<BoL> Locate appropriate exception and raise it . <EoL>
<BoL> Log an unsuccessful API call . <EoL>
<BoL> Log a successful API call . <EoL>
<BoL> Explicitly closes connections <EoL>
<BoL> Return a connection from the pool using the ` ConnectionSelector ` instance . <EoL>
<BoL> Mark the connection as dead ( failed ) . Remove it from the live pool and put it on a timeout . <EoL>
<BoL> Mark connection as healthy after a resurrection . Resets the fail counter for the connection . <EoL>
<BoL> Attempt to resurrect a connection from the dead pool . <EoL>
<BoL> : arg opts : dictionary of connection instances and their options <EoL>
<BoL> Select a connection from the given list . <EoL>
<BoL> : arg hosts : list of nodes we should connect to . <EoL>
<BoL> Perform many index/delete operations in a single API call . <EoL>
<BoL> Clear the scroll request created by specifying the scroll parameter to search . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html > ` _ <EoL>
<BoL> Execute a query and get the number of matches for that query . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-count.html > ` _ <EoL>
<BoL> Adds a typed JSON document in a specific index , making it searchable . Behind the scenes this method calls index ( ... , op_type='create ' ) ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html > ` _ <EoL>
<BoL> Delete a typed JSON document from a specific index based on its id . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html > ` _ <EoL>
<BoL> Delete all documents matching a query . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete-by-query.html > ` _ <EoL>
<BoL> Remove a stored script from elasticsearch . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html > ` _ <EoL>
<BoL> Returns a boolean indicating whether or not given document exists in Elasticsearch . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html > ` _ <EoL>
<BoL> The explain api computes a score explanation for a query and a specific document . This can give useful feedback whether a document matches or did n't match a specific query . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-explain.html > ` _ <EoL>
<BoL> The field capabilities API allows to retrieve the capabilities of fields among multiple indices . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-field-caps.html > ` _ <EoL>
<BoL> Get a typed JSON document from the index based on its id . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html > ` _ <EoL>
<BoL> Retrieve a script from the API . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html > ` _ <EoL>
<BoL> Get the source of a document by it 's index , type and id . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html > ` _ <EoL>
<BoL> Adds or updates a typed JSON document in a specific index , making it searchable . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html > ` _ <EoL>
<BoL> Get the basic info from the current cluster . ` < http : //www.elastic.co/guide/ > ` _ <EoL>
<BoL> Get multiple documents based on an index , type ( optional ) and ids . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-get.html > ` _ <EoL>
<BoL> Execute several search requests within the same API . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html > ` _ <EoL>
<BoL> The /_search/template endpoint allows to use the mustache language to pre render search requests , before they are executed and fill existing templates with template parameters . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html > ` _ <EoL>
<BoL> Multi termvectors API allows to get multiple termvectors based on an index , type and id . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-multi-termvectors.html > ` _ <EoL>
<BoL> Returns True if the cluster is up , False otherwise . ` < http : //www.elastic.co/guide/ > ` _ <EoL>
<BoL> Create a script in given language with specified ID . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html > ` _ <EoL>
<BoL> Reindex all documents from one index to another . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html > ` _ <EoL>
<BoL> Change the value of `` requests_per_second `` of a running `` reindex `` task . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-reindex.html > ` _ <EoL>
<BoL> ` < http : //www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-template.html > ` _ <EoL>
<BoL> Scroll a search request created by specifying the scroll parameter . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html > ` _ <EoL>
<BoL> Execute a search query and get back search hits that match the query . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-search.html > ` _ <EoL>
<BoL> The search shards api returns the indices and shards that a search request would be executed against . This can give useful feedback for working out issues or planning optimizations with routing and shard preferences . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-shards.html > ` _ <EoL>
<BoL> A query that accepts a query template and a map of key/value pairs to fill in template parameters . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html > ` _ <EoL>
<BoL> Returns information and statistics on terms in the fields of a particular document . <EoL>
<BoL> Update a document based on a script or partial data provided . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html > ` _ <EoL>
<BoL> Perform an update on all documents matching a query . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/docs-update-by-query.html > ` _ <EoL>
<BoL> Explicitly closes connections <EoL>
<BoL> Perform the request to get sniffins information . Returns a list of dictionaries ( one per node ) containing all the information from the cluster . <EoL>
<BoL> Create a new : class : ` ~elasticsearch.Connection ` instance and add it to the pool . <EoL>
<BoL> Explicitly closes connections <EoL>
<BoL> Retreive a : class : ` ~elasticsearch.Connection ` instance from the : class : ` ~elasticsearch.ConnectionPool ` instance . <EoL>
<BoL> Mark a connection as dead ( failed ) in the connection pool . If sniffing on failure is enabled this will initiate the sniffing process . <EoL>
<BoL> Perform the actual request . Retrieve a connection from the connection pool , pass all the information to it 's perform_request method and return the data . <EoL>
<BoL> Instantiate all the connections and create new connection pool to hold them . Tries to identify unchanged hosts and re-use existing : class : ` ~elasticsearch.Connection ` instances . <EoL>
<BoL> Obtain a list of nodes from the cluster and create a new connection pool using the information retrieved . <EoL>
<BoL> Explicitly closes connection <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-alias.html > ` _ <EoL>
<BoL> Allocation provides a snapshot of how shards have located around the cluster and the state of disk usage . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-allocation.html > ` _ <EoL>
<BoL> Count provides quick access to the document count of the entire cluster , or individual indices . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-count.html > ` _ <EoL>
<BoL> Shows information about currently loaded fielddata on a per-node basis . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-fielddata.html > ` _ <EoL>
<BoL> health is a terse , one-line representation of the same information from : meth : ` ~elasticsearch.client.cluster.ClusterClient.health ` API ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-health.html > ` _ <EoL>
<BoL> A simple help for the cat api . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat.html > ` _ <EoL>
<BoL> The indices command provides a cross-section of each index . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-indices.html > ` _ <EoL>
<BoL> Displays the master 's node ID , bound IP address , and node name . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-master.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodeattrs.html > ` _ <EoL>
<BoL> The nodes command shows the cluster topology . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-nodes.html > ` _ <EoL>
<BoL> pending_tasks provides the same information as the : meth : ` ~elasticsearch.client.cluster.ClusterClient.pending_tasks ` API in a convenient tabular format . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-pending-tasks.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-plugins.html > ` _ <EoL>
<BoL> recovery is a view of shard replication . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-recovery.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-repositories.html > ` _ <EoL>
<BoL> The segments command is the detailed view of Lucene segments per index . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-segments.html > ` _ <EoL>
<BoL> The shards command is the detailed view of what nodes contain which shards . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-shards.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-snapshots.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-templates.html > ` _ <EoL>
<BoL> Get information about thread pools . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cat-thread-pool.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-allocation-explain.html > ` _ <EoL>
<BoL> Get cluster settings . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html > ` _ <EoL>
<BoL> Get a very simple status on the health of the cluster . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-health.html > ` _ <EoL>
<BoL> The pending cluster tasks API returns a list of any cluster-level changes ( e.g . create index , update mapping , allocate or fail shard ) which have not yet been executed . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-pending.html > ` _ <EoL>
<BoL> Update cluster wide specific settings . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html > ` _ <EoL>
<BoL> Explicitly execute a cluster reroute allocation command including specific commands . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-reroute.html > ` _ <EoL>
<BoL> Get a comprehensive state information of the whole cluster . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-state.html > ` _ <EoL>
<BoL> The Cluster Stats API allows to retrieve statistics from a cluster wide perspective . The API returns basic index metrics and information about the current nodes that form the cluster . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-stats.html > ` _ <EoL>
<BoL> Perform the analysis process on a text and return the tokens breakdown of the text . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-analyze.html > ` _ <EoL>
<BoL> Clear either all caches or specific cached associated with one ore more indices . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-clearcache.html > ` _ <EoL>
<BoL> Close an index to remove it 's overhead from the cluster . Closed index is blocked for read/write operations . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html > ` _ <EoL>
<BoL> Create an index in Elasticsearch . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html > ` _ <EoL>
<BoL> Delete an index in Elasticsearch ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-delete-index.html > ` _ <EoL>
<BoL> Delete specific alias . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html > ` _ <EoL>
<BoL> Delete an index template by its name . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html > ` _ <EoL>
<BoL> Return a boolean indicating whether given index exists . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-exists.html > ` _ <EoL>
<BoL> Return a boolean indicating whether given alias exists . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html > ` _ <EoL>
<BoL> Return a boolean indicating whether given template exists . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html > ` _ <EoL>
<BoL> Check if a type/types exists in an index/indices . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-types-exists.html > ` _ <EoL>
<BoL> Explicitly flush one or more indices . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-flush.html > ` _ <EoL>
<BoL> Perform a normal flush , then add a generated unique marker ( sync_id ) to all shards . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-synced-flush.html > ` _ <EoL>
<BoL> The force merge API allows to force merging of one or more indices through an API . <EoL>
<BoL> The get index API allows to retrieve information about one or more indexes . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-index.html > ` _ <EoL>
<BoL> Retrieve a specified alias . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html > ` _ <EoL>
<BoL> Retrieve mapping definition of a specific field . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-field-mapping.html > ` _ <EoL>
<BoL> Retrieve mapping definition of index or index/type . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-mapping.html > ` _ <EoL>
<BoL> Retrieve settings for one or more ( or all ) indices . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-get-settings.html > ` _ <EoL>
<BoL> Retrieve an index template by its name . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html > ` _ <EoL>
<BoL> Monitor how much of one or more index is upgraded . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-upgrade.html > ` _ <EoL>
<BoL> Open a closed index to make it available for search . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-open-close.html > ` _ <EoL>
<BoL> Create an alias for a specific index/indices . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html > ` _ <EoL>
<BoL> Register specific mapping definition for a specific type . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-mapping.html > ` _ <EoL>
<BoL> Change specific index level settings in real time . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-update-settings.html > ` _ <EoL>
<BoL> Create an index template that will automatically be applied to new indices created . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-templates.html > ` _ <EoL>
<BoL> The indices recovery API provides insight into on-going shard recoveries . Recovery status may be reported for specific indices , or cluster-wide . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-recovery.html > ` _ <EoL>
<BoL> Explicitly refresh one or more index , making all operations performed since the last refresh available for search . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html > ` _ <EoL>
<BoL> The rollover index API rolls an alias over to a new index when the existing index is considered to be too large or too old . <EoL>
<BoL> Provide low level segments information that a Lucene index ( shard level ) is built with . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-segments.html > ` _ <EoL>
<BoL> Provides store information for shard copies of indices . Store information reports on which nodes shard copies exist , the shard copy version , indicating how recent they are , and any exceptions encountered while opening the shard index or from earlier engine failure . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-shards-stores.html > ` _ <EoL>
<BoL> The shrink index API allows you to shrink an existing index into a new index with fewer primary shards . <EoL>
<BoL> Retrieve statistics on different operations happening on an index . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html > ` _ <EoL>
<BoL> Update specified aliases . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-aliases.html > ` _ <EoL>
<BoL> Upgrade one or more indices to the latest format through an API . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/indices-upgrade.html > ` _ <EoL>
<BoL> Validate a potentially expensive query without executing it . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/search-validate.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/plugins/current/ingest.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/plugins/current/ingest.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/plugins/current/ingest.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/plugins/current/ingest.html > ` _ <EoL>
<BoL> An API allowing to get the current hot threads on each node in the cluster . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-hot-threads.html > ` _ <EoL>
<BoL> The cluster nodes info API allows to retrieve one or more ( or all ) of the cluster nodes information . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-info.html > ` _ <EoL>
<BoL> The cluster nodes stats API allows to retrieve one or more ( or all ) of the cluster nodes statistics . ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-nodes-stats.html > ` _ <EoL>
<BoL> The cluster nodes usage API allows to retrieve information on the usage of features for each node . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-usage.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/cluster-remote-info.html > ` _ <EoL>
<BoL> Create a snapshot in repository ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Registers a shared file system repository . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Deletes a snapshot from a repository . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Removes a shared file system repository . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Retrieve information about a snapshot . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Return information about registered repositories . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Restore a snapshot . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Return information about all currently running snapshots . By specifying a repository name , it 's possible to limit the results to a particular repository . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> Returns a list of nodes where repository was successfully verified or an error message if verification process failed . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/modules-snapshots.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html > ` _ <EoL>
<BoL> Retrieve information for a particular task . ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/tasks.html > ` _ <EoL>
<BoL> Retrieve information about xpack , including build number/timestamp and license status ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html > ` _ <EoL>
<BoL> Retrieve information about xpack features usage <EoL>
<BoL> Create a URL string from parts , omit all ` None ` values and empty strings . Convert lists nad tuples to comma separated values . <EoL>
<BoL> Helper function to transform hosts argument to : class : ` ~elasticsearch.Elasticsearch ` to a list of dicts . <EoL>
<BoL> Decorator that pops all accepted parameters from method 's kwargs and puts them in the params argument . <EoL>
<BoL> Escape a single value of a URL string or a query parameter . If it is a list or tuple , turn it into a comma-separated string first . <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/migration/current/migration-api-deprecation.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/graph-explore-api.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/x-pack/current/license-management.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/x-pack/current/license-management.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/x-pack/current/license-management.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/migration-api-assistance.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/migration-api-upgrade.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-close-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-datafeed.html > ` _ <EoL>
<BoL> : arg filter_id : The ID of the filter to delete <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-delete-snapshot.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-flush-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-forecast.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-bucket.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-category.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed-stats.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-datafeed.html > ` _ <EoL>
<BoL> : arg filter_id : The ID of the filter to fetch : arg from_ : skips a number of filters : arg size : specifies a max number of filters to get <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-influencer.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job-stats.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-snapshot.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-get-record.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-open-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-post-data.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-preview-datafeed.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-datafeed.html > ` _ <EoL>
<BoL> : arg filter_id : The ID of the filter to create : arg body : The filter details <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-put-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-revert-snapshot.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-start-datafeed.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-stop-datafeed.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-datafeed.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-job.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/ml-update-snapshot.html > ` _ <EoL>
<BoL> : arg body : The job config <EoL>
<BoL> : arg body : The detector <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/monitoring/current/appendix-api-bulk.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-authenticate.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-change-password.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-clear-cache.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-roles.html # security-api-clear-role-cache > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-roles.html # security-api-delete-role > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-role-mapping.html # security-api-delete-role-mapping > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-users.html # security-api-delete-user > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-users.html # security-api-disable-user > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-users.html # security-api-enable-user > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-roles.html # security-api-get-role > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-role-mapping.html # security-api-get-role-mapping > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-tokens.html # security-api-get-token > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-users.html # security-api-get-user > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-tokens.html # security-api-invalidate-token > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-roles.html # security-api-put-role > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-role-mapping.html # security-api-put-role-mapping > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/security-api-users.html # security-api-put-user > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html > ` _ <EoL>
<BoL> ` < https : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-restart.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html > ` _ <EoL>
<BoL> ` < http : //www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stop.html > ` _ <EoL>
<BoL> A helper function around creating an SSL context <EoL>
<BoL> Errors when we 're fairly sure that the server did not receive the request , so it should be safe to retry . <EoL>
<BoL> Checks if a given HTTP method should be retried upon , depending if it is included on the method whitelist . <EoL>
<BoL> Errors that occur after the request has been started , so we should assume that the server began processing it . <EoL>
<BoL> Backwards-compatibility for the old retries format . <EoL>
<BoL> Formula for computing the current backoff <EoL>
<BoL> Get the value of Retry-After in seconds . <EoL>
<BoL> Are we out of retries ? <EoL>
<BoL> Is this method/status code retryable ? ( Based on whitelists and control variables such as the number of total retries to allow , whether to respect the Retry-After header , whether this header is present , and whether the returned status code is on the list of status codes to be retried upon on the presence of the aforementioned header ) <EoL>
<BoL> Sleep between retry attempts . <EoL>
<BoL> Explicitly closes connections <EoL>
<BoL> Split actions into chunks by number or size , serialize them into strings in the process . <EoL>
<BoL> Send a bulk request to elasticsearch and process the output . <EoL>
<BoL> Helper for the : meth : ` ~elasticsearch.Elasticsearch.bulk ` api that provides a more human friendly interface - it consumes an iterator of actions and sends them to elasticsearch in chunks . <EoL>
<BoL> From one document or action definition passed in by the user extract the action/data lines needed for elasticsearch's : meth : ` ~elasticsearch.Elasticsearch.bulk ` api . <EoL>
<BoL> Simple callback that takes the node info from ` /_cluster/nodes ` and a parsed connection information and return the connection information . If ` None ` is returned this node will be skipped . <EoL>
<BoL> Push this action onto the execution context . <EoL>
<BoL> Pop this action off the execution context , log finish message . <EoL>
<BoL> Return the next C { task_level } for messages within this action . <EoL>
<BoL> Log the start message . <EoL>
<BoL> Add fields to be included in the result message when the action finishes successfully . <EoL>
<BoL> Create a child L { Action } . <EoL>
<BoL> Create a context manager that ensures code runs within action 's context . <EoL>
<BoL> Start a new action which is part of a serialized task . <EoL>
<BoL> Log the finish message . <EoL>
<BoL> Run the given function with this L { Action } as its execution context . <EoL>
<BoL> Create a unique identifier for the current location within the task . <EoL>
<BoL> Start a new L { eliot.Action } of this type with the given start fields . <EoL>
<BoL> Like L { action } , but creates a new top-level L { Action } with no parent . <EoL>
<BoL> Create a child L { Action } , figuring out the parent L { Action } from execution context , and log the start message . <EoL>
<BoL> Start a new L { eliot.Action } of this type as a task ( i.e . top-level action ) with the given start fields . <EoL>
<BoL> @ param serializer : A function that takes a single rich input and returns a serialized value that can be written out as JSON . May raise L { ValidationError } to indicate bad inputs . <EoL>
<BoL> Create a L { Field } that must be an instance of a given set of types . <EoL>
<BoL> Create a L { Field } that can only have a single value . <EoL>
<BoL> Convert the given input to a value that can actually be logged . <EoL>
<BoL> Validate the given input value against this L { Field } definition . <EoL>
<BoL> @ param message : A message dictionary . <EoL>
<BoL> Factory method . Will create a new PClass of the current type and assign the values specified in kwargs . <EoL>
<BoL> Returns an evolver for this object . <EoL>
<BoL> Remove attribute given by name from the current instance . Raises AttributeError if the attribute does n't exist . <EoL>
<BoL> Serialize the current PClass using custom serializer functions for fields where such have been supplied . <EoL>
<BoL> Set a field in the instance . <EoL>
<BoL> Apply transformations to the currency PClass . <EoL>
<BoL> Serialize a dictionary to a unicode string no matter what it contains . <EoL>
<BoL> Serialize the dictionary , and write it to C { self._destinations } . <EoL>
<BoL> Flush all logged tracebacks whose exception is of the given type . <EoL>
<BoL> Clear all logged messages . <EoL>
<BoL> Serialize all written messages . <EoL>
<BoL> Validate all written messages . <EoL>
<BoL> Add the dictionary to list of messages . <EoL>
<BoL> You can also use L { Message.new } to create L { Message } objects . <EoL>
<BoL> Freeze this message for logging , registering it with C { action } . <EoL>
<BoL> Return the current time . <EoL>
<BoL> Return a new L { Message } with this message 's contents plus the additional given bindings . <EoL>
<BoL> Return a copy of L { Message } contents . <EoL>
<BoL> Write a new L { Message } to the default L { Logger } . <EoL>
<BoL> Create a new L { Message } . <EoL>
<BoL> Write the message to the given logger . <EoL>
<BoL> Create a new L { eliot.Message } of this type with the given fields . <EoL>
<BoL> @ ivar type : The name of the type , e.g . C { `` yourapp : subsystem : yourtype '' } . <EoL>
<BoL> Write a new L { Message } of this type to the default L { Logger } . <EoL>
<BoL> Return a child of this L { TaskLevel } . <EoL>
<BoL> Convert a serialized Unicode string to a L { TaskLevel } . <EoL>
<BoL> Is this task a sibling of C { task_level } ? <EoL>
<BoL> Return the next L { TaskLevel } , that is a task at the same level as this one , but one after . <EoL>
<BoL> Return the parent of this L { TaskLevel } , or C { None } if it does n't have one . <EoL>
<BoL> Convert to a Unicode string , for serialization purposes . <EoL>
<BoL> Return a new action with C { message } added as a child . <EoL>
<BoL> End this action with C { end_message } . <EoL>
<BoL> Start this action given its start message . <EoL>
<BoL> Is C { message } a valid direct child of this action ? <EoL>
<BoL> Return the dictionary that was used to write this message . <EoL>
<BoL> Reconstruct a L { WrittenMessage } from a logged dictionary . <EoL>
<BoL> Get the stack for the current asyncio Task . <EoL>
<BoL> @ return : The current front L { Action } , or C { None } if there is no L { Action } set . <EoL>
<BoL> Pop the front L { Action } on the stack . <EoL>
<BoL> Push the given L { Action } to the front of the stack . <EoL>
<BoL> Convenience function to specify that a value may be of any of the types in type 'typs ' or None <EoL>
<BoL> Create a checked `` PMap `` field . <EoL>
<BoL> Package up the given function with the current Eliot context , and then restore context and call given function when the resulting callable is run . This allows continuing the action context within a different thread . <EoL>
<BoL> Create checked `` PVector `` field . <EoL>
<BoL> Like C { unicode ( ) } , but catches and swallows any raised exceptions . <EoL>
<BoL> Use a logging context that is tied to the current asyncio coroutine . <EoL>
<BoL> Encode to bytes , and presume bytes in inputs are UTF-8 encoded strings.JSON encoder that supports L { bytes } . <EoL>
<BoL> Support decoding bytes . <EoL>
<BoL> Given an exception instance , return fields to add to the failed action message . <EoL>
<BoL> Register a function that converts exceptions to fields . <EoL>
<BoL> Create new persistent map , inserts all elements in initial into the newly created map . <EoL>
<BoL> Recursively convert pyrsistent containers into simple Python containers . <EoL>
<BoL> Adds new destinations . <EoL>
<BoL> Add fields that will be included in all messages sent through this destination . <EoL>
<BoL> Remove an existing destination . <EoL>
<BoL> Deliver a message to all destinations . <EoL>
<BoL> Like C { unicode ( repr ( ) ) } , but catches and swallows any raised exceptions . <EoL>
<BoL> Add a destination that writes a JSON message per line to the given file . <EoL>
<BoL> Write the latest traceback to the log . <EoL>
<BoL> Update the L { Parser } with a dictionary containing a serialized Eliot message . <EoL>
<BoL> @ return : List of L { Task } that are not yet complete . <EoL>
<BoL> Parse a stream of messages into a stream of L { Task } instances . <EoL>
<BoL> Ensure the node ( WrittenAction/WrittenMessage ) is referenced by parent nodes . <EoL>
<BoL> Add a L { WrittenAction } to the tree . <EoL>
<BoL> Update the L { Task } with a dictionary containing a serialized Eliot message . <EoL>
<BoL> @ return bool : True only if all messages in the task tree have been added to it . <EoL>
<BoL> @ return : The root L { WrittenAction } . <EoL>
<BoL> Discard the element and returns a structure without the discarded elements <EoL>
<BoL> Create checked `` PSet `` field . <EoL>
<BoL> Return a version of L { traceback } that does n't do I/O . <EoL>
<BoL> Write a traceback to the log . <EoL>
<BoL> Load a copy of a module , distinct from what you 'd get if you imported it directly . <EoL>
<BoL> Write a L { twisted.python.failure.Failure } to the log . <EoL>
<BoL> Serialize the given message in-place , converting inputs to outputs . <EoL>
<BoL> Validate the given message . <EoL>
<BoL> Factory for for L { MessageType } and L { ActionType } field definitions . <EoL>
<BoL> Lazily imports and returns an enaml imports context . <EoL>
<BoL> Parse an entry point from the syntax in entry_points.txt <EoL>
<BoL> Load the object to which this entry point refers . <EoL>
<BoL> Find all entry points in a group . <EoL>
<BoL> Find a group of entry points with unique names . <EoL>
<BoL> Find a single entry point . <EoL>
<BoL> Attaches a file located at *file_path* to the envelope . <EoL>
<BoL> Adds a BCC address . <EoL>
<BoL> Adds a CC address . <EoL>
<BoL> Adds a custom header . <EoL>
<BoL> Adds a `` To `` address . <EoL>
<BoL> Clears list of BCC addresses . <EoL>
<BoL> Clears list of CC addresses . <EoL>
<BoL> Clears custom headers . <EoL>
<BoL> Clears list of `` To `` addresses . <EoL>
<BoL> Sends the envelope using a freshly created SMTP connection . *args* and *kwargs* are passed directly to : py : class : ` envelopes.conn.SMTP ` constructor . <EoL>
<BoL> Returns the envelope as : py : class : ` email.mime.multipart.MIMEMultipart ` . <EoL>
<BoL> Sends an *envelope* . <EoL>
<BoL> Return the string value of the header . <EoL>
<BoL> True if string s is not a ctext character of RFC822 . <EoL>
<BoL> Append a string to the MIME header . <EoL>
<BoL> Encode a message header into an RFC-compliant format . <EoL>
<BoL> This constructor adds a Content-Type : and a MIME-Version : header . <EoL>
<BoL> Create a text/* type MIME document . <EoL>
<BoL> Return a useful textual representation of this Observer . <EoL>
<BoL> Internal function used to compute transits . <EoL>
<BoL> Find the next passage of a body across the anti-meridian . <EoL>
<BoL> Find the next passage of a body across the meridian . <EoL>
<BoL> Find the previous passage of a body across the anti-meridian . <EoL>
<BoL> Find the previous passage of a body across the meridian . <EoL>
<BoL> Internal function for finding risings and settings . <EoL>
<BoL> Set the atmospheric pressure for the current elevation . <EoL>
<BoL> Raise an exception if the given declination is circumpolar . <EoL>
<BoL> Find the next passage of a body across the anti-meridian . <EoL>
<BoL> Return the next rising , culmination , and setting of a satellite . <EoL>
<BoL> Search for the given body 's next rising <EoL>
<BoL> Search for the given body 's next setting <EoL>
<BoL> Find the next passage of a body across the meridian . <EoL>
<BoL> Find the previous passage of a body across the anti-meridian . <EoL>
<BoL> Search for the given body 's previous rising <EoL>
<BoL> Search for the given body 's previous setting <EoL>
<BoL> Find the previous passage of a body across the meridian . <EoL>
<BoL> Function that assists the finding of moon phases . <EoL>
<BoL> Load the cities database and return a city . <EoL>
<BoL> Function that assists the finding of equinoxes and solstices . <EoL>
<BoL> Convert a PyEphem date into local time , returning a Python datetime . <EoL>
<BoL> Return an x-value at which the given function reaches zero . <EoL>
<BoL> Return the date of the next autumnal equinox . <EoL>
<BoL> Return the date of the next equinox . <EoL>
<BoL> Return the date of the next First Quarter Moon . <EoL>
<BoL> Return the date of the next Full Moon . <EoL>
<BoL> Return the date of the next Last Quarter Moon . <EoL>
<BoL> Return the date of the next New Moon . <EoL>
<BoL> Return the date of the next solstice . <EoL>
<BoL> Return the date of the next vernal equinox . <EoL>
<BoL> Return the date of the next summer solstice . <EoL>
<BoL> Return the date of the next winter solstice . <EoL>
<BoL> Return the date of the previous autumnal equinox . <EoL>
<BoL> Return the date of the previous equinox . <EoL>
<BoL> Return the date of the previous First Quarter Moon . <EoL>
<BoL> Return the date of the previous Full Moon . <EoL>
<BoL> Return the date of the previous Last Quarter Moon . <EoL>
<BoL> Return the date of the previous New Moon . <EoL>
<BoL> Return the date of the previous solstice . <EoL>
<BoL> Return the date of the previous vernal equinox . <EoL>
<BoL> Return the date of the previous summer solstice . <EoL>
<BoL> Return the date of the previous winter solstice . <EoL>
<BoL> Load the stars database and return a star . <EoL>
<BoL> Override if you want to do something at initialization phase ( do n't forget to super ( Gnagna , self ) .activate ( ) ) <EoL>
<BoL> Override if you want to do something at tear down phase ( do n't forget to super ( Gnagna , self ) .deactivate ( ) ) <EoL>
<BoL> Helper to get a specific command . <EoL>
<BoL> Triggered on plugin activation . <EoL>
<BoL> Transform a textual representation of a user identifier to the correct Identifier object you can set in Message.to and Message.frm . <EoL>
<BoL> Triggered on every message coming from the bot itself . <EoL>
<BoL> Triggered when the bot has successfully connected to the chat network . <EoL>
<BoL> Triggered if there are mentioned people in message . <EoL>
<BoL> Triggered on every message not coming from the bot itself . <EoL>
<BoL> Triggered on every presence change . <EoL>
<BoL> Triggered when the bot has joined a MUC . <EoL>
<BoL> Triggered when the bot has left a MUC . <EoL>
<BoL> Triggered when the topic in a MUC changes . <EoL>
<BoL> Triggered asynchronously ( in a different thread context ) on every incoming stream request or file transfert requests . <EoL>
<BoL> Changes the presence/status of the bot . <EoL>
<BoL> By default , this method will do only a BASIC check . <EoL>
<BoL> By default , it will just store the current configuration in the self.config field of your plugin . If this plugin has no configuration yet , the framework will call this function anyway with None . <EoL>
<BoL> Creates a plugin dynamically and exposes its commands right away . <EoL>
<BoL> Triggered on plugin deactivation . <EoL>
<BoL> Reverse operation of create_dynamic_plugin . <EoL>
<BoL> If your plugin needs a configuration , override this method and return a configuration template . <EoL>
<BoL> Gets a plugin your plugin depends on . <EoL>
<BoL> Query a room for information . <EoL>
<BoL> The list of rooms the bot is currently in . <EoL>
<BoL> Send a warning to the administrators of the bot . <EoL>
<BoL> Create a Command definition . <EoL>
<BoL> : param reason : the reason for the error in the command . : param template : apply this specific template to report the error . <EoL>
<BoL> : param root : the root of this flow . <EoL>
<BoL> Move on along the flow . <EoL>
<BoL> Get the next steps that can be automatically executed according to the set predicates . <EoL>
<BoL> Get all the possible next steps after this one ( predicates statisfied or not ) . <EoL>
<BoL> : param name : The name of the conversation/flow . <EoL>
<BoL> gets the predicate function for the specified child node . : param node : the child node : return : the predicate that allows the automatic execution of that node . <EoL>
<BoL> : param separator : The separator on which arguments should be split . <EoL>
<BoL> Those arguments will be directly those put in BOT_IDENTITY <EoL>
<BoL> Delay next reconnection attempt until a suitable back-off time has passed <EoL>
<BoL> You might want to override this one depending on your backend <EoL>
<BoL> Should be implemented by the backend <EoL>
<BoL> Implemented by errBot . <EoL>
<BoL> See : class : ` ~errbot.errBot.ErrBot ` <EoL>
<BoL> See : class : ` ~errbot.errBot.ErrBot ` <EoL>
<BoL> See : class : ` ~errbot.errBot.ErrBot ` <EoL>
<BoL> Signal a presence change for the bot . Should be overridden by backends with a super ( ) .send_message ( ) call . <EoL>
<BoL> Connects the bot to server or returns current connection <EoL>
<BoL> Needs to be overridden to check if the incoming message is from the bot itself . <EoL>
<BoL> Patches message with the conventional prefix to ping the specific contact For example : @ gbin , you forgot the milk ! <EoL>
<BoL> Query a room for information . <EoL>
<BoL> Reset the reconnection count . Back-ends should call this after successfully connecting . <EoL>
<BoL> Should be overridden by backends with a super ( ) .send_message ( ) call . <EoL>
<BoL> Connect the back-end to the server and serve forever . <EoL>
<BoL> Connect the back-end to the server and serve a connection once ( meaning until disconnected for any reason ) . <EoL>
<BoL> Create the room . <EoL>
<BoL> Destroy the room . <EoL>
<BoL> Invite one or more people into the room . <EoL>
<BoL> Join the room . <EoL>
<BoL> Leave the room . <EoL>
<BoL> Signal that the stream has been accepted . <EoL>
<BoL> Acknowledge data has been transfered . <EoL>
<BoL> Creates a clone and with an alternative stream <EoL>
<BoL> An internal plugin error prevented the transfer . <EoL>
<BoL> Signal that the stream has been rejected . <EoL>
<BoL> The streaming finished normally . <EoL>
<BoL> Decorator for flow of commands . <EoL>
<BoL> Decorator for regex-based message match . <EoL>
<BoL> This method takes a string of un-split arguments and parses it , returning a list that is the result of splitting . <EoL>
<BoL> Override if you want to do something at initialization phase ( do n't forget to super ( Gnagna , self ) .activate ( ) ) <EoL>
<BoL> Override if you want to do something at tear down phase ( do n't forget to super ( Gnagna , self ) .deactivate ( ) ) <EoL>
<BoL> Decorator for command filters . <EoL>
<BoL> Creates a list of administrators to notify <EoL>
<BoL> Dispatch the given method to all active plugins . <EoL>
<BoL> Execute a bot command and send output back to the caller <EoL>
<BoL> Process and execute a bot command <EoL>
<BoL> Processes for commands and dispatches the message to all the plugins . <EoL>
<BoL> Triggered when the bot has joined a MUC . <EoL>
<BoL> Triggered when the bot has left a MUC . <EoL>
<BoL> Triggered when the topic in a MUC changes . <EoL>
<BoL> Get command documentation <EoL>
<BoL> Initialize storage for the backend to use . <EoL>
<BoL> Check if the given message is a command for the bot and act on it . It return True for triggering the callback_messages on the .callback_messages on the plugins . <EoL>
<BoL> Sends a simple message to the specified user . <EoL>
<BoL> Sends a card , this can be overriden by the backends *without* a super ( ) call . <EoL>
<BoL> This needs to be overridden by the backends with a super ( ) call . <EoL>
<BoL> Send a simple response to a given incoming message <EoL>
<BoL> Override the default unknown command behavior <EoL>
<BoL> Send a warning to the administrators of the bot . <EoL>
<BoL> Trigger workflows that may have command cmd as a auto_trigger.. This assume cmd has been correctly executed . <EoL>
<BoL> Helper method to create a new FLow . <EoL>
<BoL> Register a flow with this executor . <EoL>
<BoL> Check if user is already running a flow . : param user : the user <EoL>
<BoL> Check if a command from a specific user was expected in one of the running flow . <EoL>
<BoL> This is where the flow execution happens from one of the thread of the pool . <EoL>
<BoL> Starts the execution of a Flow . <EoL>
<BoL> Stops a specific flow . It is a no op if the flow does n't exist . Returns the stopped flow if found . <EoL>
<BoL> Trigger workflows that may have command cmd as a auto_trigger or an in flight flow waiting for command . <EoL>
<BoL> clients is a list of objects implementing callback_stream <EoL>
<BoL> streams to all the clients synchronously <EoL>
<BoL> starts the transfer asynchronously <EoL>
<BoL> Yield chunks of length ` n ` from the given string <EoL>
<BoL> Return all members of an object as ( name , value ) pairs sorted by name . Optionally , only return members that satisfy a given predicate . <EoL>
<BoL> Zap everything here , useful for unit tests <EoL>
<BoL> Check for functions to route in obj and route them . <EoL>
<BoL> Creates a FlowNone , takes the command to which the Node is linked to . <EoL>
<BoL> Construct the flow graph by connecting this node to another node or a command . <EoL>
<BoL> Called at plugin activation . <EoL>
<BoL> Called when the plugin is disabled . <EoL>
<BoL> Repeat calls to func with specified arguments . <EoL>
<BoL> Internal hook that can be overridden to hook a different compile method in . <EoL>
<BoL> Internal hook that can be overridden to hook a different generate method in . <EoL>
<BoL> Internal parsing function used by ` parse ` and ` compile ` . <EoL>
<BoL> Called by the parser to do the preprocessing and filtering for all the extensions . Returns a : class : ` ~jinja2.lexer.TokenStream ` . <EoL>
<BoL> Adds an extension after the environment was created . <EoL>
<BoL> Invokes a test on a value the same way the compiler does it . <EoL>
<BoL> Compile a node or template source code . <EoL>
<BoL> A handy helper method that returns a callable that accepts keyword arguments that appear as variables in the expression . If called it returns the result of the expression . <EoL>
<BoL> Add the items to the instance of the environment if they do not exist yet . This is used by : ref : ` extensions < writing-extensions > ` to register callbacks and configuration values without breaking inheritance . <EoL>
<BoL> Load a template from a string . This parses the source given and returns a : class : ` Template ` object . <EoL>
<BoL> Load a template from the loader . <EoL>
<BoL> Get an item or attribute of an object but prefer the attribute . Unlike : meth : ` getitem ` the attribute *must* be a bytestring . <EoL>
<BoL> Get an item or attribute of an object but prefer the item . <EoL>
<BoL> Exception handling helper . This is used internally to either raise rewritten exceptions or return a rendered traceback for the template . <EoL>
<BoL> Iterates over the extensions by priority . <EoL>
<BoL> Join a template with the parent . By default all the lookups are relative to the loader root so this method returns the ` template ` parameter unchanged , but if the paths should be relative to the parent template , this function can be used to calculate the real template name . <EoL>
<BoL> Lex the given sourcecode and return a generator that yields tokens as tuples in the form `` ( lineno , token_type , value ) `` . This can be useful for : ref : ` extension development < writing-extensions > ` and debugging templates . <EoL>
<BoL> Returns a list of templates for this environment . This requires that the loader supports the loader's : meth : ` ~BaseLoader.list_templates ` method . <EoL>
<BoL> Return a dict for the globals . <EoL>
<BoL> Parse the sourcecode and return the abstract syntax tree . <EoL>
<BoL> Preprocesses the source with all extensions . This is automatically called for all parsing and compiling methods but *not* for : meth : ` lex ` because there you usually only want the actual source tokenized . <EoL>
<BoL> Works like : meth : ` get_template ` but tries a number of templates before it fails . If it can not find any of the templates , it will raise a : exc : ` TemplatesNotFound ` exception . <EoL>
<BoL> Loads a template . This method looks up the template in the cache or loads one by calling : meth : ` get_source ` . Subclasses should not override this method as loaders working on collections of other loaders ( such as : class : ` PrefixLoader ` or : class : ` ChoiceLoader ` ) will not call this method but ` get_source ` directly . <EoL>
<BoL> Collects all the paths from base_paths recursively that contains files of type ` file_sig ` . <EoL>
<BoL> Collects all the paths from path recursively that contains files of type ` file_sig ` . <EoL>
<BoL> decorator to rate limit a function . <EoL>
<BoL> Removes HTML or XML character references and entities from a text string . <EoL>
<BoL> Transform data read from E.S to Python Object : param serialized : Result from E.S ( string ) : return : Instance or Instances of self._type <EoL>
<BoL> Transform value from Python to be saved in E.S : param value : raw value : param validate : if should validate before transform : return : pure value <EoL>
<BoL> Transform data read from E.S to Python Object : param serialized : Result from E.S ( string ) : return : Instance or Instances of self._type <EoL>
<BoL> Returns a ResultSet with all documents without filtering A semantic shortcut to filter ( ) without keys <EoL>
<BoL> Takes ES client response having [ 'hits ' ] [ 'hits ' ] and turns it to an generator of Doc objects : param resp : ES client raw results : param query : The query used to build the results : param es : Es client : param size : size of results : return : ResultSet : a generator of Doc objects <EoL>
<BoL> Count documents by query or all if no param : param args : < see .filter parameters > : param _method : filter or search : param kwargs : < see .filter parameters > : return : Integer count <EoL>
<BoL> Count documents using a specific raw query example : Counting all documents having non-null name field <EoL>
<BoL> Creates and returns an instance of the Document <EoL>
<BoL> Delete current instance of a Document <EoL>
<BoL> Delete various Doc instances in bulk <EoL>
<BoL> Tell if document exists on index <EoL>
<BoL> Transform data read from E.S to Python Document Object : param dct : Result from E.S ( hits , source as dict ) : return : Instance of Document <EoL>
<BoL> Takes E.S hit element containing [ u'_score ' , u'_type ' , u'_id ' , u'_source ' , u'_index ' ] <EoL>
<BoL> A get query returning a single document by _id or _uid <EoL>
<BoL> This proxy-method allows the client overwrite and the use of a default client for a document . Document transport methods should use cls.get_es ( es ) .method ( ) This method also validades that the connection is a valid ES client . <EoL>
<BoL> If index does not exist it is created with mapping If exists mapping is updated : return : acknowlege <EoL>
<BoL> Used to refresh an index and its shards Utility for tests purposes <EoL>
<BoL> Save current instance of a Document <EoL>
<BoL> Save various Doc instances in bulk <EoL>
<BoL> Takes a raw ES query in form of a dict or Payload and return Doc instances iterator <EoL>
<BoL> Transform value from Python to Dict to be saved in E.S : param validate : If should validate before transform : param only : if specified only those fields will be included : param exclude : fields to exclude from dict : return : dict <EoL>
<BoL> Update a single document <EoL>
<BoL> Update various Doc instances in bulk <EoL>
<BoL> Update a single document using its id on BaseClass <EoL>
<BoL> Generate the mapping acording to doc_class . <EoL>
<BoL> Add custom settings like filters and analizers to index . <EoL>
<BoL> Save the mapping to index . <EoL>
<BoL> Initialize an iterator : param iterable : Payload ( recommended ) , ResultSet or an iterator : param page : : param per_page : : return : <EoL>
<BoL> The minimum between search.count and specified total_size : return : integer <EoL>
<BoL> Returns a : class : ` Pagination ` object for the next page . <EoL>
<BoL> Returns a : class : ` Pagination ` object for the previous page . <EoL>
<BoL> Optional parameters : param model : a Document model class ( optional ) : param query : A Query instance : param filter : A Filter instance : param aggregate : Aggregate instances : param suggest : Suggester instances : param sort : field name or dictionary : param size : Integer size : param timeout : Timeout in seconds : param fields : List of fields : return : Payload Wrapper <EoL>
<BoL> if args is only one field .get_values ( 'id ' ) return a list of lists [ 123 , 456 , 789 ] If args is more than one field return a list of tuples .get_values ( `` id '' , `` name '' ) [ ( 123 , `` John '' ) , ( 789 , `` mary '' ) , ... ] : param kwargs : Document class : param fields : a list of fields : return : <EoL>
<BoL> Sort he Payload : param field : Field to sort : param reset : Should reset sort list : param kwargs : `` order '' and other sort params : return : Payload instance ( self ) <EoL>
<BoL> if args is only one field .get_values ( 'id ' ) return a list of lists [ 123 , 456 , 789 ] If args is more than one field return a list of tuples .get_values ( `` id '' , `` name '' ) [ ( 123 , `` John '' ) , ( 789 , `` mary '' ) , ... ] : param fields : a list of fields : return : <EoL>
<BoL> returns a list of Documents transformed in dicts [ { } , { } , ... ] : param args : passed to item : param kwargs : passed to item : return : <EoL>
<BoL> A valid ES client is a interface which must implements at least `` index '' and `` search '' public methods . preferably an elasticsearch.ElasticSearch ( ) instance : param es : : return : None <EoL>
<BoL> If HTTP_X_METHOD_OVERRIDE is included with the request and method override is allowed , make sure the override method is returned to Eve as the request method , so normal routing and method validation can be performed . <EoL>
<BoL> Builds the API url map for one resource . Methods are enabled for each mapped endpoint , as configured in the settings . <EoL>
<BoL> If enabled , configures the OPLOG endpoint . <EoL>
<BoL> Configures the schema endpoint if set in configuration . <EoL>
<BoL> Builds the API url map . Methods are enabled for each mapped endpoint , as configured in the settings . <EoL>
<BoL> Set the default values for the resource 'datasource ' setting . <EoL>
<BoL> Low-level method which sets default values for one resource . <EoL>
<BoL> Set datasource projection for a resource <EoL>
<BoL> Validates one resource in configuration settings . <EoL>
<BoL> Method checks for usage of deprecated features.Checks if JSON or XML setting is still being used instead of RENDERERS and if so , composes new settings . <EoL>
<BoL> API settings are loaded from standard python modules . First from ` settings.py ` ( or alternative name/path passed as an argument ) and then , when defined , from the file specified in the ` EVE_SETTINGS ` environment variable . <EoL>
<BoL> Register custom error handlers so we make sure that all errors return a parseable body . <EoL>
<BoL> Registers new resource to the domain . <EoL>
<BoL> Pass our own subclass of : class : ` werkzeug.serving.WSGIRequestHandler to Flask . <EoL>
<BoL> When not provided , fills individual resource settings with default or global configuration settings . <EoL>
<BoL> When not provided , fills individual schema settings with default or global configuration settings . <EoL>
<BoL> Makes sure that REST methods expressed in the configuration settings are supported . <EoL>
<BoL> Validates that Eve configuration settings conform to the requirements . <EoL>
<BoL> Compares allowed and proposed methods , raising a ` ConfigException ` when they do n't match . <EoL>
<BoL> Validates that user role directives are syntactically and formally adequate . <EoL>
<BoL> Validates a resource schema . <EoL>
<BoL> Returns a standard a 401 response that enables basic auth . Override if you want to change the response and/or the realm . <EoL>
<BoL> Validates the the current request is allowed to pass through . <EoL>
<BoL> This function is called to check if a username / password combination is valid . Must be overridden with custom logic . <EoL>
<BoL> Returns a standard a 401 . Override if you want to change the response . <EoL>
<BoL> Validates the the current request is allowed to pass through . <EoL>
<BoL> Returns a standard a 401 . Override if you want to change the response . <EoL>
<BoL> Validates the the current request is allowed to pass through . <EoL>
<BoL> This function is called to check if a token is valid . Must be overridden with custom logic . <EoL>
<BoL> Raises an : py : exc : ` HTTPException ` for the given status code or WSGI application : : <EoL>
<BoL> If auth is active and the resource requires it , return both the current request 'request_auth_value ' and the 'auth_field ' for the resource <EoL>
<BoL> Enables Authorization logic for decorated functions . <EoL>
<BoL> Ensure resource auth is an instance and its state is preserved between calls . <EoL>
<BoL> Resource endpoint handler <EoL>
<BoL> Converts a datetime value to the corresponding RFC-1123 string . <EoL>
<BoL> Deletes all item of a resource ( collection in MongoDB terms ) . Won't drop indexes . Use with caution ! <EoL>
<BoL> Default function for handling DELETE requests , it has decorators for rate limiting , authentication and for raising pre-request events . After the decorators are applied forwards to call to : func : ` deleteitem_internal ` <EoL>
<BoL> Response returned when an error is raised by the API ( e.g . my means of an abort ( 4xx ) . <EoL>
<BoL> Default function for handling GET requests , it has decorators for rate limiting , authentication and for raising pre-request events . After the decorators are applied forwards to call to : func : ` get_internal ` <EoL>
<BoL> Default function for handling GET requests to document endpoints , it has decorators for rate limiting , authentication and for raising pre-request events . After the decorators are applied forwards to call to : func : ` getitem_internal ` <EoL>
<BoL> Home/API entry point . Will provide links to each available resource <EoL>
<BoL> Item endpoint handler <EoL>
<BoL> This endpoint is active when RETURN_MEDIA_AS_URL is True . It retrieves a media file and streams it to the client . <EoL>
<BoL> Default function for handling PATCH requests , it has decorators for rate limiting , authentication and for raising pre-request events . After the decorators are applied forwards to call to : func : ` patch_internal ` <EoL>
<BoL> Default function for handling POST requests , it has decorators for rate limiting , authentication and for raising pre-request events . After the decorators are applied forwards to call to : func : ` post_internal ` <EoL>
<BoL> Default function for handling PUT requests , it has decorators for rate limiting , authentication and for raising pre-request events . After the decorators are applied forwards to call to : func : ` put_internal ` <EoL>
<BoL> Enables support for Rate-Limits on API methods The key is constructed by default from the remote address or the authorization.username if authentication is being used . On a authentication-only API , this will impose a ratelimit even on non-authenticated users , reducing exposure to DDoS attacks . <EoL>
<BoL> This endpoint is active when SCHEMA_ENDPOINT ! = None . It returns the schema definition for all public or request authenticated resources in JSON format . <EoL>
<BoL> This endpoint is active when SCHEMA_ENDPOINT ! = None . It returns the requested resource 's schema definition in JSON format . <EoL>
<BoL> Prepares the response for the client . <EoL>
<BoL> Returns a RFC-1123 string corresponding to a datetime value plus a 1 second timedelta . This is needed because when saved , documents LAST_UPDATED values have higher resolution than If-Modified-Since 's , which is limited to seconds . <EoL>
<BoL> Called if the connection was closed by the client . By default nothing happens . <EoL>
<BoL> Handles a request ignoring dropped connections . <EoL>
<BoL> Handle a single HTTP request . <EoL>
<BoL> A horrible , horrible way to kill the server for Python 2.6 and later . It 's the best we can do . <EoL>
<BoL> Send the response header and log the response code . <EoL>
<BoL> : param app : the flask application ( eve itself ) . This can be used by the class to access , amongst other things , the app.config object to retrieve class-specific settings . <EoL>
<BoL> Deletes the file referenced by unique id . <EoL>
<BoL> Returns True if a file referenced by the unique id or the query document already exists , False otherwise . <EoL>
<BoL> Provides the instance-level GridFS instance , instantiating it if needed . <EoL>
<BoL> Returns the file given by unique id . Returns None if no file was found . <EoL>
<BoL> Saves a new file in GridFS . <EoL>
<BoL> Make sure that the application data layer is a eve.io.mongo.Mongo instance . <EoL>
<BoL> Implements the Flask extension pattern . <EoL>
<BoL> Performs a change , be it a replace or update . <EoL>
<BoL> Returns a properly parsed client projection if available . <EoL>
<BoL> Recursively iterates a JSON dictionary , turning RFC-1123 strings into datetime values and ObjectId-link strings into ObjectIds . <EoL>
<BoL> Makes sure that only allowed operators are included in the query , aborts with a 400 otherwise . <EoL>
<BoL> Syntactic sugar for the current collection write_concern setting . <EoL>
<BoL> .. versionadded : : 0.7 <EoL>
<BoL> Takes two db queries and applies db-specific syntax to produce the intersection . <EoL>
<BoL> Returns the active mongo_prefix that should be used to retrieve a valid PyMongo instance from the cache . <EoL>
<BoL> Returns a tuple with the actual name of the database collection/table , base query and projection for the resource being accessed . <EoL>
<BoL> Retrieves a set of documents matching a given request . Queries can be expressed in two different formats : the mongo query syntax , and the python syntax . The first kind of query would look like : : : <EoL>
<BoL> Retrieves a list of documents from the collection given by ` resource ` , matching the given list of ids . <EoL>
<BoL> Retrieves a single raw document . <EoL>
<BoL> Returns a pymongo Collection with the desired write_concern setting . <EoL>
<BoL> For the specified field name , parses the query and returns the value being assigned in the query . <EoL>
<BoL> Initialize PyMongo . <EoL>
<BoL> Inserts a document into a resource collection . <EoL>
<BoL> Returns True if resource is empty ; False otherwise . <EoL>
<BoL> Returns an active PyMongo instance . If 'prefix ' is defined then it has precedence over the endpoint ( 'resource ' ) and/or 'self.mongo_instance ' . <EoL>
<BoL> For the specified field name , does the query contain it ? Used know whether we need to parse a compound query . <EoL>
<BoL> Removes a document or the entire set of documents from a collection . <EoL>
<BoL> Replaces an existing document . .. versionchanged : : 0.6 Support for multiple databases . <EoL>
<BoL> Updates a collection document . .. versionchanged : : 0.6 Support for multiple databases . <EoL>
<BoL> Initialize a filter . <EoL>
<BoL> Validates that a field value is unique . <EoL>
<BoL> { 'nullable ' : True } <EoL>
<BoL> { 'oneof ' : [ { 'type ' : 'callable ' } , { 'type ' : 'string ' } ] } <EoL>
<BoL> { 'type ' : 'dict ' , 'schema ' : { 'resource ' : { 'type ' : 'string ' , 'required ' : True } , 'field ' : { 'type ' : 'string ' , 'required ' : True } , 'embeddable ' : { 'type ' : 'boolean ' , 'default ' : False } , 'version ' : { 'type ' : 'boolean ' , 'default ' : False } } } <EoL>
<BoL> { 'type ' : [ 'dict ' , 'hashable ' , 'list ' ] } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> Enables validation for ` feature ` data type <EoL>
<BoL> Enables validation for ` featurecollection ` data type <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> { 'type ' : 'boolean ' } <EoL>
<BoL> Validation method to be invoked when performing a document replacement . <EoL>
<BoL> Validate method to be invoked when performing an update , not an insert . <EoL>
<BoL> Returns the prefix to API endpoints , according to the URL_PREFIX and API_VERSION configuration settings . <EoL>
<BoL> Make sure 'mongo_indexes ' is respected and mongo indexes are created on the current database . <EoL>
<BoL> Extracts all values that match a key , even in nested dicts . <EoL>
<BoL> Perform an aggregation on the resource datasource and returns the result . Only implent this if the underlying db engine supports aggregation operations . <EoL>
<BoL> Takes two db queries and applies db-specific syntax to produce the intersection . <EoL>
<BoL> Retrieves a set of documents ( rows ) , matching the current request . Consumed when a request hits a collection/document endpoint ( ` /people/ ` ) . <EoL>
<BoL> Retrieves a list of documents based on a list of primary keys The primary key is the field defined in ` ID_FIELD ` . This is a separate function to allow us to use per-database optimizations for this type of query . <EoL>
<BoL> Retrieves a single , raw document . <EoL>
<BoL> Parses the given potentially-complex query and returns the value being assigned to the field given in ` field_name ` . <EoL>
<BoL> This is where you want to initialize the db driver so it will be alive through the whole instance lifespan . <EoL>
<BoL> Inserts a document into a resource collection/table . <EoL>
<BoL> Returns True if the collection is empty ; False otherwise . While a user could rely on self.find ( ) method to achieve the same result , this method can probably take advantage of specific datastore features to provide better performance . <EoL>
<BoL> For the specified field name , does the query contain it ? Used know whether we need to parse a compound query . <EoL>
<BoL> Removes a document/row or an entire set of documents/rows from a database collection/table . <EoL>
<BoL> Replaces a collection/table document/row . : param resource : resource being accessed . <EoL>
<BoL> Updates a collection/table document/row . : param resource : resource being accessed . <EoL>
<BoL> Return a JSON string representation of a Python data structure . <EoL>
<BoL> Returns a list of automatically handled fields for a resource . <EoL>
<BoL> Converts a datetime value to the format defined in the configuration file . <EoL>
<BoL> Returns the error message ` msg ` if config.DEBUG is True otherwise returns ` None ` which will cause Werkzeug to provide a generic error message <EoL>
<BoL> : param app : the flask application ( eve itself ) . This can be used by the class to access , amongst other things , the app.config object to retrieve class-specific settings . <EoL>
<BoL> Deletes the file referenced by name or unique id . If deletion is not supported on the target storage system this will raise NotImplementedError instead <EoL>
<BoL> Returns True if a file referenced by the given name or unique id already exists in the storage system , or False if the name is available for a new file . <EoL>
<BoL> Opens the file given by name or unique id . <EoL>
<BoL> Saves a new file using the storage system , preferably with the name specified . <EoL>
<BoL> Clear our connection pool for a server and mark it Unknown . <EoL>
<BoL> Get a database by name . <EoL>
<BoL> Get a database by name . <EoL>
<BoL> Save a set of authentication credentials . <EoL>
<BoL> Add an index to the index cache for ensure_index operations . <EoL>
<BoL> Test if ` index ` is cached . <EoL>
<BoL> Send a kill cursors message with the given id . <EoL>
<BoL> Send a kill cursors message with the given id . <EoL>
<BoL> Get a Database instance with the default settings . <EoL>
<BoL> Send endSessions command ( s ) with the given session ids . <EoL>
<BoL> If provided session is None , lend a temporary session . <EoL>
<BoL> Internal : start or resume a _ServerSession . <EoL>
<BoL> Get the internal : class : ` ~pymongo.topology.Topology ` object . <EoL>
<BoL> Attempt to connect to a writable server , or return False . <EoL>
<BoL> Send a kill cursors message with the given ids . <EoL>
<BoL> Process any pending kill cursors requests and maintain connection pool parameters . <EoL>
<BoL> Purge credentials from the authentication cache . <EoL>
<BoL> Read only access to the read preference of this instance or session . <EoL>
<BoL> Fix options whose __repr__ is n't usable in a constructor . <EoL>
<BoL> Execute an operation . Reset the server on network error . <EoL>
<BoL> Clear our pool for a server , mark it Unknown , and check it soon . <EoL>
<BoL> Execute an operation with at most one consecutive retries <EoL>
<BoL> Internal retryable write helper . <EoL>
<BoL> Internal : return a _ServerSession to the pool . <EoL>
<BoL> An attribute of the current server 's description . <EoL>
<BoL> If provided session is None , lend a temporary session . <EoL>
<BoL> Read only access to the write concern of this instance or session . <EoL>
<BoL> Cleanup client resources and disconnect from MongoDB . <EoL>
<BoL> DEPRECATED - Send a kill cursors message soon with the given id . <EoL>
<BoL> **DEPRECATED** : Get a list of the names of all databases on the connected server . <EoL>
<BoL> Drop a database . <EoL>
<BoL> Flush all pending writes to datafiles . <EoL>
<BoL> DEPRECATED - Get the database named in the MongoDB connection URI . <EoL>
<BoL> DEPRECATED - Send a kill cursors message soon with the given ids . <EoL>
<BoL> Get a list of the names of all databases on the connected server . <EoL>
<BoL> Get a cursor over the databases of the connected server . <EoL>
<BoL> Get information about the MongoDB server we 're connected to . <EoL>
<BoL> DEPRECATED - Set this client 's cursor manager . <EoL>
<BoL> Start a logical session . <EoL>
<BoL> Unlock a previously locked server . <EoL>
<BoL> Convert config options to kwargs according to provided mapping information . <EoL>
<BoL> Create a new instance of : class : ` GridFS ` . <EoL>
<BoL> Delete a file from GridFS by `` `` _id '' `` . <EoL>
<BoL> Check if a file exists in this instance of : class : ` GridFS ` . <EoL>
<BoL> Query GridFS for files . <EoL>
<BoL> Get a single file from gridfs . <EoL>
<BoL> Get a file from GridFS by `` `` _id '' `` . <EoL>
<BoL> Get the most recent version of a file in GridFS by `` `` filename '' `` or metadata fields . <EoL>
<BoL> Get a file from GridFS by `` `` filename '' `` or metadata fields . <EoL>
<BoL> List the names of all files stored in this instance of : class : ` GridFS ` . <EoL>
<BoL> Create a new file in GridFS . <EoL>
<BoL> Put data in GridFS as a new file . <EoL>
<BoL> Generate a new value for this ObjectId . <EoL>
<BoL> Validate and use the given id for this ObjectId . <EoL>
<BoL> eturn value of object for pickling . needed explicitly because __slots__ ( ) defined . <EoL>
<BoL> Get a hash value for this : class : ` ObjectId ` . <EoL>
<BoL> Initialize a new ObjectId . <EoL>
<BoL> explicit state set from pickling <EoL>
<BoL> Create a dummy ObjectId instance with a specific generation time . <EoL>
<BoL> Checks if a ` oid ` string is valid or not . <EoL>
<BoL> Support function for ` copy.deepcopy ( ) ` . <EoL>
<BoL> Get a hash value for this : class : ` DBRef ` . <EoL>
<BoL> Initialize a new : class : ` DBRef ` . <EoL>
<BoL> Get the SON document representation of this DBRef . <EoL>
<BoL> Call the exception as WSGI application . <EoL>
<BoL> Get the HTML body . <EoL>
<BoL> Get the description . <EoL>
<BoL> Get a list of headers . <EoL>
<BoL> Get a response object . If one was passed to the exception it 's returned directly . <EoL>
<BoL> This method returns a new subclass of the exception provided that also is a subclass of ` BadRequest ` . <EoL>
<BoL> Create a specific index composed of the ` list_of_keys ` for the mongo collection behind the ` resource ` using the ` app.config ` to retrieve all data needed to find out the mongodb configuration . The index is also configured by the ` index_options ` . <EoL>
<BoL> Given a python-like conditional statement , returns the equivalent mongo-like query expression . Conditional and boolean operators ( == , < = , > = , ! = , > , < ) along with a couple function calls ( ObjectId ( ) , datetime ( ) ) are supported . <EoL>
<BoL> Converts a date string formatted as defined in the configuration to the corresponding datetime value . <EoL>
<BoL> Report any filter which is not allowed by ` allowed_filters ` <EoL>
<BoL> Visit a node . <EoL>
<BoL> Attribute handler ( 'Contact.Id ' ) . <EoL>
<BoL> Boolean operator handler . <EoL>
<BoL> A couple function calls are supported : bson 's ObjectId ( ) and datetime ( ) . <EoL>
<BoL> Compare operator handler . <EoL>
<BoL> Make sure that we are parsing compare or boolean operators <EoL>
<BoL> Module handler , our entry point . <EoL>
<BoL> Names handler . <EoL>
<BoL> Numbers handler . <EoL>
<BoL> Strings handler . <EoL>
<BoL> Close the underlying file if possible . <EoL>
<BoL> Save the file to a destination path or file object . <EoL>
<BoL> Returns document at the version specified in data_relation , or at the latest version if passed ` latest=True ` . Returns None if data_relation can not be satisfied . <EoL>
<BoL> This function exists so __len__ can be implemented more efficiently , saving one list creation from an iterator . <EoL>
<BoL> Return a shallow copy of this object . <EoL>
<BoL> Return a deep copy of this object . <EoL>
<BoL> Return the contents as regular dict . If ` flat ` is ` True ` the returned dict will only have the first item present , if ` flat ` is ` False ` all values will be returned as lists . <EoL>
<BoL> Return the first data value for this key ; raises KeyError if not found . <EoL>
<BoL> Like : meth : ` add ` but removes an existing key first . <EoL>
<BoL> Adds a new value for the key . <EoL>
<BoL> Return a shallow copy of this object . <EoL>
<BoL> Return the default value if the requested data does n't exist . If ` type ` is provided and is a callable it should convert the value , return it or raise a : exc : ` ValueError ` if that is not possible . In this case the function will return the default as if the value was not found : <EoL>
<BoL> Return the list of items for a given key . <EoL>
<BoL> Return an iterator of `` ( key , value ) `` pairs . <EoL>
<BoL> Return a list of `` ( key , values ) `` pairs , where values is the list of all values associated with the key . <EoL>
<BoL> Return an iterator of all values associated with a key . Zipping : meth : ` keys ` and this is the same as calling : meth : ` lists ` : <EoL>
<BoL> Pop the first item for a list on the dict . Afterwards the key is removed from the dict , so additional values are discarded : <EoL>
<BoL> Pop an item from the dict . <EoL>
<BoL> Pop a `` ( key , list ) `` tuple from the dict . <EoL>
<BoL> Pop the list for a key from the dict . If the key is not in the dict an empty list is returned . <EoL>
<BoL> Returns the value for the key if it is in the dict , otherwise it returns ` default ` and sets that value for ` key ` . <EoL>
<BoL> Remove the old values for a key and add new ones . Note that the list you pass the values in will be shallow-copied before it is inserted in the dictionary . <EoL>
<BoL> Like ` setdefault ` but sets multiple values . The list returned is not a copy , but the list that is actually used internally . This means that you can put new values into the dict by appending items to the list : <EoL>
<BoL> Return the contents as regular dict . If ` flat ` is ` True ` the returned dict will only have the first item present , if ` flat ` is ` False ` all values will be returned as lists . <EoL>
<BoL> update ( ) extends rather than replaces existing key lists : <EoL>
<BoL> Returns an iterator of the first value on every key 's value list . <EoL>
<BoL> Prepares a document for response including generation of ETag and metadata fields . <EoL>
<BoL> If DATE_CREATED is missing we assume that it has been created outside of the API context and inject a default value . By design all documents return a DATE_CREATED ( and we dont ' want to break existing clients ) . <EoL>
<BoL> Computes and returns a valid ETag for the input value . <EoL>
<BoL> Returns a link to a document endpoint . <EoL>
<BoL> Returns a document to be embedded by reference using data_relation taking into account document versions <EoL>
<BoL> A datetime.min alternative which wo n't crash on us . <EoL>
<BoL> Resolves query string to resource with dot notation like 'people.address.city ' and returns corresponding field definition of the resource <EoL>
<BoL> Generate query and sorting critiria <EoL>
<BoL> If available , returns a RateLimit instance which is valid for the current request-response . <EoL>
<BoL> Fixes document 's LAST_UPDATED field value . <EoL>
<BoL> Limit response document to minimize bandwidth when client supports it . <EoL>
<BoL> Convert a MultiDict containing form data into a regular dict . <EoL>
<BoL> Normalizes eventual dotted fields so validation can be performed seamlessly . For example this document : <EoL>
<BoL> Pushes an edit operation to the oplog if included in OPLOG_METHODS . To save on storage space ( at least on MongoDB ) field names are shortened : <EoL>
<BoL> Safely evaluates a string containing a Python expression . We are receiving json and returning a dict . <EoL>
<BoL> Parses a client request , returning instance of : class : ` ParsedRequest ` containing relevant request data . <EoL>
<BoL> Performs sanity checks or decoding depending on the Content-Type , then returns the request payload as a dict . If request Content-Type is unsupported , aborts with a 400 ( Bad Request ) . <EoL>
<BoL> Enable a Hook pre http request . <EoL>
<BoL> Adds etags to documents . <EoL>
<BoL> Version number logic for all methods . <EoL>
<BoL> Loops through the documents , adding embedded representations of any fields that are ( 1 ) defined eligible for embedding in the DOMAIN and ( 2 ) requested to be embedded in the current ` req ` . <EoL>
<BoL> Returns a list of validated embedded fields from the incoming request or from the resource definition is the request does not specify . <EoL>
<BoL> Embed media files into the response document . <EoL>
<BoL> Get response for one media file <EoL>
<BoL> Adds user restricted access metadata to the document if applicable . <EoL>
<BoL> Returns the current resource path relative to the API entry point . <EoL>
<BoL> Returns a list of media fields defined in the resource schema . <EoL>
<BoL> Recursively handles field values that require data-aware serialization . Relies on the app.data.serializers dictionary . <EoL>
<BoL> Serialize value of a given type . Relies on the app.data.serializers dictionary . <EoL>
<BoL> Sorts the documents fetched from the database <EoL>
<BoL> Sorts the documents fetched from the database per single resource <EoL>
<BoL> Store any media file in the underlying media store and update the document with unique ids of stored files . <EoL>
<BoL> Traverses the given document and yields subdocuments which correspond to the given fields_chain <EoL>
<BoL> JSON render function <EoL>
<BoL> XML render function . <EoL>
<BoL> When this function is called the datastream can only contain a ` _items ` list , or a dictionary . <EoL>
<BoL> Returns as many < link > nodes as there are in the datastream . The links are then removed from the datastream to allow for further processing . <EoL>
<BoL> Returns a meta node with page , total , max_results fields . <EoL>
<BoL> Renders a dict as XML . <EoL>
<BoL> Represents a single resource ( member of a collection ) as XML . <EoL>
<BoL> Returns the closing tag of the XML root node . <EoL>
<BoL> Returns the opening tag for the XML root node . <EoL>
<BoL> Returns the best match between the requested mime type and the ones supported by Eve . Along with the mime , also the corresponding render function is returns . <EoL>
<BoL> Imports module using string <EoL>
<BoL> Sometimes it is necessary to set additional headers in a view . <EoL>
<BoL> Raises both general and resource-level events after the decorated function has been executed . Returns both the flask.request object and the response payload to the callback . <EoL>
<BoL> Helper function that wraps : func : ` json.dumps ` . <EoL>
<BoL> Returns a link to the API entry point/home page . <EoL>
<BoL> Returns a list of added or modified fields . <EoL>
<BoL> Returns an old document if appropriate , otherwise returns a shallow copy of the given document . <EoL>
<BoL> Insert versioning copy of document . Intended for POST , PUT , and PATCH . <EoL>
<BoL> Insert versioning copy of document for the previous version of a document if it is missing . Intended for PUT and PATCH . <EoL>
<BoL> Returns a document if it matches the value_field but does n't have a _version field . This is the scenario when there is data in the database before document versioning is turned on . <EoL>
<BoL> Synthesizes a versioned document from the latest document and the values of all versioned fields from the old version . This is accomplished by first creating a new document with only the un-versioned fields of latest document , before updating with versioned fields from the old document . <EoL>
<BoL> Returns a list of versioned fields for a resource . <EoL>
<BoL> Shorthand to add two commonly added versioning parameters . <EoL>
<BoL> Acquire a semaphore . <EoL>
<BoL> Returns False ; for consistency with : class : ` ~eventlet.semaphore.CappedSemaphore ` . <EoL>
<BoL> Returns true if a call to acquire would block . <EoL>
<BoL> Release a semaphore , incrementing the internal counter by one . <EoL>
<BoL> Acquire a semaphore . <EoL>
<BoL> Returns true if a call to release would block . <EoL>
<BoL> Returns true if a call to acquire would block . <EoL>
<BoL> Release a semaphore . In this class , this behaves very much like an : meth : ` acquire ` but in the opposite direction . <EoL>
<BoL> Return true if the : meth : ` wait ` call will return immediately . <EoL>
<BoL> Makes arrangements for the waiters to be woken with the result and then returns immediately to the parent . <EoL>
<BoL> Same as : meth : ` send ` , but sends an exception to waiters . <EoL>
<BoL> Wait until another coroutine calls : meth : ` send ` . Returns the value the other coroutine passed to : meth : ` send ` . <EoL>
<BoL> Wait for the next result , suspending the current greenthread until it is available . Raises StopIteration when there are no more results . <EoL>
<BoL> Runs *func* in its own green thread , with the result available by iterating over the GreenPile object . <EoL>
<BoL> Returns the number of greenthreads available for use . <EoL>
<BoL> This is the same as : func : ` itertools.imap ` , and has the same concurrency and memory behavior as : meth : ` starmap ` . <EoL>
<BoL> Change the max number of greenthreads doing work at any given time . <EoL>
<BoL> Returns the number of greenthreads that are currently executing functions in the GreenPool . <EoL>
<BoL> Run the *function* with its arguments in its own green thread . Returns the : class : ` GreenThread < eventlet.GreenThread > ` object that is running the function , which can be used to retrieve the results . <EoL>
<BoL> Create a greenthread to run the *function* , the same as : meth : ` spawn ` . The difference is that : meth : ` spawn_n ` returns None ; the results of *function* are not retrievable . <EoL>
<BoL> This is the same as : func : ` itertools.starmap ` , except that *func* is executed in a separate green thread for each item , with the concurrency limited by the pool 's size . In operation , starmap consumes a constant amount of memory , proportional to the size of the pool , and is thus suited for iterating over extremely long input lists . <EoL>
<BoL> Waits until all greenthreads in the pool are finished working . <EoL>
<BoL> Return the number of greenthreads waiting to spawn . <EoL>
<BoL> Return `` True `` if the queue is empty , `` False `` otherwise . <EoL>
<BoL> Return `` True `` if the queue is full , `` False `` otherwise . <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Remove and return an item from the queue without blocking . <EoL>
<BoL> Returns the number of greenthreads that are blocked waiting on an empty queue . <EoL>
<BoL> Block until all items in the queue have been gotten and processed . <EoL>
<BoL> Put an item into the queue . <EoL>
<BoL> Put an item into the queue without blocking . <EoL>
<BoL> Returns the number of greenthreads that are blocked waiting to put items into the queue . <EoL>
<BoL> Return the size of the queue . <EoL>
<BoL> Resizes the queue 's maximum size . <EoL>
<BoL> Indicate that a formerly enqueued task is complete . <EoL>
<BoL> Release a semaphore , incrementing the internal counter by one . When it was zero on entry and another thread is waiting for it to become larger than zero again , wake up that thread . <EoL>
<BoL> If the timeout is pending , cancel it . <EoL>
<BoL> Schedule the timeout . This is called on construction , so it should not be called explicitly , unless the timer has been canceled . <EoL>
<BoL> Schedule the timeout . This is called on construction , so it should not be called explicitly , unless the timer has been canceled.True if the timeout is scheduled to be raised.If the timeout is pending , cancel it . <EoL>
<BoL> Convenience function for opening client sockets . <EoL>
<BoL> Convenience function for opening server sockets . This socket can be used in : func : ` ~eventlet.serve ` or a custom `` accept ( ) `` loop . <EoL>
<BoL> Runs a server on the supplied socket . Calls the function *handle* in a separate greenthread for every incoming client connection . *handle* takes two arguments : the client socket object , and the client address : : <EoL>
<BoL> Convenience function for converting a regular socket into an SSL socket . <EoL>
<BoL> Returns `` id ( ) `` of current greenlet . Useful for debugging . <EoL>
<BoL> Close the SocketIO object . This does n't close the underlying socket , except if all references to it have disappeared . <EoL>
<BoL> Return the file descriptor of the underlying socket . <EoL>
<BoL> True if the SocketIO is open for reading . <EoL>
<BoL> Read up to len ( b ) bytes into the writable buffer *b* and return the number of bytes read . If the socket is non-blocking and no bytes are available , None is returned . <EoL>
<BoL> True if the SocketIO is open for seeking . <EoL>
<BoL> True if the SocketIO is open for writing . <EoL>
<BoL> Write the given bytes or bytearray object *b* to the socket and return the number of bytes written . <EoL>
<BoL> fromfd ( fd , family , type [ , proto ] ) - > socket object <EoL>
<BoL> socketpair ( [ family [ , type [ , proto ] ] ] ) - > ( socket object , socket object ) <EoL>
<BoL> Convert a numeric family value to an IntEnum member . <EoL>
<BoL> Resolve host and port into list of address info entries . <EoL>
<BoL> Get fully qualified domain name from name . <EoL>
<BoL> Mark this socket as being closed <EoL>
<BoL> We need to trampoline via the event hub . We catch any signal back from the hub indicating that the operation we were waiting on was associated with a filehandle that 's since been invalidated . <EoL>
<BoL> Return the file system path representation of the object . <EoL>
<BoL> Return the path representation of a path-like object . <EoL>
<BoL> execl ( file , *args ) <EoL>
<BoL> execle ( file , *args , env ) <EoL>
<BoL> execlp ( file , *args ) <EoL>
<BoL> execlpe ( file , *args , env ) <EoL>
<BoL> execvp ( file , args ) <EoL>
<BoL> execvpe ( file , args , env ) <EoL>
<BoL> fdopen ( fd [ , mode= ' r ' [ , bufsize ] ] ) - > file_object <EoL>
<BoL> Get the error code out of socket.error objects . <EoL>
<BoL> Returns the sequence of directories that will be searched for the named executable ( similar to a shell ) when launching a process . <EoL>
<BoL> Get an environment variable , return None if it does n't exist . <EoL>
<BoL> Wrap os.open This behaves identically , but collaborates with the hub 's notify_opened protocol . <EoL>
<BoL> ead ( fd , buffersize ) - > string <EoL>
<BoL> emovedirs ( name ) <EoL>
<BoL> enames ( old , new ) <EoL>
<BoL> Copy properties from *source* ( assumed to be a module ) to *destination* ( assumed to be a dict ) . <EoL>
<BoL> spawnl ( mode , file , *args ) - > integer <EoL>
<BoL> spawnle ( mode , file , *args , env ) - > integer <EoL>
<BoL> spawnlp ( mode , file , *args ) - > integer <EoL>
<BoL> spawnlpe ( mode , file , *args , env ) - > integer <EoL>
<BoL> spawnv ( mode , file , args ) - > integer <EoL>
<BoL> spawnve ( mode , file , args , env ) - > integer <EoL>
<BoL> spawnvp ( mode , file , args ) - > integer <EoL>
<BoL> spawnvpe ( mode , file , args , env ) - > integer <EoL>
<BoL> wait ( ) - > ( pid , status ) <EoL>
<BoL> waitpid ( ... ) waitpid ( pid , options ) - > ( pid , status ) <EoL>
<BoL> write ( fd , string ) - > byteswritten <EoL>
<BoL> Get the current event hub singleton object . <EoL>
<BoL> Replacement for Python 's socket.getaddrinfo <EoL>
<BoL> Replacement for Python 's socket.gethostbyname <EoL>
<BoL> Replacement for Python 's socket.gethostbyname_ex <EoL>
<BoL> Replacement for Python 's socket.getnameinfo . <EoL>
<BoL> Takes a certificate in binary DER format and returns the PEM version of it as a string . <EoL>
<BoL> Wrap __repr__ ( ) to reveal the real class name and socket address ( es ) . <EoL>
<BoL> Accepts a new connection from a remote client , and returns a tuple containing that new connection wrapped with a server-side SSL channel , and the address of the remote client . <EoL>
<BoL> Connects to remote ADDR , and then wraps the connection in an SSL channel . <EoL>
<BoL> Connects to remote ADDR , and then wraps the connection in an SSL channel . <EoL>
<BoL> detach ( ) - > file descriptor <EoL>
<BoL> Perform a TLS/SSL handshake . <EoL>
<BoL> Get channel binding data for current connection . <EoL>
<BoL> Returns a formatted version of the data in the certificate provided by the other end of the SSL channel . Return None if no certificate was provided , { } if a certificate was provided , but not validated . <EoL>
<BoL> Read up to LEN bytes and return them . Return zero-length string on EOF . <EoL>
<BoL> Send a file , possibly by using os.sendfile ( ) if this is a clear-text socket . Return the total number of bytes sent . <EoL>
<BoL> Return a string identifying the protocol version used by the current SSL channel , or None if there is no established channel . <EoL>
<BoL> Write DATA to the underlying SSL channel . Returns number of bytes of DATA actually transmitted . <EoL>
<BoL> Takes a certificate in ASCII PEM format and returns the DER-encoded version of it as a byte sequence <EoL>
<BoL> Return the currently selected cipher as a 3-tuple `` ( name , ssl_version , secret_bits ) `` . <EoL>
<BoL> Return the current compression algorithm in use , or `` None `` if compression was not negotiated or not supported by one of the peers . <EoL>
<BoL> Start the SSL/TLS handshake . <EoL>
<BoL> Get channel binding data for current connection . <EoL>
<BoL> Returns a formatted version of the data in the certificate provided by the other end of the SSL channel . <EoL>
<BoL> Return the number of bytes that can be read immediately . <EoL>
<BoL> Read up to 'len ' bytes from the SSL object and return them . <EoL>
<BoL> Return the currently selected ALPN protocol as a string , or `` None `` if a next protocol was not negotiated or if ALPN is not supported by one of the peers . <EoL>
<BoL> Return the currently selected NPN protocol as a string , or `` None `` if a next protocol was not negotiated or if NPN is not supported by one of the peers . <EoL>
<BoL> Return a list of ciphers shared by the client during the handshake or None if this is not a valid server connection . <EoL>
<BoL> Start the SSL shutdown handshake . <EoL>
<BoL> Return a string identifying the protocol version used by the current SSL channel . <EoL>
<BoL> Write 'data ' to the SSL object and return the number of bytes written . <EoL>
<BoL> Create _ASN1Object from short name , long name or OID <EoL>
<BoL> Create _ASN1Object from OpenSSL numeric ID <EoL>
<BoL> Matching according to RFC 6125 , section 6.4.3 <EoL>
<BoL> Exact matching of IP addresses . <EoL>
<BoL> Accepts a new connection from a remote client , and returns a tuple containing that new connection wrapped with a server-side SSL channel , and the address of the remote client . <EoL>
<BoL> Connects to remote ADDR , and then wraps the connection in an SSL channel . <EoL>
<BoL> Perform a TLS/SSL handshake . <EoL>
<BoL> Read up to LEN bytes and return them . Return zero-length string on EOF . <EoL>
<BoL> Write DATA to the underlying SSL channel . Returns number of bytes of DATA actually transmitted . <EoL>
<BoL> Return the time in seconds since the Epoch , given the timestring representing the `` notBefore '' or `` notAfter '' date from a certificate in `` `` % b % d % H : % M : % S % Y % Z '' `` strptime format ( C locale ) . <EoL>
<BoL> Return paths to default cafile and capath . <EoL>
<BoL> Retrieve the certificate from the server at the specified address , and return it as a PEM-encoded string . <EoL>
<BoL> Sets the descriptor to be nonblocking . <EoL>
<BoL> Create a barrier , initialised to 'parties ' threads . <EoL>
<BoL> Place the barrier into a 'broken ' state . <EoL>
<BoL> Reset the barrier to the initial state . <EoL>
<BoL> Wait for the barrier . <EoL>
<BoL> Wake up one or more threads waiting on this condition , if any . <EoL>
<BoL> Wake up all threads waiting on this condition . <EoL>
<BoL> Wait until notified or until a timeout occurs . <EoL>
<BoL> Wait until a condition evaluates to True . <EoL>
<BoL> Acquire a lock , blocking or non-blocking . <EoL>
<BoL> Release a lock , decrementing the recursion level . <EoL>
<BoL> Return the number of Thread objects currently alive . <EoL>
<BoL> Return a list of all Thread objects currently alive . <EoL>
<BoL> Return the main thread object . <EoL>
<BoL> Set a profile function for all threads started from the threading module . <EoL>
<BoL> Set a trace function for all threads started from the threading module . <EoL>
<BoL> Yield control to another eligible coroutine until at least *seconds* have elapsed . <EoL>
<BoL> Some file descriptors may be closed 'silently ' - that is , by the garbage collector , by an external library , etc . <EoL>
<BoL> Shuts down the socket . This is a convenience method for code that wants to gracefully handle regular sockets , SSL.Connection sockets from PyOpenSSL and ssl.SSLSocket objects from Python 2.7 interchangeably . Both types of ssl socket require a shutdown ( ) before close , but they have different arity on their shutdown method . <EoL>
<BoL> Attempts to accept ( ) on the descriptor , returns a client , address tuple if it succeeds ; returns None if it needs to trampoline , and raises any exceptions . <EoL>
<BoL> Attempts to connect to the address , returns the descriptor if it succeeds , returns None if it needs to trampoline , and raises any exceptions . <EoL>
<BoL> Mark this socket as being closed <EoL>
<BoL> A particular file descriptor has been explicitly closed . Register for any waiting listeners to be notified on the next run loop . <EoL>
<BoL> Kills the greenthread using : func : ` kill ` , but only if it hasn't already started running . After being canceled , all calls to : meth : ` wait ` will raise *throw_args* ( which default to : class : ` greenlet.GreenletExit ` ) . <EoL>
<BoL> Kills the greenthread using : func : ` kill ` . After being killed all calls to : meth : ` wait ` will raise *throw_args* ( which default to : class : ` greenlet.GreenletExit ` ) . <EoL>
<BoL> Set up a function to be called with the results of the GreenThread . <EoL>
<BoL> remove linked function set by : meth : ` link ` <EoL>
<BoL> Returns the result of the main function of this GreenThread . <EoL>
<BoL> Like : func : ` kill ` , but only terminates the greenthread if it hasn't already started execution . If the grenthread has already started execution , : func : ` cancel ` has no effect . <EoL>
<BoL> Terminates the target greenthread by raising an exception into it . Whatever that greenthread might be doing ; be it waiting for I/O or another primitive , it sees an exception right away . <EoL>
<BoL> Create a greenthread to run `` func ( *args , **kwargs ) `` . Returns a : class : ` GreenThread ` object which you can use to get the results of the call . <EoL>
<BoL> Spawns *func* after *seconds* have elapsed . It runs as scheduled even if the current greenthread has completed . <EoL>
<BoL> Spawns *func* after *seconds* have elapsed . The function will NOT be called if the current greenthread has exited . <EoL>
<BoL> Same as : func : ` spawn ` , but returns a `` greenlet `` object from which it is not possible to retrieve either a return value or whether it raised any exceptions . This is faster than : func : ` spawn ` ; it is fastest if there are no keyword arguments . <EoL>
<BoL> Wrap a call to some ( yielding ) function with a timeout ; if the called function fails to return before the timeout , cancel it and return a flag value . <EoL>
<BoL> Select the default hub implementation based on what multiplexing libraries are installed . The order that the hubs are tried is : <EoL>
<BoL> Schedule this timer to run in the current runloop . <EoL>
<BoL> Use the module *mod* , containing a class called Hub , as the event hub . Usually not required ; the default hub is usually fine . <EoL>
<BoL> Imports a module in a way that ensures that the module uses `` green '' versions of the standard library modules , so that everything works nonblockingly . <EoL>
<BoL> Globally patches certain system modules to be greenthread-friendly . <EoL>
<BoL> Restores the modules that the saver knows about into sys.modules . <EoL>
<BoL> Saves the named modules to the object . <EoL>
<BoL> Make locks created before monkey-patching safe . <EoL>
<BoL> Kind of the contrapositive of patch_function : decorates a function such that when it 's called , sys.modules is populated only with the unpatched versions of the specified modules . Unlike patch_function , only the names of the modules need be supplied , and there are no defaults . This is a gross hack ; tell your kids not to import inside function bodies ! <EoL>
<BoL> Base method for `` injecting '' greened modules into an imported module . It imports the module specified in *module_name* , arranging things so that the already-imported modules in *additional_modules* are used when *module_name* makes its imports . <EoL>
<BoL> Returns True if the given module is monkeypatched currently , False if not . *module* can be either the module itself or its name . <EoL>
<BoL> This returns an unpatched version of a module ; this is useful for Eventlet itself ( i.e . tpool ) . <EoL>
<BoL> Decorator that returns a version of the function that patches some modules for the duration of the function call . This is deeply gross and should only be used for functions that import network libraries within their function bodies that there is no way of getting around . <EoL>
<BoL> Wake up the greenlet that is calling wait ( ) currently ( if there is one ) . Can only be called from Hub 's greenlet . <EoL>
<BoL> Make greenlet calling wait ( ) wake up ( if there is a wait ( ) ) . Can only be called from Hub 's greenlet . <EoL>
<BoL> Wait until switch ( ) or throw ( ) is called . <EoL>
<BoL> No-op In py3k . Exception information is not visible outside of except statements . sys.exc_clear became obsolete and removed . <EoL>
<BoL> Create a new answer <EoL>
<BoL> Load hosts file <EoL>
<BoL> Read the contents of the hosts file <EoL>
<BoL> Return a list of all the aliases of a given cname <EoL>
<BoL> Initialise the resolver proxy <EoL>
<BoL> Return a list of all the aliases of a given hostname <EoL>
<BoL> Resolve a hostname to a list of addresses <EoL>
<BoL> coro friendly replacement for dns.query._net_read Read the specified number of bytes from sock . <EoL>
<BoL> coro friendly replacement for dns.query._net_write Write the specified data to the socket . A Timeout exception will be raised if the operation is not completed by the expiration time . <EoL>
<BoL> Return a list of for aliases for the given hostname <EoL>
<BoL> Return True if host is a valid IPv4 or IPv6 address <EoL>
<BoL> Return True if host is a valid IPv4 address <EoL>
<BoL> Return True if host is a valid IPv6 address <EoL>
<BoL> Return the canonical name of a hostname <EoL>
<BoL> Adds ` .is_timeout=True ` attribute to objects returned by ` base ( ) ` . <EoL>
<BoL> initialize group and make gateways as specified . execmodel can be 'thread ' or 'eventlet ' . <EoL>
<BoL> ( re-entrant ) allocate id for the given xspec object . <EoL>
<BoL> create and configure a gateway to a Python interpreter . The `` spec `` string encodes the target gateway type and configuration information . The general format is : : <EoL>
<BoL> remote_exec source on all member gateways and return MultiChannel connecting to all sub processes . <EoL>
<BoL> Set the execution model for local and remote site . <EoL>
<BoL> trigger exit of member gateways and wait for termination of member gateways and associated subprocesses . <EoL>
<BoL> instantiate a gateway to a subprocess started with the given 'python ' executable . <EoL>
<BoL> Call all callbacks <EoL>
<BoL> Send one item <EoL>
<BoL> Sends a sourcedir to all added targets . Flag indicates whether to raise an error or return in case of lack of targets <EoL>
<BoL> This Gateway provides interaction with a remote process by connecting to a specified socket . On the remote side you need to manually start a small script ( py/execnet/script/socketserver.py ) that accepts SocketGateway connections or use the experimental new_remote ( ) method on existing gateways . <EoL>
<BoL> instantiate a remote ssh process with the given 'sshaddress ' and remotepython version . you may specify an ssh_config file . <EoL>
<BoL> write a serialized bytestring of the given obj to the given stream . <EoL>
<BoL> return a serialized bytestring of the given obj . <EoL>
<BoL> return string representing gateway type and status . <EoL>
<BoL> return some sys/env information from remote . <EoL>
<BoL> trigger gateway exit . Defer waiting for finishing of receiver-thread and subprocess activity to when group.terminate ( ) is called . <EoL>
<BoL> return True if gateway is able to receive data . <EoL>
<BoL> Wait for receiverthread to terminate . <EoL>
<BoL> return a new independent channel . <EoL>
<BoL> set the string coercion for this gateway the default is to try to convert py2 str as py3 str , but not to try and convert py3 str to py2 str <EoL>
<BoL> return channel object and connect it to a remote execution thread where the given `` source `` executes . <EoL>
<BoL> DEPRECATED . Is currently a NO-OPERATION already . <EoL>
<BoL> return information object about remote execution status . <EoL>
<BoL> close down this channel with an optional error message . Note that closing of a channel tied to remote_exec happens automatically at the end of execution and can not be done explicitely . <EoL>
<BoL> return True if the channel is closed . A closed channel may still hold items . <EoL>
<BoL> return a file-like object . mode can be ' w ' or ' r ' for writeable/readable files . if proxyclose is true file.close ( ) will also close the channel . <EoL>
<BoL> eceive a data item that was sent from the other side . <EoL>
<BoL> set the string coercion for this channel the default is to try to convert py2 str as py3 str , but not to try and convert py3 str to py2 str <EoL>
<BoL> sends the given item to the other side of the channel , possibly blocking if the sender queue is full . <EoL>
<BoL> set a callback function for receiving items . <EoL>
<BoL> wait until this channel is closed ( or the remote side otherwise signalled that no more data was being sent ) . <EoL>
<BoL> create a new Channel with 'id ' ( or create new id if None ) . <EoL>
<BoL> Read exactly 'numbytes ' bytes from the pipe . <EoL>
<BoL> write out all data bytes . <EoL>
<BoL> get the result object from an asynchronous function execution . if the function execution raised an exception , then calling get ( ) will reraise that exception including its traceback . <EoL>
<BoL> by default allow unlimited number of spawns . <EoL>
<BoL> integrate the thread with which we are called as a primary thread for executing functions triggered with spawn ( ) . <EoL>
<BoL> return Reply object for the asynchronous dispatch of the given func ( *args , **kwargs ) . <EoL>
<BoL> trigger shutdown and wait for completion of all executions . <EoL>
<BoL> wait until all active spawns have finished executing . <EoL>
<BoL> derserialize an object form the specified stream . <EoL>
<BoL> return the object as deserialized from the given bytestring . <EoL>
<BoL> fix for jython 2.5.1 <EoL>
<BoL> Use shell lexer to split the given path into a list of components , taking care to handle Windows ' '\ ' correctly . <EoL>
<BoL> Decode the variable length encoded camera info section . <EoL>
<BoL> Decode Canon MakerNote tag based on offset within tag . <EoL>
<BoL> Return first IFD . <EoL>
<BoL> Return the pointer to next IFD . <EoL>
<BoL> TODO Decode Olympus MakerNote tag based on offset within tag . <EoL>
<BoL> Decode all the camera-specific MakerNote formats <EoL>
<BoL> Return a list of entries in the given IFD . <EoL>
<BoL> Extract JPEG thumbnail . <EoL>
<BoL> Extract uncompressed TIFF thumbnail . <EoL>
<BoL> Return the list of IFDs in the header . <EoL>
<BoL> Convert offset to string . <EoL>
<BoL> Convert slice to integer , based on sign and endian flags . <EoL>
<BoL> Do n't throw an exception when given an out of range character . <EoL>
<BoL> Special version to deal with the code in the first 8 bytes of a user comment . <EoL>
<BoL> Extract multi-byte integer in Intel format ( big endian ) . <EoL>
<BoL> Extract multi-byte integer in Motorola format ( little endian ) . <EoL>
<BoL> Configure the logger . <EoL>
<BoL> First digit seems to be in steps of 1/6 EV . <EoL>
<BoL> decode Olympus SpecialMode tag in MakerNote <EoL>
<BoL> Creates an expression compiler with a ` context ` object . <EoL>
<BoL> Compiles the ` text ` expression , returns a finalized object . <EoL>
<BoL> Compile ` operator ` with operands ` left ` and ` right ` . Default implementation returns ` BinaryOperator ` object with attributes ` operator ` , ` left ` and ` right ` . <EoL>
<BoL> Called when a function call is encountered in the expression . ` function ` is a ` Variable ` object ( you can use ` str ( function ) ` to get the full function name reference as string ) , ` args ` is a list of function arguments . <EoL>
<BoL> Compile a literal object such as number or a string . Default implementation returns a string or numeric object . <EoL>
<BoL> Called when an unary ` operator ` is encountered . Default implementation returns ` UnaryOperator ` object with attributes ` operator ` and ` operand ` <EoL>
<BoL> Compile variable ` reference ` . Default implementation returns ` Variable ` object . <EoL>
<BoL> Return final object as a result of expression compilation . By default returns the object returned by the last executed compilation method . <EoL>
<BoL> Creates a variable reference . Attributes : ` reference ` – variable reference as a list of variable parts and ` name ` as a full variable name . This object is passed to the ` compile_variable ( ) ` and ` compile_function ( ) ` <EoL>
<BoL> The utility handles the following difference with byte strings in Python 2 and 3 : <EoL>
<BoL> byte strings units are ints <EoL>
<BoL> Imports a Ptyhon module referenced by absolute or relative path `` mod_file `` . The module is retured . <EoL>
<BoL> Convert the integer `` n `` to a single character byte string . <EoL>
<BoL> Construct with a path and invoke `` _read `` . All other members are set to None . <EoL>
<BoL> Subclasses MUST override this method and set `` self._info `` , `` self._tag `` and `` self.type `` . <EoL>
<BoL> Returns date strings that conform to ISO-8601 . The returned string will be no larger than 17 characters . <EoL>
<BoL> Parses date strings that conform to ISO-8601 . <EoL>
<BoL> Return the mime-type for `` filename `` . If `` with_encoding `` is True the encoding is included and a 2-tuple is returned , ( mine , enc ) . <EoL>
<BoL> Loads the file identified by `` path `` and returns a concrete type of : class : ` eyed3.core.AudioFile ` . <EoL>
<BoL> A function that is invoked when non-fatal parse , format , etc . <EoL>
<BoL> Called for each directory `` d `` **after** `` handleFile `` has been called for each file in `` files `` . `` StopIteration `` may be raised to halt iteration . <EoL>
<BoL> Called when there are no more files to handle . <EoL>
<BoL> Called for each file walked . <EoL>
<BoL> Identify the contents of ` buf ` <EoL>
<BoL> Copy `` src_fp `` to `` dest_fp `` in `` chunk_sz `` byte increments . <EoL>
<BoL> This function returns a date of some sort , amongst all the possible dates ( members called release_date , original_release_date , and recording_date of type eyed3.core.Date ) . <EoL>
<BoL> Format `` size `` ( nuber of bytes ) into string format doing KB , MB , or GB conversion where necessary . <EoL>
<BoL> Format `` seconds `` ( number of seconds ) as a string representation . When `` short `` is False ( the default ) the format is : <EoL>
<BoL> Format a timedelta object `` td `` into a string . <EoL>
<BoL> The `` file_path `` is the desired file name , and it is returned if the file does not exist . <EoL>
<BoL> Function decorator to enforce unicode argument types . <EoL>
<BoL> Function decorator to enforce unicode argument types . <EoL>
<BoL> A wrapper around os.walk which handles exclusion patterns and multiple path types ( unicode , pathlib.Path , bytes ) . <EoL>
<BoL> Gets information about a user access token issued by an app . See < https : //developers.facebook.com/docs/facebook-login/ access-tokens/debugging-and-error-handling > <EoL>
<BoL> Deletes the object with the given ID from the graph . <EoL>
<BoL> Deletes the Request with the given ID for the given user . <EoL>
<BoL> Extends the expiration time of a valid OAuth access token . See < https : //developers.facebook.com/docs/facebook-login/access-tokens/ expiration-and-extension > <EoL>
<BoL> Get all pages from a get_connections call <EoL>
<BoL> Get the application 's access token as a string . If offline=True , use the concatenated app ID and secret instead of making an API call . < https : //developers.facebook.com/docs/facebook-login/ access-tokens # apptokens > <EoL>
<BoL> Build a URL to create an OAuth dialog . <EoL>
<BoL> Fetches the connections for given object . <EoL>
<BoL> Fetches the given object from the graph . <EoL>
<BoL> Fetches all of the given object from the graph . <EoL>
<BoL> Fetches the permissions object from the graph . <EoL>
<BoL> Fetches the current version number of the Graph API being used . <EoL>
<BoL> Writes the given comment on the given post . <EoL>
<BoL> Likes the given post . <EoL>
<BoL> Writes the given object to the graph , connected to the given parent . <EoL>
<BoL> Upload an image using multipart/form-data . <EoL>
<BoL> https : //developers.facebook.com/docs/places/search <EoL>
<BoL> Parses the cookie set by the official Facebook JavaScript SDK . <EoL>
<BoL> Return dictionary with signed request data . <EoL>
<BoL> Initialize GraphAPI with an OAuth access token . <EoL>
<BoL> Returns a SHA256 of the oauth_token signed by appsecret . https : //developers.facebook.com/docs/graph-api/securing-requests/ <EoL>
<BoL> Parse the response from Facebook 's Graph API . <EoL>
<BoL> Fetch an object from the Graph API and parse the output , returning a tuple where the first item is the object yielded by the Graph API and the second is the URL for the next page of results , or `` None `` if results have been exhausted . <EoL>
<BoL> Make a batch request.Batches a list into constant size chunks . <EoL>
<BoL> Delete an item in the Graph API . <EoL>
<BoL> Initialize GraphAPI with an OAuth access token for an application . <EoL>
<BoL> Get an item from the Graph API . <EoL>
<BoL> Post an item to the Graph API . <EoL>
<BoL> Search for an item in the Graph API . <EoL>
<BoL> Initialize a signed request . <EoL>
<BoL> Generate a signed request from this instance . <EoL>
<BoL> Parse a signed request , returning a dictionary describing its payload . <EoL>
<BoL> Get an OAuth access token for the given application . <EoL>
<BoL> Get an extended OAuth access token . <EoL>
<BoL> Would be called if trying to instantiate the class . <EoL>
<BoL> Extension point for custom kwargs adjustment . <EoL>
<BoL> Hook called after post-generation declarations have been handled . <EoL>
<BoL> generate the object . <EoL>
<BoL> Set up an initial sequence value for Sequence attributes . <EoL>
<BoL> Build a dict of attribute values , respecting declaration order . <EoL>
<BoL> Build an instance of the associated class , with overriden attrs . <EoL>
<BoL> Build a batch of instances of the given class , with overriden attrs . <EoL>
<BoL> Create an instance of the associated class , with overriden attrs . <EoL>
<BoL> Create a batch of instances of the given class , with overriden attrs . <EoL>
<BoL> Retrieve a copy of the declared attributes . <EoL>
<BoL> Generate a new instance . <EoL>
<BoL> Generate a batch of instances . <EoL>
<BoL> Reset the sequence counter . <EoL>
<BoL> Generate a new instance . <EoL>
<BoL> Generate a batch of instances . <EoL>
<BoL> Retrieve a stub of the associated class , with overriden attrs . <EoL>
<BoL> Stub a batch of instances of the given class , with overriden attrs . <EoL>
<BoL> Evaluate the current ContainerAttribute . <EoL>
<BoL> Evaluate the current definition and fill its attributes . <EoL>
<BoL> Evaluate the current definition and fill its attributes . <EoL>
<BoL> Retrieve the wrapped factory.Factory subclass . <EoL>
<BoL> Save again the instance if creating and at least one hook ran . <EoL>
<BoL> Actually build an instance of the model_class . <EoL>
<BoL> Create an instance of the model , and save it to the database . <EoL>
<BoL> Create an instance of the model through objects.get_or_create . <EoL>
<BoL> Actually create an instance of the model_class . <EoL>
<BoL> Add a new Faker provider for the specified locale <EoL>
<BoL> Reset the internal iterator . <EoL>
<BoL> Evaluate this declaration . <EoL>
<BoL> Retrieve the wrapped factory.Factory subclass . <EoL>
<BoL> This might alter fields it 's injecting . <EoL>
<BoL> Create an instance of the model , and save it to the database . <EoL>
<BoL> Find out in what order parameters should be called . <EoL>
<BoL> Identify which factory should be used for a shared counter . <EoL>
<BoL> Initialize our counter pointer . <EoL>
<BoL> Determines if a class attribute is a field value declaration . <EoL>
<BoL> Extension point for loading model classes . <EoL>
<BoL> Retrieve a new sequence ID . <EoL>
<BoL> Convert an attributes dict to a ( args , kwargs ) tuple . <EoL>
<BoL> Override the default Factory ( ) syntax to call the default strategy . <EoL>
<BoL> Record attributes as a pattern for later instance construction . <EoL>
<BoL> Provide the default value for all allowed fields . <EoL>
<BoL> Retrieve all FactoryMetaClass-derived bases from a list . <EoL>
<BoL> Find the first definition of an attribute according to MRO order . <EoL>
<BoL> Force the use of a different strategy . <EoL>
<BoL> Create a factory for the given class , and build an instance . <EoL>
<BoL> Create a factory for the given class , and build a batch of instances . <EoL>
<BoL> Extract a list of ( key , value ) pairs , suitable for our __init__ . <EoL>
<BoL> Return a dict ( ) suitable for our __init__ . <EoL>
<BoL> Filter a set of declarations : keep only those related to this object . <EoL>
<BoL> Rebuild a full declaration name from its components . <EoL>
<BoL> Split a declaration name into a ( declaration , subpath ) tuple . <EoL>
<BoL> Add new declarations to this set/ <EoL>
<BoL> Retrieve the list of declarations , with their context . <EoL>
<BoL> Retrieve an attribute 's value . <EoL>
<BoL> Prevent setting attributes once __init__ is done . <EoL>
<BoL> Build a factory instance . <EoL>
<BoL> Recurse into a sub-factory call . <EoL>
<BoL> Create a factory for the given class , and create an instance . <EoL>
<BoL> Create a factory for the given class , and create a batch of instances . <EoL>
<BoL> Compute the overrides for this parameter . <EoL>
<BoL> Retrieve the list of other parameters modified by this one . <EoL>
<BoL> Actually generate the related attribute . <EoL>
<BoL> Call this hook ; no return value is expected . <EoL>
<BoL> Try to retrieve the given attribute of an object , digging on ' . ' . <EoL>
<BoL> Create data for the field . <EoL>
<BoL> Fill in the field . <EoL>
<BoL> Lazy loading of get_model . <EoL>
<BoL> Wrapper around django 's get_model . <EoL>
<BoL> Simple helper to ensure Django is available . <EoL>
<BoL> Create a factory for the given class , and generate an instance . <EoL>
<BoL> Create a factory for the given class , and generate instances . <EoL>
<BoL> Turn a generator function into an iterator attribute . <EoL>
<BoL> Create a new , simple factory for the given class . <EoL>
<BoL> Create a factory for the given class , and simple_generate an instance . <EoL>
<BoL> Create a factory for the given class , and simple_generate instances . <EoL>
<BoL> Create a factory for the given class , and stub an instance . <EoL>
<BoL> Create a factory for the given class , and stub a batch of instances . <EoL>
<BoL> Extracts all values beginning with a given prefix from a dict . <EoL>
<BoL> Import an object from its absolute path . <EoL>
<BoL> Generate a text-compatible repr of an object . <EoL>
<BoL> Extracts all values from a given list of prefixes . <EoL>
<BoL> Sort an iterable of OrderedBase instances . <EoL>
<BoL> very very hardcoded/dirty re/split stuff , but no dependencies <EoL>
<BoL> very very hardcoded/dirty re/split stuff , but no dependencies <EoL>
<BoL> This is a secure way to make a fake from another Provider . <EoL>
<BoL> Returns added providers . <EoL>
<BoL> Replaces tokens ( like ' { { tokenName } } ' or ' { { tokenName } } ' ) with the result from the token method call . <EoL>
<BoL> Calls random.seed <EoL>
<BoL> This method adds a provider method to generator . Override this method to add some decoration or logging stuff . <EoL>
<BoL> Replaces all placeholders with random numbers and letters . <EoL>
<BoL> Replaces all circumflex ( '^ ' ) occurrences with a random hexadecimal character . <EoL>
<BoL> Replaces all question mark ( ' ? ' ) occurrences with a random letter . <EoL>
<BoL> Replaces all placeholders in given text with randomized values , replacing : all hash sign ( ' # ' ) occurrences with a random digit ( from 0 to 9 ) ; all percentage sign ( ' % ' ) occurrences with a random non-zero digit ( from 1 to 9 ) ; all exclamation mark ( ' ! ' ) occurrences with a random digit ( from 0 to 9 ) or an empty string ; and all at symbol ( ' @ ' ) occurrences with a random non-zero digit ( from 1 to 9 ) or an empty string . <EoL>
<BoL> Returns a list of random , non-unique elements from a passed object . <EoL>
<BoL> Returns a random digit/number between 0 and 9 . <EoL>
<BoL> Returns a random non-zero digit/number between 1 and 9 . <EoL>
<BoL> Returns a random non-zero digit/number between 1 and 9 or and empty string . <EoL>
<BoL> Returns a random digit/number between 0 and 9 or an empty string . <EoL>
<BoL> Returns a random element from a passed object . <EoL>
<BoL> Returns a random integer between two values . <EoL>
<BoL> Returns a random letter ( between a-z and A-Z ) . <EoL>
<BoL> Returns a random letter ( between a-z and A-Z ) . <EoL>
<BoL> Returns a random lowercase letter ( between a-z ) . <EoL>
<BoL> Returns a random number with 1 digit ( default , when digits==None ) , a random number with 0 to given number of digits , or a random number with given number to given number of digits ( when `` fix_len==True `` ) . <EoL>
<BoL> Returns a list of random unique elements for the specified length . Multiple occurrences of the same value increase its probability to be in the output . <EoL>
<BoL> Returns a random letter ( between A-Z ) . <EoL>
<BoL> : example '791 Crist Parks , Sashabury , IL 86039-9874 ' <EoL>
<BoL> : example '791 ' <EoL>
<BoL> : example 'Sashabury ' <EoL>
<BoL> : example 'town ' <EoL>
<BoL> Optionally center the coord and pick a point within radius . <EoL>
<BoL> : example 86039-9874 <EoL>
<BoL> : example '791 Crist Parks ' <EoL>
<BoL> : example 'Crist Parks ' <EoL>
<BoL> : example 'Avenue ' <EoL>
<BoL> Unrelated but handy function to calculate Unix timestamp from GMT . <EoL>
<BoL> Turn the prefix length into a bitwise netmask <EoL>
<BoL> Turn the given IP string into an integer for comparison . <EoL>
<BoL> Test if the IP string is a hostmask ( rather than a netmask ) . <EoL>
<BoL> Verify that the netmask is valid . <EoL>
<BoL> Make a ( netmask , prefix_len ) tuple from the given argument . <EoL>
<BoL> Convert a decimal octet into an integer . <EoL>
<BoL> Return prefix length from the bitwise netmask . <EoL>
<BoL> Turn a netmask/hostmask string into a prefix length <EoL>
<BoL> Return prefix length from a numeric string <EoL>
<BoL> Return the reverse DNS pointer name for the IPv4 address . <EoL>
<BoL> Turns a 32-bit integer into dotted decimal notation . <EoL>
<BoL> Take an IP string/int and return an object of the correct type . <EoL>
<BoL> Take an IP string/int and return an object of the correct type . <EoL>
<BoL> Calculate the check digit for ISBN-10 . See https : //en.wikipedia.org/wiki/International_Standard_Book_Number for calculation . <EoL>
<BoL> Calculate the check digit for ISBN-13 . See https : //en.wikipedia.org/wiki/International_Standard_Book_Number for calculation . <EoL>
<BoL> Generate a safe date from a datetime.date object . <EoL>
<BoL> Generate a safe datetime from a datetime.date or datetime.datetime object . <EoL>
<BoL> Similar to smart_text , except that lazy instances are resolved to strings , rather than kept as lazy objects . If strings_only is True , do n't convert ( some ) non-string-like objects . <EoL>
<BoL> Determine if the object instance is of a protected type . Objects of protected types are preserved as-is when passed to force_text ( strings_only=True ) . <EoL>
<BoL> Converts to lowercase , removes non-word characters ( alphanumerics and underscores ) and converts spaces to hyphens . <EoL>
<BoL> Magic method to allow FakeStrictRedis commands to be called . <EoL>
<BoL> Create a pipeline for the specified FakeStrictRedis instance . <EoL>
<BoL> Run all the commands in the pipeline and return the results . <EoL>
<BoL> Returns a boolean indicating the value of `` offset `` in `` name `` <EoL>
<BoL> Set the value at key `` name `` to `` value `` if key does n't exist Return the value at key `` name `` atomically <EoL>
<BoL> Sets each key in the `` mapping `` dict to its corresponding value in the hash `` name `` <EoL>
<BoL> Set `` key `` to `` value `` within hash `` name `` Returns 1 if HSET created a new field , otherwise 0 <EoL>
<BoL> Set `` key `` to `` value `` within hash `` name `` if `` key `` does not exist . Returns 1 if HSETNX created a field , otherwise 0 . <EoL>
<BoL> Increments the value of `` key `` by `` amount `` . If no key exists , the value will be initialized as `` amount `` <EoL>
<BoL> Sets each key in the `` mapping `` dict to its corresponding value if none of the keys are already set <EoL>
<BoL> Return an object that can be used to issue Redis commands in a batch . <EoL>
<BoL> Store the difference of sets specified by `` keys `` into a new set named `` dest `` . Returns the number of keys in the new set . <EoL>
<BoL> Store the intersection of sets specified by `` keys `` into a new set named `` dest `` . Returns the number of keys in the new set . <EoL>
<BoL> Store the union of sets specified by `` keys `` into a new set named `` dest `` . Returns the number of keys in the new set . <EoL>
<BoL> For each kwarg in `` pairs `` , add that item and it 's score to the sorted set `` name `` . <EoL>
<BoL> Intersect multiple sorted sets specified by `` keys `` into a new sorted set , `` dest `` . Scores in the destination will be aggregated based on the `` aggregate `` , or SUM if none is provided . <EoL>
<BoL> Return a range of values from sorted set `` name `` between `` start `` and `` end `` sorted in ascending order . <EoL>
<BoL> Returns a 0-based value indicating the rank of `` value `` in sorted set `` name `` <EoL>
<BoL> Remove all elements in the sorted set `` name `` with ranks between `` min `` and `` max `` . <EoL>
<BoL> Remove all elements in the sorted set `` name `` with scores between `` min `` and `` max `` . Returns the number of elements removed . <EoL>
<BoL> Return a range of values from sorted set `` name `` between `` start `` and `` num `` sorted in descending order . <EoL>
<BoL> Returns a 0-based value indicating the descending rank of `` value `` in sorted set `` name `` <EoL>
<BoL> Union multiple sorted sets specified by `` keys `` into a new sorted set , `` dest `` . Scores in the destination will be aggregated based on the `` aggregate `` , or SUM if none is provided . <EoL>
<BoL> Set any number of score , element-name pairs to the key `` name `` . Pairs can be specified in two ways : <EoL>
<BoL> WSGI ` app ` method . <EoL>
<BoL> Compose a response for the given HTTPError instance . <EoL>
<BoL> Compose a response for the given HTTPStatus instance . <EoL>
<BoL> Convert resp content into an iterable as required by PEP 333 <EoL>
<BoL> Search routes for a matching responder . <EoL>
<BoL> Handle an exception raised from mw or a responder . <EoL>
<BoL> Register a handler for a given exception error type . <EoL>
<BoL> Associate a templatized URI path with a resource . <EoL>
<BoL> Register a sink method for the API . <EoL>
<BoL> Add a route to a directory of static files . <EoL>
<BoL> Override the default serializer for instances of : class : ` ~.HTTPError ` . <EoL>
<BoL> Like iteritems ( ) , but with all lowercase keys . <EoL>
<BoL> Return a basic dictionary representing the error . <EoL>
<BoL> Return a pretty-printed JSON representation of the error . <EoL>
<BoL> Return an XML-encoded representation of the error . <EoL>
<BoL> Determine whether or not the client accepts a given media type . <EoL>
<BoL> Return the client 's preferred media type , given several choices . <EoL>
<BoL> Retrieve the raw string value for the given header . <EoL>
<BoL> Return an HTTP header with HTTP-Date values as a datetime . <EoL>
<BoL> Return the raw value of a query string parameter as a string . <EoL>
<BoL> Return the decoded JSON value of a query string parameter . <EoL>
<BoL> Return the value of a query string parameter as an UUID . <EoL>
<BoL> Write an error message to the server 's log . <EoL>
<BoL> Wrapper around set_header to set a content-type . <EoL>
<BoL> Convert headers into the format expected by WSGI servers . <EoL>
<BoL> Set or append a header for this response . <EoL>
<BoL> Delete a header that was previously set for this response . <EoL>
<BoL> Retrieve the raw string value for the given header . <EoL>
<BoL> Set a header for this response to a given value . <EoL>
<BoL> Set several headers at once . <EoL>
<BoL> Convenience method for setting both ` stream ` and ` stream_len ` . <EoL>
<BoL> Unset a cookie in the response <EoL>
<BoL> Return the daylight saving time ( DST ) adjustment . <EoL>
<BoL> Get the name of this timezone . <EoL>
<BoL> Get the offset from UTC . <EoL>
<BoL> Decorator to execute the given action function *after* the responder . <EoL>
<BoL> Introspecs the arguments of a callable . <EoL>
<BoL> Serialize the given instance of HTTPError . <EoL>
<BoL> Create a search function for routing requests . <EoL>
<BoL> Check middleware interface and prepare it to iterate . <EoL>
<BoL> Wrap an old-style error serializer to add body/content_type setting . <EoL>
<BoL> Decorator to execute the given action function *before* the responder . <EoL>
<BoL> Flags a method as deprecated . <EoL>
<BoL> Converts a `` datetime `` instance to an HTTP date string . <EoL>
<BoL> Parses the value of a Forwarded header . <EoL>
<BoL> Unquote an RFC 7320 `` quoted-string '' . <EoL>
<BoL> Get a bound method of the given object by name . <EoL>
<BoL> Gets both the http status code and description from just a code <EoL>
<BoL> Merge responder args into kwargs . <EoL>
<BoL> Execute the given action function after a responder method . <EoL>
<BoL> Execute the given action function before a responder method . <EoL>
<BoL> Converts an HTTP date string to a datetime instance . <EoL>
<BoL> Returns the current UTC time as an IMF-fixdate . <EoL>
<BoL> Deserialize the : any : ` falcon.Request ` body . <EoL>
<BoL> Serialize the media object on a : any : ` falcon.Response ` <EoL>
<BoL> Returns an inspect.ArgSpec instance given a function object . <EoL>
<BoL> Returns the function object of a given callable . <EoL>
<BoL> Converts a dictionary of parameters to a query string . <EoL>
<BoL> Helper function for proxing reads to the underlying stream . <EoL>
<BoL> Read from the stream . <EoL>
<BoL> Always returns `` True `` . <EoL>
<BoL> Read a line from the stream . <EoL>
<BoL> Read lines from the stream . <EoL>
<BoL> Always returns `` False `` . <EoL>
<BoL> Always raises IOError ; writing is not supported . <EoL>
<BoL> Always returns `` False `` . <EoL>
<BoL> Create a read-only header property . <EoL>
<BoL> Parse a canonical 'host : port ' string into parts . <EoL>
<BoL> Raise 400 HTTPBadRequest erro <EoL>
<BoL> Create a default responder for the OPTIONS method <EoL>
<BoL> Create a responder for `` 405 Method Not Allowed '' <EoL>
<BoL> Raise 405 HTTPMethodNotAllowed erro <EoL>
<BoL> Default options responder . <EoL>
<BoL> Raise 404 HTTPNotFound erro <EoL>
<BoL> Formats a Content-Disposition header given a filename . <EoL>
<BoL> Join an iterable of strings with commas . <EoL>
<BoL> Format a range header tuple per the HTTP spec . <EoL>
<BoL> Create a header getter/setter . <EoL>
<BoL> Check if argument encodes to ascii without error . <EoL>
<BoL> Convert a URI template field value to another format or type . <EoL>
<BoL> Generates Python code for the entire routing tree . <EoL>
<BoL> Generates a coarse AST for the router . <EoL>
<BoL> Validates a single path segment of a URI template . <EoL>
<BoL> Adds a route between a URI path template and a resource . <EoL>
<BoL> Search for a route that matches the given partial URI . <EoL>
<BoL> Resource responder for this route . <EoL>
<BoL> Check whether the given path matches this route . <EoL>
<BoL> Compile the given URI template string into a pattern matcher . <EoL>
<BoL> Returns True if this node conflicts with a given template segment . <EoL>
<BoL> Returns True if this node matches the supplied template segment . <EoL>
<BoL> Maps HTTP methods ( e.g. , 'GET ' , 'POST ' ) to methods of a resource object . <EoL>
<BoL> Maps HTTP methods ( e.g. , 'GET ' , 'POST ' ) to methods of a resource object . <EoL>
<BoL> Maps HTTP methods not explicitly defined on a resource to default responders . <EoL>
<BoL> Decodes percent-encoded characters in a URI or query string . <EoL>
<BoL> Perform compilation of `` resource `` . <EoL>
<BoL> Determine whether to process the resource , based on the mtime of the target and source . <EoL>
<BoL> Return an absolute path to the source file ( to use as input for compilation ) <EoL>
<BoL> Return an absolute path to the target file ( to use as output for compilation ) <EoL>
<BoL> Need this group resource . <EoL>
<BoL> This can only be called once all resources are known . <EoL>
<BoL> Register a Resource with this Library . <EoL>
<BoL> Get a unique signature for this Library . <EoL>
<BoL> Returns True if base_url has been set . <EoL>
<BoL> Returns True if any resources are needed . <EoL>
<BoL> Construct URL to library . <EoL>
<BoL> Add a particular resource to the needed resources . <EoL>
<BoL> Retrieve the list of resources needed . <EoL>
<BoL> Set the base_url . The base_url can only be set ( 1 ) if it has not been set in the NeededResources configuration and ( 2 ) if it has not been set before using this method . <EoL>
<BoL> Get Resource in another mode . <EoL>
<BoL> Declare that the application needs this resource . <EoL>
<BoL> Bundle sorted resources together . <EoL>
<BoL> Return the last modification time of a file , reported by os.stat ( ) . <EoL>
<BoL> Construct the command for dist , updating vars ( self ) with any keyword parameters . <EoL>
<BoL> Make our distribution available in this Python interpreter , so that we can access its entry points and import it . <EoL>
<BoL> getting python files <EoL>
<BoL> Case-sensitive path existence check <EoL>
<BoL> In a context , remove and restore os.link if it exists <EoL>
<BoL> Add all the default files to self.filelist : - README or README.txt - setup.py - test/test*.py - all pure Python modules mentioned in setup script - all files pointed by package_data ( build_py ) - all files defined in data_files . <EoL>
<BoL> If the current verbosity level is of greater than or equal to 'level ' print 'msg ' to stdout . <EoL>
<BoL> Deprecated API . <EoL>
<BoL> Callable used for the check sub-command . <EoL>
<BoL> Print 'msg ' to stdout if the global DEBUG ( taken from the DISTUTILS_DEBUG environment variable ) flag is true . <EoL>
<BoL> Ensure that 'option ' is the name of an existing file . <EoL>
<BoL> Ensure that 'option ' is a string ; if not defined , set it to 'default ' . <EoL>
<BoL> Ensure that 'option ' is a list of strings . If 'option ' is currently a string , we split it either on / , \s*/ or /\s+/ , so `` foo bar baz '' , `` foo , bar , baz '' , and `` foo , bar baz '' all become [ `` foo '' , `` bar '' , `` baz '' ] . <EoL>
<BoL> Return the list of archive files created when the command was run , or None if the command has n't run yet . <EoL>
<BoL> Figure out the list of files to include in the source distribution , and put it in 'self.filelist ' . This might involve reading the manifest template ( and writing the manifest ) , or just reading the manifest , or just using the default file set -- it all depends on the user 's options . <EoL>
<BoL> Wrapper around Distribution 's 'get_command_obj ( ) ' method : find ( create if necessary and 'create ' is true ) the command object for 'command ' , call its 'ensure_finalized ( ) ' method , and return the finalized command object . <EoL>
<BoL> Determine the sub-commands that are relevant in the current distribution ( ie. , that need to be run ) . <EoL>
<BoL> Workaround for # 516 <EoL>
<BoL> Move a file respecting dry-run flag . <EoL>
<BoL> Prune off branches that might slip into the file list as created by 'read_template ( ) ' , but really do n't belong there : * the build tree ( typically `` build '' ) * the release tree itself ( only an issue if we ran `` sdist '' previously with -- keep-temp , or it aborted ) * any RCS , CVS , .svn , .hg , .git , .bzr , _darcs directories <EoL>
<BoL> Read the manifest file ( named by 'self.manifest ' ) and use it to fill in 'self.filelist ' , the list of files to include in the source distribution . <EoL>
<BoL> Read and parse manifest template file named by self.template . <EoL>
<BoL> Run some other command : uses the 'run_command ( ) ' method of Distribution , which creates and finalizes the command object if necessary and then invokes its 'run ( ) ' method . <EoL>
<BoL> Set the values of any `` undefined '' options from corresponding option values in some other command object . <EoL>
<BoL> Spawn an external command respecting dry-run flag . <EoL>
<BoL> Write the file list in 'self.filelist ' ( presumably as filled in by 'add_defaults ( ) ' and 'read_template ( ) ' ) to the manifest file named by 'self.manifest ' . <EoL>
<BoL> Given a command , mode , and a PATH string , return the path which conforms to the given mode on the PATH , or None if there is no such file . <EoL>
<BoL> Add the bundle to list , taking single-resource bundles into account . <EoL>
<BoL> This is used to test resources , not because this is a dependable . <EoL>
<BoL> Register a renderer function for a given filename extension . <EoL>
<BoL> Render this renderable as something to insert in HTML . <EoL>
<BoL> Delete the NeededResources object from the thread-local data to leave a clean environment . <EoL>
<BoL> Initialize a NeededResources object in the thread-local data . Arguments are passed verbatim to the NeededResource __init__ . <EoL>
<BoL> Global to say whether the Library instances should auto-register themselves to the Library registry . Defaults to False , is useful in tests . <EoL>
<BoL> Set resource file existence checking to True or False . <EoL>
<BoL> Rollup resources together : if a resource include multiple separate ones ( i.e . is a rollup ) and all the separate ones are included the rollup will be used instead . <EoL>
<BoL> Sort resources for inclusion on web page . <EoL>
<BoL> Render the needed resources into the html . The request and response arguments are webob Request and Response objects . <EoL>
<BoL> Helper to create an Inclusion passing all the options configured in the configuration file . <EoL>
<BoL> : param bottom : If set to `` True `` , Fanstatic will include any resource that has been marked as `` bottom safe '' at the bottom of the web page , at the end of `` < body > `` , as opposed to in the `` < head > `` section . This is useful for optimizing the load-time of Javascript resources . <EoL>
<BoL> Return the top and bottom resources . <EoL>
<BoL> Compute a 1D histogram assuming equally spaced bins . <EoL>
<BoL> Compute a 2D histogram assuming equally spaced bins . <EoL>
<BoL> Least-recently-used cache decorator . <EoL>
<BoL> Checks if the path that this lock exists at actually exists . <EoL>
<BoL> Release the previously acquired lock . <EoL>
<BoL> Returns if the caller is one of the readers . <EoL>
<BoL> Returns if the caller is the active writer or a pending writer . <EoL>
<BoL> Context manager that grants a read lock . <EoL>
<BoL> Context manager that grants a write lock . <EoL>
<BoL> Returns first of values that is *not* None ( or None if all are/were ) . <EoL>
<BoL> Acquires & releases a interprocess lock around call into decorated function . <EoL>
<BoL> A locking **method** decorator . <EoL>
<BoL> Acquires & releases a read lock around call into decorated method . <EoL>
<BoL> Attempts to acquire a lock , and auto releases if acquired ( on exit ) . <EoL>
<BoL> Acquires & releases a write lock around call into decorated method . <EoL>
<BoL> Create a directory ( and any ancestor directories required ) . <EoL>
<BoL> Callback to be called on instantiation . <EoL>
<BoL> Start the service . <EoL>
<BoL> Add dependency to other service . <EoL>
<BoL> Add relationship to asyncio.Future . <EoL>
<BoL> Crash the service and all child services . <EoL>
<BoL> Start the service , if it has not already been started . <EoL>
<BoL> Called only the first time the service is started . <EoL>
<BoL> Callback to be used to add service dependencies . <EoL>
<BoL> Called every time when the service is restarted . <EoL>
<BoL> Called every time after the service is stopped/restarted <EoL>
<BoL> Called every time after the service is started/restarted . <EoL>
<BoL> Restart this service . <EoL>
<BoL> Set the shutdown signal . <EoL>
<BoL> Sleep for `` n `` seconds , or until service stopped . <EoL>
<BoL> Stop the service . <EoL>
<BoL> Decorator used to define a service background task . <EoL>
<BoL> Decorator that adds diagnostic flag while function is running . <EoL>
<BoL> Wait until the service is signalled to stop . <EoL>
<BoL> Handle new topic partition assignment . <EoL>
<BoL> Handle revocation of topic partitions . <EoL>
<BoL> Commit offset for acked messages in specified topics ' . <EoL>
<BoL> Execute the : program : ` faust ` umbrella command using this app . <EoL>
<BoL> Start the app in Client-Only mode if not started as Server . <EoL>
<BoL> Decorate : class : ` mode.Service ` to be started with the app . <EoL>
<BoL> Start the app in Client-Only mode necessary for RPC requests . <EoL>
<BoL> Define an async def function to be run at periodic intervals . <EoL>
<BoL> Create stream reading from this channel . <EoL>
<BoL> Create a clone of this codec , with optional children added . <EoL>
<BoL> Encode object `` obj `` . <EoL>
<BoL> Decode object from string . <EoL>
<BoL> The current WindowRange is the latest WindowRange for a given timestamp <EoL>
<BoL> Called every time before the service is started/restarted . <EoL>
<BoL> Called every time before the service is stopped/restarted . <EoL>
<BoL> Serialize object to the target serialization format . <EoL>
<BoL> Consumer finished committing topic offset . <EoL>
<BoL> Consumer is about to commit topic offset . <EoL>
<BoL> Message received by a consumer . <EoL>
<BoL> Message successfully sent . <EoL>
<BoL> Key deleted from table . <EoL>
<BoL> Key retrieved from table . <EoL>
<BoL> Value set for key in table . <EoL>
<BoL> Topic buffer full so conductor had to wait . <EoL>
<BoL> Handle that the mapping is being cleared . <EoL>
<BoL> Add function as callback to be called on table recovery . <EoL>
<BoL> Return list of windows from timestamp . <EoL>
<BoL> Ack event . <EoL>
<BoL> Add processor callback executed whenever a new event is received . <EoL>
<BoL> Create a clone of this stream . <EoL>
<BoL> Forward values to one or more channels . <EoL>
<BoL> Enumerate values received on this stream . <EoL>
<BoL> Iterate over the stream as events exclusively . <EoL>
<BoL> Return the currently active stream . <EoL>
<BoL> Return stream settings as a dictionary . <EoL>
<BoL> Iterate over the stream as `` key , value `` pairs . <EoL>
<BoL> Send value into stream locally ( bypasses topic ) . <EoL>
<BoL> Forward values to in this stream to channel . <EoL>
<BoL> Create new : class : ` Topic ` derived from this topic . <EoL>
<BoL> Write warning to standard err . <EoL>
<BoL> Write message to standard out . <EoL>
<BoL> Return the event currently being processed , or None . <EoL>
<BoL> Return extra attributes to place on each item ( i.e . item/entry ) element . <EoL>
<BoL> Returns the latest item 's pubdate or updateddate . If no item has either date , returns the current date/time . <EoL>
<BoL> Returns the feed in the given encoding as a string . <EoL>
<BoL> Return extra attributes to place on the root ( i.e . <EoL>
<BoL> Add elements on each item ( i.e . item/entry ) element . <EoL>
<BoL> Builds a qualified name from a ( ns_url , localname ) pai <EoL>
<BoL> Called by the parser to give the application a locator for locating the origin of document events . <EoL>
<BoL> Receive notification of a skipped entity . <EoL>
<BoL> Add elements in the root ( i.e . <EoL>
<BoL> Outputs the feed in the given encoding to outfile , which is a file-like object . Subclasses should override this . <EoL>
<BoL> Generate a safe datetime from a datetime.date or datetime.datetime object . <EoL>
<BoL> Convert an file system path to a URI portion that is suitable for inclusion in a URL . <EoL>
<BoL> Similar to smart_bytes , except that lazy instances are resolved to strings , rather than kept as lazy objects . <EoL>
<BoL> Similar to smart_text , except that lazy instances are resolved to strings , rather than kept as lazy objects . <EoL>
<BoL> Convert an Internationalized Resource Identifier ( IRI ) portion to a URI portion that is suitable for inclusion in a URL . <EoL>
<BoL> Determine if the object instance is of a protected type . <EoL>
<BoL> A decorator that defines __unicode__ and __str__ methods under Python 2 . Under Python 3 it does nothing . <EoL>
<BoL> Returns a bytestring version of 's ' , encoded as specified in 'encoding ' . <EoL>
<BoL> Returns a text object representing 's ' -- unicode on Python 2 and str on Python 3 . Treats bytestrings using the 'encoding ' codec . <EoL>
<BoL> Creates a TagURI . <EoL>
<BoL> Determines if a given datetime.datetime is aware . <EoL>
<BoL> Must be implemented by subclasses to initialise the wrapped object . <EoL>
<BoL> Pass in a callable that returns the object to be wrapped . <EoL>
<BoL> A decorator that allows a function to be called with one or more lazy arguments . If none of the args are lazy , the function is evaluated immediately , otherwise a __proxy__ is returned that will evaluate the function when needed . <EoL>
<BoL> Turns any callable into a lazy evaluated callable . <EoL>
<BoL> Wrap a function so that results for any argument tuple are stored in 'cache ' . Note that the args to the function must be usable as dictionary keys . <EoL>
<BoL> Splits the values into two sets , based on the return value of the function ( True/False ) . e.g . : <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the values of a MultiValueDict . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Returns the name of `` timezone `` . <EoL>
<BoL> Sets the time zone for the current thread . <EoL>
<BoL> Unsets the time zone for the current thread . <EoL>
<BoL> Returns the currently active time zone as a tzinfo instance . <EoL>
<BoL> Returns the name of the currently active time zone . <EoL>
<BoL> Returns the name of the default time zone . <EoL>
<BoL> Determines if a given datetime.datetime is naive . <EoL>
<BoL> Converts an aware datetime.datetime to local time . <EoL>
<BoL> Makes a naive datetime.datetime in a given time zone aware . <EoL>
<BoL> Makes an aware datetime.datetime naive in a given time zone . <EoL>
<BoL> Escape and quote an attribute value . <EoL>
<BoL> : return : A : class : ` FeedParserDict ` . <EoL>
<BoL> : return : A : class : ` FeedParserDict ` . <EoL>
<BoL> Return processed HTML as a single string <EoL>
<BoL> Return a Request or None in response to a redirect . <EoL>
<BoL> Receive notification of the end of a document . <EoL>
<BoL> Signals the end of an element in non-namespace mode . <EoL>
<BoL> End the scope of a prefix-URI mapping . <EoL>
<BoL> Receive notification of ignorable whitespace in element content . <EoL>
<BoL> Receive notification of a processing instruction . <EoL>
<BoL> Receive notification of the beginning of a document . <EoL>
<BoL> Signals the start of an element in non-namespace mode . <EoL>
<BoL> Decode a bytestring of base-64 data into a bytes object . <EoL>
<BoL> Convert a URL to IDN notation <EoL>
<BoL> URL , filename , or string -- > stream <EoL>
<BoL> Parses a variety of date formats into a 9-tuple in GMT <EoL>
<BoL> Parse asctime-style dates . <EoL>
<BoL> Parse a string according to a Greek 8-bit date format . <EoL>
<BoL> Parse a string according to a Hungarian 8-bit date format . <EoL>
<BoL> Parse a variety of ISO-8601-compatible formats like 20040105 <EoL>
<BoL> Parse a string according to the Nate 8-bit date format <EoL>
<BoL> Parse a string according to the OnBlog 8-bit date format <EoL>
<BoL> parse a date in yyyy/mm/dd hh : mm : ss TTT format <EoL>
<BoL> Parse RFC 822 dates and times http : //tools.ietf.org/html/rfc822 # section-5 <EoL>
<BoL> Detect and convert the character encoding to UTF-8. < ? xml version= ' 1.0 ' encoding='utf-8 ' ? > <EoL>
<BoL> Register a date handler function ( takes string , returns 9-tuple date in GMT ) <EoL>
<BoL> Strips and replaces the DOCTYPE , returns ( rss_version , stripped_data ) <EoL>
<BoL> This method ensures all models are completely loaded <EoL>
<BoL> Platform dependent . If the file lock could be acquired , self._lock_file_fd holds the file descriptor of the lock file . <EoL>
<BoL> Releases the lock and sets self._lock_file_fd to None . <EoL>
<BoL> Acquires the file lock or fails with a : exc : ` Timeout ` error . <EoL>
<BoL> Releases the file lock . <EoL>
<BoL> Returns the logger instance used in this module . <EoL>
<BoL> Takes buffer of bytes whose contents is something we 'd like to open with Fiona and maps it to a virtual file . <EoL>
<BoL> Returns an iterator over records . <EoL>
<BoL> Returns next record from iterator . <EoL>
<BoL> Check support for the schema against the driver <EoL>
<BoL> Removes the virtual file associated with the class . <EoL>
<BoL> Returns an iterator over records , but filtered by a test for spatial intersection with the provided `` bbox `` , a ( minx , miny , maxx , maxy ) tuple or a geometry `` mask `` . <EoL>
<BoL> Flush the buffer . <EoL>
<BoL> Returns an iterator over FID , record pairs , optionally filtered by a test for spatial intersection with the provided `` bbox `` , a ( minx , miny , maxx , maxy ) tuple or a geometry `` mask `` . <EoL>
<BoL> Returns an iterator over FIDs , optionally filtered by a test for spatial intersection with the provided `` bbox `` , a ( minx , miny , maxx , maxy ) tuple or a geometry `` mask `` . <EoL>
<BoL> Compares the record to the collection 's schema . <EoL>
<BoL> Compares the record 's geometry to the collection 's schema . <EoL>
<BoL> Stages a record for writing to disk . <EoL>
<BoL> Stages multiple records for writing to disk . <EoL>
<BoL> In append or write mode , flushes data to disk , then ends access . <EoL>
<BoL> Get credentials and configure GDAL <EoL>
<BoL> Default configuration options <EoL>
<BoL> Return a mapping of registered drivers . <EoL>
<BoL> Create an environment with default config options <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Automatically created by attrs . <EoL>
<BoL> Returns a ( minx , miny , maxx , maxy ) bounding box . <EoL>
<BoL> Returns a context manager with registered drivers . <EoL>
<BoL> Ensures a config environment exists and has credentials . <EoL>
<BoL> Create a session object matching the foreign ` session ` . <EoL>
<BoL> Create a session object suited to the data at ` path ` . <EoL>
<BoL> Get credentials as GDAL configuration options <EoL>
<BoL> Get credentials as GDAL configuration options <EoL>
<BoL> Create a default environment if necessary . <EoL>
<BoL> Delete options in the existing environment . <EoL>
<BoL> A decorator that ensures an env exists before a function calls any GDAL C functions . <EoL>
<BoL> Return an Env if one does not exist <EoL>
<BoL> Get a mapping of current options . <EoL>
<BoL> Set options in the existing environment . <EoL>
<BoL> Returns a list of layer names in their index order . <EoL>
<BoL> Pass record if not seen . <EoL>
<BoL> Given a RFC 3339 date , returns a tz-naive datetime tuple <EoL>
<BoL> Given a RFC 3339 datetime , returns a tz-naive datetime tuple <EoL>
<BoL> Given a RFC 3339 time , returns a tz-naive datetime tuple <EoL>
<BoL> Convert a parsed path to a GDAL VSI path <EoL>
<BoL> Parse a dataset 's identifier or path into its parts <EoL>
<BoL> Returns a schema property 's proper Python type . <EoL>
<BoL> Returns the width of a str type property . <EoL>
<BoL> Deletes an OGR data source <EoL>
<BoL> Get credentials as GDAL configuration options <EoL>
<BoL> Parse a URI or Apache VFS URL into its parts <EoL>
<BoL> Ensures all parts of our vsi path are valid schemes . <EoL>
<BoL> Scrubs a method name , returning result from local cache if available . <EoL>
<BoL> Convert all '*_speed ' fields using 'process_field_speed' All other units will use the default method . <EoL>
<BoL> Configure logging for flake8 . <EoL>
<BoL> Register a custom template filter , available application wide . <EoL>
<BoL> Register a custom template global , available application wide . <EoL>
<BoL> Register a custom template test , available application wide . <EoL>
<BoL> Like : meth : ` Flask.add_url_rule ` but for a blueprint . The endpoint for the : func : ` url_for ` function is prefixed with the name of the blueprint . <EoL>
<BoL> Like : meth : ` Flask.after_request ` but for a blueprint . Such a function is executed after each request , even if outside of the blueprint . <EoL>
<BoL> Like : meth : ` Flask.after_request ` but for a blueprint . This function is only executed after each request that is handled by a function of that blueprint . <EoL>
<BoL> Like : meth : ` Flask.context_processor ` but for a blueprint . Such a function is executed each request , even if outside of the blueprint . <EoL>
<BoL> Like : meth : ` Flask.errorhandler ` but for a blueprint . This handler is used for all requests , even if outside of the blueprint . <EoL>
<BoL> Register a custom template filter , available application wide . Like : meth : ` Flask.template_filter ` but for a blueprint . <EoL>
<BoL> Register a custom template global , available application wide . Like : meth : ` Flask.template_global ` but for a blueprint . <EoL>
<BoL> Register a custom template test , available application wide . Like : meth : ` Flask.template_test ` but for a blueprint . <EoL>
<BoL> Same as : meth : ` url_defaults ` but application wide . <EoL>
<BoL> Same as : meth : ` url_value_preprocessor ` but application wide . <EoL>
<BoL> Like : meth : ` Flask.before_first_request ` . Such a function is executed before the first request to the application . <EoL>
<BoL> Like : meth : ` Flask.before_request ` . Such a function is executed before each request , even if outside of a blueprint . <EoL>
<BoL> Like : meth : ` Flask.before_request ` but for a blueprint . This function is only executed before each request that is handled by a function of that blueprint . <EoL>
<BoL> Like : meth : ` Flask.context_processor ` but for a blueprint . This function is only executed for requests handled by a blueprint . <EoL>
<BoL> Like : meth : ` Flask.endpoint ` but for a blueprint . <EoL>
<BoL> Registers an error handler that becomes active for this blueprint only . <EoL>
<BoL> Creates an instance of : meth : ` ~flask.blueprints.BlueprintSetupState ` object that is later passed to the register callback functions . Subclasses can override this to return a subclass of the setup state . <EoL>
<BoL> Registers a function that is called when the blueprint is registered on the application . This function is called with the state as argument as returned by the : meth : ` make_setup_state ` method . <EoL>
<BoL> Works like : meth : ` record ` but wraps the function in another function that will ensure the function is only called once . If the blueprint is registered a second time on the application , the function passed is not called . <EoL>
<BoL> Called by : meth : ` Flask.register_blueprint ` to register all views and callbacks registered on the blueprint with the application . Creates a : class : ` .BlueprintSetupState ` and calls each : meth : ` record ` callback with it . <EoL>
<BoL> Non-decorator version of the : meth : ` errorhandler ` error attach function , akin to the : meth : ` ~flask.Flask.register_error_handler ` application-wide function of the : class : ` ~flask.Flask ` object but for error handlers limited to this blueprint . <EoL>
<BoL> Like : meth : ` Flask.route ` but for a blueprint . The endpoint for the : func : ` url_for ` function is prefixed with the name of the blueprint . <EoL>
<BoL> Like : meth : ` Flask.teardown_request ` but for a blueprint . Such a function is executed when tearing down each request , even if outside of the blueprint . <EoL>
<BoL> Like : meth : ` Flask.teardown_request ` but for a blueprint . <EoL>
<BoL> Callback function for URL defaults for this blueprint . It 's called with the endpoint and values and should update the values passed in place . <EoL>
<BoL> Registers a function as URL value preprocessor for this blueprint . It 's called before the view functions are called and can modify the url values provided . <EoL>
<BoL> Escape the string . Works like : func : ` escape ` with the difference that for subclasses of : class : ` Markup ` this function would return the correct subclass . <EoL>
<BoL> Unescape markup into an text_type string and strip all tags . This also resolves known HTML4 and XHTML entities . Whitespace is normalized to one : <EoL>
<BoL> Unescape markup again into an text_type string . This also resolves known HTML4 and XHTML entities : <EoL>
<BoL> This is the same as accessing : attr : ` stream ` with the difference that if it finds cached data from calling : meth : ` get_data ` first it will create a new stream out of the cached data . <EoL>
<BoL> Decorate a function as responder that accepts the request as first argument . This works like the : func : ` responder ` decorator but the function is passed the request object as first argument and the request object will be closed automatically : : <EoL>
<BoL> Closes associated resources of this request object . <EoL>
<BoL> Create a new request object based on the values provided . <EoL>
<BoL> This reads the buffered incoming data from the client into one bytestring . By default this is cached but that behavior can be changed by setting ` cache ` to ` False ` . <EoL>
<BoL> Creates the form data parser . Instantiates the : attr : ` form_data_parser_class ` with some parameters . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Executes a function after this request . <EoL>
<BoL> Pops the app context . <EoL>
<BoL> Binds the app context to the current context . <EoL>
<BoL> Check if a key is present . <EoL>
<BoL> Yield `` ( key , value ) `` tuples . <EoL>
<BoL> Like : meth : ` set ` but also supports index/slice based setting . <EoL>
<BoL> Returns formatted headers suitable for HTTP transmission . <EoL>
<BoL> Add a new header tuple to the list . <EoL>
<BoL> Add a new header tuple to the list . <EoL>
<BoL> Clears all headers . <EoL>
<BoL> Extend the headers with a dict or an iterable yielding keys and values . <EoL>
<BoL> Return the default value if the requested data does n't exist . If ` type ` is provided and is a callable it should convert the value , return it or raise a : exc : ` ValueError ` if that is not possible . In this case the function will return the default as if the value was not found : <EoL>
<BoL> Return a list of all the values for the named field . <EoL>
<BoL> Return the list of items for a given key . <EoL>
<BoL> Removes and returns a key or index . <EoL>
<BoL> Removes a key or index and returns a ( key , value ) item . <EoL>
<BoL> Remove a key . <EoL>
<BoL> Remove all header tuples for ` key ` and add a new one . The newly added key either appears at the end of the list if there was no entry or replaces the first one . <EoL>
<BoL> Returns the value for the key if it is in the dict , otherwise it returns ` default ` and sets that value for ` key ` . <EoL>
<BoL> Convert the headers into a list suitable for WSGI . <EoL>
<BoL> Convert the headers into a list suitable for WSGI . <EoL>
<BoL> Return a shallow mutable copy of this object . Keep in mind that the standard library 's : func : ` copy ` function is a no-op for this class like for any other python immutable type ( eg : : class : ` tuple ` ) . <EoL>
<BoL> Add a new rule or factory to the map and bind it . Requires that the rule is not bound to another map . <EoL>
<BoL> Like : meth : ` bind ` but you can pass it an WSGI environment and it will fetch the information from that dictionary . <EoL>
<BoL> Iterate over all rules and check if the endpoint expects the arguments provided . This is for example useful if you have some URLs that expect a language code and others that do not and you want to wrap the builder a bit so that the current language code is automatically added if not provided but endpoints expect it . <EoL>
<BoL> Iterate over all rules or the rules of an endpoint . <EoL>
<BoL> Called before matching and building to keep the compiled rules in the correct order after things changed . <EoL>
<BoL> Takes an optional list of valid http methods starting with werkzeug 0.3 the list will be mandatory . <EoL>
<BoL> Creates a copy of this request context with the same request object . <EoL>
<BoL> Can be overridden by a subclass to hook into the matching of the request . <EoL>
<BoL> Pops the request context and unbinds it by doing that . This will also trigger the execution of functions registered by the : meth : ` ~flask.Flask.teardown_request ` decorator . <EoL>
<BoL> Binds the request context to the current context . <EoL>
<BoL> Bind the url to a map and create a regular expression based on the information from the rule itself and the defaults from the map . <EoL>
<BoL> Assembles the relative url for that rule and the subdomain . If building does n't work for some reasons ` None ` is returned . <EoL>
<BoL> The build compare key for sorting . <EoL>
<BoL> Compiles the regular expression and stores it . <EoL>
<BoL> Return an unbound copy of this rule . <EoL>
<BoL> Looks up the converter for the given parameter . <EoL>
<BoL> Provides kwargs for instantiating empty copy with empty ( ) <EoL>
<BoL> Check if the rule matches a given path . <EoL>
<BoL> The match compare key for sorting . <EoL>
<BoL> Check if this rule has defaults for a given rule . <EoL>
<BoL> Rebinds and refreshes the URL . Call this if you modified the rule in place . <EoL>
<BoL> Check if the dict of values has enough data for url generation . <EoL>
<BoL> Returns the domain that should be set for the session cookie . <EoL>
<BoL> Returns True if the session cookie should be httponly . This currently just returns the value of the `` SESSION_COOKIE_HTTPONLY `` config var . <EoL>
<BoL> Returns the path for which the cookie should be valid . The default implementation uses the value from the `` SESSION_COOKIE_PATH `` config var if it 's set , and falls back to `` APPLICATION_ROOT `` or uses `` / `` if it 's `` None `` . <EoL>
<BoL> Return `` 'Strict ' `` or `` 'Lax ' `` if the cookie should use the `` SameSite `` attribute . This currently just returns the value of the : data : ` SESSION_COOKIE_SAMESITE ` setting . <EoL>
<BoL> Returns True if the cookie should be secure . This currently just returns the value of the `` SESSION_COOKIE_SECURE `` setting . <EoL>
<BoL> A helper method that returns an expiration date for the session or `` None `` if the session is linked to the browser session . The default implementation returns now + the permanent session lifetime configured on the application . <EoL>
<BoL> Checks if a given object is a null session . Null sessions are not asked to be saved . <EoL>
<BoL> Creates a null session which acts as a replacement object if the real session support could not be loaded due to a configuration error . This mainly aids the user experience because the job of the null session is to still support lookup without complaining but modifications are answered with a helpful error message of what failed . <EoL>
<BoL> Used by session backends to determine if a `` Set-Cookie `` header should be set for this session cookie for this response . <EoL>
<BoL> Get an attribute by name , or a default value . Like : meth : ` dict.get ` . <EoL>
<BoL> Get and remove an attribute by name . Like : meth : ` dict.pop ` . <EoL>
<BoL> Get the value of an attribute if it is present , otherwise set and return a default value . Like : meth : ` dict.setdefault ` . <EoL>
<BoL> Default template context processor . Injects ` request ` , ` session ` and ` g ` . <EoL>
<BoL> Internal helper that returns the default endpoint for a given function . This always is the function name . <EoL>
<BoL> Get the `` 'flask.app ' `` logger and configure it if needed . <EoL>
<BoL> Finds a package and returns the prefix ( or None if the package is not installed ) as well as the folder that contains the package or module as a tuple . <EoL>
<BoL> Get whether debug mode should be enabled for the app , indicated by the : envvar : ` FLASK_DEBUG ` environment variable . The default is `` True `` if : func : ` .get_env ` returns `` 'development ' `` , or `` False `` otherwise . <EoL>
<BoL> Get the environment the app is running in , indicated by the : envvar : ` FLASK_ENV ` environment variable . The default is `` 'production ' `` . <EoL>
<BoL> Pulls all flashed messages from the session and returns them . <EoL>
<BoL> Get whether the user has disabled loading dotenv files by setting : envvar : ` FLASK_SKIP_DOTENV ` . The default is `` True `` , load the files . <EoL>
<BoL> Wraps a method so that it performs a check in debug mode if the first request was already handled . <EoL>
<BoL> Generates a URL to the given endpoint with the method provided . <EoL>
<BoL> A helper method to register a rule ( and optionally a view function ) to the application . The endpoint is automatically prefixed with the blueprint 's name . <EoL>
<BoL> Join a base URL and a possibly relative URL to form an absolute interpretation of the latter . <EoL>
<BoL> This works exactly like the method of the same name on a regular : class : ` click.Group ` but it wraps callbacks in : func : ` with_appcontext ` unless it 's disabled by passing `` with_appcontext=False `` . <EoL>
<BoL> This works exactly like the method of the same name on a regular : class : ` click.Group ` but it defaults the group class to : class : ` AppGroup ` . <EoL>
<BoL> Loads the Flask app ( if not yet loaded ) and returns it . Calling this multiple times will just result in the already loaded app to be returned . <EoL>
<BoL> Check whether calling a function raised a `` TypeError `` because the call failed or because something in the factory raised the error . <EoL>
<BoL> Take `` other `` and remove the length of `` path `` from it . <EoL>
<BoL> The `` -- key `` option must be specified when `` -- cert `` is a file . Modifies the `` cert `` param to be a `` ( cert , key ) `` pair if needed . <EoL>
<BoL> Takes an app factory , a `` script_info ` object and optionally a tuple of arguments . Checks for the existence of a script_info argument and calls the app_factory depending on that and the arguments provided . <EoL>
<BoL> Checks if the given string is a variable name or a function . If it is a function , it checks for specified arguments and whether it takes a `` script_info `` argument and calls the function with the appropriate arguments . <EoL>
<BoL> Given a module instance this tries to find the best possible application in the module or raises an exception . <EoL>
<BoL> Imports an object based on a string . <EoL>
<BoL> Load `` dotenv '' files in order of precedence to set environment variables . <EoL>
<BoL> Given a filename this will try to calculate the python path , add it to the search path and return the actual module name that is expected . <EoL>
<BoL> Show extra startup messages the first time the server is run , ignoring the reloader . <EoL>
<BoL> Wraps a callback so that it 's guaranteed to be executed with the script 's application context . If callbacks are registered directly to the `` app.cli `` object then they are wrapped with this function by default unless it 's disabled . <EoL>
<BoL> A helper function that decorates a function to retain the current request context . <EoL>
<BoL> Works like : func : ` has_request_context ` but for the application context . You can also just do a boolean check on the : data : ` current_app ` object instead . <EoL>
<BoL> If you have code that wants to test if a request context is there or not this function can be used . For instance , you may want to take advantage of request information if the request object is available , but fail silently if it is unavailable . <EoL>
<BoL> Flashes a message to the next request . In order to remove the flashed message from the session and to display it to the user , the template has to call : func : ` get_flashed_messages ` . <EoL>
<BoL> Loads a macro ( or variable ) a template exports . This can be used to invoke a macro from within Python code . If you for example have a template named : file : ` _cider.html ` with the following contents : <EoL>
<BoL> Return the current object . This is useful if you want the real object behind the proxy at a time for performance reasons or because you want to pass the object into a different context . <EoL>
<BoL> Removes the topmost item from the stack , will return the old value or ` None ` if the stack was already empty . <EoL>
<BoL> Pushes a new item to the stack <EoL>
<BoL> Creates a : class : ` ~werkzeug.datastructures.ContentRange ` object from the current range and given content length . <EoL>
<BoL> If the range is for bytes , the length is not None and there is exactly one range and it is satisfiable it returns a `` ( start , stop ) `` tuple , otherwise ` None ` . <EoL>
<BoL> Converts the object into ` Content-Range ` HTTP header , based on given length <EoL>
<BoL> Converts the object back into an HTTP header . <EoL>
<BoL> Takes an optional ` Content-Range ` header value based on `` length `` parameter . <EoL>
<BoL> Given the loader that loaded a module and the module this function attempts to figure out if the given module is actually a package . <EoL>
<BoL> Returns the path to a package or cwd if that can not be found . This returns the path of a package or the folder that contains a module . <EoL>
<BoL> Determine if the given string is an IP address . <EoL>
<BoL> Safely join ` directory ` and zero or more untrusted ` pathnames ` components . <EoL>
<BoL> Send a file from a given directory with : func : ` send_file ` . This is a secure way to quickly expose static files from an upload folder or something similar . <EoL>
<BoL> Request contexts disappear when the response is started on the server . <EoL>
<BoL> Returns the total seconds from a timedelta object . <EoL>
<BoL> URL encode a single string with a given encoding . <EoL>
<BoL> Wraps a file . This uses the WSGI server 's file wrapper if available or otherwise the generic : class : ` FileWrapper ` . <EoL>
<BoL> Decode a JSON document from `` s `` ( a `` str `` or `` unicode `` beginning with a JSON document ) and return a 2-tuple of the Python representation and the index in `` s `` where the document ended . Optionally , `` idx `` can be used to specify an offset in `` s `` where the JSON document begins . <EoL>
<BoL> Implement this method in a subclass such that it returns a serializable object for `` o `` , or calls the base implementation ( to raise a : exc : ` TypeError ` ) . <EoL>
<BoL> Inject default arguments for dump functions . <EoL>
<BoL> Inject default arguments for load functions . <EoL>
<BoL> Detect which UTF codec was used to encode the given bytes . <EoL>
<BoL> Like : func : ` dumps ` but writes into a file object . <EoL>
<BoL> Serialize `` obj `` to a JSON formatted `` str `` by using the application's configured encoder ( : attr : ` ~flask.Flask.json_encoder ` ) if there is an application on the stack . <EoL>
<BoL> Like : func : ` htmlsafe_dumps ` but writes into a file object . <EoL>
<BoL> Works exactly like : func : ` dumps ` but is safe for use in `` < script > `` tags . <EoL>
<BoL> Formats the time to match the RFC1123 date format . <EoL>
<BoL> This function wraps : func : ` dumps ` to add a few enhancements that make life easier . <EoL>
<BoL> Like : func : ` loads ` but reads from a file object . <EoL>
<BoL> Unserialize a JSON object from a string `` s `` by using the application's configured decoder ( : attr : ` ~flask.Flask.json_decoder ` ) if there is an application on the stack . <EoL>
<BoL> Create a tagger for the given serializer . <EoL>
<BoL> Check if the given value should be tagged by this tag . <EoL>
<BoL> Convert the value to a valid JSON type and add the tag structure around it . <EoL>
<BoL> Convert the Python object to an object that is a valid JSON type . The tag will be added later . <EoL>
<BoL> Convert the JSON representation back to the correct type . The tag will already be removed . <EoL>
<BoL> Tag the value and dump it to a compact JSON string . <EoL>
<BoL> Load data from a JSON string and deserialized any tagged objects . <EoL>
<BoL> Register a new tag with this serializer . <EoL>
<BoL> Convert a value to a tagged representation if necessary . <EoL>
<BoL> Convert a tagged representation back to the original type . <EoL>
<BoL> Decode the Base64 encoded bytes-like object or ASCII string s . <EoL>
<BoL> Parse one of the following date formats into a datetime object : <EoL>
<BoL> Check if there is a handler in the logging chain that will handle the given logger 's : meth : ` effective level < ~logging.Logger.getEffectiveLevel > ` . <EoL>
<BoL> Returns a response object ( a WSGI application ) that , if called , redirects the client to the target location . <EoL>
<BoL> Renders a template from the template folder with the given context . <EoL>
<BoL> Renders a template from the given template source string with the given context . Template variables will be autoescaped . <EoL>
<BoL> This method has to be implemented and must either return `` None `` in case the loading failed because of a configuration error or an instance of a session object which implements a dictionary like interface + the methods and attributes on : class : ` SessionMixin ` . <EoL>
<BoL> This is called for actual sessions returned by : meth : ` open_session ` at the end of the request . This is still called during a request context so if you absolutely need access to the request you can do that . <EoL>
<BoL> Low level helper function to implement : meth : ` loads_unsafe ` in serializer subclasses . <EoL>
<BoL> Like : meth : ` dumps ` but dumps into a file . The file handle has to be compatible with what the internal serializer expects . <EoL>
<BoL> Returns a signed string serialized with the internal serializer . The return value can be either a byte or unicode string depending on the format of the internal serializer . <EoL>
<BoL> Iterates over all signers to be tried for unsigning . Starts with the configured signer , then constructs each signer specified in `` fallback_signers `` . <EoL>
<BoL> Like : meth : ` loads ` but loads from a file . <EoL>
<BoL> Like : meth : ` loads_unsafe ` but loads from a file . <EoL>
<BoL> Reverse of : meth : ` dumps ` , raises : exc : ` .BadSignature ` if the signature validation fails . <EoL>
<BoL> Creates a new instance of the signer to be used . The default implementation uses the : class : ` .Signer ` base class . <EoL>
<BoL> Get the template source , filename and reload helper for a template . It 's passed the environment and template name and has to return a tuple in the form `` ( source , filename , uptodate ) `` or raise a ` TemplateNotFound ` error if it ca n't locate the template . <EoL>
<BoL> Iterates over all templates . If the loader does not support that it should raise a : exc : ` TypeError ` which is the default behavior . <EoL>
<BoL> Renders the template and fires the signal <EoL>
<BoL> Converts the class into an actual view function that can be used with the routing system . Internally this generates a function on the fly which will instantiate the : class : ` View ` on each request and call the : meth : ` dispatch_request ` method on it . <EoL>
<BoL> Subclasses have to override this method to implement the actual view function code . This method is called with all the arguments from the URL rule . <EoL>
<BoL> Add a view to the menu tree <EoL>
<BoL> Add link to menu links collection . <EoL>
<BoL> Add one or more links to the menu links collection . <EoL>
<BoL> Add menu item to menu tree hierarchy . <EoL>
<BoL> Add a view to the collection . <EoL>
<BoL> Add one or more views to the collection . <EoL>
<BoL> Return the menu hierarchy . <EoL>
<BoL> Return menu links . <EoL>
<BoL> Generate Flask endpoint name . By default converts class name to lower case if endpoint is not explicitly provided . <EoL>
<BoL> Generate URL for the view . Override to change default behavior . <EoL>
<BoL> This method will be executed before calling any view method . <EoL>
<BoL> Split words in PascalCase string into separate words . <EoL>
<BoL> This method will run actual view function . <EoL>
<BoL> Create Flask blueprint . <EoL>
<BoL> Generate URL for the endpoint . If you want to customize URL generation logic ( persist some query string argument , for example ) , this is right place to do it . <EoL>
<BoL> Handle the response to inaccessible views . <EoL>
<BoL> Override this method to add permission checks . <EoL>
<BoL> Override this method if you want dynamically hide or show administrative views from Flask-Admin menu structure <EoL>
<BoL> Render template <EoL>
<BoL> Returns unicode string expected by Python 3 's csv module <EoL>
<BoL> Set this domain as default for the current request <EoL>
<BoL> Returns the correct gettext translations that should be used for this request . This will never fail and return a dummy translation object if used outside of the request or if a translation can not be found . <EoL>
<BoL> Returns dictionary-like object for translation caching <EoL>
<BoL> Translates a string with the current locale and passes in the given keyword arguments as mapping to a string formatting string . <EoL>
<BoL> Like : func : ` gettext ` but the string returned is lazy which means it will be translated when it is used as an actual string . <EoL>
<BoL> Like : func : ` pgettext ` but the string returned is lazy which means it will be translated when it is used as an actual string . <EoL>
<BoL> Translates a string with the current locale and passes in the given keyword arguments as mapping to a string formatting string . <EoL>
<BoL> Like : func : ` ngettext ` but with a context . <EoL>
<BoL> Like : func : ` gettext ` but with a context . <EoL>
<BoL> Returns translations directory path . Override if you want to implement custom behavior . <EoL>
<BoL> Get current administrative view . <EoL>
<BoL> Determine the path to the 'messages ' directory as best possible . <EoL>
<BoL> Use this decorator to expose views in your view classes . <EoL>
<BoL> Decorator to expose Flask 's pluggable view classes ( `` flask.views.View `` or `` flask.views.MethodView `` ) . <EoL>
<BoL> This decorator can be used to mark a function or method context callable . <EoL>
<BoL> If current method is PUT or POST , return concatenated ` request.form ` with ` request.files ` or ` None ` otherwise . <EoL>
<BoL> Get view template context . <EoL>
<BoL> Alternative to Flask ` url_for ` . <EoL>
<BoL> Check if wtforms field has error without checking its children . <EoL>
<BoL> Check if current method is PUT or POST <EoL>
<BoL> Check if form field has ` DataRequired ` or ` InputRequired ` validators . <EoL>
<BoL> Split words in PascalCase string into separate words . <EoL>
<BoL> Resolve current Jinja2 context and store it for general consumption . <EoL>
<BoL> Return the string obtained by replacing the leftmost non-overlapping occurrences of the pattern in string by the replacement repl . <EoL>
<BoL> If current method is PUT or POST , validate form and return validation status . <EoL>
<BoL> We need to override the default behavior slightly here , to ensure the any method-based routing takes account of any method overloading , so that eg PUT requests from the browsable API are routed to the correct view . <EoL>
<BoL> We override the default behavior in order to deal with APIException . <EoL>
<BoL> We override this so that we can additionally handle list and dict types by default . <EoL>
<BoL> Any additional information to pass to the parser . <EoL>
<BoL> Parse the body of the request , using whichever parser satifies the client 'Content-Type ' header . <EoL>
<BoL> Determine which of the available renderers should be used for rendering the response content , based on the client 'Accept ' header . <EoL>
<BoL> Perform method and content type overloading . <EoL>
<BoL> If the request does not contain data then return an empty representation . <EoL>
<BoL> Return a setting for the given key or an empty string . <EoL>
<BoL> Return all config descriptions as a list of tuples . <EoL>
<BoL> Return all configs settings as a dict . <EoL>
<BoL> Set a config setting for ` key ` with the given ` value ` . <EoL>
<BoL> Set multiple config settings given a dict or list of tuples . <EoL>
<BoL> Simple wrapper around : func : ` markdown.markdown ` to set the base level of ' # ' style headers to < h2 > . <EoL>
<BoL> Return a canonical string representing the media type . Note that this ensures the params are sorted . <EoL>
<BoL> Parse a media type string , like `` application/json ; indent=4 '' into a three-tuple , like : ( 'application ' , 'json ' , { 'indent ' : 4 } ) <EoL>
<BoL> Returns ` True ` if this media type is a superset of ` other ` . Some examples of cases where this holds true : <EoL>
<BoL> Parses the value of a clients accept header , and returns a list of sets of media types it included , ordered by precedence . <EoL>
<BoL> Determine which parser to use for parsing the request body . Returns a two-tuple of ( parser , content type ) . <EoL>
<BoL> Determine which renderer to use for rendering the response body . Returns a two-tuple of ( renderer , content type ) . <EoL>
<BoL> Remove leading indent from a block of text . Used when generating descriptions from docstrings . <EoL>
<BoL> Returns the content length from the WSGI environment as integer . If it 's not available or chunked transfer encoding is used , `` None `` is returned . <EoL>
<BoL> Attempt to import a class from a string representation . <EoL>
<BoL> If the given setting is a string import notation , then perform the necessary import or imports . <EoL>
<BoL> Register a list of bundles with the environment , without naming them . <EoL>
<BoL> Appends `` path `` to : attr : ` load_path ` , and adds a corresponding entry to : attr : ` url_mapping ` . <EoL>
<BoL> Register a : class : ` Bundle ` with the given `` name `` . <EoL>
<BoL> Return the output url , modified for expire header handling . <EoL>
<BoL> Filters may be specified in a variety of different ways , including by giving their name ; we need to make sure we resolve everything to an actual filter instance . <EoL>
<BoL> Return a list of urls for this bundle , and all subbundles , and , when it becomes necessary , start a build process . <EoL>
<BoL> Build this bundle , meaning create the file given by the `` output `` attribute , applying the configured filters etc . <EoL>
<BoL> Return the current version of the Bundle . <EoL>
<BoL> This is used to determine when a bundle definition has changed so that a rebuild is required . <EoL>
<BoL> Iterate over the bundles which actually need to be built . <EoL>
<BoL> Return an actual list of source files . <EoL>
<BoL> Return the full , absolute output path . <EoL>
<BoL> Return a list of urls for this bundle . <EoL>
<BoL> For deprecated keys , fake the values as good as we can . Subclasses need to call this in __getitem__ . <EoL>
<BoL> Same for __setitem__ . <EoL>
<BoL> Register bundles from a Python module <EoL>
<BoL> Register bundles from a YAML configuration file <EoL>
<BoL> Additional cache keys dependent on keyword arguments . <EoL>
<BoL> Unique identifier for the filter instance . <EoL>
<BoL> This is called before the filter is used . <EoL>
<BoL> Overwrite this to have the filter do initial setup work , like determining whether required modules are available etc . <EoL>
<BoL> This function is used to determine if two filter instances represent the same filter and can be merged . Only one of the filters will be applied . <EoL>
<BoL> We may not always be connected to an app , but we still need to provide a way to the base environment to set it 's defaults . <EoL>
<BoL> Searches for `` item `` within `` directory `` . Is able to resolve glob instructions . <EoL>
<BoL> Given a relative reference like ` foo/bar.css ` , returns the Flask static url . <EoL>
<BoL> Evaluates a glob expression . Yields a sorted list of absolute filenames . <EoL>
<BoL> Searches the environment-wide url mapping ( based on the urls assigned to each directory in the load path ) . Returns the correct url for `` filepath `` . <EoL>
<BoL> Given `` item `` from a Bundle 's contents , this has to return the final value to use , usually an absolute filesystem path . <EoL>
<BoL> This is called by : meth : ` search_for_source ` when no : attr : ` Environment.load_path ` is set . <EoL>
<BoL> This is called by : meth : ` search_for_source ` when a : attr : ` Environment.load_path ` is set . <EoL>
<BoL> See if `` item `` has blueprint prefix , return ( directory , rel_path ) . <EoL>
<BoL> Load `` Bundle `` objects defined in the Python module . <EoL>
<BoL> Load an `` Environment `` defined in the Python module . <EoL>
<BoL> Given `` target `` , this has to return the absolute filesystem path to which the output file of `` bundle `` should be written . <EoL>
<BoL> Given `` target `` , this has to return the url through which the output file can be referenced . <EoL>
<BoL> Given the absolute filesystem path in `` filepath `` , as well as the original value from : attr : ` Bundle.contents ` which resolved to this path , this must return the absolute url through which the file is to be referenced . <EoL>
<BoL> Called by : meth : ` resolve_source ` after determining that `` item `` is a relative filesystem path . <EoL>
<BoL> Return a bundle initialised by the given dict . <EoL>
<BoL> Return a dict that keys bundle names to bundles . <EoL>
<BoL> method that can be overridden in tests <EoL>
<BoL> Returns a ( fileobj , filename ) tuple . <EoL>
<BoL> Yield bundle contents from the given dict . <EoL>
<BoL> Load a list of : class : ` Bundle ` instances defined in the YAML file . <EoL>
<BoL> Load an : class : ` Environment ` instance defined in the YAML file . <EoL>
<BoL> Helper to run a webassets command . <EoL>
<BoL> Return the static folder of the given Flask app instance , or module/blueprint . <EoL>
<BoL> Add the given filter to the list of know filters . <EoL>
<BoL> Join url prefix with fragment . <EoL>
<BoL> Set up this instance for use with *app* , if no app was passed to the constructor . <EoL>
<BoL> Returns a list of all the locales translations exist for . The list returned will be filled with actual locale objects and not just strings . <EoL>
<BoL> Load locale by name and cache it . Returns instance of a ` babel.Locale ` object . <EoL>
<BoL> Registers a callback function for locale selection . <EoL>
<BoL> Registers a callback function for timezone selection . <EoL>
<BoL> Internal helper that formats the date . <EoL>
<BoL> A small helper for the datetime formatting functions . Looks up format defaults for different kinds . <EoL>
<BoL> Return the given number formatted for the locale in request <EoL>
<BoL> Return a date formatted according to the given pattern . <EoL>
<BoL> Return a date formatted according to the given pattern . <EoL>
<BoL> Return the given decimal number formatted for the locale in request <EoL>
<BoL> Return the given number formatted for the locale in request <EoL>
<BoL> Return formatted percent value for the locale in request <EoL>
<BoL> Return value formatted in scientific notation for the locale in request <EoL>
<BoL> Return a time formatted according to the given pattern . <EoL>
<BoL> Format the elapsed time from the given date to now or the given timedelta . This currently requires an unreleased development version of Babel . <EoL>
<BoL> Return the correct translation domain that is used for this request . <EoL>
<BoL> Returns the locale that should be used for this request as ` babel.Locale ` object . <EoL>
<BoL> Returns the timezone that should be used for this request as ` pytz.timezone ` object . <EoL>
<BoL> Refreshes the cached timezones and locale information . This can be used to switch a translation between a request and if you want the changes to take place immediately , not just with the next request : : <EoL>
<BoL> Convert a datetime object to the user 's timezone . <EoL>
<BoL> Convert a datetime object to UTC and drop tzinfo . This is the opposite operation to : func : ` to_user_timezone ` . <EoL>
<BoL> The actual after-request handler , retains references to the the options , and definitions of resources through a closure . <EoL>
<BoL> Helper to log a message at the DEBUG level . <EoL>
<BoL> Wraps scalars or string types as a list , or returns the iterable instance . <EoL>
<BoL> A more flexible str function which intelligently handles stringifying iterables . The results are lexographically sorted to ensure generated responses are consistent when iterables such as Set are used ( whose order is usually platform dependent ) <EoL>
<BoL> Helper to get Flask-Cor 's logger , attached to the current_app 's logger if it exists . <EoL>
<BoL> Returns the dictionary of CORS specific app configurations . <EoL>
<BoL> Compute CORS options for an application by combining the DEFAULT_OPTIONS , the app 's configuration-specified options and any dictionaries passed . The last specified option wins . <EoL>
<BoL> Helper that returns regexp pattern from given value . <EoL>
<BoL> Helper to log a message at the INFO level . <EoL>
<BoL> Replace the invalid regex r'* ' with the valid , wildcard regex r'/ . * ' to enable the CORS app extension to have a more user friendly api . <EoL>
<BoL> A helper method to serialize and processes the options dictionary where applicable . <EoL>
<BoL> Performs the actual evaluation of Flas-CORS options and actually modifies the response object . <EoL>
<BoL> Safely attempts to match a pattern or string to a request origin . <EoL>
<BoL> This function is the decorator which is used to wrap a Flask route with . <EoL>
<BoL> getrandbits ( k ) - > x. Generates an int with k random bits . <EoL>
<BoL> Get the next random number in the range [ 0.0 , 1.0 ) . <EoL>
<BoL> Loads user from session or remember_me cookie as applicable <EoL>
<BoL> This function has been deprecated . Please use : meth : ` LoginManager.request_loader ` instead . <EoL>
<BoL> Configures an application . This registers an ` after_request ` call , and attaches this ` LoginManager ` to it as ` app.login_manager ` . <EoL>
<BoL> This is called when the user is logged in , but they need to be reauthenticated because their session is stale . If you register a callback with ` needs_refresh_handler ` , then it will be called . Otherwise , it will take the following actions : <EoL>
<BoL> This will set the callback for the ` needs_refresh ` method , which among other things is used by ` fresh_login_required ` . It takes no arguments , and should return a response to be sent to the user instead of their normal view . <EoL>
<BoL> This set the ctx.user with the user object loaded by your customized user_loader callback function , which should retrieved the user object with the user_id got from session . <EoL>
<BoL> This sets the callback for loading a user from a Flask request . The function you set should take Flask request object and return a user object , or ` None ` if the user does not exist . <EoL>
<BoL> This method has been deprecated . Please use : meth : ` LoginManager.init_app ` instead . <EoL>
<BoL> This is called when the user is required to log in . If you register a callback with : meth : ` LoginManager.unauthorized_handler ` , then it will be called . Otherwise , it will take the following actions : <EoL>
<BoL> This will set the callback for the ` unauthorized ` method , which among other things is used by ` login_required ` . It takes no arguments , and should return a response to be sent to the user instead of their normal view . <EoL>
<BoL> This sets the callback for reloading a user from the session . The function you set should take a user ID ( a `` unicode `` ) and return a user object , or `` None `` if the user does not exist . <EoL>
<BoL> Checks the equality of two ` UserMixin ` objects using ` get_id ` . <EoL>
<BoL> Checks the inequality of two ` UserMixin ` objects using ` get_id ` . <EoL>
<BoL> This sets the current session as fresh . Sessions become stale when they are reloaded from a cookie . <EoL>
<BoL> This decodes a cookie given by ` encode_cookie ` . If verification of the cookie fails , `` None `` will be implicitly returned . <EoL>
<BoL> This will encode a `` unicode `` value into a cookie , and sign that cookie with the app 's secret key . <EoL>
<BoL> If you decorate a view with this , it will ensure that the current user's login is fresh - i.e . <EoL>
<BoL> This returns `` True `` if the current login is fresh . <EoL>
<BoL> Returns the url for the login view , expanding the view name to a url if needed . <EoL>
<BoL> Creates a URL for redirecting to a login page . <EoL>
<BoL> Reduces the scheme and host from a given URL so it can be passed to the given ` login ` URL more efficiently . <EoL>
<BoL> If you decorate a view with this , it will ensure that the current user is logged in and authenticated before calling the actual view . ( If they are not , it calls the : attr : ` LoginManager.unauthorized ` callback . ) For example : : <EoL>
<BoL> Logs a user in . You should pass the actual user object to this . If the user 's ` is_active ` property is `` False `` , they will not be logged in unless ` force ` is `` True `` . <EoL>
<BoL> Logs a user out . ( You do not need to pass the actual user . ) This will also clean up the remember me cookie if it exists . <EoL>
<BoL> Sets the login view for the app or blueprint . If a blueprint is passed , the login view is set for this blueprint on `` blueprint_login_views `` . <EoL>
<BoL> This function compares strings in somewhat constant time . This requires that the length of at least one string is known in advance . <EoL>
<BoL> Method used to patch BlueprintSetupState.add_url_rule for setup state instance corresponding to this Api instance . Exists primarily to enable _complete_url 's function . <EoL>
<BoL> This method is used to defer the construction of the final url in the case that the Api is created with a Blueprint . <EoL>
<BoL> Synchronize prefix between blueprint/api and registration options , then perform initialization with setup_state.app : class : ` flask.Flask ` object . <EoL>
<BoL> Encapsulating the rules for whether the request was to a Flask endpoint <EoL>
<BoL> Perform initialization actions with the given : class : ` flask.Flask ` object . <EoL>
<BoL> Determine if error should be handled with FR or default Flask <EoL>
<BoL> Adds a resource to the api . <EoL>
<BoL> This function decides whether the error occured in a flask-restful endpoint or not . <EoL>
<BoL> Error handler for the API transforms a raised exception into a Flask response , with the appropriate HTTP status code and body . <EoL>
<BoL> Initialize this class with the given : class : ` flask.Flask ` application or : class : ` flask.Blueprint ` object . <EoL>
<BoL> Looks up the representation transformer for the requested media type , invoking the transformer to create a response object . This defaults to default_mediatype if no transformer is found for the requested mediatype . If default_mediatype is None , a 406 Not Acceptable response will be sent as per RFC 2616 section 14.1 <EoL>
<BoL> Returns a list of requested mediatypes sent in the Accept heade <EoL>
<BoL> Return a method that returns a list of mediatypes <EoL>
<BoL> Wraps a resource ( as a flask view function ) , for cases where the resource does not directly return a response object <EoL>
<BoL> Tests if an endpoint name ( not path ) belongs to this Api . Takes in to account the Blueprint name part of the endpoint name . <EoL>
<BoL> Allows additional representation transformers to be declared for the api . Transformers are functions that must be decorated with this method , passing the mediatype the transformer represents . Three arguments are passed to the transformer : <EoL>
<BoL> Wraps a : class : ` ~flask_restful.Resource ` class , adding it to the api . Parameters are the same as : meth : ` ~flask_restful.Api.add_resource ` . <EoL>
<BoL> Given a response , change it to ask for credentials <EoL>
<BoL> Generates a URL to the given resource . <EoL>
<BoL> Raise a HTTPException for the given http_status_code . Attach any keyword arguments to the exception for later processing . <EoL>
<BoL> Maps an HTTP status code to the textual status <EoL>
<BoL> Takes raw data ( in the form of a dict , list , object ) and a dict of fields to output and filters the data based on those fields . <EoL>
<BoL> : param fields : a dict of whose keys will make up the final serialized response output : param envelope : optional key that will be used to envelop the serialized response <EoL>
<BoL> : param field : a single field with which to marshal the output . <EoL>
<BoL> Makes a Flask response with a JSON encoded body <EoL>
<BoL> Return a three tuple of data , code , and headers <EoL>
<BoL> Returns the next name for a blueprint with the specified base name . <EoL>
<BoL> Returns the name of the : class : ` API ` instance exposing models of the specified type of collection . <EoL>
<BoL> Returns the name of the blueprint in which an API was created for the specified model . <EoL>
<BoL> Returns the name by which the user told us to call collections of instances of this model . <EoL>
<BoL> Creates and registers a ReSTful API blueprint on the : class : ` flask.Flask ` application specified in the constructor of this class . <EoL>
<BoL> Returns the URL for the specified model , similar to : func : ` flask.url_for ` . <EoL>
<BoL> Produce a proxied 'any ' expression using EXISTS . <EoL>
<BoL> Produce a proxied 'contains ' expression using EXISTS . <EoL>
<BoL> Produce a proxied 'has ' expression using EXISTS . <EoL>
<BoL> Provide a column-level property for use with a Mapper . <EoL>
<BoL> Info dictionary associated with the object , allowing user-defined data to be associated with this : class : ` .InspectionAttr ` . <EoL>
<BoL> Called after all mappers are created to assemble relationships between mappers and perform other post-mapper-creation initialization steps . <EoL>
<BoL> Set the parent mapper that references this MapperProperty . <EoL>
<BoL> Construct a new : class : ` .DateTime ` . <EoL>
<BoL> Return setter tuples for a bulk UPDATE . <EoL>
<BoL> like __clause_element__ ( ) , but called specifically by : class : ` .Query ` to allow special behavior . <EoL>
<BoL> Return true if this collection contains any member that meets the given criterion . <EoL>
<BoL> Return true if this element references a member which meets the given criterion . <EoL>
<BoL> Construct a : class : ` .Query ` directly . <EoL>
<BoL> Adapt incoming clauses to transformations which have been applied within this query . <EoL>
<BoL> Apply single-table-inheritance filtering . <EoL>
<BoL> Return the 'entity ' ( mapper or AliasedClass ) associated with the first QueryEntity , or alternatively the 'select from' entity if specified . <EoL>
<BoL> consumes arguments from join ( ) or outerjoin ( ) , places them into a consistent format with which to form the actual JOIN constructs . <EoL>
<BoL> eturn the Mapper associated with the first QueryEntity . <EoL>
<BoL> Return the first QueryEntity . <EoL>
<BoL> Return an iterator yielding result tuples corresponding to the given list of columns <EoL>
<BoL> indicate that this query applies to objects loaded within a certain path . <EoL>
<BoL> Set the 'invoke all eagers ' flag which causes joined- and subquery loaders to traverse into already-loaded related objects and collections . <EoL>
<BoL> Add a column expression to the list of result columns to be returned . <EoL>
<BoL> Add one or more column expressions to the list of result columns to be returned . <EoL>
<BoL> add a mapped entity to the list of result columns to be returned . <EoL>
<BoL> Return the results represented by this `` Query `` as a list . <EoL>
<BoL> Return the full SELECT statement represented by this : class : ` .Query ` , converted to a scalar subquery . <EoL>
<BoL> Return a Query with a specific 'autoflush ' setting . <EoL>
<BoL> Return a : class : ` .Query ` construct which will correlate the given FROM clauses to that of an enclosing : class : ` .Query ` or : func : ` ~.expression.select ` . <EoL>
<BoL> Return a count of rows this Query would return . <EoL>
<BoL> Return the full SELECT statement represented by this : class : ` .Query ` represented as a common table expression ( CTE ) . <EoL>
<BoL> Perform a bulk delete query . <EoL>
<BoL> Apply a `` DISTINCT `` to the query and return the newly resulting `` Query `` . <EoL>
<BoL> Control whether assertions are generated . <EoL>
<BoL> Control whether or not eager joins and subqueries are rendered . <EoL>
<BoL> Produce an EXCEPT of this Query against one or more queries . <EoL>
<BoL> Produce an EXCEPT ALL of this Query against one or more queries . <EoL>
<BoL> Set non-SQL options which take effect during execution . <EoL>
<BoL> A convenience method that turns a query into an EXISTS subquery of the form EXISTS ( SELECT 1 FROM ... WHERE ... ) . <EoL>
<BoL> apply the given filtering criterion to a copy of this : class : ` .Query ` , using SQL expressions . <EoL>
<BoL> apply the given filtering criterion to a copy of this : class : ` .Query ` , using keyword expressions . <EoL>
<BoL> Return the first result of this `` Query `` or None if the result does n't contain any row . <EoL>
<BoL> eturn a Query that selects from this Query's SELECT statement . <EoL>
<BoL> Execute the given SELECT statement and return results . <EoL>
<BoL> Return an instance based on the given primary key identifier , or `` None `` if not found . <EoL>
<BoL> apply one or more GROUP BY criterion to the query and return the newly resulting : class : ` .Query ` <EoL>
<BoL> apply a HAVING criterion to the query and return the newly resulting : class : ` .Query ` . <EoL>
<BoL> Given a ResultProxy cursor as returned by connection.execute ( ) , return an ORM result as an iterator . <EoL>
<BoL> Produce an INTERSECT of this Query against one or more queries . <EoL>
<BoL> Produce an INTERSECT ALL of this Query against one or more queries . <EoL>
<BoL> Create a SQL JOIN against this : class : ` .Query ` object 's criterion and apply generatively , returning the newly resulting : class : ` .Query ` . <EoL>
<BoL> Return the full SELECT statement represented by this : class : ` .Query ` , converted to a scalar subquery with a label of the given name . <EoL>
<BoL> Apply a `` LIMIT `` to the query and return the newly resulting `` Query `` . <EoL>
<BoL> Merge a result into this : class : ` .Query ` object 's Session . <EoL>
<BoL> Apply an `` OFFSET `` to the query and return the newly resulting `` Query `` . <EoL>
<BoL> Return exactly one result or raise an exception . <EoL>
<BoL> Return at most one result or raise an exception . <EoL>
<BoL> When set to True , the query results will always be a tuple , specifically for single element queries . The default is False . <EoL>
<BoL> Return a new Query object , applying the given list of mapper options . <EoL>
<BoL> apply one or more ORDER BY criterion to the query and return the newly resulting `` Query `` <EoL>
<BoL> Create a left outer join against this `` Query `` object 's criterion and apply generatively , returning the newly resulting `` Query `` . <EoL>
<BoL> add values for bind parameters which may have been specified in filter ( ) . <EoL>
<BoL> Return a : class : ` .Query ` that will expire and refresh all instances as they are loaded , or reused from the current : class : ` .Session ` . <EoL>
<BoL> Apply the prefixes to the query and return the newly resulting `` Query `` . <EoL>
<BoL> Return a new : class : ` .Query ` , where the `` join point '' has been reset back to the base FROM entities of the query . <EoL>
<BoL> Return the first element of the first result or None if no rows present . If multiple rows are returned , raises MultipleResultsFound . <EoL>
<BoL> Set the FROM clause of this : class : ` .Query ` to a core selectable , applying it as a replacement FROM clause for corresponding mapped entities . <EoL>
<BoL> Set the FROM clause of this : class : ` .Query ` explicitly . <EoL>
<BoL> Computes the `` slice '' of the : class : ` .Query ` represented by the given indices and returns the resulting : class : ` .Query ` . <EoL>
<BoL> eturn the full SELECT statement represented by this : class : ` .Query ` , embedded within an : class : ` .Alias ` . <EoL>
<BoL> Apply the suffix to the query and return the newly resulting `` Query `` . <EoL>
<BoL> Produce a UNION of this Query against one or more queries . <EoL>
<BoL> Produce a UNION ALL of this Query against one or more queries . <EoL>
<BoL> Perform a bulk update query . <EoL>
<BoL> Return a scalar result corresponding to the given column expression . <EoL>
<BoL> Return a new : class : ` .Query ` replacing the SELECT list with the given entities . <EoL>
<BoL> Add an indexing or other executional context hint for the given entity or selectable to this : class : ` .Query ` . <EoL>
<BoL> Apply column labels to the return value of Query.statement . <EoL>
<BoL> Return a new : class : ` .Query ` object with the specified `` locking mode '' , which essentially refers to the `` FOR UPDATE `` clause . <EoL>
<BoL> Add filtering criterion that relates the given instance to a child object or collection , using its attribute state as well as an established : func : ` .relationship ( ) ` configuration . <EoL>
<BoL> Return a : class : ` .Query ` that will use the given : class : ` .Session ` . <EoL>
<BoL> add a statement hint to this : class : ` .Select ` . <EoL>
<BoL> Return a new : class : ` .Query ` object transformed by the given function . <EoL>
<BoL> Yield only `` count `` rows at a time . <EoL>
<BoL> Test that this relationship is legal , warn about inheritance conflicts . <EoL>
<BoL> Return True if all columns in the given collection are mapped by the tables referenced by this : class : ` .Relationship ` . <EoL>
<BoL> Interpret the 'backref ' instruction to create a : func : ` .relationship ` complementary to this one . <EoL>
<BoL> Return the current cascade setting for this : class : ` .RelationshipProperty ` . <EoL>
<BoL> Return True if this property will persist values on behalf of the given mapper . <EoL>
<BoL> Convert incoming configuration arguments to their proper form . <EoL>
<BoL> Returns the singleton instance of the specified class . <EoL>
<BoL> Assign all attributes from the supplied ` kwargs ` dictionary to the model . This does the same thing as the default declarative constructor , when provided a dictionary of attributes and values . <EoL>
<BoL> Returns the count of the specified ` query ` . <EoL>
<BoL> Executes each of the SQLAlchemy functions specified in `` functions `` , a list of dictionaries of the form described below , on the given model and returns a dictionary mapping function name ( slightly modified , see below ) to result of evaluation of that function . <EoL>
<BoL> Returns the first instance of ` model ` whose primary key has the value ` primary_key_value ` , or `` None `` if no such instance exists . <EoL>
<BoL> Returns a dictionary-like object containing all the columns of the specified ` model ` class . <EoL>
<BoL> Helper which returns the SQLAlchemy type of the field . <EoL>
<BoL> Returns the single instance of ` model ` whose primary key has the value found in ` attrs ` , or initializes a new instance if no primary key is specified . <EoL>
<BoL> Returns the model class specified by the given SQLAlchemy relation attribute , or `` None `` if no such class can be inferred . <EoL>
<BoL> Gets the class of the model to which ` model ` is related by the attribute whose name is ` relationname ` . <EoL>
<BoL> Returns a list of relation names of ` model ` ( as a list of strings ) . <EoL>
<BoL> Returns `` True `` if the ` model ` has the specified field or if it has a settable hybrid property for this field name . <EoL>
<BoL> Provide a modifying decorator that defines a custom comparator producing method . <EoL>
<BoL> Provide a modifying decorator that defines a deletion method . <EoL>
<BoL> Provide a modifying decorator that defines a SQL-expression producing method . <EoL>
<BoL> Provide a modifying decorator that defines a getter method . <EoL>
<BoL> Provide a modifying decorator that defines a setter method . <EoL>
<BoL> Provide a modifying decorator that defines an UPDATE tuple producing method . <EoL>
<BoL> Returns `` True `` if and only if the field of ` model ` with the specified name corresponds to either a : class : ` datetime.date ` object or a : class : ` datetime.datetime ` object . <EoL>
<BoL> Returns `` True `` if and only if the field of ` model ` with the specified name corresponds to a : class : ` datetime.timedelta ` object . <EoL>
<BoL> Returns `` True `` if and only if the relation of ` instance ` whose name is ` relation ` is list-like . <EoL>
<BoL> Returns `` True `` if and only if the specified SQLAlchemy model class is a mapped class . <EoL>
<BoL> Returns a pair of lists , the left one containing all elements of ` l ` for which ` condition ` is `` True `` and the right one containing all elements of ` l ` for which ` condition ` is `` False `` . <EoL>
<BoL> Returns the name of the primary key of the specified model or instance of a model , as a string . <EoL>
<BoL> Returns all the primary keys for a model . <EoL>
<BoL> Returns a SQLAlchemy query object containing the result of querying ` model ` for instances whose primary key has the value ` primary_key_value ` . <EoL>
<BoL> Returns a SQLAlchemy query object for the specified ` model ` . <EoL>
<BoL> Produce an inspection object for the given target . <EoL>
<BoL> Returns a new dictionary with all the mappings of ` dictionary ` but with date strings and intervals mapped to : class : ` datetime.datetime ` or : class : ` datetime.timedelta ` objects . <EoL>
<BoL> Returns a new dictionary with the keys of ` d ` converted to upper case and the values left unchanged . <EoL>
<BoL> Adds a new or existing related model to each model specified by ` query ` . <EoL>
<BoL> Helper function which returns the number of results per page based on the request argument `` results_per_page `` and the server configuration parameters : attr : ` results_per_page ` and : attr : ` max_results_per_page ` . <EoL>
<BoL> Deletes multiple instances of the model . <EoL>
<BoL> Returns an instance of the model with the specified attributes . <EoL>
<BoL> Retrieve a column name from a column attribute of SQLAlchemy model class , or a string . <EoL>
<BoL> Rolls back the session , extracts validation error messages , and returns a : func : ` flask.jsonify ` response with : http : statuscode : ` 400 ` containing the extracted validation error messages . <EoL>
<BoL> Returns the dictionary representation of the specified instance . <EoL>
<BoL> Returns the dictionary representation of the instance specified by ` instid ` . <EoL>
<BoL> Returns a paginated JSONified response from the specified list of model instances . <EoL>
<BoL> Removes a related model from each model specified by ` query ` . <EoL>
<BoL> Defines a generic search function for the database model . <EoL>
<BoL> Sets the value of the relation specified by ` relationname ` on each instance specified by ` query ` to have the new or existing related models specified by ` toset ` . <EoL>
<BoL> Adds , removes , or sets models which are related to the model specified in the constructor of this class . <EoL>
<BoL> Removes the specified instance of the model with the specified name from the database . <EoL>
<BoL> Returns a JSON representation of an instance of model with the specified name . <EoL>
<BoL> Updates the instance specified by `` instid `` of the named model , or updates multiple instances if `` instid `` is `` None `` . <EoL>
<BoL> Creates a new instance of a given model based on request data . <EoL>
<BoL> Alias for : meth : ` patch ` . <EoL>
<BoL> Returns either a SQLAlchemy query or Flask-SQLAlchemy query object ( depending on the type of the model ) on the specified ` model ` , or if ` model ` is `` None `` , the model specified in the constructor of this class . <EoL>
<BoL> Calls the constructor of the superclass and specifies the model for which this class provides a ReSTful API . <EoL>
<BoL> Returns the result of evaluating the SQL functions specified in the body of the request . <EoL>
<BoL> Returns a new : class : ` Filter ` object with arguments parsed from ` dictionary ` . <EoL>
<BoL> Instantiates this object with the specified attributes . <EoL>
<BoL> Returns a string representation of this object . <EoL>
<BoL> Instantiates this object with the specified attributes . <EoL>
<BoL> Returns a string representation of this object . <EoL>
<BoL> Instantiates this object with the specified attributes . <EoL>
<BoL> Returns a string representation of this object . <EoL>
<BoL> Returns the operation on ` model ` specified by the provided filter . <EoL>
<BoL> Translates an operation described as a string to a valid SQLAlchemy query parameter using a field or relation of the specified model . <EoL>
<BoL> Builds an SQLAlchemy query instance based on the search parameters present in `` search_params `` , an instance of : class : ` SearchParameters ` . <EoL>
<BoL> Returns a string representation of the search parameters . <EoL>
<BoL> Returns a new : class : ` SearchParameters ` object with arguments parsed from ` dictionary ` . <EoL>
<BoL> Recursively calls : func : ` QueryBuilder._create_operation ` when argument is a dictionary of the form specified in : ref : ` search ` . <EoL>
<BoL> Returns a SQLAlchemy query object on the given ` model ` where the search for the query is defined by ` searchparams ` . <EoL>
<BoL> Performs the search specified by the given parameters on the model specified in the constructor of this class . <EoL>
<BoL> Exception mapping helper decorator . Takes the same arguments as the main decorator , plus ` mapping ` , which is a list of ` ( exception_class , status_line ) ` pairs . <EoL>
<BoL> Returns a dictionary representation of the specified dictionary of HTTP headers ready for use as a JSON object . <EoL>
<BoL> Returns `` True `` if and only if the user agent of the client making the request indicates that it is Microsoft Internet Explorer 8 or 9 . <EoL>
<BoL> Returns a list representation of the specified HTTP Link header information . <EoL>
<BoL> Returns a pair , consisting of a list of column names to exclude on the left and a dictionary mapping relation name to a list containing the names of fields on the related model which should be excluded . <EoL>
<BoL> Returns a pair , consisting of a list of column names to include on the left and a dictionary mapping relation name to a list containing the names of fields on the related model which should be included . <EoL>
<BoL> Returns a decorator that catches database integrity errors . <EoL>
<BoL> Decorator that catches : exc : ` ProcessingException ` s and subsequently returns a JSON-ified error response . <EoL>
<BoL> Returns a string representing the value of the `` Link `` header . <EoL>
<BoL> Tries to extract a dictionary mapping field name to validation error messages from ` exception ` , which is a validation exception as provided in the `` validation_exceptions `` keyword argument in the constructor of this class . <EoL>
<BoL> Same as : func : ` flask.jsonify ` , but sets response headers . <EoL>
<BoL> Passes the specified arguments directly to : func : ` jsonify ` with a status code of 200 , then wraps the response with the name of a JSON-P callback function specified as a query parameter called `` 'callback ' `` ( or does nothing if no such callback function is specified in the request ) . <EoL>
<BoL> Sets the specified headers on the specified response . <EoL>
<BoL> URL encode a single string with the given encoding and convert whitespace to `` + '' . <EoL>
<BoL> Returns ` True ` if the named field is a member of this form . <EoL>
<BoL> Dict-style access to this form 's fields . <EoL>
<BoL> Iterate form fields in creation order . <EoL>
<BoL> .. deprecated : : 2.0 ` _get_translations ` is being removed in WTForms 3.0 , use ` Meta.get_translations ` instead . <EoL>
<BoL> Render the form 's hidden fields in one call . <EoL>
<BoL> Consider the form submitted if there is an active request and the method is `` POST `` , `` PUT `` , `` PATCH `` , or `` DELETE `` . <EoL>
<BoL> Populates the attributes of the passed ` obj ` with data from the form's fields . <EoL>
<BoL> Take form , object data , and keyword arg input and have the fields process them . <EoL>
<BoL> Validates the form by calling ` validate ` on each field , passing any extra ` Form.validate_ < fieldname > ` validators to the field validator . <EoL>
<BoL> Call : meth : ` validate ` only if the form is submitted . This is a shortcut for `` form.is_submitted ( ) and form.validate ( ) `` . <EoL>
<BoL> Render this field as HTML , using keyword args as additional attributes . <EoL>
<BoL> Returns a HTML representation of the field . For more powerful rendering , see the : meth : ` __call__ ` method . <EoL>
<BoL> Returns a HTML representation of the field . For more powerful rendering , see the ` __call__ ` method . <EoL>
<BoL> Returns a HTML representation of the field . For more powerful rendering , see the ` __call__ ` method . <EoL>
<BoL> Run a validation chain , stopping if any validator raises StopValidation . <EoL>
<BoL> Get a translation for the given message . <EoL>
<BoL> Get a translation for a message which can be pluralized . <EoL>
<BoL> Populates ` obj. < name > ` with the field 's data . <EoL>
<BoL> Override if you need to run any field-level validation tasks after normal validation . This should n't be needed in most cases . <EoL>
<BoL> Override if you need field-level validation . Runs before any other validators . <EoL>
<BoL> Process incoming data , calling process_data , process_formdata as needed , and run filters . <EoL>
<BoL> Process the Python data applied to this field and store the result . <EoL>
<BoL> Validates the field and returns True or False . <EoL>
<BoL> Support basic_auth via /login or login_required ( basic=True ) <EoL>
<BoL> Helper to get internal messages outside this instance <EoL>
<BoL> To set login_checker as decorator : @ simple.login_checher def foo ( user ) : ... <EoL>
<BoL> user must be a dictionary here default is checking username/password if login is ok returns True else False <EoL>
<BoL> Get current logged in username <EoL>
<BoL> Checks if user is logged in if ` username ` is passed check if specified user is logged in username can be a list <EoL>
<BoL> Decorate views to require login @ login_required @ login_required ( ) @ login_required ( username='admin ' ) @ login_required ( username= [ 'admin ' , 'jon ' ] ) @ login_required ( basic=True ) @ login_required ( must= [ function , another_function ] ) Return in the first validation error , else return NoneThis is for when decorator is @ login_requiredThis is for when decorator is @ login_required ( ... ) <EoL>
<BoL> Like : meth : ` first ` but aborts with 404 if not found instead of returning `` None `` . <EoL>
<BoL> Like : meth : ` get ` but aborts with 404 if not found instead of returning `` None `` . <EoL>
<BoL> Returns `` per_page `` items from page `` page `` . <EoL>
<BoL> This is called by SQLAlchemy during mapper setup . It determines the final table object that the model will use . <EoL>
<BoL> Returns a : class : ` Pagination ` object for the next page . <EoL>
<BoL> Returns a : class : ` Pagination ` object for the previous page . <EoL>
<BoL> This method is called before engine creation and used to inject driver specific hacks into the options . The ` options ` parameter is a dictionary of keyword arguments that will then be used to call the : func : ` sqlalchemy.create_engine ` function . <EoL>
<BoL> Creates all tables . <EoL>
<BoL> Create a : class : ` ~sqlalchemy.orm.scoping.scoped_session ` on the factory from : meth : ` create_session ` . <EoL>
<BoL> Create the session factory used by : meth : ` create_scoped_session ` . <EoL>
<BoL> Drops all tables . <EoL>
<BoL> Helper method that implements the logic to look up an application . <EoL>
<BoL> Returns a dictionary with a table- > engine mapping . <EoL>
<BoL> Returns a specific engine . <EoL>
<BoL> Returns a list of all tables relevant for a bind . <EoL>
<BoL> This callback can be used to initialize an application for the use with this database setup . Never use a database in the context of an application not initialized that way or connections will leak . <EoL>
<BoL> Creates the connector for a given state and bind . <EoL>
<BoL> Creates the declarative base that all models will inherit from . <EoL>
<BoL> Reflects tables from the database . <EoL>
<BoL> Return True if the instance is associated with this session . <EoL>
<BoL> Iterate over all pending or persistent instances within this Session . <EoL>
<BoL> Expire a state if persistent , else expunge if pending <EoL>
<BoL> Place an object in the `` Session `` . <EoL>
<BoL> Add the given collection of instances to this `` Session `` . <EoL>
<BoL> Begin a transaction on this : class : ` .Session ` . <EoL>
<BoL> Begin a `` nested '' transaction on this Session , e.g . SAVEPOINT . <EoL>
<BoL> Associate a : class : ` .Mapper ` or arbitrary Python class with a `` bind '' , e.g . an : class : ` .Engine ` or : class : ` .Connection ` . <EoL>
<BoL> Associate a : class : ` .Table ` with a `` bind '' , e.g . an : class : ` .Engine ` or : class : ` .Connection ` . <EoL>
<BoL> Perform a bulk update of the given list of mapping dictionaries . <EoL>
<BoL> Close this Session . <EoL>
<BoL> Close *all* sessions in memory . <EoL>
<BoL> Flush pending changes and commit the current transaction . <EoL>
<BoL> Mark an instance as deleted . <EoL>
<BoL> Associate an object with this : class : ` .Session ` for related object loading . <EoL>
<BoL> Execute a SQL expression construct or string statement within the current transaction . <EoL>
<BoL> Expire the attributes on an instance . <EoL>
<BoL> Expires all persistent instances within this Session . <EoL>
<BoL> Remove the ` instance ` from this `` Session `` . <EoL>
<BoL> Remove all object instances from this `` Session `` . <EoL>
<BoL> Flush all the object changes to the database . <EoL>
<BoL> Return a `` bind '' to which this : class : ` .Session ` is bound . <EoL>
<BoL> Return an identity key . <EoL>
<BoL> Close this Session , using connection invalidation . <EoL>
<BoL> Return `` True `` if the given instance has locally modified attributes . <EoL>
<BoL> Copy the state of a given instance into a corresponding instance within this : class : ` .Session ` . <EoL>
<BoL> Return the : class : ` .Session ` to which an object belongs . <EoL>
<BoL> Prepare the current transaction in progress for two phase commit . <EoL>
<BoL> Remove unreferenced instances cached in the identity map . <EoL>
<BoL> Return a new : class : ` .Query ` object corresponding to this : class : ` .Session ` . <EoL>
<BoL> Rollback the current transaction in progress . <EoL>
<BoL> Like : meth : ` ~.Session.execute ` but return a scalar result . <EoL>
<BoL> In debug mode Flask-SQLAlchemy will log all the SQL queries sent to the database . <EoL>
<BoL> Gets the state for the application <EoL>
<BoL> Given a string or unicode instance , produce a new URL instance . <EoL>
<BoL> Determine whether `` __tablename__ `` should be automatically generated for a model . <EoL>
<BoL> Register a function that will generate the response for CSRF errors . <EoL>
<BoL> Mark a view or blueprint to be excluded from CSRF protection . <EoL>
<BoL> Performs the actual validation . <EoL>
<BoL> Process data received over the wire from a form . <EoL>
<BoL> Returns the recaptcha input HTML . <EoL>
<BoL> Transform string to bytes . <EoL>
<BoL> Decodes input_bytes to text if needed . <EoL>
<BoL> Implementations must override this to provide a method with which one can get a CSRF token for this form . <EoL>
<BoL> Receive the form we 're attached to and set up fields . <EoL>
<BoL> Override this method to provide custom CSRF validation logic . <EoL>
<BoL> Generate a CSRF token . The token is cached for a request , so multiple calls to this function will generate the same token . <EoL>
<BoL> Check if the given data is a valid CSRF token . This compares the given signed token to the one stored in the session . <EoL>
<BoL> bind_field allows potential customization of how fields are bound . <EoL>
<BoL> Build a CSRF implementation . This is called once per form instance . <EoL>
<BoL> Override in subclasses to provide alternate translations factory . See the i18n documentation for more . <EoL>
<BoL> render_field allows customization of how widget rendering is done . <EoL>
<BoL> Given a dictionary of values , update values on this ` Meta ` instance . <EoL>
<BoL> wrap_formdata allows doing custom wrappers of WTForms formdata . <EoL>
<BoL> Generate HTML attribute syntax from inputted keyword arguments . <EoL>
<BoL> Return a shallow mutable copy of this object . Keep in mind that the standard library 's : func : ` copy ` function is a no-op for this class like for any other python immutable type ( eg : : class : ` tuple ` ) . <EoL>
<BoL> Consider the form submitted if there is an active request and the method is `` POST `` , `` PUT `` , `` PATCH `` , or `` DELETE `` . <EoL>
<BoL> Returns the correct gettext translations . Copy from flask-babel with some modifications . <EoL>
<BoL> Indicate whether the given string is a valid email address according to the 'addr-spec ' portion of RFC 2822 ( see section 3.4.1 ) . Parts of the spec that are marked obsolete are *not* included in this test , and certain arcane constructions that depend on circular definitions in the spec may not pass , but in general this should correctly identify any email address likely to be in use as of 2011 . <EoL>
<BoL> Given one of the supported target formats , load a swagger schema into it's python representation . <EoL>
<BoL> Common entry point for loading some form of raw swagger schema . <EoL>
<BoL> Given a request , normalize it to the internal Request class . <EoL>
<BoL> Given a response , normalize it to the internal Response class . This also involves normalizing the associated request object . <EoL>
<BoL> Given the python representation of a JSONschema as defined in the swagger spec , validate that the schema complies to spec . If ` target ` is provided , that target will be validated against the provided schema . <EoL>
<BoL> Validate the request/response cycle of an api call against a swagger schema . Request/Response objects from the ` requests ` and ` urllib ` library are supported . <EoL>
<BoL> Validate the response of an api call against a swagger schema . <EoL>
<BoL> Request validation does the following steps . <EoL>
<BoL> Response validation involves the following steps . <EoL>
<BoL> In the case where a list/tuple is passed in this just extends the list rather than having nested lists . <EoL>
<BoL> Shortcut for the common pattern with ` chain_reduce_partial ` for applying a validator to some specified key in a mapping . <EoL>
<BoL> Decorator for validation functions which makes them pass if the value passed in is the EMPTY sentinal value . <EoL>
<BoL> A version of ` functools.wraps ` that is safe to wrap a partial in . <EoL>
<BoL> Given a function whos kwargs need to contain a reserved word such as ` in ` , allow calling that function with the keyword as ` in_ ` , such that function kwargs are rewritten to use the reserved word . <EoL>
<BoL> Given a function that is called with a reseved word , rewrite the keyword with an underscore suffix . <EoL>
<BoL> Format validation should only be executed if the value is of one of the appropriate types for the format . <EoL>
<BoL> Upstream bug in python : https : //bugs.python.org/issue26822 <EoL>
<BoL> Given an iterable of functions , returns a callable that takes a value and passes it through all of the given functions in order . <EoL>
<BoL> Upstream bug in python : https : //bugs.python.org/issue26822 <EoL>
<BoL> Given a schema object , construct a dictionary of validators needed to validate a response matching the given schema . <EoL>
<BoL> Generates a callable validator for the given type or iterable of types . <EoL>
<BoL> Given a list of parameters , find the one with the given name . <EoL>
<BoL> Merge multiple lists of parameters into a single list . If there are any duplicate definitions , the last write wins . <EoL>
<BoL> Given a parameter definition returns a regex pattern that will match that part of the path . <EoL>
<BoL> Turns the non prametrized path components into strings subtable for using as a regex pattern . This primarily involves escaping special characters so that the actual character is matched in the regex . <EoL>
<BoL> Given an api path , possibly with parameter notation , return a pattern suitable for turing into a regular expression which will match request paths that conform to the parameter definitions and the api path . <EoL>
<BoL> Given a part of a path either : - If it is a parameter : parse it to a regex group - Otherwise : escape any special regex characters <EoL>
<BoL> Because of things in python like : <EoL>
<BoL> string : `` example '' <EoL>
<BoL> Returns the validator function for the given format , as registered with the format registry . <EoL>
<BoL> Generator function returning a callable for maxItems validation . <EoL>
<BoL> Generates a validator for enforcing the maxLength of a string . <EoL>
<BoL> Generator function returning a callable for maximum value validation . <EoL>
<BoL> Generator function returning a callable for minItems validation . <EoL>
<BoL> Generates a validator for enforcing the minLength of a string . <EoL>
<BoL> Generator function returning a callable for minimum value validation . <EoL>
<BoL> Returns the unique_item_validator if uniqueItems is set to True , otherwise it returns the noop function . <EoL>
<BoL> Create a callable that will take the string value of a header and cast it to the appropriate type . This can involve : <EoL>
<BoL> No-Op validator that does nothing . <EoL>
<BoL> Validator for ARRAY types to enforce a maximum number of items allowed for the ARRAY to be valid . <EoL>
<BoL> Validator function for validating that a value does not violate it's maximum allowed value . This validation can be inclusive , or exclusive of the maximum depending on the value of ` is_exclusive ` . <EoL>
<BoL> Validator for ARRAY types to enforce a minimum number of items allowed for the ARRAY to be valid . <EoL>
<BoL> Validator function for validating that a value does not violate it's minimum allowed value . This validation can be inclusive , or exclusive of the minimum depending on the value of ` is_exclusive ` . <EoL>
<BoL> Given a value and a divisor , validate that the value is divisible by the divisor . <EoL>
<BoL> Given a path , find the api_path it matches . <EoL>
<BoL> Given a request method , validate that the request method is valid for the api path . <EoL>
<BoL> Validate that the value is one of the provided primative types . <EoL>
<BoL> Validator for ARRAY types to enforce that all array items must be unique . <EoL>
<BoL> - consumes ( did the request conform to the content types this api consumes ) - produces ( did the response conform to the content types this endpoint produces ) - parameters ( did the parameters of this request validate ) TODO : move path parameter validation to here , because each operation can override any of the path level parameters . - schemes ( was the request scheme correct ) - security : TODO since security is n't yet implemented . <EoL>
<BoL> Constructs a dictionary of validator functions for the provided parameter definition . <EoL>
<BoL> Generates a validation function that will validate a dictionary of headers . <EoL>
<BoL> Generates a validator function that given a path , validates that it against the path parameters <EoL>
<BoL> Given an iterable of parameters , returns a dictionary of validator functions for each parameter . Note that this expects the parameters to be unique in their name value , and throws an error if this is not the case . <EoL>
<BoL> Helper function for validating a request path <EoL>
<BoL> Given a response , validate that the response status code is in the accepted status codes defined by this endpoint . <EoL>
<BoL> Attempt multiple validators on an object . <EoL>
<BoL> Load config options from a file , as if it was given as a source during initialization . This means that options set via argv , environ or directly will not be influenced . <EoL>
<BoL> Load config options from a string , as if it was given as a source during initialization . This means that options set via argv , environ or directly will not be influenced . <EoL>
<BoL> Set the logging level and match filter <EoL>
<BoL> Get the path to the application directory , where applications are allowed to write user specific files ( e.g . configurations ) . <EoL>
<BoL> Construct a query condition for a filter on a value <EoL>
<BoL> Construct a query condition for 'contains ' or 'ncontains ' <EoL>
<BoL> Set the type of index <EoL>
<BoL> Index this field and project all attributes <EoL>
<BoL> Create a query condition that this field must begin with a string <EoL>
<BoL> Create a query condition that this field must be between two values ( inclusive ) <EoL>
<BoL> Poetic version of : meth : ` ~.between_ ` <EoL>
<BoL> Check if the provided fields are enough to fully resolve this field <EoL>
<BoL> Coerce the value to the field 's data type <EoL>
<BoL> Create a query condition that this field must contain a value <EoL>
<BoL> Dump a value to its Dynamo format <EoL>
<BoL> Dump a value to format for use in a Dynamo query <EoL>
<BoL> Decode a value retrieved from Dynamo <EoL>
<BoL> Construct a dynamo local index object <EoL>
<BoL> Create a query condition that this field must be within a set of values <EoL>
<BoL> Index this field and project selected attributes <EoL>
<BoL> Index this field and project all key attributes <EoL>
<BoL> Create a query condition that this field can not contain a value <EoL>
<BoL> Resolve a field value from an object or scope dict <EoL>
<BoL> Run the validation checks for this field on a model object . <EoL>
<BoL> Shortcut for query <EoL>
<BoL> Connect to a specific host <EoL>
<BoL> Connect to a specific host <EoL>
<BoL> Connect to an AWS region <EoL>
<BoL> Create the DynamoDB tables required by the registered models <EoL>
<BoL> Delete items from dynamo <EoL>
<BoL> Delete one or more items from dynamo as specified by primary keys <EoL>
<BoL> Drop the DynamoDB tables for all registered models <EoL>
<BoL> Check if an item exists in the database <EoL>
<BoL> Fetch one or more items from dynamo from the primary keys <EoL>
<BoL> Get the schema for the registered models <EoL>
<BoL> Create a table query for a specific model <EoL>
<BoL> Overwrite model data with freshest from database <EoL>
<BoL> Register one or more models with the engine <EoL>
<BoL> Save models to dynamo <EoL>
<BoL> Create a table scan for a specific model <EoL>
<BoL> Updates the DynamoDB table global indexes required by the registered models <EoL>
<BoL> Get the cached value of a field before any local modifications <EoL>
<BoL> Resolve a field value from an object or scope dict <EoL>
<BoL> Project all attributes into the index <EoL>
<BoL> Get the dynamo index class for this GlobalIndex <EoL>
<BoL> Select which attributes to project into the index <EoL>
<BoL> Project key attributes into the index <EoL>
<BoL> Set the index throughput <EoL>
<BoL> Called after class is constructed and after meta_ is set <EoL>
<BoL> Override __new__ to set default field values <EoL>
<BoL> Called after class is constructed but before meta_ is set <EoL>
<BoL> Check if a given field is part of the primary key <EoL>
<BoL> Reset the __cache__ to only track mutable fields <EoL>
<BoL> Atomically add to a set <EoL>
<BoL> Get the cached ( server ) value of a field <EoL>
<BoL> Construct a dynamo `` expects '' mapping based on the cached fields <EoL>
<BoL> Return a dict for inserting into DynamoDB <EoL>
<BoL> Dump a cached field to a Dynamo-friendly value <EoL>
<BoL> Dump a field to a Dynamo-friendly value <EoL>
<BoL> Load a model from DynamoDB data <EoL>
<BoL> Delete the model from the database <EoL>
<BoL> Get Field or construct a placeholder for an undeclared field <EoL>
<BoL> Atomically increment a number value <EoL>
<BoL> The primary key dict for an index , encoded for dynamo <EoL>
<BoL> All declared fields <EoL>
<BoL> Context manager to speed up object load process <EoL>
<BoL> Mark that a field is dirty <EoL>
<BoL> Atomically mutate a set <EoL>
<BoL> For use when loading a partial object ( i.e . from update_field ) <EoL>
<BoL> Called after model loaded from database <EoL>
<BoL> Called after item is saved to database <EoL>
<BoL> Called after update_field or update_fields <EoL>
<BoL> Called before saving items <EoL>
<BoL> Overwrite model data with freshest from database <EoL>
<BoL> Atomically remove from a set <EoL>
<BoL> Save model data to database ( see also : sync ) <EoL>
<BoL> Decode and set a value retrieved from Dynamo <EoL>
<BoL> Sync model changes back to database <EoL>
<BoL> If a value was previously stored as json , attempt to load it as an obj_type object <EoL>
<BoL> Check the type of a value and possible convert it <EoL>
<BoL> Dump a value to a form that can be stored in DynamoDB <EoL>
<BoL> If this is a set type , dump a value to the type contained in the set <EoL>
<BoL> Turn a value into this type from a DynamoDB value <EoL>
<BoL> Find the number of elements the match this query <EoL>
<BoL> Delete all items that match the query <EoL>
<BoL> Add a Condition to constrain the query <EoL>
<BoL> Use a specific local or global index for the query <EoL>
<BoL> Limit the number of query results <EoL>
<BoL> Return the result of the query . If there is not exactly one result , raises an exception ( details below ) <EoL>
<BoL> Limit the number of items scanned <EoL>
<BoL> Add another update to the delta <EoL>
<BoL> Merge the delta with a set <EoL>
<BoL> Add the limit kwarg if necessary <EoL>
<BoL> Create a Condition on a field <EoL>
<BoL> Force the query to use a certain index <EoL>
<BoL> Create a condition that will limit the results to a count <EoL>
<BoL> Create a condition that will limit the number of items scanned <EoL>
<BoL> Get the kwargs for doing a table query <EoL>
<BoL> Get the kwargs for doing a table scan <EoL>
<BoL> Create an alias for a SetType that contains this data type <EoL>
<BoL> Create a set factory that will contain a specific data type <EoL>
<BoL> We need to expose this for 'contains ' and 'ncontains ' <EoL>
<BoL> Register a type class for use with Fields <EoL>
<BoL> The name of the DynamoDB table <EoL>
<BoL> Get a unique ordering from constraint fields.Find the best choice in a list of orderings . <EoL>
<BoL> Get the ordering with matching index name <EoL>
<BoL> Construct the primary key value <EoL>
<BoL> Get the primary key dict for an index ( includes the table key ) <EoL>
<BoL> Get the dynamo primary key dict for an item <EoL>
<BoL> Get a tuple that represents the primary key for an item <EoL>
<BoL> Create the orderings <EoL>
<BoL> Build the dict of related fieldsRecursively add a field to related <EoL>
<BoL> Construct the range key value <EoL>
<BoL> Perform validation checks on the model declaration <EoL>
<BoL> Get the dynamo primary key dict for this ordering <EoL>
<BoL> Get the query and filter kwargs for querying against this index <EoL>
<BoL> Merge all the __metadata__ dicts in a class 's hierarchy <EoL>
<BoL> Produces new class intance that will execute given functions one by one . Internal method that was added to avoid code duplication in other methods . <EoL>
<BoL> Simplify partial execution syntax . Rerurn partial function built from tuple ( func , arg1 , arg2 , ... ) <EoL>
<BoL> Overload apply operato <EoL>
<BoL> Overload < < operator for F instances <EoL>
<BoL> Overload > > operator for F instances <EoL>
<BoL> Return position of next evaluated element <EoL>
<BoL> A decorator that makes the function curried <EoL>
<BoL> Advance the iterator n-steps ahead . If n is none , consume entirely . <EoL>
<BoL> Returns the first true value in the iterable . If no true value is found , returns *default* http : //docs.python.org/3.4/library/itertools.html # itertools-recipes <EoL>
<BoL> Flatten any level of nested iterables ( not including strings , bytes or bytearrays ) . Reimplemented to work with all nested levels ( not only one ) . <EoL>
<BoL> Return function that will apply arguments in reverse orde <EoL>
<BoL> Returns a dict of the elements from given iterable keyed by result of keyfunc on each element . The value at each key will be a list of the corresponding elements , in the order they appeared in the iterable . <EoL>
<BoL> Collect data into fixed-length chunks or blocks , so grouper ( 3 , 'ABCDEFG ' , ' x ' ) -- > ABC DEF Gxx <EoL>
<BoL> Call a function repeatedly until an exception is raised . <EoL>
<BoL> Return an iterator yielding x , f ( x ) , f ( f ( x ) ) etc . <EoL>
<BoL> Returns the sequence elements n times <EoL>
<BoL> Returns the nth item or a default value <EoL>
<BoL> Returns the sequence elements and then returns None indefinitely . Useful for emulating the behavior of the built-in map ( ) function . <EoL>
<BoL> pairwise ( s ) - > ( s0 , s1 ) , ( s1 , s2 ) , ( s2 , s3 ) , ... <EoL>
<BoL> Use a predicate to partition entries into false entries and true entries partition ( is_odd , range ( 10 ) ) -- > 0 2 4 6 8 and 1 3 5 7 9 <EoL>
<BoL> powerset ( [ 1,2,3 ] ) -- > ( ) ( 1 , ) ( 2 , ) ( 3 , ) ( 1,2 ) ( 1,3 ) ( 2,3 ) ( 1,2,3 ) <EoL>
<BoL> Repeat calls to func with specified arguments . Example : repeatfunc ( random.random ) <EoL>
<BoL> oundrobin ( 'ABC ' , 'D ' , 'EF ' ) -- > A D E B F C Recipe originally credited to George Sakkis . Reimplemented to work both in Python 2+ and 3+ . <EoL>
<BoL> Split iterable into two iterators after given number of iterations splitat ( 2 , range ( 5 ) ) -- > 0 1 and 2 3 4 <EoL>
<BoL> Split iterable into two iterators at first false predicate splitby ( is_even , range ( 5 ) ) -- > 0 and 1 2 3 4 <EoL>
<BoL> Return function to fold iterator to scala value using passed function as reducer . <EoL>
<BoL> Return function to fold iterator to scala value using passed function as reducer in reverse order ( consume values from iterator from right-to-left ) . <EoL>
<BoL> Return function to unfold value into stream using passed function as values producer . Passed function should accept current cursor and should return : * tuple of two elements ( value , cursor ) , value will be added to output , cursor will be used for next function call * None in order to stop producing sequence <EoL>
<BoL> zipwith ( f ) ( seq1 , seq2 , .. ) - > [ f ( seq1 [ 0 ] , seq2 [ 0 ] , .. ) , f ( seq1 [ 1 ] , seq2 [ 1 ] , .. ) , ... ] <EoL>
<BoL> Return original function notation to ensure that eval ( repr ( f ) ) == f <EoL>
<BoL> Build readable representation for function <EoL>
<BoL> Call method from _ object by given name and arguments <EoL>
<BoL> This changes the class 's docstring to include information about all the messages this validator uses . <EoL>
<BoL> A validation method that does n't do anything . <EoL>
<BoL> Return a dictionary of all the messages of this validator , and any subvalidators if present . <EoL>
<BoL> Encode a string in base64 , stripping whitespace and removing newlines . <EoL>
<BoL> Join the specified validators . <EoL>
<BoL> Add another validator . <EoL>
<BoL> Return any validators that this validator contains . <EoL>
<BoL> Helper to assure we have proper input <EoL>
<BoL> A decorator which can be used to mark functions as deprecated . <EoL>
<BoL> Show a deprecation warning . <EoL>
<BoL> Retrieve the location of locales . <EoL>
<BoL> Check whether the given value should be considered `` empty '' . <EoL>
<BoL> Check whether obj is a Validator instance or class . <EoL>
<BoL> US Postal codes ( aka Zip Codes ) . <EoL>
<BoL> Return the names of all validators in this module . <EoL>
<BoL> Check string with the mod 10 algorithm ( aka `` Luhn formula '' ) . <EoL>
<BoL> Create an OpenId validator . <EoL>
<BoL> Create an XRI validator . <EoL>
<BoL> Prepend the 'xri : // ' schema if needed and remove trailing spaces <EoL>
<BoL> Validate an i-name <EoL>
<BoL> Validate an i-numbe <EoL>
<BoL> Validate an XRI <EoL>
<BoL> Return the names of all validators in this module . <EoL>
<BoL> Robust sort key that sorts items with invalid keys last . <EoL>
<BoL> Decode the flat dictionary d into a nested structure . <EoL>
<BoL> Moves frozen date to the given `` target_datetime `` <EoL>
<BoL> Return 's the datetime 's format <EoL>
<BoL> Returns a new MayaDT object with the given offsets . <EoL>
<BoL> Returns a timezone-aware datetime ... Defaulting to UTC ( as it should ) . <EoL>
<BoL> Returns MayaDT instance from iso8601 string . <EoL>
<BoL> Returns MayaDT instance from rfc2822 string . <EoL>
<BoL> Returns MayaDT instance from rfc3339 string . <EoL>
<BoL> Returns an ISO 8601 representation of the MayaDT . <EoL>
<BoL> Returns a local timezone-aware datetime object <EoL>
<BoL> Returns an RFC 2822 representation of the MayaDT . <EoL>
<BoL> Returns an RFC 3339 representation of the MayaDT . <EoL>
<BoL> Returns human slang representation of date . <EoL>
<BoL> Returns human slang representation of time . <EoL>
<BoL> Returns a new MayaDT object modified by the given instruction . <EoL>
<BoL> Returns a new MayaDT object with the given offsets . <EoL>
<BoL> Returns a timedelta object with the duration between the dates <EoL>
<BoL> Parses all the possible inputs for freeze_time : returns : a naive `` datetime.datetime `` object <EoL>
<BoL> Converts a potentially timezone-aware datetime to be a naive UTC datetime <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Get the given `` url `` from the app and write the matching file . <EoL>
<BoL> Warn if some of the app 's endpoints are not in seen_endpoints . <EoL>
<BoL> Run all generators and yield ( url , endpoint ) tuples . <EoL>
<BoL> Return the path part of FREEZER_BASE_URL , without trailing slash . <EoL>
<BoL> Yield the 'static ' URL rules for the app and all blueprints . <EoL>
<BoL> Run all generators and yield URLs relative to the app root . May be useful for testing URL generators . <EoL>
<BoL> Clean the destination and build all URLs from generators . <EoL>
<BoL> Like : meth : ` freeze ` , but yields information about pages as they are being processed . <EoL>
<BoL> Allow to register an app after the Freezer initialization . <EoL>
<BoL> Return a Flask application serving the build destination . <EoL>
<BoL> URL generator for URL rules that take no arguments . <EoL>
<BoL> Register a function as an URL generator . <EoL>
<BoL> Same as : meth : ` serve ` but calls : meth : ` freeze ` before serving . <EoL>
<BoL> Run an HTTP server on the result of the build . <EoL>
<BoL> URL generator for static files for app and all registered blueprints . <EoL>
<BoL> Convert a URL path like /admin/ to a file path like admin/index.html <EoL>
<BoL> Return an iterable of ( endpoint , values_dict ) tuples , one for each call that was made while the logger was enabled . <EoL>
<BoL> Wrap a context manager but only enter/exit it if condition is true . <EoL>
<BoL> Test whether FILENAME matches PATTERN . <EoL>
<BoL> Return the instance a bound method is attached to . <EoL>
<BoL> Patches `` url_for `` in Jinja globals to use : func : ` relative_url_for ` . <EoL>
<BoL> Like : func : ` ~flask.url_for ` , but returns relative URLs if possible . <EoL>
<BoL> Wrap a WSGI application in a middleware that moves `` script_name `` from the environ 's PATH_INFO to SCRIPT_NAME if it is there , and redirect to `` script_name `` otherwise . <EoL>
<BoL> Return the function object for the given method object . <EoL>
<BoL> Recursively walk the ` root ` directory and yield slash-separated paths relative to the root . <EoL>
<BoL> Returns a File or Folder object that would represent this entity if it were copied or moved to ` destination ` . <EoL>
<BoL> Generates the parents until stop or the absolute root directory is reached . <EoL>
<BoL> Returns a File or Folder object that would represent the given path . <EoL>
<BoL> Returns a File or Folder object that reperesents if the entire fragment of this directory starting with ` source_root ` were copied to ` target_root ` . <EoL>
<BoL> Gets the fragment of the current path starting at root . <EoL>
<BoL> Checks if this folder is inside the given ancestor . <EoL>
<BoL> Decorator for ` visit_file ` protocol <EoL>
<BoL> Decorator for ` visit_complete ` protocol <EoL>
<BoL> Decorator for ` visit_folder ` protocol <EoL>
<BoL> Copies the file to the given destination . <EoL>
<BoL> Delete the file if it exists . <EoL>
<BoL> Returns True if the file has been changed since the given time . <EoL>
<BoL> Creates a temprorary file and writes the ` text ` into it <EoL>
<BoL> Checks if this file is older than the given file . Uses last_modified to determine age . <EoL>
<BoL> Reads from the file and returns the content as a string . <EoL>
<BoL> Writes the given text to the file using the given encoding . <EoL>
<BoL> There is a bug in dir_util that makes ` copy_tree ` crash if a folder in the tree has been deleted before and readded now . To workaround the bug , we first walk the tree and create directories that are needed.Create the mirror directory <EoL>
<BoL> Returns a path of a child item represented by ` fragment ` . <EoL>
<BoL> Returns a ` File ` object representing the ` fragment ` . <EoL>
<BoL> Returns a folder object by combining the fragment to this folder 's path <EoL>
<BoL> Copies the contents of this directory to the given destination . Returns a Folder object that represents the moved directory . <EoL>
<BoL> Copies this directory to the given destination . Returns a Folder object that represents the moved directory . <EoL>
<BoL> Deletes the directory if it exists . <EoL>
<BoL> Return a ` FolderLister ` object with a set pattern . <EoL>
<BoL> Return a ` FolderWalker ` object with a set pattern . <EoL>
<BoL> Creates this directory and any of the missing directories in the path . Any errors that may occur are eaten . <EoL>
<BoL> Moves this directory to the given destination . Returns a Folder object that represents the moved directory . <EoL>
<BoL> Moves this directory to the given destination . Returns a Folder object that represents the moved directory . <EoL>
<BoL> Zips the contents of this folder . <EoL>
<BoL> Automatically list the folder contents when the context manager is exited . <EoL>
<BoL> A simple generator that yields a File or Folder object based on the arguments . <EoL>
<BoL> Yield both Files and Folders as the folder is listed . <EoL>
<BoL> Yield only Files . <EoL>
<BoL> Yield only Folders . <EoL>
<BoL> Automatically walk the folder when the context manager is exited . <EoL>
<BoL> A simple generator that yields a File or Folder object based on the arguments . <EoL>
<BoL> Yield both Files and Folders as the tree is walked . <EoL>
<BoL> Yield only Files . <EoL>
<BoL> Yield only Folders . <EoL>
<BoL> A feel-good function that gives you something to call after importing this package . <EoL>
<BoL> Register our `` bad codecs '' with Python 's codecs API . This involves adding a search function that takes in an encoding name , and returns a codec for that encoding if it knows one , or None if it does n't . <EoL>
<BoL> Take a codec name , and return a 'sloppy ' version of that codec that can encode and decode the unassigned bytes in that encoding . <EoL>
<BoL> Creates a list of regexes that match 'weird ' character sequences . The more matches there are , the weirder the text is . <EoL>
<BoL> Convert each Unicode character to a letter indicating which of many classes it 's in . <EoL>
<BoL> Determine how often a text has unexpected characters or sequences of characters . This metric is used to disambiguate when text should be re-decoded or left as is . <EoL>
<BoL> An overall cost function for text . Weirder is worse , but all else being equal , shorter strings are better . <EoL>
<BoL> Build a translate mapping that strips likely-unintended control characters . See : func : ` ftfy.fixes.remove_control_chars ` for a description of these codepoint ranges and why they should be removed . <EoL>
<BoL> ENCODING_REGEXES contain reasonably fast ways to detect if we could represent a given string in a given encoding . The simplest one is the 'ascii ' detector , which of course just determines if all characters are between U+0000 and U+007F . <EoL>
<BoL> Recognize UTF-8 mojibake that 's so blatant that we can fix it even when the rest of the string does n't decode as UTF-8 -- namely , UTF-8 sequences for the 'General Punctuation ' characters U+2000 to U+2040 , re-encoded in Windows-1252 . <EoL>
<BoL> Build a translate mapping that replaces halfwidth and fullwidth forms with their standard-width forms . <EoL>
<BoL> Given text and a single-byte encoding , check whether that text could have been decoded from that single-byte encoding . <EoL>
<BoL> Return ` text ` left-justified in a Unicode string whose display width , in a monospaced terminal , should be at least ` width ` character cells . The rest of the string will be padded with ` fillchar ` , which must be a width-1 character . <EoL>
<BoL> A utility method that 's useful for debugging mysterious Unicode . <EoL>
<BoL> Fix text with incorrectly-decoded garbage ( `` mojibake '' ) whenever possible . <EoL>
<BoL> A deprecated name for : func : ` ftfy.fixes.fix_encoding ` . <EoL>
<BoL> Replace one matched HTML entity with the character it represents , if possible . <EoL>
<BoL> Apply a plan for fixing the encoding of text . <EoL>
<BoL> Convert a surrogate pair to the single codepoint it represents . <EoL>
<BoL> Decode backslashed escape sequences , including \\x , \\u , and \\U character references , even in the presence of other Unicode . <EoL>
<BoL> The ASCII characters , katakana , and Hangul characters have alternate `` halfwidth '' or `` fullwidth '' forms that help text line up in a grid . <EoL>
<BoL> Re-decodes text that has been decoded incorrectly , and also return a `` plan '' indicating all the steps required to fix it . <EoL>
<BoL> Replace single-character ligatures of Latin letters , such as ' ﬁ ' , with the characters that they contain , as in 'fi ' . <EoL>
<BoL> Convert all line breaks to Unix style . <EoL>
<BoL> Performs a single step of re-decoding text that 's been decoded incorrectly . <EoL>
<BoL> Fix particular characters that seem to be found in the wild encoded in UTF-8 and decoded in Latin-1 or Windows-1252 , even when this fix ca n't be consistently applied . <EoL>
<BoL> Replace 16-bit surrogate codepoints with the characters they represent ( when properly paired ) , or with \ufffd otherwise . <EoL>
<BoL> Remove a byte-order mark that was accidentally decoded as if it were part of the text . <EoL>
<BoL> Remove various control characters that you probably did n't intend to be in your text . Many of these characters appear in the table of `` Characters not suitable for use with markup '' at http : //www.unicode.org/reports/tr20/tr20-9.html . <EoL>
<BoL> Strip out `` ANSI '' terminal escape sequences , such as those that produce colored text on Unix . <EoL>
<BoL> This function identifies sequences where information has been lost in a `` sloppy '' codec , indicated by byte 1A , and if they would otherwise look like a UTF-8 sequence , it replaces them with the UTF-8 sequence for U+FFFD . <EoL>
<BoL> Some mojibake has been additionally altered by a process that said `` hmm , byte A0 , that 's basically a space ! '' and replaced it with an ASCII space . When the A0 is part of a sequence that we intend to decode as UTF-8 , changing byte A0 to 20 would make it fail to decode . <EoL>
<BoL> Replace curly quotation marks with straight equivalents . <EoL>
<BoL> Decode all three types of HTML entities/character references . <EoL>
<BoL> Determine the width that a character is likely to be displayed as in a monospaced terminal . The width for a printable character will always be 0 , 1 , or 2 . <EoL>
<BoL> Return ` text ` centered in a Unicode string whose display width , in a monospaced terminal , should be at least ` width ` character cells . The rest of the string will be padded with ` fillchar ` , which must be a width-1 character . <EoL>
<BoL> Return ` text ` right-justified in a Unicode string whose display width , in a monospaced terminal , should be at least ` width ` character cells . The rest of the string will be padded with ` fillchar ` , which must be a width-1 character . <EoL>
<BoL> Return the number of character cells that this string is likely to occupy when displayed in a monospaced , modern , Unicode-aware terminal emulator . We refer to this as the `` display width '' of the string . <EoL>
<BoL> Given one unicode character , return its printable length on a terminal . <EoL>
<BoL> NOTE : Using ` guess_bytes ` is not the recommended way of using ftfy . ftfy is not designed to be an encoding detector . <EoL>
<BoL> Add a configuration setting . <EoL>
<BoL> Parses extra_ { downloader , converter } arguments . <EoL>
<BoL> Parses data_path argument . <EoL>
<BoL> Return a recreated instance of self . <EoL>
<BoL> Get the object wrapped by *func* . <EoL>
<BoL> Checks if all items in seq pass pred ( or are truthy ) . <EoL>
<BoL> Constructs a predicate , which holds when all fs hold . <EoL>
<BoL> Checks if any item in seq passes pred ( or is truthy ) . <EoL>
<BoL> Constructs a predicate , which holds when any fs holds . <EoL>
<BoL> Creates a version of func returning its partial applications until sufficient arguments are passed . <EoL>
<BoL> Iterates over all elements of the sequence but last . <EoL>
<BoL> Caches a function results for timeout seconds . <EoL>
<BoL> Creates a single argument function looking up result in a memory . <EoL>
<BoL> Creates a single argument function looking up result in a memory . <EoL>
<BoL> @ memoize ( key_func=None ) . Makes decorated function memoize its results . <EoL>
<BoL> Creates a function calling its sole argument with given *a , **kw . <EoL>
<BoL> Lazily chunks seq into parts of length n or less . Skips step items between parts if passed . <EoL>
<BoL> Removes falsy values from the collection . <EoL>
<BoL> Composes passed functions . <EoL>
<BoL> Creates an empty collection of the same type . <EoL>
<BoL> Flip passed dict or collection of pairs swapping its keys and values . <EoL>
<BoL> Returns a value at path in the given nested collection . <EoL>
<BoL> Yields results of the obj.name ( *args , **kwargs ) for each object in objects . <EoL>
<BoL> Checks if all elements in the collection are different . <EoL>
<BoL> Joins several collections of same type into one . <EoL>
<BoL> Joins several dicts , combining values with given function . <EoL>
<BoL> Makes a list of results of the obj.name ( *args , **kwargs ) for each object in objects . <EoL>
<BoL> Lists values for key in each mapping . <EoL>
<BoL> Lists values of given attribute of each object . <EoL>
<BoL> Selects mappings containing all pairs in cond . <EoL>
<BoL> Merges several collections of same type into one . <EoL>
<BoL> Merges several dicts , combining values with given function . <EoL>
<BoL> Checks if none of the items in seq pass pred ( or are truthy ) . <EoL>
<BoL> Removes given keys from mapping . <EoL>
<BoL> Checks whether exactly one item in seq passes pred ( or is truthy ) . <EoL>
<BoL> Iterates over values for key in mappings . <EoL>
<BoL> Iterates over values of given attribute of given objects . <EoL>
<BoL> Leaves only given keys in mapping . <EoL>
<BoL> Same as filter but preserves coll type . <EoL>
<BoL> Select part of the collection with keys passing pred . <EoL>
<BoL> Select part of the collection with values passing pred . <EoL>
<BoL> Creates a copy of coll with the value set at path . <EoL>
<BoL> Finds first item in seq passing pred or first that is truthy . <EoL>
<BoL> Returns a list of first n items in the sequence , or all items if there are fewer than n . <EoL>
<BoL> Creates a copy of coll with a value updated at path . <EoL>
<BoL> Walks the collection transforming its elements with f. Same as map , but preserves coll type . <EoL>
<BoL> Walks keys of the collection , mapping them with f . <EoL>
<BoL> Walks values of the collection , mapping them with f . <EoL>
<BoL> Iterates over mappings containing all pairs in cond . <EoL>
<BoL> An extended version of builtin ifilter ( ) . Derives a predicate from string , int , slice , dict or set . <EoL>
<BoL> An extended version of builtin imap ( ) . Derives a mapper from string , int , slice , dict or set . <EoL>
<BoL> Yields tuples like ( key , val1 , val2 , ... ) for each common key in all given dicts . <EoL>
<BoL> Yields tuples of corresponding values of several dicts . <EoL>
<BoL> Creates a dict with keys mapped to the corresponding vals . <EoL>
<BoL> Constructs a complementary predicate . <EoL>
<BoL> Creates a function accepting any args , but always returning x . <EoL>
<BoL> Counts numbers of occurrences of values of f ( ) on elements of given sequence . <EoL>
<BoL> Counts number occurrences of each value in the sequence . <EoL>
<BoL> Curries func into a chain of one argument functions . <EoL>
<BoL> Cuts prefix from given string if it 's present . <EoL>
<BoL> Cuts suffix from given string if it 's present . <EoL>
<BoL> Transforms a flat wrapper into decorator : : <EoL>
<BoL> Logs or prints all function calls , including arguments , results and raised exceptions . <EoL>
<BoL> Logs each entrance to a function . <EoL>
<BoL> Logs exits from a function . <EoL>
<BoL> Times processing of each item in seq . <EoL>
<BoL> Prints on each entrance to a function . <EoL>
<BoL> Prints on exits from a function . <EoL>
<BoL> Times processing of each item in seq . <EoL>
<BoL> Prints x and then returns it . <EoL>
<BoL> Iterates over sequence skipping duplicates <EoL>
<BoL> Skips first n items in the sequence , yields the rest . <EoL>
<BoL> Skips the start of the sequence passing pred ( or just truthy ) , then iterates over the rest . <EoL>
<BoL> Tries several approaches until one works . Each approach has a form of ( callable , expected_errors ) . <EoL>
<BoL> Returns the first item in the sequence . Returns None if the sequence is empty . <EoL>
<BoL> Flattens arbitrary nested sequence . Unpacks an item if follow ( item ) is truthy . <EoL>
<BoL> Ensures that errors are passable to except clause . <EoL>
<BoL> Alters function to ignore given errors , returning default instead . <EoL>
<BoL> Joins decorated function results with sep . <EoL>
<BoL> If function fails to complete fails times in a row , calls to it will be intercepted for timeout with exception raised instead . <EoL>
<BoL> Call function only once for every combination of the given arguments . <EoL>
<BoL> Call function once for every combination of values of its arguments . <EoL>
<BoL> Post processes decorated function result with func . <EoL>
<BoL> Constructs function that raises the given exception with given arguments on any invocation . <EoL>
<BoL> Reraises errors as other exception . <EoL>
<BoL> Makes decorated function retry up to tries times . <EoL>
<BoL> Alters function to ignore all exceptions . <EoL>
<BoL> A functools.partial alternative , which returns a real function . Can be used to construct methods . <EoL>
<BoL> Creates a function finding regex in passed string . <EoL>
<BoL> Creates a predicate testing passed string with regex . <EoL>
<BoL> Constructs a lazy juxtaposition of the given functions . Result returns an iterator of results of fs . <EoL>
<BoL> Constructs a predicate , which holds when none of fs hold . <EoL>
<BoL> Constructs a predicate , which holds when exactly one of fs holds . <EoL>
<BoL> Constructs a function , which calls fs one by one and returns first truthy result . <EoL>
<BoL> Returns its argument . <EoL>
<BoL> Creates a function , which conditionally applies action or default . <EoL>
<BoL> Constructs a juxtaposition of the given functions . Result returns a list of results of fs . <EoL>
<BoL> Composes functions , calling them from left to right . <EoL>
<BoL> Curries func into a chain of one argument functions . Arguments are passed from right to left . <EoL>
<BoL> Partially applies last arguments . <EoL>
<BoL> Groups given sequence items into a mapping f ( item ) - > [ item , ... ] . <EoL>
<BoL> Groups items having multiple keys into a mapping key - > [ item , ... ] . Item might be repeated under several keys . <EoL>
<BoL> Takes a sequence of ( key , value ) pairs and groups values by keys . <EoL>
<BoL> Consumes an iterable not reading it into memory and returns the number of items . <EoL>
<BoL> Yields first item of each sequence , then second one and so on . <EoL>
<BoL> Yields items of the sequence alternating with sep . <EoL>
<BoL> Creates a function checking if its argument is of any of given types . <EoL>
<BoL> Returns an infinite iterator of ` x , f ( x ) , f ( f ( x ) ) , ... ` <EoL>
<BoL> Maps seq with f and iterates truthy results . Simply iterates truthy values in one argument version . <EoL>
<BoL> Returns the last item in the sequence or iterator . Returns None if the sequence is empty . <EoL>
<BoL> Concatenates the sequence of sequences . <EoL>
<BoL> Chunks seq into parts of length n or less . Skips step items between parts if passed . <EoL>
<BoL> Concatenates several sequences . <EoL>
<BoL> Removes duplicates from sequences , preserves order . <EoL>
<BoL> An extended version of builtin filter ( ) . Derives a predicate from string , int , slice , dict or set . <EoL>
<BoL> Iterates over arbitrary nested sequence . Dives into when follow ( item ) is truthy . <EoL>
<BoL> Maps seq with f and keeps only truthy results . Simply lists truthy values in one argument version . <EoL>
<BoL> An extended version of builtin map ( ) . Derives a mapper from string , int , slice , dict or set . <EoL>
<BoL> Maps given sequence ( s ) and concatenates the results . <EoL>
<BoL> Partitions seq into parts of length n. Skips step items between parts if passed . Non-fitting tail is ignored . <EoL>
<BoL> Partition seq into continuous chunks with constant value of f . <EoL>
<BoL> Lists intermediate reductions of seq by f . <EoL>
<BoL> Creates a list if items passing given predicate . <EoL>
<BoL> Splits items which pass the predicate from the ones that do n't . Returns a pair ( passed , failed ) of respective lists . <EoL>
<BoL> Splits the sequence at given position , returning a tuple of its start and tail . <EoL>
<BoL> Splits the start of the sequence , consisting of items passing pred , from the rest of it . <EoL>
<BoL> Lists partial sums of seq . <EoL>
<BoL> Lists tree leaves . <EoL>
<BoL> Lists all tree nodes . <EoL>
<BoL> Removes items from sequence , preserves order . <EoL>
<BoL> List zip ( ) version . <EoL>
<BoL> Maps given sequence ( s ) and chains the results . <EoL>
<BoL> Monkey patches class or module by adding to it decorated function . <EoL>
<BoL> Returns nth item in the sequence or None if no such item exists . <EoL>
<BoL> Yields all pairs of neighboring items in seq . <EoL>
<BoL> Lazily partitions seq into parts of length n. Skips step items between parts if passed . Non-fitting tail is ignored . <EoL>
<BoL> Lazily partition seq into continuous chunks with constant value of f . <EoL>
<BoL> Lists all matches of regex in s , presents them in simplest possible form <EoL>
<BoL> Matches regex against the given string , returns the match in the simplest possible form . <EoL>
<BoL> Iterates over matches of regex in s , presents them in simplest possible form <EoL>
<BoL> Tests whether regex matches against s . <EoL>
<BoL> Iterates items passing given predicate . <EoL>
<BoL> Takes a function of no args , presumably with side effects , and returns an infinite ( or length n ) iterator of calls to it . <EoL>
<BoL> Skips first item in the sequence , yields the rest . <EoL>
<BoL> Returns second item in the sequence . Returns None if there are less than two items in it . <EoL>
<BoL> Lazily splits items which pass the predicate from the ones that do n't . Returns a pair ( passed , failed ) of respective iterators . <EoL>
<BoL> Lazily splits the sequence at given position , returning a pair of iterators over its start and tail . <EoL>
<BoL> Lazily splits the start of the sequence , consisting of items passing pred , from the rest of it . <EoL>
<BoL> Joins the given sequence with sep . Forces stringification of seq items . <EoL>
<BoL> Yields partial sums of seq . <EoL>
<BoL> Yields sequence items until first predicate fail . Stops on first falsy value in one argument version . <EoL>
<BoL> Iterates over tree leaves . <EoL>
<BoL> Iterates over all tree nodes . <EoL>
<BoL> Yields each item paired with its following : ( item , next ) . <EoL>
<BoL> Yields each item paired with its preceding : ( item , prev ) . <EoL>
<BoL> Iterates over sequence skipping items . <EoL>
<BoL> Returns : True if this attribute is handled and set here , False otherwise . <EoL>
<BoL> Returns : True if this attribute is handled and set here , False otherwise . <EoL>
<BoL> Combine the provided path segments < segments > into a path string . Path segments in < segments > will be quoted . <EoL>
<BoL> Returns : The list of path segments from the path string < path > . <EoL>
<BoL> Add < path > to the existing path . < path > can either be a Path instance , a list of segments , or a path string to append to the existing path . <EoL>
<BoL> Load < path > , replacing any existing path . < path > can either be a Path instance , a list of segments , a path string to adopt . <EoL>
<BoL> Normalize the path . Turn '//a/./b/../c// ' into '/a/c/ ' . <EoL>
<BoL> Params : force_absolute : See Path._force_absolute . <EoL>
<BoL> Subclass me . <EoL>
<BoL> Extract and return the key : value items from various containers . Some containers that could hold key : value items are <EoL>
<BoL> Examples : Query ( ' a=a & b= # ' ) .encode ( ) == ' a=a & b= % 23' Query ( ' a=a & b= # ' ) .encode ( ' ; ' ) == ' a=a ; b= % 23' Query ( ' a+b=c+d ' ) .encode ( quote_plus=False ) == ' a % 20b=c % 20d ' <EoL>
<BoL> Adopt all mappings in < mapping > , replacing any existing mappings with the same key . If a key has multiple values in < mapping > , they are all adopted . <EoL>
<BoL> Returns : True if this attribute is handled and set here , False otherwise . <EoL>
<BoL> Parse and load a URL . <EoL>
<BoL> Join multiple lists of path segments together , intelligently handling path segments borders to preserve intended slashes of the final constructed path . <EoL>
<BoL> Add the values in < valuelist > to the list of values for < key > . If < key > is not in the dictionary , the values in < valuelist > become the values for < key > . <EoL>
<BoL> Raises : KeyError if < key > is provided and not in the dictionary . Returns : List created from iterallitems ( < key > ) . <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.allkeys ( ) == [ 1,1,1,2,3 ] <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.allvalues ( ) == [ 1,11,111,2,3 ] omd.allvalues ( 1 ) == [ 1,11,111 ] <EoL>
<BoL> Returns : The list of values for < key > if < key > is in the dictionary , else < default > . If < default > is not provided , an empty list is returned . <EoL>
<BoL> Raises : KeyError if < key > is provided and not in the dictionary . <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.iterallitems ( ) == ( 1,1 ) - > ( 1,11 ) - > ( 1,111 ) - > ( 2,2 ) - > ( 3,3 ) omd.iterallitems ( 1 ) == ( 1,1 ) - > ( 1,11 ) - > ( 1,111 ) <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.iterallkeys ( ) == 1 - > 1 - > 1 - > 2 - > 3 <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.iterallvalues ( ) == 1 - > 11 - > 111 - > 2 - > 3 <EoL>
<BoL> Parity with dict.iteritems ( ) except the optional < key > parameter has been added . <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.iterlistitems ( ) - > ( 1 , [ 1,11,111 ] ) - > ( 2 , [ 2 ] ) - > ( 3 , [ 3 ] ) <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.iterlists ( ) - > [ 1,11,111 ] - > [ 2 ] - > [ 3 ] <EoL>
<BoL> Parity with dict.itervalues ( ) except the optional < key > parameter has been added . <EoL>
<BoL> Returns : List created from iterlistitems ( ) . <EoL>
<BoL> Returns : List created from iterlists ( ) . <EoL>
<BoL> Clear all existing key : value items and import all key : value items from < mapping > . If multiple values exist for the same key in < mapping > , they are all be imported . <EoL>
<BoL> Pop and return a key : value item . <EoL>
<BoL> If < key > is in the dictionary , pop it and return its list of values . <EoL>
<BoL> Pop and return a key : valuelist item comprised of a key and that key's list of values . <EoL>
<BoL> If < value > is provided , pops the first or last ( key , value ) item in the dictionary if < key > is in the dictionary . <EoL>
<BoL> Removes all < values > from the values of < key > . If < key > has no remaining values after removevalues ( ) , the key is popped . <EoL>
<BoL> Reverse the order of all items in the dictionary . <EoL>
<BoL> Similar to setdefault ( ) except < defaultlist > is a list of values to set for < key > . If < key > already exists , its existing list of values is returned . <EoL>
<BoL> Sets < key > 's list of values to < values > . <EoL>
<BoL> Example : omd = omdict ( [ ( 1,1 ) , ( 1,11 ) , ( 1,111 ) , ( 2,2 ) , ( 3,3 ) ] ) omd.size ( ) == 5 <EoL>
<BoL> Update this dictionary with the items from < mapping > , replacing existing key : value items with shared keys before adding new key : value items . <EoL>
<BoL> Raises : KeyError if < key > is provided and not in the dictionary . Returns : List created from itervalues ( < key > ) .If < key > is provided and is a dictionary key , only values of items with key < key > are returned . <EoL>
<BoL> Removes the path segments of < remove > from the end of the path segments < segments > . <EoL>
<BoL> Convert all named and numeric character references ( e.g . <EoL>
<BoL> Pass in a dictionary-like object mapping from old names to new names . E.g . { 'ConfigParser ' : 'configparser ' , 'cPickle ' : 'pickle ' } <EoL>
<BoL> Finds and loads it . But if there 's a . in the name , handles it properly . <EoL>
<BoL> Currently this function is unneeded , as we are not attempting to provide import hooks for modules with ambiguous names : email , urllib , pickle . <EoL>
<BoL> Returns True if the import hooks are installed , False if not . <EoL>
<BoL> Deprecated . Use remove_hooks ( ) instead . This will be removed by `` future `` v1.0 . <EoL>
<BoL> Deprecated . Use install_hooks ( ) instead . This will be removed by `` future `` v1.0 . <EoL>
<BoL> Example use : <EoL>
<BoL> Pass a ( potentially dotted ) module name of a Python 3 standard library module . This function imports the module compatibly on Py2 and Py3 and returns the top-level module . <EoL>
<BoL> Monkey-patches the standard library in Py2.6/7 to provide aliases for better Py3 compatibility . <EoL>
<BoL> This function installs the future.standard_library import hook into sys.meta_path . <EoL>
<BoL> Tries to infer whether the module m is from the Python 2 standard library . This may not be reliable on all systems . <EoL>
<BoL> This function removes the import hook from sys.meta_path . <EoL>
<BoL> Add any previously scrubbed modules back to the sys.modules cache , but only if it 's safe to do so . <EoL>
<BoL> Deprecated . <EoL>
<BoL> Removes any Python 2 standard library modules from `` sys.modules `` that would interfere with Py3-style imports using import hooks . Examples are modules with the same names ( like urllib or email ) . <EoL>
<BoL> Returns the globals and locals of the calling frame . <EoL>
<BoL> Returns the string without any initial or final quotes . <EoL>
<BoL> A decorator to turn a function or method call that returns text , i.e . unicode , into one that returns a native platform str . <EoL>
<BoL> Bind a method to class , python 2 and python 3 compatible . <EoL>
<BoL> From jinja2/_compat.py . License : BSD . <EoL>
<BoL> Python 2.7 has both new-style and old-style classes . <EoL>
<BoL> Deprecated . Use : : <EoL>
<BoL> A function equivalent to the str.isidentifier method on Py3 <EoL>
<BoL> Deprecated . Tests whether an object is a Py3 `` int `` or either a Py2 `` int `` or `` long `` . <EoL>
<BoL> Equivalent to the result of `` isinstance ( obj , newbytes ) `` were `` __instancecheck__ `` not overridden on the newbytes subclass . In other words , it is REALLY a newbytes instance , not a Py2 native str object ? <EoL>
<BoL> Deprecated . Use : : <EoL>
<BoL> Use this only if compatibility with Python versions before 2.7 is required . Otherwise , prefer viewitems ( ) . <EoL>
<BoL> Use this only if compatibility with Python versions before 2.7 is required . Otherwise , prefer viewkeys ( ) . <EoL>
<BoL> Use this only if compatibility with Python versions before 2.7 is required . Otherwise , prefer viewvalues ( ) . <EoL>
<BoL> On Py3 , this is a no-op : native ( obj ) - > obj <EoL>
<BoL> DEPRECATED : import `` old_div `` from `` past.utils `` instead . <EoL>
<BoL> A decorator that defines __unicode__ and __str__ methods under Python 2 . Under Python 3 , this decorator is a no-op . <EoL>
<BoL> A function that matches the Python 2.x `` raise `` statement . This allows re-raising exceptions with the cls value and traceback on Python 2 and 3 . <EoL>
<BoL> Equivalent to : <EoL>
<BoL> Function for iterating over dictionary items with the same set-like behaviour on Py2.7 as on Py3 . <EoL>
<BoL> Function for iterating over dictionary keys with the same set-like behaviour on Py2.7 as on Py3 . <EoL>
<BoL> Function for iterating over dictionary values with the same set-like behaviour on Py2.7 as on Py3 . <EoL>
<BoL> Initializes the future . Should not be called by clients . <EoL>
<BoL> Attaches a callable that will be called when the future finishes . <EoL>
<BoL> Cancel the future if possible . <EoL>
<BoL> Return True if the future was cancelled . <EoL>
<BoL> Return True of the future was cancelled or finished executing . <EoL>
<BoL> Return the exception raised by the call that the future represents . <EoL>
<BoL> Return the result of the call that the future represents . <EoL>
<BoL> Return True if the future is currently executing . <EoL>
<BoL> Sets the result of the future as being the given exception . <EoL>
<BoL> Sets the return value of work associated with the future . <EoL>
<BoL> Mark the future as running or process any cancel notifications . <EoL>
<BoL> Initializes a green thread pool executor . <EoL>
<BoL> Spin up a greenworker if less than max_workers . <EoL>
<BoL> Submit some work to be executed ( and gather statistics ) . <EoL>
<BoL> Returns an iterator equivalent to map ( fn , iter ) . <EoL>
<BoL> Submit some work to be executed ( and gather statistics ) . <EoL>
<BoL> Synchronous executor constructor . <EoL>
<BoL> Restarts this executor ( *iff* previously shutoff/shutdown ) . <EoL>
<BoL> Submit some work to be executed ( and gather statistics ) . <EoL>
<BoL> Initializes a thread pool executor . <EoL>
<BoL> Spin up a worker if needed . <EoL>
<BoL> Submit some work to be executed ( and gather statistics ) . <EoL>
<BoL> Capture statistics <EoL>
<BoL> Submit work to be executed and capture statistics . <EoL>
<BoL> Ensure all threads that were created were destroyed cleanly . <EoL>
<BoL> Tries to get a callbacks fully-qualified name . <EoL>
<BoL> Try to guess optimal process count for current system . <EoL>
<BoL> Try to guess optimal thread count for current system . <EoL>
<BoL> Decorator to explicitly mark functions that are exposed in a lib . <EoL>
<BoL> Args : input ( str ) : A partial string which is typically entered by a user . <EoL>
<BoL> Copy source location ( ` lineno ` and ` col_offset ` attributes ) from *old_node* to *new_node* if possible , and return *new_node* . <EoL>
<BoL> Return a formatted dump of the tree in *node* . <EoL>
<BoL> When you compile a node tree with compile ( ) , the compiler expects lineno and col_offset attributes for every node that supports them . <EoL>
<BoL> Increment the line number of each node in the tree starting at *node* by *n* . This is useful to `` move code '' to a different location in a file . <EoL>
<BoL> Yield all direct child nodes of *node* , that is , all fields that are nodes and all items of fields that are lists of nodes . <EoL>
<BoL> Yield a tuple of `` ( fieldname , value ) `` for each field in `` node._fields `` that is present on *node* . <EoL>
<BoL> Recursively yield all descendant nodes in the tree starting at *node* ( including *node* itself ) , in no specified order . This is useful if you only want to modify nodes in place and do n't care about the context . <EoL>
<BoL> Return whether the list includes an attribute with the specified name . : return : ` True ` if the list includes the attribute : rtype : ` bool ` <EoL>
<BoL> Return an item or slice of the attributes list . <EoL>
<BoL> Return a slice of the attributes list . <EoL>
<BoL> Return a new instance that contains the attributes in ` attrs ` in addition to any already existing attributes . Any attributes in the new set that have a value of ` None ` are removed . : return : a new instance with the merged attributes : rtype : ` Attrs ` <EoL>
<BoL> Return a new instance with all attributes with a name in ` names ` are removed . : param names : the names of the attributes to remove : return : a new instance with the attribute removed : rtype : ` Attrs ` <EoL>
<BoL> Return the value of the attribute with the specified name , or the value of the ` default ` parameter if no such attribute is found . : param name : the name of the attribute : param default : the value to return when the attribute does not exist : return : the attribute value , or the ` default ` value if that attribute does not exist : rtype : ` object ` <EoL>
<BoL> Return the attributes as a markup event . The returned event is a ` TEXT ` event , the data is the value of all attributes joined together . <EoL>
<BoL> Parse the given HTML source and return a markup stream . Unlike with ` HTMLParser ` , the returned stream is reusable , meaning it can be iterated over multiple times : <EoL>
<BoL> Create a Markup instance from a string and escape special characters it may contain ( < , > , & and \ '' ) . <EoL>
<BoL> Return a ` Markup ` object which is the concatenation of the strings in the given sequence , where this ` Markup ` object is the separator between the joined elements . Any element in the sequence that is not a ` Markup ` instance is automatically escaped . : param seq : the sequence of strings to join : param escape_quotes : whether double quote characters in the elements should be escaped : return : the joined ` Markup ` object : rtype : ` Markup ` : see : ` escape ` <EoL>
<BoL> Return a copy of the text with any character or numeric entities replaced by the equivalent UTF-8 characters . If the ` keepxmlentities ` parameter is provided and evaluates to ` True ` , the core XML entities ( `` & amp ; `` , `` & apos ; `` , `` & gt ; `` , `` & lt ; `` and `` & quot ; `` ) are not stripped . : return : a ` Markup ` instance with entities removed : rtype : ` Markup ` : see : ` genshi.util.stripentities ` <EoL>
<BoL> Return a copy of the text with all XML/HTML tags removed . : return : a ` Markup ` instance with all tags removed : rtype : ` Markup ` : see : ` genshi.util.striptags ` <EoL>
<BoL> Reverse-escapes & , < , > , and \ '' and returns a ` unicode ` object . <EoL>
<BoL> Exception initializer . : param message : the error message from the parser : param filename : the path to the file that was parsed : param lineno : the number of the line on which the error was encountered : param offset : the column number where the error was encountered <EoL>
<BoL> Create the ` QName ` instance . : param qname : the qualified name as a string of the form `` { namespace-uri } local-name `` , where the leading curly brace is optional <EoL>
<BoL> Initialize the stream with a sequence of markup events . : param events : a sequence or iterable providing the events : param serializer : the default serialization method to use for this stream <EoL>
<BoL> Override the `` bitwise or '' operator to apply filters or serializers to the stream , providing a syntax similar to pipes on Unix shells . Assume the following stream produced by the ` HTML ` function : <EoL>
<BoL> Apply filters to the stream . <EoL>
<BoL> Return a new stream that contains the events matching the given XPath expression . <EoL>
<BoL> Generate strings corresponding to a specific serialization of the stream . <EoL>
<BoL> Parse the given XML source and return a markup stream . Unlike with ` XMLParser ` , the returned stream is reusable , meaning it can be iterated over multiple times : <EoL>
<BoL> Ensure that every item on the stream is actually a markup event . <EoL>
<BoL> Return the text with all entities and tags removed . <EoL>
<BoL> Return a copy of the given text with any character or numeric entities replaced by the equivalent UTF-8 characters . <EoL>
<BoL> Return a copy of the text with any XML/HTML tags removed . <EoL>
<BoL> Reverse-escapes & , < , > , and \ '' and returns a ` unicode ` object . <EoL>
<BoL> Convert a given ElementTree element to a markup stream . : param element : an ElementTree element : return : a markup stream <EoL>
<BoL> Initialize the parser for the given HTML input . : param source : the HTML text as a file-like object : param filename : the name of the file , if known : param filename : encoding of the file ; ignored if the input is unicode <EoL>
<BoL> Generator that parses the HTML source , yielding markup events . : return : a markup event stream : raises ParseError : if the HTML text is not well formed <EoL>
<BoL> Initialize the parser for the given XML input . : param source : the XML text as a file-like object : param filename : the name of the file , if appropriate : param encoding : the encoding of the file ; if not specified , the encoding is assumed to be ASCII , UTF-8 , or UTF-16 , or whatever the encoding specified in the XML declaration ( if any ) <EoL>
<BoL> Generator that parses the XML source , yielding markup events . : return : a markup event stream : raises ParseError : if the XML text is not well formed <EoL>
<BoL> Coalesces adjacent TEXT events into a single event . <EoL>
<BoL> Flattens a potentially nested sequence into a flat list . : param items : the sequence to flatten <EoL>
<BoL> Check for equality with another `` SchemaBuilder `` object . <EoL>
<BoL> Number of `` SchemaGenerator `` s at the top level . This is used mostly to check for emptiness . <EoL>
<BoL> Modify the schema to accomodate an object . <EoL>
<BoL> Merge in a JSON schema . This can be a `` dict `` or another `` SchemaBuilder `` <EoL>
<BoL> Generate a schema and convert it directly to serialized JSON . <EoL>
<BoL> Generate a schema based on previous inputs . <EoL>
<BoL> : param schema_uri : value of the `` $ schema `` keyword . <EoL>
<BoL> Modify the schema to accomodate an object . <EoL>
<BoL> Merges in an existing schema . <EoL>
<BoL> Convert the current schema to a ` dict ` . <EoL>
<BoL> Scan through string looking for a match to the pattern , returning a match object , or None if no match was found . <EoL>
<BoL> Permit dictionary items to be deleted like object attributes <EoL>
<BoL> Permit dictionary items to be retrieved like object attributes <EoL>
<BoL> Initialises a Feature object with the given parameters . <EoL>
<BoL> Permit dictionary items to be set like object attributes . <EoL>
<BoL> Validation helper function . <EoL>
<BoL> Encode a GeoJSON dict into an GeoJSON object . Assumes the caller knows that the dict should satisfy a GeoJSON type . <EoL>
<BoL> Initialises a FeatureCollection object from the : param features : List of features to constitute the FeatureCollection . : type features : list : return : FeatureCollection object : rtype : FeatureCollection <EoL>
<BoL> Initialises a GeoJSON object <EoL>
<BoL> Return validation errors ( if any ) . Implement in each subclass . <EoL>
<BoL> Initialises a Geometry object . <EoL>
<BoL> Yields the coordinates from a Feature or Geometry . <EoL>
<BoL> Returns the mapped coordinates from a Geometry after applying the provided function to each dimension in tuples list ( ie , linear scaling ) . <EoL>
<BoL> Checks if the object is an instance of MutableMapping . <EoL>
<BoL> Returns the result of passing every geometry in the given geojson object through func . <EoL>
<BoL> Returns the mapped coordinates from a Geometry after applying the provided function to each coordinate . <EoL>
<BoL> Wrap self._call_geocoder , handling tokens . <EoL>
<BoL> Do the right thing on `` point '' input . For geocoders with reverse methods . <EoL>
<BoL> Transform bounding box boundaries to a string matching ` output_format ` from the following formats : <EoL>
<BoL> Geocoder-specific exceptions handler . Override if custom exceptions processing is needed . For example , raising an appropriate GeocoderQuotaExceeded on non-200 response with a textual message in the body about the exceeded quota . <EoL>
<BoL> POST to ArcGIS requesting a new token . <EoL>
<BoL> Validates error statuses . <EoL>
<BoL> Format the components dict to something Baidu understands . <EoL>
<BoL> Returns location , ( latitude , longitude ) from JSON feed.Get the location , lat , lng from a single JSON place . <EoL>
<BoL> Parses a location from a single-result reverse API call . <EoL>
<BoL> Return an address by location point . <EoL>
<BoL> Parse a location name , latitude , and longitude from an JSON response.Parse each return object . <EoL>
<BoL> Implemented in subclasses . <EoL>
<BoL> Parse JSON response body.Parse each record . <EoL>
<BoL> Return a location point by address . <EoL>
<BoL> Find the timezone for a point in ` query ` . <EoL>
<BoL> Raise any exceptions if there were problems reported in the api response . <EoL>
<BoL> Return a location point by address . <EoL>
<BoL> Return an address by location point . <EoL>
<BoL> Returns location , ( latitude , longitude ) from json feed . <EoL>
<BoL> Validates error statuses . <EoL>
<BoL> Format the components dict to something Google understands . <EoL>
<BoL> Returns a Premier account signed url . Docs on signature : https : //developers.google.com/maps/documentation/business/webservices/auth # digital_signatures <EoL>
<BoL> Returns location , ( latitude , longitude ) from json feed.Get the location , lat , lng from a single json place . <EoL>
<BoL> Find the timezone a point in ` query ` was in for a specified ` at_time ` . <EoL>
<BoL> Find the timezone a ` location ` was in for a specified ` at_time ` , and return a pytz timezone object . <EoL>
<BoL> Parse a location name , latitude , and longitude from an JSON response.Parse each return object . <EoL>
<BoL> Get the location , lat , lng and place from a single json place . <EoL>
<BoL> Remove namespace in the document in place . <EoL>
<BoL> Send the request to get raw content . <EoL>
<BoL> Transform the xml ElementTree due to XML webservice return to jsonHelper to select by attribute and if not attribute , value set to empty string <EoL>
<BoL> Generate API URL . <EoL>
<BoL> Pretty-print address and return lat , lon tuple . <EoL>
<BoL> LiveStreets-specific exceptions . <EoL>
<BoL> Parse responses as JSON objects . <EoL>
<BoL> Return a location point by address . <EoL>
<BoL> Backwards compatibility with geopy < 0.98 tuples . <EoL>
<BoL> Returns location , ( latitude , longitude ) from json feed . <EoL>
<BoL> Construct geocoding request url . The method can be overriden in Nominatim-based geocoders in order to extend URL parameters . <EoL>
<BoL> Validates error statuses . <EoL>
<BoL> Returns location , ( latitude , longitude ) from json feed.Get the location , lat , lng from a single json place . <EoL>
<BoL> Construct geocoding request url . Overridden . <EoL>
<BoL> Parse display name , latitude , and longitude from a JSON response . <EoL>
<BoL> Construct geocoding request url . Overridden . <EoL>
<BoL> : param float latitude : Latitude of point . <EoL>
<BoL> Format decimal degrees ( DD ) to degrees minutes seconds ( DMS ) <EoL>
<BoL> Format altitude with unit <EoL>
<BoL> Format decimal degrees with altitude <EoL>
<BoL> Create and return a new `` Point `` instance from another `` Point `` instance . <EoL>
<BoL> Create and return a new `` Point `` instance from any iterable with 0 to 3 elements . The elements , if present , must be latitude , longitude , and altitude , respectively . <EoL>
<BoL> Create and return a `` Point `` instance from a string containing latitude and longitude , and optionally , altitude . <EoL>
<BoL> Parse altitude managing units conversion <EoL>
<BoL> Parse degrees minutes seconds including direction ( N , S , E , W ) <EoL>
<BoL> Check query validity with regex <EoL>
<BoL> Parse type , words , latitude , and longitude and language from a JSON response.Parse record . <EoL>
<BoL> Parses a location from a single-result reverse API call . <EoL>
<BoL> Parse JSON response body.Parse each record . <EoL>
<BoL> Return a location point by address . <EoL>
<BoL> Return an HTTPResponse object for the request , using http_class . <EoL>
<BoL> Function for iterating on items due to methods renaming between Python 2 and 3 versions For Python2 <EoL>
<BoL> Function for iterating on values due to methods renaming between Python 2 and 3 versions For Python2 <EoL>
<BoL> Convert to Unicode with py3k <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> Implemented in subclasses . <EoL>
<BoL> Return unicode string of geocoder results . <EoL>
<BoL> Join with a filter . <EoL>
<BoL> For the service provided , try to return a geocoder class . <EoL>
<BoL> Normalize angle ` x ` to be within ` [ -limit ; limit ) ` range . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> TODO docs . <EoL>
<BoL> Pair an iterable , e.g. , ( 1 , 2 , 3 , 4 ) - > ( ( 1 , 2 ) , ( 2 , 3 ) , ( 3 , 4 ) ) <EoL>
<BoL> Yields : GridCoordinate : the four tiles of the next zoom level <EoL>
<BoL> Converts EPSG:900913 to tile coordinates in given zoom level <EoL>
<BoL> Get all TileCoordinates contained in the region <EoL>
<BoL> Get the tile resolution at the current position . <EoL>
<BoL> Iterate through a grid of regions defined by a TileBB . <EoL>
<BoL> Iterate through a grid of tiles . <EoL>
<BoL> Args : url_formatter ( URLFormatter ) : URLFormatter object <EoL>
<BoL> Add an element to the KMLDocument <EoL>
<BoL> Add elements from an iterator . <EoL>
<BoL> Return the KML Document as formatted kml/xml <EoL>
<BoL> Create the root document of an individual map . <EoL>
<BoL> Create a KML master document . <EoL>
<BoL> Recursively add maps in a folder hierarchy . <EoL>
<BoL> Get KML < NetworkLink > for a given mapsource . <EoL>
<BoL> Create KML document displaying a certain map region . <EoL>
<BoL> Create an absolute url from a relative one . <EoL>
<BoL> Get URL to a map region . <EoL>
<BoL> Create a unique element name for KML <EoL>
<BoL> Create a KML < Folder > tag . <EoL>
<BoL> Create a KML < GroundOverlay > for a certain TileCoordinate . <EoL>
<BoL> Create the north/south/east/west tags for a < LatLonBox > or < LatLonAltBox > Bounding Box <EoL>
<BoL> Create the KML LevelOfDetail ( LOD ) Tag . <EoL>
<BoL> Create the KML < NetworkLink > Tag for a certain Region in the RegionGrid . <EoL>
<BoL> recursively walk through foldernames of mapsources.Get the first folder in a path > get_first_folder ( `` europe/switzerland/bs '' ) europe <EoL>
<BoL> Fill the placeholders of the tile url with zoom , x and y . <EoL>
<BoL> Args : id ( str ) : unique identifier ( e.g . filename ) name ( str ) : display name folder ( str ) : folder to organize the map in ( e.g . /europe/germany ) bbox ( GeographicBB ) : bounding box , only load tiles within <EoL>
<BoL> Create a MapSource object from a MOBAC mapsource xml . <EoL>
<BoL> Get the geographic bounds from an XML element <EoL>
<BoL> Get one MapLayer from an XML element <EoL>
<BoL> Get the MapLayers from an XML element <EoL>
<BoL> Load all xml map sources from a given directory . <EoL>
<BoL> wrapper function for using the multiprocessing module with multiple arguments <EoL>
<BoL> Add a scales bar to the map . <EoL>
<BoL> Download a given tile from the tile server . <EoL>
<BoL> Convert dpi ( dots per inch ) to dpmm ( dots per millimeter ) <EoL>
<BoL> Calculate the tile bounding box based on position , map size and resolution . <EoL>
<BoL> Download tiles . <EoL>
<BoL> Download map tiles and stitch them together in a single image , ready for printing . <EoL>
<BoL> Merge tiles together into one image . <EoL>
<BoL> KML for a given map <EoL>
<BoL> KML master document for loading all maps in Google Earth <EoL>
<BoL> KML region fetched by a Google Earth network link . <EoL>
<BoL> Args : kml_map ( KMLMap ) : KMLMap object <EoL>
<BoL> Generate a PDF at the given position . <EoL>
<BoL> Generates a json object which serves as bridge between the web interface and the map source collection . <EoL>
<BoL> Greenlet constructor . <EoL>
<BoL> Subclasses may override this method to take any number of arguments and keyword arguments . <EoL>
<BoL> Return the result the greenlet has returned or re-raise the exception it has raised . <EoL>
<BoL> Wait until the greenlet finishes or *timeout* expires . Return `` None `` regardless . <EoL>
<BoL> Raise the `` exception `` in the greenlet . <EoL>
<BoL> Link greenlet 's completion to a callable . <EoL>
<BoL> Like : meth : ` link ` but *callback* is only notified when the greenlet dies because of an unhandled exception . <EoL>
<BoL> Like : meth : ` link ` but *callback* is only notified when the greenlet has completed successfully . <EoL>
<BoL> Register a callable to be executed when the greenlet finishes execution . <EoL>
<BoL> Return a true value if and only if the greenlet has finished execution . <EoL>
<BoL> Create a new : class : ` Greenlet ` object and schedule it to run `` function ( *args , **kwargs ) `` . This can be used as `` gevent.spawn `` or `` Greenlet.spawn `` . <EoL>
<BoL> Create and return a new Greenlet object scheduled to run `` function ( *args , **kwargs ) `` in the future loop iteration *seconds* later . This can be used as `` Greenlet.spawn_later `` or `` gevent.spawn_later `` . <EoL>
<BoL> Schedule the greenlet to run in this loop iteration <EoL>
<BoL> Schedule the greenlet to run in the future loop iteration *seconds* late <EoL>
<BoL> Return a true value if and only if the greenlet has finished execution successfully , that is , without raising an error . <EoL>
<BoL> Immediatelly switch into the greenlet and raise an exception in it . <EoL>
<BoL> Remove the callback set by : meth : ` link ` or : meth : ` rawlink ` <EoL>
<BoL> If the timeout is pending , cancel it . Otherwise , do nothing . <EoL>
<BoL> Schedule the timeout . <EoL>
<BoL> Create a started : class : ` Timeout ` . <EoL>
<BoL> : param fobj : Either an integer fileno , or an object supporting the usual : meth : ` socket.fileno ` method . The file will be put in non-blocking mode . <EoL>
<BoL> Return the hub for the current thread . <EoL>
<BoL> Put the file descriptor *fd* into non-blocking mode if possible . <EoL>
<BoL> Wrap __repr__ ( ) to reveal the real class name . <EoL>
<BoL> Block the current greenlet until *watcher* has pending events . <EoL>
<BoL> accept ( ) - > ( socket object , address info ) <EoL>
<BoL> detach ( ) - > file descriptor <EoL>
<BoL> dup ( ) - > socket object <EoL>
<BoL> Connect to *address* and return the socket object . <EoL>
<BoL> fromfd ( fd , family , type [ , proto ] ) - > socket object <EoL>
<BoL> Resolve host and port into list of address info entries . <EoL>
<BoL> Get fully qualified domain name from name . <EoL>
<BoL> gethostbyaddr ( host ) - > ( name , aliaslist , addresslist ) <EoL>
<BoL> gethostbyname ( host ) - > address <EoL>
<BoL> gethostbyname_ex ( host ) - > ( name , aliaslist , addresslist ) <EoL>
<BoL> getnameinfo ( sockaddr , flags ) - > ( host , port ) <EoL>
<BoL> socketpair ( [ family [ , type [ , proto ] ] ] ) - > ( socket object , socket object ) <EoL>
<BoL> Block the current greenlet until *io* is ready . <EoL>
<BoL> See : meth : ` gevent.hub.Hub.cancel_wait ` <EoL>
<BoL> Block the current greenlet until *fileno* is ready to read . <EoL>
<BoL> Block the current greenlet until *fileno* is ready to read or write . <EoL>
<BoL> Block the current greenlet until *fileno* is ready to write . <EoL>
<BoL> Accepts a new connection from a remote client , and returns a tuple containing that new connection wrapped with a server-side SSL channel , and the address of the remote client . <EoL>
<BoL> Connects to remote ADDR , and then wraps the connection in an SSL channel . <EoL>
<BoL> Connects to remote ADDR , and then wraps the connection in an SSL channel . <EoL>
<BoL> Perform a TLS/SSL handshake . <EoL>
<BoL> Get channel binding data for current connection . <EoL>
<BoL> Returns a formatted version of the data in the certificate provided by the other end of the SSL channel . Return None if no certificate was provided , { } if a certificate was provided , but not validated . <EoL>
<BoL> Read up to LEN bytes and return them . Return zero-length string on EOF . <EoL>
<BoL> Write DATA to the underlying SSL channel . Returns number of bytes of DATA actually transmitted . <EoL>
<BoL> Retrieve the certificate from the server at the specified address , and return it as a PEM-encoded string . <EoL>
<BoL> This function implements a few ugly things so that we can patch the traceback objects . <EoL>
<BoL> Close the listener socket and stop accepting . <EoL>
<BoL> If the user initialized the server with an address rather than socket , then this function will create a socket , bind it and put it into listening mode . <EoL>
<BoL> Start the server if it has n't been already started and wait until it 's stopped . <EoL>
<BoL> Start accepting the connections . <EoL>
<BoL> Stop accepting the connections and close the listening socket . <EoL>
<BoL> Reset the internal flag to false . <EoL>
<BoL> Return true if and only if the internal flag is true . <EoL>
<BoL> Register a callback to call when the internal flag is set to true . <EoL>
<BoL> Set the internal flag to true . <EoL>
<BoL> Remove the callback set by : meth : ` rawlink ` <EoL>
<BoL> Block until the internal flag is true . <EoL>
<BoL> Return the stored value or raise the exception . <EoL>
<BoL> Return the value or raise the exception without blocking . <EoL>
<BoL> Register a callback to call when a value or an exception is set . <EoL>
<BoL> Return true if and only if it holds a value or an exception <EoL>
<BoL> Store the value and wake up any waiters . <EoL>
<BoL> Store the exception and wake up any waiters . <EoL>
<BoL> Return true if and only if it is ready and holds a value <EoL>
<BoL> Remove the callback set by : meth : ` rawlink ` <EoL>
<BoL> Block until the instance is ready . <EoL>
<BoL> A DummySemaphore can always be acquired immediately so this always returns True and ignores its arguments . <EoL>
<BoL> A DummySemaphore is never locked so this always returns False . <EoL>
<BoL> : param fobj : The underlying file-like object to wrap , or an integer fileno that will be pass to : func : ` os.fdopen ` along with everything in *args* . <EoL>
<BoL> Forks a child process and starts a child watcher for it in the parent process . <EoL>
<BoL> If a value/an exception is stored , return/raise it . Otherwise until switch ( ) or throw ( ) is called . <EoL>
<BoL> Return true if and only if it holds a value or an exception <EoL>
<BoL> Return true if and only if it is ready and holds a value <EoL>
<BoL> Switch to the greenlet if one 's available . Otherwise store the value . <EoL>
<BoL> Switch to the greenlet with the exception . If there 's no greenlet , store the exception . <EoL>
<BoL> Iteratively yield *objects* as they are ready , until all ( or *count* ) are ready or *timeout* expired . <EoL>
<BoL> Wait for the `` greenlets `` to finish . <EoL>
<BoL> Forceably terminate all the `` greenlets `` by causing them to raise `` exception `` . <EoL>
<BoL> Wait for `` objects `` to become ready or for event loop to finish . <EoL>
<BoL> Cancel an in-progress call to : meth : ` wait ` by throwing the given *error* in the waiting greenlet . <EoL>
<BoL> Called by the event loop when an error occurs . The arguments type , value , and tb are the standard tuple returned by : func : ` sys.exc_info ` . <EoL>
<BoL> Wait for the event loop to finish . Exits only when there are no more spawned greenlets , started servers , active timeouts or watchers . <EoL>
<BoL> Entry-point to running the loop . This method is called automatically when the hub greenlet is scheduled ; do not call it directly . <EoL>
<BoL> Wait until the *watcher* ( which should not be started ) is ready . <EoL>
<BoL> Return the hub for the current thread . <EoL>
<BoL> Return the type of hub to use for the current thread . <EoL>
<BoL> Cause the calling greenlet to wait until the event loop is idle . <EoL>
<BoL> Kill greenlet asynchronously . The current greenlet is not unscheduled . <EoL>
<BoL> Prepare the gevent hub to run in a new ( forked ) process . <EoL>
<BoL> Put the current greenlet to sleep for at least *seconds* . <EoL>
<BoL> Create a new : class : ` greenlet.greenlet ` object and schedule it to run `` function ( *args , **kwargs ) `` . <EoL>
<BoL> Retrieve the original object from a module . <EoL>
<BoL> Check if a module has been replaced with a cooperative version . <EoL>
<BoL> Check if an object in a module has been replaced with a cooperative version . <EoL>
<BoL> Make the builtin __import__ function greenlet safe under Python 2 <EoL>
<BoL> Replace DNS functions in : mod : ` socket ` with cooperative versions . <EoL>
<BoL> Replace : func : ` os.fork ` with : func : ` gevent.fork ` , and , on POSIX , : func : ` os.waitpid ` with : func : ` gevent.os.waitpid ` ( if the environment variable `` GEVENT_NOWAITPID `` is not defined ) . Does nothing if fork is not available . <EoL>
<BoL> Replace : func : ` select.select ` with : func : ` gevent.select.select ` . <EoL>
<BoL> Make the signal.signal function work with a monkey-patched os . <EoL>
<BoL> Replace the standard socket object with gevent 's cooperative sockets . <EoL>
<BoL> Replace SSLSocket object and socket wrapping functions in : mod : ` ssl ` with cooperative versions . <EoL>
<BoL> Replace : func : ` subprocess.call ` , : func : ` subprocess.check_call ` , : func : ` subprocess.check_output ` and : func : ` subprocess.Popen ` with cooperative versions . <EoL>
<BoL> Patch sys.std [ in , out , err ] to use a cooperative IO via a threadpool . <EoL>
<BoL> Replace : func : ` time.sleep ` with : func : ` gevent.sleep ` . <EoL>
<BoL> Fork a child process and start a child watcher for it in the parent process . <EoL>
<BoL> Forks the process using : func : ` os.fork ` and prepares the child process to continue using gevent before returning . <EoL>
<BoL> Read up to ` n ` bytes from file descriptor ` fd ` . <EoL>
<BoL> Write bytes from buffer ` buf ` to file descriptor ` fd ` . Return the number of bytes written . <EoL>
<BoL> Read up to *n* bytes from file descriptor *fd* . <EoL>
<BoL> Write bytes from buffer *buf* to file descriptor *fd* . Return the number of bytes written . <EoL>
<BoL> Wait for a child process to finish . <EoL>
<BoL> Rough quivalent of the : func : ` apply ( ) ` builtin function blocking until the result is ready and returning it . <EoL>
<BoL> A variant of the apply ( ) method which returns a Greenlet object . <EoL>
<BoL> imap ( func , *iterables , maxsize=None ) - > iterable <EoL>
<BoL> imap_unordered ( func , *iterables , maxsize=None ) - > iterable <EoL>
<BoL> Return a list made by applying the *func* to each element of the iterable . <EoL>
<BoL> A variant of the map ( ) method which returns a Greenlet object that is executing the map function . <EoL>
<BoL> Begin a new greenlet with the given arguments ( which are passed to the greenlet constructor ) and add it to the collection of greenlets this group is monitoring . <EoL>
<BoL> Start the un-started *greenlet* and add it to the collection of greenlets this group is monitoring . <EoL>
<BoL> An iterator that . <EoL>
<BoL> Create a new pool . <EoL>
<BoL> Return a number indicating approximately how many more members can be added to this pool . <EoL>
<BoL> Return a boolean indicating whether this pool has any room for members . ( True if it does , False if it does n't . ) <EoL>
<BoL> Wait until it 's possible to spawn a greenlet in this pool . <EoL>
<BoL> Write information to the *logger* at the given *level* ( default to INFO ) . <EoL>
<BoL> Create an instance of : attr : ` handler_class ` to handle the request . <EoL>
<BoL> Called before the first request is handled to fill in WSGI environment values . <EoL>
<BoL> A shortcut to create a TCP socket , bind it and put it into listening state . <EoL>
<BoL> Construct and return tuple with IO objects : p2cread , p2cwrite , c2pread , c2pwrite , errread , errwrite <EoL>
<BoL> Check if child process has terminated . Returns returncode attribute . <EoL>
<BoL> Interact with process : Send data to stdin . <EoL>
<BoL> Kill the process with SIGKILL <EoL>
<BoL> Create a pipe with FDs set CLOEXEC . <EoL>
<BoL> Send a signal to the process <EoL>
<BoL> Terminate the process with SIGTERM <EoL>
<BoL> Wait for child process to terminate . Returns returncode attribute . <EoL>
<BoL> Run command with arguments . Wait for command to complete or timeout , then return the returncode attribute . <EoL>
<BoL> Run command with arguments . Wait for command to complete . <EoL>
<BoL> Run command with arguments and return its output . <EoL>
<BoL> Return ( exitcode , output ) of executing cmd in a shell . <EoL>
<BoL> Translate a sequence of arguments into a command line string , using the same rules as the MS C runtime : <EoL>
<BoL> Wrap a call to *function* with a timeout ; if the called function fails to return before the timeout , cancel it and return a flag value , provided by *timeout_value* keyword argument . <EoL>
<BoL> Return a tuple suitable for import into a database . <EoL>
<BoL> Calculate the smallest UCSC genomic bin that will contain this feature . <EoL>
<BoL> Retrieves the sequence of this feature as a string . <EoL>
<BoL> Returns a feature , adding additional database-specific defaults <EoL>
<BoL> Insert a feature into the database . <EoL>
<BoL> Runs the sqlite ANALYZE command to potentially speed up queries dramatically . <EoL>
<BoL> Simple count of features . <EoL>
<BoL> Delete features from database.DELETE FROM features WHERE id = ? DELETE FROM relations WHERE parent = ? OR child = ? <EoL>
<BoL> Execute arbitrary queries on the db . <EoL>
<BoL> Iterate over feature types found in the database . <EoL>
<BoL> Merge overlapping features together . <EoL>
<BoL> Returns the database schema as a string . <EoL>
<BoL> Set pragmas for the current database connection . <EoL>
<BoL> Update database with features in ` data ` . <EoL>
<BoL> An Attributes object acts much like a dictionary . However , values are always stored internally as lists , even if a single value is provided . <EoL>
<BoL> Uses the definition of a `` genomic bin '' described in Fig 7 of http : //genome.cshlp.org/content/12/6/996.abstract . <EoL>
<BoL> Useful for debugging : how large is each bin , and what are the bin IDs ? <EoL>
<BoL> Adds a duplicate ID ( as identified by id_spec ) and its new ID to the duplicates table so that they can be later searched for merging . <EoL>
<BoL> Identifies those features that originally had the same ID as ` f ` ( according to the id_spec ) , but were modified because of duplicate IDs . <EoL>
<BoL> Different merge strategies upon name conflicts . <EoL>
<BoL> Various last-minute stuff to perform after file has been parsed and imported . <EoL>
<BoL> Given a Feature from self.iterator , figure out what the ID should be . <EoL>
<BoL> Table creation <EoL>
<BoL> Insert a feature into the database . <EoL>
<BoL> Insert a feature into the database . <EoL>
<BoL> Calls various methods sequentially in order to fully build the database . <EoL>
<BoL> Execute a query directly on the database . <EoL>
<BoL> Set pragmas for the current database connection . <EoL>
<BoL> _DBCreator subclass specifically for working with GFF files . <EoL>
<BoL> create_db ( ) delegates to this class -- see that function for docs <EoL>
<BoL> Generator of items from the file that was just created ... <EoL>
<BoL> As things change from version to version , deal with them here . <EoL>
<BoL> Return the full path of a data file that ships with gffutils . <EoL>
<BoL> Return True if genome contains record . <EoL>
<BoL> Return a chromosome by its name , or its numerical index . <EoL>
<BoL> Return a sequence by record name and interval [ start , end ) . <EoL>
<BoL> Return a sequence by record name and list of intervals <EoL>
<BoL> Given a line from a GFF file , return a Feature object <EoL>
<BoL> Close the stream . Assumes stream has 'close ' method . <EoL>
<BoL> Write out the children records of the exon given by the ID ( not including the exon record itself ) . <EoL>
<BoL> NOTE : The goal of this function is to have a canonical ordering when outputting a gene and all of its records to a file . The order is intended to be : <EoL>
<BoL> Write out the children records of the mRNA given by the ID ( not including the mRNA record itself ) in a canonical order , where exons are sorted by start position and given first . <EoL>
<BoL> Output record to file . <EoL>
<BoL> Output several records to file . <EoL>
<BoL> Given a dictionary yielded by the parser , return the genomic `` UCSC '' bin <EoL>
<BoL> Given a list of dialects , choose the one to use as the `` canonical '' version . <EoL>
<BoL> Convert dict to tuple , for faster sqlite3 import <EoL>
<BoL> Convert feature to tuple , for faster sqlite3 import <EoL>
<BoL> Use most compact form of JSON <EoL>
<BoL> Convert JSON string to an ordered defaultdict . <EoL>
<BoL> Annotate a GFF file by cross-referencing it with another GFF file , e.g . one containing gene models . <EoL>
<BoL> Converts a gffutils.Feature to a pybedtools.Interval <EoL>
<BoL> Compares two dialects . <EoL>
<BoL> Infer the dialect based on the attributes . <EoL>
<BoL> Return True if the given filename is a GFF database . <EoL>
<BoL> Merges two attribute dictionaries into a single dictionary . <EoL>
<BoL> Sanitize given GFF db . Returns a sanitized GFF db . <EoL>
<BoL> Check to see if a URL has a valid protocol . <EoL>
<BoL> Given the string attributes field of a GFF-like line , split it into an attributes dictionary and a `` dialect '' dictionary which contains information needed to reconstruct the original string.Handles the unquoting ( decoding ) of percent-encoded characters . <EoL>
<BoL> deepcopy support for ggplot <EoL>
<BoL> Evaluates patsy expressions within the aesthetics . For example , ' x + 1' , 'factor ( x ) ' , or 'pd.cut ( price , bins=10 ) ' ) <EoL>
<BoL> Converts a discrete aesthetic to a value that will be displayed . For example from `` a '' = > `` # 4682B4 '' . <EoL>
<BoL> 'Flat ' iterator for subplots . Let 's you do a for-loop over each subplot which can be very handy . <EoL>
<BoL> Some types of geoms ( layer ) need to be prepped before calling the plot function on them . This function performs those perperations and then returns a dictionary of **kwargs for the layer.plot function to use . <EoL>
<BoL> Save ggplot to a .png file . <EoL>
<BoL> Save ggplot to a base64 encoded string . <EoL>
<BoL> Builds and displays your plot . <EoL>
<BoL> Open the context . <EoL>
<BoL> Close the context . <EoL>
<BoL> Make a palette that blends between a list of colors . <EoL>
<BoL> Return a list of colors defining a color palette . <EoL>
<BoL> Make a palette that blends from a deep gray to ` color ` . <EoL>
<BoL> Decrease the saturation channel of a color by some percent . <EoL>
<BoL> Get a set of evenly spaced colors in HLS hue space . <EoL>
<BoL> Get a set of evenly spaced colors in HUSL hue space . <EoL>
<BoL> Return discrete colors from a matplotlib palette . <EoL>
<BoL> Make a palette with color names from the xkcd color survey . <EoL>
<BoL> Load world map data . This will return a data frame that contains countries and their coordinate boundaries . <EoL>
<BoL> Regularly spaced dates <EoL>
<BoL> Format dates <EoL>
<BoL> Return the unique values of *series* , correctly sorted . <EoL>
<BoL> Convert bounds of the rectangle . <EoL>
<BoL> NOTE : This can not be called until after this has been added to an Axes , otherwise unit conversion will fail . This makes it very important to call the accessor method and not directly access the transformation member variable . <EoL>
<BoL> Return the vertices of the rectangle . <EoL>
<BoL> Set the bounds of the rectangle : l , b , w , h <EoL>
<BoL> Set the left and bottom coords of the rectangle . <EoL>
<BoL> : param text : a plain text message : return : the message escaped to appear correctly in LaTeX <EoL>
<BoL> *fmt* is a : func : ` strftime ` format string ; *tz* is the : class : ` tzinfo ` instance . <EoL>
<BoL> Helper function for replacing substrings sub1 and sub2 located at the same indexes in strings s1 and s2 respectively , with the string replacement . <EoL>
<BoL> Some classes may want to replace a hyphen for minus with the proper unicode symbol ( U+2212 ) for typographical correctness . The default is to not replace it . <EoL>
<BoL> Returns the full string representation of the value with the position unspecified . <EoL>
<BoL> Return a short string version of the tick value . <EoL>
<BoL> Refer to documentation for : meth : ` datetime.datetime.strftime ` <EoL>
<BoL> Call time.strftime for years before 1900 by rolling forward a multiple of 28 years . <EoL>
<BoL> Mark every day in *bymonthday* ; *bymonthday* can be an int or sequence . <EoL>
<BoL> Return how many days a unit of the locator is ; used for intelligent autoscaling . <EoL>
<BoL> Set the view limits to include the data range . <EoL>
<BoL> Convert axis data interval to datetime objects . <EoL>
<BoL> Given the proposed upper and lower extent , adjust the range if it is too close to being singular ( i.e . a range of ~0 ) . <EoL>
<BoL> Pan numticks ( can be positive or negative ) <EoL>
<BoL> aise a RuntimeError if Locator attempts to create more than MAXTICKS locs <EoL>
<BoL> efresh internal information based on current lim <EoL>
<BoL> Do nothing , and rase a warning . Any locator class not supporting the set_params ( ) function will call this . <EoL>
<BoL> Set time zone info . <EoL>
<BoL> select a scale for the range from vmin to vmax <EoL>
<BoL> Converts the view interval to datetime objects . <EoL>
<BoL> Mark every hour in *byhour* ; *byhour* can be an int or sequence . Default is to tick every hour : `` byhour=range ( 24 ) `` <EoL>
<BoL> Mark every minute in *byminute* ; *byminute* can be an int or sequence . Default is to tick every minute : `` byminute=range ( 60 ) `` <EoL>
<BoL> Mark every month in *bymonth* ; *bymonth* can be an int or sequence . <EoL>
<BoL> Mark every weekday in *byweekday* ; *byweekday* can be a number or sequence . <EoL>
<BoL> Mark years that are multiple of base on a given month and day ( default jan 1 ) . <EoL>
<BoL> Return the number of units for each tick . <EoL>
<BoL> Return how many days a unit of the locator is ; used for intelligent autoscaling . <EoL>
<BoL> Set the view limits to include the data range . <EoL>
<BoL> Returns an *RGB* tuple of three floats from 0-1 . <EoL>
<BoL> Returns an *RGBA* tuple of four floats from 0-1 . <EoL>
<BoL> Returns a numpy array of *RGBA* tuples . <EoL>
<BoL> Convert *c* to a hex color . <EoL>
<BoL> Generate summary table of outlier and influence similar to SAS <EoL>
<BoL> calculate standard deviation and confidence interval for prediction <EoL>
<BoL> Styles x , y axes to appear like ggplot2 Must be called after all plot and axis manipulation operations have been carried out ( needs to know final tick spacing ) <EoL>
<BoL> Return True if *obj* is array-like and has categorical values <EoL>
<BoL> Return True if *obj* is array-like and contains boolean values <EoL>
<BoL> Returns true if *obj* is iterable and contains strings <EoL>
<BoL> Recursively get list of GitHub objects . <EoL>
<BoL> Update the commit associated with a given release tag . <EoL>
<BoL> Constructs and sends a : class : ` Request < Request > ` . <EoL>
<BoL> convert a pandas sparse df to numpy sparse array : param df : pandas sparse df : param matrixType : csc or csr : return : numpy sparse array <EoL>
<BoL> Test whether a path exists . Returns True for broken symbolic links <EoL>
<BoL> Test whether a path is a symbolic link <EoL>
<BoL> A simplified version of os.walk ( code copied ) that uses `` self.listdir `` , and the other local filesystem methods . <EoL>
<BoL> Return the subset of the list NAMES that match PAT . <EoL>
<BoL> Test whether FILENAME matches PATTERN . <EoL>
<BoL> Test whether FILENAME matches PATTERN , including case . <EoL>
<BoL> Translate a shell PATTERN to a regular expression . <EoL>
<BoL> Changes the default value ( and current value too ) for this Flag . <EoL>
<BoL> Get type of flag . <EoL>
<BoL> Returns an XML element that contains this flag 's information . <EoL>
<BoL> Returns extra info about this flag in XML . <EoL>
<BoL> Get parsed flag value as string . <EoL>
<BoL> Returns a string representing the type of the flag . <EoL>
<BoL> Returns a list of XML DOM elements to add additional flag information . <EoL>
<BoL> Raise exception with message if condition is False . <EoL>
<BoL> Raise exception with message if obj1 ! = obj2 . <EoL>
<BoL> Raise exception with message unless ( obj1 > = obj2 ) . <EoL>
<BoL> Raise exception with message unless ( obj1 > obj2 ) . <EoL>
<BoL> Raise exception with message if not ( obj1 < = obj2 ) . <EoL>
<BoL> Raise exception with message unless ( obj1 < obj2 ) . <EoL>
<BoL> Raise exception with message if obj1 == obj2 . <EoL>
<BoL> Raise exception with message if obj is None . <EoL>
<BoL> Print a stack trace that is easier to read . <EoL>
<BoL> Load the settings from disk . <EoL>
<BoL> This is provided so that registry instances can be used as decorators . The decorators should add the decorated code object to the registry , and return the original function <EoL>
<BoL> Add colormap *cmap* with label *label* . <EoL>
<BoL> Add a reference to a plugin which will be loaded when needed . <EoL>
<BoL> Add a new item to the registry . <EoL>
<BoL> The member items provided by default . These are put in this method so that code is only imported when needed <EoL>
<BoL> Add a new importer : param label : Short label for the importer : type label : str <EoL>
<BoL> Add a new exporter <EoL>
<BoL> Add a new keyboard shortcut <EoL>
<BoL> Add a new plugin for providing custom layer artists . <EoL>
<BoL> Add a new menubar plugin : param label : Short label for the plugin : type label : str <EoL>
<BoL> Add colormap *cmap* with label *label* . <EoL>
<BoL> Add a new parser <EoL>
<BoL> Add a startup function to the registry . This is a function that will get called once glue has been started and any data loaded , and can be used to set up specific layouts and create links . <EoL>
<BoL> Add a tool class to the registry . The the `` tool_id `` attribute on the tool_cls should be set , and is used by the viewers to indicate which tools they want to <EoL>
<BoL> The default configuration file search order : <EoL>
<BoL> Find and import a config.py file <EoL>
<BoL> Present an interface to the user for approving or rejecting a proposed data merger . Returns a list of datasets from other that the user has approved to merge with data <EoL>
<BoL> Add data to the session . <EoL>
<BoL> Utility method to interactively add datasets to a data_collection <EoL>
<BoL> Fetch the value of an application setting <EoL>
<BoL> Given a path to a file , load the file as a Data object and add it to the current session . <EoL>
<BoL> Create a new data viewer , add it to the UI , and populate with data <EoL>
<BoL> Report an error message to the user . Must be implemented in a subclass <EoL>
<BoL> Reload a previously-saved session <EoL>
<BoL> Save the data collection and hub to file . <EoL>
<BoL> Reset all the data colors to that specified . <EoL>
<BoL> Set the value of an application setting <EoL>
<BoL> Default unregistration action . Calls hub.unsubscribe_all on self <EoL>
<BoL> Shortcut syntax to access the numerical data in a component . Equivalent to : : <EoL>
<BoL> Assign a pre-existing subset to this data object . <EoL>
<BoL> Send a : class : ` ~glue.core.message.DataUpdateMessage ` to the hub <EoL>
<BoL> Compute an n-dimensional histogram with regularly spaced bins . <EoL>
<BoL> Find a component ID by name . <EoL>
<BoL> Get the data values for a given component <EoL>
<BoL> Get the kind of data for a given component . <EoL>
<BoL> Get a boolean mask for a given subset state . <EoL>
<BoL> Create a new subset , and attach to self . <EoL>
<BoL> Connect to a hub . <EoL>
<BoL> Execute the command <EoL>
<BoL> Return whether undo and redo options are possible <EoL>
<BoL> Execute and log a new command <EoL>
<BoL> Redo the previously-undone command <EoL>
<BoL> Undo the previous command <EoL>
<BoL> : param data : The data to store : type data : : class : ` numpy.ndarray ` <EoL>
<BoL> Automatically choose between Component and CategoricalComponent , based on the input data type . <EoL>
<BoL> Convert into a pandas.Series object . <EoL>
<BoL> : param comp_from : The input ComponentIDs : type comp_from : list of : class : ` ~glue.core.component_id.ComponentID ` <EoL>
<BoL> For a given data set , compute the component comp_to given the data associated with each comp_from and the `` using `` function <EoL>
<BoL> The list of input ComponentIDs <EoL>
<BoL> The inverse transformation , or None <EoL>
<BoL> The target ComponentID <EoL>
<BoL> The transformation function <EoL>
<BoL> Replace all references to an old ComponentID with references to new <EoL>
<BoL> Return a tuple of which world-axes are non-independent from a given pixel axis <EoL>
<BoL> Convert pixel to world coordinates , preserving input type/shape . <EoL>
<BoL> Convert pixel to world coordinates , preserving input type/shape . <EoL>
<BoL> Convert world to pixel coordinates , preserving input type/shape . <EoL>
<BoL> Convert world to pixel coordinates , preserving input type/shape . <EoL>
<BoL> Find the world coordinates along a given dimension , and which for now we center on the pixel origin . <EoL>
<BoL> Return the unit of the world coordinate given by `` axis `` ( assuming the Numpy axis order ) <EoL>
<BoL> Wrapper for data.add_component ( ) <EoL>
<BoL> Remove internal derived components that can no longer be derived . <EoL>
<BoL> Externally deriable components are components identified by component IDs from other datasets . <EoL>
<BoL> Pixel-aligned data are datasets that contain pixel component IDs that are equivalent ( identically , not transformed ) with all pixel component IDs in the present dataset . <EoL>
<BoL> Add a new component to this data set . <EoL>
<BoL> Shortcut method for generating a new : class : ` ~glue.core.component.DerivedComponent ` from a ComponentLink object , and adding it to a data set . <EoL>
<BoL> Equivalent to : attr : ` Data.components ` <EoL>
<BoL> Compute an n-dimensional histogram with regularly spaced bins . <EoL>
<BoL> Lookup the dtype for the data associated with a ComponentID <EoL>
<BoL> Retrieve component_ids associated by label name . <EoL>
<BoL> Fetch the component corresponding to component_id . <EoL>
<BoL> Create an *element* mapping to another dataset , by joining on values of ComponentIDs in both datasets . <EoL>
<BoL> Remove a component from a data set <EoL>
<BoL> Reorder the components using a list of component IDs . The new set of component IDs has to match the existing set ( though order may differ ) . <EoL>
<BoL> Convert the Data object into a pandas.DataFrame object <EoL>
<BoL> Change the numerical data associated with some of the Components in this Data object . <EoL>
<BoL> Reassign a component to a different : class : ` glue.core.component_id.ComponentID ` <EoL>
<BoL> Replace numerical values in data to match values from another dataset . <EoL>
<BoL> : param data : : class : ` ~glue.core.data.Data ` object , or list of such objects <EoL>
<BoL> update the LinkManager , so all the DerivedComponents for each data set are up-to-date <EoL>
<BoL> Add one or more links to the data collection . <EoL>
<BoL> Add a new dataset to this collection . <EoL>
<BoL> Add several new datasets to this collection <EoL>
<BoL> Merge two or more datasets into a single dataset . <EoL>
<BoL> Create and return a new Subset Group . <EoL>
<BoL> Register managed data objects to a hub . <EoL>
<BoL> Remove a data set from the collection <EoL>
<BoL> Remove one or more links from the data collection . <EoL>
<BoL> Remove an existing : class : ` ~glue.core.subset_group.SubsetGroup ` <EoL>
<BoL> Override the links in the collection , and update data objects as necessary . <EoL>
<BoL> Determine what merge label to suggest given datasets <EoL>
<BoL> Return a picklable representation of the hub <EoL>
<BoL> Any arguments that are passed to Hub will be registered to the new hub object . <EoL>
<BoL> Yields all ( subscriber , handler ) pairs that should receive a message <EoL>
<BoL> Broadcasts a message to all subscribed objects . <EoL>
<BoL> Test whether the subscriber has subscribed to a given message class <EoL>
<BoL> Remove a ( subscriber , message ) pair from subscription list . The handler originally attached to the subscription will no longer be called when broadcasting messages of type message <EoL>
<BoL> Unsubscribe the object from any subscriptions . <EoL>
<BoL> Ingest one or more ComponentLinks to the manager <EoL>
<BoL> Update all the externally derived components in all data objects , based on all the Components deriveable based on the links in self . <EoL>
<BoL> Retrieve the elements from a data view within the subset <EoL>
<BoL> Create a new subset object . <EoL>
<BoL> Explicitly broadcast a SubsetUpdateMessage to the hub <EoL>
<BoL> Broadcast a SubsetDeleteMessage to the hub , and stop broadcasting <EoL>
<BoL> Set whether state changes to the subset are relayed to a hub . <EoL>
<BoL> paste subset state from other_subset onto self <EoL>
<BoL> Register a subset to its data , and start broadcasting state changes <EoL>
<BoL> Convert the current SubsetState to a MaskSubsetState <EoL>
<BoL> Convert the current subset to a list of indices . These index the elements in the ( flattened ) data object that belong to the subset . <EoL>
<BoL> Convert the current subset to a mask . <EoL>
<BoL> Write a subset mask out to file <EoL>
<BoL> Create a new empty SubsetGroup <EoL>
<BoL> paste subset state from other_subset onto self <EoL>
<BoL> Register to a : class : ` ~glue.core.data_collection.DataCollection ` <EoL>
<BoL> Add a callback that gets triggered when a callback property of the class changes . <EoL>
<BoL> Add a global callback function , which is a callback that gets triggered when any callback properties on the class change . <EoL>
<BoL> Remove all global and property-specific callbacks . <EoL>
<BoL> Create a new instance with the same visual properties <EoL>
<BoL> Whether a property ( identified by name ) is a callback property . <EoL>
<BoL> Iterator to loop over all callback properties . <EoL>
<BoL> Remove a previously-added callback <EoL>
<BoL> Remove a global callback function . <EoL>
<BoL> Update this instance 's properties based on another VisualAttributes instance . <EoL>
<BoL> Use a factory to load a file and assign a label . <EoL>
<BoL> : param categorical_data : The underlying : class : ` numpy.ndarray ` : param categories : List of unique values in the data : jitter : Strategy for jittering the data <EoL>
<BoL> Jitter the codes so the density of points can be easily seen in a scatter plot for example . <EoL>
<BoL> Convert into a pandas.Series object . <EoL>
<BoL> : param data : The data object to use for calculation : type data : : class : ` ~glue.core.data.Data ` <EoL>
<BoL> Reassign the Data object that this DerivedComponent operates on <EoL>
<BoL> Compatibility function - can be removed once we support only Numpy 1.10 and above <EoL>
<BoL> Jitter the codes . <EoL>
<BoL> Coerce an array into a numeric array , replacing non-numeric elements with nans . <EoL>
<BoL> On Windows , shape tuples use long ints which results in formatted shapes such as ( 2L , 3L ) . This function ensures that the shape is always formatted without the Ls . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Pack a ComponentID and optional view into single tuple . <EoL>
<BoL> Given an array , return a new array that is the smallest subset of the original array that can be re-broadcasted back to the original array . <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Gets called prior to a ufunc <EoL>
<BoL> Gets called after a ufunc <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> True if the key is in the info axis <EoL>
<BoL> Delete item <EoL>
<BoL> Provide method name lookup and completion Only provide 'public ' methods <EoL>
<BoL> Propagate metadata from other to self . <EoL>
<BoL> After regular attribute access , try looking up the name This allows simpler access to columns for interactive use . <EoL>
<BoL> Return an iterator of the values . <EoL>
<BoL> return the length of the Series <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> After regular attribute access , try setting the name This allows simpler access to columns for interactive use . <EoL>
<BoL> Generates the total memory usage for an object that returns either a value or Series of values <EoL>
<BoL> Return a string representation for a particular Object <EoL>
<BoL> Return a string representation for a particular DataFrame <EoL>
<BoL> Add the operations to the cls ; evaluate the doc strings again <EoL>
<BoL> Add the series only operations to the cls ; evaluate the doc strings again . <EoL>
<BoL> Add the series or dataframe only operations to the cls ; evaluate the doc strings again . <EoL>
<BoL> Perform generic binary operation with optional fill value <EoL>
<BoL> check whether we allow in-place setting with this type of value <EoL>
<BoL> Check if we are a view , have a cacher , and are of mixed type . If so , then force a setitem_copy check . <EoL>
<BoL> Check whether ` key ` matches both a level of the input ` axis ` and a label of the other axis and raise a `` FutureWarning `` if this is the case . <EoL>
<BoL> Validate percentiles ( used by describe and quantile ) . <EoL>
<BoL> Compute NDFrame with `` consolidated '' internals ( data of each dtype grouped together in a single ndarray ) . <EoL>
<BoL> Consolidate data in place and return None <EoL>
<BoL> Return an axes dictionary for myself . <EoL>
<BoL> Return an axes dictionary for myself . <EoL>
<BoL> Return an axes dictionary for the passed axes . <EoL>
<BoL> Construct and returns axes if supplied in args/kwargs . <EoL>
<BoL> Create an indexer like _name in the class . <EoL>
<BoL> add the string-like attributes from the info_axis . If info_axis is a MultiIndex , it 's first level values are used . <EoL>
<BoL> delete unwanted __dir__ for this object <EoL>
<BoL> Drop labels from specified axis . Used in the `` drop `` method internally . <EoL>
<BoL> Drop labels and/or levels for the given ` axis ` . <EoL>
<BoL> Retrieves the index of the first valid value . <EoL>
<BoL> Return the values that can be formatted ( used by SeriesFormatter and DataFrameFormatter ) <EoL>
<BoL> Map the axis to the block_manager axis . <EoL>
<BoL> eturn my cacher or None <EoL>
<BoL> Return the cached item , item represents a label indexer . <EoL>
<BoL> Return a 1-D array of values associated with ` key ` , a label or level from the given ` axis ` . <EoL>
<BoL> sub-classes to define return a sliced object <EoL>
<BoL> Return the cached item , item represents a positional indexer . <EoL>
<BoL> Derive the `` _data '' and `` index '' attributes of a new Series from a dictionary input . <EoL>
<BoL> passed a manager and a axes dict <EoL>
<BoL> if we define an builtin function for this argument , return it , otherwise return the arg <EoL>
<BoL> if we define an internal function for this argument , return it <EoL>
<BoL> Test whether a key is a label or level reference for a given axis . <EoL>
<BoL> Test whether a key is a label reference for a given axis . <EoL>
<BoL> Test whether a key is a level reference for a given axis . <EoL>
<BoL> Return the i-th value or values in the Series by location <EoL>
<BoL> An internal function that maps values using the input correspondence ( which can be a dict , Series , or function ) . <EoL>
<BoL> The object has called back to us saying maybe it has changed . <EoL>
<BoL> See if we need to update our parent cacher if clear , then clear our cache . <EoL>
<BoL> check if we do need a multi reindex ; this is for compat with higher dims <EoL>
<BoL> Consolidate _data -- if the blocks have changed , then clear the cache <EoL>
<BoL> Not a real Jupyter special repr method , but we use the same naming convention . <EoL>
<BoL> Returns a LaTeX representation for a particular object . Mainly for use with nbconvert ( jupyter notebook conversion to pdf ) . <EoL>
<BoL> Reset cached properties . If `` key `` is passed , only clears that key . <EoL>
<BoL> Reset the cacher . <EoL>
<BoL> Set the _cacher attribute on the calling object with a weakref to cacher . <EoL>
<BoL> override generic , we want to set the _typ here <EoL>
<BoL> Alter the name or names of the axis . <EoL>
<BoL> Set the Series name . <EoL>
<BoL> return a new object with the replacement attributes <EoL>
<BoL> Return a dict of dtype - > Constructor Types that each is a homogeneous dtype . <EoL>
<BoL> if arg is a string , then try to operate on it : - try to find a function ( or attribute ) on ourselves - try to find a numpy function - raise <EoL>
<BoL> validate the passed dtype <EoL>
<BoL> Returns a cross-section ( row ( s ) or column ( s ) ) from the Series/DataFrame . Defaults to cross-section on the rows ( axis=0 ) . <EoL>
<BoL> Return a Series/DataFrame with absolute numeric value of each element . <EoL>
<BoL> Prefix labels with string ` prefix ` . <EoL>
<BoL> Suffix labels with string ` suffix ` . <EoL>
<BoL> Concatenate two or more Series . <EoL>
<BoL> Invoke function on values of Series . Can be ufunc ( a NumPy function that applies to the entire Series ) or a Python function that only works on single values <EoL>
<BoL> Return the row label of the maximum value . <EoL>
<BoL> Return the row label of the minimum value . <EoL>
<BoL> Overrides ndarray.argsort . Argsorts the value , omitting NA/null values , and places the result in the same locations as the non-NA values <EoL>
<BoL> Convert the frame to a dict of dtype - > Constructor Types that each has a homogeneous dtype . <EoL>
<BoL> Convert the frame to its Numpy-array representation . <EoL>
<BoL> The last row without any NaN is taken ( or the last row without NaN considering only the subset of columns in the case of a DataFrame ) <EoL>
<BoL> Cast a pandas object to a specified dtype `` dtype `` . <EoL>
<BoL> Select values at particular time of day ( e.g . 9:30AM ) . <EoL>
<BoL> Lag-N autocorrelation <EoL>
<BoL> Return boolean Series equivalent to left < = series < = right . <EoL>
<BoL> Synonym for : meth : ` DataFrame.fillna ( method='bfill ' ) < DataFrame.fillna > ` <EoL>
<BoL> Return the bool of a single element PandasObject . <EoL>
<BoL> Return copy of the input with values below a threshold truncated . <EoL>
<BoL> Return copy of input with values above given value ( s ) truncated . <EoL>
<BoL> Perform elementwise binary operation on two Series using given function with optional fill value when an index is missing from one Series or the other <EoL>
<BoL> Combine Series values , choosing the calling Series 's values first . Result index will be the union of the two indexes <EoL>
<BoL> Return selected slices of an array along given axis as a Series <EoL>
<BoL> Compute NDFrame with `` consolidated '' internals ( data of each dtype grouped together in a single ndarray ) . <EoL>
<BoL> Make a copy of this object 's indices and data . <EoL>
<BoL> Compute correlation with ` other ` Series , excluding missing values <EoL>
<BoL> Return number of non-NA/null observations in the Series <EoL>
<BoL> Compute covariance with Series , excluding missing values <EoL>
<BoL> Generates descriptive statistics that summarize the central tendency , dispersion and shape of a dataset 's distribution , excluding `` NaN `` values . <EoL>
<BoL> First discrete difference of element . <EoL>
<BoL> Matrix multiplication with DataFrame or inner-product with Series objects . Can also be called using ` self @ other ` in Python > = 3.5 . <EoL>
<BoL> Return Series with duplicate values removed . <EoL>
<BoL> Return a new Series with missing values removed . <EoL>
<BoL> Indicate duplicate Series values . <EoL>
<BoL> Determines if two NDFrame objects contain the same elements . NaNs in the same location are considered equal . <EoL>
<BoL> Synonym for : meth : ` DataFrame.fillna ( method='ffill ' ) < DataFrame.fillna > ` <EoL>
<BoL> Subset rows or columns of dataframe according to labels in the specified index . <EoL>
<BoL> Convenience method for subsetting initial periods of time series data based on a date offset . <EoL>
<BoL> Get item from object for given key ( DataFrame column , Panel slice , etc. ) . Returns default value if not found . <EoL>
<BoL> Return counts of unique dtypes in this object . <EoL>
<BoL> Return counts of unique ftypes in this object . <EoL>
<BoL> Quickly retrieve single value at passed index label <EoL>
<BoL> same as values ( but handles sparseness conversions ) ; is a view <EoL>
<BoL> Return the first ` n ` rows . <EoL>
<BoL> Attempt to infer better dtypes for object columns . <EoL>
<BoL> Check whether ` values ` are contained in Series . <EoL>
<BoL> return the first element of the underlying data as a python scalar <EoL>
<BoL> Lazily iterate over ( index , value ) tuples <EoL>
<BoL> Alias for index <EoL>
<BoL> Convenience method for subsetting final periods of time series data based on a date offset . <EoL>
<BoL> Map values of Series using input correspondence ( a dict , Series , or function ) . <EoL>
<BoL> Return the memory usage of the Series . <EoL>
<BoL> Return the mode ( s ) of the dataset . <EoL>
<BoL> Return the largest ` n ` elements . <EoL>
<BoL> Return the *integer* indices of the elements that are non-zero <EoL>
<BoL> Return the smallest ` n ` elements . <EoL>
<BoL> Return number of unique elements in the object . <EoL>
<BoL> Return item and drop from frame . Raise KeyError if not found . <EoL>
<BoL> Applies the ` put ` method to its ` values ` attribute if it has one . <EoL>
<BoL> Return value at the given quantile , a la numpy.percentile . <EoL>
<BoL> Return the flattened underlying data as an ndarray <EoL>
<BoL> Conform Series to new index with optional filling logic . <EoL>
<BoL> Alter Series index labels or name <EoL>
<BoL> Alter the name of the index or columns . <EoL>
<BoL> Rearrange index levels using input order . May not drop or duplicate levels <EoL>
<BoL> Repeat elements of an Series . Refer to ` numpy.ndarray.repeat ` for more information about the ` repeats ` argument . <EoL>
<BoL> Generate a new DataFrame or Series with the index reset . <EoL>
<BoL> Round each value in a Series to the given number of decimals . <EoL>
<BoL> Return data corresponding to axis labels matching criteria <EoL>
<BoL> Assign desired index to given axis . <EoL>
<BoL> Quickly set single value at passed label . If label is not contained , a new object is created with the label placed at the end of the result index . <EoL>
<BoL> Equivalent to ` shift ` without copying data . The shifted data will not include the dropped periods and the shifted axis will be smaller than the original . <EoL>
<BoL> Sort Series with MultiIndex by chosen level . Data will be lexicographically sorted by the chosen level followed by the other levels ( in order ) , <EoL>
<BoL> Squeeze length 1 dimensions . <EoL>
<BoL> Interchange axes and swap values axes appropriately <EoL>
<BoL> Swap levels i and j in a MultiIndex <EoL>
<BoL> Return the last ` n ` rows . <EoL>
<BoL> Copy object to the system clipboard . <EoL>
<BoL> Return dense representation of NDFrame ( as opposed to sparse ) <EoL>
<BoL> Convert Series to { label - > value } dict or dict-like object . <EoL>
<BoL> Convert Series to DataFrame <EoL>
<BoL> Write the contained data to an HDF5 file using HDFStore . <EoL>
<BoL> msgpack ( serialize ) object to input file path <EoL>
<BoL> Convert Series from DatetimeIndex to PeriodIndex with desired frequency ( inferred from index if not passed ) <EoL>
<BoL> Convert Series to SparseSeries <EoL>
<BoL> Cast to datetimeindex of timestamps , at *beginning* of period <EoL>
<BoL> Return an xarray object from the pandas object . <EoL>
<BoL> Return a list of the values . <EoL>
<BoL> return the transpose , which is by definition self <EoL>
<BoL> Truncate a Series or DataFrame before and after some index value . <EoL>
<BoL> Shift the time index , using the index 's frequency if available . <EoL>
<BoL> Convert tz-aware axis to target time zone . <EoL>
<BoL> Return unique values of Series object . <EoL>
<BoL> Unstack , a.k.a . pivot , Series with MultiIndex to produce DataFrame . The level involved will automatically get sorted . <EoL>
<BoL> Modify Series in place using non-NA values from passed Series . Aligns on index <EoL>
<BoL> Return Series without null values . <EoL>
<BoL> Create a new view of the Series . <EoL>
<BoL> Define some custom contracts if PyContracts is foundValue is a ComponentID or a stringA valid matplotlib color <EoL>
<BoL> Convert a FITS header into a glue Coordinates object . <EoL>
<BoL> Convert an Astropy WCS object into a glue Coordinates object . <EoL>
<BoL> Convert a string to a FITS header . <EoL>
<BoL> Return a copy of the subset state . <EoL>
<BoL> Compute the mask for this subset state . <EoL>
<BoL> Clear the cache of a function that has potentially been decorated by memoize . Safely ignores non-decorated functions <EoL>
<BoL> Convert ` numpy.datetime64 ` or an ndarray of those types to Gregorian date as UTC float . <EoL>
<BoL> Given a dataset and a subset state , check whether the subset state can be translated to the current dataset via key joins . <EoL>
<BoL> Given a data shape and a chunk shape ( or maximum chunk size ) , iteratively return slice objects that can be used to slice the array . <EoL>
<BoL> Split the input to data or subset.__getitem__ into its pieces . <EoL>
<BoL> Register label with object ( possibly disamgiguating ) Reset registry , clearing all stored values <EoL>
<BoL> Given a list of strings , find the longest prefix common to all of them <EoL>
<BoL> : param path : The path to watch , str : param callback : A function to call when the path changes : param poll_interval : Time to wait between checks , in ms <EoL>
<BoL> Re-read files , and update data <EoL>
<BoL> Build a data set from a table . We restrict ourselves to tables with 1D columns . <EoL>
<BoL> A simple default filetype identifier function <EoL>
<BoL> Attempt to automatically construct a data object <EoL>
<BoL> This provides special support for 4D CASA FITS - like cubes , which have 2 spatial axes , a spectral axis , and a stokes axis in that order . <EoL>
<BoL> Convert a file path into a data label , by stripping out slashes , file extensions , etc . <EoL>
<BoL> Build a data set from a table using pandas . This attempts to respect categorical data input by letting pandas.read_csv infer the type <EoL>
<BoL> A factory for reading excel data using pandas . <EoL>
<BoL> Returns the final component of a pathname <EoL>
<BoL> Read in all extensions from a FITS file . <EoL>
<BoL> Check if a FITS file is a CASA like cube , with ( P , P , V , Stokes ) layout <EoL>
<BoL> Recursive function that returns a dictionary with all the datasets found in an HDF5 file or group . ` handle ` should be an instance of h5py.highlevel.File or h5py.highlevel.Group . <EoL>
<BoL> Read in all datasets from an HDF5 file <EoL>
<BoL> Load common image files into a Glue data object <EoL>
<BoL> Load an image to a numpy array , using either PIL or skimage <EoL>
<BoL> The first bytes are x93NUMPY ( for npy ) or PKx03x04 ( for npz ) <EoL>
<BoL> Read in a Numpy structured array saved to a .npy or .npz file . <EoL>
<BoL> A factory for reading tabular data using pandas : param path : path/to/file : param kwargs : All kwargs are passed to pandas.read_csv : returns : : class : ` glue.core.data.Data ` object <EoL>
<BoL> Save results of function calls to avoid repeated calculation <EoL>
<BoL> Memoize a method call , cached both on arguments and given attribute of first argument ( which is presumably self ) <EoL>
<BoL> Turn a class into a singleton , such that new objects in this class share the same instance <EoL>
<BoL> Edit_subset.subset state is and-combined with new_state <EoL>
<BoL> Edit_subset.subset state is and-not-combined with new_state <EoL>
<BoL> Dispatches to the combine method of mode attribute . <EoL>
<BoL> Apply a new subset state to editable subsets within a : class : ` ~glue.core.data.Data ` or : class : ` ~glue.core.data_collection.DataCollection ` instance <EoL>
<BoL> Replaces edit_subset.subset_state with new_state <EoL>
<BoL> Edit_subset.subset state is or-combined with new_state <EoL>
<BoL> Replaces edit_subset.subset_state with new_state <EoL>
<BoL> Edit_subset.subset state is xor-combined with new_state <EoL>
<BoL> Given a function/method , this will automatically wrap a method using weakref to avoid circular references . <EoL>
<BoL> Create a new message <EoL>
<BoL> Given N arrays of size M , return an array of size M where each item is the concatenation of the bytes of the orginal arrays for the respective item . <EoL>
<BoL> Return 2 links that connect input ComponentIDs in both directions <EoL>
<BoL> Coerce the input to a ComponentID , if possible <EoL>
<BoL> Given a dataset and a component ID , return the equivalent component ID that truly belongs to the dataset ( not via a link ) . Returns None if there is no strictly identical component in the dataset . <EoL>
<BoL> Calculate all ComponentLink objects in a list that can be calculated from a collection of componentIds <EoL>
<BoL> Discover all links to components that can be derived based on the current components known to a dataset , and a set of ComponentLinks . <EoL>
<BoL> Given two datasets with potentially linked pixel coordinates , determine whether the two datasets have an equivalent set of pixel component IDs . <EoL>
<BoL> Determine which ` DerivedComponents ` in a data set depend ( either directly or implicitly ) on a given ` ComponentLink ` . <EoL>
<BoL> Given a dataset and a component ID , determine whether a pixel component exists in data such that the component ID can be derived solely from the pixel component . Returns ` None ` if no such pixel component ID can be found and returns the pixel component ID if one exists . <EoL>
<BoL> Convenience function to determine if two component IDs in a dataset are equivalent . <EoL>
<BoL> : param attribute : An optional label of what attribute has changed <EoL>
<BoL> Decorator to temporarily disable disambiguation <EoL>
<BoL> If necessary , add a suffix to label to avoid name conflicts <EoL>
<BoL> : param axes : The Matplotlib Axes object to draw to <EoL>
<BoL> A helper function to do the rigamaroll of getting categorical data . <EoL>
<BoL> Return the ( x , y ) coordinates of the ROI cente <EoL>
<BoL> Test whether a set categorical elements fall within the region of interest <EoL>
<BoL> Return true/false for each x/y/z pair . <EoL>
<BoL> Return a clone of the ROI <EoL>
<BoL> Returns True if the ROI is defined <EoL>
<BoL> Utility function to help construct the Roi from a range . <EoL>
<BoL> Translate the ROI to a center of ( x , y ) <EoL>
<BoL> Just not possible . <EoL>
<BoL> A transformed version of the ROI <EoL>
<BoL> Test whether a set of ( x , y ) points falls within the region of interest <EoL>
<BoL> Returns True if the ROI is defined <EoL>
<BoL> Reset the rectangular region . <EoL>
<BoL> Set the center of the circular region <EoL>
<BoL> Set the radius of the circular region <EoL>
<BoL> Returns x , y , where each is a list of points <EoL>
<BoL> NOTE : This can not be called until after this has been added to an Axes , otherwise unit conversion will fail . This makes it very important to call the accessor method and not directly access the transformation member variable . <EoL>
<BoL> Return the center of the ellipse <EoL>
<BoL> Return the vertices of the rectangle <EoL>
<BoL> Set the center of the ellipse . <EoL>
<BoL> Composes two transforms together such that *self* is followed by *other* . <EoL>
<BoL> Composes two transforms together such that *self* is followed by *other* . <EoL>
<BoL> Returns a transform stack which goes all the way down self 's transform stack , and then ascends back up other 's stack . If it can , this is optimised : : <EoL>
<BoL> Concatenates two transformation matrices ( represented as numpy arrays ) together . <EoL>
<BoL> Called by : meth : ` invalidate ` and subsequently ascends the transform stack calling each TransformNode 's _invalidate_internal method . <EoL>
<BoL> Returns an iterator breaking down this transform stack from left to right recursively . If self == ( ( A , N ) , A ) then the result will be an iterator which yields I : ( ( A , N ) , A ) , followed by A : ( N , A ) , followed by ( A , N ) : ( A ) , but not ( ( A , N ) , A ) : I . <EoL>
<BoL> Return whether the given transform is a sub-tree of this transform . <EoL>
<BoL> Returns whether the given branch is a sub-tree of this transform on each separate dimension . <EoL>
<BoL> Invalidate this : class : ` TransformNode ` and triggers an invalidation of its ancestors . Should be called any time the transform changes . <EoL>
<BoL> ( staticmethod ) Create a new transformation matrix as a 3x3 numpy array of the form : : <EoL>
<BoL> Set the children of the transform , to let the invalidation system know which transforms can invalidate this transform . Should be called from the constructor of any transforms that depend on other transforms . <EoL>
<BoL> Return the values of the matrix as a sequence ( a , b , c , d , e , f ) <EoL>
<BoL> Performs transformation on a set of angles anchored at specific locations . <EoL>
<BoL> Transform the given bounding box . <EoL>
<BoL> : param axes : A matplotlib Axes object to attach the graphical ROI to <EoL>
<BoL> : param axes : A matplotlib Axes object to attach the graphical ROI to <EoL>
<BoL> : param axes : A matplotlib Axes object to attach the graphical ROI to <EoL>
<BoL> : param axes : A matplotlib Axes object to attach the graphical ROI to <EoL>
<BoL> : param axes : A matplotlib Axes object to attach the graphical ROI to <EoL>
<BoL> Returns a tuple of x and y points , approximating the ROI as a polygon . <EoL>
<BoL> *xy* is a numpy array with shape Nx2 . <EoL>
<BoL> Get the vertices of the path . <EoL>
<BoL> Set the vertices of the polygon . <EoL>
<BoL> Returns if the polygon is closed <EoL>
<BoL> Get the path of the polygon <EoL>
<BoL> Set if the polygon is closed <EoL>
<BoL> : param vx : initial x vertices : type vx : list : param vy : initial y vertices : type vy : list <EoL>
<BoL> Add another vertex to the ROI <EoL>
<BoL> Test whether a set of ( x , y ) points falls within the region of interest <EoL>
<BoL> Remove the vertex closest to a reference ( xy ) point <EoL>
<BoL> Reset the vertex list . <EoL>
<BoL> Test whether the projected coordinates are contained in the 2d ROI . <EoL>
<BoL> : param orientation : ' x ' or ' y ' . Sets which axis to range <EoL>
<BoL> Test whether a set of ( x , y ) points falls within the region of interest <EoL>
<BoL> Reset the rectangular region . <EoL>
<BoL> Update the limits of the rectangle <EoL>
<BoL> Return true/false for each x/y pair . <EoL>
<BoL> Returns whether or not the subset is properly defined <EoL>
<BoL> Returns the pixel height / width of a box that spans 1 data unit in x and y <EoL>
<BoL> Create a new `` blended '' transform using *x_transform* to transform the *x*-axis and *y_transform* to transform the *y*-axis . <EoL>
<BoL> Given two slices that can be applied to a 1D array and the length of that array , this returns a new slice which is the one that should be applied to the array instead of slice2 if slice1 has already been applied . <EoL>
<BoL> Find all the segments of intersection between a polygon and an infinite horizontal/vertical line . <EoL>
<BoL> Given a 2D ROI and attributes on the x and y axis , determine the corresponding subset state . <EoL>
<BoL> Return the shape of a view of an array . <EoL>
<BoL> : param data : : class : ` ~glue.core.data.Data ` instance to bind to : param group : : class : ` ~glue.core.subset_group.SubsetGroup ` <EoL>
<BoL> If necessary , reassign non-grouped subsets in a DataCollection into SubsetGroups . <EoL>
<BoL> Autoformat the date labels . The default format is the one to use if none of the values in `` self.scaled `` are greater than the unit returned by `` locator._get_unit ( ) `` . <EoL>
<BoL> To know the values of the non-public parameters , please have a look to the defaults of ` ~matplotlib.ticker.MaxNLocator ` . <EoL>
<BoL> Generate a list of tick locations including the range *vmin* to *vmax* . In some applications , one or both of the end locations will not be needed , in which case they are trimmed off elsewhere . <EoL>
<BoL> autoscale the view limits <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Return the value of the user defined function . <EoL>
<BoL> Return the format for tick value *x* . <EoL>
<BoL> Change the *base* for labeling . <EoL>
<BoL> Return a short formatted string representation of a number . <EoL>
<BoL> Switch minor tick labeling on or off . <EoL>
<BoL> Use axis view limits to control which ticks are labeled . <EoL>
<BoL> Place ticks on the locations : subs [ j ] * base**i <EoL>
<BoL> set the base of the log scaling ( major tick every base**i , i integer ) <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> set the minor ticks for the log scaling every base**i*subs [ j ] <EoL>
<BoL> Keyword args : <EoL>
<BoL> Return the format for tick value ` x ` at position ` pos ` . <EoL>
<BoL> Replace hyphens with a unicode minus . <EoL>
<BoL> Return a formatted string representation of a number . <EoL>
<BoL> Return a short formatted string representation of a number . <EoL>
<BoL> Return scientific notation , plus offset . <EoL>
<BoL> Set the locations of the ticks . <EoL>
<BoL> Sets size thresholds for scientific notation . <EoL>
<BoL> Turn scientific notation on or off . <EoL>
<BoL> Re-color a list of subsets according to a colormap . <EoL>
<BoL> Extract a downsampled view from a dataset , for quick statistical summaries <EoL>
<BoL> Same as small_view , except using a numpy array as input <EoL>
<BoL> Changes the axes to have the proper tick formatting based on the type of component . <EoL>
<BoL> Determines the data limits for the data in a set of artists . <EoL>
<BoL> A decorator to build a CallbackProperty . <EoL>
<BoL> Create a custom interactive data viewer . <EoL>
<BoL> Helper for : func : ` ~matplotlib.pyplot.gci ` ; do not use elsewhere . <EoL>
<BoL> Returns the patch used to draw the background of the axes . It is also used as the clipping path for any data elements on the axes . <EoL>
<BoL> Returns a dict whose keys are spine names and values are Line2D or Patch instances . Each element is used to draw a spine of the axes . <EoL>
<BoL> Save information required to reproduce the current view . <EoL>
<BoL> Make a twinx axes of self . This is used for twinx and twiny . <EoL>
<BoL> Callback for processing changes to axis units . <EoL>
<BoL> Look for unit *kwargs* and update the axis instances as necessary <EoL>
<BoL> Set the current image . <EoL>
<BoL> set the boilerplate props for artists added to axes <EoL>
<BoL> set the *_xaxis_transform* , *_yaxis_transform* , *transScale* , *transData* , *transLimits* and *transAxes* transformations . <EoL>
<BoL> private version of set_position . Call this internally to get the same functionality of ` get_position ` , but not to take the axis out of the constrained_layout hierarchy . <EoL>
<BoL> Set the offset for the title either from rcParams [ 'axes.titlepad ' ] or from set_title kwarg `` pad `` . <EoL>
<BoL> Apply a previously saved view . <EoL>
<BoL> Figures out the data limit of the given line , updating self.dataLim . <EoL>
<BoL> update the data limits for patch *p* <EoL>
<BoL> Update the title position based on the bounding box enclosing all the ticklabels and x-axis spine and xlabel ... <EoL>
<BoL> Raise ValueError if converted limits are non-finite . <EoL>
<BoL> Plot the autocorrelation of *x* . <EoL>
<BoL> Add any : class : ` ~matplotlib.artist.Artist ` to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.axes.Axesbase ` instance as a child to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.collections.Collection ` instance to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.container.Container ` instance to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.image.AxesImage ` to the axes . <EoL>
<BoL> Add a : class : ` ~matplotlib.lines.Line2D ` to the list of plot lines <EoL>
<BoL> Add a : class : ` ~matplotlib.patches.Patch ` *p* to the list of axes patches ; the clipbox will be set to the Axes clipping box . If the transform is not set , it will be set to : attr : ` transData ` . <EoL>
<BoL> Add a : class : ` ~matplotlib.table.Table ` instance to the list of axes tables <EoL>
<BoL> Adjust the Axes for a specified data aspect ratio . <EoL>
<BoL> Add an arrow to the axes . <EoL>
<BoL> Autoscale the axis view to the data ( toggle ) . <EoL>
<BoL> Autoscale the view limits using the data limits . <EoL>
<BoL> Add a horizontal line across the axis . <EoL>
<BoL> Add a horizontal span ( rectangle ) across the axis . <EoL>
<BoL> Convenience method to get or set some axis properties . <EoL>
<BoL> Add a vertical line across the axes . <EoL>
<BoL> Add a vertical span ( rectangle ) across the axes . <EoL>
<BoL> % ( barbs_doc ) s <EoL>
<BoL> Loads properties in the dictionary from rc file if not already in the dictionary <EoL>
<BoL> Plot a horizontal sequence of rectangles . <EoL>
<BoL> Return *True* if this axes supports any pan/zoom button functionality . <EoL>
<BoL> Return *True* if this axes supports the zoom box button functionality . <EoL>
<BoL> Clear the current axes . <EoL>
<BoL> Clear the axes . <EoL>
<BoL> Plot the coherence between *x* and *y* . <EoL>
<BoL> Test whether the mouse event occurred in the axes . <EoL>
<BoL> Returns *True* if the point ( tuple of x , y ) is inside the axes ( the area defined by the its patch ) . A pixel coordinate is required . <EoL>
<BoL> Called when the mouse moves during a pan operation . <EoL>
<BoL> Draw everything ( plot lines , axes , labels ) <EoL>
<BoL> This method can only be used after an initial draw which caches the renderer . It is used to efficiently update Axes data ( axis ticks , labels , etc are not updated ) <EoL>
<BoL> Called when a pan operation completes ( when the mouse button is up . ) <EoL>
<BoL> Plot filled polygons . <EoL>
<BoL> Return a format string formatting the *x* , *y* coord <EoL>
<BoL> Return *x* string formatted . This function will use the attribute self.fmt_xdata if it is callable , else will fall back on the xaxis major formatter <EoL>
<BoL> Return y string formatted . This function will use the : attr : ` fmt_ydata ` attribute if it is callable , else will fall back on the yaxis major formatter <EoL>
<BoL> Get the anchor location . <EoL>
<BoL> Get whether autoscaling is applied for both axes on plot commands <EoL>
<BoL> Get whether autoscaling for the x-axis is applied on plot commands <EoL>
<BoL> Get whether autoscaling for the y-axis is applied on plot commands <EoL>
<BoL> Return the axes_locator . <EoL>
<BoL> Get whether axis ticks and gridlines are above or below most artists . <EoL>
<BoL> eturn a list of child artists <EoL>
<BoL> Returns the aspect ratio of the raw data . <EoL>
<BoL> Returns the aspect ratio of the raw data in log scale . Will be used when both axis scales are in log . <EoL>
<BoL> Return a default list of artists that are used for the bounding box calculation . <EoL>
<BoL> Get the facecolor of the Axes . <EoL>
<BoL> Get whether the axes rectangle patch is drawn . <EoL>
<BoL> eturn a list of Axes images contained by the Axes <EoL>
<BoL> Return the ` Legend ` instance , or None if no legend is defined . <EoL>
<BoL> Return handles and labels for legend <EoL>
<BoL> Return a list of lines contained by the Axes <EoL>
<BoL> Get whether the axes responds to navigation commands <EoL>
<BoL> Get the navigation toolbar button status : 'PAN ' , 'ZOOM ' , or None <EoL>
<BoL> Get a copy of the axes rectangle as a ` .Bbox ` . <EoL>
<BoL> Return the zorder value below which artists will be rasterized . <EoL>
<BoL> Return a reference to the shared axes Grouper object for x axes . <EoL>
<BoL> Return a reference to the shared axes Grouper object for y axes . <EoL>
<BoL> Get an axes title . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` instance used by this artist . <EoL>
<BoL> get the axes bounding box in display space ; *args* and *kwargs* are empty <EoL>
<BoL> Return the XAxis instance . <EoL>
<BoL> Get the transformation used for drawing x-axis labels , which will add the given amount of padding ( in points ) between the axes and the label . The x-direction is in data coordinates and the y-direction is in axis coordinates . Returns a 3-tuple of the form : : <EoL>
<BoL> Get the transformation used for drawing the secondary x-axis labels , which will add the given amount of padding ( in points ) between the axes and the label . The x-direction is in data coordinates and the y-direction is in axis coordinates . Returns a 3-tuple of the form : : <EoL>
<BoL> Get the transformation used for drawing x-axis labels , ticks and gridlines . The x-direction is in data coordinates and the y-direction is in axis coordinates . <EoL>
<BoL> Return the lower and upper x-axis bounds , in increasing order . <EoL>
<BoL> Get the x grid lines as a list of ` Line2D ` instances . <EoL>
<BoL> Get the xlabel text string . <EoL>
<BoL> Return the x-axis view limits . <EoL>
<BoL> Get the major x tick labels . <EoL>
<BoL> Get the minor x tick labels . <EoL>
<BoL> Return the x-axis scale as string . <EoL>
<BoL> Get the x tick labels as a list of : class : ` ~matplotlib.text.Text ` instances . <EoL>
<BoL> Get the x tick lines as a list of ` Line2D ` instances . <EoL>
<BoL> Return the x ticks as a list of locations <EoL>
<BoL> Return the YAxis instance . <EoL>
<BoL> Get the transformation used for drawing y-axis labels , which will add the given amount of padding ( in points ) between the axes and the label . The x-direction is in axis coordinates and the y-direction is in data coordinates . Returns a 3-tuple of the form : : <EoL>
<BoL> Get the transformation used for drawing the secondary y-axis labels , which will add the given amount of padding ( in points ) between the axes and the label . The x-direction is in axis coordinates and the y-direction is in data coordinates . Returns a 3-tuple of the form : : <EoL>
<BoL> Get the transformation used for drawing y-axis labels , ticks and gridlines . The x-direction is in axis coordinates and the y-direction is in data coordinates . <EoL>
<BoL> Return the lower and upper y-axis bounds , in increasing order . <EoL>
<BoL> Get the y grid lines as a list of ` Line2D ` instances . <EoL>
<BoL> Get the ylabel text string . <EoL>
<BoL> Return the y-axis view limits . <EoL>
<BoL> Get the major y tick labels . <EoL>
<BoL> Get the minor y tick labels . <EoL>
<BoL> Return the x-axis scale as string . <EoL>
<BoL> Get the y tick labels as a list of : class : ` ~matplotlib.text.Text ` instances . <EoL>
<BoL> Get the y tick lines as a list of ` Line2D ` instances . <EoL>
<BoL> Return the y ticks as a list of locations <EoL>
<BoL> Configure the grid lines . <EoL>
<BoL> Return *True* if any artists have been added to axes . <EoL>
<BoL> Return *True* if the given *mouseevent* ( in display coords ) is in the Axes <EoL>
<BoL> Add an inset indicator rectangle to the axes based on the axis limits for an *inset_ax* and draw connectors between *inset_ax* and the rectangle . <EoL>
<BoL> Invert the x-axis . <EoL>
<BoL> Invert the y-axis . <EoL>
<BoL> Place a legend on the axes . <EoL>
<BoL> Control behavior of tick locators . <EoL>
<BoL> Make a plot with log scaling on both the x and y axis . <EoL>
<BoL> Set or retrieve autoscaling margins . <EoL>
<BoL> Plot the values of a 2D matrix or array as color-coded image . <EoL>
<BoL> Remove minor ticks from the axes . <EoL>
<BoL> Display minor ticks on the axes . <EoL>
<BoL> Trigger pick event <EoL>
<BoL> Plot y versus x as lines and/or markers . <EoL>
<BoL> This method can only be used after an initial draw which caches the renderer . It is used to efficiently update Axes data ( axis ticks , labels , etc are not updated ) <EoL>
<BoL> Recompute the data limits based on current artists . If you want to exclude invisible artists from the calculation , set `` visible_only=True `` <EoL>
<BoL> Reset the active position to the original position . <EoL>
<BoL> Make a plot with log scaling on the x axis . <EoL>
<BoL> Make a plot with log scaling on the y axis . <EoL>
<BoL> Define which parameter the Axes will change to achieve a given aspect . <EoL>
<BoL> Set the alpha value used for blending - not supported on all backends . <EoL>
<BoL> Define the anchor location . <EoL>
<BoL> Set the aspect of the axis scaling , i.e . the ratio of y-unit to x-unit . <EoL>
<BoL> Set whether autoscaling is applied on plot commands <EoL>
<BoL> Set whether autoscaling for the x-axis is applied on plot commands <EoL>
<BoL> Set whether autoscaling for the y-axis is applied on plot commands <EoL>
<BoL> Set the axes locator . <EoL>
<BoL> Turn the x- and y-axis off . <EoL>
<BoL> Turn the x- and y-axis on . <EoL>
<BoL> Set whether axis ticks and gridlines are above or below most artists . <EoL>
<BoL> Set the facecolor of the Axes . <EoL>
<BoL> Set the ` .Figure ` for this ` .Axes ` . <EoL>
<BoL> Set whether the axes rectangle patch is drawn . <EoL>
<BoL> Set whether the axes responds to navigation toolbar commands <EoL>
<BoL> Set the navigation toolbar button status ; <EoL>
<BoL> Set the axes position . <EoL>
<BoL> Set the property cycle of the Axes . <EoL>
<BoL> Set the lower and upper numerical bounds of the x-axis . <EoL>
<BoL> Set the label for the x-axis . <EoL>
<BoL> Set padding of X data limits prior to autoscaling . <EoL>
<BoL> Set the x-axis scale . <EoL>
<BoL> Set the x-tick labels with list of string labels . <EoL>
<BoL> Set the x ticks with list of *ticks* <EoL>
<BoL> Set the lower and upper numerical bounds of the y-axis . <EoL>
<BoL> Set the label for the y-axis . <EoL>
<BoL> Set padding of Y data limits prior to autoscaling . <EoL>
<BoL> Set the y-axis scale . <EoL>
<BoL> Set the y-tick labels with list of strings labels . <EoL>
<BoL> Set the y ticks with list of *ticks* <EoL>
<BoL> Called when a pan operation has started . <EoL>
<BoL> Make a step plot . <EoL>
<BoL> Add a table to the current axes . <EoL>
<BoL> Add text to the axes . <EoL>
<BoL> Change the appearance of ticks , tick labels , and gridlines . <EoL>
<BoL> Create a twin Axes sharing the xaxis <EoL>
<BoL> Create a twin Axes sharing the yaxis <EoL>
<BoL> Extend the ` ~.Axes.dataLim ` BBox to include the given points . <EoL>
<BoL> Extend the ` ~.Axes.datalim ` BBox to include the given ` ~matplotlib.transforms.Bbox ` . <EoL>
<BoL> Sets up x-axis ticks and labels that treat the x data as dates . <EoL>
<BoL> Return whether the x-axis is inverted . <EoL>
<BoL> Sets up y-axis ticks and labels that treat the y data as dates . <EoL>
<BoL> Return whether the y-axis is inverted . <EoL>
<BoL> Clear the cache , forcing the a full re-render <EoL>
<BoL> Temporarily disable cache re-renders . Render results are still saved , for when enable ( ) is next called <EoL>
<BoL> Enable cached-rerenders <EoL>
<BoL> Permanently disable this cache , and restore normal Axes render behavior <EoL>
<BoL> Return whether the image would be better drawn unsampled . <EoL>
<BoL> draw unsampled image . The renderer should support a draw_image method with scale parameter . <EoL>
<BoL> Add an entry to a dictionary of boolean flags that are set to True when the mappable is changed . <EoL>
<BoL> Autoscale the scalar limits on the norm instance using the current array <EoL>
<BoL> Autoscale the scalar limits on the norm instance using the current array , changing only limits that are None <EoL>
<BoL> Returns ` True ` if the image can be composited with its neighbors . <EoL>
<BoL> Call this whenever the mappable is changed so observers can update state <EoL>
<BoL> If mappable has changed since the last check , return True ; else return False <EoL>
<BoL> Test whether the mouse event occurred within the image . <EoL>
<BoL> Get the cursor data for a given event <EoL>
<BoL> Get the image extent : left , right , bottom , top <EoL>
<BoL> Return whether the resize filter normalizes the weights . <EoL>
<BoL> Return the filterrad setting . <EoL>
<BoL> Return the interpolation method the image uses when resizing . <EoL>
<BoL> Return the image resample boolean . <EoL>
<BoL> Get the numrows , numcols of the input image <EoL>
<BoL> Set the alpha value used for blending - not supported on all backends . <EoL>
<BoL> Retained for backwards compatibility - use set_data instead . <EoL>
<BoL> set the norm limits for image scaling ; if *vmin* is a length2 sequence , interpret it as `` ( vmin , vmax ) `` which is used to support setp <EoL>
<BoL> set the colormap for luminance data <EoL>
<BoL> Set the image array . <EoL>
<BoL> extent is data axes ( left , right , bottom , top ) for making image plots <EoL>
<BoL> Set whether the resize filter normalizes the weights . <EoL>
<BoL> Set the resize filter radius only applicable to some interpolation schemes -- see help for imshow <EoL>
<BoL> Set the interpolation method the image uses when resizing . <EoL>
<BoL> Set the normalization instance . <EoL>
<BoL> Set whether or not image resampling is used . <EoL>
<BoL> Return a normalized rgba array corresponding to *x* . <EoL>
<BoL> Write the image to png file with fname <EoL>
<BoL> Internal helper function to broadcast + scale ls/lw <EoL>
<BoL> Point prep for drawing and hit testing <EoL>
<BoL> Call this whenever the mappable is changed to notify all the callbackSM listeners to the 'changed ' signal <EoL>
<BoL> Test whether the mouse event occurred in the collection . <EoL>
<BoL> Converts a given mesh into a sequence of : class : ` matplotlib.path.Path ` objects for easier rendering by backends that do not directly support quadmeshes . <EoL>
<BoL> Converts a given mesh into a sequence of triangles , each point with its own color . This is useful for experiments using ` draw_qouraud_triangle ` . <EoL>
<BoL> Return the current hatching pattern . <EoL>
<BoL> Returns how offsets are applied for the collection . <EoL>
<BoL> Return the offsets for the collection . <EoL>
<BoL> Set the alpha tranparencies of the collection . *alpha* must be a float or *None* . <EoL>
<BoL> Set the antialiasing state for rendering . <EoL>
<BoL> Set the image array from numpy array *A* . <EoL>
<BoL> Set the capstyle for the collection . The capstyle can only be set globally for all elements in the collection <EoL>
<BoL> Set both the edgecolor and the facecolor . <EoL>
<BoL> Set the edgecolor ( s ) of the collection . *c* can be a matplotlib color spec ( all patches have same color ) , or a sequence of specs ; if it is a sequence the patches will cycle through the sequence . <EoL>
<BoL> Set the facecolor ( s ) of the collection . *c* can be a matplotlib color spec ( all patches have same color ) , or a sequence of specs ; if it is a sequence the patches will cycle through the sequence . <EoL>
<BoL> Set the hatching pattern <EoL>
<BoL> Set the joinstyle for the collection . The joinstyle can only be set globally for all elements in the collection . <EoL>
<BoL> Set the linestyle ( s ) for the collection . <EoL>
<BoL> Set the linewidth ( s ) for the collection . *lw* can be a scalar or a sequence ; if it is a sequence the patches will cycle through the sequence <EoL>
<BoL> Set how offsets are applied . <EoL>
<BoL> Set the offsets for the collection . *offsets* can be a scalar or a sequence . <EoL>
<BoL> Set the pick radius used for containment tests . <EoL>
<BoL> If the scalar mappable array is not none , update colors from scalar data <EoL>
<BoL> Return the device and data coordinates for a box slightly inset from the edge of an axes instance <EoL>
<BoL> : param default : The initial value for the property <EoL>
<BoL> Add a callback to a specific instance that manages this property <EoL>
<BoL> Remove all callbacks on this property . <EoL>
<BoL> Disable callbacks for a specific instance <EoL>
<BoL> Enable previously-disabled callbacks for a specific instance <EoL>
<BoL> Call all callback functions with the current value <EoL>
<BoL> Remove a previously-added callback <EoL>
<BoL> Method to use as a decorator , to mimic @ property.setter <EoL>
<BoL> Attach a callback function to a property in an instance <EoL>
<BoL> Given a function/method , this will automatically wrap a method using weakref to avoid circular references . <EoL>
<BoL> Temporarily ignore any callbacks from one or more callback properties <EoL>
<BoL> Remove a callback function from a property in an instance <EoL>
<BoL> Return None <EoL>
<BoL> Return true , if the named module is a package . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Do basic configuration for the logging system . <EoL>
<BoL> Run a python script and exit . <EoL>
<BoL> Instantiate a splash screen <EoL>
<BoL> Load data files and return a list of datasets <EoL>
<BoL> Parse argument list , check validityusage : % prog [ options ] [ FILE FILE ... ] <EoL>
<BoL> Check for input errors <EoL>
<BoL> Load plugin referred to by name 'plugin ' <EoL>
<BoL> Quickly send python variables to Glue for visualization . <EoL>
<BoL> Build a set of all Matplotlib artists in a Figure <EoL>
<BoL> Given a sequence of colors , return the alpha blended color . <EoL>
<BoL> Bottleneck can only take integer axis , not tuple , so this function takes all the axes to be operated on and combines them into the first dimension of the array so that we can then use axis=0 <EoL>
<BoL> Create a view into the array with the given shape and strides . <EoL>
<BoL> Return ` True ` if the array is sorted , ` False ` otherwise . <EoL>
<BoL> Given the shape of an n-dimensional array , and the maximum number of elements in a chunk , return the largest chunk shape to use for iteration . <EoL>
<BoL> Find the shortest format that can be used to represent all values in an array such that all the string representations are different . <EoL>
<BoL> Lookup which index in items each data value is equal to <EoL>
<BoL> Convert a list/array of numbers into a nice list of strings <EoL>
<BoL> Return the unique elements of the array U , as well as the index array I such that U [ I ] == array <EoL>
<BoL> Convert a string to a legal python variable name <EoL>
<BoL> Set up caching for an axes object . <EoL>
<BoL> Non-GUI version of the decorator in glue.utils.qt.decorators . <EoL>
<BoL> Decorator that globally defers all Agg canvas draws until function exit . <EoL>
<BoL> Quickly estimate percentiles in an array , using a downsampled version <EoL>
<BoL> Look up an object via its module string ( e.g. , 'glue.core.data.Data ' ) <EoL>
<BoL> The Matplotlib datalim , autoscaling , locators etc work with scalars which are the units converted to floats given the current unit . The converter may be passed these floats , or arrays of them , even when units are set . <EoL>
<BoL> Make sure margins of axes stay fixed . <EoL>
<BoL> Find the newly-added artists in a figure <EoL>
<BoL> Calculate the contour that passes through ( x , y ) in data <EoL>
<BoL> Remove a collection of matplotlib artists from a scene <EoL>
<BoL> Return a set of views progressively zoomed out of input at roughly constant pixel count <EoL>
<BoL> Like functools.partial , this returns a function which , when called , calls `` func ( *args , **kwargs ) `` . <EoL>
<BoL> Get all the values in a : class : ` queue.Queue ` object and return a list . <EoL>
<BoL> Close session on delete <EoL>
<BoL> GMail SMTP connection <EoL>
<BoL> Close SMTP connection <EoL>
<BoL> Connect to GMail SMTP service using smtplib <EoL>
<BoL> Check is session connected - initially by checking session instance and then sending NOOP to validate connection <EoL>
<BoL> message : email.Message instance rcpt : List of recipients ( normally parsed from To/Cc/Bcc fields ) <EoL>
<BoL> GMail SMTP connection worker <EoL>
<BoL> Close down background worker <EoL>
<BoL> message : email.Message instance rcpt : List of recipients ( normally parsed from To/Cc/Bcc fields ) <EoL>
<BoL> Create MIME attachment <EoL>
<BoL> Guess charset - assume ascii for text and force utf-8 for unicode ( email.mime classes take care of encoding ) <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Return a list of ( REALNAME , EMAIL ) for each fieldvalue . <EoL>
<BoL> Returns a string suitable for RFC 2822 compliant Message-ID , e.g : <EoL>
<BoL> Encode the message 's payload in Base64 . <EoL>
<BoL> Guess the type of a file based on its URL . <EoL>
<BoL> Bind an event to an event handler . <EoL>
<BoL> A convenience wrapper for : meth : ` ConvertDialogToPixels ` . <EoL>
<BoL> Schedules the window to be destroyed in the near future . This should be used whenever Destroy could happen too soon , such as when there may still be events for this window or its children waiting in the event queue . <EoL>
<BoL> Disconnects the event handler binding for event from ` self ` . Returns `` True `` if successful . <EoL>
<BoL> Can be used to test if the C++ part of the window still exists , with code like this : : if theWindow : doSomething ( ) <EoL>
<BoL> Collect all of the required information from the config screen and build a CLI string which can be used to invoke the client program <EoL>
<BoL> Chooses the appropriate layout navigation component based on user prefs <EoL>
<BoL> ! Experimental ! Calls out to the client code requesting seed values to use in the UI ! Experimental ! <EoL>
<BoL> Close the program after confirming <EoL>
<BoL> Cleanup the top level WxFrame and shutdown the process <EoL>
<BoL> Display the appropriate screen based on the success/fail of the host program <EoL>
<BoL> Return the user to the settings screen for further editing <EoL>
<BoL> Verify user input and kick off the client 's program if valid <EoL>
<BoL> Displays a scary message and then force-quits the executing client code if the user accepts <EoL>
<BoL> Merge all maps left to right <EoL>
<BoL> Returns a new list with all falsy values removed <EoL>
<BoL> If the child window that gets the focus is not fully visible , this handler will try to scroll enough to see it . <EoL>
<BoL> Scroll the panel so that the specified child window is in view . <EoL>
<BoL> chunk the widgets up into groups based on their sizing hints <EoL>
<BoL> Messily builds the ( potentially ) nested and grouped layout <EoL>
<BoL> Convert a JSON description of a widget into a WxObject <EoL>
<BoL> Conditionally disabled/enables form fields based on the current section in the radio group <EoL>
<BoL> Instantiate the Gooey Widgets that are used within the RadioGroup <EoL>
<BoL> Checkboxes are hidden when inside of a RadioGroup as a selection of the Radio button is an implicit selection of the Checkbox . As such , we have to manually `` check '' any checkbox as needed . <EoL>
<BoL> Applies concat to the result of applying f to colls <EoL>
<BoL> eturns the value in a nested dict <EoL>
<BoL> Build a map from the collection keyed off of f e.g . [ { id:1 , .. } , { id:2 , ... } ] = > { 1 : { id:1 , ... } , 2 : { id:2 , ... } } <EoL>
<BoL> Append the text to the main TextCtrl . <EoL>
<BoL> Choose the best font face available given the user options <EoL>
<BoL> Force wx.Modern style to support legacy monospace_display param when present <EoL>
<BoL> Event Handler for console updates coming from the client 's program <EoL>
<BoL> value , disable_animation=False : param args : : param kwargs : : return : <EoL>
<BoL> Return the currently visible config screen <EoL>
<BoL> Return the currently active 'group ' i.e . the root SubParser <EoL>
<BoL> Hide/show configuration panels based on the currently selected option in the sidebar <EoL>
<BoL> Execute f only if value is present and not None <EoL>
<BoL> Attempt to run the user supplied validation function <EoL>
<BoL> Return first occurrence matching f , otherwise None <EoL>
<BoL> Calculates the final progress value found by the regex <EoL>
<BoL> Runs the user-supplied progress calculation rule <EoL>
<BoL> Finds progress information in the text using the user-supplied regex and calculation instructions <EoL>
<BoL> Reads the stdout of ` process ` and forwards lines and progress to any interested subscribers <EoL>
<BoL> Copy-on-write associates a value in a dict <EoL>
<BoL> Coarse grain UI locking to avoid glitchy UI updates <EoL>
<BoL> Returns str ( option_string * DropDown Value ) e.g . -vvvvv <EoL>
<BoL> Open and return the supplied json file <EoL>
<BoL> Sends a gooey-seed-ui request to the client program it retrieve dynamically generated defaults with which to seed the UI <EoL>
<BoL> Attemps to safely coalesce the default value down to a valid JSON type . <EoL>
<BoL> check if any actions ( a ) are present in actions ( b ) <EoL>
<BoL> Recursively extract argument groups and associated actions from ParserGroup objects <EoL>
<BoL> action with choices supplied <EoL>
<BoL> _actions which are of type _CountAction <EoL>
<BoL> _actions which are either storeconst , store_bool , etc.. <EoL>
<BoL> _actions either not possessing the ` required ` flag or implicitly optional through ` nargs ` being '* ' or ' ? ' <EoL>
<BoL> _actions possessing the ` required ` flag and not implicitly optional through ` nargs ` being '* ' or ' ? ' <EoL>
<BoL> actions which are general `` store '' instructions . e.g . anything which has an argument style like : $ script.py -f myfilename.txt <EoL>
<BoL> Iterate over name , parser pairs <EoL>
<BoL> Copy-on-write associates a value in a nested dict <EoL>
<BoL> Identity function always returns the supplied argument <EoL>
<BoL> Return a map from keys to values <EoL>
<BoL> Returns a default httplib2.Http instance . <EoL>
<BoL> Reset cached lxml objects which could not be pickled . <EoL>
<BoL> Copy the state of another ` Grab ` instance . <EoL>
<BoL> If css path is not found then raise ` DataNotFound ` exception . <EoL>
<BoL> If xpath path is not found then raise ` DataNotFound ` exception . <EoL>
<BoL> Set random proxy from proxylist . <EoL>
<BoL> Clear all remembered cookies . <EoL>
<BoL> Create clone of Grab instance . <EoL>
<BoL> Build headers which sends typical browser . <EoL>
<BoL> Return True if at least one element with specified css path exists . <EoL>
<BoL> Find all elements which match given css path . <EoL>
<BoL> Get first element which matches the given css path or raise DataNotFound . <EoL>
<BoL> Get normalized text of node which matches the css path . <EoL>
<BoL> Analyze request config and find which request method will be used . <EoL>
<BoL> Fetch document located at `` url `` and save to to `` location `` . <EoL>
<BoL> Make clone of current config . <EoL>
<BoL> Find link in response body which href value matches `` href_pattern `` . <EoL>
<BoL> Find link matched the given regular expression in response body . <EoL>
<BoL> Go to `` url `` <EoL>
<BoL> Configure grab instance with external config object . <EoL>
<BoL> Send request details to logging system . <EoL>
<BoL> Make url absolute using previous request url as base url . <EoL>
<BoL> Configure all things to make real network request . This method is called before doing real request via transport extension . <EoL>
<BoL> Process result of real request performed via transport extension . <EoL>
<BoL> Perform network request . <EoL>
<BoL> Reset all attributes which could be modified during previous request or which is not initialized yet if this is the new Grab instance . <EoL>
<BoL> Save dump of failed request for debugging . <EoL>
<BoL> Setting up Grab instance configuration . <EoL>
<BoL> Setup ` response ` object without real network requests . <EoL>
<BoL> Strip tags from the HTML content . <EoL>
<BoL> Submit current form . <EoL>
<BoL> : param req : object with httplib.Request interface Actually , it have to have ` url ` and ` headers ` attributes <EoL>
<BoL> Load cookies from the file . <EoL>
<BoL> Dump all cookies to file . <EoL>
<BoL> Add new cookie or replace existing cookie with same parameters . <EoL>
<BoL> Reset cached lxml objects which could not be pickled . <EoL>
<BoL> Save response in temporary file and open it in GUI browser . <EoL>
<BoL> Set the default form . <EoL>
<BoL> Clone the Response object . <EoL>
<BoL> Detect charset of the response . <EoL>
<BoL> Return fields of default form . <EoL>
<BoL> Parse headers . <EoL>
<BoL> Return value of parameter in query string . <EoL>
<BoL> If ` rex ` expression is not found then raise ` DataNotFound ` exception . <EoL>
<BoL> Search the regular expression in response body . <EoL>
<BoL> Search regular expression in response body and return content of first matching group . <EoL>
<BoL> Save response body to file . <EoL>
<BoL> Save response body into file with special path builded from hash . That allows to lower number of files per directory . <EoL>
<BoL> Set the value of form element by its ` name ` attribute . <EoL>
<BoL> Set the value of form element by its ` id ` attribute . <EoL>
<BoL> Set the value of form element by its number in the form <EoL>
<BoL> Set the value of form element by xpath <EoL>
<BoL> If ` anchor ` is not found then raise ` DataNotFound ` exception . <EoL>
<BoL> If no ` anchors ` were found then raise ` DataNotFound ` exception . <EoL>
<BoL> Search the substring in response body . <EoL>
<BoL> Return response body as unicode string . <EoL>
<BoL> Return result of urlsplit function applied to response url . <EoL>
<BoL> Return next proxy <EoL>
<BoL> Return random proxy <EoL>
<BoL> Load proxy list from configured proxy source <EoL>
<BoL> Load proxy list from file <EoL>
<BoL> Load proxy list from python list <EoL>
<BoL> Load proxy list from web document <EoL>
<BoL> Set the proxy source and use it to load proxy list <EoL>
<BoL> Return number of proxies in the list <EoL>
<BoL> Copy grab config with correct handling of mutable config values . <EoL>
<BoL> Find url of < base > tag . <EoL>
<BoL> Normalize unicode/byte string to byte string . <EoL>
<BoL> Accept sequence of ( key , value ) paris or dict and convert each value into bytestring . <EoL>
<BoL> Parse proxy details from the raw text line . <EoL>
<BoL> Set a cookie , without checking whether or not it should be set . <EoL>
<BoL> cookielib has no legitimate use for this method ; add it back if you find one . <EoL>
<BoL> Make a MockResponse for ` cookielib ` to read . : param headers : a httplib.HTTPMessage or analogous carrying the headers <EoL>
<BoL> Creates ` cookielib.Cookie ` instance <EoL>
<BoL> This is a decorator which can be used to mark functions as deprecated . It will result in a warning being emitted when the function is used . <EoL>
<BoL> Extract text content of the ` node ` and all its descendants . <EoL>
<BoL> Normalize unicode/byte string to unicode string . <EoL>
<BoL> Convert all HTML entities into their unicode representations . <EoL>
<BoL> Find value of redirect url from http-equiv refresh meta tag . <EoL>
<BoL> Accept string or compiled regular expression object . <EoL>
<BoL> Replace sequence of space-chars with one space char . <EoL>
<BoL> Read the byte order mark in the text , if present , and return the encoding represented by the BOM and the BOM . <EoL>
<BoL> Convert sequence of items into bytestring which could be submitted in POST or GET request . <EoL>
<BoL> Iterate over proxy servers found in the raw data <EoL>
<BoL> A shortcut for self._formatter.render ( ) <EoL>
<BoL> Pre-render fields before rendering the template . <EoL>
<BoL> Render the given item <EoL>
<BoL> Indent the given block of text by indent*4 spaces <EoL>
<BoL> Trim text of common , leading whitespace . <EoL>
<BoL> Remove all items x where predicate ( x , d [ x ] ) <EoL>
<BoL> Given a string , evaluate escape sequences starting with backslashes as they would be evaluated in Python source code . For a list of these sequences , see : https : //docs.python.org/3/reference/lexical_analysis.html <EoL>
<BoL> Yield the DOT source code line by line ( as graph or subgraph ) . <EoL>
<BoL> The DOT source code as string . <EoL>
<BoL> Return assembled DOT a_list string . <EoL>
<BoL> Return assembled DOT attribute list string . <EoL>
<BoL> Return DOT edge statement node_id from string , quote if needed . <EoL>
<BoL> Start the right viewer based on file format and platform . <EoL>
<BoL> Open filepath with its default application ( mac ) . <EoL>
<BoL> Open filepath in the user 's preferred application ( linux , freebsd ) . <EoL>
<BoL> Start filepath with its associated application ( windows ) . <EoL>
<BoL> Add a general or graph/node/edge attribute statement . <EoL>
<BoL> Reset content to an empty body , clear graph/node/egde_attr mappings . <EoL>
<BoL> Return a copied instance of the object . <EoL>
<BoL> Create an edge between two nodes . <EoL>
<BoL> Create a bunch of edges . <EoL>
<BoL> Create a node . <EoL>
<BoL> Return the source piped through the Graphviz layout command . <EoL>
<BoL> Save the source to file and render with the Graphviz engine . <EoL>
<BoL> Save the DOT source to file . Ensure the file ends with a newline . <EoL>
<BoL> Save the source to file , open the rendered result in a viewer . <EoL>
<BoL> Return args list for `` subprocess.Popen `` and name of the rendered file . <EoL>
<BoL> Return `` data `` piped through Graphviz `` engine `` into `` format `` . <EoL>
<BoL> Render file with Graphviz `` engine `` into `` format `` , return result filename . <EoL>
<BoL> Return the version number tuple from the `` stderr `` output of `` dot -V `` . <EoL>
<BoL> Open filepath with its default viewing application ( platform-specific ) . <EoL>
<BoL> Return copy of `` s `` that will not treat `` ' < ... > ' `` as DOT HTML string in quoting . <EoL>
<BoL> Return a decorator doing `` setattr ( object , name ) `` with its argument . <EoL>
<BoL> Return an iterator over the `` mapping `` items , sort if it 's a plain dict . <EoL>
<BoL> Recursively create directories up to the path of `` filename `` as needed . <EoL>
<BoL> Prepares request based on parameter passed to constructor and optional `` kwargs `` ` . Then sends request and saves response to : attr : ` response ` <EoL>
<BoL> Concurrently converts a generator object of Requests to a generator of Responses . <EoL>
<BoL> Concurrently converts a list of Requests to Responses . <EoL>
<BoL> Sends the request object using the specified pool . <EoL>
<BoL> Executes function f with given arguments and writes return value to field ret . <EoL>
<BoL> dumps pickleable object into bz2 compressed string <EoL>
<BoL> loads pickleable object from bz2 compressed string <EoL>
<BoL> Enable JobMonitor to be used as a context manager . <EoL>
<BoL> Gracefully handle exceptions by terminating all jobs , and closing sockets . <EoL>
<BoL> set up socket <EoL>
<BoL> checks for all jobs if they are done <EoL>
<BoL> serves input and output data <EoL>
<BoL> check if jobs are alive and determine cause of death if not <EoL>
<BoL> For an active session , append new job based on information stored in job object . Also sets job.id to the ID of the job on the grid . <EoL>
<BoL> Can not pickle method instances , so fake a function . Used by _process_jobs_locally <EoL>
<BoL> Infinitely loops and sends information about the currently running job back to the `` JobMonitor `` . <EoL>
<BoL> Local execution using the package multiprocessing , if present <EoL>
<BoL> Resubmit a failed job . <EoL>
<BoL> Send out job status email <EoL>
<BoL> heuristic to determine if the job should be resubmitted <EoL>
<BoL> send out success email <EoL>
<BoL> send out diagnostic email <EoL>
<BoL> Parse the command line inputs and call _run_job <EoL>
<BoL> Execute the pickled job and produce pickled output . <EoL>
<BoL> simple code to send messages back to host ( and get a reply back ) <EoL>
<BoL> : param pid : Process ID for job whose CPU load we 'd like to check . : type pid : int : param heart_pid : ID of the heartbeat process , which will not be counted toward total . : type heart_pid : int <EoL>
<BoL> Determines the status of the current worker and its machine <EoL>
<BoL> : param pid : Process ID for job whose memory usage we 'd like to check . : type pid : int : param heart_pid : ID of the heartbeat process , which will not be counted toward total . : type heart_pid : int <EoL>
<BoL> Implements authentication by passing metadata to a callback . <EoL>
<BoL> Passes to the gRPC runtime authentication metadata for an RPC . <EoL>
<BoL> Registers a callback to be called on RPC termination . <EoL>
<BoL> Cancels the RPC . <EoL>
<BoL> Accesses the status code sent by the server . <EoL>
<BoL> Accesses the details sent by the server . <EoL>
<BoL> Accesses the initial metadata sent by the server . <EoL>
<BoL> Describes whether the RPC is active or has terminated . <EoL>
<BoL> Describes the length of allowed time remaining for the RPC . <EoL>
<BoL> Accesses the trailing metadata sent by the server . <EoL>
<BoL> Closes this Channel and releases all resources held by it . <EoL>
<BoL> Subscribe to this Channel 's connectivity state machine . <EoL>
<BoL> Unsubscribes a subscribed callback from this Channel 's connectivity . <EoL>
<BoL> Adds a function to be called at completion of the computation . <EoL>
<BoL> Attempts to cancel the computation . <EoL>
<BoL> Describes whether the computation was cancelled . <EoL>
<BoL> Describes whether the computation has taken place . <EoL>
<BoL> Return the exception raised by the computation . <EoL>
<BoL> Returns the result of the computation or raises its exception . <EoL>
<BoL> Describes whether the computation is taking place . <EoL>
<BoL> Access the traceback of the exception raised by the computation . <EoL>
<BoL> Returns the handler for servicing the RPC . <EoL>
<BoL> Registers GenericRpcHandlers with this Server . <EoL>
<BoL> Opens an insecure port for accepting RPCs . <EoL>
<BoL> Opens a secure port for accepting RPCs . <EoL>
<BoL> Starts this Server . <EoL>
<BoL> Stops this Server . <EoL>
<BoL> Intercepts incoming RPCs before handing them over to a handler . <EoL>
<BoL> Returns this service 's name . <EoL>
<BoL> Raises an exception to terminate the RPC with a non-OK status . <EoL>
<BoL> Raises an exception to terminate the RPC with a non-OK status . <EoL>
<BoL> Gets the auth context for the call . <EoL>
<BoL> Accesses the metadata from the sent by the client . <EoL>
<BoL> Identifies the peer that invoked the RPC being serviced . <EoL>
<BoL> Gets one or more peer identity ( s ) . <EoL>
<BoL> The auth property used to identify the peer . <EoL>
<BoL> Sends the initial metadata value to the client . <EoL>
<BoL> Sets the value to be used as status code upon RPC completion . <EoL>
<BoL> Sets the value to be used as detail string upon RPC completion . <EoL>
<BoL> Sends the trailing metadata for the RPC . <EoL>
<BoL> Intercepts a unary-unary invocation asynchronously . <EoL>
<BoL> Construct CallCredentials from an access token . <EoL>
<BoL> Creates a Future that tracks when a Channel is ready . <EoL>
<BoL> Compose multiple CallCredentials to make a new CallCredentials . <EoL>
<BoL> Compose a ChannelCredentials and one or more CallCredentials objects . <EoL>
<BoL> Creates an insecure Channel to a server . <EoL>
<BoL> Intercepts a channel through a set of interceptors . <EoL>
<BoL> Construct CallCredentials from an AuthMetadataPlugin . <EoL>
<BoL> Creates a GenericRpcHandler from RpcMethodHandlers . <EoL>
<BoL> Creates a secure Channel to a server . <EoL>
<BoL> Copies a spreadsheet . <EoL>
<BoL> Creates a new spreadsheet . <EoL>
<BoL> Deletes a spreadsheet . <EoL>
<BoL> Imports data into the first page of the spreadsheet . <EoL>
<BoL> Retrieve a list of permissions for a file . <EoL>
<BoL> Authorize client . <EoL>
<BoL> Opens a spreadsheet . <EoL>
<BoL> Opens a spreadsheet specified by ` key ` . <EoL>
<BoL> Opens a spreadsheet specified by ` url ` . <EoL>
<BoL> Opens all available spreadsheets . <EoL>
<BoL> Deletes a permission from a file . <EoL>
<BoL> Adds a new worksheet to a spreadsheet . <EoL>
<BoL> Lower-level method that directly calls ` spreadsheets.batchUpdate < https : //developers.google.com/sheets/api/reference/rest/v4/spreadsheets/batchUpdate > ` _ . <EoL>
<BoL> Deletes a worksheet from a spreadsheet . <EoL>
<BoL> Returns a worksheet with specified ` index ` . <EoL>
<BoL> Lists the spreadsheet 's permissions . <EoL>
<BoL> Remove permissions from a user or domain . <EoL>
<BoL> Share the spreadsheet with other accounts . <EoL>
<BoL> Lower-level method that directly calls ` spreadsheets.values.append < https : //developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append > ` _ . <EoL>
<BoL> Lower-level method that directly calls ` spreadsheets.values.clear < https : //developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/clear > ` _ . <EoL>
<BoL> Lower-level method that directly calls ` spreadsheets.values.get < https : //developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get > ` _ . <EoL>
<BoL> Lower-level method that directly calls ` spreadsheets.values.update < https : //developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/update > ` _ . <EoL>
<BoL> Returns a worksheet with specified ` title ` . <EoL>
<BoL> Returns a list of all : class : ` worksheets < gsperad.models.Worksheet > ` in a spreadsheet . <EoL>
<BoL> Returns an instance of a : class : ` gspread.models.Cell ` . <EoL>
<BoL> Adds colums to worksheet . <EoL>
<BoL> Adds rows to worksheet . <EoL>
<BoL> Adds a row to the worksheet and populates it with values . Widens the worksheet if there are more values than columns . <EoL>
<BoL> Returns an instance of a : class : ` gspread.models.Cell ` located at ` row ` and ` col ` column . <EoL>
<BoL> Clears all cells in the worksheet . <EoL>
<BoL> Returns a list of all values in column ` col ` . <EoL>
<BoL> Deletes the row from the worksheet at the specified index . <EoL>
<BoL> .. deprecated : : 2.0 <EoL>
<BoL> Finds the first cell matching the query . <EoL>
<BoL> Finds all cells matching the query . <EoL>
<BoL> Returns a list of lists containing all cells ' values as strings . <EoL>
<BoL> Returns a list of : class : ` Cell ` objects from a specified range . <EoL>
<BoL> Resizes the worksheet . Specify one of `` rows `` or `` cols `` . <EoL>
<BoL> Returns a list of all values in a ` row ` . <EoL>
<BoL> Updates the value of a cell . <EoL>
<BoL> Updates the value of a cell . <EoL>
<BoL> Updates many cells at once . <EoL>
<BoL> Renames the worksheet . <EoL>
<BoL> Login to Google API using OAuth2 credentials . This is a shortcut function which instantiates : class : ` gspread.client.Client ` and performs login right away . <EoL>
<BoL> Finds and returns first item in iterable for which func ( item ) is True . <EoL>
<BoL> Translates a cell 's address in A1 notation to a tuple of integers . <EoL>
<BoL> Decorator function casts wrapped arguments to A1 notation in range method calls . <EoL>
<BoL> Returns a list of numericised values from strings <EoL>
<BoL> Translates a row and column cell address to A1 notation . <EoL>
<BoL> Returns a value that depends on the input string : - Float if input can be converted to Float - Integer if input can be converted to integer - Zero if the input string is empty and empty2zero flag is set - The same input string , empty or not , otherwise . <EoL>
<BoL> Calculate gid of a worksheet from its wid . <EoL>
<BoL> \ Detect , check and parse proxy protocol . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Returns True if the extension is .pyc , False if .py and None if otherwise <EoL>
<BoL> Returns the code object , given a python file <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> \ Standard daemonization of a process . http : //www.svbug.com/documentation/comp.unix.programmer-FAQ/faq_2.html # SEC16 <EoL>
<BoL> Return the current date and time formatted for a message header . <EoL>
<BoL> set user and group of workers processes <EoL>
<BoL> Converts a string argument to a byte string <EoL>
<BoL> \ This is called pre-fork so it should n't do anything to the current process . If there 's a need to make process wide changes you 'll want to do that in `` self.init_process ( ) `` . <EoL>
<BoL> \ If you override this method in a subclass , the last statement in the function should be to call this method with super ( MyWorkerClass , self ) .init_process ( ) so that the `` run ( ) `` loop is initiated . <EoL>
<BoL> \ This is the mainloop of a worker process . You should override this method in a subclass to provide the intended behaviour for your particular evil schemes . <EoL>
<BoL> Override _close in your subclass to perform any necessary cleanup . <EoL>
<BoL> Renders the environment . <EoL>
<BoL> Resets the state of the environment and returns an initial observation . <EoL>
<BoL> Sets the seed for this env 's random number generator ( s ) . <EoL>
<BoL> Run one timestep of the environment 's dynamics . When end of episode is reached , you are responsible for calling ` reset ( ) ` to reset this environment 's state . <EoL>
<BoL> Compute the step reward . This externalizes the reward function and makes it dependent on an a desired goal and the one that was achieved . If you wish to include additional rewards that are independent of the goal , you can include the necessary values to derive it in info and compute it accordingly . <EoL>
<BoL> Return boolean specifying if x is a valid member of this space <EoL>
<BoL> Convert a JSONable data type to a batch of samples from this space . <EoL>
<BoL> Uniformly randomly sample a random element of this space <EoL>
<BoL> Convert a batch of samples from this space to a JSONable data type . <EoL>
<BoL> Instantiates an instance of the environment with appropriate kwargs <EoL>
<BoL> Methods renamed from '_method ' to 'method ' , render ( ) no longer has 'close ' parameter , close is a separate method . For backward compatibility , this makes it possible to work with unmodified environments . <EoL>
<BoL> Return string surrounded by appropriate terminal color codes to print colorized text . Valid colors : gray , red , green , yellow , blue , magenta , cyan , white , crimson <EoL>
<BoL> Set logging threshold on current logger . <EoL>
<BoL> Registers an object with a 'close ' method . <EoL>
<BoL> words - iterator or list <EoL>
<BoL> Get parameter names for the estimato <EoL>
<BoL> Fit a t-SNE embedding for a given data set . <EoL>
<BoL> Get parameters for this estimator . <EoL>
<BoL> Prepare the initial embedding which can be optimized as needed . <EoL>
<BoL> Set the parameters of this estimator . <EoL>
<BoL> Prepare a partial embedding which can be optimized . <EoL>
<BoL> Compute the affinities of new samples to the initial samples . <EoL>
<BoL> Compute the affinities of new samples to the initial samples . <EoL>
<BoL> Check and correct/truncate perplexities . <EoL>
<BoL> Change the perplexities of the affinity matrix . <EoL>
<BoL> Compute the affinities of new samples to the initial samples . <EoL>
<BoL> Change the perplexity of the affinity matrix . <EoL>
<BoL> Compute the affinities of new samples to the initial samples . <EoL>
<BoL> Dispatch to the right submethod depending on the chosen solver . <EoL>
<BoL> Fit the model by computing full SVD on X <EoL>
<BoL> Fit the model by computing truncated SVD ( by ARPACK or randomized ) on X <EoL>
<BoL> Fit the model with X . <EoL>
<BoL> Fit the model with X and apply the dimensionality reduction on X . <EoL>
<BoL> Compute data covariance with the generative model . <EoL>
<BoL> Compute data precision matrix with the generative model . <EoL>
<BoL> Transform data back to its original space . <EoL>
<BoL> Return the average log-likelihood of all samples . <EoL>
<BoL> Return the log-likelihood of each sample . <EoL>
<BoL> Apply dimensionality reduction to X . <EoL>
<BoL> Turn seed into a np.random.RandomState instance <EoL>
<BoL> Initialize points onto an existing embedding by placing them in the median position of their nearest neighbors on the reference embedding . <EoL>
<BoL> Initialize an embedding using the top principal components . <EoL>
<BoL> Initialize an embedding using samples from an isotropic Gaussian . <EoL>
<BoL> Initialize points onto an existing embedding by placing them in the weighted mean position of their nearest neighbors on the reference embedding . <EoL>
<BoL> Check that the metric is supported by the KNNIndex instance . <EoL>
<BoL> Build the index so we can query nearest neighbors . <EoL>
<BoL> Query the index with new points . <EoL>
<BoL> Query the index for the points used to build index . <EoL>
<BoL> Fit the PyNNDescent transformer to build KNN graphs with neighbors given by the dataset X . <EoL>
<BoL> Fit to data , then transform it . <EoL>
<BoL> Computes the ( weighted ) graph of Neighbors for points in X <EoL>
<BoL> Fit to data , then transform it . <EoL>
<BoL> Prune the k-neighbors graph back so that nodes have a maximum degree of `` max_degree `` . <EoL>
<BoL> Return the element ( s ) index= ( i , j ) , where j may be a slice . This always returns a copy for consistency , since slices into Python lists return copies . <EoL>
<BoL> Fast path for indexing in the case where column index is slice . <EoL>
<BoL> Returns a copy of column j of the matrix , as an ( m x 1 ) sparse matrix ( column vector ) . <EoL>
<BoL> Returns a copy of the ' i'th row . <EoL>
<BoL> Returns a view of the ' i'th row ( without copying ) . <EoL>
<BoL> See ` reshape ` . <EoL>
<BoL> Convert this matrix to COOrdinate format . <EoL>
<BoL> Convert this matrix to Compressed Sparse Column format . <EoL>
<BoL> Convert this matrix to Dictionary Of Keys format . <EoL>
<BoL> Create a numba accelerated version of heap initialization for the alternative k-neighbor graph algorithm . This approach builds two heaps of neighbors simultaneously , one is a heap used to construct a very approximate k-neighbor graph for searching ; the other is the initialization for searching . <EoL>
<BoL> Create a numba accelerated version of nearest neighbor descent specialised for the given distance metric and metric arguments . Numba does n't support higher order functions directly , but we can instead JIT compile the version of NN-descent for any given metric . <EoL>
<BoL> Perform pruning on the graph so that there are fewer edges to be followed . <EoL>
<BoL> Determine the number of leaves in a tree <EoL>
<BoL> Determine the number of nodes in a tree <EoL>
<BoL> Convert the user friendly params into something the optimizer can understand . <EoL>
<BoL> create frame to send text , binary and other data . <EoL>
<BoL> format this object to string ( byte array ) to send data to server . <EoL>
<BoL> mask or unmask data . Just do xor for each byte <EoL>
<BoL> validate the ABNF frame . skip_utf8_validation : skip utf8 validation . <EoL>
<BoL> Allow iteration over websocket , implying sequential ` recv ` executions . <EoL>
<BoL> Low-level asynchronous abort , wakes up other threads that are waiting in recv_* <EoL>
<BoL> Close Websocket object <EoL>
<BoL> Connect to url . url is websocket url scheme . <EoL>
<BoL> get handshake response header <EoL>
<BoL> get handshake status <EoL>
<BoL> get subprotocol <EoL>
<BoL> Get the websocket timeout ( second ) . <EoL>
<BoL> send ping data . <EoL>
<BoL> send pong data . <EoL>
<BoL> Receive string data ( byte array ) from the server . <EoL>
<BoL> Receive data with operation code . <EoL>
<BoL> Receive data with operation code . <EoL>
<BoL> receive data as frame from server . <EoL>
<BoL> Send the data as string . <EoL>
<BoL> send close data to the server . <EoL>
<BoL> Send the data frame . <EoL>
<BoL> set function to create musk key . <EoL>
<BoL> Set the timeout to the websocket . <EoL>
<BoL> close socket , immediately . <EoL>
<BoL> this functions extracts the code , reason from the close body if they exists , and if the self.on_close except three arguments <EoL>
<BoL> close websocket connection . <EoL>
<BoL> Tears down the connection . If close_frame is set , we will invoke the on_close handler with the statusCode and reason from there . <EoL>
<BoL> send message . data : message to send . <EoL>
<BoL> validate utf8 byte string . utfbytes : utf byte string to check . <EoL>
<BoL> Return the global timeout setting ( second ) to connect . <EoL>
<BoL> connect to url and return websocket object . <EoL>
<BoL> turn on/off the traceability . <EoL>
<BoL> Set the global timeout setting to connect . <EoL>
<BoL> parse url and the result is tuple of ( hostname , port , resource path and the flag of secure mode ) <EoL>
<BoL> Parses some source and sets an attribute on the given node . <EoL>
<BoL> Return True iff the TryExcept node is a continued ` try ` in the source . <EoL>
<BoL> Return True iff the With node is a continued ` with ` in the source . <EoL>
<BoL> Return True iff the If node is an ` elif ` in the source . <EoL>
<BoL> Helper function for Slice node to determine whether to visit its step . <EoL>
<BoL> Generator white annotates child nodes with their indentation level . <EoL>
<BoL> Account for one of the given symbols . <EoL>
<BoL> Try to parse a token and attach it to the node . <EoL>
<BoL> Account for some amount of whitespace as the prefix to a node . <EoL>
<BoL> Return a context manager to handle a parenthesized scope . <EoL>
<BoL> Account for some amount of whitespace as the suffix to a node . <EoL>
<BoL> Parse a single token with exactly the given value . <EoL>
<BoL> Annotate a Bytes node with the exact string format . <EoL>
<BoL> Old-style comparator for sorting args . <EoL>
<BoL> Annotate a Num node with the exact number format . <EoL>
<BoL> Annotate a Str node with the exact string format . <EoL>
<BoL> Parse some whitespace from the source tokens and return it . <EoL>
<BoL> Account for up to one line of whitespace . <EoL>
<BoL> Handles an attribute on the given node . <EoL>
<BoL> Return True if the node continues a previous ` with ` statement . <EoL>
<BoL> Return True if the node continues a previous ` if ` statement as ` elif ` . <EoL>
<BoL> Helper function for Slice node to determine whether to visit its step . <EoL>
<BoL> Account for one of the given symbols . <EoL>
<BoL> Account for a suffix that may or may not occur . <EoL>
<BoL> Context manager to handle a parenthesized scope . <EoL>
<BoL> Account for a specific token . <EoL>
<BoL> Account for some amount of whitespace . <EoL>
<BoL> Decorates a function where the node is a statement with children . <EoL>
<BoL> Decorates a function where the node is an expression . <EoL>
<BoL> Special decorator for the module node . <EoL>
<BoL> Decorates a function where the node has whitespace prefix and suffix . <EoL>
<BoL> Decorates a function where the node has whitespace prefix . <EoL>
<BoL> Decorates a function where the node is a statement . <EoL>
<BoL> Get the last child node of a block statement . <EoL>
<BoL> Replaces ast.parse ; ensures additional properties on the parsed tree . <EoL>
<BoL> Replace a node 's child with another node while preserving formatting . <EoL>
<BoL> Strip the 'coding ' directive from python source code , if present . <EoL>
<BoL> Add the formatted data stored for a given attribute on this node . <EoL>
<BoL> Convenient function to get the python source for an AST . <EoL>
<BoL> Parse the space between a location and the next token <EoL>
<BoL> Parses whitespace from the current _loc to the end of the block . <EoL>
<BoL> Indicates closing a group of parentheses or brackets . <EoL>
<BoL> Indicates opening a group of parentheses or brackets . <EoL>
<BoL> Return True iff there is a scope open . <EoL>
<BoL> Get the start column of the current location parsed to . <EoL>
<BoL> Get the end column of the current location parsed to . <EoL>
<BoL> Consume the next token and optionally advance the current location . <EoL>
<BoL> Parse the next name token . <EoL>
<BoL> Parse a token of the given type and return it . <EoL>
<BoL> Open a parenthesized scope on the given node . <EoL>
<BoL> Get the next token without advancing . <EoL>
<BoL> Get the next token of the given type without advancing . <EoL>
<BoL> Get the next non-whitespace token without advancing . <EoL>
<BoL> Rewind the token iterator . <EoL>
<BoL> Context manager to handle a parenthesized scope . <EoL>
<BoL> Parse a full string literal from the input . <EoL>
<BoL> Parse tokens as long as a condition holds on the next token . <EoL>
<BoL> Parses whitespace from the current _loc to the next non-whitespace . <EoL>
<BoL> Get the closure of nodes that could begin a scope at this point . <EoL>
<BoL> Yield sorted list of keys . <EoL>
<BoL> Return the subset of this RcParams dictionary whose keys match , using : func : ` re.search ` , the given `` pattern `` . <EoL>
<BoL> print message s to self.fileo if self.level > =level . Return value indicates whether a message was issued <EoL>
<BoL> return a callable function that wraps func and reports it output through the verbose handler if current verbosity level is higher than level <EoL>
<BoL> Add documentation for a *data* field to the given docstring . <EoL>
<BoL> Return custom data dictionary of ( r , g , b ) conversion functions , which can be used with : func : ` register_cmap ` , for the cubehelix color scheme . <EoL>
<BoL> Make a colormap from a list of colors . <EoL>
<BoL> Return a new color map with *lutsize* entries . <EoL>
<BoL> Make a reversed instance of the Colormap . <EoL>
<BoL> Return the approximate height of the text . This is used to place the legend handle . <EoL>
<BoL> Returns list of vertices and extents covered by the plot . <EoL>
<BoL> Determine the best location to place the legend . <EoL>
<BoL> Place the *bbox* inside the *parentbbox* according to a given location code . Return the ( x , y ) coordinate of the bbox . <EoL>
<BoL> Initialize the legend_box . The legend_box is an instance of the OffsetBox , which is packed with legend handles and texts . Once packed , their location is calculated during the drawing time . <EoL>
<BoL> Set the boilerplate props for artists added to axes . <EoL>
<BoL> Set the draggable state -- if state is <EoL>
<BoL> Set draw frame to b . <EoL>
<BoL> Return the bbox that the legend will be anchored to . <EoL>
<BoL> A class method that returns the default handler map . <EoL>
<BoL> Return `` True `` if the legend is draggable , `` False `` otherwise . <EoL>
<BoL> Return the ` ~.patches.Rectangle ` instances used to frame the legend . <EoL>
<BoL> Get whether the legend box patch is drawn . <EoL>
<BoL> Return a legend handler from *legend_handler_map* that corresponds to *orig_handler* . <EoL>
<BoL> Return the handler map . <EoL>
<BoL> Like ` .Legend.get_window_extent ` , but uses the box for the legend . <EoL>
<BoL> Set the bbox that the legend will be anchored to . <EoL>
<BoL> A class method to set the default handler map . <EoL>
<BoL> Enable or disable mouse dragging support of the legend . <EoL>
<BoL> Set whether the legend box patch is drawn . <EoL>
<BoL> Set the legend title . Fontproperties can be optionally set with *prop* parameter . <EoL>
<BoL> A class method to update the default handler map . <EoL>
<BoL> - Align right/left and bottom/top spines of appropriate subplots . - Compare size of subplotspec including height and width ratios and make sure that the axes spines are at least as large as they should be . <EoL>
<BoL> arrange the subplotspec children of this gridspec , and then recursively do the same of any gridspec children of those gridspecs ... <EoL>
<BoL> helper function to make sure all axes in the figure have a finite width and height . If not , return False <EoL>
<BoL> Check for unoccupied gridspec slots and make ghost axes for these slots ... Do for each gs separately . <EoL>
<BoL> For each axes , make a margin between the *pos* layoutbox and the *axes* layoutbox be a minimum size that can accommodate the decorations on the axis . <EoL>
<BoL> Do the layout for a colorbar , to not oeverly pollute colorbar.py <EoL>
<BoL> Do the layout for a colorbar , to not oeverly pollute colorbar.py <EoL>
<BoL> If the config directory can not be created , create a temporary directory . <EoL>
<BoL> Returns the XDG cache directory , according to the ` XDG base directory spec < http : //standards.freedesktop.org/basedir-spec/basedir-spec-latest.html > ` _ . <EoL>
<BoL> Returns the XDG configuration directory , according to the ` XDG base directory spec < http : //standards.freedesktop.org/basedir-spec/basedir-spec-latest.html > ` _ . <EoL>
<BoL> Helper to check if this layoutbox is the layoutbox of a gridspec <EoL>
<BoL> Helper to check if this layoutbox is the layoutbox of a subplotspec <EoL>
<BoL> Constrain the height of the layout box . height is either a float or a layoutbox.height . <EoL>
<BoL> Only do this for pos . This sets a variable distance margin between the position of the axes and the outer edge of the axes . <EoL>
<BoL> Make the layoutbox have same position as other layoutbox <EoL>
<BoL> Constrain the width of the layout box . ` width ` is either a float or a layoutbox.width . <EoL>
<BoL> Set the height of the layout box . <EoL>
<BoL> Find children of this layout box that are subplots . We want to line poss up , and this is an easy way to find them all . <EoL>
<BoL> replace the parent of this with the new parent <EoL>
<BoL> Update *all* the variables that are part of the solver this LayoutBox is created with <EoL>
<BoL> Stack LayoutBox instances from left to right . <EoL>
<BoL> Stack LayoutBox instances from left to right . ` padding ` is in figure-relative units . <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Make all elements in this tree none ... This signals not to do any more layout . <EoL>
<BoL> Simple plotting to show where boxes are <EoL>
<BoL> Print the children of the layoutbox <EoL>
<BoL> Print the tree of layoutboxes <EoL>
<BoL> Generate a short sequential id for layoutbox objects ... <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Stack LayoutBox instances from top to bottom <EoL>
<BoL> Decorator that logs a function 's return value , and memoizes that value . <EoL>
<BoL> Check for -- verbose-LEVEL type command line arguments and set logging level appropriately . <EoL>
<BoL> Try to remove all traces of figure *num* . <EoL>
<BoL> Redraw all figures registered with the pyplot state machine . <EoL>
<BoL> Return the manager of the active figure , or *None* . <EoL>
<BoL> Return a list of figure managers . <EoL>
<BoL> If figure manager *num* exists , make it the active figure and return the manager ; otherwise return *None* . <EoL>
<BoL> Return the number of figures being managed . <EoL>
<BoL> Return *True* if figure *num* exists . <EoL>
<BoL> Make the figure corresponding to *manager* the active one . <EoL>
<BoL> Return : class : ` matplotlib.RcParams ` from the contents of the given file . <EoL>
<BoL> Either returns data [ key ] or passes data back . Also converts input data to a sequence as needed . <EoL>
<BoL> Use a -- verbose-LEVEL level to set the logging level : <EoL>
<BoL> Parse the AFM file in file object *fh* . <EoL>
<BoL> Return the fontangle as float . <EoL>
<BoL> Return the cap height as float . <EoL>
<BoL> Return the font family name , e.g. , 'Times ' . <EoL>
<BoL> Return the font name , e.g. , 'Times-Roman ' . <EoL>
<BoL> Return the font full name , e.g. , 'Times-Roman ' . <EoL>
<BoL> Get the bounding box ( ink ) height of character *c* ( space is 0 ) . <EoL>
<BoL> Return the standard horizontal stem width as float , or *None* if not specified in AFM file . <EoL>
<BoL> Return the kerning pair distance ( possibly 0 ) for chars *c1* and *c2* . <EoL>
<BoL> Return the kerning pair distance ( possibly 0 ) for chars *name1* and *name2* . <EoL>
<BoL> Get the name of the character , i.e. , ' ; ' is 'semicolon ' . <EoL>
<BoL> Return the string bounding box . <EoL>
<BoL> Return the string bounding box and the maximal descent . <EoL>
<BoL> Return the underline thickness as float . <EoL>
<BoL> Return the standard vertical stem width as float , or *None* if not specified in AFM file . <EoL>
<BoL> Return the font weight , e.g. , 'Bold ' or 'Roman ' . <EoL>
<BoL> Get the width of the character from the character metric WX field . <EoL>
<BoL> Get the width of the character from a type1 character name . <EoL>
<BoL> Return the xheight as float . <EoL>
<BoL> Return the string width ( including kerning ) and string height as a ( *w* , *h* ) tuple . <EoL>
<BoL> Parse the Adobe Font Metrics file in file handle *fh* . <EoL>
<BoL> Parse the given filehandle for character metrics information and return the information as dicts . <EoL>
<BoL> Parse the given filehandle for composites information return them as a dict . <EoL>
<BoL> Reads the font metrics header ( up to the char metrics ) and returns a dictionary mapping *key* to *val* . *val* will be converted to the appropriate python type as necessary ; e.g . : <EoL>
<BoL> Return a kern pairs dictionary ; keys are ( *char1* , *char2* ) tuples and values are the kern pair value . For example , a kern pairs line like `` KPX A y -50 `` <EoL>
<BoL> Parse the optional fields for kern pair data and composites . <EoL>
<BoL> Check if the file at least looks like AFM . If not , raise : exc : ` RuntimeError ` . <EoL>
<BoL> Test whether the artist contains the mouse event . <EoL>
<BoL> Get the axes bounding box in display space . <EoL>
<BoL> Initialize the artist inspector with an ` Artist ` or an iterable of ` Artist ` \s . If an iterable is used , we assume it is a homogeneous sequence ( all ` Artists ` are of the same type ) and it is your responsibility to make sure this is so . <EoL>
<BoL> Get the attribute strings and a full path to where the setter is defined for all setters in an object . <EoL>
<BoL> Changes the full path to the public API path that is used in sphinx . This is needed for links to work . <EoL>
<BoL> return 'PROPNAME or alias ' if *s* has an alias , else return PROPNAME . <EoL>
<BoL> return 'PROPNAME or alias ' if *s* has an alias , else return PROPNAME formatted for ReST <EoL>
<BoL> Get a dict mapping property fullnames to sets of aliases for each alias in the : class : ` ~matplotlib.artist.ArtistInspector ` . <EoL>
<BoL> Get the attribute strings with setters for object . <EoL>
<BoL> Get the legal arguments for the setter associated with *attr* . <EoL>
<BoL> Return *True* if method object *o* is an alias for another function . <EoL>
<BoL> Return the getters and actual values as list of strings . <EoL>
<BoL> If *prop* is *None* , return a list of strings of all settable properties and their valid values . <EoL>
<BoL> If *prop* is *None* , return a list of strings of all settable properties and their valid values . Format the output for ReST <EoL>
<BoL> return a dictionary mapping property name - > value <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , shifted to position *c* within a container . <EoL>
<BoL> Returns whether `` ( x , y ) `` is in the bounding box or on its edge . <EoL>
<BoL> Returns whether *x* is in the closed ( : attr : ` x0 ` , : attr : ` x1 ` ) interval . <EoL>
<BoL> Returns whether *y* is in the closed ( : attr : ` y0 ` , : attr : ` y1 ` ) interval . <EoL>
<BoL> Return an array of points which are the four corners of this rectangle . For example , if this : class : ` Bbox ` is defined by the points ( *a* , *b* ) and ( *c* , *d* ) , : meth : ` corners ` returns ( *a* , *b* ) , ( *a* , *d* ) , ( *c* , *b* ) and ( *c* , *d* ) . <EoL>
<BoL> Count the number of vertices contained in the : class : ` Bbox ` . Any vertices with a non-finite x or y value are ignored . <EoL>
<BoL> Count the number of bounding boxes that overlap this one . <EoL>
<BoL> Return a new : class : ` Bbox ` which is this : class : ` Bbox ` expanded around its center by the given factors *sw* and *sh* . <EoL>
<BoL> ( staticmethod ) Create a new : class : ` Bbox ` from *x0* , *y0* , *width* and *height* . <EoL>
<BoL> ( staticmethod ) Create a new Bbox from *left* , *bottom* , *right* and *top* . <EoL>
<BoL> Returns whether `` x , y `` is in the bounding box , but not on its edge . <EoL>
<BoL> Returns whether *x* is in the open ( : attr : ` x0 ` , : attr : ` x1 ` ) interval . <EoL>
<BoL> Returns whether *y* is in the open ( : attr : ` y0 ` , : attr : ` y1 ` ) interval . <EoL>
<BoL> Returns whether this bounding box overlaps with the other bounding box , not including the edges . <EoL>
<BoL> Get the points of the bounding box directly as a numpy array of the form : `` [ [ x0 , y0 ] , [ x1 , y1 ] ] `` . <EoL>
<BoL> Set whether the existing bounds of the box should be ignored by subsequent calls to : meth : ` update_from_data_xy ` . <EoL>
<BoL> Return the intersection of the two bboxes or None if they do not intersect . <EoL>
<BoL> Return a new : class : ` Bbox ` object , statically transformed by the inverse of the given transform . <EoL>
<BoL> Returns True if the : class : ` Bbox ` is the unit bounding box from ( 0 , 0 ) to ( 1 , 1 ) . <EoL>
<BoL> ( staticmethod ) Create a new null : class : ` Bbox ` from ( inf , inf ) to ( -inf , -inf ) . <EoL>
<BoL> Returns whether this bounding box overlaps with the other bounding box . <EoL>
<BoL> Return a new : class : ` Bbox ` that is padded on all four sides by the given value . <EoL>
<BoL> Return a new bounding box that bounds a rotated version of this bounding box by the given radians . The new bounding box is still aligned with the axes , of course . <EoL>
<BoL> Set this bounding box from the `` frozen '' bounds of another : class : ` Bbox ` . <EoL>
<BoL> Set the points of the bounding box directly from a numpy array of the form : `` [ [ x0 , y0 ] , [ x1 , y1 ] ] `` . No error checking is performed , as this method is mainly for internal use . <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , shrunk by the factor *mx* in the *x* direction and the factor *my* in the *y* direction . <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , shrunk so that it is as large as it can be while having the desired aspect ratio , *box_aspect* . If the box coordinates are relative -- -that is , fractions of a larger box such as a figure -- -then the physical aspect ratio of that figure is specified with *fig_aspect* , so that *box_aspect* can also be given as a ratio of the absolute dimensions , not the relative dimensions . <EoL>
<BoL> e.g. , `` bbox.splitx ( f1 , f2 , ... ) `` <EoL>
<BoL> e.g. , `` bbox.splitx ( f1 , f2 , ... ) `` <EoL>
<BoL> Return a new : class : ` Bbox ` object , statically transformed by the given transform . <EoL>
<BoL> Return a copy of the : class : ` Bbox ` , statically translated by *tx* and *ty* . <EoL>
<BoL> Return a : class : ` Bbox ` that contains all of the given bboxes . <EoL>
<BoL> ( staticmethod ) Create a new unit : class : ` Bbox ` from ( 0 , 0 ) to ( 1 , 1 ) . <EoL>
<BoL> Update the bounds of the : class : ` Bbox ` based on the passed in data . After updating , the bounds will have positive *width* and *height* ; *x0* and *y0* will be the minimal values . <EoL>
<BoL> Update the bounds of the : class : ` Bbox ` based on the passed in data . After updating , the bounds will have positive *width* and *height* ; *x0* and *y0* will be the minimal values . <EoL>
<BoL> Array interface to get at this Transform 's affine matrix . <EoL>
<BoL> Creates a new : class : ` TransformNode ` . <EoL>
<BoL> Returns a frozen copy of this transform node . <EoL>
<BoL> Get the affine part of this transform . <EoL>
<BoL> Get the Affine transformation array for the affine part of this transform . <EoL>
<BoL> Return the corresponding inverse transformation . <EoL>
<BoL> Performs the transformation on the given array of values . <EoL>
<BoL> Performs only the affine part of this transformation on the given array of values . <EoL>
<BoL> Performs only the non-affine part of the transformation . <EoL>
<BoL> Returns a transformed path . <EoL>
<BoL> Returns a path , transformed only by the affine part of this transform . <EoL>
<BoL> Returns a path , transformed only by the non-affine part of this transform . <EoL>
<BoL> A convenience function that returns the transformed copy of a single point . <EoL>
<BoL> Create a new : class : ` TransformedPatchPath ` from the given : class : ` ~matplotlib.path.Patch ` . <EoL>
<BoL> Return a fully-transformed copy of the child path . <EoL>
<BoL> Return a copy of the child path , with the non-affine part of the transform already applied , along with the affine part of the path necessary to complete the transformation . <EoL>
<BoL> Return a copy of the child path , with the non-affine part of the transform already applied , along with the affine part of the path necessary to complete the transformation . Unlike : meth : ` get_transformed_path_and_affine ` , no interpolation will be performed . <EoL>
<BoL> Create a new : class : ` TransformedPath ` from the given : class : ` ~matplotlib.path.Path ` and : class : ` Transform ` . <EoL>
<BoL> Decorator for Artist.draw method . Provides routines that run before and after the draw call . The before and after functions are useful for changing artist-dependent renderer attributes or making other setup function calls , such as starting and flushing a mixed-mode renderer . <EoL>
<BoL> Return the value of object 's property . *property* is an optional string for the property you want to return <EoL>
<BoL> Inspect an ` ~matplotlib.artist.Artist ` class and return information about its settable properties and their current values . <EoL>
<BoL> Set a property on an artist object . <EoL>
<BoL> Adds a callback function that will be called whenever one of the : class : ` Artist ` 's properties changes . <EoL>
<BoL> Get the label used for this artist in the legend . <EoL>
<BoL> Fire an event when property changed , calling all of the registered callbacks . <EoL>
<BoL> Remove a callback based on its *id* . <EoL>
<BoL> Set the label to *s* for auto legend . <EoL>
<BoL> Create and return a SuplotSpec instance . <EoL>
<BoL> return lists of bottom and top position of rows , left and right positions of columns . <EoL>
<BoL> Return a dictionary of subplot layout parameters . The default parameters are from rcParams unless a figure attribute is set . <EoL>
<BoL> create and return a SuplotSpec instance . <EoL>
<BoL> Update the current values . If any kwarg is None , default to the current value , if set , otherwise to rc . <EoL>
<BoL> *fig* is a : class : ` matplotlib.figure.Figure ` instance . <EoL>
<BoL> Make a twinx axes of self . This is used for twinx and twiny . <EoL>
<BoL> change subplot geometry , e.g. , from 1,1,1 to 2,2,3 <EoL>
<BoL> get the subplot geometry , e.g. , 2,2,3 <EoL>
<BoL> get the GridSpec instance associated with the subplot <EoL>
<BoL> get the SubplotSpec instance associated with the subplot <EoL>
<BoL> Only show `` outer '' labels and tick labels . <EoL>
<BoL> set the SubplotSpec instance associated with the subplot <EoL>
<BoL> update the subplot position from fig.subplotpars <EoL>
<BoL> The subplot will occupy the num1-th cell of the given gridspec . If num2 is provided , the subplot will span between num1-th cell and num2-th cell . <EoL>
<BoL> Get the subplot geometry ( `` n_rows , n_cols , start , stop `` ) . <EoL>
<BoL> Update the subplot position from `` figure.subplotpars `` . <EoL>
<BoL> Get the subplot row and column numbers : ( `` n_rows , n_cols , row_start , row_stop , col_start , col_stop `` ) <EoL>
<BoL> Return a ` .GridSpecFromSubplotSpec ` that has this subplotspec as a parent . <EoL>
<BoL> Return whether *data* can be item-accessed with *name* . <EoL>
<BoL> Helper function to locate inset axes , used in ` .Axes.inset_axes ` . <EoL>
<BoL> Process a MATLAB style color/line style format string . <EoL>
<BoL> eturn true if *obj* is iterable <EoL>
<BoL> Update the location of children if necessary and draw them to the given *renderer* . <EoL>
<BoL> Return a list of artists it contains . <EoL>
<BoL> Return with , height , xdescent , ydescent of box <EoL>
<BoL> Get the offset <EoL>
<BoL> Return a list of visible artists it contains . <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set the figure <EoL>
<BoL> Set the height <EoL>
<BoL> Set the offset . <EoL>
<BoL> Set the width <EoL>
<BoL> Converts a sequence of less than 1 dimension , to an array of 1 dimension ; leaves everything else untouched . <EoL>
<BoL> Only advance the cycler if the cycler has information that is not specified in any of the supplied tuple of dicts . Ignore any keys specified in the ` ignore ` set . <EoL>
<BoL> Given a defaults dictionary , and any other dictionaries , update those other dictionaries with information in defaults if none of the other dictionaries contains that information . <EoL>
<BoL> Return the next color in the cycle . <EoL>
<BoL> Parses the string argument as a boolean <EoL>
<BoL> Creates a ` ~cycler.Cycler ` object much like : func : ` cycler.cycler ` , but includes input validation . <EoL>
<BoL> A helper function to get the index of an input to plot against if x values are not explicitly given . <EoL>
<BoL> This stub class exists to return the appropriate subplot class when called with an axes class . This is purely to allow pickling of Axes and Subplots . <EoL>
<BoL> Init the axis with the parent Axes instance <EoL>
<BoL> Given the list of ticks , return two lists of bboxes . One for tick lable1 's and another for tick label2 's . <EoL>
<BoL> Get the bounding boxes for this ` .axis ` and its siblings as set by ` .Figure.align_xlabels ` or ` .Figure.align_ylablels ` . <EoL>
<BoL> check the axis converter for the stored units to see if the axis info needs to be updated <EoL>
<BoL> Update the label position based on the bounding box enclosing all the ticklabels and axis spine <EoL>
<BoL> Update the label position based on the sequence of bounding boxes of all the ticklabels <EoL>
<BoL> Update ticks ( position and labels ) using the current data interval of the axes . Returns a list of ticks that will be drawn . <EoL>
<BoL> Sets up x-axis ticks and labels that treat the x data as dates . <EoL>
<BoL> Return the label position ( top or bottom ) <EoL>
<BoL> get whether the axis has smart bounds <EoL>
<BoL> Return the estimated number of ticks that can fit on the axis . <EoL>
<BoL> Get the extents of the tick labels on either side of the axes . <EoL>
<BoL> Get the tick labels as a list of : class : ` ~matplotlib.text.Text ` instances . <EoL>
<BoL> Get the tick directions as a numpy array <EoL>
<BoL> Return a bounding box that encloses the axis . It only accounts tick labels , axis label , and offsetText . <EoL>
<BoL> Configure the grid lines . <EoL>
<BoL> Iterate through all of the major and minor ticks . <EoL>
<BoL> Re-initialize the major and minor Tick lists . <EoL>
<BoL> set the axis data limits <EoL>
<BoL> set the default limits for the axis data and view interval if they are not mutated <EoL>
<BoL> Set the coordinates of the label . <EoL>
<BoL> Set the label position ( top or bottom ) <EoL>
<BoL> Set the text value of the axis label . <EoL>
<BoL> Set the formatter of the major ticker . <EoL>
<BoL> Set the locator of the major ticker . <EoL>
<BoL> Set the formatter of the minor ticker . <EoL>
<BoL> Set the locator of the minor ticker . <EoL>
<BoL> Set the depth of the axis used by the picker . <EoL>
<BoL> set the axis to have smart bounds <EoL>
<BoL> Set appearance parameters for ticks , ticklabels , and gridlines . <EoL>
<BoL> Set the text values of the tick labels . <EoL>
<BoL> Set the locations of the tick marks from sequence ticks <EoL>
<BoL> set the units for axis <EoL>
<BoL> introspect *data* for units converter and update the axis.converter instance if necessary . Return *True* if *data* is registered for unit conversion . <EoL>
<BoL> Calculate self._pad and self._tickmarkers <EoL>
<BoL> Test whether the mouse event occurred in the Tick marks . <EoL>
<BoL> Get the length of the tick outside of the axes . <EoL>
<BoL> Set the label1 text . <EoL>
<BoL> Set the label2 text . <EoL>
<BoL> Set the tick label pad in points <EoL>
<BoL> Returns the amount , in data coordinates , that a single pixel corresponds to in the locality given by `` where '' , which is also given in data coordinates , and is an x coordinate . <EoL>
<BoL> Get the bounding boxes for this ` .axis ` and its siblings as set by ` .Figure.align_xlabels ` or ` .Figure.align_ylablels ` . <EoL>
<BoL> Update the label position based on the bounding box enclosing all the ticklabels and axis spine <EoL>
<BoL> Update the offset_text position based on the sequence of bounding boxes of all the ticklabels <EoL>
<BoL> Test whether the mouse event occurred in the x axis . <EoL>
<BoL> Returns the amount of space one should reserve for text above and below the axes . Returns a tuple ( above , below ) <EoL>
<BoL> Return the ticks position ( top , bottom , default or unknown ) <EoL>
<BoL> Set the label position ( top or bottom ) <EoL>
<BoL> Set the ticks position ( top , bottom , both , default or none ) both sets the ticks to appear on both positions , but does not change the tick labels . <EoL>
<BoL> If *ignore* is *False* , the order of vmin , vmax does not matter ; the original axis orientation will be preserved . <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the bottom of the axes . <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the top of the axes . <EoL>
<BoL> Returns the amount , in data coordinates , that a single pixel corresponds to in the locality given by *where* , which is also given in data coordinates , and is a y coordinate . <EoL>
<BoL> Get the bounding boxes for this ` .axis ` and its siblings as set by ` .Figure.align_xlabels ` or ` .Figure.align_ylablels ` . <EoL>
<BoL> Update the label position based on the bounding box enclosing all the ticklabels and axis spine <EoL>
<BoL> Update the offset_text position based on the sequence of bounding boxes of all the ticklabels <EoL>
<BoL> Test whether the mouse event occurred in the y axis . <EoL>
<BoL> Return the ticks position ( left , right , both or unknown ) <EoL>
<BoL> Set the label position ( left or right ) <EoL>
<BoL> Set the ticks position ( left , right , both , default or none ) 'both ' sets the ticks to appear on both positions , but does not change the tick labels . <EoL>
<BoL> If *ignore* is *False* , the order of vmin , vmax does not matter ; the original axis orientation will be preserved . <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the left of the axes . <EoL>
<BoL> Move ticks and ticklabels ( if present ) to the right of the axes . <EoL>
<BoL> Initialize an Affine transform from a 3x3 numpy float array : : <EoL>
<BoL> Reset the underlying matrix to the identity transform . <EoL>
<BoL> ( staticmethod ) Create a new Affine2D instance from the given values : : <EoL>
<BoL> Get the underlying transformation matrix as a 3x3 numpy array : : <EoL>
<BoL> ( staticmethod ) Return a new : class : ` Affine2D ` object that is the identity transform . <EoL>
<BoL> Add a rotation ( in radians ) to this transform in place . <EoL>
<BoL> Add a rotation ( in radians ) around the point ( x , y ) in place . <EoL>
<BoL> Add a rotation ( in degrees ) to this transform in place . <EoL>
<BoL> Add a rotation ( in degrees ) around the point ( x , y ) in place . <EoL>
<BoL> Adds a scale in place . <EoL>
<BoL> Set this transformation from the frozen copy of another : class : ` Affine2DBase ` object . <EoL>
<BoL> Set the underlying transformation matrix from a 3x3 numpy array : : <EoL>
<BoL> Adds a skew in place . <EoL>
<BoL> Adds a skew in place . <EoL>
<BoL> Adds a translation in place . <EoL>
<BoL> Return a canvas suitable for saving figures to a specified file format . <EoL>
<BoL> Blit the canvas in bbox ( default entire canvas ) . <EoL>
<BoL> Backend derived classes should call this function on any mouse button press . <EoL>
<BoL> Backend derived classes should call this function on any mouse button release . <EoL>
<BoL> Pass a ` CloseEvent ` to all functions connected to `` close_event `` . <EoL>
<BoL> Render the : class : ` ~matplotlib.figure.Figure ` . <EoL>
<BoL> Draw a cursor in the event.axes if inaxes is not None . Use native GUI drawing for efficiency if possible <EoL>
<BoL> Pass a ` DrawEvent ` to all functions connected to `` draw_event `` . <EoL>
<BoL> : meth : ` draw ` only if idle ; defaults to draw but backends can override <EoL>
<BoL> Backend derived classes should call this function when entering canvas <EoL>
<BoL> Flush the GUI events for the figure . <EoL>
<BoL> Return a string , which includes extension , suitable for use as a default filename . <EoL>
<BoL> Get the default savefig file format as specified in rcParam `` savefig.format `` . <EoL>
<BoL> Return dict of savefig file formats supported by this backend <EoL>
<BoL> Return a dict of savefig file formats supported by this backend , where the keys are a file type name , such as 'Joint Photographic Experts Group ' , and the values are a list of filename extensions used for that filetype , such as [ 'jpg ' , 'jpeg ' ] . <EoL>
<BoL> Return the figure width and height in points or pixels ( depending on the backend ) , truncated to integers <EoL>
<BoL> Get the title text of the window containing the figure . Return None if there is no window ( e.g. , a PS backend ) . <EoL>
<BoL> Set the child axes which are currently grabbing the mouse events . <EoL>
<BoL> Returns whether the renderer is in the process of saving to a file , rather than rendering for an on-screen buffer . <EoL>
<BoL> Pass a ` KeyEvent ` to all functions connected to `` key_press_event `` . <EoL>
<BoL> Pass a ` KeyEvent ` to all functions connected to `` key_release_event `` . <EoL>
<BoL> Backend derived classes should call this function when leaving canvas <EoL>
<BoL> Backend derived classes should call this function on any motion-notify-event . <EoL>
<BoL> Connect event with string *s* to *func* . The signature of *func* is : : <EoL>
<BoL> Disconnect callback id cid <EoL>
<BoL> Creates a new backend-specific subclass of : class : ` backend_bases.Timer ` . <EoL>
<BoL> Mouse event processor which removes the top artist under the cursor . Connect this to the 'mouse_press_event' using : : <EoL>
<BoL> This method will be called by artists who are picked and will fire off : class : ` PickEvent ` callbacks registered listeners <EoL>
<BoL> Release the mouse grab held by the axes , ax . <EoL>
<BoL> Set the canvas size in pixels . <EoL>
<BoL> Pass a ` ResizeEvent ` to all functions connected to `` resize_event `` . <EoL>
<BoL> Backend derived classes should call this function on any scroll wheel event . <EoL>
<BoL> Set the title text of the window containing the figure . Note that this has no effect if there is no window ( e.g. , a PS backend ) . <EoL>
<BoL> Start a blocking event loop . <EoL>
<BoL> Stop the current blocking event loop . <EoL>
<BoL> Instantiate an instance of FigureCanvasClass <EoL>
<BoL> Get the title text of the window containing the figure . <EoL>
<BoL> Implement the default mpl key bindings defined at : ref : ` key-event-handling ` <EoL>
<BoL> For GUI backends , resize the window ( in pixels ) . <EoL>
<BoL> Set the title text of the window containing the figure . <EoL>
<BoL> For GUI backends , show the figure window and redraw . For non-GUI backends , raise an exception to be caught by : meth : ` ~matplotlib.figure.Figure.show ` , for an optional warning . <EoL>
<BoL> Display message in a popup -- GUI only . <EoL>
<BoL> Return the alpha value used for blending - not supported on all backends <EoL>
<BoL> Return the capstyle as a string in ( 'butt ' , 'round ' , 'projecting ' ) <EoL>
<BoL> Return the clip path in the form ( path , transform ) , where path is a : class : ` ~matplotlib.path.Path ` instance , and transform is an affine transform to apply to the path before clipping . <EoL>
<BoL> Return the clip rectangle as a : class : ` ~matplotlib.transforms.Bbox ` instance <EoL>
<BoL> Return the dash information as an offset dashlist tuple . <EoL>
<BoL> Return whether the value given by get_alpha ( ) should be used to override any other alpha-channel values . <EoL>
<BoL> Return the object identifier if one is set , None otherwise . <EoL>
<BoL> Gets the current hatch style <EoL>
<BoL> Gets the color to use for hatching . <EoL>
<BoL> Gets the linewidth to use for hatching . <EoL>
<BoL> Returns a Path for the current hatch . <EoL>
<BoL> Return the line join style as one of ( 'miter ' , 'round ' , 'bevel ' ) <EoL>
<BoL> Return the line width in points as a scalar <EoL>
<BoL> returns a tuple of three or four floats from 0-1 . <EoL>
<BoL> Returns the sketch parameters for the artist . <EoL>
<BoL> returns the snap setting which may be : <EoL>
<BoL> returns a url if one is set , None otherwise <EoL>
<BoL> Restore the graphics context from the stack - needed only for backends that save graphics contexts on a stack <EoL>
<BoL> Set the alpha value used for blending - not supported on all backends . If `` alpha=None `` ( the default ) , the alpha components of the foreground and fill colors will be used to set their respective transparencies ( where applicable ) ; otherwise , `` alpha `` will override them . <EoL>
<BoL> True if object should be drawn with antialiased rendering <EoL>
<BoL> Set the capstyle as a string in ( 'butt ' , 'round ' , 'projecting ' ) <EoL>
<BoL> Set the clip path and transformation . Path should be a : class : ` ~matplotlib.transforms.TransformedPath ` instance . <EoL>
<BoL> Set the clip rectangle with sequence ( left , bottom , width , height ) <EoL>
<BoL> Set the dash style for the gc . <EoL>
<BoL> Set the foreground color . fg can be a MATLAB format string , a html hex color string , an rgb or rgba unit tuple , or a float between 0 and 1 . In the latter case , grayscale is used . <EoL>
<BoL> Sets the id . <EoL>
<BoL> Sets the hatch style for filling <EoL>
<BoL> sets the color to use for hatching . <EoL>
<BoL> Set the join style to be one of ( 'miter ' , 'round ' , 'bevel ' ) <EoL>
<BoL> Set the linewidth in points <EoL>
<BoL> Sets the sketch parameters . <EoL>
<BoL> Sets the snap setting which may be : <EoL>
<BoL> Sets the url for links in compatible backends <EoL>
<BoL> *x* , *y* in figure coords , 0,0 = bottom , left <EoL>
<BoL> This is where you actually build the GUI widgets ( called by __init__ ) . The icons `` home.xpm `` , `` back.xpm `` , `` forward.xpm `` , `` hand.xpm `` , `` zoom_to_rect.xpm `` and `` filesave.xpm `` are standard across backends ( there are ppm versions in CVS also ) . <EoL>
<BoL> Update the viewlim and position from the view and position stack for each axes . <EoL>
<BoL> move back up the view lim stack <EoL>
<BoL> Callback for dragging in pan/zoom mode . <EoL>
<BoL> Callback for dragging in zoom mode . <EoL>
<BoL> Redraw the canvases , update the locators . <EoL>
<BoL> Draw a rectangle rubberband to indicate zoom limits . <EoL>
<BoL> Move forward in the view lim stack . <EoL>
<BoL> Restore the original view . <EoL>
<BoL> Activate the pan/zoom tool . pan with left button , zoom with right <EoL>
<BoL> Called whenever a mouse button is pressed . <EoL>
<BoL> Callback for mouse button press in pan/zoom mode . <EoL>
<BoL> Callback for mouse button press in zoom to rect mode . <EoL>
<BoL> Push the current view limits and position onto the stack . <EoL>
<BoL> Callback for mouse button release . <EoL>
<BoL> Callback for mouse button release in pan/zoom mode . <EoL>
<BoL> Callback for mouse button release in zoom to rect mode . <EoL>
<BoL> Remove the rubberband . <EoL>
<BoL> Save the current figure . <EoL>
<BoL> Set the current cursor to one of the : class : ` Cursors ` enums values . <EoL>
<BoL> Enable or disable the back/forward button . <EoL>
<BoL> Display a message on toolbar or in status bar . <EoL>
<BoL> Reset the axes stack . <EoL>
<BoL> Activate zoom to rect mode . <EoL>
<BoL> draw the text by converting them to paths using textpath module . <EoL>
<BoL> return the text path and transform <EoL>
<BoL> Close a grouping element with label *s* Is only currently used by : mod : ` ~matplotlib.backends.backend_svg ` <EoL>
<BoL> Draw a Gouraud-shaded triangle . <EoL>
<BoL> Draw an RGBA image . <EoL>
<BoL> Draws a : class : ` ~matplotlib.path.Path ` instance using the given affine transform . <EoL>
<BoL> Draw the text instance <EoL>
<BoL> Return true if y small numbers are top for renderer Is used for drawing text ( : mod : ` matplotlib.text ` ) and images ( : mod : ` matplotlib.image ` ) only <EoL>
<BoL> Get the factor by which to magnify images passed to : meth : ` draw_image ` . Allows a backend to have images at a different resolution to other artists . <EoL>
<BoL> return the : class : ` matplotlib.texmanager.TexManager ` instance <EoL>
<BoL> Get the width , height , and descent ( offset from the bottom to the baseline ) , in display coords , of the string *s* with : class : ` ~matplotlib.font_manager.FontProperties ` *prop* <EoL>
<BoL> Return an instance of a : class : ` GraphicsContextBase ` <EoL>
<BoL> Open a grouping element with label *s* . <EoL>
<BoL> override this method for renderers that do not necessarily always want to rescale and composite raster images . ( like SVG , PDF , or PS ) <EoL>
<BoL> override this method for renderers that support arbitrary affine transformations in : meth : ` draw_image ` ( most vector backends ) . <EoL>
<BoL> Convert points to display units <EoL>
<BoL> Used in AggRenderer . Switch to a temporary renderer for image filtering effects . <EoL>
<BoL> Used in MixedModeRenderer . Switch to the raster renderer . <EoL>
<BoL> Used in AggRenderer . Switch back to the original renderer . The contents of the temporary renderer is processed with the *filter_func* and is drawn on the original renderer as an image . <EoL>
<BoL> Used in MixedModeRenderer . Switch back to the vector renderer and draw the contents of the raster renderer as an image on the vector renderer . <EoL>
<BoL> Create a new figure manager instance . <EoL>
<BoL> Create a new figure manager instance for the given figure . <EoL>
<BoL> Show all figures . <EoL>
<BoL> Captures the 'tool_message_event ' and set the message <EoL>
<BoL> Display a message on toolbar or in status bar <EoL>
<BoL> Runs all function that have been registered as callbacks . <EoL>
<BoL> Used to set interval on underlying timer object . <EoL>
<BoL> Used to set single shot on underlying timer object . <EoL>
<BoL> Register ` func ` to be called by timer when the event fires . Any additional arguments provided will be passed to ` func ` . <EoL>
<BoL> Remove ` func ` from list of callbacks . ` args ` and ` kwargs ` are optional and used to distinguish between copies of the same function registered to be called with different arguments . <EoL>
<BoL> Start the timer object . ` interval ` is optional and will be used to reset the timer interval first if provided . <EoL>
<BoL> Stop the timer . <EoL>
<BoL> Find the image based on its name . <EoL>
<BoL> Captures the 'tool_removed_event ' signal and removes the tool . <EoL>
<BoL> Captures the 'tool_trigger_ [ name ] ' <EoL>
<BoL> Adds a tool to this container <EoL>
<BoL> Add a toolitem to the container <EoL>
<BoL> Remove a toolitem from the ` ToolContainer ` <EoL>
<BoL> Toggle the toolitem without firing event <EoL>
<BoL> Trigger the tool <EoL>
<BoL> Return the name of the current backend . <EoL>
<BoL> Return the registered default canvas for given file format . Handles deferred import of required backend . <EoL>
<BoL> Register a backend for saving to a given file format . <EoL>
<BoL> Destroy the tool <EoL>
<BoL> Assign a figure to the tool <EoL>
<BoL> Called when this tool gets used <EoL>
<BoL> Draw rubberband <EoL>
<BoL> Remove rubberband <EoL>
<BoL> Call ` draw_rubberband ` or ` remove_rubberband ` based on data <EoL>
<BoL> set the cursor when the tool is triggered <EoL>
<BoL> Process every newly added tool <EoL>
<BoL> Set the cursor <EoL>
<BoL> Call ` matplotlib.backend_managers.ToolManager.message_event ` <EoL>
<BoL> Calls ` enable ` or ` disable ` based on ` toggled ` value <EoL>
<BoL> Check whether all grid lines are in the same visibility state . <EoL>
<BoL> Converts a shortcut string from the notation used in rc config to the standard notation for displaying shortcuts , e.g . 'ctrl+a ' - > 'Ctrl+A ' . <EoL>
<BoL> Release the canvas and disconnect press/release events <EoL>
<BoL> Connect press/release events and lock the canvas <EoL>
<BoL> Disable the toggle tool <EoL>
<BoL> Enable the toggle tool <EoL>
<BoL> Return the original and modified positions for the specified axes <EoL>
<BoL> Add the current figure to the stack of views and positions <EoL>
<BoL> Back one step in the stack of views and positions <EoL>
<BoL> Reset the axes stack <EoL>
<BoL> Forward one step in the stack of views and positions <EoL>
<BoL> Recall the first view and position from the stack <EoL>
<BoL> Push the current view limits and position onto their respective stacks <EoL>
<BoL> Redraw the canvases , update the locators <EoL>
<BoL> Make sure that self.home_views has an entry for all axes present in the figure <EoL>
<BoL> Update the view limits and position for each axes from the current stack position . If any axes are present in the figure that are n't in the current stack position , use the home view limits for those axes and do n't update *any* positions . <EoL>
<BoL> the drag callback in zoom mode <EoL>
<BoL> the _press mouse button in zoom to rect mode callback <EoL>
<BoL> the release mouse button callback in zoom to rect mode <EoL>
<BoL> Add multiple tools to the container . <EoL>
<BoL> Add multiple tools to ` ToolManager ` <EoL>
<BoL> Return the interactive framework whose event loop is currently running , if any , or `` headless '' if no event loop can be started , or None . <EoL>
<BoL> Get the image as an RGBA byte string . <EoL>
<BoL> Draw the figure using the renderer . <EoL>
<BoL> Write the figure to a JPEG file . <EoL>
<BoL> Write the figure to a PNG file . <EoL>
<BoL> Get the image as an ARGB byte string <EoL>
<BoL> Get the image as an RGB byte string . <EoL>
<BoL> Create a MathTextParser for the given backend *output* . <EoL>
<BoL> Returns the offset of the baseline from the bottom of the image in pixels . <EoL>
<BoL> *texstr* A valid mathtext string , e.g. , r'IQ : $ \\sigma_i=15 $ ' <EoL>
<BoL> Writes a tex expression to a PNG file . <EoL>
<BoL> *texstr* A valid mathtext string , e.g. , r'IQ : $ \\sigma_i=15 $ ' <EoL>
<BoL> Helper for : func : ` ~matplotlib.pyplot.gci ` . Do not use elsewhere . <EoL>
<BoL> Make a hashable key out of args and kwargs . <EoL>
<BoL> Add any : class : ` ~matplotlib.artist.Artist ` to the figure . <EoL>
<BoL> Add an axes to the figure . <EoL>
<BoL> Whenever the axes state change , `` func ( self ) `` will be called . <EoL>
<BoL> Return a ` .GridSpec ` that has this figure as a parent . This allows complex layout of axes in the figure . <EoL>
<BoL> Add an ` ~.axes.Axes ` to the figure as part of a subplot arrangement . <EoL>
<BoL> Align the xlabels and ylabels of subplots with the same subplots row or column ( respectively ) if label alignment is being done automatically ( i.e . the label position is not manually set ) . <EoL>
<BoL> Align the ylabels of subplots in the same subplot column if label alignment is being done automatically ( i.e . the label position is not manually set ) . <EoL>
<BoL> Align the ylabels of subplots in the same subplot column if label alignment is being done automatically ( i.e . the label position is not manually set ) . <EoL>
<BoL> Date ticklabels often overlap , so it is useful to rotate them and right align them . <EoL>
<BoL> Clear the figure -- synonym for : meth : ` clf ` . <EoL>
<BoL> Clear the figure . <EoL>
<BoL> Create a colorbar for a ScalarMappable instance , *mappable* . <EoL>
<BoL> Test whether the mouse event occurred on the figure . <EoL>
<BoL> Remove the ` ~matplotlib.axes.Axes ` *ax* from the figure and update the current axes . <EoL>
<BoL> Render the figure using : class : ` matplotlib.backend_bases.RendererBase ` instance *renderer* . <EoL>
<BoL> Draw : class : ` matplotlib.artist.Artist ` instance *a* only . This is available only after the figure is drawn . <EoL>
<BoL> Use `` layoutbox `` to determine pos positions within axes . <EoL>
<BoL> Get the current axes , creating one if necessary . <EoL>
<BoL> Return a list of axes in the Figure . You can access and modify the axes in the Figure through this list . <EoL>
<BoL> Get a list of artists contained in the figure . <EoL>
<BoL> Return a boolean : True means constrained layout is being used . <EoL>
<BoL> Get padding for `` constrained_layout `` . <EoL>
<BoL> Return the resolution in dots per inch as a float . <EoL>
<BoL> Get the edge color of the Figure rectangle . <EoL>
<BoL> Get the face color of the Figure rectangle . <EoL>
<BoL> Return the figure height as a float . <EoL>
<BoL> Return the figure width as a float . <EoL>
<BoL> Return whether the figure frame will be drawn . <EoL>
<BoL> Returns the current size of the figure in inches . <EoL>
<BoL> Return whether ` .tight_layout ` is called when drawing . <EoL>
<BoL> Return a ( tight ) bounding box of the figure in inches . <EoL>
<BoL> Return the figure bounding box in display space . Arguments are ignored . <EoL>
<BoL> Initialize the layoutbox for use in constrained_layout . <EoL>
<BoL> Place a legend on the figure . <EoL>
<BoL> Save the current figure . <EoL>
<BoL> Set the current axes to be a and return a . <EoL>
<BoL> Set the canvas that contains the figure <EoL>
<BoL> Set whether `` constrained_layout `` is used upon drawing . If None , the rcParams [ 'figure.constrained_layout.use ' ] value will be used . <EoL>
<BoL> Set padding for `` constrained_layout `` . Note the kwargs can be passed as a dictionary `` fig.set_constrained_layout ( **paddict ) `` . <EoL>
<BoL> Set the resolution of the figure in dots-per-inch . <EoL>
<BoL> Set the edge color of the Figure rectangle . <EoL>
<BoL> Set the face color of the Figure rectangle . <EoL>
<BoL> Set the height of the figure in inches . <EoL>
<BoL> Set the width of the figure in inches . <EoL>
<BoL> Set whether the figure frame ( background ) is displayed or invisible . <EoL>
<BoL> Set the figure size in inches . <EoL>
<BoL> Set whether and how ` .tight_layout ` is called when drawing . <EoL>
<BoL> If using a GUI backend with pyplot , display the figure window . <EoL>
<BoL> Add a centered title to the figure . <EoL>
<BoL> Add text to figure . <EoL>
<BoL> Blocking call to interact with the figure . <EoL>
<BoL> Creates a new backend-specific subclass of ` backend_bases.Timer ` . <EoL>
<BoL> *targetfig* The figure instance to adjust . <EoL>
<BoL> Get whether the widget is active . <EoL>
<BoL> Return True if event should be ignored . <EoL>
<BoL> Set whether the widget is active . <EoL>
<BoL> Return new_figure_manager , draw_if_interactive and show for pyplot . <EoL>
<BoL> *control_points* : location of contol points . <EoL>
<BoL> returns * 1 if two lines are parralel in same direction * -1 if two lines are parralel in opposite direction * 0 otherwise <EoL>
<BoL> concatenate list of paths into a single path . <EoL>
<BoL> Find control points of the bezier line through c1 , mm , c2 . We simply assume that c1 , mm , c2 which have parametric value 0 , 0.5 , and 1 . <EoL>
<BoL> For a line passing through ( *cx* , *cy* ) and having a angle *t* , return locations of the two points located along its perpendicular line at the distance of *length* . <EoL>
<BoL> Given the quadratic bezier control points *bezier2* , returns control points of quadratic bezier lines roughly parallel to given one separated by *width* . <EoL>
<BoL> fill in the codes if None . <EoL>
<BoL> Being similar to get_parallels , returns control points of two quadrativ bezier lines having a width roughly parallel to given one separated by *width* . <EoL>
<BoL> split a bezier segment defined by its controlpoints *beta* into two separate segment divided at *t* and return their control points . <EoL>
<BoL> divide a path into two segment at the point where inside ( x , y ) becomes False . <EoL>
<BoL> For base class , this just appends an event to events . <EoL>
<BoL> Process an button-1 event ( add a label to a contour ) . <EoL>
<BoL> Process an button-3 event ( remove a label if not in inline mode ) . <EoL>
<BoL> Process a key press event , mapping keys to appropriate mouse clicks . <EoL>
<BoL> Process a mouse click event . <EoL>
<BoL> Process an button-1 event ( add a click if inside axes ) . <EoL>
<BoL> Process an button-3 event ( remove the last click ) . <EoL>
<BoL> Process an button-2 event ( end blocking input ) . <EoL>
<BoL> Event handler ; will be passed to the current figure to retrieve events . <EoL>
<BoL> Removes a click and the associated event from the list of clicks . <EoL>
<BoL> Remove an event from the event list -- by default , the last . <EoL>
<BoL> Process an event . <EoL>
<BoL> Blocking call to retrieve *n* events . <EoL>
<BoL> Disconnect all callbacks . <EoL>
<BoL> For baseclass , do nothing but collect events . <EoL>
<BoL> Blocking call to retrieve a single mouse click or key press . <EoL>
<BoL> Determine if it is a key event . <EoL>
<BoL> Blocking call to retrieve *n* coordinate pairs through mouse clicks . <EoL>
<BoL> Add the coordinates of an event to the list of clicks . <EoL>
<BoL> Remove a click ( by default , the last ) from the list of clicks . <EoL>
<BoL> Sets the default axis ticks and labels <EoL>
<BoL> Converts strings in value to floats using mapping information store in the unit object . <EoL>
<BoL> Sets and updates the : class : ` ~matplotlib.Axis.axis ` units . <EoL>
<BoL> Converts text values into utf-8 or ascii strings . <EoL>
<BoL> Create mapping between unique categorical values and integer ids . <EoL>
<BoL> Maps new values to integer identifiers . <EoL>
<BoL> Register *func* to be called when signal *s* is generated . <EoL>
<BoL> Disconnect the callback registered with callback id *cid* . <EoL>
<BoL> Process signal *s* . <EoL>
<BoL> Iterate over each of the disjoint sets as a list . <EoL>
<BoL> Clean dead weak references from the dictionary . <EoL>
<BoL> Returns all of the items joined with *a* , including itself . <EoL>
<BoL> Join given arguments into the same set . Accepts one or more arguments . <EoL>
<BoL> Returns True if *a* and *b* are members of the same set . <EoL>
<BoL> Return the current element , or None . <EoL>
<BoL> Move the position back and return the current element . <EoL>
<BoL> Raise *o* to the top of the stack . *o* must be present in the stack . <EoL>
<BoL> Empty the stack . <EoL>
<BoL> Return whether the stack is empty . <EoL>
<BoL> Move the position forward and return the current element . <EoL>
<BoL> Push the first element onto the top of the stack . <EoL>
<BoL> Push *o* to the stack at current position . Discard all later elements . <EoL>
<BoL> Remove *o* from the stack . <EoL>
<BoL> Get the elements on the perimeter of `` arr `` , <EoL>
<BoL> Class decorator for defining property aliases . <EoL>
<BoL> Context manager for locking a path . <EoL>
<BoL> Convert a premultiplied ARGB32 buffer to an unmultiplied RGBA8888 buffer . <EoL>
<BoL> Use Fortran ordering to convert ndarrays and lists of iterables to lists of 1D arrays . <EoL>
<BoL> Temporarily set some attributes ; restore original state at context exit . <EoL>
<BoL> Return whether *obj* is a string equal to string *s* . <EoL>
<BoL> Return whether *obj* is a string equal , when lowercased , to string *s* . <EoL>
<BoL> Convert a sequence to a float array ; if input was a masked array , masked values are converted to nans . <EoL>
<BoL> Convert an unmultiplied RGBA8888 buffer to a premultiplied ARGB32 buffer . <EoL>
<BoL> ` warnings.warn ` wrapper that sets *stacklevel* to `` outside Matplotlib '' . <EoL>
<BoL> This generator takes a bunch of iterables that are ordered by func It sends out ordered tuples : : <EoL>
<BoL> Return a list of ( ind0 , ind1 ) such that mask [ ind0 : ind1 ] .all ( ) is True and we cover all such regions <EoL>
<BoL> Remove excess indentation from docstring *s* . <EoL>
<BoL> Find all masked and/or non-finite points in a set of arguments , and return the arguments with only the unmasked points remaining . <EoL>
<BoL> Returns ` True ` if the given writable file-like object requires Unicode to be written to it . <EoL>
<BoL> Returns a generator of flattened nested containers <EoL>
<BoL> Return a sample data file . <EoL>
<BoL> Returns true if *obj* can be hashed <EoL>
<BoL> eturn true if *obj* looks like a numbe <EoL>
<BoL> Return whether the given object is a scalar or string like . <EoL>
<BoL> eturn true if *obj* looks like a file object with a *write* method <EoL>
<BoL> Recursively list files <EoL>
<BoL> Enforces the priority of a local variable over potentially conflicting argument ( s ) from a kwargs dict . The following possible output values are considered in order of priority : <EoL>
<BoL> make directory *newdir* recursively , and set *mode* . Equivalent to : : <EoL>
<BoL> Pass through file objects and context-manage ` .PathLike ` \s . <EoL>
<BoL> *objects* A list of objects to find cycles in . It is often useful to pass in gc.garbage to find the cycles that are preventing some objects from being garbage collected . <EoL>
<BoL> Convert continuous line to mid-steps . <EoL>
<BoL> Convert continuous line to post-steps . <EoL>
<BoL> Convert continuous line to pre-steps . <EoL>
<BoL> eturn the memory consumed by process <EoL>
<BoL> make sure *args* are equal len before zipping <EoL>
<BoL> Converts dictview object to list <EoL>
<BoL> Resample an array with `` steps - 1 `` points between original point pairs . <EoL>
<BoL> emove latex formatting from mathtext <EoL>
<BoL> *fname* can be an ` os.PathLike ` or a file handle . Support for gzipped files is automatic , if the filename ends in .gz . *flag* is a read/write flag for : func : ` file ` <EoL>
<BoL> Returns a list of dictionaries of data which can be used to draw a series of violin plots . <EoL>
<BoL> Generates the requested cmap from its *name* . The lut size is *lutsize* . <EoL>
<BoL> Reverses cmap specification *spec* , can handle both dict and tuple type specs . <EoL>
<BoL> Helper such that `` _reverser ( f ) ( x ) == f ( 1 - x ) `` . <EoL>
<BoL> Get a colormap instance , defaulting to rc values if *name* is None . <EoL>
<BoL> Can only handle specification *data* in dictionary format . <EoL>
<BoL> Returns the sizes of the elements in the collection . The value represents the 'area ' of the element . <EoL>
<BoL> Set the sizes of each member of the collection . <EoL>
<BoL> *xranges* sequence of ( *xmin* , *xwidth* ) <EoL>
<BoL> This allows one to delay initialization of the vertices . <EoL>
<BoL> This allows one to initialize vertices with path codes . <EoL>
<BoL> Create a BrokenBarHCollection to plot horizontal bars from over the regions in *x* where *where* is True . The bars range on the y-axis from *ymin* to *ymax* <EoL>
<BoL> *sizes* Gives the area of the circle in points^2 <EoL>
<BoL> Calculate transforms immediately before drawing . <EoL>
<BoL> add one or more events at the specified positions <EoL>
<BoL> get the color of the lines used to mark each event <EoL>
<BoL> get the length of the lines used to mark each event <EoL>
<BoL> get the offset of the lines used to mark each event <EoL>
<BoL> Get the width of the lines used to mark each event . <EoL>
<BoL> get the orientation of the event line , may be : [ 'horizontal ' | 'vertical ' ] <EoL>
<BoL> return an array containing the floating-point values of the positions <EoL>
<BoL> Returns -- -- -- - segments : list List of segments in the LineCollection . Each list item contains an array of vertices . <EoL>
<BoL> True if the eventcollection is horizontal , False if vertical <EoL>
<BoL> Set the color ( s ) of the LineCollection . <EoL>
<BoL> set the length of the lines used to mark each event <EoL>
<BoL> set the offset of the lines used to mark each event <EoL>
<BoL> set the orientation of the event line [ 'horizontal ' | 'vertical ' | None ] defaults to 'horizontal ' if not specified or None <EoL>
<BoL> set the positions of the events to the specified value <EoL>
<BoL> switch the orientation of the event line , either from vertical to horizontal or vice versus <EoL>
<BoL> *patches* a sequence of Patch objects . This list may include a heterogeneous assortment of different patch types . <EoL>
<BoL> *paths* is a sequence of : class : ` matplotlib.path.Path ` instances . <EoL>
<BoL> *verts* is a sequence of ( *verts0* , *verts1* , ... ) where *verts_i* is a sequence of *xy* tuples of vertices , or an equivalent : mod : ` numpy ` array of shape ( *nv* , 2 ) . <EoL>
<BoL> Converts a given mesh into a sequence of : class : ` matplotlib.path.Path ` objects for easier rendering by backends that do not directly support meshes . <EoL>
<BoL> Draw the colors using : meth : ` ~matplotlib.axes.Axes.pcolormesh ` ; optionally add separators . <EoL>
<BoL> number of boundaries **before** extension of ends <EoL>
<BoL> Make an axes patch and outline . <EoL>
<BoL> Return the separator line segments ; helper for _add_solids . <EoL>
<BoL> Returns whether the lower limit is open ended . <EoL>
<BoL> Returns whether the uper limit is open ended . <EoL>
<BoL> Based on the colormap and extend variable , return the number of boundaries . <EoL>
<BoL> Set : attr : ` vmin ` and : attr : ` vmax ` attributes to the first and last boundary excluding extended end boundaries . <EoL>
<BoL> Get the lengths of colorbar extensions . <EoL>
<BoL> This code looks at the norm being used by the colorbar and decides what locator and formatter to use . If `` locator `` has already been set by hand , it just returns `` self.locator , self.formatter `` . <EoL>
<BoL> Given a set of color data values , return their corresponding colorbar data coordinates . <EoL>
<BoL> Return X , Y , the coordinate arrays for the colorbar pcolormesh . These are suitable for a vertical colorbar ; swapping and transposition for a horizontal colorbar are done outside this function . <EoL>
<BoL> Return *x* , *y* arrays of colorbar bounding polygon , taking orientation into account . <EoL>
<BoL> Set the : attr : ` _boundaries ` and : attr : ` _values ` attributes based on the input boundaries and values . Input boundaries can be *self.boundaries* or the argument *b* . <EoL>
<BoL> Return colorbar data coordinates for the boundaries of a proportional colorbar . <EoL>
<BoL> Return the sequence of ticks ( colorbar data locations ) , ticklabels ( strings ) , and the corresponding offset string . <EoL>
<BoL> Return colorbar data coordinates for *N* uniformly spaced boundaries , plus ends if required . <EoL>
<BoL> Return if we should use an adjustable tick locator or a fixed one . ( check is used twice so factored out here ... ) <EoL>
<BoL> Add the lines from a non-filled : class : ` ~matplotlib.contour.ContourSet ` to the colorbar . <EoL>
<BoL> Calculate any free parameters based on the current cmap and norm , and do all the drawing . <EoL>
<BoL> Return the x ticks as a list of locations <EoL>
<BoL> Turns off the minor ticks on the colorbar . <EoL>
<BoL> Turns on the minor ticks on the colorbar without extruding into the `` extend regions '' . <EoL>
<BoL> Updates this colorbar to match the mappable 's properties . <EoL>
<BoL> Remove this colorbar from the figure . If the colorbar was created with `` use_gridspec=True `` then restore the gridspec to its previous value . <EoL>
<BoL> Label the long axis of the colorbar <EoL>
<BoL> set tick labels . Tick labels are updated immediately unless update_ticks is *False* . To manually update the ticks , call *update_ticks* method explicitly . <EoL>
<BoL> Set tick locations . <EoL>
<BoL> Destroy and rebuild the colorbar . <EoL>
<BoL> update solid , lines , etc . <EoL>
<BoL> Force the update of the ticks and ticklabels . This must be called whenever the tick locator and/or tick formatter changes . <EoL>
<BoL> Draw lines on the colorbar . <EoL>
<BoL> Remove this colorbar from the figure <EoL>
<BoL> Draw the colors using : class : ` ~matplotlib.patches.Patch ` ; optionally add separators . <EoL>
<BoL> This ticker needs to know the *colorbar* so that it can access its *vmin* and *vmax* . Otherwise it is the same as ` ~.ticker.AutoLocator ` . <EoL>
<BoL> This ticker needs to know the *colorbar* so that it can access its *vmin* and *vmax* . <EoL>
<BoL> _ColorbarLogLocator ( colorbar , *args , **kwargs ) <EoL>
<BoL> Creates a colorbar on the given axes for the given mappable . <EoL>
<BoL> Resize and reposition a parent axes , and return a child axes suitable for a colorbar . This function is similar to make_axes . Prmary differences are <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Raises -- -- -- ValueError BoundaryNorm is not invertible , so calling this method will always raise an error <EoL>
<BoL> Homogenize the input *value* for easy and efficient normalization . <EoL>
<BoL> Generate the lookup table , self._lut <EoL>
<BoL> Return a new color map with *lutsize* entries . <EoL>
<BoL> Make a reversed instance of the Colormap . <EoL>
<BoL> Combines an rgb image with an intensity map using `` overlay '' blending . <EoL>
<BoL> Combines an rgb image with an intensity map using `` soft light '' blending . Uses the `` pegtop '' formula . <EoL>
<BoL> Calculates the illumination intensity for a surface using the defined azimuth and elevation for the light source . <EoL>
<BoL> Calculates the illumination intensity for the normal vectors of a surface using the defined azimuth and elevation for the light source . <EoL>
<BoL> If *vmin* or *vmax* is not given , they are initialized from the minimum and maximum value respectively of the first input processed . <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Normalize *value* data in the `` [ vmin , vmax ] `` interval into the `` [ 0.0 , 1.0 ] `` interval and return it . <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Inverse inplace Transformation . <EoL>
<BoL> Inplace transformation . <EoL>
<BoL> Calculates vmin and vmax in the transformed system . <EoL>
<BoL> Set *vmin* , *vmax* to min , max of *A* . <EoL>
<BoL> autoscale only None-valued vmin or vmax . <EoL>
<BoL> Return whether *c* can be interpreted as an item in the color cycle . <EoL>
<BoL> Convert *c* to an RGBA color , with no support for color-cycle syntax . <EoL>
<BoL> A helper routine to generate a cmap and a norm instance which behave similar to contourf 's levels and colors arguments . <EoL>
<BoL> Return the global mapping of names to named colors . <EoL>
<BoL> Convert *c* to an RGB color , silently dropping the alpha channel . <EoL>
<BoL> convert hsv values in a numpy array to rgb values all values assumed to be in range [ 0 , 1 ] <EoL>
<BoL> Return whether *c* can be interpreted as an RGB ( A ) color . <EoL>
<BoL> Create an *N* -element 1-d lookup table <EoL>
<BoL> convert float rgb values ( in the range [ 0 , 1 ] ) , in a numpy array to hsv values . <EoL>
<BoL> Compare two colors to see if they are the same . <EoL>
<BoL> Convert *c* to a ( n , 4 ) array of RGBA colors . <EoL>
<BoL> Update the location and size of the bbox ( ` .patches.FancyBboxPatch ` ) , and draw . <EoL>
<BoL> Return the distance from the given points to the boundaries of a rotated box , in pixels . <EoL>
<BoL> return the extent ( bbox ) of the text together with multiple-alignment information . Note that it returns an extent of a rotated text when necessary . <EoL>
<BoL> Return the width of a given text string , in pixels . <EoL>
<BoL> Return the maximum line width for wrapping text based on the current orientation . <EoL>
<BoL> Return a copy of the text with new lines added , so that the text is wrapped relative to the parent figure . <EoL>
<BoL> Get the ( possibly unit converted ) transformed x , y in display coords . <EoL>
<BoL> Test whether the mouse event occurred in the patch . <EoL>
<BoL> Draws the ` .Text ` object to the given *renderer* . <EoL>
<BoL> Return the bbox Patch , or None if the ` .patches.FancyBboxPatch ` is not made . <EoL>
<BoL> Return the list of font families used for font lookup <EoL>
<BoL> Return the font name as string <EoL>
<BoL> Return the font size as integer <EoL>
<BoL> Return the font style as string <EoL>
<BoL> Return the font variant as a string <EoL>
<BoL> Get the font weight as string or number <EoL>
<BoL> Return the horizontal alignment as string . Will be one of 'left ' , 'center ' or 'right ' . <EoL>
<BoL> Return a hashable tuple of properties . <EoL>
<BoL> Get the text rotation mode . <EoL>
<BoL> Get the font stretch as a string or number <EoL>
<BoL> Return whether this ` Text ` object uses TeX for rendering . <EoL>
<BoL> Return the vertical alignment as string . Will be one of 'top ' , 'center ' , 'bottom ' or 'baseline ' . <EoL>
<BoL> Return the ` Bbox ` bounding the text , in display units . <EoL>
<BoL> Return the wrapping state for the text . <EoL>
<BoL> Returns a cleaned string and a boolean flag . <EoL>
<BoL> Set the background color of the text by updating the bbox . <EoL>
<BoL> Draw a bounding box around self . <EoL>
<BoL> Set the artist 's clip ` ~.transforms.Bbox ` . <EoL>
<BoL> Set whether artist uses clipping . <EoL>
<BoL> Set the artist 's clip path , which may be : <EoL>
<BoL> Set the foreground color of the text <EoL>
<BoL> Set the font family . May be either a single string , or a list of strings in decreasing priority . <EoL>
<BoL> alias for ` .set_family ` <EoL>
<BoL> Set the font properties that control the text . <EoL>
<BoL> Set the font size . May be either a size string , relative to the default font size , or an absolute font size in points . <EoL>
<BoL> Set the font stretch ( horizontal condensation or expansion ) . <EoL>
<BoL> Set the font style . <EoL>
<BoL> Set the font variant , either 'normal ' or 'small-caps ' . <EoL>
<BoL> Set the font weight . <EoL>
<BoL> Set the horizontal alignment to one of <EoL>
<BoL> Set the line spacing as a multiple of the font size . Default is 1.2 . <EoL>
<BoL> Set the alignment for multiple lines layout . The layout of the bounding box of all the lines is determined bu the horizontalalignment and verticalalignment properties , but the multiline text within that box can be <EoL>
<BoL> Set the ( *x* , *y* ) position of the text . <EoL>
<BoL> Set the rotation of the text . <EoL>
<BoL> Set text rotation mode . <EoL>
<BoL> Set the text string *s* . <EoL>
<BoL> Set the vertical alignment <EoL>
<BoL> Set the wrapping state for the text . <EoL>
<BoL> Set the *x* position of the text . <EoL>
<BoL> Set the *y* position of the text . <EoL>
<BoL> Update properties from a dictionary . <EoL>
<BoL> Update the location and the size of the bbox . <EoL>
<BoL> Copy properties from other to self . <EoL>
<BoL> Add contour label using : class : ` ~matplotlib.text.Text ` class . <EoL>
<BoL> Add contour label using : class : ` ClabelText ` class . <EoL>
<BoL> This function calculates the appropriate label rotation given the linecontour coordinates in screen units , the index of the label location and the label width . <EoL>
<BoL> Return x , y , and the index of a label location . <EoL>
<BoL> Return the width of the label in points . <EoL>
<BoL> This computes actual onscreen label width . <EoL>
<BoL> Get the text of the label . <EoL>
<BoL> Find good place to draw a label ( relatively flat part of the contour ) . <EoL>
<BoL> Defaults to removing last label , but any index can be supplied <EoL>
<BoL> Set the label properties - color , fontsize , text . <EoL>
<BoL> Select contour levels to span the data . <EoL>
<BoL> Determine the contour levels and store in self.levels . <EoL>
<BoL> Override in derived classes to create and return allsegs and allkinds . allkinds can be None . <EoL>
<BoL> Return ( lowers , uppers ) for filled contours . <EoL>
<BoL> Process *args* and *kwargs* ; override in derived classes . <EoL>
<BoL> Color argument processing for contouring . <EoL>
<BoL> Assign values to : attr : ` layers ` based on : attr : ` levels ` , adding extended layers as needed if contours are filled . <EoL>
<BoL> Finds contour that is closest to a point . Defaults to measuring distance in pixels ( screen space - useful for manual contour labeling ) , but this can be controlled via a keyword argument . <EoL>
<BoL> eturns alpha to be applied to all ContourSet artists <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` instance used by this ContourSet . <EoL>
<BoL> Return a list of artists and labels suitable for passing through to : func : ` plt.legend ` which represent this ContourSet . <EoL>
<BoL> Set the alpha blending value for all ContourSet artists . *alpha* must be between 0 ( transparent ) and 1 ( opaque ) . <EoL>
<BoL> For functions like contour , check that the dimensions of the input arrays match ; if x and y are 1D , convert them to 2D using meshgrid . <EoL>
<BoL> Compute `` allsegs `` and `` allkinds `` using C extension . <EoL>
<BoL> Return X , Y arrays such that contour ( Z ) will match imshow ( Z ) if origin is not None . <EoL>
<BoL> Process args and kwargs . <EoL>
<BoL> Find the closest point to p0 on line segment connecting p1 and p2 . <EoL>
<BoL> lc : coordinates of vertices point : coordinates of test point <EoL>
<BoL> Return whether first and last object in a sequence are the same . These are presumably coordinates on a polygonal curve , in which case this function tests if that curve is closed . <EoL>
<BoL> Return the : class : ` ~matplotlib.units.AxisInfo ` for *unit* . <EoL>
<BoL> If *value* is not already a number or sequence of numbers , convert it with : func : ` date2num ` . <EoL>
<BoL> Return the tzinfo instance of *x* or of its first element , or None <EoL>
<BoL> Return the locations of the ticks <EoL>
<BoL> *tz* is a : class : ` tzinfo ` instance . <EoL>
<BoL> Return the values of the located ticks given **vmin** and **vmax** . <EoL>
<BoL> *t* is a sequence of dates ( floating point days ) . *fmt* is a : func : ` strftime ` format string . <EoL>
<BoL> *interval* is the interval between each iteration . For example , if `` interval=2 `` , mark every second microsecond . <EoL>
<BoL> Return the number of units for each tick . <EoL>
<BoL> Return how many days a unit of the locator is ; used for intelligent autoscaling . <EoL>
<BoL> Mark every second in *bysecond* ; *bysecond* can be an int or sequence . Default is to tick every second : `` bysecond = range ( 60 ) `` <EoL>
<BoL> Assert that datetimes *d1* and *d2* are within *epsilon* microseconds . <EoL>
<BoL> Assert that float ordinals *o1* and *o2* are within *epsilon* microseconds . <EoL>
<BoL> Convert ` numpy.datetime64 ` or an ndarray of those types to Gregorian date as UTC float . <EoL>
<BoL> Convert Gregorian float of the date , preserving hours , minutes , seconds and microseconds . Return value is a ` .datetime ` . <EoL>
<BoL> Retrieve the preferred timeszone from the rcParams dictionary . <EoL>
<BoL> Convert : mod : ` datetime ` or : mod : ` date ` to the Gregorian date as UTC float days , preserving hours , minutes , seconds and microseconds . Return value is a : func : ` float ` . <EoL>
<BoL> Args : b : byte input to be converted Returns : A date2num float <EoL>
<BoL> Args : fmt : any valid strptime format is supported encoding : encoding to use on byte input ( default : 'utf-8 ' ) <EoL>
<BoL> Convert datetime objects to Matplotlib dates . <EoL>
<BoL> Create a date locator with *numticks* ( approx ) and a date formatter for *span* in days . Return value is ( locator , formatter ) . <EoL>
<BoL> Convert a date string to a datenum using : func : ` dateutil.parser.parse ` . <EoL>
<BoL> Return a sequence of equally spaced Matplotlib dates . <EoL>
<BoL> Convert an epoch or sequence of epochs to the new date format , that is days since 0001 . <EoL>
<BoL> Return hours as days . <EoL>
<BoL> Convert a Julian date ( or sequence ) to a Matplotlib date ( or sequence ) . <EoL>
<BoL> Return minutes as days . <EoL>
<BoL> Convert mx : class : ` datetime ` instance ( or sequence of mx instances ) to the new date format . <EoL>
<BoL> Convert Matplotlib dates to ` ~datetime.datetime ` objects . <EoL>
<BoL> Convert days since 0001 to epoch . *d* can be a number or sequence . <EoL>
<BoL> Convert a Matplotlib date ( or sequence ) to a Julian date ( or sequence ) . <EoL>
<BoL> Convert number of days to a ` ~datetime.timedelta ` object . <EoL>
<BoL> Decorator function that allows rrule methods to handle tzinfo . <EoL>
<BoL> Return seconds as days . <EoL>
<BoL> s : string to be converted return value : a date2num float <EoL>
<BoL> fmt : any valid strptime format is supported <EoL>
<BoL> Return weeks as days . <EoL>
<BoL> In the case where the params is a mutable sequence ( list or dictionary ) and it may change before this class is called , one may explicitly use a reference to the params rather than using *args or **kwargs which will copy the values and not reference them . <EoL>
<BoL> A decorator that will copy the docstring from the source and then dedent it <EoL>
<BoL> A special case of the interpd that first performs a dedent on the incoming docstring <EoL>
<BoL> Context manager enter method , does nothing . <EoL>
<BoL> Context manager exit method , closes the underlying file if it is open . <EoL>
<BoL> Read the data from the file named *filename* and convert TeX 's internal units to units of *dpi* per inch . <EoL>
<BoL> Iterate through the pages of the file . <EoL>
<BoL> Read and return an integer argument *nbytes* long . Signedness is determined by the *signed* keyword . <EoL>
<BoL> Output the text and boxes belonging to the most recent page . page = dvi._output ( ) <EoL>
<BoL> Read one page from the file . Return True if successful , False if there were no more pages . <EoL>
<BoL> Close the underlying file if it is open . <EoL>
<BoL> Height and depth of char in dvi units . For internal use by dviread.py . <EoL>
<BoL> Width of char in dvi units . For internal use by dviread.py . <EoL>
<BoL> Parse the font mapping file . <EoL>
<BoL> Read one page from the file . Return True if successful , False if there were no more pages . <EoL>
<BoL> Read *bytes* bytes , returning the bytes interpreted as a signed integer if *signed* is true , unsigned otherwise . <EoL>
<BoL> Optionally signed , length *delta*+1 <EoL>
<BoL> Return *delta* without reading anything more from the dvi file <EoL>
<BoL> Signed , length *delta* <EoL>
<BoL> Signed , length *delta*+1 <EoL>
<BoL> Unsigned length *delta*+1 <EoL>
<BoL> Decorator for dispatch by opcode . Sets the values in *table* from *min* to *max* to this method , adds a check that the Dvi state matches *state* if not None , reads arguments from the file according to *args* . <EoL>
<BoL> Convert from two 's complement to negative . <EoL>
<BoL> Multiply two numbers in 20.12 fixed point format . <EoL>
<BoL> Add Axes *a* , with key *key* , to the stack , and return the stack . <EoL>
<BoL> Return a list of the Axes instances that have been added to the figure . <EoL>
<BoL> Move the given axes , which must already exist in the stack , to the top . <EoL>
<BoL> Return a tuple of `` ( key , axes ) `` for the active axes . <EoL>
<BoL> Return the Axes instance that was added with *key* . If it is not present , return *None* . <EoL>
<BoL> Remove the axes from the stack . <EoL>
<BoL> Create a new : class : ` BboxTransformTo ` that linearly transforms points from the unit bounding box to *boxout* . <EoL>
<BoL> return True if the image is better to be drawn unsampled . The derived class needs to override it . <EoL>
<BoL> Get the image extent : left , right , bottom , top <EoL>
<BoL> Set the image array . <EoL>
<BoL> Draw the : class : ` TextWithDash ` object to the given *renderer* . <EoL>
<BoL> Get the direction dash . 1 is before the text and 0 is after . <EoL>
<BoL> Get the length of the dash . <EoL>
<BoL> Get the extra spacing between the dash and the text , in canvas units . <EoL>
<BoL> Get the extra spacing between the dash and the specified text position , in canvas units . <EoL>
<BoL> Get the rotation of the dash in degrees . <EoL>
<BoL> Return a hashable tuple of properties . <EoL>
<BoL> Return the text angle as float in degrees . <EoL>
<BoL> Return a : class : ` ~matplotlib.transforms.Bbox ` object bounding the text , in display units . <EoL>
<BoL> Set the direction of the dash following the text . <EoL>
<BoL> Set the length of the dash , in canvas units . <EoL>
<BoL> Set the `` pad '' of the TextWithDash , which is the extra spacing between the dash and the text , in canvas units . <EoL>
<BoL> Set the `` push '' of the TextWithDash , which is the extra spacing between the beginning of the dash and the specified position . <EoL>
<BoL> Set the rotation of the dash , in degrees . <EoL>
<BoL> Set the figure instance the artist belongs to . <EoL>
<BoL> Set the ( *x* , *y* ) position of the : class : ` TextWithDash ` . <EoL>
<BoL> Set the : class : ` matplotlib.transforms.Transform ` instance used by this artist . <EoL>
<BoL> Set the *x* position of the : class : ` TextWithDash ` . <EoL>
<BoL> Set the *y* position of the : class : ` TextWithDash ` . <EoL>
<BoL> Computes the actual *x* , *y* coordinates for text based on the input *x* , *y* and the *dashlength* . Since the rotation is with respect to the actual canvas 's coordinates we need to map back and forth . <EoL>
<BoL> Calculate the width and height for a figure with a specified aspect ratio . <EoL>
<BoL> Get a list of acceptable projection names . <EoL>
<BoL> Search the font list for the font that most closely matches the : class : ` FontProperties ` *prop* . <EoL>
<BoL> Return the default font size . <EoL>
<BoL> Return the default font weight . <EoL>
<BoL> Returns a match score between the list of font families in *families* and the font family name *family2* . <EoL>
<BoL> Returns a match score between *size1* and *size2* . <EoL>
<BoL> Returns a match score between *stretch1* and *stretch2* . <EoL>
<BoL> Returns a match score between *style1* and *style2* . <EoL>
<BoL> Returns a match score between *variant1* and *variant2* . <EoL>
<BoL> Returns a match score between *weight1* and *weight2* . <EoL>
<BoL> Set the default font weight . The initial value is 'normal ' . <EoL>
<BoL> Update the font dictionary with new font files . Currently not implemented . <EoL>
<BoL> Return a deep copy of self <EoL>
<BoL> Return a list of font names that comprise the font family . <EoL>
<BoL> Return the filename of the associated font . <EoL>
<BoL> Get a fontconfig pattern suitable for looking up the font as specified with fontconfig 's `` fc-match `` utility . <EoL>
<BoL> Return the name of the font that best matches the font properties . <EoL>
<BoL> Return the font size . <EoL>
<BoL> Return the font style . Values are : 'normal ' , 'italic ' or 'oblique ' . <EoL>
<BoL> Return the font stretch or width . Options are : 'ultra-condensed ' , 'extra-condensed ' , 'condensed ' , 'semi-condensed ' , 'normal ' , 'semi-expanded ' , 'expanded ' , 'extra-expanded ' , 'ultra-expanded ' . <EoL>
<BoL> Return the font variant . Values are : 'normal ' or 'small-caps ' . <EoL>
<BoL> Set the font weight . Options are : A numeric value in the range 0-1000 or one of 'light ' , 'normal ' , 'regular ' , 'book ' , 'medium ' , 'roman ' , 'semibold ' , 'demibold ' , 'demi ' , 'bold ' , 'heavy ' , 'extra bold ' , 'black ' <EoL>
<BoL> Change the font family . May be either an alias ( generic name is CSS parlance ) , such as : 'serif ' , 'sans-serif ' , 'cursive ' , 'fantasy ' , or 'monospace ' , a real font name or a list of real font names . Real font names are not supported when ` text.usetex ` is ` True ` . <EoL>
<BoL> Set the filename of the fontfile to use . In this case , all other properties will be ignored . <EoL>
<BoL> Set the properties by parsing a fontconfig *pattern* . <EoL>
<BoL> Set the font size . Either an relative value of 'xx-small ' , ' x-small ' , 'small ' , 'medium ' , 'large ' , ' x-large ' , 'xx-large' or an absolute font size , e.g. , 12 . <EoL>
<BoL> Set the font style . Values are : 'normal ' , 'italic ' or 'oblique ' . <EoL>
<BoL> Set the font stretch or width . Options are : 'ultra-condensed ' , 'extra-condensed ' , 'condensed ' , 'semi-condensed ' , 'normal ' , 'semi-expanded ' , 'expanded ' , 'extra-expanded ' or 'ultra-expanded ' , or a numeric value in the range 0-1000 . <EoL>
<BoL> Set the font variant . Values are : 'normal ' or 'small-caps ' . <EoL>
<BoL> Set the font weight . May be either a numeric value in the range 0-1000 or one of 'ultralight ' , 'light ' , 'normal ' , 'regular ' , 'book ' , 'medium ' , 'roman ' , 'semibold ' , 'demibold ' , 'demi ' , 'bold ' , 'heavy ' , 'extra bold ' , 'black ' <EoL>
<BoL> Get list of font files on OS X . <EoL>
<BoL> Extract information from an AFM font file . <EoL>
<BoL> A function to create a font lookup list . <EoL>
<BoL> Search for fonts in the specified font paths . <EoL>
<BoL> Given a dictionary of key/value pairs , generates a fontconfig pattern string . <EoL>
<BoL> Return the location of the cache directory . <EoL>
<BoL> List the font filenames known to ` fc-list ` having the given extension . <EoL>
<BoL> Return a list of file extensions extensions that are synonyms for the given file extension *fileext* . <EoL>
<BoL> Dumps a data structure as JSON in the named file . <EoL>
<BoL> Loads a data structure as JSON from the named file . <EoL>
<BoL> Return a list of all fonts matching any of the extensions , found recursively under the directory . <EoL>
<BoL> Extract information from a TrueType font file . <EoL>
<BoL> Return the user-specified font directory for Win32 . This is looked up from the registry key : : <EoL>
<BoL> Search for fonts in the specified font directory , or use the system directories if none given . A list of TrueType font filenames are returned by default , or AFM fonts if *fontext* == 'afm ' . <EoL>
<BoL> Parse the given fontconfig *pattern* and return a dictionary of key/value pairs useful for initializing a : class : ` font_manager.FontProperties ` object . <EoL>
<BoL> Implementation of + operator - returns : class : ` And ` . Adding strings to a ParserElement converts them to : class : ` Literal ` s by default . <EoL>
<BoL> Implementation of & operator - returns : class : ` Each ` <EoL>
<BoL> Shortcut for : class : ` setResultsName ` , with `` listAllMatches=False `` . <EoL>
<BoL> Implementation of ~ operator - returns : class : ` NotAny ` <EoL>
<BoL> Implementation of | operator - returns : class : ` MatchFirst ` <EoL>
<BoL> Implementation of + operator when left operand is not a : class : ` ParserElement ` <EoL>
<BoL> Implementation of & operator when left operand is not a : class : ` ParserElement ` <EoL>
<BoL> Implementation of | operator when left operand is not a : class : ` ParserElement ` <EoL>
<BoL> Implementation of - operator when left operand is not a : class : ` ParserElement ` <EoL>
<BoL> Implementation of ^ operator when left operand is not a : class : ` ParserElement ` <EoL>
<BoL> Implementation of - operator , returns : class : ` And ` with error stop <EoL>
<BoL> Implementation of ^ operator - returns : class : ` Or ` <EoL>
<BoL> Add a boolean predicate function to expression 's list of parse actions . <EoL>
<BoL> Add one or more parse actions to expression 's list of parse actions . See : class : ` setParseAction ` . <EoL>
<BoL> Make a copy of this : class : ` ParserElement ` . Useful for defining different parse actions for the same parsing pattern , using copies of the original parse element . <EoL>
<BoL> Enables `` packrat '' parsing , which adds memoizing to the parsing logic . <EoL>
<BoL> Define expression to be ignored ( e.g. , comments ) while doing pattern matching ; may be called repeatedly , to define multiple comment or other ignorable patterns . <EoL>
<BoL> Set class to be used for inclusion of string literals into a parser . <EoL>
<BoL> Disables the skipping of whitespace before matching the characters in the : class : ` ParserElement ` 's defined pattern . This is normally only used internally by the pyparsing module , but may be needed in some whitespace-sensitive grammars . <EoL>
<BoL> Method for quick testing of a parser against a test string . Good for simple inline microtests of sub expressions while building up larger parser . <EoL>
<BoL> Execute the parse expression on the given file or filename . If a filename is specified ( instead of a file object ) , the entire file is opened , read , and closed before parsing . <EoL>
<BoL> Execute the parse expression with the given string . This is the main interface to the client code , once the complete expression has been built . <EoL>
<BoL> Overrides default behavior to expand `` < TAB > `` s to spaces before parsing the input string . Must be called before `` parseString `` when the input grammar contains elements that match `` < TAB > `` characters . <EoL>
<BoL> Scan the input string for expression matches . <EoL>
<BoL> Another extension to : class : ` scanString ` , simplifying the access to the tokens found to match the given parse expression . May be called with optional `` maxMatches `` argument , to clip searching after ' n ' matches are found . <EoL>
<BoL> Method to invoke the Python pdb debugger when this element is about to be parsed . Set `` breakFlag `` to True to enable , False to disable . <EoL>
<BoL> Enable display of debugging messages while doing pattern matching . Set `` flag `` to True to enable , False to disable . <EoL>
<BoL> Enable display of debugging messages while doing pattern matching . <EoL>
<BoL> Overrides the default whitespace chars <EoL>
<BoL> Define action to perform if parsing fails at this expression . <EoL>
<BoL> Define name for this expression , makes debugging and exception messages clearer . <EoL>
<BoL> Define one or more actions to perform when successfully matching parse element definition . Parse action fn is a callable method with 0-3 arguments , called as `` fn ( s , loc , toks ) `` , `` fn ( loc , toks ) `` , `` fn ( toks ) `` , or just `` fn ( ) `` , where : <EoL>
<BoL> Define name for referencing matching tokens as a nested attribute of the returned parse results . NOTE : this returns a *copy* of the original : class : ` ParserElement ` object ; this is so that the client can define a basic element , such as an integer , and reference it in multiple places with different names . <EoL>
<BoL> Overrides the default whitespace chars <EoL>
<BoL> Generator method to split a string using the given expression as a separator . May be called with optional `` maxsplit `` argument , to limit the number of splits ; and the optional `` includeSeparators `` argument ( default= `` False `` ) , if the separating matching text should be included in the split results . <EoL>
<BoL> Suppresses the output of this : class : ` ParserElement ` ; useful to keep punctuation from cluttering up returned output . <EoL>
<BoL> Extension to : class : ` scanString ` , to modify matching text with modified tokens that may be returned from a parse action . <EoL>
<BoL> Check defined expressions for valid structure , check for infinite recursive definitions . <EoL>
<BoL> supported attributes by name are : - lineno - returns the line number of the exception text - col - returns the column number of the exception text - line - returns the line containing the exception text <EoL>
<BoL> internal factory method to simplify creating one type of ParseException from another - avoids having __init__ signature conflicts among subclasses <EoL>
<BoL> Method to take an exception and translate the Python internal traceback into a list of the pyparsing expressions that caused the exception to be raised . <EoL>
<BoL> Extracts the exception line from the input string , and marks the location of the exception with a special symbol . <EoL>
<BoL> The parameters `` pattern `` and `` flags `` are passed to the `` re.compile ( ) `` function as-is . See the Python ` re module < https : //docs.python.org/3/library/re.html > ` _ module for an explanation of the acceptable patterns and flags . <EoL>
<BoL> Return Regex with an attached parse action to transform the parsed result as if called using ` re.sub ( expr , repl , string ) < https : //docs.python.org/3/library/re.html # re.sub > ` _ . <EoL>
<BoL> Return the string representing the configuration directory . <EoL>
<BoL> Return the user 's home directory . <EoL>
<BoL> The number of rows and number of columns of the grid need to be set . Optionally , the ratio of heights and widths of rows and columns can be specified . <EoL>
<BoL> Return a dictionary of subplot layout parameters . <EoL>
<BoL> Get the topmost SubplotSpec instance associated with the subplot . <EoL>
<BoL> Test whether the mouse event occurred within the image . <EoL>
<BoL> Create a new : class : ` BboxTransform ` that linearly transforms points from *boxin* to *boxout* . <EoL>
<BoL> kwargs are identical to those for AxesImage , except that 'nearest ' and 'bilinear ' are the only supported 'interpolation' options . <EoL>
<BoL> return False . Do not use unsampled image . <EoL>
<BoL> Set the grid for the pixel centers , and the pixel values . <EoL>
<BoL> Get the cursor data for a given event <EoL>
<BoL> Set the grid for the rectangle boundaries , and the data values . <EoL>
<BoL> Convert an RGB image to RGBA , as required by the image resample C++ extension . <EoL>
<BoL> Composite a number of RGBA images into one . The images are composited in the order in which they appear in the ` images ` list . <EoL>
<BoL> Read an image from a file into an array . <EoL>
<BoL> Load a ` PIL image ` _ and return it as a numpy array . <EoL>
<BoL> Set interactive mode to boolean b . <EoL>
<BoL> Return True if string is an http , ftp , or file URL path . <EoL>
<BoL> Wrapper around a ` .Legend ` to support mouse dragging . <EoL>
<BoL> disconnect the callbacks <EoL>
<BoL> Draw the children <EoL>
<BoL> Return with , height , xdescent , ydescent of box <EoL>
<BoL> return offset of the container . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` applied to the children <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set the offset of the container . <EoL>
<BoL> set_transform is ignored . <EoL>
<BoL> Return the aspect ratio of the bbox mutation . <EoL>
<BoL> Return the mutation scale . <EoL>
<BoL> Return the mutated path of the rectangle <EoL>
<BoL> Set the bounds of the rectangle : l , b , w , h <EoL>
<BoL> Set the box style . <EoL>
<BoL> Set the rectangle height . <EoL>
<BoL> Set the aspect ratio of the bbox mutation . <EoL>
<BoL> Set the mutation scale . <EoL>
<BoL> Set the rectangle width . <EoL>
<BoL> Set the left coord of the rectangle . <EoL>
<BoL> Set the bottom coord of the rectangle . <EoL>
<BoL> update offset of children and return the extents of the box <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.TransformedPath ` instance of this line . <EoL>
<BoL> eturn True if x is sorted in ascending orde <EoL>
<BoL> Split drawstyle from linestyle string <EoL>
<BoL> Puts a TransformedPath instance at self._transformed_path ; all invalidation of the transform is then handled by the TransformedPath instance . <EoL>
<BoL> Test whether the mouse event occurred on the line . <EoL>
<BoL> draw the Line with ` renderer ` unless visibility is False <EoL>
<BoL> Get the cap style for dashed linestyles <EoL>
<BoL> Get the join style for dashed linestyles <EoL>
<BoL> Return the xdata , ydata . <EoL>
<BoL> return the marker fillstyle <EoL>
<BoL> eturn the markevery setting <EoL>
<BoL> Return the : class : ` ~matplotlib.path.Path ` object associated with this line . <EoL>
<BoL> eturn the pick radius used for containment tests <EoL>
<BoL> Get the cap style for solid linestyles <EoL>
<BoL> Get the join style for solid linestyles <EoL>
<BoL> Return the xdata . <EoL>
<BoL> Return the *xy* data as a Nx2 numpy array . <EoL>
<BoL> Return the ydata . <EoL>
<BoL> Set whether to use antialiased rendering . <EoL>
<BoL> Set the color of the line <EoL>
<BoL> Set the cap style for dashed linestyles . <EoL>
<BoL> Set the join style for dashed linestyles . <EoL>
<BoL> Set the dash sequence , sequence of dashes with on off ink in points . If seq is empty or if seq = ( None , None ) , the linestyle will be set to solid . <EoL>
<BoL> Set the x and y data <EoL>
<BoL> Set the drawstyle of the plot <EoL>
<BoL> Set the marker fill style ; 'full ' means fill the whole marker . 'none ' means no filling ; other options are for half-filled markers . <EoL>
<BoL> Set the linestyle of the line ( also accepts drawstyles , e.g. , `` 'steps -- ' `` ) <EoL>
<BoL> Set the line width in points <EoL>
<BoL> Set the line marker . <EoL>
<BoL> Set the marker edge color . <EoL>
<BoL> Set the marker edge width in points . <EoL>
<BoL> Set the marker face color . <EoL>
<BoL> Set the alternate marker face color . <EoL>
<BoL> Set the marker size in points . <EoL>
<BoL> Set the markevery property to subsample the plot when using markers . <EoL>
<BoL> Sets the event picker details for the line . <EoL>
<BoL> Set the pick radius used for containment tests . <EoL>
<BoL> Set the cap style for solid linestyles . <EoL>
<BoL> Set the join style for solid linestyles . <EoL>
<BoL> set the Transformation instance used by this artist <EoL>
<BoL> Set the data array for x . <EoL>
<BoL> Set the data array for y . <EoL>
<BoL> copy properties from other to self <EoL>
<BoL> Return the path of this patch <EoL>
<BoL> Create a shadow of the given *patch* offset by *ox* , *oy* . <EoL>
<BoL> Draw the children <EoL>
<BoL> get minimumdescent . <EoL>
<BoL> get multilinebaseline . <EoL>
<BoL> return offset of the container . <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set minimumdescent . <EoL>
<BoL> Set multilinebaseline . <EoL>
<BoL> Set the offset of the container . <EoL>
<BoL> set_transform is ignored . <EoL>
<BoL> update offset of childrens and return the extents of the box <EoL>
<BoL> Return a generator of artists that can be used as handles in a legend . <EoL>
<BoL> Return handles and labels for legend , internal method . <EoL>
<BoL> Get the handles and labels from the calls to either `` figure.legend `` or `` axes.legend `` . <EoL>
<BoL> MarkerStyle <EoL>
<BoL> Draws mathtext markers ' $ ... $ ' using TextPath object . <EoL>
<BoL> Sets fillstyle <EoL>
<BoL> Initialize the class with a : class : ` matplotlib.lines.Line2D ` instance . The line should already be added to some : class : ` matplotlib.axes.Axes ` instance and should have the picker property set . <EoL>
<BoL> When the line is picked , update the set of selected indices . <EoL>
<BoL> Default `` do nothing '' implementation of the : meth : ` process_selected ` method . <EoL>
<BoL> Convert linestyle - > dash pattern <EoL>
<BoL> Helper function that sorts out how to deal the input ` markevery ` and returns the points where markers should be drawn.Helper function to cope with ` codes ` being an ndarray or ` None ` <EoL>
<BoL> Determine if any line segments are within radius of a point . Returns the list of line segments that are within that radius . <EoL>
<BoL> Return the amount of kerning between this and the given character . Called when characters are strung together into : class : ` Hlist ` to create : class : ` Kern ` nodes . <EoL>
<BoL> Render the character to the canvas . <EoL>
<BoL> Determine the highest order of glue used by the members of this list . <EoL>
<BoL> The main duty of : meth : ` hpack ` is to compute the dimensions of the resulting boxes , and to adjust the glue if one of those dimensions is pre-specified . The computed sizes normally enclose all of the material inside the new box ; but some items may stick out if negative glue is used , if the box is overfull , or if a `` \\vbox `` includes other boxes that have been shifted left . <EoL>
<BoL> Insert : class : ` Kern ` nodes between : class : ` Char ` nodes to set kerning . The : class : ` Char ` nodes themselves determine the amount of kerning they need ( in : meth : ` ~Char.get_kerning ` ) , and this function just creates the linked list in the correct way . <EoL>
<BoL> *font* : one of the TeX font names : : <EoL>
<BoL> Get the data needed by the backend to render the math expression . The return value is backend-specific . <EoL>
<BoL> Get the set of characters that were used in the math expression . Used by backends that need to subset fonts so they know which glyphs to include . <EoL>
<BoL> Draw a glyph at <EoL>
<BoL> Draw a filled rectangle from ( *x1* , *y1* ) to ( *x2* , *y2* ) . <EoL>
<BoL> Set the size of the buffer used to render the math expression . Only really necessary for the bitmap backends . <EoL>
<BoL> Render the character to the canvas <EoL>
<BoL> Override prime symbol to use Bakoma <EoL>
<BoL> Helper class to raise parser errors . <EoL>
<BoL> *default_font_prop* : A : class : ` ~matplotlib.font_manager.FontProperties ` object to use for the default non-math font , or the base font for Unicode ( generic ) font rendering . <EoL>
<BoL> Fix any cyclical references before the object is about to be destroyed . <EoL>
<BoL> Override if your font provides multiple sizes of the same symbol . <EoL>
<BoL> Get the line thickness that matches the given font . Used as a base unit for drawing lines such as in a fraction or radical . <EoL>
<BoL> Get the xheight for the given *font* and *fontsize* . <EoL>
<BoL> Get the FreeType hinting type to use with this particular backend . <EoL>
<BoL> Return a backend-specific tuple to return to the backend after all processing is done . <EoL>
<BoL> Draw a glyph described by *info* to the reference point ( *ox* , *oy* ) . <EoL>
<BoL> Draw a filled black rectangle from ( *x1* , *y1* ) to ( *x2* , *y2* ) . <EoL>
<BoL> Grows one level larger . There is no limit to how big something can get . <EoL>
<BoL> Shrinks one level smaller . There are only three levels of sizes , after which things will no longer get smaller . <EoL>
<BoL> Get the current : class : ` State ` of the parser . <EoL>
<BoL> Parse expression *s* using the given *fonts_object* for output , at the given *fontsize* and *dpi* . <EoL>
<BoL> Pop a : class : ` State ` off of the stack . <EoL>
<BoL> Push a new : class : ` State ` onto the stack which is just a copy of the current state . <EoL>
<BoL> The main duty of : meth : ` vpack ` is to compute the dimensions of the resulting boxes , and to adjust the glue if one of those dimensions is pre-specified . <EoL>
<BoL> get_unicode_index ( symbol , [ bool ] ) - > integer <EoL>
<BoL> Given a math expression , renders it in a closely-clipped bounding box to an image file . <EoL>
<BoL> Helper to quickly define a set of alternative Literals , and makes sure to do longest-first testing when there is a conflict , regardless of the input order , but returns a : class : ` MatchFirst ` for best performance . <EoL>
<BoL> Get the location of the config file . <EoL>
<BoL> override the hash function of any of the formatters , so that we don't create duplicate excel format styles <EoL>
<BoL> Evaluate the estimated pdf on a set of points . <EoL>
<BoL> center and optionally standardize the data using the mean and sigma from training set a <EoL>
<BoL> project x onto the principle axes , dropping any axes where fraction of variance < minfrac <EoL>
<BoL> amap ( function , sequence [ , sequence , ... ] ) - > array . <EoL>
<BoL> Apply the given window to the given 1D or 2D array along the given axis . <EoL>
<BoL> Return the representation of a *number* in any given *base* . <EoL>
<BoL> Return the binary representation of the input *number* as a string . <EoL>
<BoL> Return the matrix *M* with each row having zero mean and unit std . <EoL>
<BoL> The coherence between *x* and *y* . Coherence is the normalized cross spectral density : <EoL>
<BoL> return a list of ( ind0 , ind1 ) such that mask [ ind0 : ind1 ] .all ( ) is True and we cover all such regions <EoL>
<BoL> return the indices into *x* where *x* crosses some threshold from below , e.g. , the i 's where : : <EoL>
<BoL> return the indices into *x* where *x* crosses some threshold from below , e.g. , the i 's where : : <EoL>
<BoL> Return x minus its mean along the specified axis . <EoL>
<BoL> Return x with its trend removed . <EoL>
<BoL> Return x minus best fit line ; 'linear ' detrending . <EoL>
<BoL> Return x minus the mean ( x ) . <EoL>
<BoL> Return x : no detrending . <EoL>
<BoL> Return the distance between two points . <EoL>
<BoL> Get the distance of a point to a segment . <EoL>
<BoL> Computes the distance between a set of successive points in *N* dimensions . <EoL>
<BoL> Return the entropy of the data in *y* in units of nat . <EoL>
<BoL> Compute exponentials which safely underflow to zero . <EoL>
<BoL> Compute an FFT phase randomized surrogate of *x* . <EoL>
<BoL> frange ( [ start , ] stop [ , step , keywords ] ) - > array of floats <EoL>
<BoL> Return a *M* x *N* sparse matrix with *frac* elements randomly filled . <EoL>
<BoL> *Z* and *Cond* are *M* x *N* matrices . <EoL>
<BoL> Interpolates from a nonuniformly spaced grid to some other grid . <EoL>
<BoL> Returns the identity matrix of shape ( *n* , *n* , ... , *n* ) ( rank *r* ) . <EoL>
<BoL> *points* is a sequence of *x* , *y* points . *verts* is a sequence of *x* , *y* vertices of a polygon . <EoL>
<BoL> Tests whether first and last object in a sequence are the same . These are presumably coordinates on a polygonal curve , in which case this function tests if that curve is closed . <EoL>
<BoL> Returns the log base 2 of *n* if *n* is a power of 2 , zero otherwise . <EoL>
<BoL> Like the MATLAB function with the same name , returns *True* if the supplied numpy array or matrix *X* looks like a vector , meaning it has a one non-singleton axis ( i.e. , it can have multiple axes , but all must have length 1 , except for one of them ) . <EoL>
<BoL> Return the *l1* norm of *a* , flattened out . <EoL>
<BoL> Return the *l2* norm of *a* , flattened out . <EoL>
<BoL> This function provides simple ( but somewhat less so than : func : ` cbook.simple_linear_interpolation ` ) linear interpolation . : func : ` simple_linear_interpolation ` will give a list of point between a start and an end , while this does true linear interpolation at an arbitrary set of points . <EoL>
<BoL> Return the log ( *x* ) in base 2 . <EoL>
<BoL> Return N values logarithmically spaced between xmin and xmax . <EoL>
<BoL> Return the indices of the longest stretch of contiguous ones in *x* , assuming *x* is a vector of zeros and ones . If there are two equally long stretches , pick the first . <EoL>
<BoL> alias for longest_contiguous_ones <EoL>
<BoL> Compute the len ( *n* ) moving average of *x* . <EoL>
<BoL> norm ( a , p=2 ) - > l-p norm of a.flat <EoL>
<BoL> Offsets an array *y* by +/- an error and returns a tuple ( y - err , y + err ) . <EoL>
<BoL> Computes the distance travelled along a polygonal curve in *N* dimensions . <EoL>
<BoL> Given a sequence of *xs* and *ys* , return the vertices of a polygon that has a horizontal base at *xmin* and an upper bound at the *ys* . *xmin* is a scalar . <EoL>
<BoL> Given a sequence of *x* , *ylower* and *yupper* , return the polygon that fills the regions between them . <EoL>
<BoL> Return the percentiles of *x* . <EoL>
<BoL> Return the rank for each element in *x* , return the rank 0..len ( *p* ) . e.g. , if *p* = ( 25 , 50 , 75 ) , the return value will be a len ( *x* ) array with values in [ 0,1,2,3 ] where 0 indicates the value is less than the 25th percentile , 1 indicates the value is > = the 25th and < 50th percentile , ... and 3 indicates the value is above the 75th percentile cutoff . <EoL>
<BoL> Converts a quadratic Bezier curve to a cubic approximation . <EoL>
<BoL> Returns a textual representation of a record array . <EoL>
<BoL> Return a new record array with field names populated with data from arrays in *arrs* . <EoL>
<BoL> Return a new numpy record array with fields in *names* dropped . <EoL>
<BoL> *r* is a numpy record array <EoL>
<BoL> if name is a string key , use the larger size of r1 or r2 before mergingThe column name in *newrec* that corresponds to the column in *r1*.The column name in *newrec* that corresponds to the column in *r2* . <EoL>
<BoL> Return a new numpy record array with only fields listed in names <EoL>
<BoL> *r* is a numpy record array <EoL>
<BoL> Join a sequence of record arrays on single column key . <EoL>
<BoL> Integrate 1D or ND system of ODEs using 4-th order Runge-Kutta . <EoL>
<BoL> Return the root mean square of all the elements of *a* , flattened out . <EoL>
<BoL> Return *True* if *s1* and *s2* intersect . *s1* and *s2* are defined as : : <EoL>
<BoL> : func : ` slopes ` calculates the slope *y* ' ( *x* ) <EoL>
<BoL> Given data vectors *x* and *y* , the slope vector *yp* and a new abscissa vector *xi* , the function : func : ` stineman_interp ` uses Stineman interpolation to calculate a vector *yi* corresponding to *xi* . <EoL>
<BoL> Repeat the values in an array in a memory-efficient manner . Array x is stacked vertically n times . <EoL>
<BoL> Get all windows of x with length n as a single array , using strides to avoid data duplication . <EoL>
<BoL> Finds the length of a set of vectors in *n* dimensions . This is like the : func : ` numpy.norm ` function for vectors , but has the ability to work over a particular axis of the supplied array or matrix . <EoL>
<BoL> Return x times the hanning window of len ( x ) . <EoL>
<BoL> No window function ; simply return x . <EoL>
<BoL> return the position of the bbox anchored at the parentbbox with the loc code , with the borderpad . <EoL>
<BoL> Update the offset func which depends on the dpi of the renderer ( because of the padding ) . <EoL>
<BoL> return the bbox that the legend will be anchored <EoL>
<BoL> return the extent of the artist . The extent of the child added with the pad is returned <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> set the bbox that the child will be anchored . <EoL>
<BoL> given the xy pixel coordinate , check if the annotation need to be drawn . <EoL>
<BoL> return x , y ( in display coordinate ) that is to be used for a reference of any offset coordinate <EoL>
<BoL> Update the pixel positions of the annotation text and the arrow patch . <EoL>
<BoL> Set the draggable state -- if state is <EoL>
<BoL> Draw the : class : ` Annotation ` object to the given *renderer* . <EoL>
<BoL> Return *annotation_clip* attribute . See : meth : ` set_annotation_clip ` for the meaning of return values . <EoL>
<BoL> return fontsize in points <EoL>
<BoL> set *annotation_clip* attribute . <EoL>
<BoL> set fontsize in points <EoL>
<BoL> Update the pixel positions of the annotated point and the text . <EoL>
<BoL> Draw the children <EoL>
<BoL> return offset of the container . <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` applied to the children <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> Set the offset of the container . <EoL>
<BoL> set_transform is ignored . <EoL>
<BoL> Return the arrowstyle object . <EoL>
<BoL> Return the : class : ` ConnectionStyle ` instance . <EoL>
<BoL> dpi_cor is currently used for linewidth-related things and shrink factor . Mutation scale is affected by this . <EoL>
<BoL> Return the aspect ratio of the bbox mutation . <EoL>
<BoL> Return the mutation scale . <EoL>
<BoL> Return the path of the arrow in the data coordinates . Use get_path_in_displaycoord ( ) method to retrieve the arrow path in display coordinates . <EoL>
<BoL> Return the mutated path of the arrow in display coordinates . <EoL>
<BoL> Set the arrow style . Old attributes are forgotten . Without arguments ( or with `` arrowstyle=None `` ) returns available box styles as a list of strings . <EoL>
<BoL> Set the connection style . Old attributes are forgotten . <EoL>
<BoL> dpi_cor is currently used for linewidth-related things and shrink factor . Mutation scale is affected by this . <EoL>
<BoL> Set the aspect ratio of the bbox mutation . <EoL>
<BoL> Set the mutation scale . <EoL>
<BoL> Set the tail patch . <EoL>
<BoL> Set the head patch . <EoL>
<BoL> Set the begin and end positions of the connecting path . <EoL>
<BoL> Draw the children <EoL>
<BoL> return offset of the container . <EoL>
<BoL> get the bounding box in display space . <EoL>
<BoL> *pad* : boundary pad <EoL>
<BoL> Update the location of children if necessary and draw them to the given *renderer* . <EoL>
<BoL> update offset of childrens and return the extents of the box <EoL>
<BoL> Given a list of ( height , descent ) of each boxes , align the boxes with *align* and calculate the y-offsets of each boxes . <EoL>
<BoL> Geiven a list of ( width , xdescent ) of each boxes , calculate the total width and the x-offset positions of each items according to *mode* . <EoL>
<BoL> This is a debug function to draw a rectangle around the bounding box returned by : meth : ` ~matplotlib.artist.Artist.get_window_extent ` of an artist , to test whether the artist is returning the correct bbox . <EoL>
<BoL> Draw the arc to the given *renderer* . <EoL>
<BoL> Draws an arrow from ( *x* , *y* ) to ( *x* + *dx* , *y* + *dy* ) . The width of the arrow is scaled by *width* . <EoL>
<BoL> return the instance of the subclass with the given style name . <EoL>
<BoL> A class method which returns a dictionary of available styles . <EoL>
<BoL> A class method which returns a string of the available styles . <EoL>
<BoL> Register a new style . <EoL>
<BoL> Create true circle at center *xy* = ( *x* , *y* ) with given *radius* . Unlike : class : ` ~matplotlib.patches.CirclePolygon ` which is a polygonal approximation , this uses Bezier splines and is much closer to a scale-free circle . <EoL>
<BoL> Return the radius of the circle <EoL>
<BoL> Set the radius of the circle <EoL>
<BoL> Check whether the annotation needs to be drawn . <EoL>
<BoL> calculate the pixel position of given point <EoL>
<BoL> Return *annotation_clip* attribute . See : meth : ` set_annotation_clip ` for the meaning of return values . <EoL>
<BoL> Return the mutated path of the arrow in the display coord <EoL>
<BoL> set *annotation_clip* attribute . <EoL>
<BoL> Draw a wedge centered at *x* , *y* center with radius *r* that sweeps *theta1* to *theta2* ( in degrees ) . If *width* is given , then a partial wedge is drawn from inner radius *r* - *width* to outer radius *r* . <EoL>
<BoL> For line segment defined by ( *x1* , *y1* ) and ( *x2* , *y2* ) return the points on the line that is perpendicular to the line and intersects ( *x2* , *y2* ) and the distance from ( *x2* , *y2* ) of the returned points is *k* . <EoL>
<BoL> find a point along a line connecting ( x0 , y0 ) -- ( x1 , y1 ) whose distance from ( x0 , y0 ) is d . <EoL>
<BoL> A helper function for the _Style class . <EoL>
<BoL> Given the list of list of strings , return a string of REST table format . <EoL>
<BoL> Class decorator that stashes a class in a ( style ) dictionary . <EoL>
<BoL> A helper function for the _Style class . <EoL>
<BoL> This is a debug function to draw a rectangle around the bounding box returned by : meth : ` ~matplotlib.artist.Artist.get_window_extent ` of an artist , to test whether the artist is returning the correct bbox . <EoL>
<BoL> Given a sequence of : class : ` Path ` objects and optional : class : ` ~matplotlib.transforms.Transform ` objects , returns the bounding box that encapsulates all of them . <EoL>
<BoL> Return *True* if this axes supports the pan/zoom button functionality . <EoL>
<BoL> Return *True* if this axes supports the zoom box button functionality . <EoL>
<BoL> Return the aspect ratio of the data itself . <EoL>
<BoL> Set the number of degrees between each latitude grid . <EoL>
<BoL> Set the number of degrees between each longitude grid . <EoL>
<BoL> Set the latitude ( s ) at which to stop drawing the longitude grids . <EoL>
<BoL> Return *True* if this axes supports the pan/zoom button functionality . <EoL>
<BoL> Return *True* if this axes supports the zoom box button functionality . <EoL>
<BoL> Return a format string formatting the coordinate using Unicode characters . <EoL>
<BoL> Return the aspect ratio of the data itself . For a polar plot , this should always be 1.0 <EoL>
<BoL> Returns -- -- -- - float The theta position of the radius labels in degrees . <EoL>
<BoL> Get the direction in which theta increases . <EoL>
<BoL> Get the offset for the location of 0 in radians . <EoL>
<BoL> Updates the theta position of the radius labels . <EoL>
<BoL> Set the direction in which theta increases . <EoL>
<BoL> Set the offset for the location of 0 in radians . <EoL>
<BoL> Sets the location of theta 's zero . ( Calls set_theta_offset with the correct value in radians under the hood . ) <EoL>
<BoL> Set the theta gridlines in a polar plot . <EoL>
<BoL> Get a projection class from its *name* . <EoL>
<BoL> Get a list of the names of all projections currently registered . <EoL>
<BoL> Register a new set of projections . <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Return the locations of the ticks . <EoL>
<BoL> Return the format for tick value *x* at position pos . `` pos=None `` indicates an unspecified location . <EoL>
<BoL> Returns an empty string for all inputs . <EoL>
<BoL> Return the locations of the ticks . <EoL>
<BoL> Create a new geographical transform . <EoL>
<BoL> Get a projection class from its name . <EoL>
<BoL> *limits* is the view limit of the data . <EoL>
<BoL> Determine if a wedge ( in degrees ) spans the full circle . <EoL>
<BoL> Determine if a wedge ( in radians ) spans the full circle . <EoL>
<BoL> Update the pixel positions of the annotation text and the arrow patch . <EoL>
<BoL> Draw the : class : ` Annotation ` object to the given *renderer* . <EoL>
<BoL> The coordinate system to use for ` .Annotation.xyann ` . <EoL>
<BoL> Return the ` Bbox ` bounding the text and arrow , in display units . <EoL>
<BoL> Update the pixel positions of the annotated point and the text . <EoL>
<BoL> Connect callback with an event . <EoL>
<BoL> emove the observer with connection id *cid* <EoL>
<BoL> Disconnect all events created by this widget . <EoL>
<BoL> When the button is clicked , call this *func* with event . <EoL>
<BoL> Returns the label that matches the position regardless of the value . <EoL>
<BoL> Set the sequence of strings that will be used for labels . <EoL>
<BoL> Return the formatted label string . <EoL>
<BoL> Return the locations of the ticks <EoL>
<BoL> Set parameters within this locato <EoL>
<BoL> Use presets to set locs based on lom . A dict mapping vmin , vmax- > locs <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Return the format for tick val *x* . <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> Set the view limits to the nearest multiples of base that contain the data . <EoL>
<BoL> update the slider position <EoL>
<BoL> Makes sure self.val is with given bounds . <EoL>
<BoL> Remove the observer with connection id *cid* <EoL>
<BoL> When the slider value is changed call *func* with the new slider value <EoL>
<BoL> Reset the slider to the initial value <EoL>
<BoL> Set slider value to *val* <EoL>
<BoL> This is an internal helper function for making sure that auto-redrawing works as intended in the plain python repl . <EoL>
<BoL> Autogenerated wrappers will get their docstring from a base function with an addendum . <EoL>
<BoL> Generates the plotting docstring . <EoL>
<BoL> Set the colormap to `` autumn '' . <EoL>
<BoL> Add an axes to the current figure and make it the current axes . <EoL>
<BoL> Set the colormap to `` bone '' . <EoL>
<BoL> Turn the axes box on or off on the current axes . <EoL>
<BoL> Clear the current figure . <EoL>
<BoL> Set the color limits of the current image . <EoL>
<BoL> Close a figure window . <EoL>
<BoL> Matplotlib provides a number of colormaps , and others can be added using : func : ` ~matplotlib.cm.register_cmap ` . This function documents the built-in colormaps , and will also return a list of all registered colormaps if called . <EoL>
<BoL> Set the colormap to `` cool '' . <EoL>
<BoL> Set the colormap to `` copper '' . <EoL>
<BoL> Remove the ` Axes ` *ax* ( defaulting to the current axes ) from its figure . <EoL>
<BoL> Redraw the current figure . <EoL>
<BoL> Place a legend in the figure . <EoL>
<BoL> Return whether the figure with the given id exists . <EoL>
<BoL> Set the colormap to `` flag '' . <EoL>
<BoL> Get the current : class : ` ~matplotlib.axes.Axes ` instance on the current figure matching the given keyword args , or create one . <EoL>
<BoL> Get a reference to the current figure . <EoL>
<BoL> Get the current colorable artist . <EoL>
<BoL> Return the figure manager of the active figure . <EoL>
<BoL> Return a list of existing figure labels . <EoL>
<BoL> Return a list of existing figure numbers . <EoL>
<BoL> Get a sorted list of all of the plotting commands . <EoL>
<BoL> Helper function for generating docstrings related to scales . <EoL>
<BoL> Blocking call to interact with the figure . <EoL>
<BoL> Set the colormap to `` gray '' . <EoL>
<BoL> Set the colormap to `` hot '' . <EoL>
<BoL> Set the colormap to `` hsv '' . <EoL>
<BoL> Set the colormap to `` inferno '' . <EoL>
<BoL> Install a repl display hook so that any stale figure are automatically redrawn when control is returned to the repl . <EoL>
<BoL> Turn the interactive mode off . <EoL>
<BoL> Turn the interactive mode on . <EoL>
<BoL> Return the status of interactive mode . <EoL>
<BoL> Set the colormap to `` jet '' . <EoL>
<BoL> Set the colormap to `` magma '' . <EoL>
<BoL> Display an array as a matrix in a new figure window . <EoL>
<BoL> Set the colormap to `` nipy_spectral '' . <EoL>
<BoL> Pause for *interval* seconds . <EoL>
<BoL> Set the colormap to `` pink '' . <EoL>
<BoL> Set the colormap to `` plasma '' . <EoL>
<BoL> Make a polar plot . <EoL>
<BoL> Set the colormap to `` prism '' . <EoL>
<BoL> Get or set the radial gridlines on the current polar plot . <EoL>
<BoL> Set the current Axes instance to *ax* . <EoL>
<BoL> Set the default colormap . Applies to the current image if any . See help ( colormaps ) for more information . <EoL>
<BoL> Display a figure . When running in ipython with its pylab mode , display all figures and return to the ipython prompt . <EoL>
<BoL> Set the colormap to `` spring '' . <EoL>
<BoL> Add a subplot to the current figure . <EoL>
<BoL> Create an axis at specific location inside a regular grid . <EoL>
<BoL> Launch a subplot tool window for a figure . <EoL>
<BoL> Set the colormap to `` summer '' . <EoL>
<BoL> Close all open figures and set the Matplotlib backend . <EoL>
<BoL> Get or set the theta gridlines on the current polar plot . <EoL>
<BoL> Automatically adjust subplot parameters to give specified padding . <EoL>
<BoL> Make a second axes that shares the *x*-axis . <EoL>
<BoL> Make a second axes that shares the *y*-axis . <EoL>
<BoL> Uninstall the matplotlib display hook . <EoL>
<BoL> Set the colormap to `` viridis '' . <EoL>
<BoL> Blocking call to interact with the figure . <EoL>
<BoL> Set the colormap to `` winter '' . <EoL>
<BoL> Turn on ` xkcd < https : //xkcd.com/ > ` _ sketch-style drawing mode . This will only have effect on things drawn after this function is called . <EoL>
<BoL> Get or set the x limits of the current axes . <EoL>
<BoL> Get or set the current tick locations and labels of the x-axis . <EoL>
<BoL> Get or set the y-limits of the current axes . <EoL>
<BoL> Get or set the current tick locations and labels of the y-axis . <EoL>
<BoL> Find how many of each of the tail pieces is necessary . <EoL>
<BoL> Set the offsets for the barb polygons . <EoL>
<BoL> Return a scale factor for converting from units to pixels <EoL>
<BoL> length is in arrow width units <EoL>
<BoL> Initialization delayed until first draw ; allow time for axes setup . <EoL>
<BoL> Sets the PolygonCollection transform to go from arrow width units to pixels . <EoL>
<BoL> Overload the remove method <EoL>
<BoL> Overload the remove method <EoL>
<BoL> Set the current rc params . <EoL>
<BoL> Update rc params from file . <EoL>
<BoL> Restore the rc params from the original rc file loaded by Matplotlib . <EoL>
<BoL> Return a : class : ` matplotlib.RcParams ` instance from the default matplotlib rc file . <EoL>
<BoL> Return : class : ` matplotlib.RcParams ` from the contents of the given file . <EoL>
<BoL> Restore the rc params from Matplotlib 's internal default style . <EoL>
<BoL> A validator for all possible line styles , the named ones *and* the on-off ink sequences . <EoL>
<BoL> Convert b to a boolean or raise <EoL>
<BoL> confirm s is string 'figure ' or convert s to float or raise <EoL>
<BoL> convert s to float or raise <EoL>
<BoL> convert s to float , None or raise <EoL>
<BoL> confirm that this is a Postscript of PDF font type that we know how to convert to <EoL>
<BoL> Validate a hatch pattern . A hatch pattern string can have any sequence of the following characters : `` \\ / | - + * . x o O `` . <EoL>
<BoL> convert s to int or raise <EoL>
<BoL> if not None , tries to validate as an int <EoL>
<BoL> Validate the markevery property of a Line2D object . <EoL>
<BoL> eturn a seq of n floats or raise <EoL>
<BoL> eturn a seq of n ints or raise <EoL>
<BoL> If s is a path , return s , else False <EoL>
<BoL> convert s to string or raise <EoL>
<BoL> *n* is the number of subdivisions of the interval between major ticks ; e.g. , n=2 will place a single minor tick midway between major ticks . <EoL>
<BoL> The transform for linear scaling is just the : class : ` ~matplotlib.transforms.IdentityTransform ` . <EoL>
<BoL> Returns the range *vmin* , *vmax* , possibly limited to the domain supported by this scale . <EoL>
<BoL> Set the locators and formatters to reasonable defaults for linear scaling . <EoL>
<BoL> *basex*/*basey* : The base of the logarithm <EoL>
<BoL> Return a : class : ` ~matplotlib.transforms.Transform ` instance appropriate for the given logarithm base . <EoL>
<BoL> Limit the domain to positive values . <EoL>
<BoL> Set the locators and formatters to specialized versions for log scaling . <EoL>
<BoL> logistic transform ( base 10 ) <EoL>
<BoL> place ticks on the logit locations <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> *nonpos* : { 'mask ' , 'clip ' } values beyond ] 0 , 1 [ can be masked as invalid , or clipped to a number very close to 0 or 1 <EoL>
<BoL> Return a : class : ` LogitTransform ` instance . <EoL>
<BoL> Limit the domain to values between 0 and 1 ( excluded ) . <EoL>
<BoL> logit transform ( base 10 ) , masked or clipped <EoL>
<BoL> Return the : class : ` ~matplotlib.transforms.Transform ` object associated with this scale . <EoL>
<BoL> Set the : class : ` ~matplotlib.ticker.Locator ` and : class : ` ~matplotlib.ticker.Formatter ` objects on the given axis to match this scale . <EoL>
<BoL> place ticks on the location= base**i*subs [ j ] <EoL>
<BoL> Set parameters within this locator . <EoL>
<BoL> *basex*/*basey* : The base of the logarithm <EoL>
<BoL> Return a : class : ` SymmetricalLogTransform ` instance . <EoL>
<BoL> Set the locators and formatters to specialized versions for symmetrical log scaling . <EoL>
<BoL> Register a new kind of scale . <EoL>
<BoL> Return a scale class by name . <EoL>
<BoL> - *axes* : the Axes instance containing the spine - *spine_type* : a string specifying the spine type - *path* : the path instance used to draw the spine <EoL>
<BoL> automatically set spine bounds to the view interval <EoL>
<BoL> calculate the offset transform performed by the spine <EoL>
<BoL> NOTE : This can not be called until after this has been added to an Axes , otherwise unit conversion will fail . This makes it very important to call the accessor method and not directly access the transformation member variable . <EoL>
<BoL> ( staticmethod ) Returns a circular : class : ` Spine ` . <EoL>
<BoL> Clear the current spine <EoL>
<BoL> Get the bounds of the spine . <EoL>
<BoL> get the spine position <EoL>
<BoL> get whether the spine has smart bounds <EoL>
<BoL> get the spine transform <EoL>
<BoL> eturn True if directly on axes frame <EoL>
<BoL> ( staticmethod ) Returns a linear : class : ` Spine ` . <EoL>
<BoL> egister an axis <EoL>
<BoL> Set the bounds of the spine . <EoL>
<BoL> Set the edgecolor . <EoL>
<BoL> set the spine to be arc-like <EoL>
<BoL> set the spine to be circula <EoL>
<BoL> set the spine to be linea <EoL>
<BoL> set the position of the spine <EoL>
<BoL> set the spine and associated axis to have smart bounds <EoL>
<BoL> Return nearest space in mask-coords from given grid-coords . <EoL>
<BoL> Return True if point is a valid index of grid . <EoL>
<BoL> Start recording streamline trajectory <EoL>
<BoL> Remove current trajectory from mask <EoL>
<BoL> Update current trajectory position in mask . <EoL>
<BoL> Simple Euler integration step that extends streamline to boundary . <EoL>
<BoL> Yield starting points for streamlines . <EoL>
<BoL> 2nd-order Runge-Kutta algorithm with adaptive step size . <EoL>
<BoL> Return x , y grid-coordinates of trajectory based on starting point . <EoL>
<BoL> Fast 2D , linear interpolation on an integer grid <EoL>
<BoL> Context manager for using style settings temporarily . <EoL>
<BoL> Return True if the filename looks like a style file . <EoL>
<BoL> Yield file path and name of styles in the given directory . <EoL>
<BoL> Load style library defined in this package . <EoL>
<BoL> Return dictionary of styles defined in ` style_dir ` . <EoL>
<BoL> Reload style library . <EoL>
<BoL> Update nested dict ( only level of nesting ) with new values . <EoL>
<BoL> Update style library with user-defined rc files <EoL>
<BoL> Use matplotlib style settings from a style specification . <EoL>
<BoL> Set text up so it draws in the right place . <EoL>
<BoL> Shrink font size until text fits . <EoL>
<BoL> Return the cell fontsize . <EoL>
<BoL> Get width required for this cell . <EoL>
<BoL> Return the cell ` .Text ` instance . <EoL>
<BoL> Get text bounds in axes co-ordinates . <EoL>
<BoL> Return a path where the edges specified by _visible_edges are drawn . <EoL>
<BoL> Retrieve a custom cell from a given position . <EoL>
<BoL> Set a custom cell in a given position . <EoL>
<BoL> Automatically set width for column . <EoL>
<BoL> Calculate row heights and column widths . <EoL>
<BoL> Get a bbox , in axes co-ordinates for the cells . <EoL>
<BoL> Move all the artists by ox , oy ( axes coords ) . <EoL>
<BoL> Add a cell to the table . <EoL>
<BoL> Given column indexs in either List , Tuple or int . Will be able to automatically set the columns into optimal sizes . <EoL>
<BoL> Automatically set font size . <EoL>
<BoL> Test whether the mouse event occurred in the table . <EoL>
<BoL> Return a dict of cells in the table . <EoL>
<BoL> Return the Artists contained by the table . <EoL>
<BoL> Return the bounding box of the table in window coords . <EoL>
<BoL> Scale column widths by xscale and row heights by yscale . <EoL>
<BoL> Set the font size , in points , of the cell text . <EoL>
<BoL> Return a filename based on a hash of the string , fontsize , and dpi . <EoL>
<BoL> Return a string containing user additions to the tex preamble . <EoL>
<BoL> Reinitializes self if relevant rcParams on have changed . <EoL>
<BoL> Return a string containing font configuration for the tex preamble . <EoL>
<BoL> Return the alpha channel . <EoL>
<BoL> Return a list of PS bboxes for latex 's rendering of the tex string . <EoL>
<BoL> Return latex 's rendering of the tex string as an rgba array . <EoL>
<BoL> Return width , height and descent of the text . <EoL>
<BoL> Generate a dvi file containing latex 's layout of tex string . <EoL>
<BoL> Generate a dvi file containing latex 's layout of tex string . <EoL>
<BoL> Generate a png file containing latex 's rendering of tex string . <EoL>
<BoL> Generate a postscript file containing latex 's rendering of tex string . <EoL>
<BoL> Generate a tex file to render the tex string at a specific font size.\usepackage [ utf8 ] { inputenc } <EoL>
<BoL> Generate a tex file to render the tex string at a specific font size.\usepackage [ utf8 ] { inputenc } <EoL>
<BoL> Return the offset transform . <EoL>
<BoL> The unit for input to the transform used by `` __call__ `` <EoL>
<BoL> Return the codes <EoL>
<BoL> Return the cached path after updating it if necessary . <EoL>
<BoL> update the path if necessary . <EoL>
<BoL> get the size of the text <EoL>
<BoL> Returns True if the given string *s* contains any mathtext . <EoL>
<BoL> set the size of the text <EoL>
<BoL> convert the string *s* to vertices and codes using the provided font property *prop* . Mostly copied from backend_svg.py . <EoL>
<BoL> Calculate the bounding box of the text . Unlike : meth : ` matplotlib.text.Text.get_extents ` method , The bbox size of the text before the rotation is calculated . <EoL>
<BoL> Return an override dict . See ` ~pyplot.text ' docstring for info . <EoL>
<BoL> Temporarily inserts newlines to the text if the wrap option is enabled . <EoL>
<BoL> Return the text angle as float between 0 and 360 degrees . <EoL>
<BoL> Return a unique id for the given font and character-code set . <EoL>
<BoL> Return a unique id for the given font and character-code set ( for tex ) . <EoL>
<BoL> find a ttf font . <EoL>
<BoL> return the : class : ` matplotlib.texmanager.TexManager ` instance <EoL>
<BoL> Convert text *s* to path ( a tuple of vertices and codes for matplotlib.path.Path ) . <EoL>
<BoL> convert the ft2font glyph to vertices and codes . <EoL>
<BoL> Formats a number in engineering notation , appending a letter representing the power of 1000 of the original number . Some examples : <EoL>
<BoL> Return the format for tick value ` x ` at position pos . <EoL>
<BoL> Return the format for tick val ` x ` based on the width of the axis . <EoL>
<BoL> Formats the value ` x ` based on the size of the axis range ` d ` . <EoL>
<BoL> Formats the tick as a percentage with the appropriate scaling . <EoL>
<BoL> Formats the number as a percentage number with the correct number of decimals and adds the percent symbol , if any . <EoL>
<BoL> Return the formatted label string . <EoL>
<BoL> *step* is a positive floating-point interval between ticks . *offset* is the offset subtracted from the data limits prior to calculating tick locations . <EoL>
<BoL> Temporarily adjust the figure so that only the specified area ( bbox_inches ) is saved . <EoL>
<BoL> This need to be called when figure dpi changes during the drawing ( e.g. , rasterizing ) . It recovers the bbox and re-adjust it with the new dpi . <EoL>
<BoL> Return a list of subplotspec from the given list of axes . <EoL>
<BoL> Return true if focus maintenance under TkAgg on win32 is on . <EoL>
<BoL> Create a new `` blended '' transform using *x_transform* to transform the *x*-axis and *y_transform* to transform the *y*-axis . <EoL>
<BoL> Create a new `` blended '' transform using *x_transform* to transform the *x*-axis and *y_transform* to transform the *y*-axis . <EoL>
<BoL> Create a new composite transform that is the result of applying transform *a* then transform *b* . <EoL>
<BoL> Create a new composite transform that is the result of applying transform *a* then transform *b* . <EoL>
<BoL> *child* : A class : ` Transform ` instance . This child may later be replaced with : meth : ` set ` . <EoL>
<BoL> Replace the current child of this transform with another one . <EoL>
<BoL> Create a new composite transform that is the result of applying transform a then transform b . <EoL>
<BoL> Check , inclusively , whether an interval includes a given value . <EoL>
<BoL> Check , excluding endpoints , whether an interval includes a given value . <EoL>
<BoL> Compute the ( multiplicative ) inverse of a matrix . <EoL>
<BoL> Modify the endpoints of a range as needed to avoid singularities . <EoL>
<BoL> Return a new transform with an added offset . <EoL>
<BoL> Computes and returns nodal dofs according to kind <EoL>
<BoL> Computes triangle eccentricities <EoL>
<BoL> Fast ( vectorized ) function to compute barycentric coordinates alpha . <EoL>
<BoL> Fast ( vectorized ) function to compute triangle jacobian matrix . <EoL>
<BoL> Returns a measure of the triangulation triangles flatness . <EoL>
<BoL> Eliminates excessively flat border triangles from the triangulation . <EoL>
<BoL> Draw triangular grid contour lines or filled regions , depending on whether keyword arg 'filled ' is False ( default ) or True . <EoL>
<BoL> Create and return allsegs and allkinds by calling underlying C code . <EoL>
<BoL> Process args and kwargs . <EoL>
<BoL> Performs the interpolation at points belonging to the triangulation ( inside an unmasked triangles ) . <EoL>
<BoL> This function refines a matplotlib.tri *triangulation* by splitting each triangle into 4 child-masked_triangles built on the edges midside nodes . The masked triangles , if present , are also split but their children returned masked . <EoL>
<BoL> Refines a field defined on the encapsulated triangulation . <EoL>
<BoL> Computes an uniformly refined triangulation *refi_triangulation* of the encapsulated : attr : ` triangulation ` . <EoL>
<BoL> Draw contours on an unstructured triangular grid . <EoL>
<BoL> Computes reduced-HCT elements degrees of freedom , knowing the gradient . <EoL>
<BoL> Computes the dof vector of a triangle , knowing the value of f , df and of the local Jacobian at each node . <EoL>
<BoL> self.df is computed as weighted average of _triangles sharing a common node . On each triangle itri f is first assumed linear ( = ~f ) , which allows to compute d~f [ itri ] Then the following approximation of df nodal values is then proposed : f [ ipt ] = SUM ( w [ itri ] x d~f [ itri ] , for itri sharing apex ipt ) The weighted coeff . w [ itri ] are proportional to the angle of the triangle itri at apex ipt <EoL>
<BoL> Compute the ( global ) gradient component of f assumed linear ( ~f ) . returns array df of shape ( nelems,2 ) df [ ielem ] .dM [ ielem ] = dz [ ielem ] i.e . df = dz x dM = dM.T^-1 x dz <EoL>
<BoL> Builds the ( nelems x 3 ) weights coeffs of _triangles angles , renormalized so that np.sum ( weights , axis=1 ) == np.ones ( nelems ) <EoL>
<BoL> Elliptic solver for bending energy minimization . Uses a dedicated 'toy ' sparse Jacobi PCG solver . <EoL>
<BoL> Builds K and F for the following elliptic formulation : minimization of curvature energy with value of function at node imposed and derivatives 'free ' . Builds the global Kff matrix in cco format . Builds the full Ff vec Ff = - Kfc x Uc <EoL>
<BoL> Creates a sparse matrix in coo format *vals* : arrays of values of non-null entries of the matrix *rows* : int arrays of rows of non-null entries of the matrix *cols* : int arrays of cols of non-null entries of the matrix *shape* : 2-tuple ( n , m ) of matrix shape <EoL>
<BoL> Compress rows , cols , vals / summing duplicates . Sort for csc format . <EoL>
<BoL> Compress rows , cols , vals / summing duplicates . Sort for csr format . <EoL>
<BoL> Dot product of self by a vector *V* in sparse-dense to dense format *V* dense vector of shape ( self.m , ) <EoL>
<BoL> Returns a dense matrix representing self . Mainly for debugging purposes . <EoL>
<BoL> Use Preconditioned Conjugate Gradient iteration to solve A x = b A simple Jacobi ( diagonal ) preconditionner is used . <EoL>
<BoL> Extracts selected blocks of a matrices *M* depending on parameters *block_indices* and *block_size* . <EoL>
<BoL> Matrix product between arrays of matrices , or a matrix and an array of matrices ( *M1* and *M2* ) <EoL>
<BoL> Inversion of arrays of ( 2,2 ) SYMMETRIC matrices ; returns the ( Moore-Penrose ) pseudo-inverse for rank-deficient matrices . <EoL>
<BoL> Rolls an array of matrices along an axis according to an array of indices *roll_indices* *axis* can be either 0 ( rolls rows ) or 1 ( rolls columns ) . <EoL>
<BoL> Inversion of arrays of ( 2,2 ) matrices , returns 0 for rank-deficient matrices . <EoL>
<BoL> Scalar product between scalars and matrices . <EoL>
<BoL> Builds an array of matrices from individuals np.arrays of identical shapes . *M* : ncols-list of nrows-lists of shape sh . <EoL>
<BoL> Transposition of an array of matrices *M* . <EoL>
<BoL> Draw a unstructured triangular grid as lines and/or markers . <EoL>
<BoL> Return an ` ~units.AxisInfo ` instance for the axis with the specified units . <EoL>
<BoL> Convert *obj* using *unit* for the specified *axis* . <EoL>
<BoL> Return the default unit for *x* or `` None `` for the given axis . <EoL>
<BoL> Get the converter for data that has the same type as *x* . If no converters are registered for *x* , returns `` None `` . <EoL>
<BoL> Set the matplotlib backend to one of the known backends . <EoL>
<BoL> Add check buttons to : class : ` matplotlib.axes.Axes ` instance *ax* <EoL>
<BoL> emove the observer with connection id *cid* <EoL>
<BoL> returns a tuple of the status ( True/False ) of all of the check buttons <EoL>
<BoL> When the button is clicked , call *func* with button label <EoL>
<BoL> Directly ( de ) activate a check button by index . <EoL>
<BoL> clear the curso <EoL>
<BoL> on mouse motion draw the cursor if visible <EoL>
<BoL> Clean up an event <EoL>
<BoL> Get the xdata and ydata for event , with limits <EoL>
<BoL> Key press event handler - use for widget-specific key press actions . <EoL>
<BoL> Key release event handle <EoL>
<BoL> Mouse scroll event handle <EoL>
<BoL> on motion notify event if box/line is wanted <EoL>
<BoL> on button press event <EoL>
<BoL> on button release event <EoL>
<BoL> Set active handle based on the location of the mouse event <EoL>
<BoL> Connect the major canvas events to methods . <EoL>
<BoL> eturn *True* if *event* should be ignored <EoL>
<BoL> Key press event handler and validator for all selection widgets <EoL>
<BoL> Key release event handler and validato <EoL>
<BoL> Mouse scroll event handler and validato <EoL>
<BoL> Cursor move event handler and validato <EoL>
<BoL> Button press handler and validato <EoL>
<BoL> Button release event handler and validato <EoL>
<BoL> Set the visibility of our artists <EoL>
<BoL> draw using newfangled blit or oldfangled draw depending on useblit <EoL>
<BoL> force an update of the background <EoL>
<BoL> Reserve the lock for *o* . <EoL>
<BoL> Return whether drawing is available to *o* . <EoL>
<BoL> Return whether *o* owns this lock . <EoL>
<BoL> Return whether the lock is currently held by an owner . <EoL>
<BoL> Release the lock from *o* . <EoL>
<BoL> clear the curso <EoL>
<BoL> connect events <EoL>
<BoL> disconnect events <EoL>
<BoL> Redraw the polygon based on the new vertex positions . <EoL>
<BoL> Key press event handle <EoL>
<BoL> Key release event handle <EoL>
<BoL> Cursor move event handle <EoL>
<BoL> Button press event handle <EoL>
<BoL> Button release event handle <EoL>
<BoL> Cursor move event handler and validato <EoL>
<BoL> Add radio buttons to : class : ` matplotlib.axes.Axes ` instance *ax* <EoL>
<BoL> emove the observer with connection id *cid* <EoL>
<BoL> When the button is clicked , call *func* with button label <EoL>
<BoL> Trigger which radio button to make active . <EoL>
<BoL> on motion notify event <EoL>
<BoL> on button press event <EoL>
<BoL> on button release event <EoL>
<BoL> Setting the span coordinates <EoL>
<BoL> eturn *True* if *event* should be ignored <EoL>
<BoL> Set SpanSelector to operate on a new Axes <EoL>
<BoL> Remove the observer with connection id *cid* . <EoL>
<BoL> When the user hits enter or leaves the submission box , call this *func* with event . <EoL>
<BoL> When the text changes , call this *func* with event . <EoL>
<BoL> Return index and pixel distance to closest index . <EoL>
<BoL> Set x and y positions of handles <EoL>
<BoL> Cursor move event handle <EoL>
<BoL> Button press handle <EoL>
<BoL> Button release event handle <EoL>
<BoL> Context manager for global scikit-learn configuration <EoL>
<BoL> Retrieve current values for configuration set by : func : ` set_config ` <EoL>
<BoL> Set global scikit-learn configuration <EoL>
<BoL> Row and column indices of the i'th bicluster . <EoL>
<BoL> Shape of the i'th bicluster . <EoL>
<BoL> Returns the submatrix corresponding to bicluster ` i ` . <EoL>
<BoL> Returns the mean accuracy on the given test data and labels . <EoL>
<BoL> Performs clustering on X and returns cluster labels . <EoL>
<BoL> Returns the score of the model on the data X <EoL>
<BoL> Performs outlier detection on X . <EoL>
<BoL> Returns the coefficient of determination R^2 of the prediction . <EoL>
<BoL> Returns first and last element of numpy array or sparse matrix . <EoL>
<BoL> Pretty print the dictionary 'params ' <EoL>
<BoL> Constructs a new estimator with the same parameters . <EoL>
<BoL> Returns True if the given estimator is ( probably ) a classifier . <EoL>
<BoL> Returns True if the given estimator is ( probably ) an outlier detector . <EoL>
<BoL> Returns True if the given estimator is ( probably ) a regressor . <EoL>
<BoL> Helper function to download a remote dataset into path <EoL>
<BoL> Ensure different filenames for Python 2 and Python 3 pickles <EoL>
<BoL> Calculate the sha256 hash of the file at path . <EoL>
<BoL> Delete all the content of the data home cache . <EoL>
<BoL> Return the path of the scikit-learn data dir . <EoL>
<BoL> Load and return the boston house-prices dataset ( regression ) . <EoL>
<BoL> Load and return the breast cancer wisconsin dataset ( classification ) . <EoL>
<BoL> Loads data from module_path/data/data_file_name . <EoL>
<BoL> Load and return the diabetes dataset ( regression ) . <EoL>
<BoL> Load and return the digits dataset ( classification ) . <EoL>
<BoL> Load and return the iris dataset ( classification ) . <EoL>
<BoL> Load and return the linnerud dataset ( multivariate regression ) . <EoL>
<BoL> Load the numpy array of a single sample image <EoL>
<BoL> Load sample images for image manipulation . <EoL>
<BoL> Load and return the wine dataset ( classification ) . <EoL>
<BoL> Fetch dataset from openml by name or dataset id . <EoL>
<BoL> Ensure directory d exists ( like mkdir -p on Unix ) No guarantee that the directory is writable . <EoL>
<BoL> Shuffle arrays or sparse matrices in a consistent way <EoL>
<BoL> We do n't store the timestamp when pickling , to avoid the hash depending from it . <EoL>
<BoL> Decorates the given function func to only compute its return value for input arguments not cached on disk . <EoL>
<BoL> Erase the complete cache directory . <EoL>
<BoL> Eval function func with arguments ` *args ` and ` **kwargs ` , in the context of the memory . <EoL>
<BoL> Return the formatted representation of the object . <EoL>
<BoL> Remove cache elements to make cache size fit in `` bytes_limit `` . <EoL>
<BoL> Helper function to download any missing LFW data <EoL>
<BoL> Internally used to load images <EoL>
<BoL> Call method <EoL>
<BoL> Decorate function fun <EoL>
<BoL> Scale back to 0-1 range in case of normalization for plotting . <EoL>
<BoL> Load a datasets as downloaded from http : //mlcomp.org <EoL>
<BoL> Generate the `` Friedman # 1 '' regression problem <EoL>
<BoL> Generate the `` Friedman # 2 '' regression problem <EoL>
<BoL> Generate the `` Friedman # 3 '' regression problem <EoL>
<BoL> Generates data for binary classification used in Hastie et al . 2009 , Example 10.2 . <EoL>
<BoL> Make two interleaving half circles <EoL>
<BoL> Generate an S curve dataset . <EoL>
<BoL> Generate a random regression problem with sparse uncorrelated design <EoL>
<BoL> Generate a random symmetric , positive-definite matrix . <EoL>
<BoL> Generate a swiss roll dataset . <EoL>
<BoL> copy data from file-like object fsrc to file-like object fdst <EoL>
<BoL> Convert a raw name for a data set in a mldata.org filename . <EoL>
<BoL> Load MATLAB file . <EoL>
<BoL> converts the arff object into the appropriate matrix type ( np.array or scipy.sparse.csr_matrix ) based on the 'data part ' ( i.e. , in the liac-arff dict , the object from the 'data ' key ) <EoL>
<BoL> Utilizes the openml dataset listing api to find a dataset by name/version OpenML api function : https : //www.openml.org/api_docs # ! /data/get_data_list_data_name_data_name <EoL>
<BoL> Returns a resource from OpenML.org . Caches it to data_home if required . <EoL>
<BoL> If the first call to the decorated function fails , the local cached file is removed , and the function is called again . If `` data_home `` is `` None `` , then the function is called once . <EoL>
<BoL> obtains several columns from sparse arff representation . Additionally , the column indices are re-labelled , given the columns that are not included . ( e.g. , when including [ 1 , 2 , 3 ] , the columns will be relabelled to [ 0 , 1 , 2 ] ) <EoL>
<BoL> find the permutation from a to b <EoL>
<BoL> inverse permutation p <EoL>
<BoL> Transforms the label sets with a given mapping <EoL>
<BoL> Fit the label sets binarizer , storing ` classes_ ` <EoL>
<BoL> Fit the label sets binarizer and transform the given label sets <EoL>
<BoL> Transform the given indicator matrix into label sets <EoL>
<BoL> Transform the given label sets <EoL>
<BoL> Returns distinct binary samples of length dimensions <EoL>
<BoL> Load a coverage file from an open file object . <EoL>
<BoL> Load csv file . <EoL>
<BoL> Construct the map grid from the batch object <EoL>
<BoL> Tokenize text_document into a sequence of character n-grams <EoL>
<BoL> Whitespace sensitive char-n-gram tokenization . <EoL>
<BoL> Check if stop words are consistent <EoL>
<BoL> Check if vocabulary is empty or missing ( not fit-ed ) <EoL>
<BoL> Create sparse feature matrix , and vocabulary where fixed_vocab=False <EoL>
<BoL> Sort features by name <EoL>
<BoL> Check validity of ngram_range paramete <EoL>
<BoL> Turn tokens into a sequence of n-grams after stop words filtering <EoL>
<BoL> Return a callable that handles preprocessing and tokenization <EoL>
<BoL> Return a function to preprocess the text before tokenization <EoL>
<BoL> Return a function that splits a string into a sequence of tokens <EoL>
<BoL> Decode the input into a string of unicode symbols <EoL>
<BoL> Learn a vocabulary dictionary of all tokens in the raw documents . <EoL>
<BoL> Learn the vocabulary dictionary and return term-document matrix . <EoL>
<BoL> Array mapping from feature integer indices to feature name <EoL>
<BoL> Build or fetch the effective stop words list <EoL>
<BoL> Return terms per document with nonzero entries in X . <EoL>
<BoL> Transform documents to document-term matrix . <EoL>
<BoL> Download the 20 newsgroups data and stored it as a zipped pickle . <EoL>
<BoL> Scale input vectors individually to unit norm ( vector length ) . <EoL>
<BoL> Given text in `` news '' format , attempt to remove a signature block . <EoL>
<BoL> Given text in `` news '' format , strip the headers , by removing everything before the first blank line . <EoL>
<BoL> Given text in `` news '' format , strip lines beginning with the quote characters > or | , plus lines that often introduce a quoted section ( for example , because they contain the string 'writes : ' . ) <EoL>
<BoL> Fit the model from data in X . <EoL>
<BoL> Encode the data as a sparse combination of the dictionary atoms . <EoL>
<BoL> Fit the FactorAnalysis model to X using EM <EoL>
<BoL> Compute data covariance with the FactorAnalysis model . <EoL>
<BoL> Compute data precision matrix with the FactorAnalysis model . <EoL>
<BoL> Compute the average log-likelihood of the samples <EoL>
<BoL> Compute the log-likelihood of each sample <EoL>
<BoL> Apply dimensionality reduction to X using the model . <EoL>
<BoL> Fit the model <EoL>
<BoL> Fit the model to X . <EoL>
<BoL> Fit the model and recover the sources from X . <EoL>
<BoL> Transform the sources back to the mixed data ( apply mixing matrix ) . <EoL>
<BoL> Recover the sources from X ( apply the unmixing matrix ) . <EoL>
<BoL> Fit the model with X , using minibatches of size batch_size . <EoL>
<BoL> Incremental fit with X . All of X is processed as a single batch . <EoL>
<BoL> Fit 's using kernel K <EoL>
<BoL> Fit the model from data in X . <EoL>
<BoL> Fit the model from data in X and transform X . <EoL>
<BoL> Transform X back to original space . <EoL>
<BoL> Transform X . <EoL>
<BoL> Estimate the variational bound . <EoL>
<BoL> check X format <EoL>
<BoL> Check model parameters . <EoL>
<BoL> E-step in EM update . <EoL>
<BoL> EM update for 1 iteration . <EoL>
<BoL> Initialize latent variables . <EoL>
<BoL> Transform data X according to fitted model . <EoL>
<BoL> Learn model for the data X with variational Bayes method . <EoL>
<BoL> Online VB with Mini-Batch update . <EoL>
<BoL> Calculate approximate perplexity for data X . <EoL>
<BoL> Calculate approximate log-likelihood as score . <EoL>
<BoL> Transform data X according to the fitted model . <EoL>
<BoL> Fit the model from data in X . <EoL>
<BoL> Updates the model using the data in X as a mini-batch . <EoL>
<BoL> Fit the model from data in X . <EoL>
<BoL> Least Squares projection of the data onto the sparse components . <EoL>
<BoL> Learn a NMF model for the data X . <EoL>
<BoL> Learn a NMF model for the data X and returns the transformed data . <EoL>
<BoL> Transform data back to its original space . <EoL>
<BoL> Transform the data X according to the fitted NMF model <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Fit the model from data in X . <EoL>
<BoL> Fit LSI model on training data X . <EoL>
<BoL> Fit LSI model to X and perform dimensionality reduction on X . <EoL>
<BoL> Transform X back to its original space . <EoL>
<BoL> Perform dimensionality reduction on X . <EoL>
<BoL> Placeholder for fit . Subclasses should implement this method ! <EoL>
<BoL> Perform is_fitted validation for estimator . <EoL>
<BoL> Compute log ( det ( A ) ) for A symmetric <EoL>
<BoL> Squared Euclidean or Frobenius norm of x . <EoL>
<BoL> Orthonormalize w wrt the first j rows of W <EoL>
<BoL> Deflationary FastICA using fun approx to neg-entropy function <EoL>
<BoL> Parallel FastICA . <EoL>
<BoL> Symmetric decorrelation i.e . W < - ( W * W.T ) ^ { -1/2 } * W <EoL>
<BoL> Converts an array-like to an array of floats . <EoL>
<BoL> Calculate mean update and a Youngs and Cramer variance update . <EoL>
<BoL> Generator to create slices containing batch_size elements , from 0 to n . <EoL>
<BoL> Sign correction to ensure deterministic output from SVD . <EoL>
<BoL> Fit KernelCenterer <EoL>
<BoL> Center kernel matrix . <EoL>
<BoL> Compute the beta-divergence of X and dot ( W , H ) . <EoL>
<BoL> Convert string beta_loss to float <EoL>
<BoL> Compute L1 and L2 regularization coefficients for W and H <EoL>
<BoL> update H in Multiplicative Update NMF <EoL>
<BoL> Computes np.dot ( W , H ) , only where X is non zero . <EoL>
<BoL> Check if there is any negative value in an array . <EoL>
<BoL> Dot product-based Euclidean norm implementation <EoL>
<BoL> Returns the minimum value of a dense or a CSR/CSC matrix . <EoL>
<BoL> Dot product that handle the sparse matrix case correctly <EoL>
<BoL> Trace of np.dot ( X , Y.T ) . <EoL>
<BoL> Queue the batch for computing , with or without multiprocessing <EoL>
<BoL> Build a process or thread pool and return the number of workers <EoL>
<BoL> Display the message on stout or stderr depending on verbosity <EoL>
<BoL> Dispatch more data for parallel processing <EoL>
<BoL> Prefetch the tasks for the next batch and dispatch them . <EoL>
<BoL> Display the process of the parallel execution only a fraction of time , controlled by self.verbose . <EoL>
<BoL> Decorator used to capture the arguments of a function . <EoL>
<BoL> Determine the number of jobs that can actually run in parallel <EoL>
<BoL> Generator to create n_packs slices going up to n . <EoL>
<BoL> Compute the log of the sum of exponentials of input elements . <EoL>
<BoL> Compute the likelihood of a rank `` rank `` dataset <EoL>
<BoL> Infers the dimension of a dataset of shape ( n_samples , n_features ) <EoL>
<BoL> Is x of a sparse matrix type ? <EoL>
<BoL> Use high precision for cumsum and check that final value matches sum <EoL>
<BoL> Compute mean and variance along an axix on a CSR or CSC matrix <EoL>
<BoL> Constructor . <EoL>
<BoL> Do the job the `` encode `` . <EoL>
<BoL> ( INTERNAL ) Decodes an attribute line . <EoL>
<BoL> ( INTERNAL ) Decodes a comment line . <EoL>
<BoL> ( INTERNAL ) Decodes a relation line . <EoL>
<BoL> Returns the Python representation of a given ARFF file . <EoL>
<BoL> ( INTERNAL ) Encodes an attribute line . <EoL>
<BoL> ( INTERNAL ) Encodes a comment line . <EoL>
<BoL> ( INTERNAL ) Decodes a relation line . <EoL>
<BoL> Encodes a given object to an ARFF file . <EoL>
<BoL> The iterative version of ` arff.ArffEncoder.encode ` . <EoL>
<BoL> ( INTERNAL ) Encodes a line of data . <EoL>
<BoL> ' '' `` # open quote followed by zero or more of : ( ? : ( ? < ! \\ ) # no additional backslash ( ? : \\\\ ) * # maybe escaped backslashes \\ '' # escaped quote | \\ [ ^ '' ] # escaping a non-quote | [ ^ '' \\ ] # non-quote char ) * `` # close quote <EoL>
<BoL> ( INTERNAL ) Split a line into a list of values <EoL>
<BoL> Serialize an object representing the ARFF document to a given file-like object . <EoL>
<BoL> Serialize an object representing the ARFF document , returning a string . <EoL>
<BoL> Load a file-like object containing the ARFF document and convert it into a Python object . <EoL>
<BoL> Convert a string instance containing the ARFF document into a Python object . <EoL>
<BoL> Clear value from cache <EoL>
<BoL> Read value from cache and return it . <EoL>
<BoL> Print the time elapsed between the last call and the current call , with an optional message.Multiprocessing writing to files can create race conditions . Rather fail silently than crash the calculation . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Recursively look up the original np.memmap instance base if any . <EoL>
<BoL> Get the full path to a subfolder inside the temporary folder . <EoL>
<BoL> Pickling reduction for memmap backed arrays . <EoL>
<BoL> Utility function to cleanup a temporary folder if it still exists . <EoL>
<BoL> Persist an arbitrary Python object into one file . <EoL>
<BoL> Return True if a is backed by some mmap buffer directly or not . <EoL>
<BoL> Reconstruct a Python object from a file persisted with joblib.dump . <EoL>
<BoL> Pickle the descriptors of a memmap instance to reopen on same file . <EoL>
<BoL> Find the module an object belong to . <EoL>
<BoL> Returns a semaphore object <EoL>
<BoL> Callback indicate how long it took to run a batch <EoL>
<BoL> Determine the optimal batch size <EoL>
<BoL> Reset batch statistics to default values . <EoL>
<BoL> Shutdown the workers and restart a new one with the same parameters <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Determine the number of jobs which are going to run in parallel <EoL>
<BoL> List of exception types to be captured . <EoL>
<BoL> Backend instance to be used by nested Parallel calls . <EoL>
<BoL> Initializer to limit the number of threads used by some C-libraries . <EoL>
<BoL> Context manager to manage an execution context . <EoL>
<BoL> Call-back method called at the beginning of a Parallel call <EoL>
<BoL> Call-back method called at the end of a Parallel call <EoL>
<BoL> Wrapper for Future.result to implement the same behaviour as AsyncResults.get from multiprocessing . <EoL>
<BoL> Used by apply_async to make it possible to implement lazy init <EoL>
<BoL> Shutdown the pool and restart a new one with the same parameters <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Determine the number of jobs which are going to run in parallel . <EoL>
<BoL> Shutdown the process or thread pool <EoL>
<BoL> Abort any running tasks <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Callback indicate how long it took to run a batch <EoL>
<BoL> Determine the optimal batch size <EoL>
<BoL> Determine the number of jobs that can actually run in parallel <EoL>
<BoL> Shutdown the workers and free the shared memory . <EoL>
<BoL> Determine the number of jobs which are going to run in parallel <EoL>
<BoL> Shutdown the process or thread pool <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Determine the number of jobs which are going to run in parallel <EoL>
<BoL> Lazily initialize the thread pool <EoL>
<BoL> Build a process or thread pool and return the number of workers <EoL>
<BoL> Return the number of CPUs the current process can use . <EoL>
<BoL> Return a nice text document describing the traceback . <EoL>
<BoL> Printable representation of the store location . <EoL>
<BoL> Writes an object into a file in a concurrency-safe way . <EoL>
<BoL> Get items to delete to keep the store under a size limit . <EoL>
<BoL> Clear the whole store content . <EoL>
<BoL> Clear the item at the path , given as a list of strings . <EoL>
<BoL> Delete location on store . <EoL>
<BoL> Clear all items with a common path in the store . <EoL>
<BoL> Configure the store backend . <EoL>
<BoL> Check if there is an item at the path , given as a list of strings <EoL>
<BoL> Check cached function is available in store . <EoL>
<BoL> Create object location on store <EoL>
<BoL> Dump an item in the store at the path given as a list of strings . <EoL>
<BoL> Store the code of the cached function . <EoL>
<BoL> Return information related to the cached function if it exists . <EoL>
<BoL> Return information about item . <EoL>
<BoL> Returns the whole list of items available in the store . <EoL>
<BoL> Return actual metadata of an item . <EoL>
<BoL> Load an item from the store given its path as a list of strings . <EoL>
<BoL> Reduce store size to keep it under the given bytes limit . <EoL>
<BoL> Store the code of the cached function . <EoL>
<BoL> Store metadata of a computation . <EoL>
<BoL> Checks if an item location exists in the store . <EoL>
<BoL> Moves an item from src to dst in the store . <EoL>
<BoL> Opens an item on the store and return a file-like object . <EoL>
<BoL> Clears a location on the store . <EoL>
<BoL> Configures the store . <EoL>
<BoL> Creates a location on the store . <EoL>
<BoL> Returns the whole list of items available in the store . <EoL>
<BoL> Writes an object into a unique file in a concurrency-safe way . <EoL>
<BoL> Convert a memory text to its value in bytes . <EoL>
<BoL> Ensure directory d exists ( like mkdir -p on Unix ) No guarantee that the directory is writable . <EoL>
<BoL> Remove all subdirectories in this path . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Read up to size uncompressed bytes from the file . <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read up to len ( b ) bytes into b . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a byte string to the file . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Flush and close the file . <EoL>
<BoL> Return the file descriptor for the underlying file . <EoL>
<BoL> Return buffered data without advancing the file position . <EoL>
<BoL> Read up to `` size `` uncompressed bytes from the file . <EoL>
<BoL> Read up to `` size `` uncompressed bytes . <EoL>
<BoL> Return whether the file was opened for reading . <EoL>
<BoL> Read a line of uncompressed bytes from the file . <EoL>
<BoL> Change the file position . <EoL>
<BoL> Return whether the file supports seeking . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return whether the file was opened for writing . <EoL>
<BoL> Write a bytes object to the file . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Returns an instance of a decompressor file object . <EoL>
<BoL> Returns an instance of a compressor file object . <EoL>
<BoL> Return the number of CPUs . <EoL>
<BoL> Return the disk usage in a directory . <EoL>
<BoL> Schedule a func to be run <EoL>
<BoL> Ensure de-pickler imports any package child-modules that are needed by the function <EoL>
<BoL> Find all globals names read or written to by codeblock co <EoL>
<BoL> Turn the function into a tuple of data necessary to recreate it : code , globals , defaults , closure_values , dict <EoL>
<BoL> Plug in system . Register additional pickling functions if modules already loaded <EoL>
<BoL> attrgetter serialize <EoL>
<BoL> Save a code object <EoL>
<BoL> Save a class that ca n't be stored as module global . <EoL>
<BoL> Save a file <EoL>
<BoL> Registered with the dispatch to handle all function types . <EoL>
<BoL> Pickles an actual func object . <EoL>
<BoL> Save a `` global '' . <EoL>
<BoL> Inner logic to save instance . Based off pickle.save_inst <EoL>
<BoL> itemgetter serializer ( needed for namedtuple support ) <EoL>
<BoL> Save a module as an import <EoL>
<BoL> Set the value of a closure cell . <EoL>
<BoL> Fills in the rest of function data into the skeleton function object <EoL>
<BoL> Return True if the module is special module that can not be imported by its name . <EoL>
<BoL> Get the Python compiler to emit LOAD_FAST ( arg ) ; STORE_DEREF <EoL>
<BoL> Creates a skeleton function object that contains just the provided code and the correct number of cells in func_closure . <EoL>
<BoL> Force every module in modList to be placed into main <EoL>
<BoL> Put attributes from ` class_dict ` back on ` skeleton_class ` . <EoL>
<BoL> Yield ( opcode , argument number ) tuples for all global-referencing instructions in *code* . <EoL>
<BoL> Serialize obj as bytes streamed into file <EoL>
<BoL> Serialize obj as a string of bytes allocated in memory <EoL>
<BoL> Create a new instance of a class . <EoL>
<BoL> Return whether *func* is a Tornado coroutine function . Running coroutines are not supported . <EoL>
<BoL> ensures all workers and management thread are running <EoL>
<BoL> Returns an iterator equivalent to map ( fn , iter ) . <EoL>
<BoL> An iterator over the given futures that yields each as it completes . <EoL>
<BoL> Wait for the futures in the given sequence to complete . <EoL>
<BoL> Close the connection <EoL>
<BoL> File descriptor or handle of the connection <EoL>
<BoL> Whether there is any input available to be read <EoL>
<BoL> Receive a ( picklable ) object <EoL>
<BoL> Receive bytes data as a bytes object . <EoL>
<BoL> Receive bytes data into a writeable bytes-like object . Return the number of bytes read . <EoL>
<BoL> Send a ( picklable ) object <EoL>
<BoL> Send the bytes data from a bytes-like object <EoL>
<BoL> Return a wrapper for an fd . <EoL>
<BoL> Attach a reducer function to a given type in the dispatch table . <EoL>
<BoL> Wait till an object in object_list is ready/readable . <EoL>
<BoL> Returns a synchronized shared array <EoL>
<BoL> Returns a barrier object <EoL>
<BoL> Returns a bounded semaphore object <EoL>
<BoL> Returns a condition object <EoL>
<BoL> Returns an event object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a non-recursive lock object <EoL>
<BoL> Returns a manager associated with a running server process <EoL>
<BoL> Returns two connection object connected by a pipe <EoL>
<BoL> Returns a recursive lock object <EoL>
<BoL> Returns a shared array <EoL>
<BoL> Returns a shared object <EoL>
<BoL> Returns a synchronized shared object <EoL>
<BoL> Return list of process objects corresponding to live child processes <EoL>
<BoL> Install support for sending connections and sockets between processes <EoL>
<BoL> Returns the number of CPUs in the system <EoL>
<BoL> Return process object representing the current process <EoL>
<BoL> Check whether this is a fake forked process in a frozen executable . If so then run code specified by commandline and exit . <EoL>
<BoL> Return package logger -- if it does not already exist then it is created . <EoL>
<BoL> Turn on logging and add a handler which prints to stde <EoL>
<BoL> Sets the path to a python.exe or pythonw.exe binary used to run child processes instead of sys.executable when using the 'spawn' start method . Useful for people embedding Python . <EoL>
<BoL> Set list of module names to try to load in forkserver process . This is really just a hint . <EoL>
<BoL> Returns a bounded semaphore object <EoL>
<BoL> Returns a condition object <EoL>
<BoL> Returns an event object <EoL>
<BoL> Returns a lock object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Returns a recurrent lock object <EoL>
<BoL> Returns a semaphore object <EoL>
<BoL> Returns a queue object <EoL>
<BoL> Private API hook called when feeding data in the background thread raises an exception . For overriding by concurrent.futures . <EoL>
<BoL> Attach a reducer function to a given type in the dispatch table . <EoL>
<BoL> Replacement for pickle.dump ( ) using _LokyPickler . <EoL>
<BoL> Attach a reducer function to a given type in the dispatch table . <EoL>
<BoL> Put a `` _clean_exit `` flag on the current thread <EoL>
<BoL> Format a list of exit code with names of the signals if possible <EoL>
<BoL> Recursively kill the descendants of a process before killing it . <EoL>
<BoL> Terminate a process and its descendants . <EoL>
<BoL> Return a formated string with the exitcodes of terminated workers . <EoL>
<BoL> Wrapper for non-picklable object to use cloudpickle to serialize them . <EoL>
<BoL> Utility method returning process information as a hashable dictionary . <EoL>
<BoL> Return the children of this process as a list of Process instances , pre-emptively checking whether PID has been reused . If *recursive* is True return all the parent descendants . <EoL>
<BoL> The command line this process has been called with . <EoL>
<BoL> Return socket connections opened by process as a list of ( fd , family , type , laddr , raddr , status ) namedtuples . The *kind* parameter filters for connections that match the following criteria : <EoL>
<BoL> Return a float representing the current process CPU utilization as a percentage . <EoL>
<BoL> Return a ( user , system , children_user , children_system ) namedtuple representing the accumulated process time , in seconds . <EoL>
<BoL> The process creation time as a floating point number expressed in seconds since the epoch , in UTC . The return value is cached after first call . <EoL>
<BoL> Process current working directory as an absolute path . <EoL>
<BoL> The environment variables of the process as a dict . Note : this might not reflect changes made after the process started . <EoL>
<BoL> The process executable as an absolute path . <EoL>
<BoL> Return process GIDs as a ( real , effective , saved ) namedtuple . <EoL>
<BoL> Return whether this process is running . It also checks if PID has been reused by another process in which case return False . <EoL>
<BoL> Kill the current process with SIGKILL pre-emptively checking whether PID has been reused . <EoL>
<BoL> This method returns the same information as memory_info ( ) , plus , on some platform ( Linux , macOS , Windows ) , also provides additional metrics ( USS , PSS and swap ) . The additional metrics provide a better representation of actual process memory usage . <EoL>
<BoL> Return a namedtuple with variable fields depending on the platform , representing memory information about the process . <EoL>
<BoL> Return process ' mapped memory regions as a list of namedtuples whose fields are variable depending on the platform . <EoL>
<BoL> Compare process memory to total physical system memory and calculate process memory utilization as a percentage . *memtype* argument is a string that dictates what type of process memory you want to compare against ( defaults to `` rss '' ) . The list of available strings can be obtained like this : <EoL>
<BoL> The process name . The return value is cached after first call . <EoL>
<BoL> Get or set process niceness ( priority ) . <EoL>
<BoL> Return the number of voluntary and involuntary context switches performed by this process . <EoL>
<BoL> Return the number of file descriptors opened by this process ( POSIX only ) . <EoL>
<BoL> Return the number of threads used by this process . <EoL>
<BoL> Utility context manager which considerably speeds up the retrieval of multiple process information at the same time . <EoL>
<BoL> Return files opened by process as a list of ( path , fd ) namedtuples including the absolute file name and file descriptor number . <EoL>
<BoL> Return the parent process as a Process object pre-emptively checking whether PID has been reused . If no parent is known return None . <EoL>
<BoL> The process parent PID . On Windows the return value is cached after first call . <EoL>
<BoL> Resume process execution with SIGCONT pre-emptively checking whether PID has been reused . On Windows this has the effect of resuming all process threads . <EoL>
<BoL> Send a signal *sig* to process pre-emptively checking whether PID has been reused ( see signal module constants ) . On Windows only SIGTERM is valid and is treated as an alias for kill ( ) . <EoL>
<BoL> The process current status as a STATUS_* constant . <EoL>
<BoL> Suspend process execution with SIGSTOP pre-emptively checking whether PID has been reused . On Windows this has the effect ot suspending all process threads . <EoL>
<BoL> The terminal associated with this process , if any , else None . <EoL>
<BoL> Terminate the process with SIGTERM pre-emptively checking whether PID has been reused . On Windows this is an alias for kill ( ) . <EoL>
<BoL> Return threads opened by process as a list of ( id , user_time , system_time ) namedtuples representing thread id and thread CPU times ( user/system ) . On OpenBSD this method requires root access . <EoL>
<BoL> Return process UIDs as a ( real , effective , saved ) namedtuple . <EoL>
<BoL> The name of the user that owns the process . On UNIX this is calculated by using *real* process uid . <EoL>
<BoL> Wait for process to terminate and , if process is a children of os.getpid ( ) , also return its exit code , else None . <EoL>
<BoL> Specialized implementation of itertools.chain.from_iterable . Each item in *iterable* should be a list . This function is careful not to keep references to yielded objects . <EoL>
<BoL> Iterates over zip ( ) ed iterables in chunks . <EoL>
<BoL> Processes a chunk of an iterable passed to map . <EoL>
<BoL> Safely send back the given result or exception <EoL>
<BoL> Wait for the cache to be empty before resizing the pool . <EoL>
<BoL> Ensure that each successive executor instance has a unique , monotonic id . <EoL>
<BoL> Try to fix the filenames in each record from inspect.getinnerframes ( ) . <EoL>
<BoL> Stateful tokeneater which builds dotted names . <EoL>
<BoL> Hopefully pretty robust repr equivalent . <EoL>
<BoL> uniq_stable ( elems ) - > list <EoL>
<BoL> Windows can not encode some characters in filename . <EoL>
<BoL> Helper function to output a function call <EoL>
<BoL> Helper function to output a function signature <EoL>
<BoL> Filters the given args and kwargs using a list of arguments to ignore , and a function specification . <EoL>
<BoL> Returns a nicely formatted statement displaying the function call with the given arguments . <EoL>
<BoL> Attempts to retrieve a reliable function code hash . <EoL>
<BoL> Return the function import path ( as a list of module names ) , and a name for the function . <EoL>
<BoL> Compatibility function to provide inspect.getfullargspec in Python 2 <EoL>
<BoL> Quick calculation of a hash to identify uniquely Python objects containing numpy arrays . <EoL>
<BoL> Subclass the save method , to hash ndarray subclass , rather than pickling them . Off course , this is a total abuse of the Pickler class . <EoL>
<BoL> Remove .1s to the time under Windows : this is the time it take to stat files . This is needed to make results similar to timings under Unix , for tests <EoL>
<BoL> We do n't store the timestamp when pickling , to avoid the hash depending from it . <EoL>
<BoL> Call wrapped function and cache result , or read cache if available . <EoL>
<BoL> stacklevel is the depth a which this function is called , to issue useful warnings to the user . <EoL>
<BoL> Return the func identifier and input parameter hash of a result . <EoL>
<BoL> Hash a function to key the online cache <EoL>
<BoL> Save a small summary of the call using json format in the output directory . <EoL>
<BoL> Write the function code and the filename to a file . <EoL>
<BoL> Force the execution of the function with the given arguments and persist the output values . <EoL>
<BoL> Call wrapped function , cache result and return a reference . <EoL>
<BoL> Empty the function 's cache . <EoL>
<BoL> Build a roughly unique identifier for the cached function . <EoL>
<BoL> Helper function to format the message when loading the results . <EoL>
<BoL> Compute the part of part associated with a function . <EoL>
<BoL> Return the correct store object for the given location . <EoL>
<BoL> Extract the first line information from the function code text if available . <EoL>
<BoL> Extend available store backends . <EoL>
<BoL> Constructor . Store the useful information for later . <EoL>
<BoL> Reconstruct the array . <EoL>
<BoL> Constructor . Store the useful information for later . <EoL>
<BoL> Read the array corresponding to this wrapper . <EoL>
<BoL> Read array from unpickler file handle . <EoL>
<BoL> Read an array using numpy memmap . <EoL>
<BoL> Write array bytes to pickler file handle . <EoL>
<BoL> Create and returns a numpy array wrapper from a numpy array . <EoL>
<BoL> Subclass the Pickler ` save ` method . <EoL>
<BoL> Read a pickled object representation from the open file . <EoL>
<BoL> Called to set the state of a newly created object . <EoL>
<BoL> Constructor . Store the useful information for later . <EoL>
<BoL> Reconstruct the array from the meta-information and the z-file . <EoL>
<BoL> Read from file-like object until size bytes are read . <EoL>
<BoL> Utility function opening the right fileobject from a filename . <EoL>
<BoL> Internal unpickling function . <EoL>
<BoL> Return the right compressor file object in write mode . <EoL>
<BoL> Reconstruct a Python object from a file persisted with joblib.dump . <EoL>
<BoL> Constructor . <EoL>
<BoL> Set the state of a newly created object . <EoL>
<BoL> Convert an int to an hexadecimal string . <EoL>
<BoL> Read the z-file and return the content as a string . <EoL>
<BoL> Write the data in the given file as a Z-file . <EoL>
<BoL> Return a buffered version of a read file object . <EoL>
<BoL> Return a buffered version of a write file object . <EoL>
<BoL> Return the compressor matching fileobj . <EoL>
<BoL> Check if fileobj is a raw file object , e.g created with open . <EoL>
<BoL> Register Dask Backend if called with parallel_backend ( `` dask '' ) <EoL>
<BoL> Returns False for indices increasingly apart , the distance depending on the value of verbose . <EoL>
<BoL> Return the active default backend <EoL>
<BoL> Register a new Parallel backend factory . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the ( key , [ values ] ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Learn a list of feature name - > indices mappings . <EoL>
<BoL> Learn a list of feature name - > indices mappings and transform X . <EoL>
<BoL> Returns a list of feature names , ordered by their indices . <EoL>
<BoL> Transform array or sparse matrix X back to feature mappings . <EoL>
<BoL> Restrict the features to those in support using feature selection . <EoL>
<BoL> Transform feature- > value dicts to array or sparse matrix . <EoL>
<BoL> No-op . <EoL>
<BoL> Transform a sequence of instances to a scipy.sparse matrix . <EoL>
<BoL> Turn X into a sequence or ndarray , avoiding a copy if possible . <EoL>
<BoL> Cast iterable x to a Sequence , avoiding a copy if possible . <EoL>
<BoL> Like d.iteritems , but accepts any collections.Mapping . <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Transforms the image samples in X into a matrix of patch data . <EoL>
<BoL> Compute the number of patches that will be extracted in an image . <EoL>
<BoL> Returns a list of edges for a 3D image . <EoL>
<BoL> Apply a mask to edges ( weighted or not ) <EoL>
<BoL> Extracts patches of any n-dimensional array in place using strides . <EoL>
<BoL> Reshape a 2D image into a collection of patches <EoL>
<BoL> Graph of the pixel-to-pixel gradient connections <EoL>
<BoL> Reconstruct the image from all of its patches . <EoL>
<BoL> Does nothing : this transformer is stateless . <EoL>
<BoL> Transform a sequence of documents to a document-term matrix . <EoL>
<BoL> Does nothing : this transformer is stateless . <EoL>
<BoL> Transform a sequence of documents to a document-term matrix . <EoL>
<BoL> Learn the idf vector ( global term weights ) <EoL>
<BoL> Transform a count matrix to a tf or tf-idf representation <EoL>
<BoL> Learn vocabulary and idf from training set . <EoL>
<BoL> Learn vocabulary and idf , return term-document matrix . <EoL>
<BoL> Transform documents to document-term matrix . <EoL>
<BoL> Count the number of non-zero values for each feature in sparse X . <EoL>
<BoL> Construct an array.array of a type suitable for scipy.sparse indices . <EoL>
<BoL> Transform accentuated unicode symbols into ascii or nothing <EoL>
<BoL> Transform accentuated unicode symbols into their simple counterpart <EoL>
<BoL> Basic regexp based HTML / XML tag stripper function <EoL>
<BoL> Run score function on ( X , y ) and get the appropriate features . <EoL>
<BoL> Get a mask , or integer index , of the features selected <EoL>
<BoL> Reverse the transformation operation <EoL>
<BoL> Reduce X to the selected features . <EoL>
<BoL> Compute the decision function of `` X `` . <EoL>
<BoL> Fit the RFE model and then the underlying estimator on the selected features . <EoL>
<BoL> Reduce X to the selected features and then predict using the underlying estimator . <EoL>
<BoL> Predict class log-probabilities for X . <EoL>
<BoL> Predict class probabilities for X . <EoL>
<BoL> Reduce X to the selected features and then return the score of the underlying estimator . <EoL>
<BoL> Fit the RFE model and automatically tune the number of selected features . <EoL>
<BoL> Fit the SelectFromModel meta-transformer . <EoL>
<BoL> Fit the SelectFromModel meta-transformer only once . <EoL>
<BoL> Learn empirical variances from X . <EoL>
<BoL> Get the boolean mask indicating which features are selected <EoL>
<BoL> apply the binary operation fn to two sparse matrices . <EoL>
<BoL> Determine whether the matrix has sorted indices and no duplicates <EoL>
<BoL> Determine whether the matrix has sorted indices <EoL>
<BoL> Divide this matrix by a second sparse matrix . <EoL>
<BoL> Return a submatrix of this matrix ( new matrix is created ) . <EoL>
<BoL> Inserts new nonzero at each ( i , j ) with value x <EoL>
<BoL> Reduce nonzeros with a ufunc over the minor axis when non-empty <EoL>
<BoL> Scalar version of self._binopt , for cases in which no new nonzeros are added . Produces a new spmatrix in canonical form . <EoL>
<BoL> Sets value at each ( i , j ) to x <EoL>
<BoL> take the member variables of other and assign them to self <EoL>
<BoL> swap the members of x if this is a column-oriented matrix <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , but with different data . <EoL>
<BoL> Sets value at each ( i , j ) to zero , preserving sparsity structure . <EoL>
<BoL> Return indices of maximum elements along an axis . <EoL>
<BoL> Return indices of minimum elements along an axis . <EoL>
<BoL> check whether the matrix format is valid <EoL>
<BoL> Remove zero entries from the matrix <EoL>
<BoL> Returns a copy of column i of the matrix , as a ( m x 1 ) CSC matrix ( column vector ) . <EoL>
<BoL> Returns a copy of row i of the matrix , as a ( 1 x n ) CSR matrix ( row vector ) . <EoL>
<BoL> Return the maximum of the matrix or maximum along an axis . This takes all elements into account , not just the non-zero ones . <EoL>
<BoL> Return the minimum of the matrix or maximum along an axis . This takes all elements into account , not just the non-zero ones . <EoL>
<BoL> Point-wise multiplication by another matrix , vector , or scalar . <EoL>
<BoL> This function performs element-wise power . <EoL>
<BoL> Remove empty space after all non-zero elements . <EoL>
<BoL> Sort the indices of this matrix *in place* <EoL>
<BoL> Return a copy of this matrix with sorted indices <EoL>
<BoL> Sum the matrix over the given axis . If the axis is None , sum over both rows and columns , returning a scalar . <EoL>
<BoL> Eliminate duplicate matrix entries by adding them together <EoL>
<BoL> Return a mask which is safe to use on X . <EoL>
<BoL> Compute chi-squared stats between each non-negative feature and class . <EoL>
<BoL> Compute the ANOVA F-value for the provided sample . <EoL>
<BoL> Performs a 1-way ANOVA . <EoL>
<BoL> Univariate linear regression tests . <EoL>
<BoL> Interpret the threshold value <EoL>
<BoL> Retrieve or aggregate feature importances from estimato <EoL>
<BoL> Create a decorator for methods that are delegated to a sub-estimator <EoL>
<BoL> Fit the model using X as training data <EoL>
<BoL> Finds the K-neighbors of a point . Returns indices of and distances to the neighbors of each point . <EoL>
<BoL> Finds the neighbors within a given radius of a point or points . <EoL>
<BoL> Computes the ( weighted ) graph of Neighbors for points in X <EoL>
<BoL> Compute mutual information between two variables . <EoL>
<BoL> Compute mutual information between two continuous variables . <EoL>
<BoL> Compute mutual information between continuous and discrete variables . <EoL>
<BoL> Iterate over columns of a matrix . <EoL>
<BoL> Ensure that target y is of a non-regression type . <EoL>
<BoL> Mutual Information between two clusterings . <EoL>
<BoL> Return the score for a fit across one fold . <EoL>
<BoL> Create subset of dataset and properly handle kernels . <EoL>
<BoL> Compute the score ( s ) of an estimator on a given test set . <EoL>
<BoL> Input checker utility for building a cross-validator <EoL>
<BoL> Determine scorer from user options . <EoL>
<BoL> Element wise squaring of array-likes and sparse matrices . <EoL>
<BoL> Fit label binarizer <EoL>
<BoL> Fit label binarizer and transform multi-class labels to binary labels . <EoL>
<BoL> Transform binary labels back to multi-class labels <EoL>
<BoL> Transform multi-class labels to binary labels <EoL>
<BoL> Fast replacement for scipy.stats.chisquare . <EoL>
<BoL> Fixes Issue # 1240 : NaNs ca n't be properly compared , so change them to the smallest value of scores 's dtype . -inf seems to be unreliable . <EoL>
<BoL> Row-wise ( squared ) Euclidean norm of X . <EoL>
<BoL> Set the intercept_ <EoL>
<BoL> Fit the ARDRegression model according to the given training data and parameters . <EoL>
<BoL> Predict using the linear model . <EoL>
<BoL> Fit the model <EoL>
<BoL> Predict using the linear model . <EoL>
<BoL> Decision function of the linear model <EoL>
<BoL> Fit model with coordinate descent . <EoL>
<BoL> Predict using the linear model <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Auxiliary method to fit the model using X , y as training data <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit linear model . <EoL>
<BoL> Probability estimation for OvR logistic regression . <EoL>
<BoL> Predict confidence scores for samples . <EoL>
<BoL> Convert coefficient matrix to dense array format . <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Predict class labels for samples in X . <EoL>
<BoL> Log of probability estimates . <EoL>
<BoL> Probability estimates . <EoL>
<BoL> Convert coefficient matrix to sparse format . <EoL>
<BoL> Returns the score using the ` scoring ` option on the given test data and labels . <EoL>
<BoL> Fit MultiTaskElasticNet model with coordinate descent <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Get concrete `` LossFunction `` object for str `` loss `` . <EoL>
<BoL> Split the dataset between training set and validation set . <EoL>
<BoL> Validate input params . <EoL>
<BoL> Set the sample weight array . <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Predict using the linear model <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Fit linear model with Passive Aggressive algorithm . <EoL>
<BoL> Predict using the linear model <EoL>
<BoL> Fit linear model with Stochastic Gradient Descent . <EoL>
<BoL> Predict using the estimated model . <EoL>
<BoL> Returns the score of the prediction . <EoL>
<BoL> Get the boolean mask indicating which features are selected . <EoL>
<BoL> Fit the model using X , y as training data . <EoL>
<BoL> Center the data in X but not in y <EoL>
<BoL> Fit Ridge regression model <EoL>
<BoL> Fit Ridge regression model <EoL>
<BoL> Fit Ridge regression model . <EoL>
<BoL> Fit the ridge classifier . <EoL>
<BoL> Fit linear model with Stochastic Gradient Descent . <EoL>
<BoL> Fit linear model . <EoL>
<BoL> Fit model . <EoL>
<BoL> Rescale data so as to support sample_weight <EoL>
<BoL> Inplace column scaling of a CSC/CSR matrix . <EoL>
<BoL> Create `` Dataset `` abstraction for sparse and dense inputs . <EoL>
<BoL> Set joblib.Parallel arguments in a compatible way for 0.11 and 0.12+ <EoL>
<BoL> Ravel column or 1d numpy array , else raises an error <EoL>
<BoL> Returns the Huber loss and the gradient . <EoL>
<BoL> This mask is safer than safe_mask since it returns an empty array , when a sparse matrix is sliced with a boolean mask with all False , instead of raising an unhelpful error in older versions of SciPy . <EoL>
<BoL> Check that all arrays have consistent first dimensions . <EoL>
<BoL> Return available LAPACK function objects from names . <EoL>
<BoL> Fit label encoder <EoL>
<BoL> Fit label encoder and return encoded labels <EoL>
<BoL> Transform labels back to original encoding . <EoL>
<BoL> Transform labels to normalized encoding . <EoL>
<BoL> Computes y * np.dot ( X , w ) . <EoL>
<BoL> Computes the gradient and the Hessian , in the case of a logistic loss . <EoL>
<BoL> Computes the logistic loss . <EoL>
<BoL> Computes the logistic loss and gradient . <EoL>
<BoL> Computes the gradient and the Hessian , in the case of a multinomial loss . <EoL>
<BoL> Computes multinomial loss and class probabilities . <EoL>
<BoL> Computes the multinomial loss , gradient and class probabilities . <EoL>
<BoL> Estimate class weights for unbalanced datasets . <EoL>
<BoL> Get a scorer from string <EoL>
<BoL> Compute the log of the logistic function , `` log ( 1 / ( 1 + e ** -x ) ) `` . <EoL>
<BoL> Calculate the softmax function . <EoL>
<BoL> Return the parameters passed to the estimato <EoL>
<BoL> Evaluate the interpolant <EoL>
<BoL> Find nearest neighbour interpolated y_new = f ( x_new ) . <EoL>
<BoL> Use previous/next neighbour of x_new , y_new = f ( x_new ) . <EoL>
<BoL> Check the inputs for being in the bounds of the interpolated data . <EoL>
<BoL> Reshape interpolated y back to n-d array similar to initial y <EoL>
<BoL> Reshape input x array to 1-D <EoL>
<BoL> Determine number trials such that at least one outlier-free subset is sampled for the given inlier/outlier ratio . <EoL>
<BoL> Checks whether the estimator 's fit method supports the given parameter . <EoL>
<BoL> A small helper to store the scores/times to the cv_results_ <EoL>
<BoL> Search all candidates in param_grid <EoL>
<BoL> Call decision_function on the estimator with the best found parameters . <EoL>
<BoL> Run fit with all sets of parameters . <EoL>
<BoL> Call inverse_transform on the estimator with the best found params . <EoL>
<BoL> Call predict on the estimator with the best found parameters . <EoL>
<BoL> Call predict_log_proba on the estimator with the best found parameters . <EoL>
<BoL> Call predict_proba on the estimator with the best found parameters . <EoL>
<BoL> Returns the score on the given data , if the estimator has been refit . <EoL>
<BoL> Call transform on the estimator with the best found parameters . <EoL>
<BoL> Helper function to avoid code duplication between self._errors and self._values . <EoL>
<BoL> Helper function to avoid code duplication between self._errors_svd and self._values_svd . <EoL>
<BoL> Fit Ridge regression model <EoL>
<BoL> Estimate sample weights by class for unbalanced datasets . <EoL>
<BoL> Fit model . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Private helper function for factorizing common classes param logic <EoL>
<BoL> Initialization for fit_binary . <EoL>
<BoL> Approximation of the breakdown point . <EoL>
<BoL> Least Squares Estimator for TheilSenRegressor class . <EoL>
<BoL> Modified Weiszfeld step . <EoL>
<BoL> Spatial median ( L1 median ) . <EoL>
<BoL> Accuracy classification score . <EoL>
<BoL> Rand index adjusted for chance . <EoL>
<BoL> Compute Area Under the Curve ( AUC ) using the trapezoidal rule <EoL>
<BoL> Determine the type of data indicated by the target . <EoL>
<BoL> Compute the Brier score . The smaller the Brier score , the better , hence the naming with `` loss '' . <EoL>
<BoL> Compute the Calinski and Harabaz score . <EoL>
<BoL> Check that y_true is binary and y_prob contains valid probabilities <EoL>
<BoL> Check that y_true and y_pred belong to the same classification task <EoL>
<BoL> Return number of samples in array-like x . <EoL>
<BoL> Performs division and handles divide-by-zero . <EoL>
<BoL> Throw a ValueError if X contains NaN or infinity . <EoL>
<BoL> Cohen 's kappa : a statistic that measures inter-annotator agreement . <EoL>
<BoL> Compute confusion matrix to evaluate the accuracy of a classification <EoL>
<BoL> Checks data structure for consistency <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , but with different data . <EoL>
<BoL> Remove zero entries from the matrix <EoL>
<BoL> Returns a copy of row i of the matrix , as a ( 1 x n ) sparse matrix ( row vector ) . <EoL>
<BoL> Eliminate duplicate matrix entries by adding them together <EoL>
<BoL> See the docstring for ` spmatrix.toarray ` . <EoL>
<BoL> Convert this matrix to Compressed Sparse Column format <EoL>
<BoL> Convert this matrix to Compressed Sparse Row format <EoL>
<BoL> A variant of X.getnnz ( ) with extension to weighting on axis 0 <EoL>
<BoL> Return a sparse matrix P so that P*self implements slicing of the form self [ [ 1,2,3 ] , : ] <EoL>
<BoL> Returns a copy of row self [ i , cslice ] <EoL>
<BoL> Return a submatrix of this matrix ( new matrix is created ) . <EoL>
<BoL> swap the members of x if this is a column-oriented matrix <EoL>
<BoL> Returns a copy of column i of the matrix , as a ( m x 1 ) CSR matrix ( column vector ) . <EoL>
<BoL> Returns a copy of row i of the matrix , as a ( 1 x n ) CSR matrix ( row vector ) . <EoL>
<BoL> Compute the average Hamming loss . <EoL>
<BoL> Average hinge loss ( non-regularized ) <EoL>
<BoL> Binarize labels in a one-vs-all fashion <EoL>
<BoL> Compute the Matthews correlation coefficient ( MCC ) <EoL>
<BoL> Extract an ordered array of unique labels <EoL>
<BoL> Zero-one classification loss . <EoL>
<BoL> Unpacks the row and column arrays and checks their shape . <EoL>
<BoL> Jaccard coefficient on the elements of the two biclusters . <EoL>
<BoL> Computes pairwise similarity matrix . <EoL>
<BoL> The similarity of two sets of biclusters . <EoL>
<BoL> Solve the linear assignment problem using the Hungarian algorithm . <EoL>
<BoL> Completeness metric of a cluster labeling given a ground truth . <EoL>
<BoL> Build a contingency matrix describing the relationship between labels . <EoL>
<BoL> Computes the Davies-Bouldin score . <EoL>
<BoL> Calculates the entropy for a labeling . <EoL>
<BoL> Measure the similarity of two clusterings of a set of points . <EoL>
<BoL> Compute the homogeneity and completeness and V-Measure scores at once . <EoL>
<BoL> Homogeneity metric of a cluster labeling given a ground truth . <EoL>
<BoL> Compute the Silhouette Coefficient for each sample . <EoL>
<BoL> Return a particular mean of two numbers . <EoL>
<BoL> Check that the labels arrays are 1D and of same dimension . <EoL>
<BoL> The number of combinations of N things taken k at a time . <EoL>
<BoL> V-measure cluster labeling given a ground truth . <EoL>
<BoL> Accumulate silhouette statistics for vertical chunk of X <EoL>
<BoL> Check that number of labels are valid . <EoL>
<BoL> Compute the distance matrix from a vector array X and optional Y . <EoL>
<BoL> Return items or rows from X using indices . <EoL>
<BoL> Coverage error measure <EoL>
<BoL> Compute ranking-based average precision <EoL>
<BoL> Compute Ranking loss measure <EoL>
<BoL> Median absolute error regression loss <EoL>
<BoL> Checks chunk is a sequence of expected size or a tuple of same <EoL>
<BoL> Handle the callable case for pairwise_ { distances , kernels } <EoL>
<BoL> Break the pairwise matrix in n_jobs even slices and compute them in parallel <EoL>
<BoL> Precompute data-derived metric parameters if not provided <EoL>
<BoL> 1 . If dtype of X and Y is float32 , then dtype float32 is returned . <EoL>
<BoL> Computes the additive chi-squared kernel between observations in X and Y <EoL>
<BoL> Set X and Y appropriately and checks inputs for paired distances <EoL>
<BoL> Set X and Y appropriately and checks inputs <EoL>
<BoL> Computes the exponential chi-squared kernel X and Y . <EoL>
<BoL> Compute cosine distance between samples in X and Y . <EoL>
<BoL> Compute cosine similarity between samples in X and Y . <EoL>
<BoL> Valid metrics for pairwise_distances . <EoL>
<BoL> Valid metrics for pairwise_kernels <EoL>
<BoL> Compute the laplacian kernel between X and Y . <EoL>
<BoL> Compute the linear kernel between X and Y . <EoL>
<BoL> Computes the paired cosine distances between X and Y <EoL>
<BoL> Computes the paired distances between X and Y . <EoL>
<BoL> Computes the paired euclidean distances between X and Y <EoL>
<BoL> Compute the L1 distances between the vectors in X and Y . <EoL>
<BoL> Compute the polynomial kernel between X and Y : : <EoL>
<BoL> Compute the rbf ( gaussian ) kernel between X and Y : : <EoL>
<BoL> Compute the sigmoid kernel between X and Y : : <EoL>
<BoL> Calculate true and false positives per binary classification threshold . <EoL>
<BoL> Assign ranks to data , dealing with ties appropriately . <EoL>
<BoL> Check that y_true and y_pred belong to the same regression task <EoL>
<BoL> Return non-default make_scorer arguments for repr . <EoL>
<BoL> Evaluate predicted target values for X relative to y_true . <EoL>
<BoL> Evaluate predicted probabilities for X relative to y_true . <EoL>
<BoL> Evaluate decision function output for X relative to y_true . <EoL>
<BoL> Check the scoring parameter in cases when multiple metrics are allowed <EoL>
<BoL> Function that wraps estimator.score <EoL>
<BoL> Generates integer indices corresponding to test sets . <EoL>
<BoL> Generates boolean masks corresponding to test sets . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validato <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Get the parameters that would be `` ind `` th in iteration <EoL>
<BoL> Iterate over the points in the grid . <EoL>
<BoL> Number of points on the grid . <EoL>
<BoL> Number of points that will be sampled . <EoL>
<BoL> Generates boolean masks corresponding to test sets . <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Search n_iter candidates from param_distributions <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generates indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Repeatedly calls ` evaluate_candidates ` to conduct a search . <EoL>
<BoL> Add a warning to be triggered when the specified key is read <EoL>
<BoL> Return the value corresponding to key , else default . <EoL>
<BoL> Simple custom repr to summarize the main info <EoL>
<BoL> Aggregate the list of dict to dict of np ndarray <EoL>
<BoL> Make arrays indexable for cross-validation . <EoL>
<BoL> Generate ( train , test ) indices <EoL>
<BoL> Returns the number of splitting iterations in the cross-validator <EoL>
<BoL> Generate indices to split data into training and test set . <EoL>
<BoL> Computes approximate mode of multivariate hypergeometric . <EoL>
<BoL> Validation helper to check if the test/test sizes are meaningful wrt to the size of the data ( n_samples ) <EoL>
<BoL> Validation helper to check the test_size and train_size at init <EoL>
<BoL> Split arrays or matrices into random train and test subsets <EoL>
<BoL> Check whether indices is a reordering of the array np.arange ( n_samples ) <EoL>
<BoL> Private helper function for parameter value indexing . <EoL>
<BoL> Returns whether the input is array-like <EoL>
<BoL> Return a dict of score for multimetric scoring <EoL>
<BoL> Auxiliary function for permutation_test_score <EoL>
<BoL> Return a shuffled copy of y eventually shuffle among same groups . <EoL>
<BoL> Determine absolute sizes of training subsets and validate 'train_sizes ' . <EoL>
<BoL> Format the exception part of a traceback . <EoL>
<BoL> Fit the model using X as training data and y as target values <EoL>
<BoL> Predict the class labels for the provided data <EoL>
<BoL> Return probability estimates for the test data X . <EoL>
<BoL> Fit the model using X as training data and y as target values <EoL>
<BoL> Predict the target for the provided data <EoL>
<BoL> Fit the Kernel Density model on the data . <EoL>
<BoL> Generate random samples from the model . <EoL>
<BoL> Compute the total log probability density under the model . <EoL>
<BoL> Evaluate the density model on the data . <EoL>
<BoL> Computes the cosine distance . <EoL>
<BoL> Creates left and right masks for all hash lengths . <EoL>
<BoL> Performs the Synchronous ascending phase . <EoL>
<BoL> Finds radius neighbors from the candidates obtained . <EoL>
<BoL> Performs descending phase to find maximum depth . <EoL>
<BoL> Fit the LSH forest on the data . <EoL>
<BoL> Returns n_neighbors of approximate nearest neighbors . <EoL>
<BoL> Inserts new data into the already fitted LSH Forest . Cost is proportional to new total size , so additions should be batched . <EoL>
<BoL> Finds the neighbors within a given radius of a point or points . <EoL>
<BoL> Shifted opposite of the Local Outlier Factor of X . <EoL>
<BoL> Fits the model to the training set X and returns the labels . <EoL>
<BoL> The local reachability density ( LRD ) <EoL>
<BoL> Predict the labels ( 1 inlier , -1 outlier ) of X according to LOF . <EoL>
<BoL> Opposite of the Local Outlier Factor of X . <EoL>
<BoL> Fit the model using X as training data . <EoL>
<BoL> Fit the NearestCentroid model according to the given training data . <EoL>
<BoL> Perform classification on an array of test vectors X . <EoL>
<BoL> Predict the class labels for the provided data <EoL>
<BoL> Predict the target for the provided data <EoL>
<BoL> Generate the random projection matrix <EoL>
<BoL> Generate a sparse random projection matrix <EoL>
<BoL> Project the data by using matrix product with the random matrix <EoL>
<BoL> Creates an array of array from list of arrays . <EoL>
<BoL> Finds indices in sorted array of integers . <EoL>
<BoL> Check to make sure weights are valid <EoL>
<BoL> Get the weights from an array of distances and a parameter `` weights `` <EoL>
<BoL> Helper for the Parallel calls in KNeighborsMixin.kneighbors <EoL>
<BoL> Helper for the Parallel calls in RadiusNeighborsMixin.radius_neighbors <EoL>
<BoL> Returns an array of the weighted modal ( most common ) value in a <EoL>
<BoL> Check the validity of the input parameters <EoL>
<BoL> Return the query based on include_self param <EoL>
<BoL> Find the median across axis 0 of a CSC matrix . It is equivalent to doing np.median ( X , axis=0 ) . <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Binarize each element of X <EoL>
<BoL> Check that func and inverse_func are the inverse . <EoL>
<BoL> Fit transformer by checking X . <EoL>
<BoL> Transform X using the inverse function . <EoL>
<BoL> Transform X using the forward function . <EoL>
<BoL> Fit the transformer on dense data . <EoL>
<BoL> Fit the transformer on sparse data . <EoL>
<BoL> Fit the imputer on X . <EoL>
<BoL> Impute all missing values in X . <EoL>
<BoL> Returns n_bins_ , the number of bins per feature . <EoL>
<BoL> Fits the estimator . <EoL>
<BoL> Transforms discretized data back to original feature space . <EoL>
<BoL> Discretizes the data . <EoL>
<BoL> Reset internal data-dependent state of the scaler , if necessary . <EoL>
<BoL> Compute the maximum absolute value to be used for later scaling . <EoL>
<BoL> Scale back the data to the original representation <EoL>
<BoL> Online computation of max absolute value of X for later scaling . <EoL>
<BoL> Scale the data <EoL>
<BoL> Reset internal data-dependent state of the scaler , if necessary . <EoL>
<BoL> Compute the minimum and maximum to be used for later scaling . <EoL>
<BoL> Undo the scaling of X according to feature_range . <EoL>
<BoL> Online computation of min and max on X for later scaling . <EoL>
<BoL> Scaling features of X according to feature_range . <EoL>
<BoL> Do nothing and return the estimator unchanged <EoL>
<BoL> Scale each non zero row of X to unit norm <EoL>
<BoL> Perform custom check_array : - convert list of strings to object dtype - check for missing values for object dtype data ( check_array does not do that ) <EoL>
<BoL> Assumes X contains only categorical features . <EoL>
<BoL> Assumes X contains only categorical features . <EoL>
<BoL> New implementation assuming categorical input <EoL>
<BoL> Fit OneHotEncoder to X . <EoL>
<BoL> Fit OneHotEncoder to X , then transform X . <EoL>
<BoL> Return feature names for output features . <EoL>
<BoL> Convert the back data to the original representation . <EoL>
<BoL> Transform X using one-hot encoding . <EoL>
<BoL> Fit the OrdinalEncoder to X . <EoL>
<BoL> Convert the data back to the original representation . <EoL>
<BoL> Transform X to ordinal codes . <EoL>
<BoL> Compute number of output features . <EoL>
<BoL> Return feature names for output features <EoL>
<BoL> Transform data to polynomial features <EoL>
<BoL> Return inverse-transformed input x following Box-Cox inverse transform with parameter lambda . <EoL>
<BoL> Find and return optimal lambda parameter of the Box-Cox transform by MLE , for observed data x . <EoL>
<BoL> Return inverse-transformed input x following Yeo-Johnson inverse transform with parameter lambda . <EoL>
<BoL> Find and return optimal lambda parameter of the Yeo-Johnson transform by MLE , for observed data x.Return the negative log likelihood of the observed data x as a function of lambda . <EoL>
<BoL> Return transformed input x following Yeo-Johnson transform with parameter lambda . <EoL>
<BoL> Estimate the optimal parameter lambda for each feature . <EoL>
<BoL> Apply the inverse power transformation using the fitted lambdas . <EoL>
<BoL> Apply the power transform to each feature using the fitted lambdas . <EoL>
<BoL> Check inputs before fit and transform <EoL>
<BoL> Check the inputs before transforming <EoL>
<BoL> Compute percentiles for dense matrices . <EoL>
<BoL> Compute percentiles for sparse matrices . <EoL>
<BoL> Forward and inverse transform . <EoL>
<BoL> Private function to transform a single feature <EoL>
<BoL> Compute the quantiles used for transforming . <EoL>
<BoL> Back-projection to the original space . <EoL>
<BoL> Feature-wise transformation of the data . <EoL>
<BoL> Compute the median and quantiles to be used for scaling . <EoL>
<BoL> Scale back the data to the original representation <EoL>
<BoL> Center and scale the data . <EoL>
<BoL> Reset internal data-dependent state of the scaler , if necessary . <EoL>
<BoL> Compute the mean and std to be used for later scaling . <EoL>
<BoL> Scale back the data to the original representation <EoL>
<BoL> Online computation of mean and std on X for later scaling . <EoL>
<BoL> Perform standardization by centering and scaling <EoL>
<BoL> Helper function to factorize ( find uniques ) and encode values . <EoL>
<BoL> Helper function to check for unknowns in values to be encoded . <EoL>
<BoL> The identity function . <EoL>
<BoL> Assert allclose for sparse and dense data . <EoL>
<BoL> Augment dataset with an additional dummy feature . <EoL>
<BoL> Boolean thresholding of array-like or scipy.sparse matrix <EoL>
<BoL> Makes sure that whenever scale is zero , we handle it correctly . <EoL>
<BoL> Compute incremental mean and variance along an axix on a CSR or CSC matrix . <EoL>
<BoL> Compute minimum and maximum along an axis on a CSR or CSC matrix and optionally ignore NaN values . <EoL>
<BoL> Compute the median along the specified axis , while ignoring NaNs . <EoL>
<BoL> Power transforms are a family of parametric , monotonic transformations that are applied to make data more Gaussian-like . This is useful for modeling issues related to heteroscedasticity ( non-constant variance ) , or other situations where normality is desired . <EoL>
<BoL> Compute the boolean mask X == missing_values . <EoL>
<BoL> Compute the median of data with n_zeros additional zeros . <EoL>
<BoL> Compute the most frequent value in a 1d array extended with [ extra_value ] * n_repeat , where extra_value is assumed to be not part of the array . <EoL>
<BoL> Inverse label binarization transformation for multiclass . <EoL>
<BoL> Inverse label binarization transformation using thresholding . <EoL>
<BoL> Generate the random projection matrix <EoL>
<BoL> Generate the random projection matrix <EoL>
<BoL> Factorize density check according to Li et al . <EoL>
<BoL> Factorize argument checking for random matrix generation <EoL>
<BoL> Raises an AssertionError if two objects are not equal . <EoL>
<BoL> Generate a dense Gaussian random matrix . <EoL>
<BoL> Find a 'safe ' number of components to randomly project to <EoL>
<BoL> Fixture for the tests to assure globally controllable seeding of RNGs <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Fit the model according to the given training data . <EoL>
<BoL> Return the data transformed by a callable kernel <EoL>
<BoL> Evaluates the decision function for the samples in X . <EoL>
<BoL> Evaluates the decision function for the samples in X . <EoL>
<BoL> Fit the SVM model according to the given training data . <EoL>
<BoL> Perform classification on samples in X . <EoL>
<BoL> Validation of y and class_weight . <EoL>
<BoL> Perform regression on samples in X . <EoL>
<BoL> Signed distance to the separating hyperplane . <EoL>
<BoL> Detects the soft boundary of the set of samples X . <EoL>
<BoL> Perform classification on samples in X . <EoL>
<BoL> Raw scoring function of the samples . <EoL>
<BoL> Raise a ValueError if X has 64bit indices and accept_large_sparse=False <EoL>
<BoL> Find the liblinear magic number for the solver . <EoL>
<BoL> Generate primal coefficients from dual coefficients for the one-vs-one multi class LibSVM in the case of a linear kernel . <EoL>
<BoL> Compute a continuous , tie-breaking OvR decision function from OvO . <EoL>
<BoL> Information on system BLAS <EoL>
<BoL> Overview of the installed version of main dependencies <EoL>
<BoL> System information <EoL>
<BoL> Honour the longMessage attribute when generating failure messages . If longMessage is False this means : * Use only an explicit message if it is provided * Otherwise use the standard message for the assert <EoL>
<BoL> Fail unless an exception of class expected_exception is raised by the callable when invoked with specified positional and keyword arguments . If a different type of exception is raised , it will not be caught , and the test case will be deemed to have suffered an error , exactly as for an unexpected exception . <EoL>
<BoL> If args is empty , assertRaises/Warns is being used as a context manager , so check for a 'msg ' kwarg and return self . If args is not empty , call a callable passing positional and keyword arguments . <EoL>
<BoL> Helper to check if func is wraped by our deprecated decorato <EoL>
<BoL> Modify the sign of vectors for reproducibility <EoL>
<BoL> Helper Function <EoL>
<BoL> Generate a cartesian product of input arrays . <EoL>
<BoL> Compute density of a sparse vector <EoL>
<BoL> Computes the sum of arr assuming arr is in the log domain . Returns log ( sum ( exp ( arr ) ) ) while minimizing the possibility of over/underflow . <EoL>
<BoL> Ensure ` X.min ( ) ` > = ` min_value ` . <EoL>
<BoL> Compute the Euclidean or Frobenius norm of x . <EoL>
<BoL> Workaround for Python 2 limitations of pickling instance methods <EoL>
<BoL> Convert list of indices to boolean mask . <EoL>
<BoL> Tests if x is NaN <EoL>
<BoL> Clear all covered matrix cells <EoL>
<BoL> Find the first prime element in the specified row . Returns the column index , or -1 if no starred element was found . <EoL>
<BoL> The Hungarian algorithm . <EoL>
<BoL> Steps 1 and 2 in the Wikipedia page . <EoL>
<BoL> Cover each column containing a starred zero . <EoL>
<BoL> Find a noncovered zero and prime it . <EoL>
<BoL> Construct a series of alternating primed and starred zeros as follows . <EoL>
<BoL> Add the value found in Step 4 to every element of each covered row , and subtract it from every element of each uncovered column . Return to Step 4 without altering any stars , primes , or covered lines . <EoL>
<BoL> Compute class priors from multioutput-multiclass target data <EoL>
<BoL> Check if `` y `` is in a multilabel format . <EoL>
<BoL> Returns a copy of this matrix . <EoL>
<BoL> Number of non-zero entries , equivalent to <EoL>
<BoL> Number of stored values , including explicit zeros . <EoL>
<BoL> Resize the matrix in-place to dimensions given by `` shape `` <EoL>
<BoL> Reverses the dimensions of the sparse matrix . <EoL>
<BoL> Solve iteratively the linear system 'fhess_p . xsupi = fgrad' with a conjugate gradient descent . <EoL>
<BoL> choice ( a , size=None , replace=True , p=None ) <EoL>
<BoL> Resample arrays or sparse matrices in a consistent way <EoL>
<BoL> Find the value in data augmented with n_zeros for the given rank <EoL>
<BoL> Raises a TypeError if X is not a CSR or CSC matrix <EoL>
<BoL> Inplace column scaling of a CSR matrix . <EoL>
<BoL> Inplace row scaling of a CSR matrix . <EoL>
<BoL> Inplace row scaling of a CSR or CSC matrix . <EoL>
<BoL> Swaps two columns of a CSC/CSR matrix in-place . <EoL>
<BoL> Swaps two rows of a CSC/CSR matrix in-place . <EoL>
<BoL> Swaps two rows of a CSC matrix in-place . <EoL>
<BoL> Swaps two rows of a CSR matrix in-place . <EoL>
<BoL> Decorator to catch and hide warnings without visual nesting . <EoL>
<BoL> Utility function to cleanup a temporary folder if still existing . <EoL>
<BoL> Helper to get function arguments <EoL>
<BoL> Get function full name <EoL>
<BoL> Test must raise one of expected exceptions to pass . <EoL>
<BoL> Decorator to add setup and/or teardown methods to a test function : : <EoL>
<BoL> Raises an AssertionError if two items are not equal up to desired precision . <EoL>
<BoL> Raises an AssertionError if two items are not equal up to significant digits . <EoL>
<BoL> Raises an AssertionError if two objects are not equal up to desired precision . <EoL>
<BoL> Raises an AssertionError if two array_like objects are not equal . <EoL>
<BoL> Raises an AssertionError if two array_like objects are not ordered by less than . <EoL>
<BoL> Helper function to test the message raised in an exception . <EoL>
<BoL> Test that a certain warning occurs . <EoL>
<BoL> Assume that numpy 's warning for divide by zero is raised <EoL>
<BoL> Helper to check docstring <EoL>
<BoL> Clean Python warning registry for easier testing of warning messages . <EoL>
<BoL> Create a fake mldata data set . <EoL>
<BoL> Test decorator that skips test if matplotlib not installed . <EoL>
<BoL> Context manager and decorator to ignore warnings . <EoL>
<BoL> Set random state of an estimator if it has the ` random_state ` param . <EoL>
<BoL> Like assert_all_finite , but only for ndarray . <EoL>
<BoL> Return a platform independent representation of an array shape <EoL>
<BoL> Check that `` memory `` is joblib.Memory-like . <EoL>
<BoL> Compute the area of a polygon . <EoL>
<BoL> Clip a polygon to the given bounding box . <EoL>
<BoL> Context for use in testing to ensure that all warnings are raised . <EoL>
<BoL> Context for use in testing to catch known warnings matching regexes <EoL>
<BoL> A version of ` warnings.warn ` with a default stacklevel of 2 . <EoL>
<BoL> Verify an array meets the desired ndims and array is n't empty . <EoL>
<BoL> Turn seed into a ` np.random.RandomState ` instance . <EoL>
<BoL> Convert input image to double image with the appropriate range . <EoL>
<BoL> Create a copy of a function . <EoL>
<BoL> Return the class for a bound method . <EoL>
<BoL> Convert an image to floating point format . <EoL>
<BoL> Attempt to safely cast values to integer format . <EoL>
<BoL> Run all unit tests . <EoL>
<BoL> Return decorator that adapts to RGB images to a gray-scale filter . <EoL>
<BoL> Return color image by applying ` image_filter ` on channels of ` image ` . <EoL>
<BoL> Return color image by applying ` image_filter ` on HSV-value of ` image ` . <EoL>
<BoL> Return True if the image *looks* like it 's RGB . <EoL>
<BoL> convert cartesian coordinates to polar ( uses non-standard theta range ! ) <EoL>
<BoL> Do the color space conversion . <EoL>
<BoL> Check the shape of the array and convert it to floating point representation . <EoL>
<BoL> Ensure input for lab2lch , lch2lab are well-posed . <EoL>
<BoL> Check the shape of the array to be RGBA and convert it to floating point representation . <EoL>
<BoL> Stain to RGB color space conversion . <EoL>
<BoL> Convert an image array to a new color space . <EoL>
<BoL> Return intensity limits , i.e . ( min , max ) tuple , of the image 's dtype . <EoL>
<BoL> Get the XYZ coordinates of the given illuminant and observer [ 1 ] _ . <EoL>
<BoL> Create an RGB representation of a gray-level image . <EoL>
<BoL> Make an educated guess about whether an image has a channels dimension . <EoL>
<BoL> Haematoxylin-Eosin-DAB ( HED ) to RGB color space conversion . <EoL>
<BoL> HSV to RGB color space conversion . <EoL>
<BoL> CIE-LAB to CIE-LCH color space conversion . <EoL>
<BoL> Lab to RGB color space conversion . <EoL>
<BoL> CIE-LAB to XYZcolor space conversion . <EoL>
<BoL> CIE-LCH to CIE-LAB color space conversion . <EoL>
<BoL> Luv to RGB color space conversion . <EoL>
<BoL> CIE-Luv to XYZ color space conversion . <EoL>
<BoL> Compute luminance of an RGB image . <EoL>
<BoL> RGB to Haematoxylin-Eosin-DAB ( HED ) color space conversion . <EoL>
<BoL> RGB to HSV color space conversion . <EoL>
<BoL> RGB to lab color space conversion . <EoL>
<BoL> RGB to CIE-Luv color space conversion . <EoL>
<BoL> RGB to RGB CIE color space conversion . <EoL>
<BoL> RGB to XYZ color space conversion . <EoL>
<BoL> RGB to YCbCr color space conversion . <EoL>
<BoL> RGB to YDbDr color space conversion . <EoL>
<BoL> RGB to YIQ color space conversion . <EoL>
<BoL> RGB to YPbPr color space conversion . <EoL>
<BoL> RGB to YUV color space conversion . <EoL>
<BoL> RGBA to RGB conversion . <EoL>
<BoL> RGB CIE to RGB color space conversion . <EoL>
<BoL> RGB to stain color space conversion . <EoL>
<BoL> XYZ to CIE-LAB color space conversion . <EoL>
<BoL> XYZ to CIE-Luv color space conversion . <EoL>
<BoL> XYZ to RGB color space conversion . <EoL>
<BoL> YCbCr to RGB color space conversion . <EoL>
<BoL> YDbDr to RGB color space conversion . <EoL>
<BoL> YIQ to RGB color space conversion . <EoL>
<BoL> YPbPr to RGB color space conversion . <EoL>
<BoL> YUV to RGB color space conversion . <EoL>
<BoL> Visualise each segment in ` label_field ` with its mean color in ` image ` . <EoL>
<BoL> Return ` unique_labels ` and ` color_cycle ` for label array and color list . <EoL>
<BoL> Return RGB color as ( 1 , 3 ) array . <EoL>
<BoL> Euclidean distance between two points in Lab color space <EoL>
<BoL> Color difference as given by the CIEDE 2000 standard . <EoL>
<BoL> Color difference according to CIEDE 94 standard <EoL>
<BoL> Color difference from the CMC l : c standard . <EoL>
<BoL> squared hue difference term occurring in deltaE_cmc and deltaE_ciede94 <EoL>
<BoL> Color image of the astronaut Eileen Collins . <EoL>
<BoL> Gray-level `` camera '' image . <EoL>
<BoL> Checkerboard image . <EoL>
<BoL> Chelsea the cat . <EoL>
<BoL> Motion blurred clock . <EoL>
<BoL> Coffee cup . <EoL>
<BoL> Greek coins from Pompeii . <EoL>
<BoL> Black and white silhouette of a horse . <EoL>
<BoL> Hubble eXtreme Deep Field . <EoL>
<BoL> Convert an image to boolean format . <EoL>
<BoL> Immunohistochemical ( IHC ) staining with hematoxylin counterstaining . <EoL>
<BoL> Subset of data from the LFW dataset . <EoL>
<BoL> Load an image file located in the data directory . <EoL>
<BoL> Scikit-image logo , a RGBA image . <EoL>
<BoL> Surface of the moon . <EoL>
<BoL> Scanned page . <EoL>
<BoL> Launch photo of DSCOVR on Falcon 9 by SpaceX . <EoL>
<BoL> Rectified stereo image pair with ground-truth disparities . <EoL>
<BoL> Gray-level `` text '' image used for corner detection . <EoL>
<BoL> Set the default plugin for a specified operation . The plugin will be loaded if it has n't been already . <EoL>
<BoL> Generate a mask for a filled circle shape . <EoL>
<BoL> Generate an array of random colors . <EoL>
<BoL> Generate a mask for a filled rectangle shape . <EoL>
<BoL> Generate a mask for a filled equilateral triangle shape . <EoL>
<BoL> Generate coordinates of pixels within circle . <EoL>
<BoL> Generate coordinates of pixels within polygon . <EoL>
<BoL> Generate Bezier curve coordinates . <EoL>
<BoL> Generate circle perimeter coordinates . <EoL>
<BoL> Generate anti-aliased circle perimeter coordinates . <EoL>
<BoL> Generate coordinates of points within ellipse bounded by shape . <EoL>
<BoL> Generate coordinates of pixels within ellipse . <EoL>
<BoL> Generate ellipse perimeter coordinates . <EoL>
<BoL> Generate line pixel coordinates . <EoL>
<BoL> Generate anti-aliased line pixel coordinates . <EoL>
<BoL> Generate polygon perimeter coordinates . <EoL>
<BoL> Generate coordinates of pixels within a rectangle . <EoL>
<BoL> Set pixel color in the image at the given coordinates . <EoL>
<BoL> Generates ellipsoid with semimajor axes aligned with grid dimensions on grid with specified ` spacing ` . <EoL>
<BoL> Calculates analytical surface area and volume for ellipsoid with semimajor axes aligned with grid dimensions of specified ` spacing ` . <EoL>
<BoL> Contrast Limited Adaptive Histogram Equalization . <EoL>
<BoL> Perform clipping of the histogram and redistribution of bins . <EoL>
<BoL> Convert an image to 16-bit unsigned integer format . <EoL>
<BoL> Calculate the equalized lookup table ( mapping ) . <EoL>
<BoL> Return image after stretching or shrinking its intensity levels . <EoL>
<BoL> Performs Gamma Correction on the input image . <EoL>
<BoL> Performs Logarithmic correction on the input image . <EoL>
<BoL> Performs Sigmoid Correction on the input image . <EoL>
<BoL> Return cumulative distribution function ( cdf ) for the given image . <EoL>
<BoL> Return image after histogram equalization . <EoL>
<BoL> Return histogram of image . <EoL>
<BoL> Return image intensity range ( min , max ) based on desired value type . <EoL>
<BoL> Return specified page . <EoL>
<BoL> Return iterator over pages . <EoL>
<BoL> Return number of image pages in file . <EoL>
<BoL> Return string containing information about file . <EoL>
<BoL> Set strip_byte_counts to size of compressed data . <EoL>
<BoL> Unwrap strip offsets for LSM files greater than 4 GB . <EoL>
<BoL> Return image series in FluoView file . <EoL>
<BoL> Read TIFF header and all page records from file . <EoL>
<BoL> Return image series in ImageJ file . <EoL>
<BoL> Return image series in LSM file . <EoL>
<BoL> Return image series in NIH file . <EoL>
<BoL> Return image data from multiple TIFF pages as numpy array . <EoL>
<BoL> Close open file handle ( s ) . <EoL>
<BoL> Return string with detailed information about file . <EoL>
<BoL> Return string with information about image sequence . <EoL>
<BoL> Get axes and shape from file names . <EoL>
<BoL> Read image data from all files and return as single numpy array . <EoL>
<BoL> Return current date and time . <EoL>
<BoL> Write meta data to image_description tag . <EoL>
<BoL> Write outstanding IFDs and tags to file . <EoL>
<BoL> Write remaining pages ( if not truncate ) and close file handle . <EoL>
<BoL> Return image data from TIFF file ( s ) as numpy array . <EoL>
<BoL> Write image data to TIFF file . <EoL>
<BoL> Return attribute from underlying file object . <EoL>
<BoL> Initialize file handle from file name or another file handle . <EoL>
<BoL> Close file . <EoL>
<BoL> Flush write buffers if applicable . <EoL>
<BoL> Return numpy.memmap of data stored in file . <EoL>
<BoL> Open or re-open file . <EoL>
<BoL> Read 'size ' bytes from file , or until EOF is reached . <EoL>
<BoL> Return numpy array from file . <EoL>
<BoL> Return numpy record from file . <EoL>
<BoL> Set file 's current position . <EoL>
<BoL> Return file 's current position . <EoL>
<BoL> Write bytestring to file . <EoL>
<BoL> Write numpy array to binary file . <EoL>
<BoL> Pretty print Record . <EoL>
<BoL> Return tag value . <EoL>
<BoL> Initialize instance from file . <EoL>
<BoL> Return string containing information about page . <EoL>
<BoL> Read TIFF IFD structure and its tags from file . <EoL>
<BoL> Return if page 's image data in file can be memory-mapped . <EoL>
<BoL> Return if ImageJ data are contiguous and adjust page attributes . <EoL>
<BoL> Return string with detailed information about page . <EoL>
<BoL> Return specified TiffPage . <EoL>
<BoL> Return iterator over TiffPages in series . <EoL>
<BoL> Return number of TiffPages in series . <EoL>
<BoL> Return string with information about series . <EoL>
<BoL> Return image data from series of TIFF pages as numpy array . <EoL>
<BoL> Initialize instance from file or arguments . <EoL>
<BoL> Return string containing information about tag . <EoL>
<BoL> Correct LSM bitspersample tag . <EoL>
<BoL> Initialize instance from arguments . <EoL>
<BoL> Read tag structure from open file . Advance file cursor . <EoL>
<BoL> Return value as human readable string . <EoL>
<BoL> Return string with information about all tags . <EoL>
<BoL> Decompress LZW ( Lempel-Ziv-Welch ) encoded TIFF strip ( byte string ) .Return integer of 'bitw ' bits at 'bitcount ' position in encoded . <EoL>
<BoL> Decompress PackBits encoded byte string . <EoL>
<BoL> Reverse bits in each byte of byte string or numpy array . <EoL>
<BoL> Decompress byte string to array of integers of any bit size < = 32 . <EoL>
<BoL> Block the GUI . For use as skimage plugin . <EoL>
<BoL> Try replace decorated function by module.function . <EoL>
<BoL> Return palette-colored image . <EoL>
<BoL> Return file name ( s ) from Tkinter 's file open dialog . <EoL>
<BoL> Return argument as one of types if possible . <EoL>
<BoL> Decode floating point horizontal differencing . <EoL>
<BoL> Return datetime object from timestamp in Excel serial format . <EoL>
<BoL> Return file size as string from byte size . <EoL>
<BoL> Return image description from data shape and meta data . <EoL>
<BoL> Return dictionary from image description byte string . <EoL>
<BoL> Return dictionary from ImageJ image description byte string . <EoL>
<BoL> Return dictionary from ImageJ metadata tag value . <EoL>
<BoL> Return shape normalized to 6D ImageJ hyperstack TZCYXS . <EoL>
<BoL> Return datetime from days since 1/1/4713 BC and ms since midnight . <EoL>
<BoL> Return human sorted list of strings . <EoL>
<BoL> Return dict with keys from keys|keyvals and values from kwargs|keyvals . <EoL>
<BoL> Return product of sequence of numbers . <EoL>
<BoL> Read tag data from file and return as byte string . <EoL>
<BoL> Read LSM events from file and return as list of ( time , type , text ) . <EoL>
<BoL> Read LSM sequence of float pairs from file and return as list . <EoL>
<BoL> Read CS_LSM_INFO tag from file and return as numpy.rec.array . <EoL>
<BoL> Read LSM positions from file and return as list . <EoL>
<BoL> Read LSM scan information from file and return as Record . <EoL>
<BoL> Read LSM time stamps from file and return as list . <EoL>
<BoL> Read FEI SFEG/HELIOS headers and return as nested Record . <EoL>
<BoL> Read JSON tag data from file and return as object . <EoL>
<BoL> Read MicroManager non-TIFF settings from open file and return as dict . <EoL>
<BoL> Read MM_HEADER tag from file and return as numpy.rec.array . <EoL>
<BoL> Read MM_STAMP tag from file and return as numpy.ndarray . <EoL>
<BoL> Read NIH_IMAGE_HEADER tag from file and return as numpy.rec.array . <EoL>
<BoL> Read tag data from file and return as numpy array . <EoL>
<BoL> Read Zeiss SEM tag and return as Record . <EoL>
<BoL> Read TVIPS EM-MENU headers and return as Record . <EoL>
<BoL> Read MetaMorph STK UIC1Tag from file and return as dictionary . <EoL>
<BoL> Read MetaMorph STK UIC2Tag from file and return as dictionary . <EoL>
<BoL> Read MetaMorph STK UIC3Tag from file and return as dictionary . <EoL>
<BoL> Read MetaMorph STK UIC4Tag from file and return as dictionary . <EoL>
<BoL> Read UIC ImagePropertyEx tag from file and return as dict . <EoL>
<BoL> Read a single UIC tag value from file and return tag name and value . <EoL>
<BoL> Return reoriented view of image array . <EoL>
<BoL> Return axes matching new shape . <EoL>
<BoL> Return image array with at least ndim dimensions . <EoL>
<BoL> Return tuple containing value if value is not a sequence . <EoL>
<BoL> Return shape and axes with single-dimensional entries removed . <EoL>
<BoL> Read data from sequence of TiffPage and stack them vertically . <EoL>
<BoL> Return string truncated at last byte that is 7bit ASCII . <EoL>
<BoL> Return string truncated at first null character . <EoL>
<BoL> Return image with its axes permuted to match specified axes . <EoL>
<BoL> Return array from byte string containing packed samples . <EoL>
<BoL> Update dict with keys and values if keys do not already exist . <EoL>
<BoL> Apply the filter to the given data . <EoL>
<BoL> Calculate filter and data FFT in preparation for filtering . <EoL>
<BoL> Filter an image with the Hessian filter . <EoL>
<BoL> Return an image of the same shape where each pixel is the index of the pixel value in the ascending order of the unique values of ` image ` , aka the rank-order value . <EoL>
<BoL> Apply hysteresis thresholding to ` image ` . <EoL>
<BoL> Return result after masking . <EoL>
<BoL> Generate a binary structure for binary morphological operations . <EoL>
<BoL> Find the edges of an image using the Laplace operator . <EoL>
<BoL> Return the transfer function of the Laplacian . <EoL>
<BoL> Find the edge magnitude using the Prewitt transform . <EoL>
<BoL> Find the horizontal edges of an image using the Prewitt transform . <EoL>
<BoL> Find the vertical edges of an image using the Prewitt transform . <EoL>
<BoL> Find the edge magnitude using Roberts ' cross operator . <EoL>
<BoL> Find the cross edges of an image using the Roberts ' Cross operator . <EoL>
<BoL> Find the cross edges of an image using Roberts ' cross operator . <EoL>
<BoL> Find the edge magnitude using the Scharr transform . <EoL>
<BoL> Find the horizontal edges of an image using the Scharr transform . <EoL>
<BoL> Find the vertical edges of an image using the Scharr transform . <EoL>
<BoL> Find the edge magnitude using the Sobel transform . <EoL>
<BoL> Find the horizontal edges of an image using the Sobel transform . <EoL>
<BoL> Find the vertical edges of an image using the Sobel transform . <EoL>
<BoL> Apply the filter in reverse to the given data . <EoL>
<BoL> Return an array of oshape from the centre of x . <EoL>
<BoL> Pad the data to the given shape with zeros . <EoL>
<BoL> Apply the given filter to data . <EoL>
<BoL> Minimum Mean Square Error ( Wiener ) inverse filter . <EoL>
<BoL> Auto-level image using local histogram . <EoL>
<BoL> Local bottom-hat of an image . <EoL>
<BoL> Local entropy . <EoL>
<BoL> Equalize image using local histogram . <EoL>
<BoL> Decorator to add a default structuring element to morphology functions . <EoL>
<BoL> Return local gradient of an image ( i.e . local maximum - local minimum ) . <EoL>
<BoL> Convert an image to 8-bit unsigned integer format . <EoL>
<BoL> Return local maximum of an image . <EoL>
<BoL> Return local mean of an image . <EoL>
<BoL> Return local minimum of an image . <EoL>
<BoL> Return local mode of an image . <EoL>
<BoL> Local Otsu 's threshold value for each pixel . <EoL>
<BoL> Return the local number ( population ) of pixels . <EoL>
<BoL> Return the local sum of pixels . <EoL>
<BoL> Local threshold of an image . <EoL>
<BoL> Local top-hat of an image . <EoL>
<BoL> Return threshold value ( s ) based on ISODATA method . <EoL>
<BoL> Compute threshold value by Li 's iterative Minimum Cross Entropy method . <EoL>
<BoL> Return threshold value based on the mean of grayscale values . <EoL>
<BoL> Return threshold value based on minimum method . <EoL>
<BoL> Applies Niblack local threshold to an array . <EoL>
<BoL> Return threshold value based on Otsu 's method . <EoL>
<BoL> Applies Sauvola local threshold to an array . Sauvola is a modification of Niblack technique . <EoL>
<BoL> Return threshold value based on the triangle algorithm . <EoL>
<BoL> Return threshold value based on Yen 's method . <EoL>
<BoL> Compute cross-entropy between distributions above and below a threshold . <EoL>
<BoL> Return local mean and standard deviation of each pixel using a neighborhood defined by a rectangular window with size w times w. The algorithm uses integral images to speedup computation . This is used by threshold_niblack and threshold_sauvola . <EoL>
<BoL> Returns a figure comparing the outputs of different methods . <EoL>
<BoL> Crop array ` ar ` by ` crop_width ` along each dimension . <EoL>
<BoL> Integral image / summed area table . <EoL>
<BoL> Returns a figure comparing the outputs of different thresholding methods.A wrapper function to return a thresholded image . <EoL>
<BoL> Convert an image to single-precision ( 32-bit ) floating point format . <EoL>
<BoL> Convert an image to double-precision ( 64-bit ) floating point format . <EoL>
<BoL> Convert an image to 16-bit signed integer format . <EoL>
<BoL> Return selected image ( s ) in the collection . <EoL>
<BoL> Iterate over the images . <EoL>
<BoL> Number of images in collection . <EoL>
<BoL> Check that the given image number is valid . <EoL>
<BoL> Concatenate all images in the collection into an array . <EoL>
<BoL> Clear the image cache . <EoL>
<BoL> Add separators and column titles to plugin info table . <EoL>
<BoL> Pop an image from the shared image stack . <EoL>
<BoL> Push an image onto the shared image stack . <EoL>
<BoL> Find the appropriate plugin of 'kind ' and execute it . <EoL>
<BoL> Yield name of file from the given resource ( i.e . file or url ) . <EoL>
<BoL> Save an image to file . <EoL>
<BoL> Display an image . <EoL>
<BoL> Display a collection of images . <EoL>
<BoL> Display pending images . <EoL>
<BoL> Return the display range for a given set of image properties . <EoL>
<BoL> Determine nonstandard properties of an input image . <EoL>
<BoL> Raise the appropriate warning for each nonstandard image type . <EoL>
<BoL> Return an ` ImageCollection ` from files matching the given pattern . <EoL>
<BoL> Show the input image and return the current axes . <EoL>
<BoL> Display all images in the collection . <EoL>
<BoL> Return True if PIL image in palette mode is grayscale . <EoL>
<BoL> Load an image from file . <EoL>
<BoL> Save an image to disk . <EoL>
<BoL> Export an ndarray to a PIL object . <EoL>
<BoL> Import a PIL Image object to an ndarray , in memory . <EoL>
<BoL> Add a list of plugins to the module docstring , formatted as a ReStructuredText table . <EoL>
<BoL> Convert string to list of strings and ints that gives intuitive sorting . <EoL>
<BoL> Concatenate all images in the image collection into an array . <EoL>
<BoL> Return an ` ImageCollection ` from files matching the given pattern . <EoL>
<BoL> List available plugins . <EoL>
<BoL> Clear the plugin state to the default , i.e. , where no plugins are loaded <EoL>
<BoL> Add ` imread_collection ` to module if not already present . <EoL>
<BoL> Load the given plugin . <EoL>
<BoL> Return plugin name and meta-data dict from plugin config file . <EoL>
<BoL> Scan the plugins directory for .ini files and parse them to gather plugin meta-data . <EoL>
<BoL> Return plugin meta-data . <EoL>
<BoL> Return the currently preferred plugin order . <EoL>
<BoL> Read SIFT or SURF features from externally generated file . <EoL>
<BoL> Return True if string is an http or ftp path . <EoL>
<BoL> Do a keyword search on scikit-image docstrings . <EoL>
<BoL> Estimate circle model from data using total least squares . <EoL>
<BoL> Predict x- and y-coordinates using the estimated model . <EoL>
<BoL> Determine residuals of data to model . <EoL>
<BoL> Estimate circle model from data using total least squares . <EoL>
<BoL> Predict x- and y-coordinates using the estimated model . <EoL>
<BoL> Determine residuals of data to model . <EoL>
<BoL> Estimate line model from data . <EoL>
<BoL> Predict intersection of the estimated line model with a hyperplane orthogonal to a given axis . <EoL>
<BoL> Predict x-coordinates for 2D lines using the estimated model . <EoL>
<BoL> Predict y-coordinates for 2D lines using the estimated model . <EoL>
<BoL> Determine residuals of data to model . <EoL>
<BoL> Compute surface area , given vertices & triangular faces <EoL>
<BoL> Kind of lazy obtaining of the luts . <EoL>
<BoL> Return the ( weighted ) centroid of an image . <EoL>
<BoL> Compute the inertia tensor of the input image . <EoL>
<BoL> Compute the eigenvalues of the inertia tensor of the image . <EoL>
<BoL> Calculate all raw image moments up to a certain order . <EoL>
<BoL> Calculate all central image moments up to a certain order . <EoL>
<BoL> Calculate all raw image moments up to a certain order . <EoL>
<BoL> Calculate all central image moments up to a certain order . <EoL>
<BoL> Calculate Hu 's set of image moments ( 2D-only ) . <EoL>
<BoL> Calculate all normalized central image moments up to a certain order . <EoL>
<BoL> Approximate a polygonal chain with the specified tolerance . <EoL>
<BoL> Subdivision of polygonal curves using B-Splines . <EoL>
<BoL> Calculate total perimeter of all objects in binary image . <EoL>
<BoL> Down-sample image by applying function to local blocks . <EoL>
<BoL> Block view of the input n-dimensional array ( using re-striding ) . <EoL>
<BoL> Compute the mean-squared error between two images . <EoL>
<BoL> Compute the normalized root mean-squared error ( NRMSE ) between two images . <EoL>
<BoL> Compute the peak signal to noise ratio ( PSNR ) for an image . <EoL>
<BoL> Calculate the entropy of a distribution for given probability values . <EoL>
<BoL> Calculate the Shannon entropy of an image . <EoL>
<BoL> Determine number trials such that at least one outlier-free subset is sampled for the given inlier/outlier ratio . <EoL>
<BoL> NumPy < 1.8 does not support the ` axis ` argument for ` np.linalg.norm ` . <EoL>
<BoL> Test whether points on a specified grid are inside a polygon . <EoL>
<BoL> Test whether points lie inside a polygon . <EoL>
<BoL> Return the coordinates of the profile of an image along a scan line . <EoL>
<BoL> Promote im1 , im2 to nearest appropriate floating point precision . <EoL>
<BoL> Raise an error if the shape and dtype do not match . <EoL>
<BoL> Returns all combinations of shifts in n dimensions over the specified max_shifts and step sizes . <EoL>
<BoL> Apply np.roll along a set of axes . <EoL>
<BoL> BayesShrink threshold for a zero-mean details coeff array . <EoL>
<BoL> Perform total-variation denoising on n-dimensional images . <EoL>
<BoL> Calculate the robust median estimator of the noise standard deviation . <EoL>
<BoL> Universal threshold used by the VisuShrink method <EoL>
<BoL> Perform total-variation denoising using split-Bregman optimization . <EoL>
<BoL> Robust wavelet-based estimator of the ( Gaussian ) noise standard deviation . <EoL>
<BoL> Convolve two N-dimensional arrays . <EoL>
<BoL> Convolve two N-dimensional arrays using FFT . <EoL>
<BoL> Richardson-Lucy deconvolution . <EoL>
<BoL> Wiener-Hunt deconvolution <EoL>
<BoL> Inpaint masked points in image with biharmonic equations . <EoL>
<BoL> N-dimensional Laplace filter based on approximate second derivatives . <EoL>
<BoL> Solve the sparse linear system Ax=b , where b may be a vector or a matrix . <EoL>
<BoL> Return the quadratic norm of images in Fourier space . <EoL>
<BoL> Compute the transfer function of an impulse response ( IR ) . <EoL>
<BoL> 2-dimensional unitary Fourier transform . <EoL>
<BoL> N-dimensional unitary Fourier transform . <EoL>
<BoL> 2-dimensional inverse unitary Fourier transform . <EoL>
<BoL> N-dimensional unitary inverse Fourier transform . <EoL>
<BoL> 2-dimensional inverse real unitary Fourier transform . <EoL>
<BoL> N-dimensional inverse real unitary Fourier transform . <EoL>
<BoL> 2-dimensional real unitary Fourier transform <EoL>
<BoL> N-dimensional real unitary Fourier transform . <EoL>
<BoL> Recover the original from a wrapped phase image . <EoL>
<BoL> Combine this transformation with another . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Determine residuals of transformed destination coordinates . <EoL>
<BoL> Combine this transformation with another . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Setup and solve the homogeneous epipolar constraint matrix : : <EoL>
<BoL> Estimate essential matrix using 8-point algorithm . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Compute the Sampson distance . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Estimate fundamental matrix using 8-point algorithm . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Estimate the transformation from a set of corresponding points . <EoL>
<BoL> Apply forward transformation . <EoL>
<BoL> Apply inverse transformation . <EoL>
<BoL> Center and normalize image points . <EoL>
<BoL> Convert from ` numpy.pad ` mode name to the corresponding ndimage mode . <EoL>
<BoL> Estimate N-D similarity transformation with or without scaling . <EoL>
<BoL> Estimate 2D geometric transformation parameters . <EoL>
<BoL> Apply 2D matrix transform . <EoL>
<BoL> Clip output image to range of values of input image . <EoL>
<BoL> Copy b into each color layer of a , such that : : <EoL>
<BoL> Down-sample N-dimensional image by local averaging . <EoL>
<BoL> Build the source coordinates for the output of a 2-D image warp . <EoL>
<BoL> Compute the 2-dimensional finite radon transform ( FRT ) for an n x n integer array . <EoL>
<BoL> Compute the 2-dimensional inverse finite radon transform ( iFRT ) for an ( n+1 ) x n integer array . <EoL>
<BoL> Perform a circular Hough transform . <EoL>
<BoL> Perform an elliptical Hough transform . <EoL>
<BoL> Perform a straight line Hough transform . <EoL>
<BoL> Use an integral image to integrate over a given window . <EoL>
<BoL> Order angles to reduce the amount of correlated information in subsequent projections . <EoL>
<BoL> Return image with each channel smoothed by the Gaussian filter . <EoL>
<BoL> Calculates the radon transform of an image given specified projection angles . <EoL>
<BoL> Return discrete Fourier transform of real or complex sequence . <EoL>
<BoL> Return discrete inverse Fourier transform of real or complex sequence . <EoL>
<BoL> Carve vertical or horizontal seams off an image . <EoL>
<BoL> Invert an image . <EoL>
<BoL> Find ` n_points ` regularly spaced along ` ar_shape ` . <EoL>
<BoL> Return an image with ~ ` n_points ` regularly-spaced nonzero pixels . <EoL>
<BoL> Broadcast ` x ` to an array with the shape ( ` ndim ` , 2 ) . <EoL>
<BoL> Function to add random noise of various types to a floating-point image . <EoL>
<BoL> Rolling window view of the input n-dimensional array . <EoL>
<BoL> Remove repeated rows from a 2D array . <EoL>
<BoL> Interpret the input as a matrix . <EoL>
<BoL> Build a matrix object from a string , nested sequence , or array . <EoL>
<BoL> Returns True if the type of ` num ` is a scalar type . <EoL>
<BoL> Raise a square matrix to the ( integer ) power ` n ` . <EoL>
<BoL> Decorator for overriding __module__ on a function or class . <EoL>
<BoL> Adds documentation to obj which is in module place . <EoL>
<BoL> Return the length of the first dimension of the input array . <EoL>
<BoL> Check if all elements of input array are true . <EoL>
<BoL> Return the angle of the complex argument . <EoL>
<BoL> Append values to the end of an array . <EoL>
<BoL> Returns the indices that would sort an array . <EoL>
<BoL> True if two arrays have the same shape and elements , False otherwise . <EoL>
<BoL> Returns True if input arrays are shape consistent and all elements equal . <EoL>
<BoL> Return the string representation of an array . <EoL>
<BoL> Split an array into multiple sub-arrays . <EoL>
<BoL> Return a string representation of the data in an array . <EoL>
<BoL> Convert the input to an array , checking for NaNs or Infs . <EoL>
<BoL> Return a contiguous array ( ndim > = 1 ) in memory ( C order ) . <EoL>
<BoL> Return an array converted to a float type . <EoL>
<BoL> Return an array ( ndim > = 1 ) laid out in Fortran order in memory . <EoL>
<BoL> Convert an array of size 1 to its scalar equivalent . <EoL>
<BoL> Return the Bartlett window . <EoL>
<BoL> Return a string representation of a number in the given base system . <EoL>
<BoL> Return the binary representation of the input number as a string . <EoL>
<BoL> Return the Blackman window . <EoL>
<BoL> Assemble an nd-array from nested lists of blocks . <EoL>
<BoL> Broadcast an array to a new shape . <EoL>
<BoL> Returns pointers to the end-points of an array . <EoL>
<BoL> Helper function for delegating arguments to Python string functions . <EoL>
<BoL> Helper function that returns the number of characters per field in a string or unicode array . This is to abstract out the fact that for a unicode array this is itemsize / 4 . <EoL>
<BoL> Helper function to cast a result back into a string or unicode array if an object array must be used as an intermediary . <EoL>
<BoL> Helper function for determining the output type of some string operations . <EoL>
<BoL> Return element-wise string concatenation for two arrays of str or unicode . <EoL>
<BoL> Create a ` chararray ` . <EoL>
<BoL> Convert the input to a ` chararray ` , copying the data only if necessary . <EoL>
<BoL> Return a copy of ` a ` with only the first character of each element capitalized . <EoL>
<BoL> Return a copy of ` a ` with its elements centered in a string of length ` width ` . <EoL>
<BoL> Returns an array with the number of non-overlapping occurrences of substring ` sub ` in the range [ ` start ` , ` end ` ] . <EoL>
<BoL> Calls ` str.decode ` element-wise . <EoL>
<BoL> Calls ` str.encode ` element-wise . <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element in ` a ` ends with ` suffix ` , otherwise ` False ` . <EoL>
<BoL> Return ( x1 == x2 ) element-wise . <EoL>
<BoL> Return a copy of each string element where all tab characters are replaced by one or more spaces . <EoL>
<BoL> For each element , return the lowest index in the string where substring ` sub ` is found . <EoL>
<BoL> Return ( x1 > x2 ) element-wise . <EoL>
<BoL> Return ( x1 > = x2 ) element-wise . <EoL>
<BoL> Like ` find ` , but raises ` ValueError ` when the substring is not found . <EoL>
<BoL> Returns true for each element if all characters in the string are alphanumeric and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if all characters in the string are alphabetic and there is at least one character , false otherwise . <EoL>
<BoL> For each element , return True if there are only decimal characters in the element . <EoL>
<BoL> Returns true for each element if all characters in the string are digits and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if all cased characters in the string are lowercase and there is at least one cased character , false otherwise . <EoL>
<BoL> For each element , return True if there are only numeric characters in the element . <EoL>
<BoL> Returns true for each element if there are only whitespace characters in the string and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if the element is a titlecased string and there is at least one character , false otherwise . <EoL>
<BoL> Returns true for each element if all cased characters in the string are uppercase and there is at least one character , false otherwise . <EoL>
<BoL> Return a string which is the concatenation of the strings in the sequence ` seq ` . <EoL>
<BoL> Return ( x1 < x2 ) element-wise . <EoL>
<BoL> Return ( x1 < = x2 ) element-wise . <EoL>
<BoL> Return an array with the elements of ` a ` left-justified in a string of length ` width ` . <EoL>
<BoL> Return an array with the elements converted to lowercase . <EoL>
<BoL> For each element in ` a ` , return a copy with the leading characters removed . <EoL>
<BoL> Return ( a % i ) , that is pre-Python 2.6 string formatting ( iterpolation ) , element-wise for a pair of array_likes of str or unicode . <EoL>
<BoL> Return ( a * i ) , that is string multiple concatenation , element-wise . <EoL>
<BoL> Return ( x1 ! = x2 ) element-wise . <EoL>
<BoL> Partition each element in ` a ` around ` sep ` . <EoL>
<BoL> For each element in ` a ` , return a copy of the string with all occurrences of substring ` old ` replaced by ` new ` . <EoL>
<BoL> For each element in ` a ` , return the highest index in the string where substring ` sub ` is found , such that ` sub ` is contained within [ ` start ` , ` end ` ] . <EoL>
<BoL> Like ` rfind ` , but raises ` ValueError ` when the substring ` sub ` is not found . <EoL>
<BoL> Return an array with the elements of ` a ` right-justified in a string of length ` width ` . <EoL>
<BoL> Partition ( split ) each element around the right-most separator . <EoL>
<BoL> For each element in ` a ` , return a list of the words in the string , using ` sep ` as the delimiter string . <EoL>
<BoL> For each element in ` a ` , return a copy with the trailing characters removed . <EoL>
<BoL> For each element in ` a ` , return a list of the words in the string , using ` sep ` as the delimiter string . <EoL>
<BoL> For each element in ` a ` , return a list of the lines in the element , breaking at line boundaries . <EoL>
<BoL> Returns a boolean array which is ` True ` where the string element in ` a ` starts with ` prefix ` , otherwise ` False ` . <EoL>
<BoL> Return len ( a ) element-wise . <EoL>
<BoL> For each element in ` a ` , return a copy with the leading and trailing characters removed . <EoL>
<BoL> Return element-wise a copy of the string with uppercase characters converted to lowercase and vice versa . <EoL>
<BoL> Return element-wise title cased version of string or unicode . <EoL>
<BoL> For each element in ` a ` , return a copy of the string where all characters occurring in the optional argument ` deletechars ` are removed , and the remaining characters have been mapped through the given translation table . <EoL>
<BoL> Return an array with the elements converted to uppercase . <EoL>
<BoL> Return the numeric string left-filled with zeros <EoL>
<BoL> Clip ( limit ) the values in an array . <EoL>
<BoL> Stack 1-D arrays as columns into a 2-D array . <EoL>
<BoL> Return a scalar type which is common to the input arrays . <EoL>
<BoL> Get information about the arguments accepted by a code object . <EoL>
<BoL> Get the names and default values of a function 's arguments . <EoL>
<BoL> Get information about arguments passed into a particular frame . <EoL>
<BoL> Return true if the object is a code object . <EoL>
<BoL> Return true if the object is a user-defined function . <EoL>
<BoL> Return true if the object is an instance method . <EoL>
<BoL> Recursively walk a sequence , stringifying each element . <EoL>
<BoL> Check whether obj is a pathlib.Path object . <EoL>
<BoL> Load a module . <EoL>
<BoL> Returns the discrete , linear convolution of two one-dimensional sequences . <EoL>
<BoL> Find the set difference of two arrays . <EoL>
<BoL> Normalize byteorder to ' < ' or ' > ' <EoL>
<BoL> Creates a string repr of the dtype , excluding the 'dtype ( ) ' part surrounding the object . <EoL>
<BoL> Checks whether the structured data type in 'dtype' has a simple layout , where all the fields are in order , and follow each other with no alignment padding . <EoL>
<BoL> Helper function to normalize the items in dtype.fields . <EoL>
<BoL> Return the dtype type with endianness included if it 's the case <EoL>
<BoL> Construct a dtype object from a ctypes type <EoL>
<BoL> Inject the specified number of padding bytes at the end of a dtype <EoL>
<BoL> Return copy of structured array with padding between fields removed . <EoL>
<BoL> Return the data pointer cast to a particular c-types object . <EoL>
<BoL> Overrides the ctypes semi-magic method <EoL>
<BoL> A pointer to the memory area of the array as a Python integer . <EoL>
<BoL> ( c_intp*self.ndim ) : A ctypes array of length self.ndim where the basetype is the C-integer corresponding to `` dtype ( ' p ' ) `` on this platform . <EoL>
<BoL> ( c_intp*self.ndim ) : A ctypes array of length self.ndim where the basetype is the same as for the shape attribute . <EoL>
<BoL> Return the shape tuple as an array of some other c-types type . For example : `` self.shape_as ( ctypes.c_short ) `` . <EoL>
<BoL> Return the strides tuple as an array of some other c-types type . For example : `` self.strides_as ( ctypes.c_longlong ) `` . <EoL>
<BoL> Replace names which are None with the next unused f % d name <EoL>
<BoL> Calculate the greatest common divisor of a and b <EoL>
<BoL> Get a ` ctypes.c_void_p ` to arr.data , that keeps a reference to the array <EoL>
<BoL> Checks safety of getfield for object arrays . <EoL>
<BoL> Given a datatype and an order object , return a new names tuple , with the order indicated <EoL>
<BoL> Builds a signature string which resembles PEP 457 <EoL>
<BoL> Checks safety of a view involving object arrays , for example when doing : : <EoL>
<BoL> Format the error message for when __array_ufunc__ gives up . <EoL>
<BoL> Apply English case rules to convert the first character of an ASCII string to upper case . <EoL>
<BoL> Apply English case rules to convert ASCII strings to all lower case . <EoL>
<BoL> Apply English case rules to convert ASCII strings to all upper case . <EoL>
<BoL> Return a bit-width name for a given type object <EoL>
<BoL> This is a second way to initialize StructuredVoidFormat , using the raw data as input . Added to avoid changing the signature of __init__ . <EoL>
<BoL> By using this local function , we do n't need to recurse with all the arguments . Since this function is not created recursively , the cost is not significant <EoL>
<BoL> find the right formatting function for the dtype_ <EoL>
<BoL> Keep only the N-D corners ( leading and trailing edges ) of an array . <EoL>
<BoL> Object arrays containing lists should be printed unambiguously <EoL>
<BoL> Like the python 3.2 reprlib.recursive_repr , but forwards *args and **kwargs <EoL>
<BoL> Implements the repr for structured-void scalars . It is called from the scalartypes.c.src code , and is placed here because it uses the elementwise formatters defined above . <EoL>
<BoL> Determine if the given dtype is implied by the representation of its values . <EoL>
<BoL> Convert a dtype to a short form which evaluates to the same dtype . <EoL>
<BoL> Return the current print options . <EoL>
<BoL> Context manager for setting print options . <EoL>
<BoL> Set a Python function to be used when pretty printing arrays . <EoL>
<BoL> Cross-correlation of two 1-dimensional sequences . <EoL>
<BoL> Return the cross product of two ( arrays of ) vectors . <EoL>
<BoL> Return the cumulative product over the given axis . <EoL>
<BoL> Return specified diagonals . <EoL>
<BoL> Checks if we can use BLAS ( np.tensordot ) call and its beneficial to do so . <EoL>
<BoL> Computes the product of the elements in indices based on the dictionary idx_dict . <EoL>
<BoL> Finds the contraction for a given set of input and output sets . <EoL>
<BoL> Computes the number of FLOPS in the contraction . <EoL>
<BoL> Finds the path by contracting the best pair until the input list is exhausted . <EoL>
<BoL> Computes all possible pair contractions , sieves the results based on `` memory_limit `` and returns the lowest cost path . This algorithm scales factorial with respect to the elements in the list `` input_sets `` . <EoL>
<BoL> Compute the cost ( removed size + flops ) and resultant indices for performing the contraction specified by `` positions `` . <EoL>
<BoL> Update the positions and provisional input_sets of `` results `` based on performing the contraction result `` best `` . Remove any involving the tensors contracted . <EoL>
<BoL> Determine common type following standard coercion rules . <EoL>
<BoL> Return the string representation of a scalar dtype . <EoL>
<BoL> Return the number of dimensions of an array . <EoL>
<BoL> Return the product of array elements over a given axis . <EoL>
<BoL> Replaces specified elements of an array with given values . <EoL>
<BoL> Return the number of dimensions of an array . <EoL>
<BoL> Gives a new shape to an array without changing its data . <EoL>
<BoL> Return a new array with the specified shape . <EoL>
<BoL> Find indices where elements should be inserted to maintain order . <EoL>
<BoL> Return the shape of an array . <EoL>
<BoL> Return the number of elements along a given axis . <EoL>
<BoL> Check whether some values are true . <EoL>
<BoL> Return a sorted copy of an array . <EoL>
<BoL> Return the sum along diagonals of the array . <EoL>
<BoL> Determine if a class is a subclass of a second class . <EoL>
<BoL> Return a full array with the same shape and type as a given array . <EoL>
<BoL> Return numbers spaced evenly on a log scale ( a geometric progression ) . <EoL>
<BoL> Return the size of the buffer used in ufuncs . <EoL>
<BoL> Get the current way of handling floating-point errors . <EoL>
<BoL> Return the current callback function used on floating-point errors . <EoL>
<BoL> Create MachAr instance with found information on float types <EoL>
<BoL> fix rank-0 -- > rank-1 <EoL>
<BoL> fix rank > 0 -- > rank-0 <EoL>
<BoL> Get MachAr instance or MachAr-like instance <EoL>
<BoL> Return the identity array . <EoL>
<BoL> Return an array representing the indices of a grid . <EoL>
<BoL> Return the indices for the lower-triangle of an ( n , m ) array . <EoL>
<BoL> Determines whether the given object represents a scalar data-type . <EoL>
<BoL> Returns True if first argument is a typecode lower/equal in type hierarchy.Helper to produce clear error messages <EoL>
<BoL> Wrapper around cPickle.load which accepts either a file-like object or a filename . <EoL>
<BoL> Return the scalar type of highest precision of the same kind as the input . <EoL>
<BoL> Move axes of an array to new positions . <EoL>
<BoL> Normalizes an axis argument into a tuple of non-negative integer axes . <EoL>
<BoL> Determine if the first argument is a subclass of the second argument . <EoL>
<BoL> Return the scalar dtype or NumPy equivalent of Python type of an object . <EoL>
<BoL> Return an array of ones with the same shape and type as a given array . <EoL>
<BoL> Return an ndarray of the provided type that satisfies requirements . <EoL>
<BoL> Roll the specified axis backwards , until it lies in a given position . <EoL>
<BoL> Set the size of the buffer used in ufuncs . <EoL>
<BoL> Set how floating-point errors are handled . <EoL>
<BoL> Set the floating-point error callback function or log object . <EoL>
<BoL> Return an array of zeros with the same shape and type as a given array . <EoL>
<BoL> Returns a list of arguments on which to call __array_function__ . <EoL>
<BoL> Verify that a dispatcher function has the right signature . <EoL>
<BoL> Find duplication in a list , return a list of duplicated elements <EoL>
<BoL> Internal implementation of block based on repeated concatenation . <EoL>
<BoL> Recursive function checking that the depths of nested lists in ` arrays ` all match . Mismatch raises a ValueError as described in the block docstring below . <EoL>
<BoL> Convert a list of indices `` [ 0 , 1 , 2 ] `` into `` `` arrays [ 0 ] [ 1 ] [ 2 ] '' `` . <EoL>
<BoL> Returns the shape of the final array , along with a list of slices and a list of arrays that can be used for assignment inside the new array <EoL>
<BoL> Returns ( ` arrays ` , list_ndim , result_ndim , final_size ) <EoL>
<BoL> Given array shapes , return the resulting shape and slices prefixes . <EoL>
<BoL> Join a sequence of arrays along a new axis . <EoL>
<BoL> This method is called when this class is used as the .restype attribute for a shared-library function , to automatically wrap the pointer into an array . <EoL>
<BoL> Create an ndarray of the given element type and shape <EoL>
<BoL> Return a dictionary mapping __array_interface__ formats to ctypes types <EoL>
<BoL> Create a numpy array from a ctypes array or POINTER . <EoL>
<BoL> Create and return a ctypes object from a numpy array . Actually anything that exposes the __array_interface__ is accepted . <EoL>
<BoL> ` arrayrange ` is deprecated , use ` arange ` instead ! <EoL>
<BoL> Issues a DeprecationWarning , adds warning to ` old_name ` 's docstring , rebinds `` old_name.__name__ `` and returns the new function object . <EoL>
<BoL> It is possible to load a library using <EoL>
<BoL> Array-checking restype/argtypes . <EoL>
<BoL> Return a new array with sub-arrays along an axis deleted . For a one dimensional array , this returns those entries not returned by ` arr [ obj ] ` . <EoL>
<BoL> Return the indices to access the main diagonal of an array . <EoL>
<BoL> Return the indices to access the main diagonal of an n-dimensional array . <EoL>
<BoL> Display a message on a device . <EoL>
<BoL> Return the section headers of the config file . <EoL>
<BoL> Return the list of variable names . <EoL>
<BoL> Ensures that every element of 'definitions ' is a valid macro definition , ie . <EoL>
<BoL> Compile 'src ' to product 'obj ' . <EoL>
<BoL> Typecheck and fix-up some of the arguments to the 'compile ( ) ' method , and return fixed-up values . <EoL>
<BoL> Typecheck and fix up some of the arguments supplied to the 'link_* ' methods . <EoL>
<BoL> Typecheck and fix up some arguments supplied to various methods . <EoL>
<BoL> Return true if we need to relink the files listed in 'objects' to recreate 'output_file ' . <EoL>
<BoL> Decide which souce files must be recompiled . <EoL>
<BoL> Add 'dir ' to the list of directories that will be searched for header files . The compiler is instructed to search directories in the order in which they are supplied by successive calls to 'add_include_dir ( ) ' . <EoL>
<BoL> Add 'libname ' to the list of libraries that will be included in all links driven by this compiler object . Note that 'libname' should *not* be the name of a file containing a library , but the name of the library itself : the actual filename will be inferred by the linker , the compiler , or the compiler class ( depending on the platform ) . <EoL>
<BoL> Add 'dir ' to the list of directories that will be searched for libraries specified to 'add_library ( ) ' and 'set_libraries ( ) ' . The linker will be instructed to search for libraries in the order they are supplied to 'add_library_dir ( ) ' and/or 'set_library_dirs ( ) ' . <EoL>
<BoL> Add 'object ' to the list of object files ( or analogues , such as explicitly named library files or the output of `` resource compilers '' ) to be included in every link driven by this compiler object . <EoL>
<BoL> Add 'dir ' to the list of directories that will be searched for shared libraries at runtime . <EoL>
<BoL> Define a preprocessor macro for all compilations driven by this compiler object . The optional parameter 'value ' should be a string ; if it is not supplied , then the macro will be defined without an explicit value and the exact outcome depends on the compiler used ( XXX true ? does ANSI say anything about this ? ) <EoL>
<BoL> Detect the language of a given file , or list of files . Uses language_map , and language_order to do the job . <EoL>
<BoL> Search the specified list of directories for a static or shared library file 'lib ' and return the full path to that file . <EoL>
<BoL> Return the compiler option to add 'dir ' to the list of directories searched for libraries . <EoL>
<BoL> Return the compiler option to add 'lib ' to the list of libraries linked into the shared library or executable . <EoL>
<BoL> Return the compiler option to add 'dir ' to the list of directories searched for runtime libraries . <EoL>
<BoL> Define the executables ( and options for them ) that will be run to perform the various stages of compilation . The exact set of executables that may be specified here depends on the compiler class ( via the 'executables ' class attribute ) , but most will have : compiler the C/C++ compiler linker_so linker used to create shared objects and libraries linker_exe linker used to create binary executables archiver static library creator <EoL>
<BoL> Set the list of directories that will be searched to 'dirs ' ( a list of strings ) . <EoL>
<BoL> Set the list of libraries to be included in all links driven by this compiler object to 'libnames ' ( a list of strings ) . This does not affect any standard system libraries that the linker may include by default . <EoL>
<BoL> Set the list of library search directories to 'dirs ' ( a list of strings ) . This does not affect any standard library search path that the linker may search by default . <EoL>
<BoL> Set the list of object files ( or analogues ) to be included in every link to 'objects ' . This does not affect any standard object files that the linker may include by default ( such as system libraries ) . <EoL>
<BoL> Set the list of directories to search for shared libraries at runtime to 'dirs ' ( a list of strings ) . This does not affect any standard search path that the runtime linker may search by default . <EoL>
<BoL> Undefine a preprocessor macro for all compilations driven by this compiler object . <EoL>
<BoL> Do any platform-specific customization of a compiler instance . <EoL>
<BoL> Customize compiler using distutils command . <EoL>
<BoL> Return the C++ compiler . <EoL>
<BoL> Does nothing here , but is called by the get_version method and can be overridden by subclasses . In particular it is redefined in the ` FCompiler ` class where more documentation can be found . <EoL>
<BoL> Return compiler version , or None if compiler is not available . <EoL>
<BoL> Return the name of the object files for the given source files . <EoL>
<BoL> Print the compiler customizations to stdout . <EoL>
<BoL> Execute a command in a sub-process . <EoL>
<BoL> Return commandline representation used to determine if a file needs to be recompiled <EoL>
<BoL> Generate linker options for searching library directories and linking with specific libraries . <EoL>
<BoL> Generate an instance of some CCompiler subclass for the supplied platform/compiler combination . <EoL>
<BoL> Check if an objects needs to be rebuild based on its dependencies <EoL>
<BoL> Do any platform-specific customization of a CCompiler instance . <EoL>
<BoL> Perform some action that affects the outside world ( eg . <EoL>
<BoL> Convert ` bytes ` in the encoding used by a subprocess into a filesystem-appropriate ` str ` . <EoL>
<BoL> Forward bytes from a subprocess call to the console , without attempting to decode them . <EoL>
<BoL> Generate C pre-processor options ( -D , -U , -I ) as used by at least two types of compilers : the typical Unix compiler and Visual C++ . <EoL>
<BoL> Determine the default compiler to use for the given platform . <EoL>
<BoL> Get number of parallel build jobs set by the -- parallel command line argument of setup.py If the command did not receive a setting the environment variable NPY_NUM_BUILD_JOBS is checked . If that is unset , return the number of processors on the system , with a maximum of 8 ( to prevent overloading the system if there a lot of CPUs ) . <EoL>
<BoL> Return true when using mingw32 environment . <EoL>
<BoL> Create a directory and any missing ancestor directories . <EoL>
<BoL> Return true if 'target ' is out-of-date with respect to any file listed in 'sources ' . <EoL>
<BoL> Walk two filename lists in parallel , testing if each source is newer than its corresponding target . Return a pair of lists ( sources , targets ) where source is newer than target , according to the semantics of 'newer ( ) ' . <EoL>
<BoL> Print list of available compilers ( used by the `` -- help-compiler '' options to `` build '' , `` build_ext '' , `` build_clib '' ) . <EoL>
<BoL> Simple matching of version numbers , for use in CCompiler and FCompiler . <EoL>
<BoL> Run another program , specified as a command list 'cmd ' , in a new process . <EoL>
<BoL> Return True if the C compiler is GCC 4.x.int main ( ) { # if ( ! defined __GNUC__ ) || ( __GNUC__ < 4 ) # error gcc > = 4 required # endif return 0 ; } <EoL>
<BoL> Return True if the given function attribute is supported . <EoL>
<BoL> Return True if the given variable attribute is supported . <EoL>
<BoL> Return the inline identifier ( may be empty ) . # ifndef __cplusplus static % ( inline ) s int static_func ( void ) { return 0 ; } % ( inline ) s int nostatic_func ( void ) { return 0 ; } # endif <EoL>
<BoL> Return the restrict identifier ( may be empty ) .static int static_func ( char * % ( restrict ) s a ) { return 0 ; } <EoL>
<BoL> Create and initialize a new Command object . Most importantly , invokes the 'initialize_options ( ) ' method , which is the real initializer and depends on the actual command being instantiated . <EoL>
<BoL> Return True if the C compiler is gcc > = 4 . <EoL>
<BoL> Return the inline keyword recognized by the compiler , empty string otherwise . <EoL>
<BoL> Return the restrict keyword recognized by the compiler , empty string otherwise . <EoL>
<BoL> Try to compile a source file built from 'body ' and 'headers ' . Return true on success , false otherwise . <EoL>
<BoL> Construct a source file from 'body ' ( a string containing lines of C/C++ code ) and 'headers ' ( a list of header files to include ) and run it through the preprocessor . <EoL>
<BoL> Internal workhorse for exec_command ( ) . <EoL>
<BoL> Quote the argument for safe use in a shell command line . <EoL>
<BoL> Returns True if 'stream ' supports the file descriptor and allows fileno ( ) . <EoL>
<BoL> Return full path of a executable or None . <EoL>
<BoL> If we log WARN messages , log this message as a 'nice ' anti-warn message . <EoL>
<BoL> Compiles the source by spawning GCC and windres if needed . <EoL>
<BoL> Build the import libraries for Mingw32-gcc on Windows <EoL>
<BoL> Check if an import library for the Python runtime already exists . <EoL>
<BoL> msver is the ms runtime version used for the MANIFEST . <EoL>
<BoL> Given a dll file location , get all its exported symbols and dump them into the given def file . <EoL>
<BoL> Return the version of MSVC that was used to build Python . <EoL>
<BoL> Replacement for outdated version of get_msvcr from cygwinccompile <EoL>
<BoL> Return the rc file used to generate the res file which will be embedded as manifest for given manifest file name , of given type ( 'dll ' or 'exe ' ) . <EoL>
<BoL> Common implementation for add_library and add_installed_library . Do not use directly <EoL>
<BoL> Return path 's Mercurial revision number . <EoL>
<BoL> Return path 's SVN revision number . <EoL>
<BoL> Recursively add files under data_path to data_files list . <EoL>
<BoL> Add data files to configuration data_files . <EoL>
<BoL> Add define macros to configuration <EoL>
<BoL> Add extension to configuration . <EoL>
<BoL> Add installable headers to configuration . <EoL>
<BoL> Add paths to configuration include directories . <EoL>
<BoL> Similar to add_library , but the specified library is installed . <EoL>
<BoL> Add library to configuration . <EoL>
<BoL> Generate and install a npy-pkg config file from a template . <EoL>
<BoL> Add scripts to configuration . <EoL>
<BoL> Append libraries , include_dirs to extension or library item . <EoL>
<BoL> Return a path to a temporary directory where temporary files should be placed . <EoL>
<BoL> Returns the numpy.distutils config command instance . <EoL>
<BoL> Return the distutils distribution object for self . <EoL>
<BoL> Get resources information . <EoL>
<BoL> Try to get version string of a package . <EoL>
<BoL> Check for availability of Fortran 77 compiler.subroutine simple end <EoL>
<BoL> Check for availability of Fortran 90 compiler.subroutine simple end <EoL>
<BoL> Generate package __config__.py file containing system_info information used during building the package . <EoL>
<BoL> Appends a data function to the data_files list that will generate __hg_version__.py file to the current package directory . <EoL>
<BoL> Appends a data function to the data_files list that will generate __svn_version__.py file to the current package directory . <EoL>
<BoL> Apply glob to paths and prepend local_path if needed . <EoL>
<BoL> Configure Configuration instance . <EoL>
<BoL> Return a dictionary compatible with the keyword arguments of distutils setup function . <EoL>
<BoL> Return a list of Fortran f90 module names that given source file defines . <EoL>
<BoL> Return True if all items in lst are string objects . <EoL>
<BoL> Return a configuration dictionary for usage in configuration ( ) function defined in file setup_ < name > .py . <EoL>
<BoL> Return four lists of filenames containing C , C++ , Fortran , and Fortran 90 module sources , respectively . <EoL>
<BoL> Return a directory name relative to top_path and files contained . <EoL>
<BoL> Generate config.py file containing system_info information used during building the package . <EoL>
<BoL> Return frame object from call stack with given level . <EoL>
<BoL> Return an info dict for a given C library . <EoL>
<BoL> Return the MATHLIB line from numpyconfig.h <EoL>
<BoL> Return the path where to find the npy-pkg-config directory . <EoL>
<BoL> Return path of the module given a frame object from the call stack . <EoL>
<BoL> Return library info for the given package . <EoL>
<BoL> Return the correct file extension for shared libraries . <EoL>
<BoL> Apply glob to paths and prepend local_path if needed . <EoL>
<BoL> Return True if sources contains C++ files <EoL>
<BoL> Return True if sources contains Fortran files <EoL>
<BoL> Return true if directory is local directory . <EoL>
<BoL> Resolve ` .. ` and ' . ' from path . <EoL>
<BoL> Return version major and minor of compiler instance if it is MSVC , raise an exception otherwise . <EoL>
<BoL> Join two or more pathname components + - convert a /-separated pathname to one using the OS 's path separator . <EoL>
<BoL> Return path relative to parent_path . <EoL>
<BoL> sorts output of python glob for https : //bugs.python.org/issue30461 to allow extensions to have reproducible build results <EoL>
<BoL> Parse a line from a config file containing compile flags . <EoL>
<BoL> Return library info for a package from its configuration file . <EoL>
<BoL> Construct a new Distribution instance : initialize all the attributes of a Distribution , and then use 'attrs ' ( a dictionary mapping attribute names to values ) to assign some of those attributes their `` real '' values . <EoL>
<BoL> Return the non-display options recognized at the top level . <EoL>
<BoL> Parse the command-line options for a single command . <EoL>
<BoL> Set the options for 'command_obj ' from 'option_dict ' . Basically this means copying elements of a dictionary ( 'option_dict ' ) to attributes of an instance ( 'command ' ) . <EoL>
<BoL> Set final values for all the options on the Distribution instance , analogous to the .finalize_options ( ) method of Command objects . <EoL>
<BoL> Find as many configuration files as should be processed for this platform , and return a list of filenames in the order in which they should be parsed . The filenames returned are guaranteed to exist ( modulo nasty race conditions ) . <EoL>
<BoL> Return the class that implements the Distutils command named by 'command ' . <EoL>
<BoL> Get a list of ( command , description ) tuples . <EoL>
<BoL> Return the command object for 'command ' . Normally this object is cached on a previous call to 'get_command_obj ( ) ' ; if no command object for 'command ' is in the cache , then we either create and return it ( if 'create ' is true ) or return None . <EoL>
<BoL> Return a list of packages from which commands are loaded . <EoL>
<BoL> Get the option dictionary for a given command . If that command 's option dictionary has n't been created yet , then create it and return the new dictionary ; otherwise , return the existing option dictionary . <EoL>
<BoL> If there were any non-global `` display-only '' options ( -- help-commands or the metadata display options ) on the command line , display the requested info and return true ; else return false . <EoL>
<BoL> Parse the setup script 's command line , taken from the 'script_args ' instance attribute ( which defaults to 'sys.argv [ 1 : ] ' -- see 'setup ( ) ' in core.py ) . <EoL>
<BoL> Print a subset of the list of all commands -- used by 'print_commands ( ) ' . <EoL>
<BoL> Print out a help message listing all available commands with a description of each . <EoL>
<BoL> Reinitializes a command to the state it was in when first returned by 'get_command_obj ( ) ' : ie. , initialized but not yet finalized . <EoL>
<BoL> Do whatever it takes to run a command ( including nothing at all , if the command has already been run ) . <EoL>
<BoL> Run each command that was seen on the setup script command line . Uses the list of commands found and cache of command objects created by 'get_command_obj ( ) ' . <EoL>
<BoL> Find mandatory and optional libs in expected paths . <EoL>
<BoL> Updates the information in the current information with respect to these flags : extra_compile_args extra_link_args <EoL>
<BoL> If static or shared libraries are available then return their info dictionary . <EoL>
<BoL> If static or shared libraries are available then return their info dictionary . <EoL>
<BoL> Return a list of existing paths composed by all combinations of items from the arguments . <EoL>
<BoL> Return a dictonary with items that are compatible with numpy.distutils.setup keyword arguments . <EoL>
<BoL> ********************************************************************* Could not find lapack library within the ATLAS installation . ********************************************************************* <EoL>
<BoL> Return a list of existing paths composed by all combinations of items from arguments . <EoL>
<BoL> Returns True on successful version detection , else False <EoL>
<BoL> notfound_action : 0 - do nothing 1 - display warning message 2 - raise error <EoL>
<BoL> Return a string that identifies the current platform . <EoL>
<BoL> Returns a list of files named 'fname ' from 1 ) System-wide directory ( directory-location of this module ) 2 ) Users HOME directory ( os.environ [ 'HOME ' ] ) 3 ) Local directory <EoL>
<BoL> Return a list of library paths valid on 32 or 64 bit systems . <EoL>
<BoL> Compile a single source files with a Unix-style compiler . <EoL>
<BoL> Return true if 'source ' exists and is more recently modified than 'target ' , or if 'source ' exists and 'target ' does n't . <EoL>
<BoL> Split array into multiple sub-arrays along the 3rd axis ( depth ) . <EoL>
<BoL> Compute the Cholesky decomposition of a matrix . <EoL>
<BoL> Compute the determinant of a matrix <EoL>
<BoL> 2-D discrete Fourier transform . <EoL>
<BoL> Return multidimensional discrete Fourier transform . <EoL>
<BoL> 2-D discrete inverse Fourier transform of real or complex sequence . <EoL>
<BoL> Return inverse multi-dimensional discrete Fourier transform . <EoL>
<BoL> Compute the inverse of a matrix . <EoL>
<BoL> Matrix or vector norm . <EoL>
<BoL> Compute the ( Moore-Penrose ) pseudo-inverse of a matrix . <EoL>
<BoL> Convert ` x ` to double if it has real , negative components . <EoL>
<BoL> Convert ` x ` to complex if it has real components x_i with abs ( x_i ) > 1 . <EoL>
<BoL> Convert ` x ` to complex if it has real , negative components . <EoL>
<BoL> Convert its input ` arr ` to a complex array . <EoL>
<BoL> Compute the inverse cosine of x . <EoL>
<BoL> Compute the inverse sine of x . <EoL>
<BoL> Compute the inverse hyperbolic tangent of ` x ` . <EoL>
<BoL> Returns a bool array , where True if input element is real . <EoL>
<BoL> Compute the natural logarithm of ` x ` . <EoL>
<BoL> Compute the logarithm base 10 of ` x ` . <EoL>
<BoL> Compute the logarithm base 2 of ` x ` . <EoL>
<BoL> Take log base n of x . <EoL>
<BoL> Return x to the power p , ( x**p ) . <EoL>
<BoL> Compute the square root of x . <EoL>
<BoL> Expand the shape of an array . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Compute the one-dimensional discrete Fourier Transform . <EoL>
<BoL> Compute the 2-dimensional discrete Fourier Transform <EoL>
<BoL> Compute the N-dimensional discrete Fourier Transform . <EoL>
<BoL> Pop twiddle factors for an FFT of length n from the cache . <EoL>
<BoL> Store twiddle factors for an FFT of length n in the cache . <EoL>
<BoL> Compute the FFT of a signal that has Hermitian symmetry , i.e. , a real spectrum . <EoL>
<BoL> Compute the one-dimensional inverse discrete Fourier Transform . <EoL>
<BoL> Compute the 2-dimensional inverse discrete Fourier Transform . <EoL>
<BoL> Compute the N-dimensional inverse discrete Fourier Transform . <EoL>
<BoL> Compute the inverse FFT of a signal that has Hermitian symmetry . <EoL>
<BoL> Compute the inverse of the n-point DFT for real input . <EoL>
<BoL> Compute the 2-dimensional inverse FFT of a real array . <EoL>
<BoL> Compute the inverse of the N-dimensional FFT of real input . <EoL>
<BoL> Compute the one-dimensional discrete Fourier Transform for real input . <EoL>
<BoL> Compute the 2-dimensional FFT of a real array . <EoL>
<BoL> Compute the N-dimensional discrete Fourier Transform for real input . <EoL>
<BoL> Fill the main diagonal of the given array of any dimensionality . <EoL>
<BoL> Round to nearest integer towards zero . <EoL>
<BoL> Reverse the order of elements in an array along the given axis . <EoL>
<BoL> Construct an array from a text file , using regular expression parsing . <EoL>
<BoL> Compute the future value . <EoL>
<BoL> Find the wrapper for the array with the highest priority . <EoL>
<BoL> Return the directory that contains the NumPy \\*.h header files . <EoL>
<BoL> Return the Hamming window . <EoL>
<BoL> Return the Hanning window . <EoL>
<BoL> Function to calculate only the edges of the bins used by the ` histogram ` function . <EoL>
<BoL> Split an array into multiple sub-arrays horizontally ( column-wise ) . <EoL>
<BoL> Modified Bessel function of the first kind , order 0 . <EoL>
<BoL> Return the imaginary part of the complex argument . <EoL>
<BoL> Test whether each element of a 1-D array is also present in a second array . <EoL>
<BoL> One-dimensional linear interpolation . <EoL>
<BoL> Find the intersection of two arrays . <EoL>
<BoL> Compute the interest portion of a payment . <EoL>
<BoL> Return the Internal Rate of Return ( IRR ) . <EoL>
<BoL> Returns a bool array , where True if input element is complex . <EoL>
<BoL> Check for a complex type or an array of complex numbers . <EoL>
<BoL> Test element-wise for negative infinity , return result as bool array . <EoL>
<BoL> Test element-wise for positive infinity , return result as bool array . <EoL>
<BoL> Return True if x is a not complex type or an array of complex numbers . <EoL>
<BoL> Return an antiderivative ( indefinite integral ) of a polynomial . <EoL>
<BoL> Construct an open mesh from multiple sequences . <EoL>
<BoL> Return the Kaiser window . <EoL>
<BoL> Kronecker product of two arrays . <EoL>
<BoL> Return corresponding data . <EoL>
<BoL> Return a new arrayterator . <EoL>
<BoL> Compare alpha/beta/rc/final . <EoL>
<BoL> Compare major.minor.bugfix <EoL>
<BoL> Create a Repository with a shared url or directory of baseurl . <EoL>
<BoL> Extend DataSource method to prepend baseurl to `` path `` . <EoL>
<BoL> Return complete path for path . Prepends baseurl if necessary . <EoL>
<BoL> Return absolute path of file in the Repository directory . <EoL>
<BoL> Test if path exists prepending Repository base URL to path . <EoL>
<BoL> List files in the source Repository . <EoL>
<BoL> Open and return file-like object prepending Repository base URL . <EoL>
<BoL> Return the keys of currently supported file openers . <EoL>
<BoL> Check mode and that encoding and newline are compatible . <EoL>
<BoL> Wrapper to open bz2 in text mode . <EoL>
<BoL> Wrapper to open gzip in text mode . <EoL>
<BoL> Open ` path ` with ` mode ` and return the file object . <EoL>
<BoL> Chop off comments , strip , and split at delimiter . <EoL>
<BoL> Wrapper to strip each member of the output of ` method ` . <EoL>
<BoL> Validate a list of strings as field names for a structured array . <EoL>
<BoL> Returns dtype for datetime64 and type of dtype otherwise . <EoL>
<BoL> Returns the dtype of the input variable . <EoL>
<BoL> Returns the type of the dtype of the input variable . <EoL>
<BoL> Find the best converter for a given string , and return the result . <EoL>
<BoL> Upgrade the mapper of a StringConverter by adding a new function and its corresponding default . <EoL>
<BoL> Decode bytes from binary input streams . <EoL>
<BoL> Check whether obj behaves like a bytes object . <EoL>
<BoL> Check whether obj behaves like a string . <EoL>
<BoL> Returns the filehandle corresponding to a string or a file . If the string ends in '.gz ' , the file is automatically unzipped . <EoL>
<BoL> Convenience function to create a ` np.dtype ` object . <EoL>
<BoL> Unpack a structured data-type by collapsing nested fields and/or fields with a shape . <EoL>
<BoL> Returns whether one or several fields of a dtype are nested . <EoL>
<BoL> Tries to transform a string supposed to represent a boolean to a boolean . <EoL>
<BoL> Append constant ` val ` along ` axis ` of ` arr ` . <EoL>
<BoL> Append ` pad_amt ` to ` arr ` along ` axis ` by extending edge values . <EoL>
<BoL> Pad one ` axis ` of ` arr ` with the maximum of the last ` num ` elements . <EoL>
<BoL> Append ` pad_amt ` mean values along ` axis ` . <EoL>
<BoL> Append ` pad_amt ` median values along ` axis ` . <EoL>
<BoL> Append ` pad_amt ` median values along ` axis ` . <EoL>
<BoL> Append linear ramp along ` axis ` . <EoL>
<BoL> Create an ndarray of ` shape ` with increments along specified ` axis ` <EoL>
<BoL> Pad ` axis ` of ` arr ` by reflection . <EoL>
<BoL> Pad ` axis ` of ` arr ` by symmetry . <EoL>
<BoL> Pad ` axis ` of ` arr ` via wrapping . <EoL>
<BoL> Prepend constant ` val ` along ` axis ` of ` arr ` . <EoL>
<BoL> Prepend ` pad_amt ` to ` arr ` along ` axis ` by extending edge values . <EoL>
<BoL> Prepend ` pad_amt ` maximum values along ` axis ` . <EoL>
<BoL> Prepend ` pad_amt ` mean values along ` axis ` . <EoL>
<BoL> Prepend ` pad_amt ` median values along ` axis ` . <EoL>
<BoL> Prepend ` pad_amt ` minimum values along ` axis ` . <EoL>
<BoL> Prepend linear ramp along ` axis ` . <EoL>
<BoL> Rounds arr inplace if destination dtype is integer . <EoL>
<BoL> Construct a slice tuple the length of shape , with sl at the specified axis <EoL>
<BoL> Construct a slice tuple to take the first n elements along axis <EoL>
<BoL> Construct a slice tuple to take the last n elements along axis <EoL>
<BoL> Unpacks one-element tuples for use as return values <EoL>
<BoL> Find the set exclusive-or of two arrays . <EoL>
<BoL> Find the union of two arrays . <EoL>
<BoL> This function is here to simply have a different name for the 'fv' function to not interfere with the 'fv ' keyword argument within the 'ipmt' function . It is the 'remaining balance on loan ' which might be useful as it 's own function , but is easily calculated with the 'fv ' function . <EoL>
<BoL> Modified internal rate of return . <EoL>
<BoL> Compute the number of periodic payments . <EoL>
<BoL> Compute the payment against loan principal plus interest . <EoL>
<BoL> Compute the payment against loan principal . <EoL>
<BoL> Compute the present value . <EoL>
<BoL> Compute the rate of interest per period . <EoL>
<BoL> Clean up ' L ' in npz header ints . <EoL>
<BoL> see read_array_header_1_0 <EoL>
<BoL> Read from file-like object until size bytes are read . <EoL>
<BoL> Write the header for an array and returns the version used <EoL>
<BoL> descr may be stored as dtype.descr , which is a list of ( name , format , [ shape ] ) tuples . Offsets are not explicitly saved , rather empty fields with name , format == `` , '|Vn ' are added as padding . <EoL>
<BoL> Get a serializable descriptor from the dtype . <EoL>
<BoL> Get the dictionary of header metadata from a numpy.ndarray . <EoL>
<BoL> Return the magic string for the given file format version . <EoL>
<BoL> Read an array from an NPY file . <EoL>
<BoL> Read an array header from a filelike object using the 1.0 file format version . <EoL>
<BoL> Read an array header from a filelike object using the 2.0 file format version . <EoL>
<BoL> Read the magic string to get the version of the file format . <EoL>
<BoL> Protected string evaluation . <EoL>
<BoL> Write an array to an NPY file , including a header . <EoL>
<BoL> Write the header for an array using the 1.0 format . <EoL>
<BoL> Write the header for an array using the 2.0 format . The 2.0 format allows storing very large structured arrays . <EoL>
<BoL> Helper for calculating broadcast shapes with core dimensions . <EoL>
<BoL> Helper for creating output arrays in vectorize . <EoL>
<BoL> Parse string signatures for a generalized universal function . <EoL>
<BoL> Parse broadcast and core dimensions for vectorize with a signature . <EoL>
<BoL> Incrementally check and update core dimension sizes for a single argument . <EoL>
<BoL> Internal Function . Call ` func ` with ` a ` as first argument swapping the axes to use extended axis on functions that do n't support it natively . <EoL>
<BoL> Return a copy of an array sorted along the first axis . <EoL>
<BoL> Change elements of an array based on conditional and input values . <EoL>
<BoL> Rotate an array by 90 degrees in the plane specified by axes . <EoL>
<BoL> Return an array drawn from elements in choicelist , depending on conditions . <EoL>
<BoL> Return the sinc function . <EoL>
<BoL> Integrate along the given axis using the composite trapezoidal rule . <EoL>
<BoL> Trim the leading and/or trailing zeros from a 1-D array or sequence . <EoL>
<BoL> Unwrap by changing deltas between values to 2*pi complement . <EoL>
<BoL> Computes the bins used internally by ` histogram ` . <EoL>
<BoL> Determine the outer bin edges to use , from either the data or the range argument <EoL>
<BoL> Histogram bin estimator that uses the minimum width of the Freedman-Diaconis and Sturges estimators if the FD bandwidth is non zero and the Sturges estimator if the FD bandwidth is 0 . <EoL>
<BoL> Doane 's histogram bin estimator . <EoL>
<BoL> The Freedman-Diaconis histogram bin estimator . <EoL>
<BoL> Rice histogram bin estimator . <EoL>
<BoL> Scott histogram bin estimator . <EoL>
<BoL> Square root histogram bin estimator . <EoL>
<BoL> Histogram bin estimator based on minimizing the estimated integrated squared error ( ISE ) . <EoL>
<BoL> Sturges histogram bin estimator . <EoL>
<BoL> Check a and weights have matching shapes , and ravel both <EoL>
<BoL> Like ` searchsorted ` , but where the last item in ` v ` is placed on the right . <EoL>
<BoL> Subtract two values where a > = b , and produce an unsigned result <EoL>
<BoL> Load ASCII data stored in a text file and return a masked array . <EoL>
<BoL> Return the indices to access ( n , n ) arrays , given a masking function . <EoL>
<BoL> Return the character for the minimum-size type to which given types can be safely cast . <EoL>
<BoL> Implement a forward binary method with a ufunc , e.g. , __add__ . <EoL>
<BoL> True when __array_ufunc__ is set to None . <EoL>
<BoL> Implement an in-place binary method with a ufunc , e.g. , __iadd__ . <EoL>
<BoL> Implement forward , reflected and inplace binary methods with a ufunc . <EoL>
<BoL> Implement a reflected binary method with a ufunc , e.g. , __radd__ . <EoL>
<BoL> Implement a unary special method with a ufunc . <EoL>
<BoL> Replace NaN with zero and infinity with large finite numbers . <EoL>
<BoL> Replace values in ` a ` with NaN where ` mask ` is True . This differs from copyto in that it will deal with the case where ` a ` is a numpy scalar . <EoL>
<BoL> Compute a/b ignoring invalid results . <EoL>
<BoL> Private function that does n't support extended axis or keepdims . These methods are extended to this function using _ureduce See nanmedian for parameter usage <EoL>
<BoL> Private function for rank 1 arrays . Compute the median ignoring NaNs . See nanmedian for parameter usage <EoL>
<BoL> sort + indexing median , faster for small medians along multiple dimensions due to the high overhead of apply_along_axis <EoL>
<BoL> Private function for rank 1 arrays . Compute quantile ignoring NaNs . See nanpercentile for parameter usage <EoL>
<BoL> Equivalent to arr1d [ ~arr1d.isnan ( ) ] , but in a different order <EoL>
<BoL> If ` a ` is of inexact type , make a copy of ` a ` , replace NaNs with the ` val ` value , and return the copy together with a boolean mask marking the locations where NaNs were present . If ` a ` is not of inexact type , do nothing and return ` a ` together with a mask of None . <EoL>
<BoL> Load ASCII data stored in a file and return it as a single array . <EoL>
<BoL> Enables dir ( bagobj ) to list the files in an NpzFile . <EoL>
<BoL> Close the file . <EoL>
<BoL> Find the correct dtype converter . Adapted from matplotlib <EoL>
<BoL> Load ASCII data stored in a comma-separated file . <EoL>
<BoL> Load ASCII data from a file and return it in a record array . <EoL>
<BoL> Save several arrays into a single file in uncompressed `` .npz `` format . <EoL>
<BoL> Save several arrays into a single file in compressed `` .npz `` format . <EoL>
<BoL> Create a ZipFile . <EoL>
<BoL> Find the coefficients of a polynomial with the given sequence of roots . <EoL>
<BoL> Find the sum of two polynomials . <EoL>
<BoL> Return the derivative of the specified order of a polynomial . <EoL>
<BoL> Returns the quotient and remainder of polynomial division . <EoL>
<BoL> Least squares polynomial fit . <EoL>
<BoL> Find the product of two polynomials . <EoL>
<BoL> Compute the eigenvalues of a general matrix . <EoL>
<BoL> Return the least-squares solution to a linear matrix equation . <EoL>
<BoL> Difference ( subtraction ) of two polynomials . <EoL>
<BoL> Evaluate a polynomial at specific values . <EoL>
<BoL> Return the real part of the complex argument . <EoL>
<BoL> Return the roots of a polynomial with coefficients given in p . <EoL>
<BoL> Generate a Vandermonde matrix . <EoL>
<BoL> Put values into the destination array by matching 1d index and data slices . <EoL>
<BoL> If complex input returns a real array if complex parts are close to zero . <EoL>
<BoL> Returns all the fields sharing the same fieldname base . <EoL>
<BoL> Return the internal state of the masked array . <EoL>
<BoL> Returns the length <EoL>
<BoL> Return a 3-tuple for pickling a MaskedArray . <EoL>
<BoL> Calculates the repr representation . <EoL>
<BoL> Sets the attribute attr to the value val . <EoL>
<BoL> Sets the given record to value . <EoL>
<BoL> Restore the internal state of the masked array . <EoL>
<BoL> Calculates the string representation . <EoL>
<BoL> Returns the data as a recarray . <EoL>
<BoL> Alias to mask . <EoL>
<BoL> Returns a copy of the masked record . <EoL>
<BoL> Forces the mask to hard . <EoL>
<BoL> Forces the mask to soft <EoL>
<BoL> Return the data portion of the array as a list . <EoL>
<BoL> Returns a view of the mrecarray . <EoL>
<BoL> Private function validating the given ` fill_value ` for the given dtype . <EoL>
<BoL> Update the fill_value and masked data of ` output ` from the default given in a dictionary defaults . <EoL>
<BoL> Private function : return a recarray , a ndarray , a MaskedArray or a MaskedRecords depending on the input parameters <EoL>
<BoL> Returns a flat list of ( dtype , count , offset ) tuples of all the scalar fields in the dtype `` dt '' , including nested fields , in left to right order . <EoL>
<BoL> Returns an iterator of concatenated fields from a sequence of arrays . <EoL>
<BoL> Returns an iterator of concatenated fields from a sequence of arrays , collapsing any nested structure . <EoL>
<BoL> Return a new array keeping only the fields in ` keep_names ` , and preserving the order of those fields . <EoL>
<BoL> Apply function 'func ' as a reduction across fields of a structured array . <EoL>
<BoL> Assigns values from one structured array to another by field name . <EoL>
<BoL> Find the duplicates in a structured array along a given key <EoL>
<BoL> Flatten a structured data-type description . <EoL>
<BoL> Produce a list of name/dtype pairs corresponding to the dtype fields <EoL>
<BoL> Returns a dictionary with fields indexing lists of their parent fields . <EoL>
<BoL> Returns the field names of the input datatype as a tuple . <EoL>
<BoL> Returns the field names of the input datatype as a tuple . Nested structure are flattend beforehand . <EoL>
<BoL> Returns an iterator of concatenated items from a sequence of arrays . <EoL>
<BoL> Add new fields to an existing array . <EoL>
<BoL> Returns a new numpy.recarray with fields in ` drop_names ` dropped . <EoL>
<BoL> Join arrays ` r1 ` and ` r2 ` on keys . Alternative to join_by , that always returns a np.recarray . <EoL>
<BoL> Fills fields from output with fields from input , with support for nested structures . <EoL>
<BoL> Rename the fields from a flexible-datatype ndarray or recarray . <EoL>
<BoL> Re-pack the fields of a structured array or dtype in memory . <EoL>
<BoL> Casts a structured array to a new dtype using assignment by field-name . <EoL>
<BoL> Converts and n-D structured array into an ( n+1 ) -D unstructured array . <EoL>
<BoL> Function decorator to apply certain suppressions to a whole function . <EoL>
<BoL> Add a new suppressing filter or apply it if the state is entered . <EoL>
<BoL> Append a new recording filter or apply it if the state is entered . <EoL>
<BoL> Combine the dtype description of a series of arrays . <EoL>
<BoL> Find the wrapper for the array with the highest priority . <EoL>
<BoL> Split an array into multiple sub-arrays vertically ( row-wise ) . <EoL>
<BoL> Print or write to a file the source code for a NumPy object . <EoL>
<BoL> Returns the shape of the arrays that would result from broadcasting the supplied arrays against each other . <EoL>
<BoL> An array with ones at and below the given diagonal and zeros elsewhere . <EoL>
<BoL> Lower triangle of an array . <EoL>
<BoL> Return the indices for the lower-triangle of arr . <EoL>
<BoL> Upper triangle of an array . <EoL>
<BoL> Return the indices for the upper-triangle of an ( n , m ) array . <EoL>
<BoL> Return the indices for the upper-triangle of arr . <EoL>
<BoL> get small int that fits the range <EoL>
<BoL> Return a description for the given data type code . <EoL>
<BoL> Allow the out argument to be passed as the name ` y ` ( deprecated ) <EoL>
<BoL> Decorator call . Refer to `` decorate `` . ` arrayrange ` is deprecated , use ` arange ` instead ! <EoL>
<BoL> Provide information about ndarray obj . <EoL>
<BoL> Generate docstring cache for given module . <EoL>
<BoL> Utility function to check median result from data for NaN values at the end and return NaN in that case . Input result can also be a MaskedArray . <EoL>
<BoL> Print the NumPy arrays in the given dictionary . <EoL>
<BoL> Cholesky decomposition . <EoL>
<BoL> Compute the condition number of a matrix . <EoL>
<BoL> Compute the eigenvalues and right eigenvectors of a square array . <EoL>
<BoL> Return the eigenvalues and eigenvectors of a complex Hermitian ( conjugate symmetric ) or a real symmetric matrix . <EoL>
<BoL> Compute the eigenvalues of a complex Hermitian or real symmetric matrix . <EoL>
<BoL> Cast the type t to either double or cdouble . <EoL>
<BoL> Actually do the multiplication with the given order . <EoL>
<BoL> Return a np.array that encodes the optimal order of mutiplications . <EoL>
<BoL> Find the best order for three arrays and do the multiplication . <EoL>
<BoL> Compute a function of the singular values of the 2-D matrices in ` x ` . <EoL>
<BoL> Return matrix rank of array using SVD method <EoL>
<BoL> Compute the dot product of two or more arrays in a single function call , while automatically selecting the fastest evaluation order . <EoL>
<BoL> Compute the ( Moore-Penrose ) pseudo-inverse of a matrix . <EoL>
<BoL> Compute the qr factorization of a matrix . <EoL>
<BoL> Compute the sign and ( natural ) logarithm of the determinant of an array . <EoL>
<BoL> Solve a linear matrix equation , or system of linear scalar equations . <EoL>
<BoL> Compute the 'inverse ' of an N-dimensional array . <EoL>
<BoL> Solve the tensor equation `` a x = b `` for x . <EoL>
<BoL> Transpose each matrix in a stack of matrices . <EoL>
<BoL> Returns True if two arrays are element-wise equal within a tolerance . <EoL>
<BoL> Return True if all entries of a and b are equal , using fill_value as a truth value where either or both are masked . <EoL>
<BoL> Reduce ` target ` along the given ` axis ` . <EoL>
<BoL> Append values to the end of an array . <EoL>
<BoL> ( This docstring should be overwritten ) <EoL>
<BoL> ( This docstring will be overwritten ) <EoL>
<BoL> Convert the input to a masked array , conserving subclasses . <EoL>
<BoL> Convert the input to a masked array of the given data-type . <EoL>
<BoL> Use an index array to construct a new array from a set of choices . <EoL>
<BoL> Returns a list of slices corresponding to the masked clumps of a 1-D array . ( A `` clump '' is defined as a contiguous region of the array ) . <EoL>
<BoL> Return list of slices corresponding to the unmasked clumps of a 1-D array . ( A `` clump '' is defined as a contiguous region of the array ) . <EoL>
<BoL> Return the common filling value of two masked arrays , if any . <EoL>
<BoL> Suppress whole columns of a 2-D array that contain masked values . <EoL>
<BoL> Suppress slices from multiple dimensions which contain masked values . <EoL>
<BoL> Suppress the rows and/or columns of a 2-D array that contain masked values . <EoL>
<BoL> Suppress whole rows of a 2-D array that contain masked values . <EoL>
<BoL> Return all the non-masked data as a 1-D array . <EoL>
<BoL> Concatenate a sequence of arrays along the given axis . <EoL>
<BoL> Returns the discrete , linear convolution of two one-dimensional sequences . <EoL>
<BoL> Return the next value , or raise StopIteration . <EoL>
<BoL> abfunc ( fillx , filly ) must be defined . abfunc ( x , filly ) = x for all x to enable reduce . <EoL>
<BoL> Execute the call behavior . <EoL>
<BoL> abfunc ( fillx , filly ) must be defined . <EoL>
<BoL> Accumulate ` target ` along ` axis ` after filling with y fill value . <EoL>
<BoL> Return the function applied to the outer product of a and b . <EoL>
<BoL> Create the masked_print_option object . <EoL>
<BoL> Display the string to print for masked values . <EoL>
<BoL> Set the enabling shrink to ` shrink ` . <EoL>
<BoL> Is the use of the display value enabled ? <EoL>
<BoL> Set the string to print for masked values . <EoL>
<BoL> Execute the call behavior . <EoL>
<BoL> Return a class method wrapper around a basic array method . <EoL>
<BoL> Helper function for ma.correlate and ma.convolve <EoL>
<BoL> Adjust the axis passed to argsort , warning if necessary <EoL>
<BoL> Convert the argument for *_fill_value into a dtype <EoL>
<BoL> Internal function that builds a new MaskedArray from the information stored in a pickle . <EoL>
<BoL> Recursively produce a fill value for ` dtype ` , calling f on scalar dtypes <EoL>
<BoL> Recursively fill ` a ` with ` fill_value ` . <EoL>
<BoL> Puts printoptions in result where mask is True . <EoL>
<BoL> Create a fill value for a structured dtype . <EoL>
<BoL> Construct a dtype description list from a given dtype . <EoL>
<BoL> Shrink a mask to nomask if possible <EoL>
<BoL> Cross-correlation of two 1-dimensional sequences . <EoL>
<BoL> Return the default fill value for the argument object . <EoL>
<BoL> Extract a diagonal or construct a diagonal array . <EoL>
<BoL> Adds a Notes section to an existing docstring . <EoL>
<BoL> Return the dot product of two arrays . <EoL>
<BoL> Pickle a masked array to a file . <EoL>
<BoL> Return a string corresponding to the pickling of a masked array . <EoL>
<BoL> Returns a completely flattened version of the mask , where nested fields are collapsed . <EoL>
<BoL> Flatten a structured array.Flattens a compound of nested iterables . <EoL>
<BoL> Build a masked array from a suitable flexible-type array . <EoL>
<BoL> Return the filling value of a , if any . Otherwise , returns the default filling value for that type . <EoL>
<BoL> Return the mask of a masked array , or nomask . <EoL>
<BoL> Return the youngest subclass of MaskedArray from a list of ( masked ) arrays . <EoL>
<BoL> Get the signature from obj <EoL>
<BoL> Returns the inner product of a and b for arrays of floating point types . <EoL>
<BoL> Test whether input is an instance of MaskedArray . <EoL>
<BoL> Return True if m is a valid , standard mask . <EoL>
<BoL> Determine whether input has masked values . <EoL>
<BoL> Shift the bits of an integer to the left . <EoL>
<BoL> Wrapper around `` cPickle.load `` which accepts either a file-like object or a filename . <EoL>
<BoL> Load a pickle from the current string . <EoL>
<BoL> Create a boolean mask from an array . <EoL>
<BoL> Construct a dtype description list from a given dtype . <EoL>
<BoL> Return a boolean mask of the given shape , filled with False . <EoL>
<BoL> Combine two masks with the `` logical_or `` operator . <EoL>
<BoL> Mask rows and/or columns of a 2D array that contain masked values . <EoL>
<BoL> Mask the array ` x ` where the data are exactly equal to value . <EoL>
<BoL> Return the minimum value that can be represented by the dtype of an object . <EoL>
<BoL> Return the maximum value that can be represented by the dtype of an object . <EoL>
<BoL> Get the index . <EoL>
<BoL> Return a copy with masked fields filled with a given value . <EoL>
<BoL> Transforms the mvoid object into a tuple . <EoL>
<BoL> maskedarray version of the numpy function . <EoL>
<BoL> Returns element-wise base array raised to power from second array . <EoL>
<BoL> Set storage-indexed locations to corresponding values . <EoL>
<BoL> Changes elements of an array based on conditional and input values . <EoL>
<BoL> maskedarray version of the numpy function . <EoL>
<BoL> Returns an array containing the same data with a new shape . <EoL>
<BoL> Return a new masked array with the specified size and shape . <EoL>
<BoL> Shift the bits of an integer to the right . <EoL>
<BoL> Return a copy of a , rounded to 'decimals ' places . <EoL>
<BoL> Permute the dimensions of an array . <EoL>
<BoL> Return a masked array with elements from ` x ` or ` y ` , depending on condition . <EoL>
<BoL> Count the number of masked elements along the given axis . <EoL>
<BoL> Estimate the covariance matrix . <EoL>
<BoL> Compute the differences between consecutive elements of an array . <EoL>
<BoL> Private function for the computation of covariance and correlation coefficients . <EoL>
<BoL> Finds the clumps ( groups of data with the same values ) for a 1D bool array . <EoL>
<BoL> Retrieve the docstring and signature from the function . <EoL>
<BoL> Find contiguous unmasked data in a masked array along the given axis . <EoL>
<BoL> Find the indices of the first and last unmasked values . <EoL>
<BoL> Flatten a sequence in place . <EoL>
<BoL> Test whether each element of an array is also present in a second array . <EoL>
<BoL> Returns the unique elements common to both arrays . <EoL>
<BoL> Calculates ` element in test_elements ` , broadcasting over ` element ` only . <EoL>
<BoL> Is seq a sequence ( ndarray , list or tuple ) ? <EoL>
<BoL> Mask columns of a 2D array that contain masked values . <EoL>
<BoL> Mask rows of a 2D array that contain masked values . <EoL>
<BoL> Empty masked array with all elements masked . <EoL>
<BoL> Empty masked array with the properties of an existing array . <EoL>
<BoL> Compute the median along the specified axis . <EoL>
<BoL> Find contiguous unmasked data in a masked array along the given axis . <EoL>
<BoL> Find the indices of the first and last unmasked values along an axis . <EoL>
<BoL> Any masked values in x is propagated in y , and vice-versa . <EoL>
<BoL> Set difference of 1D arrays with unique elements . <EoL>
<BoL> Set exclusive-or of 1-D arrays with unique elements . <EoL>
<BoL> Union of two arrays . <EoL>
<BoL> Finds the unique elements of an array . <EoL>
<BoL> Masked values in the input array result in rows of zeros . <EoL>
<BoL> Checks that field names `` descr `` are not reserved keywords . <EoL>
<BoL> Tries to guess the dtypes of the str_ ndarray ` arr ` . <EoL>
<BoL> Build a new MaskedArray from the information stored in a pickle . <EoL>
<BoL> Adds a new field to the masked record array <EoL>
<BoL> Opens the file handle of file ` fname ` . <EoL>
<BoL> Add one Chebyshev series to another . <EoL>
<BoL> Differentiate a Chebyshev series . <EoL>
<BoL> Divide one Chebyshev series by another . <EoL>
<BoL> Least squares fit of Chebyshev series to data . <EoL>
<BoL> Generate a Chebyshev series with given roots . <EoL>
<BoL> Interpret other as polynomial coefficients . <EoL>
<BoL> Integrate a Chebyshev series . <EoL>
<BoL> Chebyshev series whose graph is a straight line . <EoL>
<BoL> Multiply one Chebyshev series by another . <EoL>
<BoL> Raise a Chebyshev series to a power . <EoL>
<BoL> Compute the roots of a Chebyshev series . <EoL>
<BoL> Subtract one Chebyshev series from another . <EoL>
<BoL> Evaluate a Chebyshev series at points x . <EoL>
<BoL> Series basis polynomial of degree ` deg ` . <EoL>
<BoL> Convert series to series of this class . <EoL>
<BoL> Convert series to a different kind and/or domain and/or window . <EoL>
<BoL> Return a copy . <EoL>
<BoL> Truncate series to the given degree . <EoL>
<BoL> The degree of the series . <EoL>
<BoL> Differentiate . <EoL>
<BoL> Return series instance that has the specified roots . <EoL>
<BoL> Check if coefficients match . <EoL>
<BoL> Check if domains match . <EoL>
<BoL> Check if types match . <EoL>
<BoL> Check if windows match . <EoL>
<BoL> Identity function . <EoL>
<BoL> Integrate . <EoL>
<BoL> Interpolate a function at the Chebyshev points of the first kind . <EoL>
<BoL> Return x , y values at equally spaced points in domain . <EoL>
<BoL> Return the mapping parameters . <EoL>
<BoL> Return the roots of the series polynomial . <EoL>
<BoL> Remove trailing coefficients <EoL>
<BoL> Truncate series to length ` size ` . <EoL>
<BoL> Add one Hermite series to another . <EoL>
<BoL> Differentiate a Hermite series . <EoL>
<BoL> Divide one Hermite series by another . <EoL>
<BoL> Least squares fit of Hermite series to data . <EoL>
<BoL> Generate a Hermite series with given roots . <EoL>
<BoL> Integrate a Hermite series . <EoL>
<BoL> Hermite series whose graph is a straight line . <EoL>
<BoL> Multiply one Hermite series by another . <EoL>
<BoL> Raise a Hermite series to a power . <EoL>
<BoL> Compute the roots of a Hermite series . <EoL>
<BoL> Subtract one Hermite series from another . <EoL>
<BoL> Evaluate an Hermite series at points x . <EoL>
<BoL> Add one Hermite series to another . <EoL>
<BoL> Differentiate a Hermite_e series . <EoL>
<BoL> Divide one Hermite series by another . <EoL>
<BoL> Least squares fit of Hermite series to data . <EoL>
<BoL> Generate a HermiteE series with given roots . <EoL>
<BoL> Integrate a Hermite_e series . <EoL>
<BoL> Hermite series whose graph is a straight line . <EoL>
<BoL> Multiply one Hermite series by another . <EoL>
<BoL> Raise a Hermite series to a power . <EoL>
<BoL> Compute the roots of a HermiteE series . <EoL>
<BoL> Subtract one Hermite series from another . <EoL>
<BoL> Evaluate an HermiteE series at points x . <EoL>
<BoL> Add one Laguerre series to another . <EoL>
<BoL> Differentiate a Laguerre series . <EoL>
<BoL> Divide one Laguerre series by another . <EoL>
<BoL> Least squares fit of Laguerre series to data . <EoL>
<BoL> Generate a Laguerre series with given roots . <EoL>
<BoL> Integrate a Laguerre series . <EoL>
<BoL> Laguerre series whose graph is a straight line . <EoL>
<BoL> Multiply one Laguerre series by another . <EoL>
<BoL> Raise a Laguerre series to a power . <EoL>
<BoL> Compute the roots of a Laguerre series . <EoL>
<BoL> Subtract one Laguerre series from another . <EoL>
<BoL> Evaluate a Laguerre series at points x . <EoL>
<BoL> Add one Legendre series to another . <EoL>
<BoL> Differentiate a Legendre series . <EoL>
<BoL> Divide one Legendre series by another . <EoL>
<BoL> Least squares fit of Legendre series to data . <EoL>
<BoL> Generate a Legendre series with given roots . <EoL>
<BoL> Integrate a Legendre series . <EoL>
<BoL> Legendre series whose graph is a straight line . <EoL>
<BoL> Multiply one Legendre series by another . <EoL>
<BoL> Raise a Legendre series to a power . <EoL>
<BoL> Compute the roots of a Legendre series . <EoL>
<BoL> Subtract one Legendre series from another . <EoL>
<BoL> Evaluate a Legendre series at points x . <EoL>
<BoL> Add one polynomial to another . <EoL>
<BoL> Differentiate a polynomial . <EoL>
<BoL> Divide one polynomial by another . <EoL>
<BoL> Least-squares fit of a polynomial to data . <EoL>
<BoL> Generate a monic polynomial with given roots . <EoL>
<BoL> Integrate a polynomial . <EoL>
<BoL> Returns an array representing a linear polynomial . <EoL>
<BoL> Multiply one polynomial by another . <EoL>
<BoL> Raise a polynomial to a power . <EoL>
<BoL> Compute the roots of a polynomial . <EoL>
<BoL> Subtract one polynomial from another . <EoL>
<BoL> Evaluate a polynomial at points x . <EoL>
<BoL> Covert Chebyshev series to z-series . <EoL>
<BoL> Differentiate a z-series . <EoL>
<BoL> Divide the first z-series by the second . <EoL>
<BoL> Integrate a z-series . <EoL>
<BoL> Multiply two z-series . <EoL>
<BoL> Covert z-series to a Chebyshev series . <EoL>
<BoL> Convert a Chebyshev series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-Chebyshev quadrature . <EoL>
<BoL> Evaluate a 2-D Chebyshev series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Chebyshev series on the Cartesian product of x , y , and z . <EoL>
<BoL> Interpolate a function at the Chebyshev points of the first kind . <EoL>
<BoL> Multiply a Chebyshev series by x . <EoL>
<BoL> Chebyshev points of the first kind . <EoL>
<BoL> Chebyshev points of the second kind . <EoL>
<BoL> Remove `` small '' `` trailing '' coefficients from a polynomial . <EoL>
<BoL> Evaluate a 2-D Chebyshev series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Chebyshev series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> The weight function of the Chebyshev polynomials . <EoL>
<BoL> Convert a polynomial to a Chebyshev series . <EoL>
<BoL> Evaluate a normalized Hermite polynomial . <EoL>
<BoL> Convert a Hermite series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-Hermite quadrature . <EoL>
<BoL> Evaluate a 2-D Hermite series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Hermite series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Hermite series by x . <EoL>
<BoL> Evaluate a 2-D Hermite series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Hermite series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Hermite polynomials . <EoL>
<BoL> poly2herm ( pol ) <EoL>
<BoL> Evaluate a normalized HermiteE polynomial . <EoL>
<BoL> Convert a Hermite series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-HermiteE quadrature . <EoL>
<BoL> Evaluate a 2-D HermiteE series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D HermiteE series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Hermite series by x . <EoL>
<BoL> Evaluate a 2-D HermiteE series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Hermite_e series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Hermite_e polynomials . <EoL>
<BoL> poly2herme ( pol ) <EoL>
<BoL> Convert a Laguerre series to a polynomial . <EoL>
<BoL> Return the companion matrix of c . <EoL>
<BoL> Gauss-Laguerre quadrature . <EoL>
<BoL> Evaluate a 2-D Laguerre series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Laguerre series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Laguerre series by x . <EoL>
<BoL> Evaluate a 2-D Laguerre series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Laguerre series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Laguerre polynomials . <EoL>
<BoL> poly2lag ( pol ) <EoL>
<BoL> Convert a Legendre series to a polynomial . <EoL>
<BoL> Return the scaled companion matrix of c . <EoL>
<BoL> Gauss-Legendre quadrature . <EoL>
<BoL> Evaluate a 2-D Legendre series on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D Legendre series on the Cartesian product of x , y , and z . <EoL>
<BoL> Multiply a Legendre series by x . <EoL>
<BoL> Evaluate a 2-D Legendre series at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D Legendre series at points ( x , y , z ) . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Weight function of the Legendre polynomials . <EoL>
<BoL> Convert a polynomial to a Legendre series . <EoL>
<BoL> Return the companion matrix of c . <EoL>
<BoL> Evaluate a 2-D polynomial on the Cartesian product of x and y . <EoL>
<BoL> Evaluate a 3-D polynomial on the Cartesian product of x , y and z . <EoL>
<BoL> Multiply a polynomial by x . <EoL>
<BoL> Evaluate a 2-D polynomial at points ( x , y ) . <EoL>
<BoL> Evaluate a 3-D polynomial at points ( x , y , z ) . <EoL>
<BoL> Evaluate a polynomial specified by its roots at points x . <EoL>
<BoL> Vandermonde matrix of given degree . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Pseudo-Vandermonde matrix of given degrees . <EoL>
<BoL> Return argument as a list of 1-d arrays . <EoL>
<BoL> Return a domain suitable for given abscissae . <EoL>
<BoL> Apply linear map to input points . <EoL>
<BoL> Linear map parameters between domains . <EoL>
<BoL> Remove small Poly series coefficients . <EoL>
<BoL> Return a RandomState instance . <EoL>
<BoL> Check that ufuncs do n't mishandle refcount of object ` 1 ` . Used in a few regression tests . <EoL>
<BoL> generator producing data with different alignment and offsets to test simd vectorization <EoL>
<BoL> Skip message with information about function being skipped.Skipper for normal test functions.Skipper for test generators . <EoL>
<BoL> Fail unless the given callable throws the specified warning . <EoL>
<BoL> Filter deprecation warnings while running the test suite . <EoL>
<BoL> Make function raise KnownFailureException exception if given condition is true . <EoL>
<BoL> Pytest compatibility class . This implements the simplest level of pytest.mark.parametrize for use in nose as an aid in making the transition to pytest . <EoL>
<BoL> Signals to nose that this function is or is not a test . <EoL>
<BoL> Make function raise SkipTest exception if a given condition is true.Skip message with information about function being skipped.Skipper for normal test functions.Skipper for test generators . <EoL>
<BoL> Label a test as 'slow ' . <EoL>
<BoL> Given a path where a package is installed , determine its name . <EoL>
<BoL> Import nose only when needed . <EoL>
<BoL> Run a test module . <EoL>
<BoL> Assert that works in release mode . Accepts callable msg to allow deferring evaluation until failure . <EoL>
<BoL> Compare two arrays relatively to their spacing . <EoL>
<BoL> Handling nan/inf . <EoL>
<BoL> Check that all items of arrays differ in at most N Units in the Last Place . <EoL>
<BoL> Fail if the given callable produces any reference cycles . <EoL>
<BoL> Fail if the given callable produces any warnings . <EoL>
<BoL> assert_raises ( exception_class , callable , *args , **kwargs ) assert_raises ( exception_class ) <EoL>
<BoL> assert_raises_regex ( exception_class , expected_regexp , callable , *args , **kwargs ) assert_raises_regex ( exception_class , expected_regexp ) <EoL>
<BoL> Test if two strings are equal . <EoL>
<BoL> Apply a decorator to all methods in a class matching a regular expression . <EoL>
<BoL> like isfinite , but always raise an error if type not supported instead of returning a TypeError object . <EoL>
<BoL> like isinf , but always raise an error if type not supported instead of returning a TypeError object . <EoL>
<BoL> like isnan , but always raise an error if type not supported instead of returning a TypeError object . <EoL>
<BoL> Return the signed-magnitude interpretation of the binary representation of x . <EoL>
<BoL> Return number of jiffies elapsed . <EoL>
<BoL> Return elapsed time for executing code in the namespace of the caller . <EoL>
<BoL> Return memory usage of running python . [ Not implemented ] <EoL>
<BoL> User-callable function to create and return a unique temporary file . The return value is a pair ( fd , name ) where fd is the file descriptor returned by os.open , and name is the filename . <EoL>
<BoL> For each item in x and y , return the number of representable floating points between them . <EoL>
<BoL> Test if two objects are equal , and print an error message if test fails . <EoL>
<BoL> Decorator to check for raised exceptions . <EoL>
<BoL> Run doctests found in the given file . <EoL>
<BoL> Context manager to provide a temporary test folder . <EoL>
<BoL> Context manager for temporary files . <EoL>
<BoL> Create a low-level callback function from an exported Cython function . <EoL>
<BoL> Compare alpha/beta/rc/final . <EoL>
<BoL> Compare major.minor.bugfix <EoL>
<BoL> Get information about memory available , not counting swap . <EoL>
<BoL> Check *free_mb* of memory is available , otherwise do pytest.skip <EoL>
<BoL> Decorate a function with a threading lock and prevent reentrant calls . <EoL>
<BoL> Allocate a new ndarray with aligned memory . <EoL>
<BoL> Mimic ` np.select ( condlist , choicelist ) ` . <EoL>
<BoL> np.where ( cond , x , fillvalue ) always evaluates x even where cond is False . This one only evaluates f ( arr1 [ cond ] , arr2 [ cond ] , ... ) . For example , <EoL>
<BoL> Return an array equivalent to the input array . <EoL>
<BoL> Return an array of all value . <EoL>
<BoL> Turn seed into a np.random.RandomState instance <EoL>
<BoL> inspect.getargspec replacement using inspect.signature . <EoL>
<BoL> Context manager decorato <EoL>
<BoL> Append `` a `` to the list of the virtual ancestors , unless it is already included . <EoL>
<BoL> Context manager decorato <EoL>
<BoL> decorate ( func , caller ) decorates a function using a caller . <EoL>
<BoL> decorator ( caller ) converts a caller function into a decorato <EoL>
<BoL> Factory of decorators turning a function into a generic function dispatching on the given arguments.Make sure one passes the expected number of argumentsDecorator turning a function into a generic functionGet a list of sets of virtual ancestors for the given typesGet a list of virtual MROs , one for each typeDecorator to register an implementation for the given typesAn utility to introspect the dispatch algorithm <EoL>
<BoL> A replacement for inspect.getargspec <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Return an iterator over the ( key , value ) pairs of a dictionary . <EoL>
<BoL> Return an iterator over the keys of a dictionary . <EoL>
<BoL> Return an iterator over the values of a dictionary . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Return True if input array is a valid distance matrix . <EoL>
<BoL> Return True if the input array is a valid condensed distance matrix . <EoL>
<BoL> Convert a vector-form distance vector to a square-form distance matrix , and vice-versa . <EoL>
<BoL> The number of leaf nodes ( original observations ) belonging to the cluster node nd . If the target node is a leaf , 1 is returned . <EoL>
<BoL> The identifier of the target node . <EoL>
<BoL> Return a reference to the left child tree object . <EoL>
<BoL> Return a reference to the right child tree object . <EoL>
<BoL> Return True if the target node is a leaf . <EoL>
<BoL> Perform pre-order traversal without recursive function calls . <EoL>
<BoL> Copy the array if its base points to a parent array . <EoL>
<BoL> Accept a tuple of arrays T. Copies the array T [ i ] if its base array points to an actual array . <EoL>
<BoL> Return clustering nodes in bottom-up order by distance . <EoL>
<BoL> Generate a random distance matrix stored in condensed form . <EoL>
<BoL> Remove duplicates AND preserve the original order of the elements . <EoL>
<BoL> Perform average/UPGMA linkage on a condensed distance matrix . <EoL>
<BoL> Perform centroid/UPGMC linkage . <EoL>
<BoL> Perform complete/max/farthest point linkage on a condensed distance matrix . <EoL>
<BoL> Calculate the cophenetic distances between each observation in the hierarchical clustering defined by the linkage `` Z `` . <EoL>
<BoL> Check for correspondence between linkage and condensed distance matrices . <EoL>
<BoL> Given a linkage matrix Z , return the cut tree . <EoL>
<BoL> Form flat clusters from the hierarchical clustering defined by the given linkage matrix . <EoL>
<BoL> Convert a linkage matrix generated by MATLAB ( TM ) to a new linkage matrix compatible with this module . <EoL>
<BoL> Calculate inconsistency statistics on a linkage matrix . <EoL>
<BoL> Determine if two different cluster assignments are equivalent . <EoL>
<BoL> Return True if the linkage passed is monotonic . <EoL>
<BoL> Return True if the inconsistency matrix passed is valid . <EoL>
<BoL> Check the validity of a linkage matrix . <EoL>
<BoL> Return the root nodes in a hierarchical clustering . <EoL>
<BoL> Return a list of leaf node ids . <EoL>
<BoL> Perform hierarchical/agglomerative clustering . <EoL>
<BoL> Return the maximum statistic for each non-singleton cluster and its children . <EoL>
<BoL> Return the maximum distance between any non-singleton cluster . <EoL>
<BoL> Return the maximum inconsistency coefficient for each non-singleton cluster and its children . <EoL>
<BoL> Perform median/WPGMC linkage . <EoL>
<BoL> Return the number of original observations of the linkage matrix passed . <EoL>
<BoL> Given a linkage matrix Z and distance , reorder the cut tree . <EoL>
<BoL> Set list of matplotlib color codes for use by dendrogram . <EoL>
<BoL> Perform single/min/nearest linkage on the condensed distance matrix `` y `` . <EoL>
<BoL> Convert a linkage matrix to a MATLAB ( TM ) compatible one . <EoL>
<BoL> Convert a linkage matrix into an easy-to-use tree object . <EoL>
<BoL> Perform Ward 's linkage on a condensed distance matrix . <EoL>
<BoL> Perform weighted/WPGMA linkage on the condensed distance matrix . <EoL>
<BoL> `` raw '' version of k-means . <EoL>
<BoL> Pick k points at random in data ( one row = one observation ) . <EoL>
<BoL> Picks k points in data based on the kmeans++ method <EoL>
<BoL> Returns k samples of a random variable which parameters depend on data . <EoL>
<BoL> aise a ClusterError when called . <EoL>
<BoL> Print a warning when called . <EoL>
<BoL> Compute distance between each pair of the two collections of inputs . <EoL>
<BoL> Performs k-means on a set of observation vectors forming k clusters . <EoL>
<BoL> Python version of vq algorithm . <EoL>
<BoL> Assign codes from a code book to observations . <EoL>
<BoL> Normalize a group of observations on a per feature basis . <EoL>
<BoL> Return list of physical_constant keys containing a given string . <EoL>
<BoL> Relative precision in physical_constants indexed by key <EoL>
<BoL> Unit in physical_constants indexed by key <EoL>
<BoL> Value in physical_constants indexed by key <EoL>
<BoL> Convert from a temperature scale to another one among Celsius , Kelvin , Fahrenheit and Rankine scales . <EoL>
<BoL> Convert wavelength to optical frequency <EoL>
<BoL> Convert optical frequency to wavelength . <EoL>
<BoL> Like numpy asfarray , except that it does not modify x dtype if x is already an array with a float dtype , and do not cast complex types to real . <EoL>
<BoL> Strict check for ` arr ` not sharing any data with ` original ` , under the assumption that arr = asarray ( original ) <EoL>
<BoL> Internal auxiliary function for _raw_fft , _raw_fftnd . <EoL>
<BoL> Handle and sort shape and axes arguments for n-dimensional transforms . <EoL>
<BoL> Is the size of FFT such that FFTPACK can handle it in single precision with sufficient accuracy ? <EoL>
<BoL> Internal auxiliary function for fft , ifft , rfft , irfft . <EoL>
<BoL> Internal auxiliary function for fftnd , ifftnd . <EoL>
<BoL> Return inverse discrete Fourier transform of real sequence x . <EoL>
<BoL> Discrete Fourier transform of a real sequence . <EoL>
<BoL> Return ( a , b ) -cosh/cosh pseudo-derivative of a periodic sequence . <EoL>
<BoL> Return ( a , b ) -cosh/sinh pseudo-derivative of a periodic sequence . <EoL>
<BoL> Return the Discrete Cosine Transform of arbitrary type sequence x . <EoL>
<BoL> Return multidimensional Discrete Cosine Transform along the specified axes . <EoL>
<BoL> Return k-th derivative ( or integral ) of a periodic sequence x . <EoL>
<BoL> Return the Discrete Sine Transform of arbitrary type sequence x . <EoL>
<BoL> Return multidimensional Discrete Sine Transform along the specified axes . <EoL>
<BoL> Handle shape and axes arguments for n-dimensional transforms . <EoL>
<BoL> Find the next fast size of input data to ` fft ` , for zero-padding , etc . <EoL>
<BoL> DFT sample frequencies ( for usage with rfft , irfft ) . <EoL>
<BoL> Return Hilbert transform of a periodic sequence x . <EoL>
<BoL> Return the Inverse Discrete Cosine Transform of an arbitrary type sequence . <EoL>
<BoL> Return multidimensional Discrete Cosine Transform along the specified axes . <EoL>
<BoL> Return the Inverse Discrete Sine Transform of an arbitrary type sequence . <EoL>
<BoL> Return multidimensional Discrete Sine Transform along the specified axes . <EoL>
<BoL> Return inverse Hilbert transform of a periodic sequence x . <EoL>
<BoL> Return inverse h-Tilbert transform of a periodic sequence x . <EoL>
<BoL> Return ( a , b ) -sinh/cosh pseudo-derivative of a periodic sequence x . <EoL>
<BoL> Shift periodic sequence x by a : y ( u ) = x ( u+a ) . <EoL>
<BoL> Return ( a , b ) -sinh/sinh pseudo-derivative of a periodic sequence x . <EoL>
<BoL> Return h-Tilbert transform of a periodic sequence x . <EoL>
<BoL> Return Discrete Cosine Transform of arbitrary type sequence x . <EoL>
<BoL> Return Discrete Sine Transform of arbitrary type sequence x . <EoL>
<BoL> Compute a local interpolant over the last successful step . <EoL>
<BoL> Perform one integration step . <EoL>
<BoL> Evaluate the interpolant . <EoL>
<BoL> Evaluate the solution . <EoL>
<BoL> Evaluate collocation residuals . <EoL>
<BoL> Compute indices for the collocation system Jacobian construction . <EoL>
<BoL> Create a cubic spline given values and derivatives . <EoL>
<BoL> Estimate derivatives of boundary conditions with forward differences . <EoL>
<BoL> Estimate derivatives of an ODE system rhs with forward differences . <EoL>
<BoL> Estimate rms values of collocation residuals using Lobatto quadrature . <EoL>
<BoL> Insert nodes into a mesh . <EoL>
<BoL> Create the function and the Jacobian for the collocation system . <EoL>
<BoL> Solve the nonlinear collocation system by a Newton method . <EoL>
<BoL> Stacked matrix multiply : out [ i , : , : ] = np.dot ( a [ i , : , : ] , b [ i , : , : ] ) . <EoL>
<BoL> Wrap functions for unified usage in the solver . <EoL>
<BoL> Helper function for checking arguments common to all solvers . <EoL>
<BoL> Change differences array in-place when step size is changed . <EoL>
<BoL> Compute the matrix for changing the differences array . <EoL>
<BoL> Sparse matrix with ones on diagonal <EoL>
<BoL> Group columns of a 2-d matrix for sparse finite differencing [ 1 ] _ . <EoL>
<BoL> Compute pivoted LU decomposition of a matrix . <EoL>
<BoL> Solve an equation system , a x = b , given the LU factorization of a <EoL>
<BoL> Compute RMS norm . <EoL>
<BoL> Finite differences Jacobian approximation tailored for ODE solvers . <EoL>
<BoL> Empirically select a good initial step . <EoL>
<BoL> Solve the algebraic system resulting from BDF method . <EoL>
<BoL> Assert that first_step is valid and return it . <EoL>
<BoL> Assert that max_Step is valid and return it . <EoL>
<BoL> Validate tolerance values . <EoL>
<BoL> Display a warning for extraneous keyword arguments . <EoL>
<BoL> Return the indices and values of the nonzero elements of a matrix <EoL>
<BoL> Find which event occurred during an integration step . <EoL>
<BoL> Helper function to handle events . <EoL>
<BoL> Standardize event functions and extract is_terminal and direction . <EoL>
<BoL> Solve an equation corresponding to an ODE event . <EoL>
<BoL> Extracts the return code for the integration to enable better control if the integration fails . <EoL>
<BoL> Find y=y ( t ) , set y as an initial condition , and return y . <EoL>
<BoL> Set extra parameters for user-supplied function f . <EoL>
<BoL> Set initial conditions y ( t ) = y . <EoL>
<BoL> Set integrator by name . <EoL>
<BoL> Set extra parameters for user-supplied function jac . <EoL>
<BoL> Set callable to be called at every successful integration step . <EoL>
<BoL> Check if integration was successful . <EoL>
<BoL> Predict by which factor to increase/decrease the step size . <EoL>
<BoL> Perform a single Runge-Kutta step . <EoL>
<BoL> Prepare integrator for call : allocate memory , set flags , etc . <EoL>
<BoL> Integrate from t=t0 to t=t1 using y0 as an initial condition . Return 2-tuple ( y1 , t1 ) where y1 is the result and t=t1 defines the stoppage coordinate of the result . <EoL>
<BoL> Integrate from t=t0 to t > =t1 and return ( y1 , t ) . <EoL>
<BoL> Make one integration step and return ( y1 , t1 ) . <EoL>
<BoL> Convert a real matrix of the form ( for example ) <EoL>
<BoL> Wrap a banded Jacobian function with a function that pads the Jacobian with ` ml ` rows of zeros . <EoL>
<BoL> Find y=y ( t ) , set y as an initial condition , and return y . <EoL>
<BoL> Set initial conditions y ( t ) = y . <EoL>
<BoL> Set integrator by name . <EoL>
<BoL> Set callable to be called at every successful integration step . <EoL>
<BoL> Determine the ` MF ` parameter ( Method Flag ) for the Fortran subroutine ` dvode ` . <EoL>
<BoL> Cumulatively integrate y ( x ) using the composite trapezoidal rule . <EoL>
<BoL> Compute a double integral . <EoL>
<BoL> Compute a definite integral using fixed-order Gaussian quadrature . <EoL>
<BoL> Return weights and error coefficient for Newton-Cotes integration . <EoL>
<BoL> Integration over multiple variables . <EoL>
<BoL> Print extra information about integrate.quad ( ) parameters and returns . <EoL>
<BoL> Return stored dict . <EoL>
<BoL> Return stored value . <EoL>
<BoL> Romberg integration using samples of a function . <EoL>
<BoL> Integrate y ( x ) using samples along the given axis and the composite Simpson 's rule . If x is None , spacing of dx is assumed . <EoL>
<BoL> Evaluate the piecewise polynomial or its derivative . <EoL>
<BoL> c and x may be modified by the user . The Cython code expects that they are C contiguous . <EoL>
<BoL> Construct a new piecewise polynomial representing the antiderivative . <EoL>
<BoL> Construct the piecewise polynomial without making checks . <EoL>
<BoL> Construct a new piecewise polynomial representing the derivative . <EoL>
<BoL> Compute a definite integral over a piecewise polynomial . <EoL>
<BoL> Find real roots of the the piecewise polynomial . <EoL>
<BoL> Find real solutions of the the equation `` pp ( x ) == y `` . <EoL>
<BoL> Compute the coefficients of a polynomial in the Bernstein basis given the values and derivatives at the edges . <EoL>
<BoL> Raise a degree of a polynomial in the Bernstein basis . <EoL>
<BoL> Construct a new piecewise polynomial representing the antiderivative . <EoL>
<BoL> Construct a new piecewise polynomial representing the derivative . <EoL>
<BoL> Construct a piecewise polynomial in the Bernstein basis , compatible with the specified values and derivatives at breakpoints . <EoL>
<BoL> Construct a piecewise polynomial in Bernstein basis from a power basis polynomial . <EoL>
<BoL> Compute a definite integral over a piecewise polynomial . <EoL>
<BoL> Evaluate a spline function . <EoL>
<BoL> c and t may be modified by the user . The Cython code expects that they are C contiguous . <EoL>
<BoL> Return a b-spline representing the antiderivative . <EoL>
<BoL> Return a B-spline basis element `` B ( x | t [ 0 ] , ... , t [ k+1 ] ) `` . <EoL>
<BoL> Construct a spline without making checks . <EoL>
<BoL> Return a b-spline representing the derivative . <EoL>
<BoL> Compute a definite integral of the spline . <EoL>
<BoL> Evaluate the interpolating polynomial at the points x <EoL>
<BoL> Add more x values to the set to be interpolated <EoL>
<BoL> Update the y values to be interpolated <EoL>
<BoL> Evaluate the spline or its derivatives at given positions . <EoL>
<BoL> Construct a spline object from given tck and degree <EoL>
<BoL> Evaluate the spline at points <EoL>
<BoL> Return spline coefficients . <EoL>
<BoL> Return a tuple ( tx , ty ) where tx , ty contain knots positions of the spline with respect to x- , y-variable , respectively . The position of interior and additional knots are given as t [ k+1 : -k-1 ] and t [ : k+1 ] =b , t [ -k-1 : ] =e , respectively . <EoL>
<BoL> Return weighted sum of squared residuals of the spline approximation : sum ( ( w [ i ] * ( z [ i ] -s ( x [ i ] , y [ i ] ) ) ) **2 , axis=0 ) <EoL>
<BoL> Evaluate the integral of the spline over area [ xa , xb ] x [ ya , yb ] . <EoL>
<BoL> Validate and prepare boundary conditions . <EoL>
<BoL> Add additional breakpoints and coefficients to the polynomial . <EoL>
<BoL> Construct a piecewise polynomial in the power basis from a polynomial in Bernstein basis . <EoL>
<BoL> Construct a piecewise polynomial from a spline <EoL>
<BoL> Evaluate spline ( or its nu-th derivative ) at positions x . <EoL>
<BoL> Construct a spline object from given tck <EoL>
<BoL> Construct a new spline representing the antiderivative of this spline . <EoL>
<BoL> Construct a new spline representing the derivative of this spline . <EoL>
<BoL> Return all derivatives of the spline at the point x . <EoL>
<BoL> Return spline coefficients . <EoL>
<BoL> Return positions of interior knots of the spline . <EoL>
<BoL> Return weighted sum of squared residuals of the spline approximation . <EoL>
<BoL> Return definite integral of the spline between two given points . <EoL>
<BoL> Return the zeros of the spline . <EoL>
<BoL> Continue spline computation with the given smoothing factor s and with the knots found at the last call . <EoL>
<BoL> Evaluate one derivative of the polynomial at the point x <EoL>
<BoL> Evaluate many derivatives of the polynomial at the point x <EoL>
<BoL> Evaluate the spline or its derivatives at given positions . <EoL>
<BoL> Evaluate the spline at points <EoL>
<BoL> Evaluate the piecewise polynomial or its derivative <EoL>
<BoL> Compute 1D antiderivative along a selected dimension May result to non-contiguous c array . <EoL>
<BoL> Compute 1D derivative along a selected dimension in-place May result to non-contiguous c array . <EoL>
<BoL> Construct a new piecewise polynomial representing the antiderivative . <EoL>
<BoL> Construct the piecewise polynomial without making checks . <EoL>
<BoL> Construct a new piecewise polynomial representing the derivative . <EoL>
<BoL> Compute a definite integral over a piecewise polynomial . <EoL>
<BoL> Compute NdPPoly representation for one dimensional definite integral <EoL>
<BoL> Evaluate interpolator at given points . <EoL>
<BoL> Return the roots of the interpolated function . <EoL>
<BoL> Interpolation at coordinates <EoL>
<BoL> Convert the input into a C contiguous float array . <EoL>
<BoL> Construct a knot vector appropriate for the order-k interpolation . <EoL>
<BoL> Return np.complex128 for complex dtypes , np.float64 otherwise . <EoL>
<BoL> Given data x , construct the knot vector w/ not-a-knot BC . cf de Boor , XIII ( 12 ) . <EoL>
<BoL> Solve the linear equations `` A x = b `` , given the Cholesky factorization of the banded hermitian `` A `` . <EoL>
<BoL> Cholesky decompose a banded Hermitian positive-definite matrix <EoL>
<BoL> Compute the ( coefficients of ) an LSQ B-spline . <EoL>
<BoL> Product of a list of numbers ; ~40x faster vs np.prod for Python tuples <EoL>
<BoL> Check whether x is if a scalar type , or 0-dim <EoL>
<BoL> Convenience function for pchip interpolation . <EoL>
<BoL> Cast the value to an intc and raise an OverflowError if the value can not fit . <EoL>
<BoL> Evaluate a bivariate B-spline and its derivatives . <EoL>
<BoL> Evaluate the integral of a spline over area [ xa , xb ] x [ ya , yb ] . <EoL>
<BoL> Insert knots into a B-spline . <EoL>
<BoL> Evaluate all derivatives of a B-spline . <EoL>
<BoL> Compute the spline for the antiderivative ( integral ) of a given spline . <EoL>
<BoL> Compute the spline representation of the derivative of a given spline <EoL>
<BoL> Evaluate a B-spline or its derivatives . <EoL>
<BoL> Evaluate the definite integral of a B-spline . <EoL>
<BoL> Find the roots of a cubic B-spline . <EoL>
<BoL> Return Pade approximation to a polynomial as the ratio of two polynomials . <EoL>
<BoL> Actually evaluate the value of the interpolator . <EoL>
<BoL> Estimate the Taylor polynomial of f at x by polynomial fitting . <EoL>
<BoL> Convenience function for polynomial interpolation . <EoL>
<BoL> Insert knots into a B-spline . <EoL>
<BoL> Evaluate all derivatives of a B-spline . <EoL>
<BoL> Compute the spline for the antiderivative ( integral ) of a given spline . <EoL>
<BoL> Compute the spline representation of the derivative of a given spline <EoL>
<BoL> Evaluate a B-spline or its derivatives . <EoL>
<BoL> Evaluate the definite integral of a B-spline between two given points . <EoL>
<BoL> Find the roots of a cubic B-spline . <EoL>
<BoL> Interpolate the function . <EoL>
<BoL> Helper to check that arr_from broadcasts up to shape_to <EoL>
<BoL> Helper to check if fill_value == `` extrapolate '' without warnings <EoL>
<BoL> Similar to numpy.dot , but sum over last axis of a and 1st axis of b <EoL>
<BoL> Return a Lagrange interpolating polynomial . <EoL>
<BoL> Product of a list of numbers ; ~40x faster vs np.prod for Python tuples <EoL>
<BoL> Convenience function for polynomial interpolation . <EoL>
<BoL> The factorial of a number or array of numbers . <EoL>
<BoL> Pairwise distances between observations in n-dimensional space . <EoL>
<BoL> Closes the file . It is unsupported to call any other methods off this object after closing it . Note that this class supports the 'with' statement in modern versions of Python , to call this automatically <EoL>
<BoL> Reads a record of a given type from the file , defaulting to an integer type ( `` INTEGER*4 `` in Fortran ) . <EoL>
<BoL> Reads a record of a given type from the file , defaulting to a floating point number ( `` real*8 `` in Fortran ) . <EoL>
<BoL> Reads a record of a given type from the file . <EoL>
<BoL> Write a record ( including sizes ) to the file . <EoL>
<BoL> Convert various order codings to numpy format . <EoL>
<BoL> Create a HBFile instance . <EoL>
<BoL> Gives the header corresponding to this instance as a string . <EoL>
<BoL> Create a HBInfo instance from an existing sparse matrix . <EoL>
<BoL> Create a HBInfo instance from a file object containing a matrix in the HB format . <EoL>
<BoL> Given a float number , returns a `` reasonable '' ExpFormat instance to represent any number between -n and n . <EoL>
<BoL> Given an integer , returns a `` reasonable '' IntFormat instance to represent any number between 0 and n if n > 0 , -n and n if n < 0 <EoL>
<BoL> Return the number of bytes to read to get every full lines for the given parsed fortran format . <EoL>
<BoL> Read HB-format file . <EoL>
<BoL> Write HB-format file . <EoL>
<BoL> Align to the next 32-bit position in a file <EoL>
<BoL> Read an array of type ` typecode ` , with the array descriptor given as ` array_desc ` . <EoL>
<BoL> Function to read in an array descripto <EoL>
<BoL> Read a single byte <EoL>
<BoL> Read the next ` n ` bytes <EoL>
<BoL> Read a variable with a specified data type <EoL>
<BoL> Read a 32-bit float <EoL>
<BoL> Read a 64-bit float <EoL>
<BoL> Read a signed 16-bit intege <EoL>
<BoL> Read a signed 32-bit intege <EoL>
<BoL> Read a signed 64-bit intege <EoL>
<BoL> Read a signed 32-bit intege <EoL>
<BoL> Function to read in a full record <EoL>
<BoL> Read a string <EoL>
<BoL> Read a data string ( length is specified twice ) <EoL>
<BoL> Function to read in a structure descripto <EoL>
<BoL> Read a structure , with the array and structure descriptors given as ` array_desc ` and ` structure_desc ` respectively . <EoL>
<BoL> Function to read in a tag descripto <EoL>
<BoL> Function to read in a type descripto <EoL>
<BoL> Read an unsigned 16-bit intege <EoL>
<BoL> Read an unsigned 32-bit intege <EoL>
<BoL> Read an unsigned 64-bit intege <EoL>
<BoL> Skip ` n ` bytes <EoL>
<BoL> Initialize matlab 4 file reader <EoL>
<BoL> get variables from stream as dictionary <EoL>
<BoL> Run when beginning read of variables <EoL>
<BoL> list variables from stream <EoL>
<BoL> Read array , given ` header ` <EoL>
<BoL> Read and return header , next position <EoL>
<BoL> Sets options to return arrays as MATLAB loads them <EoL>
<BoL> Write variables in ` mdict ` to stream <EoL>
<BoL> get variables from stream as dictionary <EoL>
<BoL> Guess byte order . Sets stream pointer to 0 <EoL>
<BoL> Run when beginning read of variables <EoL>
<BoL> list variables from stream <EoL>
<BoL> Read in mat 5 file header <EoL>
<BoL> Read array , given ` header ` <EoL>
<BoL> Read header , return header , next position <EoL>
<BoL> Write variables in ` mdict ` to stream <EoL>
<BoL> Open ` file_like ` and return as file-like object . <EoL>
<BoL> Return major , minor tuple depending on apparent mat file type <EoL>
<BoL> Create reader for matlab .mat format files . <EoL>
<BoL> List variables inside a MATLAB file . <EoL>
<BoL> As we do not know what file type we have , assume native <EoL>
<BoL> latin-1 text matrix ( char matrix ) reader <EoL>
<BoL> Full ( rather than sparse ) matrix getter <EoL>
<BoL> Read and return header for variable <EoL>
<BoL> Read and return sparse matrix type <EoL>
<BoL> Mat4 read using header ` hdr ` dtype and dims <EoL>
<BoL> Read the shape of the array described by the header . The file position after this call is unspecified . <EoL>
<BoL> Write matrix ` arr ` , with name ` name ` <EoL>
<BoL> Write header for given data options <EoL>
<BoL> Sparse matrices are 2D <EoL>
<BoL> Return dtype for given number of items per element <EoL>
<BoL> Make `` arr `` exactly two dimensional <EoL>
<BoL> Convert string array to char array <EoL>
<BoL> Convert dtypes in mapping to given order <EoL>
<BoL> Determine equivalent MATLAB dimensions for given array <EoL>
<BoL> Generic get of byte stream data of known type <EoL>
<BoL> Write ` arr ` to stream at top and sub levels <EoL>
<BoL> Write string array ` arr ` with given ` codec ` <EoL>
<BoL> write tag and data <EoL>
<BoL> Same as writing structs , except different mx class , and extra classname element after header <EoL>
<BoL> Sparse matrices are 2D <EoL>
<BoL> Write variable at top level of mat file <EoL>
<BoL> Convert input object `` source `` to something we can write <EoL>
<BoL> Pull variables out of mat 5 file as a sequence of mat file objects <EoL>
<BoL> Convert codec template mapping to byte order <EoL>
<BoL> Reads array given header <EoL>
<BoL> Returns header <EoL>
<BoL> Return size and storage parameters from Matrix Market file-like 'source ' . <EoL>
<BoL> Initialize each attributes with the corresponding keyword arg value or a default of None <EoL>
<BoL> Return an open file stream for reading based on source . <EoL>
<BoL> Return size , storage parameters from Matrix Market file-like 'source ' . <EoL>
<BoL> Reads the contents of a Matrix Market file-like 'source ' into a matrix . <EoL>
<BoL> Check whether ` stream ` is compatible with numpy.fromfile . <EoL>
<BoL> Reads the contents of a Matrix Market file-like 'source ' into a matrix . <EoL>
<BoL> Writes the sparse or dense array ` a ` to Matrix Market file-like ` target ` . <EoL>
<BoL> Closes the NetCDF file . <EoL>
<BoL> Adds a dimension to the Dimension section of the NetCDF data structure . <EoL>
<BoL> Create an empty variable for the ` netcdf_file ` object , specifying its data type and the dimensions it uses . <EoL>
<BoL> Perform a sync-to-disk flush if the ` netcdf_file ` object is in write mode . <EoL>
<BoL> Applies the given missing value to the data array . <EoL>
<BoL> The default encoded fill-value for this Variable 's data type . <EoL>
<BoL> Returns the encoded fill value for this variable as bytes . <EoL>
<BoL> Returns the value denoting `` no data '' for this variable . <EoL>
<BoL> Assign a scalar value to a ` netcdf_variable ` of length one . <EoL>
<BoL> Retrieve a scalar value from a ` netcdf_variable ` of length one . <EoL>
<BoL> Return the itemsize of the variable . <EoL>
<BoL> Return the typecode of the variable . <EoL>
<BoL> Round floating-point lwork returned by lapack to integer . <EoL>
<BoL> Helper function to construct explicit outer factors of LDL factorization . <EoL>
<BoL> Helper function to extract the diagonal and triangular matrices for LDL.T factorization . <EoL>
<BoL> This helper function takes the rather strangely encoded permutation array returned by the LAPACK routines ? ( HE/SY ) TRF and converts it into regularized permutation and diagonal pivot size format . <EoL>
<BoL> Computes the LDLt or Bunch-Kaufman factorization of a symmetric/ hermitian matrix . <EoL>
<BoL> Compute the polar decomposition . <EoL>
<BoL> Strict check for ` arr ` not sharing any data with ` original ` , under the assumption that arr = asarray ( original ) <EoL>
<BoL> Relative condition number of the matrix exponential in the Frobenius norm . <EoL>
<BoL> Frechet derivative of the matrix exponential of A in the direction E . <EoL>
<BoL> This is a helper function , mostly for testing and profiling . Return expm ( A ) , frechet ( A , E ) <EoL>
<BoL> Construct the Kronecker form of the Frechet derivative of expm . <EoL>
<BoL> Stack columns of M to construct a single vector . <EoL>
<BoL> Matrix square root of an upper triangular matrix . <EoL>
<BoL> Convert real Schur form to complex Schur form . <EoL>
<BoL> Matrix square root . <EoL>
<BoL> Compute the matrix solution of the orthogonal Procrustes problem . <EoL>
<BoL> Find low-rank matrix approximation via the Clarkson-Woodruff Transform . <EoL>
<BoL> Generate a matrix S for the Clarkson-Woodruff sketch . <EoL>
<BoL> A helper function to validate the arguments supplied to the Riccati equation solvers . Any discrepancy found in the input matrices leads to a `` ValueError `` exception . <EoL>
<BoL> Solves the discrete Lyapunov equation using a bilinear transformation . <EoL>
<BoL> Solves the discrete Lyapunov equation directly . <EoL>
<BoL> Create a block diagonal matrix from provided arrays . <EoL>
<BoL> Kronecker product . <EoL>
<BoL> Compute pivoted LU decomposition of a matrix . <EoL>
<BoL> Solves the continuous-time algebraic Riccati equation ( CARE ) . <EoL>
<BoL> Solves the continuous Lyapunov equation : math : ` AX + XA^H = Q ` . <EoL>
<BoL> Solves the discrete-time algebraic Riccati equation ( DARE ) . <EoL>
<BoL> Solves the discrete Lyapunov equation : math : ` AXA^H - X + Q = 0 ` . <EoL>
<BoL> Computes a solution ( X ) to the Sylvester equation : math : ` AX + XB = Q ` . <EoL>
<BoL> Check arguments during the different steps of the solution phase <EoL>
<BoL> Return optimal available _flinalg function objects with names . arrays are used to determine optimal prefix . <EoL>
<BoL> Compute the ( Moore-Penrose ) pseudo-inverse of a matrix . <EoL>
<BoL> Solve a Toeplitz system using Levinson Recursion <EoL>
<BoL> Find best-matching BLAS/LAPACK type . <EoL>
<BoL> Return available BLAS function objects from names . <EoL>
<BoL> Converts complex eigenvalues `` w `` and eigenvectors `` v `` to real eigenvalues in a block diagonal form `` wr `` and the associated real eigenvectors `` vr `` , such that : : <EoL>
<BoL> Compute the Cholesky decomposition of a matrix , to use in cho_solve <EoL>
<BoL> Solve the linear equations A x = b , given the Cholesky factorization of A . <EoL>
<BoL> Construct a circulant matrix . <EoL>
<BoL> Create a companion matrix . <EoL>
<BoL> Compute the hyperbolic matrix cosine . <EoL>
<BoL> Compute the matrix cosine . <EoL>
<BoL> Check info return value . <EoL>
<BoL> Check that select is valid , convert to Fortran style . <EoL>
<BoL> Produce complex-valued eigenvectors from LAPACK DGGEV real-valued output <EoL>
<BoL> Compute Hessenberg form of a matrix . <EoL>
<BoL> Compute RQ decomposition of a matrix . <EoL>
<BoL> Call a LAPACK routine , determining lwork automatically and handling error return values <EoL>
<BoL> Construct the sigma matrix in SVD from singular values and size M , N . <EoL>
<BoL> Construct an orthonormal basis for the null space of A using SVD <EoL>
<BoL> Construct an orthonormal basis for the range of A using SVD <EoL>
<BoL> Compute the subspace angles between two matrices . <EoL>
<BoL> Compute singular values of a matrix . <EoL>
<BoL> Discrete Fourier transform matrix . <EoL>
<BoL> Compute the matrix exponential using Pade approximation . <EoL>
<BoL> Compute the fractional power of a matrix . <EoL>
<BoL> Evaluate a matrix function specified by a callable . <EoL>
<BoL> Construct a Hadamard matrix . <EoL>
<BoL> Construct a Hankel matrix . <EoL>
<BoL> Create a Helmert matrix of order ` n ` . <EoL>
<BoL> Create a Hilbert matrix of order ` n ` . <EoL>
<BoL> Compute the inverse of the Hilbert matrix of order ` n ` . <EoL>
<BoL> Returns the inverse of the n x n Pascal matrix . <EoL>
<BoL> Create a Leslie matrix . <EoL>
<BoL> Compute matrix logarithm . <EoL>
<BoL> Wraps asarray with the extra requirement that the input be a square matrix . <EoL>
<BoL> Return either B or the real part of B , depending on properties of A and B . <EoL>
<BoL> Matrix sign function . <EoL>
<BoL> Compute the hyperbolic matrix sine . <EoL>
<BoL> Compute the matrix sine . <EoL>
<BoL> Compute the hyperbolic matrix tangent . <EoL>
<BoL> Compute the matrix tangent . <EoL>
<BoL> Make a copy of a matrix with elements below the k-th diagonal zeroed . <EoL>
<BoL> Returns the n x n Pascal matrix . <EoL>
<BoL> Construct a Toeplitz matrix . <EoL>
<BoL> Construct ( N , M ) matrix filled with ones at and below the k-th diagonal . <EoL>
<BoL> Make a copy of a matrix with elements above the k-th diagonal zeroed . <EoL>
<BoL> Double factorial . <EoL>
<BoL> Multifactorial of n of order k , n ( ! ! ... ! ) . <EoL>
<BoL> Get an 8-bit grayscale bit-depth , 512 x 512 derived image for easy use in demos <EoL>
<BoL> Return weights for an Np-point central derivative . <EoL>
<BoL> Find the n-th derivative of a function at a point . <EoL>
<BoL> Fill a function docstring from variables in dictionary <EoL>
<BoL> This decorator replaces the decorated function 's docstring with the docstring from corresponding method in ` cls ` . It extends the 'Notes ' section of that docstring to include the given ` notes ` . <EoL>
<BoL> Return docstring decorator using docdict variable dictionary <EoL>
<BoL> Minimum indent for all lines in line list <EoL>
<BoL> This decorator modifies the decorated function 's docstring by replacing occurrences of ' % ( super ) s ' with the docstring of the method of the same name from the class ` cls ` . <EoL>
<BoL> This decorator replaces the decorated function 's docstring with the docstring from corresponding method in ` cls ` . It replaces the 'Notes ' section of that docstring with the given ` notes ` . <EoL>
<BoL> Unindent all strings in a docdict <EoL>
<BoL> Set docstring to minimum indent for all lines , including first <EoL>
<BoL> Load an electrocardiogram as an example for a one-dimensional signal . <EoL>
<BoL> Get a 1024 x 768 , color image of a raccoon face . <EoL>
<BoL> Convert an extension mode to the corresponding integer code . <EoL>
<BoL> If input is a scalar , create a sequence of length equal to the rank by duplicating the input . If input is a sequence , check if its length is equal to the length of array . <EoL>
<BoL> Fill the holes in binary objects . <EoL>
<BoL> Calculate the center of mass of the values of an array at labels . <EoL>
<BoL> Calculate the minimums and maximums of the values of an array at labels , along with their positions . <EoL>
<BoL> Computes a 1D Gaussian convolution kernel . <EoL>
<BoL> Calculate a Prewitt filter . <EoL>
<BoL> Calculate a Sobel filter . <EoL>
<BoL> Find objects in a labeled array . <EoL>
<BoL> Multi-dimensional ellipsoid fourier filter . <EoL>
<BoL> Multi-dimensional Gaussian fourier filter . <EoL>
<BoL> Multi-dimensional fourier shift filter . <EoL>
<BoL> Multi-dimensional uniform fourier filter . <EoL>
<BoL> Calculate the histogram of the values of an array , optionally at labels . <EoL>
<BoL> Multi-dimensional spline filter . <EoL>
<BoL> Iterate a structure by dilating it with itself . <EoL>
<BoL> Label features in an array . <EoL>
<BoL> Roughly equivalent to [ func ( input [ labels == i ] ) for i in index ] .labels must be sorted <EoL>
<BoL> Calculate the maximum of the values of an array over labeled regions . <EoL>
<BoL> Find the positions of the maximums of the values of an array at labels . <EoL>
<BoL> Calculate the mean of the values of an array at labels . <EoL>
<BoL> Test whether the numpy data type ` dt ` can be safely cast to an int . <EoL>
<BoL> Count , sum , and optionally compute ( sum - centre ) ^2 of input by label <EoL>
<BoL> Calculate the median of the values of an array over labeled regions . <EoL>
<BoL> Calculate the minimum of the values of an array over labeled regions . <EoL>
<BoL> Find the positions of the minimums of the values of an array at labels . <EoL>
<BoL> Calculate the standard deviation of the values of an n-D image array , optionally at specified sub-regions . <EoL>
<BoL> Calculate the sum of the values of the array . <EoL>
<BoL> Calculate the variance of the values of an n-D image array , optionally at specified sub-regions . <EoL>
<BoL> Apply watershed from markers using image foresting transform algorithm . <EoL>
<BoL> Update the Hessian matrix . <EoL>
<BoL> Update the inverse Hessian matrix . <EoL>
<BoL> Compute the product of the internal matrix with the given vector . <EoL>
<BoL> Return the current internal matrix . <EoL>
<BoL> Initialize internal matrix . <EoL>
<BoL> Update internal matrix . <EoL>
<BoL> Compute the product of the internal matrix with the given vector . <EoL>
<BoL> Return current internal matrix . <EoL>
<BoL> Initialize internal matrix . <EoL>
<BoL> Update internal matrix . <EoL>
<BoL> Construct the operator . <EoL>
<BoL> Default implementation of _adjoint ; defers to rmatvec . <EoL>
<BoL> Called from subclasses at the end of the __init__ routine . <EoL>
<BoL> Default matrix-matrix multiplication handler . <EoL>
<BoL> Efficient matrix-vector multiply with the BFGS matrices . <EoL>
<BoL> Default implementation of _rmatvec ; defers to adjoint . <EoL>
<BoL> Hermitian adjoint . <EoL>
<BoL> Matrix-matrix or matrix-vector multiplication . <EoL>
<BoL> Matrix-matrix multiplication . <EoL>
<BoL> Matrix-vector multiplication . <EoL>
<BoL> Adjoint matrix-vector multiplication . <EoL>
<BoL> Return a dense array representation of this operator . <EoL>
<BoL> Transpose this linear operator . <EoL>
<BoL> Do one Monte Carlo iteration <EoL>
<BoL> Do one cycle of the basinhopping algorithm <EoL>
<BoL> print a status update <EoL>
<BoL> f_new and f_old are mandatory in kwargs <EoL>
<BoL> If new energy is lower than old , it will always be accepted . If new is higher than old , there is a chance it will be accepted , less likely for larger differences . <EoL>
<BoL> Convert the new bounds representation to the old one . <EoL>
<BoL> Converts new-style constraint objects to old-style constraint dictionaries . <EoL>
<BoL> Convert the old bounds representation to the new one . <EoL>
<BoL> Converts old-style constraint dictionaries to new-style constraint objects . <EoL>
<BoL> Remove bounds which are not asked to be kept feasible . <EoL>
<BoL> Initialize this LinearOperator . <EoL>
<BoL> Default matrix-vector multiplication handler . <EoL>
<BoL> Evolve the population by a single generation <EoL>
<BoL> best1bin , best1exp <EoL>
<BoL> best2bin , best2exp <EoL>
<BoL> Calculate the energies of all the population members at the same time . <EoL>
<BoL> currenttobest1bin , currenttobest1exp <EoL>
<BoL> Make sure the parameters lie between the limits . <EoL>
<BoL> Create a trial vector based on a mutation strategy . <EoL>
<BoL> and1bin , rand1exp <EoL>
<BoL> and2bin , rand2exp <EoL>
<BoL> andtobest1bin , randtobest1exp <EoL>
<BoL> Scale from a number between 0 and 1 to parameters . <EoL>
<BoL> obtain random integers from range ( self.num_population_members ) , without replacement . You ca n't have the original candidate either . <EoL>
<BoL> Scale from parameters to a number between 0 and 1 . <EoL>
<BoL> Return True if the solver has converged . <EoL>
<BoL> Initialises the population with a user specified population . <EoL>
<BoL> Initializes the population with Latin Hypercube Sampling . Latin Hypercube Sampling ensures that each parameter is uniformly sampled over its range . <EoL>
<BoL> Initialises the population at random . This type of initialization can possess clustering , Latin Hypercube sampling is generally better . <EoL>
<BoL> Runs the DifferentialEvolutionSolver . <EoL>
<BoL> Initialize current location is the search domain . If ` x0 ` is not provided , a random location within the bounds is generated . <EoL>
<BoL> Formula Visita from p. 405 of reference [ 2 ] <EoL>
<BoL> Based on the step in the strategy chain , new coordinated are generated by changing all components is the same time or only one of them , the new values are computed with visit_fn method <EoL>
<BoL> Clear all covered matrix cells <EoL>
<BoL> Steps 1 and 2 in the Wikipedia page . <EoL>
<BoL> Cover each column containing a starred zero . <EoL>
<BoL> Find a noncovered zero and prime it . <EoL>
<BoL> Construct a series of alternating primed and starred zeros as follows . <EoL>
<BoL> Add the value found in Step 4 to every element of each covered row , and subtract it from every element of each uncovered column . Return to Step 4 without altering any stars , primes , or covered lines . <EoL>
<BoL> Solve the linear sum assignment problem . <EoL>
<BoL> Parse the provided linear programming problem <EoL>
<BoL> A sample callback function demonstrating the linprog callback interface . This callback produces brief output to sys.stdout before each iteration and after the final iteration of the simplex algorithm . <EoL>
<BoL> A sample callback function demonstrating the linprog callback interface . This callback produces detailed output to sys.stdout before each iteration and after the final iteration of the simplex algorithm . <EoL>
<BoL> Print indicators of optimization status to the console . <EoL>
<BoL> An implementation of [ 4 ] Equation 8.9 <EoL>
<BoL> Return the starting point from [ 4 ] 4.4 <EoL>
<BoL> Given problem status code , return a more detailed message . <EoL>
<BoL> Given solver options , return a handle to the appropriate linear system solver . <EoL>
<BoL> An implementation of [ 4 ] equation 8.21 <EoL>
<BoL> Implementation of several equations from [ 4 ] used as indicators of the status of optimization . <EoL>
<BoL> An implementation of [ 4 ] equation 8.31 and 8.32 <EoL>
<BoL> Pivot the simplex tableau inplace on the element given by ( pivrow , pivol ) . The entering variable corresponds to the column given by pivcol forcing the variable basis [ pivrow ] to leave the basis . <EoL>
<BoL> Given a linear programming simplex tableau , determine the column of the variable to enter the basis . <EoL>
<BoL> Given a linear programming simplex tableau , determine the row for the pivot operation . <EoL>
<BoL> Check the validity of the provided solution . <EoL>
<BoL> Check the provided `` A_ub `` and `` A_eq `` matrices conform to the specified optional sparsity variables . <EoL>
<BoL> Print the termination summary of the linear program <EoL>
<BoL> Eliminates redundant equations from system of equations defined by Ax = b and identifies infeasibilities . <EoL>
<BoL> Eliminates redundant equations from system of equations defined by Ax = b and identifies infeasibilities . <EoL>
<BoL> Eliminates redundant equations from system of equations defined by Ax = b and identifies infeasibilities . <EoL>
<BoL> Compute the maximum violation of KKT conditions . <EoL>
<BoL> Compute Coleman-Li scaling vector and its derivatives . <EoL>
<BoL> Return A as a LinearOperator . <EoL>
<BoL> Parameterize a multivariate quadratic function along a line . The resulting univariate quadratic function is given as follows : : : f ( t ) = 0.5 * ( s0 + s*t ) .T * ( J.T*J + diag ) * ( s0 + s*t ) + g.T * ( s0 + s*t ) <EoL>
<BoL> Check termination condition for nonlinear least squares . <EoL>
<BoL> Compute gradient of the least-squares cost function . <EoL>
<BoL> Compute variables scale based on the Jacobian matrix . <EoL>
<BoL> Compute values of a quadratic function arising in least squares . The function is 0.5 * s.T * ( J.T * J + diag ) * s + g.T * s . <EoL>
<BoL> Determine which constraints are active in a given point . <EoL>
<BoL> Check if a point lies within bounds . <EoL>
<BoL> Find the intersection of a line with the boundary of a trust region . <EoL>
<BoL> Return diag ( d ) J as LinearOperator . <EoL>
<BoL> Compute diag ( d ) J . If ` copy ` is False , ` J ` is modified in place ( unless being LinearOperator ) . <EoL>
<BoL> Shift a point to the interior of a feasible region . <EoL>
<BoL> Minimize a 1-d quadratic function subject to bounds . <EoL>
<BoL> Compute reflective transformation and its gradient . <EoL>
<BoL> Return a matrix arising in regularized least squares as LinearOperator . The matrix is [ J ] [ D ] where D is diagonal matrix with elements from ` diag ` . <EoL>
<BoL> Return J diag ( d ) as LinearOperator . <EoL>
<BoL> Compute J diag ( d ) . If ` copy ` is False , ` J ` is modified in place ( unless being LinearOperator ) . <EoL>
<BoL> Scale Jacobian and residuals for a robust loss function . Arrays are modified in place . <EoL>
<BoL> Function of which to find zero . <EoL>
<BoL> Solve a general trust-region problem in 2 dimensions . The problem is reformulated as a 4-th order algebraic equation , the solution of which is found by numpy.roots . <EoL>
<BoL> Compute a min_step size required to reach a bound . <EoL>
<BoL> Find dogleg step in a rectangular region . <EoL>
<BoL> Find intersection of trust-region bounds and initial bounds . <EoL>
<BoL> Compute LinearOperator to use in LSMR by dogbox algorithm . <EoL>
<BoL> Select the best step according to Trust Region Reflective algorithm . <EoL>
<BoL> Find an appropriate step size using backtracking line search . <EoL>
<BoL> Solve regularized least squares using information from QR-decomposition . <EoL>
<BoL> Select the best step according to Trust Region Reflective algorithm . <EoL>
<BoL> Converts bounds to the form required by the solver . <EoL>
<BoL> Converts constraints to the form required by the solver . <EoL>
<BoL> Adjust final difference scheme to the presence of bounds . <EoL>
<BoL> Returns the index of the densest row of A . Ignores rows that are not eligible for consideration . <EoL>
<BoL> Eliminates trivial equations from system of equations defined by Ax = b and identifies trivial infeasibilities <EoL>
<BoL> Counts the number of nonzeros in each row of input array A. Nonzeros are defined as any element with absolute value greater than tol = 1e-13 . This value should probably be an input to the function . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Options -- -- -- - nit : int , optional Number of iterations to make . <EoL>
<BoL> Calculate f or use cached value if available <EoL>
<BoL> Calculate f ' or use a cached value if available <EoL>
<BoL> Calculate f '' or use a cached value if available <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function and its derivatives . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function and its derivative . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function . <EoL>
<BoL> Options -- -- -- - args : tuple , optional Extra arguments passed to the objective function . <EoL>
<BoL> Split the central edge between the origin and supremum of a cell and add the new vertex to the complex <EoL>
<BoL> Make a list of size 2**n + 1 where an entry is a vertex incidence , each list element contains a list of indexes corresponding to that entries neighbours <EoL>
<BoL> Generate the simplicial triangulation of the n dimensional hypercube containing 2**n vertices <EoL>
<BoL> Here C is the LIST of simplexes S in the 2 or 3 dimensional complex <EoL>
<BoL> Run sub_generate_cell for every cell in the current complex self.gen <EoL>
<BoL> Split a hypersimplex S into two sub simplices by building a hyperplane which connects to a new vertex on an edge ( the longest edge in dim = { 2 , 3 } ) and every other vertex in the simplex that is not connected to the edge being split . <EoL>
<BoL> Subgenerate a cell ` C_i ` of generation ` gen ` and homology group rank ` hgr ` . <EoL>
<BoL> Sort results and build the global return object <EoL>
<BoL> Finds the subspace vectors along each component axis . <EoL>
<BoL> Construct for ` iters ` iterations . <EoL>
<BoL> Construct locally ( approximately ) convex bounds <EoL>
<BoL> Construct locally ( approximately ) convex bounds <EoL>
<BoL> Returns the indexes of all minimizers <EoL>
<BoL> Construct the minimiser pool , map the minimisers to local minima and sort the results into a global return object . <EoL>
<BoL> Returns the indexes of points connected to `` pindex `` on the Gabriel chain subgraph of the Delaunay triangulation . <EoL>
<BoL> Stop the algorithm if the final function value is known <EoL>
<BoL> Find the objective function output reference table <EoL>
<BoL> Returns the topographical vector stemming from the specified value `` x_min `` for the current feasible set `` X_min `` with True boolean values indicating positive entries and False values indicating negative entries . <EoL>
<BoL> Initiates the options . Can also be useful to change parameters after class initiation . <EoL>
<BoL> Build a complex of Delaunay triangulated points <EoL>
<BoL> Iterate a subdivision of the complex <EoL>
<BoL> This processing method can optionally minimise only the best candidate solutions in the minimiser pool <EoL>
<BoL> This function is used to calculate the local minima using the specified sampling point as a starting value . <EoL>
<BoL> Returns the indexes of all minimizers <EoL>
<BoL> Sample the function surface . There are 2 modes , if `` infty_cons_sampl `` is True then the sampled points that are generated outside the feasible domain will be assigned an `` inf `` value in accordance with SHGO rules . This guarantees convergence and usually requires less objective function evaluations at the computational costs of more Delaunay triangulation points . <EoL>
<BoL> Generates uniform sampling points in a hypercube and scales the points to the bound limits . <EoL>
<BoL> Find subspace of feasible points from g_func definition <EoL>
<BoL> Returns the indexes of all minimizers <EoL>
<BoL> sobol.cc by Frances Kuo and Stephen Joe translated to Python 3 by Carl Sandrock 2016-03-31 <EoL>
<BoL> Wrapper for `` sobol_seq.i4_sobol_generate `` <EoL>
<BoL> Sort results and build the global return object <EoL>
<BoL> Find indexes of the sorted sampling points <EoL>
<BoL> Various stopping criteria ran every iteration <EoL>
<BoL> Find the BD and FD finite differences along each component vector . <EoL>
<BoL> i4_bit_hi1 returns the position of the high 1 bit base 2 in an integer . <EoL>
<BoL> I4_BIT_LO0 returns the position of the low 0 bit base 2 in an integer . <EoL>
<BoL> i4_sobol_generate generates a Sobol dataset . <EoL>
<BoL> Returns the difference between the current homology group of the cell and it 's parent group <EoL>
<BoL> Returns the homology group order of the current cell <EoL>
<BoL> Returns the number of stationary points theoretically contained in the cell based information currently known about the cell <EoL>
<BoL> Print the current cell to console <EoL>
<BoL> Check whether this vertex is strictly less than all its neighbours <EoL>
<BoL> Wrap a function and an initial value so that ( i ) complex values are wrapped to reals , and ( ii ) value for a merit function fmerit ( x , f ) is computed at the same time , ( iii ) iteration count is maintained and an exception is raised if it is exceeded . <EoL>
<BoL> Convert from real to complex and reshape result arrays . <EoL>
<BoL> Solve the scalar quadratic equation ||z + t d|| == trust_radius . <EoL>
<BoL> Concatenate multiple ` CanonicalConstraint ` into one . <EoL>
<BoL> Create an `` empty '' instance . <EoL>
<BoL> Create an instance from ` PreparedConstrained ` object . <EoL>
<BoL> Convert initial values of the constraints to the canonical format . <EoL>
<BoL> Approximately minimize `` 1/2*|| A x + b ||^2 `` inside trust-region . <EoL>
<BoL> Return three linear operators related with a given matrix A . <EoL>
<BoL> Return linear operators for matrix A - `` AugmentedSystem `` . <EoL>
<BoL> Build a sparse matrix from sparse sub-blocks <EoL>
<BoL> Return linear operators for matrix A using `` NormalEquation `` approach . <EoL>
<BoL> Measure orthogonality between a vector and the null space of a matrix . <EoL>
<BoL> Return linear operators for matrix A using `` QRFactorization `` approach . <EoL>
<BoL> Return linear operators for matrix A using `` SVDFactorization `` approach . <EoL>
<BoL> Solve equality-constrained quadratic programming ( EQP ) problem . <EoL>
<BoL> Check if lb < = x < = ub . <EoL>
<BoL> Return clipped value of x <EoL>
<BoL> Assemble sparse jacobian given its components . <EoL>
<BoL> Returns barrier function and constraints at given point . <EoL>
<BoL> Returns scaled gradient . <EoL>
<BoL> Returns scaled Lagrangian Hessian <EoL>
<BoL> Returns scaled Lagrangian Hessian ( in relation to ` s ` ) - > S Hs S <EoL>
<BoL> Returns Lagrangian Hessian ( in relation to ` x ` ) - > Hx <EoL>
<BoL> Returns scaling vector . Given by : scaling = [ ones ( n_vars ) , s ] <EoL>
<BoL> The Cauchy point is minimal along the direction of steepest descent . <EoL>
<BoL> The Newton point is a global minimum of the approximate function . <EoL>
<BoL> Minimize a function using the dog-leg trust-region algorithm . <EoL>
<BoL> Given a trust radius , return a good initial guess for the damping factor , the lower bound and the upper bound . The values were chosen accordingly to the guidelines on section 7.3.8 ( p. 192 ) from [ 1 ] _ . <EoL>
<BoL> Solve quadratic subproblem <EoL>
<BoL> Given upper triangular matrix `` U `` estimate the smallest singular value and the correspondent right singular vector in O ( n**2 ) operations . <EoL>
<BoL> Given a square matrix `` H `` compute upper and lower bounds for its eigenvalues ( Gregoshgorin Bounds ) . <EoL>
<BoL> Compute term that makes the leading `` k `` by `` k `` submatrix from `` A `` singular . <EoL>
<BoL> Solve the subproblem using a conjugate gradient method . <EoL>
<BoL> Finite-difference approximation of the gradient of a scalar function . <EoL>
<BoL> Bracket the minimum of the function . <EoL>
<BoL> Given a function of one-variable and a possible bracket , return the local minimum of the function isolated to a fractional precision of tol . <EoL>
<BoL> Check the correctness of a gradient function by comparing it against a ( forward ) finite-difference approximation of the gradient . <EoL>
<BoL> Find a fixed point of the function . <EoL>
<BoL> See `` approx_fprime `` . An optional initial function value arg is added . <EoL>
<BoL> Finds the minimizer for a cubic polynomial that goes through the points ( a , fa ) , ( b , fb ) , and ( c , fc ) with derivative at a of fpa . <EoL>
<BoL> Finds the minimizer for a quadratic polynomial that goes through the points ( a , fa ) , ( b , fb ) with derivative at a of fpa , <EoL>
<BoL> Compatibility wrapper for ` line_search_armijo ` <EoL>
<BoL> Minimize over alpha , the function `` f ( xk+alpha pk ) `` . <EoL>
<BoL> Minimize over alpha , the function `` phi ( alpha ) `` . <EoL>
<BoL> Perform a simple check on the gradient for correctness . <EoL>
<BoL> Solve `` argmin_x || Ax - b ||_2 `` for `` x > =0 `` . This is a wrapper for a FORTRAN non-negative least squares solver . <EoL>
<BoL> Evaluate w = M^-1 v <EoL>
<BoL> Collapse the low-rank matrix to a full-rank one . <EoL>
<BoL> Evaluate w = M v <EoL>
<BoL> Reduce the rank of the matrix by dropping all vectors . <EoL>
<BoL> Evaluate w = M^H v <EoL>
<BoL> Evaluate w = M^-H v <EoL>
<BoL> Reduce the rank of the matrix by dropping oldest vectors . <EoL>
<BoL> Evaluate w = M^-1 v <EoL>
<BoL> Reduce the rank of the matrix by retaining some SVD components . <EoL>
<BoL> Return ndarray ` x ` as same array subclass and shape as ` x0 ` <EoL>
<BoL> Return ` x ` as an array , of either floats or complex floats <EoL>
<BoL> Construct a solver wrapper with given name and jacobian approx.def % ( name ) s ( F , xin , iter=None % ( kw ) s , verbose=False , maxiter=None , f_tol=None , f_rtol=None , x_tol=None , x_rtol=None , tol_norm=None , line_search='armijo ' , callback=None , **kw ) : jac = % ( jac ) s ( % ( kwkw ) s **kw ) return nonlin_solve ( F , xin , jac , iter , verbose , maxiter , f_tol , f_rtol , x_tol , x_rtol , tol_norm , line_search , callback ) <EoL>
<BoL> Convert given object to one suitable for use as a Jacobian . <EoL>
<BoL> Line-search algorithm using fminbound . <EoL>
<BoL> Test whether ` x ` is either a scalar or an array scalar . <EoL>
<BoL> The Rosenbrock function . <EoL>
<BoL> The derivative ( i.e . gradient ) of the Rosenbrock function . <EoL>
<BoL> The Hessian matrix of the Rosenbrock function . <EoL>
<BoL> Product of the Hessian matrix of the Rosenbrock function with a vector . <EoL>
<BoL> Show documentation for additional options of optimization solvers . <EoL>
<BoL> Approximate the Jacobian matrix of a callable function . <EoL>
<BoL> Call the user-supplied function , update book-keeping <EoL>
<BoL> Package the result and statistics into a tuple . <EoL>
<BoL> Determine the current status . <EoL>
<BoL> Perform one step in the algorithm . <EoL>
<BoL> Prepare for the iterations . <EoL>
<BoL> A vectorized version of Newton , Halley , and secant methods for arrays . <EoL>
<BoL> Return a matrix of divided differences for the xvals , fvals pairs <EoL>
<BoL> Compute p ( x ) for the polynomial passing through the specified locations . <EoL>
<BoL> Inverse cubic interpolation f-values - > x-values <EoL>
<BoL> Apply Newton-Raphson like steps , using divided differences to approximate f ' <EoL>
<BoL> Select from a tuple of ( root , funccalls , iterations , flag ) <EoL>
<BoL> Perform a secant step , taking a little care <EoL>
<BoL> Update a bracket given ( c , fc ) with a < c < b . Return the discarded endpoints <EoL>
<BoL> Adds two systems in the sense of frequency domain addition . <EoL>
<BoL> Initialize the state space lti/dlti system . <EoL>
<BoL> Post-multiply another system or a scalar <EoL>
<BoL> Negate the system ( equivalent to pre-multiplying by -1 ) . <EoL>
<BoL> Create new StateSpace object and settle inheritance . <EoL>
<BoL> Return representation of the ` StateSpace ` system . <EoL>
<BoL> Pre-multiply a scalar or matrix ( but not StateSpace ) <EoL>
<BoL> Divide by a scalar <EoL>
<BoL> Convert to ` StateSpace ` system , without copying . <EoL>
<BoL> Convert to ` TransferFunction ` system , without copying . <EoL>
<BoL> Convert to ` ZerosPolesGain ` system , without copying . <EoL>
<BoL> Copy the parameters of another ` StateSpace ` system . <EoL>
<BoL> Return a copy of the current ` StateSpace ` system . <EoL>
<BoL> Convert system representation to ` TransferFunction ` . <EoL>
<BoL> Convert system representation to ` ZerosPolesGain ` . <EoL>
<BoL> Initialize the state space LTI system . <EoL>
<BoL> Handle object conversion if input is an instance of lti . <EoL>
<BoL> Return representation of the system 's transfer function <EoL>
<BoL> Copy the parameters of another ` TransferFunction ` object <EoL>
<BoL> Change a transfer function from the variable ` z ` to ` z**-1 ` . <EoL>
<BoL> Change a transfer function from the variable ` z ` to ` z**-1 ` . <EoL>
<BoL> Convert system representation to ` StateSpace ` . <EoL>
<BoL> Return a copy of the current ` TransferFunction ` system . <EoL>
<BoL> Convert system representation to ` ZerosPolesGain ` . <EoL>
<BoL> Initialize the zeros , poles , gain system . <EoL>
<BoL> Handle object conversion if input is an instance of ` lti ` <EoL>
<BoL> Return representation of the ` ZerosPolesGain ` system . <EoL>
<BoL> Copy the parameters of another ` ZerosPolesGain ` system . <EoL>
<BoL> Convert system representation to ` StateSpace ` . <EoL>
<BoL> Convert system representation to ` TransferFunction ` . <EoL>
<BoL> Return a copy of the current 'ZerosPolesGain ' system . <EoL>
<BoL> Reverse the 1-d slices of ` a ` along axis ` axis ` . <EoL>
<BoL> Take a slice along axis 'axis ' from ' a ' . <EoL>
<BoL> Constant extension at the boundaries of an array <EoL>
<BoL> Even extension at the boundaries of an array <EoL>
<BoL> Odd extension at the boundaries of an array <EoL>
<BoL> Zero padding at the boundaries of an array <EoL>
<BoL> Maximum length sequence ( MLS ) generator . <EoL>
<BoL> Ensure argument ` peaks ` is a 1D C-contiguous array of dtype ( 'intp ' ) . <EoL>
<BoL> Ensure argument ` wlen ` is of type ` np.intp ` and larger than 1 . <EoL>
<BoL> Ensure argument ` x ` is a 1D C-contiguous array of dtype ( 'float64 ' ) . <EoL>
<BoL> Calculate the relative extrema of ` data ` . <EoL>
<BoL> Identify ridges in the 2-D matrix . <EoL>
<BoL> Evaluate which peaks fulfill the threshold condition . <EoL>
<BoL> Evaluate where the generic property of peaks confirms to an interval . <EoL>
<BoL> Parse condition arguments for ` find_peaks ` . <EoL>
<BoL> Calculate the relative extrema of ` data ` . <EoL>
<BoL> Calculate the relative maxima of ` data ` . <EoL>
<BoL> Calculate the relative minima of ` data ` . <EoL>
<BoL> Continuous wavelet transform . <EoL>
<BoL> Calculate the prominence of each peak in a signal . <EoL>
<BoL> Calculate the width of each peak in a signal . <EoL>
<BoL> Return a Ricker wavelet , also known as the `` Mexican hat wavelet '' . <EoL>
<BoL> Use polynomial interpolation of x at the low and high ends of the axis to fill in the halflen values in y . <EoL>
<BoL> Differentiate polynomials represented with coefficients . <EoL>
<BoL> Helper for resampling <EoL>
<BoL> Apply the prepared filter to the specified axis of a nD signal x <EoL>
<BoL> Store coefficients in a transposed , flipped arrangement . <EoL>
<BoL> Upsample , FIR filter , and downsample <EoL>
<BoL> Check state-space matrices and ensure they are two-dimensional . <EoL>
<BoL> Band Stop Objective Function for order minimization . <EoL>
<BoL> Return ( z , p , k ) for analog prototype of an Nth-order Bessel filter . <EoL>
<BoL> Return a digital filter from an analog one using a bilinear transform . <EoL>
<BoL> Return a digital IIR filter from an analog one using a bilinear transform . <EoL>
<BoL> Calculate Bode magnitude and phase data of a continuous-time system . <EoL>
<BoL> B-spline basis function of order n . <EoL>
<BoL> Returns the function defined over the left-side pieces for a bspline of a given order . <EoL>
<BoL> Compute cubic spline coefficients for rank-1 array . <EoL>
<BoL> Evaluate a spline at the new set of points . <EoL>
<BoL> A cubic B-spline . <EoL>
<BoL> Gaussian approximation to B-spline basis function of order n . <EoL>
<BoL> Compute quadratic spline coefficients for rank-1 array . <EoL>
<BoL> Evaluate a quadratic spline at the new set of points . <EoL>
<BoL> A quadratic B-spline . <EoL>
<BoL> Smoothing spline ( cubic ) filtering of a rank-2 array . <EoL>
<BoL> Return ( z , p , k ) for analog prototype of Nth-order Butterworth filter . <EoL>
<BoL> Butterworth digital and analog filter design . <EoL>
<BoL> Butterworth filter order selection . <EoL>
<BoL> Return ( x , phi , psi ) at dyadic points `` K/2**J `` from filter coefficients . <EoL>
<BoL> Return ( z , p , k ) for Nth-order Chebyshev type I analog lowpass filter . <EoL>
<BoL> Chebyshev type I filter order selection . <EoL>
<BoL> Return ( z , p , k ) for Nth-order Chebyshev type I analog lowpass filter . <EoL>
<BoL> Chebyshev type II filter order selection . <EoL>
<BoL> Chebyshev type I digital and analog filter design . <EoL>
<BoL> Chebyshev type II digital and analog filter design . <EoL>
<BoL> Check whether the Constant OverLap Add ( COLA ) constraint is met <EoL>
<BoL> Check whether the Nonzero Overlap Add ( NOLA ) constraint is met <EoL>
<BoL> Frequency-swept cosine generator . <EoL>
<BoL> Find the fastest convolution/correlation method . <EoL>
<BoL> Sort roots based on magnitude . <EoL>
<BoL> Transform a continuous to a discrete state-space system . <EoL>
<BoL> Convolve two 2-dimensional arrays . <EoL>
<BoL> Cross-correlate two N-dimensional arrays . <EoL>
<BoL> Cross-correlate two 2-dimensional arrays . <EoL>
<BoL> The coefficients for the FIR low-pass filter producing Daubechies wavelets . <EoL>
<BoL> Calculate Bode magnitude and phase data of a discrete-time system . <EoL>
<BoL> Downsample the signal after applying an anti-aliasing filter . <EoL>
<BoL> Deconvolves `` divisor `` out of `` signal `` using inverse filtering . <EoL>
<BoL> Remove linear trend along axis from data . <EoL>
<BoL> Calculate the frequency response of a discrete-time system . <EoL>
<BoL> Impulse response of discrete-time system . <EoL>
<BoL> Simulate output of a discrete-time linear system . <EoL>
<BoL> Initialize the ` lti ` baseclass . <EoL>
<BoL> Create an instance of the appropriate subclass . <EoL>
<BoL> Calculate Bode magnitude and phase data of a discrete-time system . <EoL>
<BoL> Calculate the frequency response of a discrete-time system . <EoL>
<BoL> Return the impulse response of the discrete-time ` dlti ` system . See ` dimpulse ` for details . <EoL>
<BoL> Return the response of the discrete-time system to input ` u ` . See ` dlsim ` for details . <EoL>
<BoL> Return the step response of the discrete-time ` dlti ` system . See ` dstep ` for details . <EoL>
<BoL> Step response of discrete-time system . <EoL>
<BoL> Elliptic ( Cauer ) digital and analog filter design . <EoL>
<BoL> Return ( z , p , k ) of Nth-order elliptic analog lowpass filter . <EoL>
<BoL> Elliptic ( Cauer ) filter order selection . <EoL>
<BoL> Given a function ` f ` , its first derivative ` fp ` , and a set of initial guesses ` x0 ` , simultaneously find the roots of the polynomial using the Aberth-Ehrlich method . <EoL>
<BoL> Aligns the shapes of multiple numerators . <EoL>
<BoL> Return the coefficients of Bessel polynomial of degree ` n ` <EoL>
<BoL> Find zeros of ordinary Bessel polynomial of order ` N ` , by root-finding of modified Bessel function of the second kind <EoL>
<BoL> Return approximate zero locations of Bessel polynomials y_n ( x ) for order ` n ` using polynomial fit ( Campos-Calderon 2011 ) <EoL>
<BoL> Sort into pairs of complex conjugates . <EoL>
<BoL> Split into complex and real parts , combining conjugate pairs . <EoL>
<BoL> Design notch or peak digital filter . <EoL>
<BoL> Return the factorial of ` x ` to the ` n ` falling . <EoL>
<BoL> Check if input is of a scalar integer type ( so `` 5 `` and `` array ( 5 ) `` will pass , while `` 5.0 `` and `` array ( [ 5 ] ) `` will fail . <EoL>
<BoL> Get the next closest real or complex element based on distance <EoL>
<BoL> Numerically find frequency shift to apply to delay-normalized filter such that -3 dB point is at 1 rad/sec.Gain of filterWhen gain = -3 dB , return 0 <EoL>
<BoL> Return relative degree of transfer function from zeros and poles <EoL>
<BoL> Helper to validate a SOS input <EoL>
<BoL> Find array of frequencies for computing the response of an analog filter . <EoL>
<BoL> Compute frequency response of analog filter . <EoL>
<BoL> Compute frequency response of analog filter . <EoL>
<BoL> Compute the frequency response of a digital filter . <EoL>
<BoL> Compute the frequency response of a digital filter in ZPK form . <EoL>
<BoL> Compute the group delay of a digital filter . <EoL>
<BoL> Design second-order IIR notch digital filter . <EoL>
<BoL> Design second-order IIR peak ( resonant ) digital filter . <EoL>
<BoL> Transform a lowpass filter prototype to a bandpass filter . <EoL>
<BoL> Transform a lowpass filter prototype to a bandpass filter . <EoL>
<BoL> Transform a lowpass filter prototype to a bandstop filter . <EoL>
<BoL> Transform a lowpass filter prototype to a bandstop filter . <EoL>
<BoL> Transform a lowpass filter prototype to a highpass filter . <EoL>
<BoL> Transform a lowpass filter prototype to a highpass filter . <EoL>
<BoL> Transform a lowpass filter prototype to a different frequency . <EoL>
<BoL> Transform a lowpass filter prototype to a different frequency . <EoL>
<BoL> Normalize numerator/denominator of a continuous-time transfer function . <EoL>
<BoL> Return a single transfer function from a series of second-order sections <EoL>
<BoL> Return zeros , poles , and gain of a series of second-order sections <EoL>
<BoL> Compute the frequency response of a digital filter in SOS format . <EoL>
<BoL> Return second-order sections from transfer function representation <EoL>
<BoL> Return zero , pole , gain ( z , p , k ) representation from a numerator , denominator representation of a linear filter . <EoL>
<BoL> Return second-order sections from zeros , poles , and gain of a system <EoL>
<BoL> Return polynomial transfer function representation from zeros and poles <EoL>
<BoL> Compute the modified 1D discrete Hilbert transform <EoL>
<BoL> Utility for replacing the argument 'nyq ' ( with default 1 ) with 'fs ' . <EoL>
<BoL> Compute the attenuation of a Kaiser FIR filter . <EoL>
<BoL> Compute the Kaiser parameter ` beta ` , given the attenuation ` a ` . <EoL>
<BoL> Determine the filter window parameters for the Kaiser window method . <EoL>
<BoL> Calculate the frequency response of a continuous-time system . <EoL>
<BoL> Return a window . <EoL>
<BoL> Compute the analytic signal , using the Hilbert transform . <EoL>
<BoL> Compute the ' 2-D ' analytic signal of ` x ` <EoL>
<BoL> Impulse response of continuous-time system . <EoL>
<BoL> Impulse response of a single-input , continuous-time linear system . <EoL>
<BoL> Compute b ( s ) and a ( s ) from partial fraction expansion . <EoL>
<BoL> Compute b ( z ) and a ( z ) from partial fraction expansion . <EoL>
<BoL> Filter data along one-dimension with an IIR or FIR filter . <EoL>
<BoL> Construct initial conditions for lfilter for step response steady-state . <EoL>
<BoL> Construct initial conditions for lfilter given input and output vectors . <EoL>
<BoL> Simulate output of a continuous-time linear system . <EoL>
<BoL> Simulate output of a continuous-time linear system , by using the ODE solver ` scipy.integrate.odeint ` .The vector field of the linear system.The vector field of the linear system . <EoL>
<BoL> Initialize the ` lti ` baseclass . <EoL>
<BoL> Create an instance of the appropriate subclass . <EoL>
<BoL> Calculate Bode magnitude and phase data of a continuous-time system . <EoL>
<BoL> Calculate the frequency response of a continuous-time system . <EoL>
<BoL> Return the impulse response of a continuous-time system . See ` impulse ` for details . <EoL>
<BoL> Return the response of a continuous-time system to input ` U ` . See ` lsim ` for details . <EoL>
<BoL> Return the step response of a continuous-time system . See ` step ` for details . <EoL>
<BoL> Return a discretized version of the current system . <EoL>
<BoL> State-space to transfer function . <EoL>
<BoL> State-space representation to zero-pole-gain representation . <EoL>
<BoL> Transfer function to state-space representation . <EoL>
<BoL> Zero-pole-gain representation to state-space representation <EoL>
<BoL> Initialize the ` lti ` baseclass . <EoL>
<BoL> Create a new object , do n't allow direct instances . <EoL>
<BoL> Returns the discretized ` StateSpace ` system . <EoL>
<BoL> Returns the discretized ` TransferFunction ` system . <EoL>
<BoL> Returns the discretized ` ZerosPolesGain ` system . <EoL>
<BoL> Algorithm `` KNV0 '' Kautsky et Al . Robust pole assignment in linear state feedback , Int journal of Control 1985 , vol 41 p 1129- > 1155 https : //la.epfl.ch/files/content/sites/la/files/ users/105941/public/KautskyNicholsDooren <EoL>
<BoL> Loop over all poles one by one and apply KNV method 0 algorithm <EoL>
<BoL> Applies algorithm from YT section 6.2 page 20 related to complex pairs <EoL>
<BoL> Algorithm `` YT '' Tits , Yang . Globally Convergent Algorithms for Robust Pole Assignment by State Feedback https : //hdl.handle.net/1903/5598 The poles P have to be sorted accordingly to section 6.2 page 20 <EoL>
<BoL> Applies algorithm from YT section 6.1 page 19 related to real pairs <EoL>
<BoL> Cast array to dtype of other array , while avoiding ComplexWarning . <EoL>
<BoL> Compute a reasonable set of time samples for the response time . <EoL>
<BoL> Check we have complex conjugates pairs and reorder P according to YT , ie real_poles , complex_i , conjugate complex_i , ... . The lexicographic sort on the complex poles is added to help the user to compare sets of poles . <EoL>
<BoL> Check the poles come in complex conjugage pairs Check shapes of A , B and poles are compatible . Check the method chosen is compatible with provided poles Return update method to use and ordered poles <EoL>
<BoL> Compute K such that eigenvalues ( A - dot ( B , K ) ) =poles . <EoL>
<BoL> Step response of continuous-time system . <EoL>
<BoL> Step response of continuous-time system . <EoL>
<BoL> Perform a median filter on an N-dimensional array . <EoL>
<BoL> Median filter a 2-dimensional array . <EoL>
<BoL> Complex Morlet wavelet . <EoL>
<BoL> Perform an order filter on an N-dimensional array . <EoL>
<BoL> Return high-pass qmf filter from low-pass <EoL>
<BoL> Resample ` x ` to ` num ` samples using Fourier method along the given axis . <EoL>
<BoL> Resample ` x ` along the given axis using polyphase filtering . <EoL>
<BoL> Compute partial-fraction expansion of b ( s ) / a ( s ) . <EoL>
<BoL> Compute partial-fraction expansion of b ( z ) / a ( z ) . <EoL>
<BoL> Return a periodic sawtooth or triangle waveform . <EoL>
<BoL> See if using ` fftconvolve ` or ` _correlateND ` is faster . The boolean value returned depends on the sizes and shapes of the input values . <EoL>
<BoL> Forward-backward IIR filter that uses Gustafsson 's method . <EoL>
<BoL> If in 'valid ' mode , returns whether or not the input arrays need to be swapped depending on whether ` shape1 ` is at least as large as ` shape2 ` in every dimension . <EoL>
<BoL> See if numpy supports convolution of ` volume ` and ` kernel ` ( i.e . <EoL>
<BoL> See if a list of arrays are all numeric . <EoL>
<BoL> Product of a list of numbers . Faster than np.prod for short lists like array shapes . <EoL>
<BoL> Reverse array ` x ` in all dimensions and perform the complex conjugate <EoL>
<BoL> Returns the time the statement/function took , in seconds . <EoL>
<BoL> Helper to validate padding for filtfilt <EoL>
<BoL> Filter data along one dimension using cascaded second-order sections . <EoL>
<BoL> Construct initial conditions for sosfilt for step response steady-state . <EoL>
<BoL> A forward-backward digital filter using cascaded second-order sections . <EoL>
<BoL> Determine unique roots and their multiplicities from a list of roots . <EoL>
<BoL> Determine the vector strength of the events corresponding to the given period . <EoL>
<BoL> Perform a Wiener filter on an N-dimensional array . <EoL>
<BoL> Calculate windowed FFT , for internal use by scipy.signal._spectral_helper <EoL>
<BoL> Returns the bias of the median of a set of periodograms relative to the mean . <EoL>
<BoL> Parses window and nperseg arguments for spectrogram and _spectral_helper . This is a helper function , not meant to be called externally . <EoL>
<BoL> Return a periodic square-wave waveform . <EoL>
<BoL> Frequency-swept cosine generator , with a time-dependent frequency . <EoL>
<BoL> Unit impulse signal ( discrete delta function ) or unit basis vector . <EoL>
<BoL> Calculate the phase used by ` chirp ` to generate its output . <EoL>
<BoL> Calculate the phase used by sweep_poly to generate its output . <EoL>
<BoL> Return a modified Bartlett-Hann window . <EoL>
<BoL> Return a Bartlett window . <EoL>
<BoL> Return a Blackman window . <EoL>
<BoL> Return a minimum 4-term Blackman-Harris window . <EoL>
<BoL> Return a Bohman window . <EoL>
<BoL> Return a boxcar or rectangular window . <EoL>
<BoL> Return a Dolph-Chebyshev window . <EoL>
<BoL> Return a window with a simple cosine shape . <EoL>
<BoL> Return an exponential ( or Poisson ) window . <EoL>
<BoL> Return a flat top window . <EoL>
<BoL> Return a Gaussian window . <EoL>
<BoL> Generic weighted sum of cosine terms window <EoL>
<BoL> Return a window with a generalized Gaussian shape . <EoL>
<BoL> Return a generalized Hamming window . <EoL>
<BoL> Return a Hamming window . <EoL>
<BoL> Return a Hann window . <EoL>
<BoL> Return a Kaiser window . <EoL>
<BoL> Return a minimum 4-term Blackman-Harris window according to Nuttall . <EoL>
<BoL> Return a Parzen window . <EoL>
<BoL> Return a digital Slepian ( DPSS ) window . <EoL>
<BoL> Return a triangular window . <EoL>
<BoL> Return a Tukey window , also known as a tapered cosine window . <EoL>
<BoL> Extend window by 1 sample if needed for DFT-even symmetry <EoL>
<BoL> Compute the autocorrelation of a real array and crop the result . <EoL>
<BoL> Handle small or incorrect window lengths <EoL>
<BoL> Truncate window by 1 sample if needed for DFT-even symmetry <EoL>
<BoL> Load a sparse matrix from a file using `` .npz `` format . <EoL>
<BoL> Save a sparse matrix to a file using `` .npz `` format . <EoL>
<BoL> Unpack keyword arguments for reshape function . <EoL>
<BoL> Imitate numpy.matrix handling of shape arguments <EoL>
<BoL> Mimic numpy 's casting for np.sum <EoL>
<BoL> Is x appropriate as an index into a sparse matrix ? Returns True if it can be cast safely to a machine int . <EoL>
<BoL> Is x either a scalar , an array scalar , or a 0-dim array ? <EoL>
<BoL> Build a block diagonal sparse matrix from provided matrices . <EoL>
<BoL> Apply the binary operation fn to two sparse matrices . <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , but with different data . <EoL>
<BoL> check whether the matrix format is valid <EoL>
<BoL> Remove zero elements in-place . <EoL>
<BoL> Remove empty space after all non-zero elements . <EoL>
<BoL> Sort the indices of this matrix *in place* <EoL>
<BoL> Eliminate duplicate matrix entries by adding them together <EoL>
<BoL> Convert this matrix into Block Sparse Row Format . <EoL>
<BoL> Convert this matrix to COOrdinate format . <EoL>
<BoL> Based on input ( integer ) arrays ` a ` , determine a suitable index data type that can hold the data in the arrays . <EoL>
<BoL> Function used to simplify argument processing . <EoL>
<BoL> Is x a valid 2-tuple of dimensions ? <EoL>
<BoL> Is x of a bsr_matrix type ? <EoL>
<BoL> Returns the nearest supported sparse dtype for the combination of one or more types . <EoL>
<BoL> Returns a mask of the same shape as self.data , where mask [ i , j ] is True when data [ i , j ] corresponds to a stored element . <EoL>
<BoL> Returns a matrix with the same sparsity structure as self , but with different data . By default the structure arrays are copied . <EoL>
<BoL> Down-cast index array to np.intp dtype if it is of a larger dtype . <EoL>
<BoL> Same as ` upcast ` but taking dtype.char as input ( faster ) . <EoL>
<BoL> Stacking fast path for CSR/CSC matrices ( i ) vstack for CSR , ( ii ) hstack for CSC . <EoL>
<BoL> Construct a sparse matrix from diagonals . <EoL>
<BoL> Stack sparse matrices horizontally ( column wise ) <EoL>
<BoL> Identity matrix in sparse format <EoL>
<BoL> kronecker product of sparse matrices A and B <EoL>
<BoL> kronecker sum of sparse matrices A and B <EoL>
<BoL> Generate a sparse matrix of the given shape and density with uniformly distributed values . <EoL>
<BoL> Return a sparse matrix from diagonals . <EoL>
<BoL> Stack sparse matrices vertically ( row wise ) <EoL>
<BoL> Is x of coo_matrix type ? <EoL>
<BoL> Is x of csc_matrix type ? <EoL>
<BoL> Return the Laplacian matrix of a directed graph . <EoL>
<BoL> Is x of csr_matrix type ? <EoL>
<BoL> Is x of lil_matrix type ? <EoL>
<BoL> Is x of dia_matrix type ? <EoL>
<BoL> Product of a list of numbers ; ~40x faster vs np.prod for Python tuples <EoL>
<BoL> Is x of dok_matrix type ? <EoL>
<BoL> Determine data type for binary operation between an array of type ` dtype ` and a scalar . <EoL>
<BoL> Return the lower triangular portion of a matrix in sparse format <EoL>
<BoL> Return the upper triangular portion of a matrix in sparse format <EoL>
<BoL> Convert index and data arrays to form suitable for passing to the Cython fancy getset routines . <EoL>
<BoL> Provide the operator and some norm-related information . <EoL>
<BoL> Lazily compute max ( d ( p ) , d ( p+1 ) ) . <EoL>
<BoL> Lazily estimate d_p ( A ) ~= || A^p ||^ ( 1/p ) where ||.|| is the 1-norm . <EoL>
<BoL> Compute the exact 1-norm . <EoL>
<BoL> Set the scale parameter . <EoL>
<BoL> A helper function for computing bounds . <EoL>
<BoL> Compute the largest positive integer p such that p* ( p-1 ) < = m_max + 1 . <EoL>
<BoL> A helper function for the _expm_multiply_* functions . <EoL>
<BoL> A helper function , for the case q < = s . <EoL>
<BoL> A helper function , for the case q > s and q % s == 0 . <EoL>
<BoL> A helper function , for the case q > s and q % s > 0 . <EoL>
<BoL> Compute the action of the matrix exponential at a single time point . <EoL>
<BoL> A helper function . <EoL>
<BoL> A helper function for the _expm_multiply_* functions . <EoL>
<BoL> Compute the action of the matrix exponential of A on B . <EoL>
<BoL> Norm of a sparse matrix <EoL>
<BoL> This is Algorithm 2.2 . <EoL>
<BoL> Decorator for an elementwise function , to apply it blockwise along first dimension , to avoid excessive memory usage in temporaries . <EoL>
<BoL> Compute a lower bound of the 1-norm of a sparse matrix . <EoL>
<BoL> Compute a lower bound of the 1-norm of a sparse matrix . <EoL>
<BoL> Choose number of lanczos vectors based on target number of singular/eigen values and vectors to compute , k . <EoL>
<BoL> gmres with looser termination condition . <EoL>
<BoL> Return a function for solving a sparse linear system , with A pre-factorized . <EoL>
<BoL> Get umfpack family string given the sparse matrix dtype . <EoL>
<BoL> Solve the equation ` A x = b ` for ` x ` , assuming A is a triangular matrix . <EoL>
<BoL> Select default sparse direct solver to be used . <EoL>
<BoL> Compute the matrix exponential using Pade approximation . <EoL>
<BoL> Compute the inverse of a sparse matrix <EoL>
<BoL> Make a linear system Ax=b <EoL>
<BoL> Parse arguments for absolute tolerance in termination condition . <EoL>
<BoL> Successful termination condition for the solvers . <EoL>
<BoL> Initialize the object . <EoL>
<BoL> A helper function for expm_2009 . <EoL>
<BoL> Equation ( 10.42 ) of Functions of Matrices : Theory and Computation . <EoL>
<BoL> A helper function for expm_2009 . <EoL>
<BoL> Compute the 1-norm of a non-negative integer power of a non-negative matrix . <EoL>
<BoL> Stably evaluate sinch . <EoL>
<BoL> A matrix product that knows about sparse and structured matrices . <EoL>
<BoL> A helper function for expm_2009 . <EoL>
<BoL> Count how many nearby pairs can be formed . <EoL>
<BoL> Query the kd-tree for nearest neighbors <EoL>
<BoL> Find all points within distance r of point ( s ) x . <EoL>
<BoL> Find all pairs of points whose distance is at most r <EoL>
<BoL> Find all pairs of points within a distance . <EoL>
<BoL> Compute a sparse distance matrix <EoL>
<BoL> Construct a hyperrectangle . <EoL>
<BoL> Return the maximum distance between input and points in the hyperrectangle . <EoL>
<BoL> Compute the maximum distance between points in the two hyperrectangles . <EoL>
<BoL> Return the minimum distance between input and points in the hyperrectangle . <EoL>
<BoL> Compute the minimum distance between points in the two hyperrectangles . <EoL>
<BoL> Produce two hyperrectangles by splitting . <EoL>
<BoL> Total volume . <EoL>
<BoL> Initializes the object and starts the computation of the Voronoi diagram . <EoL>
<BoL> Calculates the Voronoi vertices and regions of the generators stored in self.points . The vertices will be stored in self.vertices and the regions in self.regions . <EoL>
<BoL> For each region in regions , it sorts the indices of the Voronoi vertices such that the resulting points are in a clockwise or counterclockwise order around the generator point . <EoL>
<BoL> Plot the given convex hull diagram in 2-D <EoL>
<BoL> Plot the given Delaunay triangulation in 2-D <EoL>
<BoL> Plot the given Voronoi diagram in 2-D <EoL>
<BoL> Procrustes analysis , a similarity test for two data sets . <EoL>
<BoL> Calculates the cirumcenters of the circumspheres of tetrahedrons . <EoL>
<BoL> Projects the elements of points onto the sphere defined by center and radius . <EoL>
<BoL> Determines distance of generators from theoretical sphere surface . <EoL>
<BoL> Convert legacy positional arguments to keyword arguments for pdist/cdist . <EoL>
<BoL> Copy the array if its base points to a parent array . <EoL>
<BoL> Compute the Bray-Curtis distance between two 1-D arrays . <EoL>
<BoL> Compute the Canberra distance between two 1-D arrays . <EoL>
<BoL> Compute the Chebyshev distance . <EoL>
<BoL> Compute the City Block ( Manhattan ) distance . <EoL>
<BoL> Compute the correlation distance between two 1-D arrays . <EoL>
<BoL> Compute the Cosine distance between 1-D arrays . <EoL>
<BoL> Compute the Dice dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the directed Hausdorff distance between two N-D arrays . <EoL>
<BoL> Computes the Euclidean distance between two 1-D arrays . <EoL>
<BoL> Compute the Hamming distance between two 1-D arrays . <EoL>
<BoL> Compute the Jaccard-Needham dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Jensen-Shannon distance ( metric ) between two 1-D probability arrays . This is the square root of the Jensen-Shannon divergence . <EoL>
<BoL> Compute the Kulsinski dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Mahalanobis distance between two 1-D arrays . <EoL>
<BoL> Compute the Minkowski distance between two 1-D arrays . <EoL>
<BoL> Return the number of original observations that correspond to a square , redundant distance matrix . <EoL>
<BoL> Return the number of original observations that correspond to a condensed distance matrix . <EoL>
<BoL> Compute the Rogers-Tanimoto dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Russell-Rao dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Return the standardized Euclidean distance between two 1-D arrays . <EoL>
<BoL> Compute the Sokal-Michener dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the Sokal-Sneath dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the squared Euclidean distance between two 1-D arrays . <EoL>
<BoL> Compute the weighted Minkowski distance between two 1-D arrays . <EoL>
<BoL> Compute the Yule dissimilarity between two boolean 1-D arrays . <EoL>
<BoL> Compute the distance matrix . <EoL>
<BoL> Compute the L**p distance between two arrays . <EoL>
<BoL> Compute the p-th power of the L**p distance between two arrays . <EoL>
<BoL> Extract rotation ( s ) at given index ( es ) from object . <EoL>
<BoL> Number of rotations contained in this object . <EoL>
<BoL> Compose this rotation with the other . <EoL>
<BoL> Apply this rotation to a set of vectors . <EoL>
<BoL> Represent as direction cosine matrices . <EoL>
<BoL> Represent as Euler angles . <EoL>
<BoL> Represent as quaternions . <EoL>
<BoL> Represent as rotation vectors . <EoL>
<BoL> Initialize from direction cosine matrices . <EoL>
<BoL> Initialize from Euler angles . <EoL>
<BoL> Initialize from quaternions . <EoL>
<BoL> Initialize from rotation vectors . <EoL>
<BoL> Invert this rotation . <EoL>
<BoL> Estimate a rotation to match two sets of vectors . <EoL>
<BoL> Generate uniformly distributed rotations . <EoL>
<BoL> Interpolate rotations . <EoL>
<BoL> Ellipsoidal harmonic functions E^p_n ( l ) <EoL>
<BoL> Ellipsoidal harmonic functions F^p_n ( l ) <EoL>
<BoL> Ellipsoidal harmonic normalization constants gamma^p_n <EoL>
<BoL> Softmax function <EoL>
<BoL> Modified spherical Bessel function of the first kind or its derivative . <EoL>
<BoL> Spherical Bessel function of the first kind or its derivative . <EoL>
<BoL> Modified spherical Bessel function of the second kind or its derivative . <EoL>
<BoL> Spherical Bessel function of the second kind or its derivative . <EoL>
<BoL> Compute ` nt ` zeros and values of the Airy function Ai and its derivative . <EoL>
<BoL> Compute the generalized ( associated ) Laguerre polynomial of degree n and order k . <EoL>
<BoL> Product of a range of numbers . <EoL>
<BoL> Compute nt zeros of the Kelvin function bei ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function bei ' ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function ber ( x ) . <EoL>
<BoL> Bernoulli numbers B0..Bn ( inclusive ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function ber ' ( x ) . <EoL>
<BoL> Compute ` nt ` zeros and values of the Airy function Bi and its derivative . <EoL>
<BoL> Associated Legendre function of the first kind for complex arguments . <EoL>
<BoL> Periodic sinc function , also called the Dirichlet function . <EoL>
<BoL> Complete elliptic integral of the first kind . <EoL>
<BoL> Compute the first nt zero in the first quadrant , ordered by absolute value . <EoL>
<BoL> Inverse of the complementary error function erfc . <EoL>
<BoL> Inverse of the error function erf . <EoL>
<BoL> Euler numbers E ( 0 ) , E ( 1 ) , ... , E ( n ) . <EoL>
<BoL> Compute nt complex zeros of sine and cosine Fresnel integrals S ( z ) and C ( z ) . <EoL>
<BoL> Compute nt complex zeros of cosine Fresnel integral C ( z ) . <EoL>
<BoL> Compute nt complex zeros of sine Fresnel integral S ( z ) . <EoL>
<BoL> Compute nth derivative of Hankel function H1v ( z ) with respect to ` z ` . <EoL>
<BoL> Compute nth derivative of Hankel function H2v ( z ) with respect to ` z ` . <EoL>
<BoL> Compute nth derivative of modified Bessel function Iv ( z ) with respect to ` z ` . <EoL>
<BoL> Compute zeros of integer-order Bessel function Jn ( x ) . <EoL>
<BoL> Compute zeros of integer-order Bessel functions Jn and Jn ' . <EoL>
<BoL> Compute zeros of integer-order Bessel function derivative Jn ' ( x ) . <EoL>
<BoL> Compute nt zeros of Bessel functions Jn ( x ) , Jn ' ( x ) , Yn ( x ) , and Yn ' ( x ) . <EoL>
<BoL> Compute nth derivative of Bessel function Jv ( z ) with respect to ` z ` . <EoL>
<BoL> Compute nt zeros of the Kelvin function kei ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function kei ' ( x ) . <EoL>
<BoL> Compute nt zeros of all Kelvin functions . <EoL>
<BoL> Compute nt zeros of the Kelvin function ker ( x ) . <EoL>
<BoL> Compute nt zeros of the Kelvin function ker ' ( x ) . <EoL>
<BoL> Compute nth derivative of real-order modified Bessel function Kv ( z ) <EoL>
<BoL> Jahnke-Emden Lambda function , Lambdav ( x ) . <EoL>
<BoL> Sequence of associated Legendre functions of the first kind . <EoL>
<BoL> Legendre function of the first kind . <EoL>
<BoL> Sequence of associated Legendre functions of the second kind . <EoL>
<BoL> Legendre function of the second kind . <EoL>
<BoL> Fourier coefficients for even Mathieu and modified Mathieu functions . <EoL>
<BoL> Fourier coefficients for even Mathieu and modified Mathieu functions . <EoL>
<BoL> Characteristic values for oblate spheroidal wave functions . <EoL>
<BoL> Parabolic cylinder functions Dn ( z ) and derivatives . <EoL>
<BoL> Parabolic cylinder functions Dv ( x ) and derivatives . <EoL>
<BoL> Parabolic cylinder functions Vv ( x ) and derivatives . <EoL>
<BoL> Permutations of N things taken k at a time , i.e. , k-permutations of N . <EoL>
<BoL> Polygamma function n . <EoL>
<BoL> Characteristic values for prolate spheroidal wave functions . <EoL>
<BoL> Compute Ricatti-Bessel function of the first kind and its derivative . <EoL>
<BoL> Compute Ricatti-Bessel function of the second kind and its derivative . <EoL>
<BoL> Compute nt zeros of Bessel function Y0 ( z ) , and derivative at each zero . <EoL>
<BoL> Compute nt zeros of Bessel function Y1 ( z ) , and derivative at each zero . <EoL>
<BoL> Compute nt zeros of Bessel derivative Y1 ' ( z ) , and value at each zero . <EoL>
<BoL> Compute zeros of integer-order Bessel function Yn ( x ) . <EoL>
<BoL> Compute zeros of integer-order Bessel function derivative Yn ' ( x ) . <EoL>
<BoL> Compute nth derivative of Bessel function Yv ( z ) with respect to ` z ` . <EoL>
<BoL> Riemann or Hurwitz zeta function . <EoL>
<BoL> Gauss-Chebyshev ( first kind ) quadrature . <EoL>
<BoL> Gauss-Gegenbauer quadrature . <EoL>
<BoL> Chebyshev polynomial of the first kind on : math : ` [ -2 , 2 ] ` . <EoL>
<BoL> Chebyshev polynomial of the second kind on : math : ` [ -2 , 2 ] ` . <EoL>
<BoL> Chebyshev polynomial of the first kind . <EoL>
<BoL> Chebyshev polynomial of the second kind . <EoL>
<BoL> Gegenbauer ( ultraspherical ) polynomial . <EoL>
<BoL> Generalized ( associated ) Laguerre polynomial . <EoL>
<BoL> Gauss-Hermite ( physicst 's ) quadrature . <EoL>
<BoL> Gauss-Hermite ( statistician 's ) quadrature . <EoL>
<BoL> Physicist 's Hermite polynomial . <EoL>
<BoL> Normalized ( probabilist 's ) Hermite polynomial . <EoL>
<BoL> Gauss-Jacobi quadrature . <EoL>
<BoL> Jacobi polynomial . <EoL>
<BoL> Gauss-Jacobi ( shifted ) quadrature . <EoL>
<BoL> Gauss-Laguerre quadrature . <EoL>
<BoL> Gauss-generalized Laguerre quadrature . <EoL>
<BoL> Laguerre polynomial . <EoL>
<BoL> lambertw ( z , k=0 , tol=1e-8 ) <EoL>
<BoL> Legendre polynomial . <EoL>
<BoL> Returns the log of multivariate gamma , also sometimes called the generalized gamma . <EoL>
<BoL> Helper function for Tricomi initial guesses <EoL>
<BoL> [ x , w ] = gen_roots_and_weights ( n , an_func , sqrt_bn_func , mu ) <EoL>
<BoL> Initial guesses for the Hermite roots <EoL>
<BoL> Tricomi initial guesses <EoL>
<BoL> Gatteschi initial guesses <EoL>
<BoL> Newton iteration for polishing the asymptotic approximation to the zeros of the Hermite polynomials . <EoL>
<BoL> Asymptotic series expansion of parabolic cylinder function <EoL>
<BoL> Gauss-Hermite ( physicst 's ) quadrature for large n . <EoL>
<BoL> Gauss-Legendre quadrature . <EoL>
<BoL> Gauss-Legendre ( shifted ) quadrature . <EoL>
<BoL> Gauss-Chebyshev ( second kind ) quadrature . <EoL>
<BoL> Gauss-Chebyshev ( first kind ) quadrature . <EoL>
<BoL> Gauss-Chebyshev ( second kind ) quadrature . <EoL>
<BoL> Gauss-Chebyshev ( first kind , shifted ) quadrature . <EoL>
<BoL> Gauss-Chebyshev ( second kind , shifted ) quadrature . <EoL>
<BoL> Shifted Chebyshev polynomial of the first kind . <EoL>
<BoL> Shifted Chebyshev polynomial of the second kind . <EoL>
<BoL> Shifted Jacobi polynomial . <EoL>
<BoL> Shifted Legendre polynomial . <EoL>
<BoL> Utility function for the argus distribution used in the CDF and norm of the Argus Funktion <EoL>
<BoL> kurtosis is fourth central moment / variance**2 - 3 <EoL>
<BoL> skew is third central moment / variance** ( 1.5 ) <EoL>
<BoL> Kurtosis of the Tukey Lambda distribution . <EoL>
<BoL> Variance of the Tukey Lambda distribution . <EoL>
<BoL> Default check for correct values on args and keywords . <EoL>
<BoL> Construct the instance docstring with string substitutions . <EoL>
<BoL> Estimate loc and scale parameters from data accounting for support . <EoL>
<BoL> Return penalized negative loglikelihood function , i.e. , - sum ( log pdf ( x , theta ) , axis=0 ) + penalty where theta are the parameters ( including loc and scale ) <EoL>
<BoL> Return the current version of _ctor_param , possibly updated by user . <EoL>
<BoL> Cumulative distribution function of the given RV . <EoL>
<BoL> Differential entropy of the RV . <EoL>
<BoL> Return MLEs for shape ( if applicable ) , location , and scale parameters from data . <EoL>
<BoL> Estimate loc and scale parameters from data using 1st and 2nd moments . <EoL>
<BoL> Freeze the distribution for the given arguments . <EoL>
<BoL> Confidence interval with equal areas around the median . <EoL>
<BoL> Inverse survival function ( inverse of ` sf ` ) at q of the given RV . <EoL>
<BoL> Log of the cumulative distribution function at x of the given RV . <EoL>
<BoL> Log of the probability density function at x of the given RV . <EoL>
<BoL> Log of the survival function of the given RV . <EoL>
<BoL> Mean of the distribution . <EoL>
<BoL> Median of the distribution . <EoL>
<BoL> n-th order non-central moment of distribution . <EoL>
<BoL> Return negative loglikelihood function . <EoL>
<BoL> Probability density function at x of the given RV . <EoL>
<BoL> Percent point function ( inverse of ` cdf ` ) at q of the given RV . <EoL>
<BoL> Random variates of given type . <EoL>
<BoL> Survival function ( 1 - ` cdf ` ) at x of the given RV . <EoL>
<BoL> Some statistics of the given RV . <EoL>
<BoL> Standard deviation of the distribution . <EoL>
<BoL> Variance of the distribution . <EoL>
<BoL> Return CDF of the argus function <EoL>
<BoL> Return PDF of the argus function <EoL>
<BoL> Return survival function of the argus function <EoL>
<BoL> Shape parameter bounds are m > 1 and beta > 0 . <EoL>
<BoL> Return CDF of the crystalball function <EoL>
<BoL> Return the log of the PDF of the crystalball function . <EoL>
<BoL> Returns the n-th non-central moment of the crystalball function.Returns n-th moment . Defined only if n+1 < m Function can not broadcast due to the loop over n <EoL>
<BoL> Return PDF of the crystalball function . <EoL>
<BoL> Collect names of statistical distributions and their generators . <EoL>
<BoL> cdf = ( 1.0 - h* ( 1.0 - k*x ) ** ( 1.0/k ) ) ** ( 1.0/h ) logcdf = ... cdf = np.exp ( - ( 1.0 - k*x ) ** ( 1.0/k ) ) logcdf = ... cdf = ( 1.0 - h*np.exp ( -x ) ) ** ( 1.0/h ) logcdf = ... cdf = np.exp ( -np.exp ( -x ) ) logcdf = ... <EoL>
<BoL> pdf = ( 1.0 - k*x ) ** ( 1.0/k - 1.0 ) * ( 1.0 - h* ( 1.0 - k*x ) ** ( 1.0/k ) ) ** ( 1.0/h-1.0 ) logpdf = ... pdf = ( 1.0 - k*x ) ** ( 1.0/k - 1.0 ) *np.exp ( - ( 1.0 - k*x ) ** ( 1.0/k ) ) logpdf = ... pdf = np.exp ( -x ) * ( 1.0 - h*np.exp ( -x ) ) ** ( 1.0/h - 1.0 ) logpdf = ... pdf = np.exp ( -x-np.exp ( -x ) ) logpdf = ... <EoL>
<BoL> ppf = -np.log ( ( 1.0 - ( q**h ) ) /h ) <EoL>
<BoL> Calculate cdf using Zolotarev 's methods as detailed in [ BS ] . <EoL>
<BoL> Calculates pdf from cf using fft . Using region around 0 with N=2**q points separated by distance h. As suggested by [ MS ] . <EoL>
<BoL> Calculate pdf using Zolotarev 's methods as detailed in [ BS ] . <EoL>
<BoL> Create a new distribution using the given histogram <EoL>
<BoL> CDF calculated from the histogram <EoL>
<BoL> Compute entropy of distribution <EoL>
<BoL> Compute the n-th non-central moment . <EoL>
<BoL> PDF of the histogram <EoL>
<BoL> Percentile function calculated from the histogram <EoL>
<BoL> Set the histogram as additional constructor argument <EoL>
<BoL> Maximum likelihood estimate for the location and scale parameters . <EoL>
<BoL> Return the current version of _ctor_param , possibly updated by user . <EoL>
<BoL> Cumulative distribution function of the given RV . <EoL>
<BoL> Inverse survival function ( inverse of ` sf ` ) at q of the given RV . <EoL>
<BoL> Log of the cumulative distribution function at k of the given RV . <EoL>
<BoL> Log of the probability mass function at k of the given RV . <EoL>
<BoL> Log of the survival function of the given RV . <EoL>
<BoL> Probability mass function at k of the given RV . <EoL>
<BoL> Percent point function ( inverse of ` cdf ` ) at q of the given RV . <EoL>
<BoL> Random variates of given type . <EoL>
<BoL> Survival function ( 1 - ` cdf ` ) at k of the given RV . <EoL>
<BoL> More precise calculation than log ( sf ) <EoL>
<BoL> More precise calculation , 1 - cdf does n't cut it . <EoL>
<BoL> An array of *size* random integers > = `` low `` and < `` high `` . <EoL>
<BoL> Non-central moment of discrete distribution . <EoL>
<BoL> Iterate from x0 to x1 in chunks of chunksize and steps inc . <EoL>
<BoL> Return the sequence of ravel ( args [ i ] ) where ravel ( condition ) is True in 1D . <EoL>
<BoL> Invert the matrices a_i , using a Cholesky factorization of A , where a_i resides in the last two dimensions of a and the other indices describe the index i . <EoL>
<BoL> Determine which eigenvalues are `` small '' given the spectrum . <EoL>
<BoL> Internal helper function to compute the log of the useful quotient <EoL>
<BoL> A helper function for computing the pseudoinverse . <EoL>
<BoL> Remove single-dimensional entries from array and convert to scalar , if necessary . <EoL>
<BoL> Compute the differential entropy of the dirichlet distribution . <EoL>
<BoL> Log of the Dirichlet probability density function . <EoL>
<BoL> Compute the mean of the dirichlet distribution . <EoL>
<BoL> The Dirichlet probability density function . <EoL>
<BoL> Draw random samples from a Dirichlet distribution . <EoL>
<BoL> Compute the variance of the dirichlet distribution . <EoL>
<BoL> Create a frozen inverse Wishart distribution . <EoL>
<BoL> Create a frozen inverse Wishart distribution . <EoL>
<BoL> Compute Cholesky decomposition and determine ( log ( det ( scale ) ) . <EoL>
<BoL> Adjust quantiles array so that last axis labels the components of each data point . <EoL>
<BoL> Log of the inverse Wishart probability density function . <EoL>
<BoL> Mean of the inverse Wishart distribution <EoL>
<BoL> Mode of the inverse Wishart distribution <EoL>
<BoL> Inverse Wishart probability density function . <EoL>
<BoL> Draw random samples from an inverse Wishart distribution . <EoL>
<BoL> Variance of the inverse Wishart distribution <EoL>
<BoL> Create a frozen matrix normal distribution . <EoL>
<BoL> Create a frozen matrix normal distribution . <EoL>
<BoL> Infer dimensionality from mean or covariance matrices . <EoL>
<BoL> Adjust quantiles array so that last two axes labels the components of each data point . <EoL>
<BoL> Log of the matrix normal probability density function . <EoL>
<BoL> Matrix normal probability density function . <EoL>
<BoL> Draw random samples from a matrix normal distribution . <EoL>
<BoL> Draw random samples from a Multinomial distribution . <EoL>
<BoL> Create a frozen multinomial distribution . <EoL>
<BoL> Return : n_ , p_ , npcond . <EoL>
<BoL> Return : x_ , xcond . <EoL>
<BoL> Covariance matrix of the multinomial distribution . <EoL>
<BoL> Compute the entropy of the multinomial distribution . <EoL>
<BoL> Log of the Multinomial probability mass function . <EoL>
<BoL> Mean of the Multinomial distribution <EoL>
<BoL> Multinomial probability mass function . <EoL>
<BoL> Computes the differential entropy of the multivariate normal . <EoL>
<BoL> Create a frozen multivariate normal distribution . <EoL>
<BoL> Infer dimensionality from mean or covariance matrix , ensure that mean and covariance are full vector resp . matrix . <EoL>
<BoL> Adjust quantiles array so that last axis labels the components of each data point . <EoL>
<BoL> Compute the differential entropy of the multivariate normal . <EoL>
<BoL> Log of the multivariate normal probability density function . <EoL>
<BoL> Multivariate normal probability density function . <EoL>
<BoL> Draw random samples from a multivariate normal distribution . <EoL>
<BoL> Dimension N must be specified ; it can not be inferred . <EoL>
<BoL> Draw random samples from O ( N ) . <EoL>
<BoL> Computes a 2x2 Givens matrix to put 1 's on the diagonal . <EoL>
<BoL> Given a psd matrix m , rotate to put one 's on the diagonal , turning it into a correlation matrix . This also requires the trace equal the dimensionality . Note : modifies input matrix <EoL>
<BoL> Draw random correlation matrices <EoL>
<BoL> Create a frozen SO ( N ) distribution . <EoL>
<BoL> Create a frozen SO ( N ) distribution . <EoL>
<BoL> Dimension N must be specified ; it can not be inferred . <EoL>
<BoL> Draw random samples from SO ( N ) . <EoL>
<BoL> Dimension N must be specified ; it can not be inferred . <EoL>
<BoL> Draw random samples from U ( N ) . <EoL>
<BoL> Create a frozen Wishart distribution . <EoL>
<BoL> Compute the differential entropy of the Wishart . <EoL>
<BoL> Log of the Wishart probability density function . <EoL>
<BoL> Mean of the Wishart distribution <EoL>
<BoL> Mode of the Wishart distribution <EoL>
<BoL> Wishart probability density function . <EoL>
<BoL> Draw random samples from a Wishart distribution . <EoL>
<BoL> Variance of the Wishart distribution <EoL>
<BoL> Generate random samples from a probability density function using the ratio-of-uniforms method . <EoL>
<BoL> Calculate a linear least-squares regression for two sets of measurements . <EoL>
<BoL> Computes the Siegel estimator for a set of points ( x , y ) . <EoL>
<BoL> Computes the Theil-Sen estimator for a set of points ( x , y ) . <EoL>
<BoL> Anderson-Darling test for data coming from a particular distribution <EoL>
<BoL> The Anderson-Darling test for k-samples . <EoL>
<BoL> Perform the Ansari-Bradley test for equal scale parameters <EoL>
<BoL> Perform Bartlett 's test for equal variances <EoL>
<BoL> Bayesian confidence intervals for the mean , var , and std . <EoL>
<BoL> Perform a test that the probability of success is p . <EoL>
<BoL> Return a positive dataset transformed by a Box-Cox power transformation . <EoL>
<BoL> The boxcox log-likelihood function . <EoL>
<BoL> Compute optimal Box-Cox transform parameter for input data . <EoL>
<BoL> Compute parameters for a Box-Cox normality plot , optionally show it . <EoL>
<BoL> Chi-square test of independence of variables in a contingency table . <EoL>
<BoL> Calculate a one-way chi square test . <EoL>
<BoL> Compute the circular mean for samples in a range . <EoL>
<BoL> Compute the circular standard deviation for samples assumed to be in the range [ low to high ] . <EoL>
<BoL> Compute the circular variance for samples assumed to be in a range <EoL>
<BoL> Methods for combining the p-values of independent tests bearing upon the same hypothesis . <EoL>
<BoL> Compute the expected frequencies from a contingency table . <EoL>
<BoL> Return a list of the marginal sums of the array ` a ` . <EoL>
<BoL> Cressie-Read power divergence statistic and goodness of fit test . <EoL>
<BoL> Return a cumulative frequency histogram , using the histogram function . <EoL>
<BoL> Compute several descriptive statistics of the passed array . <EoL>
<BoL> Compute the energy distance between two 1D distributions . <EoL>
<BoL> Performs a 1-way ANOVA . <EoL>
<BoL> Find repeats and repeat counts . <EoL>
<BoL> Performs a Fisher exact test on a 2x2 contingency table.Binary search for where to begin lower/upper halves in two-sided test . <EoL>
<BoL> Perform Fligner-Killeen test for equality of variance . <EoL>
<BoL> Compute the Friedman test for repeated measurements <EoL>
<BoL> Evaluate the estimated pdf on a set of points . <EoL>
<BoL> Computes the covariance matrix for each Gaussian kernel using covariance_factor ( ) . <EoL>
<BoL> Computes the integral of a pdf over a rectangular interval . <EoL>
<BoL> Computes the integral of a 1D pdf between two bounds . <EoL>
<BoL> Multiply estimated density by a multivariate Gaussian and integrate over the whole space . <EoL>
<BoL> Computes the integral of the product of this kernel density estimate with another . <EoL>
<BoL> Evaluate the log of the estimated pdf on a provided set of points . <EoL>
<BoL> Evaluate the estimated pdf on a provided set of points . <EoL>
<BoL> Randomly sample a dataset from the estimated pdf . <EoL>
<BoL> Compute the estimator bandwidth with given method . <EoL>
<BoL> Compute the geometric mean along the specified axis . <EoL>
<BoL> Calculate the harmonic mean along the specified axis . <EoL>
<BoL> Perform the Jarque-Bera goodness of fit test on sample data . <EoL>
<BoL> Calculate Kendall 's tau , a correlation measure for ordinal data . <EoL>
<BoL> Compute the Kruskal-Wallis H-test for independent samples <EoL>
<BoL> Compute the Kolmogorov-Smirnov statistic on 2 samples . <EoL>
<BoL> Return the nth k-statistic ( 1 < =n < =4 so far ) . <EoL>
<BoL> Returns an unbiased estimator of the variance of the k-statistic . <EoL>
<BoL> Perform the Kolmogorov-Smirnov test for goodness of fit . <EoL>
<BoL> Compute the kurtosis ( Fisher or Pearson ) of a dataset . <EoL>
<BoL> Test whether a dataset has normal kurtosis . <EoL>
<BoL> Perform Levene test for equal variances . <EoL>
<BoL> Compute the Mann-Whitney rank test on samples x and y . <EoL>
<BoL> Mood 's median test . <EoL>
<BoL> Return an array of the modal ( most common ) value in the passed array . <EoL>
<BoL> Calculate the nth moment about the mean for a sample . <EoL>
<BoL> Perform Mood 's test for equal scale parameters . <EoL>
<BoL> Helper function to add axes labels and a title to stats plots <EoL>
<BoL> Compute A2akN equation 7 of Scholz and Stephens . <EoL>
<BoL> Compute A2akN equation 6 of Scholz & Stephens . <EoL>
<BoL> Approximations of uniform order statistic medians . <EoL>
<BoL> Compute parameters for a Box-Cox or Yeo-Johnson normality plot , optionally show it . See ` boxcox_normplot ` or ` yeojohnson_normplot ` for details . <EoL>
<BoL> Parse ` dist ` keyword . <EoL>
<BoL> Return x transformed by the Yeo-Johnson power transform with given parameter lmbda . <EoL>
<BoL> 'Frozen ' distributions for mean , variance , and standard deviation of data . <EoL>
<BoL> Calculate the shape parameter that maximizes the PPCC <EoL>
<BoL> Calculate and optionally plot probability plot correlation coefficient . <EoL>
<BoL> Calculate quantiles for a probability plot , and optionally show the plot . <EoL>
<BoL> Perform the Shapiro-Wilk test for normality . <EoL>
<BoL> Calculate the Wilcoxon signed-rank test . <EoL>
<BoL> Return a dataset transformed by a Yeo-Johnson power transformation . <EoL>
<BoL> The yeojohnson log-likelihood function . <EoL>
<BoL> Compute optimal Yeo-Johnson transform parameter for input data , using maximum likelihood estimation . <EoL>
<BoL> Compute parameters for a Yeo-Johnson normality plot , optionally show it . <EoL>
<BoL> Constructs a 2D array from a group of sequences . <EoL>
<BoL> Computes the Brunner-Munzel test on samples x and y <EoL>
<BoL> Compares the medians from two independent groups along the given axis . <EoL>
<BoL> Counts the number of tied values . <EoL>
<BoL> Computes several descriptive statistics of the passed array . <EoL>
<BoL> Performs a 1-way ANOVA , returning an F-value and probability given any number of groups . From Heiman , pp.394-7 . <EoL>
<BoL> Find repeats in arr and return a tuple ( repeats , repeat_count ) . <EoL>
<BoL> Friedman Chi-Square is a non-parametric , one-way within-subjects ANOVA . This function calculates the Friedman Chi-square test for repeated measures and returns the result , along with the associated probability value . <EoL>
<BoL> Returns the Harrell-Davis estimate of the median along the given axis . <EoL>
<BoL> Computes quantile estimates with the Harrell-Davis method . <EoL>
<BoL> The standard error of the Harrell-Davis quantile estimates by jackknife . <EoL>
<BoL> Returns an estimate of the lower and upper quartiles . <EoL>
<BoL> Computes a multivariate Kendall 's rank correlation tau , for seasonal data . <EoL>
<BoL> Compute the Kruskal-Wallis H-test for independent samples <EoL>
<BoL> Computes the Kolmogorov-Smirnov test on two samples . <EoL>
<BoL> Computes the kurtosis ( Fisher or Pearson ) of a dataset . <EoL>
<BoL> Tests whether a dataset has normal kurtosis <EoL>
<BoL> Linear regression calculation <EoL>
<BoL> Computes the Mann-Whitney statistic <EoL>
<BoL> Computes the alpha-level confidence interval for the median of the data . <EoL>
<BoL> Returns plotting positions ( or empirical percentile points ) for the data . <EoL>
<BoL> Returns the Maritz-Jarrett estimators of the standard error of selected experimental quantiles of the data . <EoL>
<BoL> Returns an array of the modal ( most common ) value in the passed array . <EoL>
<BoL> Calculates the nth moment about the mean for a sample . <EoL>
<BoL> Computes the alpha confidence interval for the selected quantiles of the data , with Maritz-Jarrett estimators . <EoL>
<BoL> Returns the sign of x , or 0 if x is masked . <EoL>
<BoL> Tests whether a sample differs from a normal distribution . <EoL>
<BoL> Computes a transform on input data ( any number of columns ) . <EoL>
<BoL> Calculates a Pearson correlation coefficient and the p-value for testing non-correlation . <EoL>
<BoL> Calculates a point biserial correlation coefficient and its p-value . <EoL>
<BoL> Returns the rank ( also known as order statistics ) of each data point along the given axis . <EoL>
<BoL> Evaluates Rosenblatt 's shifted histogram estimators for each data point . <EoL>
<BoL> Calculate the score at the given 'per ' percentile of the sequence a . For example , the score at per=50 is the median . <EoL>
<BoL> Calculates the standard error of the mean of the input array . <EoL>
<BoL> Computes the Siegel estimator for a set of points ( x , y ) . <EoL>
<BoL> Computes the skewness of a data set . <EoL>
<BoL> Tests whether the skew is different from the normal distribution . <EoL>
<BoL> Calculates a Spearman rank-order correlation coefficient and the p-value to test for non-correlation . <EoL>
<BoL> Computes the Theil-Sen estimator for a set of points ( x , y ) . <EoL>
<BoL> Compute the trimmed maximum <EoL>
<BoL> Compute the trimmed mean . <EoL>
<BoL> Compute the trimmed minimum <EoL>
<BoL> Trims an array by masking the data outside some given limits . <EoL>
<BoL> Trims an array by masking the data outside some given limits . <EoL>
<BoL> Trims the smallest and largest data values . <EoL>
<BoL> Returns the standard error of the trimmed mean along the given axis . <EoL>
<BoL> Trims an array by masking some proportion of the data on each end . Returns a masked version of the input array . <EoL>
<BoL> Compute the trimmed standard error of the mean . <EoL>
<BoL> Calculates the T-test for the mean of ONE group of scores . <EoL>
<BoL> Calculates the T-test for the means of TWO INDEPENDENT samples of scores . <EoL>
<BoL> Calculates the T-test on TWO RELATED samples of scores , a and b . <EoL>
<BoL> Compute the trimmed variance <EoL>
<BoL> Computes the coefficient of variation , the ratio of the biased standard deviation to the mean . <EoL>
<BoL> Calculate the relative z-scores . <EoL>
<BoL> Calculate the z score of each value in the sample , relative to the sample mean and standard deviation . <EoL>
<BoL> Mask an array for values outside of given limits . <EoL>
<BoL> Returns the McKean-Schrader estimate of the standard error of the sample median along the given axis . masked values are discarded . <EoL>
<BoL> Test whether a sample differs from a normal distribution . <EoL>
<BoL> Compute the O'Brien transform on input data ( any number of arrays ) . <EoL>
<BoL> Calculate a Pearson correlation coefficient and the p-value for testing non-correlation . <EoL>
<BoL> The percentile rank of a score relative to a list of scores . <EoL>
<BoL> Calculate a point biserial correlation coefficient and its p-value . <EoL>
<BoL> Compute the Wilcoxon rank-sum statistic for two samples . <EoL>
<BoL> Return a relative frequency histogram , using the histogram function . <EoL>
<BoL> Calculate the standard error of the mean ( or standard error of measurement ) of the values in the input array . <EoL>
<BoL> Iterative sigma-clipping of array elements . <EoL>
<BoL> Compute the skewness of a data set . <EoL>
<BoL> Test whether the skew is different from the normal distribution . <EoL>
<BoL> Calculate a Spearman rank-order correlation coefficient and the p-value to test for non-correlation . <EoL>
<BoL> Compute , between two one-dimensional distributions : math : ` u ` and : math : ` v ` , whose respective CDFs are : math : ` U ` and : math : ` V ` , the statistical distance that is defined as : <EoL>
<BoL> Count the number of non-masked elements of an array . <EoL>
<BoL> Separate the range into several bins and return the number of instances in each bin . <EoL>
<BoL> Private wrapper that works around older versions of ` numpy ` . <EoL>
<BoL> Mask an array for values outside of given limits . <EoL>
<BoL> Sum elements of the input array , and return the square ( s ) of that sum . <EoL>
<BoL> Square each element of the input array , and return the sum ( s ) of that . <EoL>
<BoL> Common code between all 3 t-test functions . <EoL>
<BoL> Validate the values and weights from a distribution input of ` cdf_distance ` and return them as ndarray objects . <EoL>
<BoL> Tie correction factor for ties in the Mann-Whitney U and Kruskal-Wallis H tests . <EoL>
<BoL> Compute the trimmed maximum . <EoL>
<BoL> Compute the trimmed mean . <EoL>
<BoL> Compute the trimmed minimum . <EoL>
<BoL> Slices off a proportion from ONE end of the passed array distribution . <EoL>
<BoL> Return mean of array after trimming distribution from both tails . <EoL>
<BoL> Slices off a proportion of items from both ends of an array . <EoL>
<BoL> Compute the trimmed standard error of the mean . <EoL>
<BoL> Compute the trimmed sample standard deviation . <EoL>
<BoL> Calculate the T-test for the mean of ONE group of scores . <EoL>
<BoL> Calculate the T-test for the means of *two independent* samples of scores . <EoL>
<BoL> Calculate the T-test on TWO RELATED samples of scores , a and b . <EoL>
<BoL> Compute the trimmed variance . <EoL>
<BoL> Compute the coefficient of variation , the ratio of the biased standard deviation to the mean . <EoL>
<BoL> Compute the first Wasserstein distance between two 1D distributions . <EoL>
<BoL> Compute a weighted version of Kendall 's : math : ` \tau ` . <EoL>
<BoL> Return a boolean indicating whether a == b on the basis of their symbolic trees . <EoL>
<BoL> a ! = b - > Compare two symbolic trees and see whether they are different <EoL>
<BoL> Pickling support . <EoL>
<BoL> Method to return the string representation . Return the expression as a string . <EoL>
<BoL> Stub that should be overridden by new Functions to return the first non-zero term in a series if ever an x-dependent argument whose leading term vanishes as x - > 0 might be encountered . See , for example , cos._eval_as_leading_term . <EoL>
<BoL> Compute an asymptotic expansion around args0 , in terms of self.args . This function is only used internally by _eval_nseries and should not be called directly ; derived classes can overwrite this to implement asymptotic expansions . <EoL>
<BoL> Returns evaluation over an interval . For most functions this is : <EoL>
<BoL> Helper for evalf . Does the same thing but takes binary precision <EoL>
<BoL> Helper for `` expand ( ) `` . Recursively calls `` expr._eval_expand_hint ( ) `` . <EoL>
<BoL> Helper for .has ( ) <EoL>
<BoL> Helper for .has ( ) <EoL>
<BoL> Return a tuple of information about self that can be used to compute the hash . If a class defines additional attributes , like `` name `` in Symbol , then this method should be updated accordingly to return such relevant attributes . <EoL>
<BoL> Parse and configure the ordering of terms . <EoL>
<BoL> Return self evaluated , if possible , replacing free symbols with random complex values , if necessary . <EoL>
<BoL> Helper for rcall method . <EoL>
<BoL> Decide if the function should automatically evalf ( ) . <EoL>
<BoL> Helper for xreplace . Tracks whether a replacement actually occurred . <EoL>
<BoL> See the apart function in sympy.polys <EoL>
<BoL> Return [ commutative factors , non-commutative factors ] of self . <EoL>
<BoL> Returns the method as the 2-tuple ( base , exponent ) . <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Return the tuple ( c , args ) where self is written as an Add , `` a `` . <EoL>
<BoL> `` c*x**e - > c , e `` where x can be any symbolic expression . <EoL>
<BoL> Return the tuple ( c , args ) where self is written as a Mul , `` m `` . <EoL>
<BoL> Extracts symbolic coefficient at the given expression . <EoL>
<BoL> Return a dictionary mapping terms to their Rational coefficient . <EoL>
<BoL> This method should recursively remove a Rational from all arguments and return that ( content ) and the new self ( primitive ) . <EoL>
<BoL> Convert a polynomial to a SymPy expression . <EoL>
<BoL> A mostly naive separation of a Mul or Add into arguments that are not are dependent on deps . <EoL>
<BoL> expression - > a/b - > a , b <EoL>
<BoL> Return list of ordered factors ( if Mul ) else [ self ] . <EoL>
<BoL> Transform an expression to an ordered list of terms . <EoL>
<BoL> Converts `` self `` to a polynomial or returns `` None `` . <EoL>
<BoL> Return self as a dictionary of factors with each factor being treated as a power . <EoL>
<BoL> Performs complex expansion on 'self ' and returns a tuple containing collected both real and imaginary parts . This method ca n't be confused with re ( ) and im ( ) functions , which does not perform complex expansion at evaluation . <EoL>
<BoL> Transform an expression to a list of terms . <EoL>
<BoL> Returns the atoms that form the current object . <EoL>
<BoL> See the cancel function in sympy.polys <EoL>
<BoL> See the collect function in sympy.simplify <EoL>
<BoL> See the combsimp function in sympy.simplify <EoL>
<BoL> Return -1 , 0 , 1 if the object is smaller , equal , or greater than other . <EoL>
<BoL> as_leading_term is only allowed for results of .series ( ) This is a wrapper to compute a series first . <EoL>
<BoL> Return True if self is not in a canonical form with respect to its sign . <EoL>
<BoL> Count the number of matching subexpressions . <EoL>
<BoL> wrapper for count_ops that returns the operation count . <EoL>
<BoL> Evaluate objects that are not evaluated by default like limits , integrals , sums and products . All objects of this kind will be evaluated recursively , unless some species were excluded via 'hints' or unless the 'deep ' hint was set to 'False ' . <EoL>
<BoL> Compare two expressions and handle dummy symbols . <EoL>
<BoL> Return True if self == other , False if it does n't , or None . If failing_expression is True then the expression which did not simplify to a 0 will be returned instead of None . <EoL>
<BoL> Evaluate the given formula to an accuracy of n digits . Optional keyword arguments : <EoL>
<BoL> Return self - c if it 's possible to subtract c from self and make all matching coefficients move towards zero , else return None . <EoL>
<BoL> Try to write self as `` exp_polar ( 2*pi*I*n ) *z `` in a nice way . Return ( z , n ) . <EoL>
<BoL> Return None if it 's not possible to make self in the form c * something in a nice way , i.e . preserving the properties of arguments of self . <EoL>
<BoL> See the factor ( ) function in sympy.polys.polytools <EoL>
<BoL> Get the first derivative of the argument to Abs ( ) . <EoL>
<BoL> Find all subexpressions matching a query . <EoL>
<BoL> Compute fourier sine/cosine series of self . <EoL>
<BoL> Create a new object from an iterable . <EoL>
<BoL> See the gammasimp function in sympy.simplify <EoL>
<BoL> Returns the additive O ( .. ) symbol if there is one , else None . <EoL>
<BoL> Returns the order of the expression . <EoL>
<BoL> See the integrate function in sympy.integrals <EoL>
<BoL> Return the multiplicative inverse of `` self `` mod `` g `` where `` self `` ( and `` g `` ) may be symbolic expressions ) . <EoL>
<BoL> This tests whether a given expression is algebraic or not , in the given symbols , syms . <EoL>
<BoL> Return True if self is constant , False if not , or None if the constancy could not be determined conclusively . <EoL>
<BoL> Return True if self is a polynomial in syms and False otherwise . <EoL>
<BoL> Test whether function is a ratio of two polynomials in the given symbols , syms . <EoL>
<BoL> Returns the leading term a*x**b as a tuple ( a , b ) . <EoL>
<BoL> Compute limit x- > xlim . <EoL>
<BoL> Wrapper for series yielding an iterator of the terms of the series . <EoL>
<BoL> Pattern matching . <EoL>
<BoL> Helper method for match ( ) that looks for a match between Wild symbols in self and expressions in expr . <EoL>
<BoL> Wrapper to _eval_nseries if assumptions allow , else to series . <EoL>
<BoL> See the nsimplify function in sympy.simplify <EoL>
<BoL> See the powsimp function in sympy.simplify <EoL>
<BoL> Return the positive Rational that can be extracted non-recursively from every term of self ( i.e. , self is treated like an Add ) . This is like the as_coeff_Mul ( ) method but primitive always extracts a positive Rational ( never a negative or a Float ) . <EoL>
<BoL> See the radsimp function in sympy.simplify <EoL>
<BoL> See the ratsimp function in sympy.simplify <EoL>
<BoL> Apply on the argument recursively through the expression tree . <EoL>
<BoL> See the refine function in sympy.assumptions <EoL>
<BoL> Removes the additive O ( .. ) symbol if there is one <EoL>
<BoL> Replace matching subexpressions of `` self `` with `` value `` . <EoL>
<BoL> Rewrite functions in terms of other functions . <EoL>
<BoL> Return x rounded to the given decimal place . <EoL>
<BoL> See the separate function in sympy.simplify <EoL>
<BoL> Series expansion of `` self '' around `` x = x0 `` yielding either terms of the series one by one ( the lazy series given when n=None ) , else all the terms at once when n ! = None.Return terms of lseries one at a time . <EoL>
<BoL> See the simplify function in sympy.simplify <EoL>
<BoL> Substitutes old for new in an expression after sympifying args . <EoL>
<BoL> General method for the taylor term . <EoL>
<BoL> See the together function in sympy.polys <EoL>
<BoL> See the trigsimp function in sympy.simplify <EoL>
<BoL> Replace occurrences of objects within the expression . <EoL>
<BoL> Returns True if other is contained in self , where other belongs to extended real numbers , False if not contained , otherwise TypeError is raised . <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds object is less that the range of values attained by ` other ` , where other may be any value of type AccumulationBounds object or extended real number value , False if ` other ` satisfies the same property , else an unevaluated Relational . <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds object is greater than the range of values attained by ` other ` , where other may be any value of type AccumulationBounds object or extended real number value , False if ` other ` satisfies the same property , else an unevaluated Relational . <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds object is less than or equal to the range of values attained by ` other ` , where other may be any value of type AccumulationBounds object or extended real number value , False if ` other ` satisfies the same property , else an unevaluated Relational . <EoL>
<BoL> Returns True if range of values attained by ` self ` AccumulationBounds object is less than the range of values attained by ` other ` , where other may be any value of type AccumulationBounds object or extended real number value , False if ` other ` satisfies the same property , else an unevaluated Relational <EoL>
<BoL> Override this stub if you want to do anything more than attempt a replacement of old with new in the arguments of self . <EoL>
<BoL> Returns the intersection of 'self ' and 'other ' . Here other can be an instance of FiniteSet or AccumulationBounds . <EoL>
<BoL> Returns lhs - rhs , but treats oo like a symbol so oo - oo returns 0 , instead of a nan . <EoL>
<BoL> Evaluate the parts of self that are numbers ; if the whole thing was a number with no functions it would have been evaluated , but it was n't so we must judiciously extract the numbers and reconstruct the object . <EoL>
<BoL> Create new instance with already-processed args <EoL>
<BoL> Helper for .has ( ) <EoL>
<BoL> Matches Add/Mul `` pattern '' to an expression `` expr '' . <EoL>
<BoL> Create new instance of own class with args exactly as provided by caller but returning the self class identity if args is empty . <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Return a dictionary mapping terms to their Rational coefficient . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational extracted from self . If radical is True ( default is False ) then common radicals will be removed and included as a factor of the primitive expression . <EoL>
<BoL> returns a tuple representing a complex number <EoL>
<BoL> Nice order of classes <EoL>
<BoL> Takes the sequence `` seq '' of nested Adds and returns a flatten list . <EoL>
<BoL> Return a sequence of elements ` args ` such that cls ( *args ) == expr <EoL>
<BoL> Return `` ( R , self/R ) `` where `` R `` ` is the Rational GCD of `` self `` ` . <EoL>
<BoL> Return terms of series for self up to O ( x**n ) at x=0 from the positive direction . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Returns a dense Matrix with elements represented explicitly <EoL>
<BoL> Returns a dense , mutable matrix with elements represented explicitly <EoL>
<BoL> Nice order of classes . <EoL>
<BoL> Test elementwise equality between matrices , potentially of different types <EoL>
<BoL> Construct an element of `` self `` domain from `` args `` . <EoL>
<BoL> Check if `` a `` belongs to this domain . <EoL>
<BoL> Returns `` True `` if two domains are equivalent . <EoL>
<BoL> The mathematical way to make a polynomial ring . <EoL>
<BoL> Returns `` False `` if two domains are equivalent . <EoL>
<BoL> Absolute value of `` a `` , implies `` __abs__ `` . <EoL>
<BoL> Sum of `` a `` and `` b `` , implies `` __add__ `` . <EoL>
<BoL> Returns an algebraic field , i.e . ` \mathbb { Q } ( \alpha , \ldots ) ` . <EoL>
<BoL> Check if `` a `` and `` b `` are almost equal . <EoL>
<BoL> Return the characteristic of this domain . <EoL>
<BoL> Returns GCD and cofactors of `` a `` and `` b `` . <EoL>
<BoL> Convert `` element `` to `` self.dtype `` . <EoL>
<BoL> Convert `` element `` to `` self.dtype `` given the base domain . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Division of `` a `` and `` b `` , implies `` __div__ `` . <EoL>
<BoL> Returns numerical approximation of `` a `` . <EoL>
<BoL> Exact quotient of `` a `` and `` b `` , implies `` __div__ `` . <EoL>
<BoL> Returns a fraction field , i.e . ` K ( X ) ` . <EoL>
<BoL> Generate a free module of rank `` rank `` over self . <EoL>
<BoL> Convert an algebraic number to `` dtype `` . <EoL>
<BoL> Convert a complex element to `` dtype `` . <EoL>
<BoL> Convert a `` EX `` object to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to `` dtype `` . <EoL>
<BoL> Convert a rational function to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpq `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` Fraction `` object to `` dtype `` . <EoL>
<BoL> Convert a mpmath `` mpf `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpz `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` int `` object to `` dtype `` . <EoL>
<BoL> Convert SymPy 's expression to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns an exact domain associated with `` self `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Half extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Generate an ideal of `` self `` . <EoL>
<BoL> Inject generators into this domain . <EoL>
<BoL> Returns inversion of `` a mod b `` . <EoL>
<BoL> Returns True if `` a `` is negative . <EoL>
<BoL> Returns True if `` a `` is non-negative . <EoL>
<BoL> Returns True if `` a `` is non-positive . <EoL>
<BoL> Returns True if `` a `` is one . <EoL>
<BoL> Returns True if `` a `` is positive . <EoL>
<BoL> Returns True if `` a `` is zero . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns b-base logarithm of `` a `` . <EoL>
<BoL> Rersively apply `` self `` to all elements of `` seq `` . <EoL>
<BoL> Product of `` a `` and `` b `` , implies `` __mul__ `` . <EoL>
<BoL> Returns `` a `` negated , implies `` __neg__ `` . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Check if `` a `` is of type `` dtype `` . <EoL>
<BoL> Returns a fraction field , i.e . ` K ( X ) ` . <EoL>
<BoL> Returns a polynomial ring , i.e . ` K [ X ] ` . <EoL>
<BoL> Returns a polynomial ring , i.e . ` K [ X ] ` . <EoL>
<BoL> Returns `` a `` positive , implies `` __pos__ `` . <EoL>
<BoL> Raise `` a `` to power `` b `` , implies `` __pow__ `` . <EoL>
<BoL> Quotient of `` a `` and `` b `` , implies `` __div__ `` . <EoL>
<BoL> Form a quotient ring of `` self `` . <EoL>
<BoL> Remainder of `` a `` and `` b `` , implies nothing . <EoL>
<BoL> Returns `` a** ( -1 ) `` if possible . <EoL>
<BoL> Returns square root of `` a `` . <EoL>
<BoL> Difference of `` a `` and `` b `` , implies `` __sub__ `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Construct a minimal domain that contains elements of `` K0 `` and `` K1 `` . <EoL>
<BoL> Construct a new algebraic number . <EoL>
<BoL> Create a Basic expression from `` self `` . <EoL>
<BoL> Create a Poly instance from `` self `` . <EoL>
<BoL> Returns all SymPy coefficients of an algebraic number . <EoL>
<BoL> Returns all native coefficients of an algebraic number . <EoL>
<BoL> Convert `` self `` to an algebraic integer . <EoL>
<BoL> Overloading for & operato <EoL>
<BoL> Overloading for ~ <EoL>
<BoL> Overloading for < < <EoL>
<BoL> Overloading for | <EoL>
<BoL> Overloading for > > <EoL>
<BoL> A stub to allow Basic args ( like Tuple ) to be skipped when computing the content and primitive components of an expression . <EoL>
<BoL> Rewrites Boolean expression in terms of real sets . <EoL>
<BoL> wrapper for count_ops that returns the operation count . <EoL>
<BoL> Returns True if the given formulas have the same truth table . For two formulas to be equal they must have the same literals . <EoL>
<BoL> Returns a canonical form of cls applied to arguments args . <EoL>
<BoL> Return seq so that none of the elements are of type ` cls ` . This is the vanilla routine that will be used if a class derived from AssocOp does not define its own flatten routine . <EoL>
<BoL> Return a set of args such that cls ( *arg_set ) == expr . <EoL>
<BoL> NDimArray instances can be compared to each other . Instances equal if they have same shape and data . <EoL>
<BoL> Allows to get items from N-dim array . <EoL>
<BoL> Overload common function len ( ) . Returns number of elements in array . <EoL>
<BoL> Returns string , allows to use standard functions print ( ) and str ( ) . <EoL>
<BoL> Apply a function to each element of the N-dim array . <EoL>
<BoL> Calculate the derivative of each element in the array . <EoL>
<BoL> Returns rank of array . <EoL>
<BoL> Returns MutableDenseNDimArray instance with new shape . <EoL>
<BoL> Converting MutableDenseNDimArray to one-dim list <EoL>
<BoL> Converts MutableDenseNDimArray to Matrix . Can convert only 2-dim array , else will raise error . <EoL>
<BoL> Add an assumption . <EoL>
<BoL> Return transpose of matrix . <EoL>
<BoL> Construct an indexed complex root of a polynomial . <EoL>
<BoL> Get real and complex roots of a composite polynomial . <EoL>
<BoL> Map initial complex root index to an index in a factor where the root belongs . <EoL>
<BoL> Make complex isolating intervals disjoint and sort roots . <EoL>
<BoL> Count the number of real or complex roots with multiplicities . <EoL>
<BoL> Evaluate this complex root to the given precision . <EoL>
<BoL> Return `` True `` if the root is imaginary . <EoL>
<BoL> Return `` True `` if the root is real . <EoL>
<BoL> Compute complex root isolating intervals for a list of factors . <EoL>
<BoL> Get complex root isolating intervals for a square-free factor . <EoL>
<BoL> Internal function for retrieving isolation interval from cache . <EoL>
<BoL> Compute real root isolating intervals for a list of factors . <EoL>
<BoL> Get real root isolating intervals for a square-free factor . <EoL>
<BoL> Return postprocessed roots of specified kind . <EoL>
<BoL> Get a root of a composite polynomial by index . <EoL>
<BoL> Construct new `` CRootOf `` object from raw data . <EoL>
<BoL> Return the root if it is trivial or a `` CRootOf `` object . <EoL>
<BoL> Take heroic measures to make `` poly `` compatible with `` CRootOf `` . <EoL>
<BoL> Get real roots of a composite polynomial . <EoL>
<BoL> Map initial real root index to an index in a factor where the root belongs . <EoL>
<BoL> Make real isolating intervals disjoint and sort roots . <EoL>
<BoL> eturn complexes such that no bounding rectangles of non-conjugate roots would intersect . In addition , assure that neither ay nor by is 0 to guarantee that non-real roots are distinct from real roots in terms of the y-bounds . <EoL>
<BoL> Compute roots in linear , quadratic and binomial cases . <EoL>
<BoL> Internal function for updating isolation interval in cache . <EoL>
<BoL> Get real and complex roots of a polynomial . <EoL>
<BoL> Reset cache for reals and complexes . <EoL>
<BoL> Evaluate this complex root to the given precision . <EoL>
<BoL> Return a Rational approximation of `` self `` that has real and imaginary component approximations that are within `` dx `` and `` dy `` of the true values , respectively . Alternatively , `` n `` digits of precision can be specified . <EoL>
<BoL> Get real roots of a polynomial . <EoL>
<BoL> Comparison of two GeometryEntities . <EoL>
<BoL> Is the other GeometryEntity the same as this ellipse ? <EoL>
<BoL> Returns a tuple that will be passed to __new__ on unpickling . <EoL>
<BoL> Test inequality of two geometrical entities . <EoL>
<BoL> Implementation of reverse add method . <EoL>
<BoL> Implementation of reverse division method . <EoL>
<BoL> String representation of a GeometryEntity that can be evaluated by sympy . <EoL>
<BoL> Implementation of reverse multiplication method . <EoL>
<BoL> Implementation of reverse substraction method . <EoL>
<BoL> String representation of a GeometryEntity . <EoL>
<BoL> sympy.sets uses the _contains method , so include it for compatibility . <EoL>
<BoL> Return infimum ( if possible ) else S.Infinity . <EoL>
<BoL> Returns SVG ellipse element for the Ellipse . <EoL>
<BoL> A parameterized point on the ellipse . <EoL>
<BoL> The complement of 'self ' w.r.t the given universe . <EoL>
<BoL> Returns True if 'other ' is contained in 'self ' as an element . <EoL>
<BoL> Return True if o is inside ( not on or outside ) the boundaries of self . <EoL>
<BoL> Return True if p is enclosed by ( is inside of ) self . <EoL>
<BoL> The equation of the circle . <EoL>
<BoL> The equation of evolute of the ellipse . <EoL>
<BoL> Returns the intersection of 'self ' and 'other ' . <EoL>
<BoL> The intersection of this circle with another geometrical entity . <EoL>
<BoL> Returns True if 'self ' and 'other ' are disjoint <EoL>
<BoL> Returns True if 'self ' is a proper subset of 'other ' . <EoL>
<BoL> Returns True if 'self ' is a proper superset of 'other ' . <EoL>
<BoL> Is this geometrical entity similar to another geometrical entity ? <EoL>
<BoL> Returns True if 'self ' is a subset of 'other ' . <EoL>
<BoL> Returns True if 'self ' is a superset of 'other ' . <EoL>
<BoL> Is ` o ` tangent to the ellipse ? <EoL>
<BoL> Alias for : meth : ` is_disjoint ( ) ` <EoL>
<BoL> Alias for : meth : ` is_subset ( ) ` <EoL>
<BoL> Alias for : meth : ` is_superset ( ) ` <EoL>
<BoL> Normal lines between ` p ` and the ellipse . <EoL>
<BoL> Return the parameter corresponding to the given point . Evaluating an arbitrary point of the entity at this parameter value will return the given point . <EoL>
<BoL> The plot interval for the default geometric plot of the Ellipse . <EoL>
<BoL> Find the Power set of 'self ' . <EoL>
<BoL> A random point on the ellipse . <EoL>
<BoL> Override GeometryEntity.reflect since the radius is not a GeometryEntity . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Override GeometryEntity.scale since the radius is not a GeometryEntity . <EoL>
<BoL> Returns the second moment and product moment area of an ellipse . <EoL>
<BoL> Returns symmetric difference of ` self ` and ` other ` . <EoL>
<BoL> Tangent lines between ` p ` and the ellipse . <EoL>
<BoL> Shift the object by adding to the x , y-coordinates the values x and y . <EoL>
<BoL> Returns the union of 'self ' and 'other ' . <EoL>
<BoL> Alias for : meth : ` intersect ( ) ` <EoL>
<BoL> Simplify a : class : ` Complement ` . <EoL>
<BoL> Returns an algebraic field , i.e . ` K ( \alpha , \ldots ) ` . <EoL>
<BoL> Check if `` a `` and `` b `` are almost equal . <EoL>
<BoL> Returns denominator of ` a ` . <EoL>
<BoL> Convert SymPy 's number to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns an exact domain associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Returns True if `` a `` is negative . <EoL>
<BoL> Returns True if `` a `` is non-negative . <EoL>
<BoL> Returns True if `` a `` is non-positive . <EoL>
<BoL> Returns True if `` a `` is positive . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Convert `` element `` to SymPy number . <EoL>
<BoL> Converts given subset of real numbers to a complex region . <EoL>
<BoL> This function does compute series for multivariate functions , but the expansion is always in terms of *one* variable . <EoL>
<BoL> Try to evaluate the transform in closed form . <EoL>
<BoL> Returns the first derivative of the function . <EoL>
<BoL> Subclasses should implement this method for anything more complex than equality . <EoL>
<BoL> Returns SVG path element for the GeometryEntity . <EoL>
<BoL> A parameterized point on the curve . <EoL>
<BoL> Returns a list of all of the intersections of self with o . <EoL>
<BoL> The plot interval for the default geometric plot of the curve . <EoL>
<BoL> Reflects an object across a line . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Override GeometryEntity.scale since Curve is not made up of Points . <EoL>
<BoL> Translate the Curve by ( x , y ) . <EoL>
<BoL> Symbols are identified by name and assumptions : : <EoL>
<BoL> Remove None , covert values to bool , check commutativity *in place* . <EoL>
<BoL> Return a Dummy having the same name and same assumptions as self . <EoL>
<BoL> Sort ( variable , count ) pairs by variable , but disallow sorting of non-symbols . <EoL>
<BoL> Expresses a Derivative instance as a finite difference . <EoL>
<BoL> Evaluate the derivative at z numerically . <EoL>
<BoL> D.__contains__ ( k ) - > True if D has a key k , else False <EoL>
<BoL> x.__getitem__ ( y ) < == > x [ y ] <EoL>
<BoL> x.__iter__ ( ) < == > iter ( x ) <EoL>
<BoL> x.__len__ ( ) < == > len ( x ) <EoL>
<BoL> D.get ( k [ , d ] ) - > D [ k ] if k in D , else d. d defaults to None . <EoL>
<BoL> D.items ( ) - > list of D 's ( key , value ) pairs , as 2-tuples <EoL>
<BoL> D.keys ( ) - > list of D 's keys <EoL>
<BoL> D.values ( ) - > list of D 's values <EoL>
<BoL> Compute a simplified representation of the function using property number 4 . Pass wrt as a hint to expand the expression with respect to a particular variable . <EoL>
<BoL> Represents DiracDelta in a Piecewise form <EoL>
<BoL> Returns the DiracDelta expression written in the form of Singularity Functions . <EoL>
<BoL> Returns a simplified form or a value of DiracDelta depending on the argument passed by the DiracDelta object . <EoL>
<BoL> Returns the first derivative of a DiracDelta Function . <EoL>
<BoL> is_simple ( self , x ) <EoL>
<BoL> Returns `` True `` if two domains are equivalent . <EoL>
<BoL> Return the characteristic of this domain . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Division of `` a `` and `` b `` , implies something . <EoL>
<BoL> Exact quotient of `` a `` and `` b `` , implies something . <EoL>
<BoL> Convert a GMPY `` mpq `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` Fraction `` object to `` dtype `` . <EoL>
<BoL> Convert a real element object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpz `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` int `` object to `` dtype `` . <EoL>
<BoL> Convert a SymPy object to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Inject generators into this domain . <EoL>
<BoL> Returns inversion of `` a mod b `` , implies something . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Quotient of `` a `` and `` b `` , implies something . <EoL>
<BoL> Remainder of `` a `` and `` b `` , implies `` __mod__ `` . <EoL>
<BoL> Returns `` a** ( -1 ) `` if possible . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Classical case of the generalized exponential integral . <EoL>
<BoL> Construct new EPath . <EoL>
<BoL> Sort `` expr.args `` using printing order . <EoL>
<BoL> Apply `` _hasattrs `` and `` _hastypes `` to `` expr `` . <EoL>
<BoL> Check if `` expr `` has any of `` attrs `` . <EoL>
<BoL> Check if `` expr `` is any of `` types `` . <EoL>
<BoL> Modify parts of an expression selected by a path . <EoL>
<BoL> Retrieve parts of an expression selected by a path . <EoL>
<BoL> Represent the Levi-Civita symbol . <EoL>
<BoL> The equation of the ellipse . <EoL>
<BoL> The intersection of this ellipse and another geometrical entity ` o ` . <EoL>
<BoL> Override GeometryEntity.reflect since the radius is not a GeometryEntity . <EoL>
<BoL> Override GeometryEntity.scale since it is the major and minor axes which must be scaled and they are not GeometryEntities . <EoL>
<BoL> Returns the term-wise addition of 'self ' and 'other ' . <EoL>
<BoL> Returns the term-wise multiplication of 'self ' and 'other ' . <EoL>
<BoL> Negates the sequence . <EoL>
<BoL> Returns the term-wise subtraction of 'self ' and 'other ' . <EoL>
<BoL> Should only be used internally . <EoL>
<BoL> Returns start and stop . <EoL>
<BoL> Returns the i'th point of a sequence . <EoL>
<BoL> Should only be used internally . <EoL>
<BoL> Return start ( if possible ) else S.Infinity . <EoL>
<BoL> See docstring of SeqBase.coeff_mul <EoL>
<BoL> Finds the shortest linear recurrence that satisfies the first n terms of sequence of order ` \leq ` n/2 if possible . <EoL>
<BoL> Return True if the sides of the relationship are mathematically identical and the type of relationship is the same . If failing_expression is True , return the expression whose truth value was unknown . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Convert a `` EX `` object to `` dtype `` . <EoL>
<BoL> Convert a `` DMF `` object to `` dtype `` . <EoL>
<BoL> Convert a `` DMP `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpq `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` Fraction `` object to `` dtype `` . <EoL>
<BoL> Convert a mpmath `` mpf `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY `` mpz `` object to `` dtype `` . <EoL>
<BoL> Convert a Python `` int `` object to `` dtype `` . <EoL>
<BoL> Convert SymPy 's expression to `` dtype `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Returns True if `` a `` is negative . <EoL>
<BoL> Returns True if `` a `` is non-negative . <EoL>
<BoL> Returns True if `` a `` is non-positive . <EoL>
<BoL> Returns True if `` a `` is positive . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Returns `` True `` if two domains are equivalent . <EoL>
<BoL> Return the characteristic of this domain . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to `` dtype `` . <EoL>
<BoL> Convert GMPY 's `` mpq `` to `` dtype `` . <EoL>
<BoL> Convert Python 's `` Fraction `` to `` dtype `` . <EoL>
<BoL> Convert mpmath 's `` mpf `` to `` dtype `` . <EoL>
<BoL> Convert GMPY 's `` mpz `` to `` dtype `` . <EoL>
<BoL> Convert Python 's `` int `` to `` dtype `` . <EoL>
<BoL> Convert SymPy 's Integer to SymPy 's `` Integer `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Tests whether an element , other , is in the set . <EoL>
<BoL> Rewrite a FiniteSet in terms of equalities and logic operators . <EoL>
<BoL> expt is symbolic object but not equal to 0 , 1 <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Compute GCD and cofactors of ` self ` and ` other ` . <EoL>
<BoL> Compute GCD of ` self ` and ` other ` . <EoL>
<BoL> Compute LCM of ` self ` and ` other ` . <EoL>
<BoL> Returns ` True ` if two domains are equivalent . <EoL>
<BoL> Returns denominator of `` a `` . <EoL>
<BoL> Returns factorial of ` a ` . <EoL>
<BoL> Convert an algebraic number to `` dtype `` . <EoL>
<BoL> Convert a rational function to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's expression to ` dtype ` . <EoL>
<BoL> Returns a field associated with ` self ` . <EoL>
<BoL> Inject generators into this domain . <EoL>
<BoL> Returns True if ` LC ( a ) ` is negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-positive . <EoL>
<BoL> Returns True if ` LC ( a ) ` is positive . <EoL>
<BoL> Returns numerator of `` a `` . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> Allow instantiation of this domain . <EoL>
<BoL> Returns an algebraic field , i.e . ` \mathbb { Q } ( \alpha , \ldots ) ` . <EoL>
<BoL> Division of `` a `` and `` b `` , implies `` __divmod__ `` . <EoL>
<BoL> Exact quotient of `` a `` and `` b `` , implies `` __floordiv__ `` . <EoL>
<BoL> Compute factorial of `` a `` . <EoL>
<BoL> Convert a `` ANP `` object to `` dtype `` . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert GMPY `` mpq `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert Python 's `` Fraction `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert mpmath 's `` mpf `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert GMPY 's `` mpz `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert Python 's `` int `` to GMPY 's `` mpz `` . <EoL>
<BoL> Convert SymPy 's Integer to `` dtype `` . <EoL>
<BoL> Compute GCD of `` a `` and `` b `` . <EoL>
<BoL> Compute extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns a field associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Compute LCM of `` a `` and `` b `` . <EoL>
<BoL> Returns b-base logarithm of `` a `` . <EoL>
<BoL> Quotient of `` a `` and `` b `` , implies `` __floordiv__ `` . <EoL>
<BoL> Remainder of `` a `` and `` b `` , implies `` __mod__ `` . <EoL>
<BoL> Returns `` a** ( -1 ) `` if possible . <EoL>
<BoL> Compute square root of `` a `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Returns an algebraic field , i.e . ` \mathbb { Q } ( \alpha , \ldots ) ` . <EoL>
<BoL> Returns denominator of ` a ` . <EoL>
<BoL> Division of ` a ` and ` b ` , implies ` __div__ ` . <EoL>
<BoL> Exact quotient of ` a ` and ` b ` , implies ` __div__ ` . <EoL>
<BoL> Returns factorial of ` a ` . <EoL>
<BoL> Convert a `` ANP `` object to `` dtype `` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's Integer to ` dtype ` . <EoL>
<BoL> Returns ring associated with `` self `` . <EoL>
<BoL> Returns numerator of ` a ` . <EoL>
<BoL> Quotient of ` a ` and ` b ` , implies ` __div__ ` . <EoL>
<BoL> Remainder of ` a ` and ` b ` , implies nothing . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> Apply the Gram-Schmidt process to a set of vectors . <EoL>
<BoL> Compute a reduced Groebner basis for a system of polynomials . <EoL>
<BoL> Check if `` poly `` belongs the ideal generated by `` self `` . <EoL>
<BoL> Convert a Groebner basis from one ordering to another . <EoL>
<BoL> Reduces a polynomial modulo a Groebner basis . <EoL>
<BoL> Represents Heaviside in a Piecewise form <EoL>
<BoL> Returns the Heaviside expression written in the form of Singularity Functions . <EoL>
<BoL> Represents the Heaviside function in the form of sign function . <EoL>
<BoL> Returns a simplified form or a value of Heaviside depending on the argument passed by the Heaviside object . <EoL>
<BoL> Returns the first derivative of a Heaviside Function . <EoL>
<BoL> Returns the LDL Decomposition ( L , D ) of matrix A , such that L * D * L.H == A This method eliminates the use of square root . <EoL>
<BoL> Solves Ax = B using LDL decomposition , for a general square and non-singular matrix . <EoL>
<BoL> Compute a fraction-free LU decomposition . <EoL>
<BoL> Solve the linear system Ax = rhs for x where A = self . <EoL>
<BoL> Return Q , R where A = Q*R , Q is orthogonal and R is upper triangular . <EoL>
<BoL> Solve the linear system 'Ax = b ' . <EoL>
<BoL> Helper function of LDLdecomposition . Without the error checks . To be used privately . <EoL>
<BoL> Returns a new matrix with entry-wise absolute values . <EoL>
<BoL> Return self + other , raising ShapeError if shapes do n't match . <EoL>
<BoL> Return portion of self defined by key . If the key involves a slice then a list will be returned ( if key is a single slice ) or a matrix ( if key was a tuple involving a slice ) . <EoL>
<BoL> Return the number of elements of self . <EoL>
<BoL> Return self*other where other is either a scalar or a matrix of compatible dimensions . <EoL>
<BoL> Helper function of cholesky . Without the error checks . <EoL>
<BoL> Helper function of function diagonal_solve , without the error checks , to be used privately . <EoL>
<BoL> Helper method for Equality with matrices . <EoL>
<BoL> Return ( A , T ) where T the Toeplitz matrix used in the Berkowitz algorithm corresponding to ` self ` and A is the first principal submatrix . <EoL>
<BoL> Run the Berkowitz algorithm and return a vector whose entries are the coefficients of the characteristic polynomial of ` self ` . <EoL>
<BoL> Compute matrix determinant using Bareiss ' fraction-free algorithm which is an extension of the well known Gaussian elimination method . <EoL>
<BoL> Use the Berkowitz algorithm to compute the determinant . <EoL>
<BoL> Computes the determinant of a matrix from its LU decomposition . This function uses the LU decomposition computed by LUDecomposition_Simple ( ) . <EoL>
<BoL> Assumed to exist by matrix expressions ; If we subclass MatrixDeterminant , we can fully evaluate determinants . <EoL>
<BoL> diag_dict is a defaultdict containing all the entries of the diagonal matrix . <EoL>
<BoL> Returns ( mat , swaps ) where ` mat ` is a row-equivalent matrix in echelon form and ` swaps ` is a list of row-swaps performed . <EoL>
<BoL> Return the matrix inverse using the method indicated ( default is Gauss elimination ) . <EoL>
<BoL> Apply simplify to each element of the matrix . <EoL>
<BoL> Return the number of rows , cols and flat matrix elements . <EoL>
<BoL> Compatibility function for deprecated behavior of `` matrix.dot ( vector ) `` <EoL>
<BoL> Helper function of function lower_triangular_solve . <EoL>
<BoL> Validate the arguments for a row/column operation . ` error_str ` can be one of `` row '' or `` col '' depending on the arguments being parsed . <EoL>
<BoL> Permute columns with complicated elements as far right as they can go . Since the ` sympy ` row reduction algorithms start on the left , having complexity right-shifted speeds things up . <EoL>
<BoL> Does the row op row [ i ] = a*row [ i ] - b*row [ j ] <EoL>
<BoL> Helper to set value at location given by key . <EoL>
<BoL> Helper function of function upper_triangular_solve . Without the error checks , to be used privately . <EoL>
<BoL> Return self + b <EoL>
<BoL> Conjugate transpose or Hermitian conjugation . <EoL>
<BoL> Returns the adjugate , or classical adjoint , of a matrix . That is , the transpose of the matrix of cofactors . <EoL>
<BoL> Apply a function to each element of the matrix . <EoL>
<BoL> Returns an Immutable version of this Matrix <EoL>
<BoL> Returns a mutable version of this matrix <EoL>
<BoL> Returns a tuple containing the ( real , imaginary ) part of matrix . <EoL>
<BoL> Returns the atoms that form the current object . <EoL>
<BoL> Computes determinant using Berkowitz method . <EoL>
<BoL> Computes eigenvalues of a Matrix using Berkowitz method . <EoL>
<BoL> Computes principal minors using Berkowitz method . <EoL>
<BoL> Computes characteristic polynomial det ( x*I - self ) where I is the identity matrix . <EoL>
<BoL> Returns the Cholesky decomposition L of a matrix A such that L * L.H = A <EoL>
<BoL> Solves Ax = B using Cholesky decomposition , for a general square non-singular matrix . For a non-square matrix with rows > cols , the least squares solution is returned . <EoL>
<BoL> Calculate the cofactor of an element . <EoL>
<BoL> Return a matrix containing the cofactor of each element . <EoL>
<BoL> Elementary column selector . <EoL>
<BoL> Delete the specified column . <EoL>
<BoL> Insert one or more columns at the given column position . <EoL>
<BoL> Concatenates two matrices along self 's last and other 's first row . <EoL>
<BoL> Returns a list of vectors ( Matrix objects ) that span columnspace of self <EoL>
<BoL> Returns the condition number of a matrix . <EoL>
<BoL> Return the by-element conjugation . <EoL>
<BoL> Returns the copy of a matrix . <EoL>
<BoL> Return the cross product of `` self `` and `` b `` relaxing the condition of compatible dimensions : if each has 3 elements , a matrix of the same type and shape as `` self `` will be returned . If `` b `` has the same shape as `` self `` then common identities for the cross product ( like ` a \times b = - b \times a ` ) will hold . <EoL>
<BoL> Computes the determinant of a matrix . <EoL>
<BoL> Compute matrix determinant using LU decomposition <EoL>
<BoL> Compute matrix determinant using Bareiss ' fraction-free algorithm which is an extension of the well known Gaussian elimination method . <EoL>
<BoL> Returns a matrix with the specified diagonal . If matrices are passed , a block-diagonal matrix is created.Compute the size of the diagonal block <EoL>
<BoL> Solves Ax = B efficiently , where A is a diagonal Matrix , with non-zero diagonal entries . <EoL>
<BoL> Return ( P , D ) , where D is diagonal and <EoL>
<BoL> Calculate the derivative of each element in the matrix . `` args `` will be passed to the `` integrate `` function . <EoL>
<BoL> Return the dot product of two vectors of equal length . `` self `` must be a `` Matrix `` of size 1 x n or n x 1 , and `` b `` must be either a matrix of size 1 x n , n x 1 , or a list/tuple of length n. A scalar is returned . <EoL>
<BoL> Returns the dual of a matrix , which is : <EoL>
<BoL> Returns a matrix row-equivalent to ` self ` that is in echelon form . Note that echelon form of a matrix is *not* unique , however , properties like the row space and the null space are preserved . <EoL>
<BoL> Return eigenvalues using the Berkowitz agorithm to compute the characteristic polynomial . <EoL>
<BoL> Return list of triples ( eigenval , multiplicity , basis ) .Get a basis for the eigenspace for a particular eigenvalue <EoL>
<BoL> Performs the elementary column operation ` op ` . <EoL>
<BoL> Performs the elementary row operation ` op ` . <EoL>
<BoL> Applies `` equals `` to corresponding elements of the matrices , trying to prove that the elements are equivalent , returning True if they are , False if any pair is not , and None ( or the first failing expression if failing_expression is True ) if it can not be decided if the expressions are equivalent or not . This is , in general , an expensive operation . <EoL>
<BoL> Apply evalf ( ) to each element of self . <EoL>
<BoL> Return the exponentiation of a square matrix . <EoL>
<BoL> Return a submatrix by specifying a list of rows and columns . <EoL>
<BoL> Returns an identity matrix . <EoL>
<BoL> Solves Ax = b using Gauss Jordan elimination . <EoL>
<BoL> Obtains the square sub-matrices on the main diagonal of a square matrix . <EoL>
<BoL> Test whether any subexpression matches any of the patterns . <EoL>
<BoL> Return a matrix formed by joining args horizontally ( i.e . by repeated application of row_join ) . <EoL>
<BoL> Integrate each element of the matrix . `` args `` will be passed to the `` integrate `` function . <EoL>
<BoL> Return the inverse of a matrix . <EoL>
<BoL> Returns the inverse of the matrix ` K ` ( mod ` m ` ) , if it exists . <EoL>
<BoL> Calculates the inverse using the adjugate matrix and a determinant . <EoL>
<BoL> Calculates the inverse using Gaussian elimination . <EoL>
<BoL> Calculates the inverse using LU decomposition . <EoL>
<BoL> Check if matrix M is an antisymmetric matrix , that is , M is a square matrix with all M [ i , j ] == -M [ j , i ] . <EoL>
<BoL> Check if matrix is diagonal , that is matrix in which the entries outside the main diagonal are all zero . <EoL>
<BoL> Returns true if a matrix is diagonalizable.Clears any cached values if requested <EoL>
<BoL> Checks if a matrix is nilpotent . <EoL>
<BoL> Checks if any elements contain Symbols . <EoL>
<BoL> Check if matrix is symmetric matrix , that is square matrix and is equal to its transpose . <EoL>
<BoL> Calculates the Jacobian matrix ( derivative of a vector-valued function ) . <EoL>
<BoL> Returns a Jordan block with the specified size and eigenvalue . You may call ` jordan_block ` with two args ( size , eigenvalue ) or with keyword arguments . <EoL>
<BoL> Converts a key with potentially mixed types of keys ( integer and slice ) into a tuple of ranges and raises an error if any index is out of self's range . <EoL>
<BoL> Converts key into canonical form , converting integers or indexable items into valid integers for self 's range or returning slices unchanged . <EoL>
<BoL> Returns left eigenvectors and eigenvalues . <EoL>
<BoL> Calculate the limit of each element in the matrix . `` args `` will be passed to the `` limit `` function . <EoL>
<BoL> Solves Ax = B , where A is a lower triangular matrix . <EoL>
<BoL> Return the ( i , j ) minor of ` self ` . That is , return the determinant of the matrix obtained by deleting the ` i ` th row and ` j ` th column from ` self ` . <EoL>
<BoL> Return the submatrix obtained by removing the ` i ` th row and ` j ` th column from ` self ` . <EoL>
<BoL> Returns self*b <EoL>
<BoL> Return the Hadamard product ( elementwise product ) of A and B <EoL>
<BoL> Return the Norm of a Matrix or Vector . In the simplest case this is the geometric size of the vector Other norms can be specified by the ord parameter <EoL>
<BoL> Return the normalized version of `` self `` . <EoL>
<BoL> Returns list of vectors ( Matrix objects ) that span nullspace of self <EoL>
<BoL> Returns a matrix of ones . <EoL>
<BoL> Apply the Gram-Schmidt orthogonalization procedure to vectors supplied in ` vecs ` .projects vec onto the subspace given by the orthogonal basis ` basis ` <EoL>
<BoL> Permute the rows or columns of a matrix by the given list of swaps . <EoL>
<BoL> Permute the rows of the matrix with the given permutation in reverse . <EoL>
<BoL> Permute the rows of the matrix with the given permutation . <EoL>
<BoL> Alias for ` self.permute ( swaps , orientation='cols ' , direction=direction ) ` <EoL>
<BoL> Alias for ` self.permute ( swaps , orientation='rows ' , direction=direction ) ` <EoL>
<BoL> Calculate the Moore-Penrose pseudoinverse of the matrix . <EoL>
<BoL> Solve Ax = B using the Moore-Penrose pseudoinverse . <EoL>
<BoL> Shows location of non-zero entries for fast shape lookup . <EoL>
<BoL> Return the projection of `` self `` onto the line containing `` v `` . <EoL>
<BoL> Returns the rank of a matrix <EoL>
<BoL> Apply refine to each element of the matrix . <EoL>
<BoL> Replaces Function F in Matrix entries with Function G . <EoL>
<BoL> Reshape the matrix . Total number of elements must remain the same . <EoL>
<BoL> Elementary row selector . <EoL>
<BoL> Delete the specified row . <EoL>
<BoL> Insert one or more rows at the given row position . <EoL>
<BoL> Concatenates two matrices along self 's last and rhs 's first column <EoL>
<BoL> Returns a list of vectors that span the row space of self . <EoL>
<BoL> Return reduced row-echelon form of matrix and indices of pivot vars . <EoL>
<BoL> Compute the singular values of a Matrix <EoL>
<BoL> Return solution to self*soln = rhs using given inversion method . <EoL>
<BoL> Return the least-square fit to the data . <EoL>
<BoL> Return a new matrix with subs applied to each entry . <EoL>
<BoL> Return the Matrix as a nested Python list . <EoL>
<BoL> Returns the trace of a square matrix i.e . the sum of the diagonal elements . <EoL>
<BoL> Returns the transpose of the matrix . <EoL>
<BoL> Solves Ax = B , where A is an upper triangular matrix . <EoL>
<BoL> Return non-zero values of self . <EoL>
<BoL> Return the Matrix converted into a one column matrix by stacking columns <EoL>
<BoL> Return the unique elements of a symmetric Matrix as a one column matrix by stacking the elements in the lower triangle . <EoL>
<BoL> Return a matrix formed by joining args vertically ( i.e . by repeated application of col_join ) . <EoL>
<BoL> Return a new matrix with xreplace applied to each entry . <EoL>
<BoL> Returns a matrix of zeros . <EoL>
<BoL> Returns the LDL Decomposition ( matrices `` L `` and `` D `` ) of matrix `` A `` , such that `` L * D * L.T == A `` . `` A `` must be a square , symmetric , positive-definite and non-singular . <EoL>
<BoL> Algorithm for numeric LDL factization , exploiting sparse structure . <EoL>
<BoL> Algorithm for numeric Cholesky factorization of a sparse matrix . <EoL>
<BoL> If ` other ` is a SparseMatrix , add efficiently . Otherwise , do standard addition . <EoL>
<BoL> Return the matrix inverse using Cholesky or LDL ( default ) decomposition as selected with the `` method `` keyword : 'CH ' or 'LDL ' , respectively . <EoL>
<BoL> Fast multiplication exploiting the sparsity of the matrix . <EoL>
<BoL> Returns the transposed SparseMatrix of this SparseMatrix . <EoL>
<BoL> Fast algorithm for solving a lower-triangular system , exploiting the sparsity of the given matrix . <EoL>
<BoL> Fast algorithm for solving an upper-triangular system , exploiting the sparsity of the given matrix . <EoL>
<BoL> Apply a function to each element of the matrix . <EoL>
<BoL> Returns an Immutable version of this Matrix . <EoL>
<BoL> Returns a mutable version of this matrix . <EoL>
<BoL> Returns the Cholesky decomposition L of a matrix A such that L * L.T = A <EoL>
<BoL> Returns a column-sorted list of non-zero elements of the matrix . <EoL>
<BoL> Liu 's algorithm , for pre-determination of the Elimination Tree of the given matrix , used in row-based symbolic Cholesky factorization . <EoL>
<BoL> Returns the number of non-zero elements in Matrix . <EoL>
<BoL> Returns a row-sorted list of non-zero elements of the matrix . <EoL>
<BoL> Symbolic cholesky factorization , for pre-determination of the non-zero structure of the Cholesky factororization . <EoL>
<BoL> Return solution to self*soln = rhs using given inversion method . <EoL>
<BoL> Return the least-square fit to the data . <EoL>
<BoL> Get an element from a sparse N-dim array . <EoL>
<BoL> Converts MutableDenseNDimArray to Matrix . Can convert only 2-dim array , else will raise error . <EoL>
<BoL> Return a sparse N-dim array of zeros . <EoL>
<BoL> Tries to do some simplifications on self**expt <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational extracted from self . <EoL>
<BoL> Closest Rational to self with denominator at most max_denominator . <EoL>
<BoL> Create an unevaluated integral . <EoL>
<BoL> Evaluate the derivative of the current Integral object by differentiating under the integral sign [ 1 ] , using the Fundamental Theorem of Calculus [ 2 ] when possible . <EoL>
<BoL> Perform substitutions over non-dummy variables of an expression with limits . Also , can be used to specify point-evaluation of an abstract antiderivative . <EoL>
<BoL> Replace instances of the given dummy variables with explicit dummy counterparts to make clear what are dummy variables and what are real-world symbols in an object . <EoL>
<BoL> Approximates a definite integral by a sum . <EoL>
<BoL> Compute the Cauchy Principal Value of the definite integral of a real function in the given interval on the real axis . In mathematics , the Cauchy principal value , is a method for assigning values to certain improper integrals which would otherwise be undefined . <EoL>
<BoL> Performs a change of variables from ` x ` to ` u ` using the relationship given by ` x ` and ` u ` which will define the transformations ` f ` and ` F ` ( which are inverses of each other ) as follows : replace d with a , using subs if possible , otherwise limit where sign of b is consideredreplace d with a , using subs if possible , otherwise limit where sign of b is considered <EoL>
<BoL> Rewrite an Intersection in terms of equalities and logic operators <EoL>
<BoL> Return an interval not including the left boundary . <EoL>
<BoL> Return an interval not including the right boundary . <EoL>
<BoL> Rewrite an interval in terms of inequalities and logic operators . <EoL>
<BoL> Return an interval including neither boundary . <EoL>
<BoL> Returns the index which is preferred to keep in the final expression . <EoL>
<BoL> Evaluates the discrete delta function . <EoL>
<BoL> Determine whether two matrices have the appropriate structure to bring matrix multiplication inside the KroneckerProdut <EoL>
<BoL> Determine whether two matrices have the same Kronecker product structure <EoL>
<BoL> Return the leading coefficient of `` f `` . <EoL>
<BoL> Return the leading monomial of `` f `` . <EoL>
<BoL> Return the leading term of `` f `` . <EoL>
<BoL> Return the first derivative of this function . <EoL>
<BoL> Evaluates limit <EoL>
<BoL> Return a definitive answer or else raise an error if it can not be determined that other is on the boundaries of self . <EoL>
<BoL> Test whether the point ` other ` lies in the positive span of ` self ` . <EoL>
<BoL> Return the non-reflex angle formed by rays emanating from the origin with directions the same as the direction vectors of the linear entities . <EoL>
<BoL> A parameterized point on the Line . <EoL>
<BoL> Is a sequence of linear entities concurrent ? <EoL>
<BoL> Return True if ` other ` is on this Line , or False otherwise . <EoL>
<BoL> Finds the shortest distance between a line and a point . <EoL>
<BoL> Returns True if self and other are the same mathematical entities <EoL>
<BoL> The intersection with another geometrical entity . <EoL>
<BoL> Are two linear entities parallel ? <EoL>
<BoL> Are two linear entities perpendicular ? <EoL>
<BoL> Return True if self and other are contained in the same line . <EoL>
<BoL> Create a new Line parallel to this linear entity which passes through the point ` p ` . <EoL>
<BoL> Create a new Line perpendicular to this linear entity which passes through the point ` p ` . <EoL>
<BoL> Create a perpendicular line segment from ` p ` to this line . <EoL>
<BoL> The plot interval for the default geometric plot of line . Gives values that will produce a line that is +/- 5 units long ( where a unit is the distance between the two points that define the line ) . <EoL>
<BoL> Project a point , line , ray , or segment onto this linear entity . <EoL>
<BoL> A random point on a LinearEntity . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Scale the object by multiplying the x , y-coordinates by x and y . <EoL>
<BoL> Return the smallest angle formed at the intersection of the lines containing the linear entities . <EoL>
<BoL> Returns SVG path element for the LinearEntity . <EoL>
<BoL> The equation of the line : ax + by + c . <EoL>
<BoL> Create a new Line perpendicular to this linear entity which passes through the point ` p ` . <EoL>
<BoL> Return the equations that define the line in 3D . <EoL>
<BoL> Delete the given column . <EoL>
<BoL> In-place operation on col j using two-arg functor whose args are interpreted as ( self [ i , j ] , i ) . <EoL>
<BoL> Swap the two given columns of the matrix in-place . <EoL>
<BoL> Copy in elements from a list . <EoL>
<BoL> Copy in values from a matrix into the given bounds . <EoL>
<BoL> Fill the matrix with the scalar value . <EoL>
<BoL> Delete the given row . <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are interpreted as `` ( self [ i , j ] , j ) `` . <EoL>
<BoL> Swap the two given rows of the matrix in-place . <EoL>
<BoL> Applies simplify to the elements of a matrix in place . <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are interpreted as `` ( self [ i , j ] , self [ k , j ] ) `` . <EoL>
<BoL> Implementations of __getitem__ should accept ints , in which case the matrix is indexed as a flat list , tuples ( i , j ) in which case the ( i , j ) entry is returned , slices , or mixed tuples ( a , b ) where a and b are any combintion of slices and integers . <EoL>
<BoL> ` _new ` must , at minimum , be callable as ` _new ( rows , cols , mat ) where mat is a flat list of the elements of the matrix . <EoL>
<BoL> Remove redundant args . <EoL>
<BoL> Sequentially allocate values to localzeros . <EoL>
<BoL> Check if x and y are connected somehow . <EoL>
<BoL> Generator filtering args . <EoL>
<BoL> Convert a monomial instance to a SymPy expression . <EoL>
<BoL> Greatest common divisor of monomials . <EoL>
<BoL> Least common multiple of monomials . <EoL>
<BoL> Returns lhs/rhs , but treats arguments like symbols , so things like oo/oo return 1 , instead of a nan . <EoL>
<BoL> Return True if self is positive , False if not , and None if it can not be determined . <EoL>
<BoL> Helper function for _eval_expand_mul . <EoL>
<BoL> Efficiently extract the coefficient of a product . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational extracted from self . <EoL>
<BoL> Transform an expression into an ordered list of factors . <EoL>
<BoL> Allows to set items to MutableDenseNDimArray . <EoL>
<BoL> Assign value to position designated by key . <EoL>
<BoL> Delete the given column of the matrix . <EoL>
<BoL> Returns B augmented beneath A ( row-wise joining ) : : <EoL>
<BoL> In-place operation on col j using two-arg functor whose args are interpreted as ( self [ i , j ] , i ) for i in range ( self.rows ) . <EoL>
<BoL> Swap , in place , columns i and j . <EoL>
<BoL> Fill self with the given value . <EoL>
<BoL> Delete the given row of the matrix . <EoL>
<BoL> Returns B appended after A ( column-wise augmenting ) : : <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are interpreted as `` ( self [ i , j ] , j ) `` . <EoL>
<BoL> Swap , in place , columns i and j . <EoL>
<BoL> In-place operation on row `` i `` using two-arg functor whose args are interpreted as `` ( self [ i , j ] , self [ k , j ] ) `` . <EoL>
<BoL> Allows to set items to MutableDenseNDimArray . <EoL>
<BoL> Calls x.evalf ( n , \*\*options ) . <EoL>
<BoL> Rewrite logic operators and relationals in terms of real sets . <EoL>
<BoL> Evaluation of mpf tuple accurate to at least prec bits . <EoL>
<BoL> Return an interval with number_cls endpoints that contains the value of NumberSymbol . If not implemented , then return None . <EoL>
<BoL> Resolve the order of options ' processing . <EoL>
<BoL> Clone `` self `` and update specified options . <EoL>
<BoL> The POSform function uses simplified_pairs and a redundant-group eliminating algorithm to convert the list of all input combinations that generate ' 1 ' ( the minterms ) into the smallest Product of Sums form . <EoL>
<BoL> The equation of the parabola . <EoL>
<BoL> The intersection of the parabola and another geometrical entity ` o ` . <EoL>
<BoL> Return the truth value of the condition . <EoL>
<BoL> Return the indefinite integral of the Piecewise such that subsequent substitution of x with a value will give the value of the integral ( not including the constant of integration ) up to that point . To only integrate the individual parts of Piecewise , use the ` piecewise_integrate ` method . <EoL>
<BoL> Evaluates the function along the sym in a given interval [ a , b ] <EoL>
<BoL> Return a list of unique tuples , ( a , b , e , i ) , where a and b are the lower and upper bounds in which the expression e of argument i in self is defined and a < b ( when involving numbers ) or a < = b when involving symbols . <EoL>
<BoL> Return tuples for each argument of self that give the expression and the interval in which it is valid which is contained within the given domain . <EoL>
<BoL> Evaluate this piecewise function . <EoL>
<BoL> Either return a modified version of the args or , if no modifications were made , return None . <EoL>
<BoL> Return the Piecewise with each expression being replaced with its antiderivative . To obtain a continuous antiderivative , use the ` integrate ` function or method . <EoL>
<BoL> Angle between the plane and other geometric entity . <EoL>
<BoL> Returns an arbitrary point on the Plane . <EoL>
<BoL> Is a sequence of Planes concurrent ? <EoL>
<BoL> Distance between the plane and another geometric entity . <EoL>
<BoL> Returns True if self and o are the same mathematical entities . <EoL>
<BoL> The equation of the Plane . <EoL>
<BoL> The intersection with other geometrical entity . <EoL>
<BoL> Returns True if ` o ` is coplanar with self , else False . <EoL>
<BoL> Is the given geometric entity parallel to the plane ? <EoL>
<BoL> is the given geometric entity perpendicualar to the given plane ? <EoL>
<BoL> Plane parallel to the given plane and passing through the point pt . <EoL>
<BoL> Return the parameter ( s ) corresponding to the given point . <EoL>
<BoL> A line perpendicular to the given plane . <EoL>
<BoL> Return a perpendicular passing through the given points . <EoL>
<BoL> Project the given point onto the plane along the plane normal . <EoL>
<BoL> Project the given line onto the plane through the normal plane containing the line . <EoL>
<BoL> Returns a random point on the Plane . <EoL>
<BoL> Returns the distance between this point and the origin . <EoL>
<BoL> Add other to self by incrementing self 's coordinates by those of other . <EoL>
<BoL> Divide point 's coordinates by a factor . <EoL>
<BoL> Multiply point 's coordinates by a factor . <EoL>
<BoL> Negate the point . <EoL>
<BoL> Subtract two points , or subtract a factor from this point's coordinates . <EoL>
<BoL> Ensure that points have the same dimension . By default ` on_morph='warn ' ` is passed to the ` Point ` constructor . <EoL>
<BoL> The affine rank of a set of points is the dimension of the smallest affine space containing all the points . <EoL>
<BoL> Return True if there exists a plane in which all the points lie . A trivial True value is returned if ` len ( points ) < 3 ` or all Points are 2-dimensional . <EoL>
<BoL> The Canberra Distance from self to point p . <EoL>
<BoL> The Euclidean distance from self to point p . <EoL>
<BoL> Return dot product of self with another Point . <EoL>
<BoL> Returns whether the coordinates of self and other agree . <EoL>
<BoL> Evaluate the coordinates of the point . <EoL>
<BoL> The intersection between this point and another GeometryEntity . <EoL>
<BoL> Returns ` True ` if there exists a line that contains ` self ` and ` points ` . <EoL>
<BoL> Do ` self ` and the given sequence of points lie in a circle ? <EoL>
<BoL> Returns whether each coordinate of ` self ` is a scalar multiple of the corresponding coordinate in point p . <EoL>
<BoL> The midpoint between self and point p . <EoL>
<BoL> Project the point ` a ` onto the line between the origin and point ` b ` along the normal direction . <EoL>
<BoL> The Taxicab Distance from self to point p . <EoL>
<BoL> Rotate `` angle `` radians counterclockwise about Point `` pt `` . <EoL>
<BoL> Scale the coordinates of the Point by multiplying by `` x `` and `` y `` after subtracting `` pt `` -- default is ( 0 , 0 ) -- and then adding `` pt `` back again ( i.e . `` pt `` is the point of reference for the scaling ) . <EoL>
<BoL> Return the point after applying the transformation described by the 3x3 Matrix , `` matrix `` . <EoL>
<BoL> Shift the Point by adding x and y to the coordinates of the Point . <EoL>
<BoL> Is a sequence of points collinear ? <EoL>
<BoL> Gives the direction cosine between 2 points <EoL>
<BoL> Gives the direction ratio between 2 points <EoL>
<BoL> The intersection between this point and another point . <EoL>
<BoL> Scale the coordinates of the Point by multiplying by `` x `` and `` y `` after subtracting `` pt `` -- default is ( 0 , 0 ) -- and then adding `` pt `` back again ( i.e . `` pt `` is the point of reference for the scaling ) . <EoL>
<BoL> Return the point after applying the transformation described by the 4x4 Matrix , `` matrix `` . <EoL>
<BoL> Shift the Point by adding x and y to the coordinates of the Point . <EoL>
<BoL> Returns the last non-zero coefficient of `` f `` . <EoL>
<BoL> Returns the last non-zero monomial of `` f `` . <EoL>
<BoL> Returns the last non-zero term of `` f `` . <EoL>
<BoL> Returns the leading coefficient of `` f `` . <EoL>
<BoL> Returns the leading monomial of `` f `` . <EoL>
<BoL> Returns the leading term of `` f `` . <EoL>
<BoL> Returns the trailing coefficient of `` f `` . <EoL>
<BoL> Evaluate `` f `` at the give values . <EoL>
<BoL> Create a new polynomial instance out of something useful . <EoL>
<BoL> Computes partial derivative of `` f `` . <EoL>
<BoL> Internal implementation of : func : ` subs ` . <EoL>
<BoL> Construct a polynomial from a `` dict `` . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Construct a polynomial from a `` list `` . <EoL>
<BoL> Construct a polynomial from a polynomial . <EoL>
<BoL> Returns level associated with the given generator . <EoL>
<BoL> Allow SymPy to hash Poly instances . <EoL>
<BoL> Make all coefficients in `` f `` positive . <EoL>
<BoL> Add two polynomials `` f `` and `` g `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns all coefficients from a univariate polynomial `` f `` . <EoL>
<BoL> Returns all monomials from a univariate polynomial `` f `` . <EoL>
<BoL> Return a list of real and complex roots with multiplicities . <EoL>
<BoL> Returns all terms from a univariate polynomial `` f `` . <EoL>
<BoL> Switch to a `` dict `` representation . <EoL>
<BoL> Convert a Poly instance to an Expr instance . <EoL>
<BoL> Switch to a `` list `` representation . <EoL>
<BoL> Cancel common factors in a rational function `` f/g `` . <EoL>
<BoL> Clear denominators , but keep the ground domain . <EoL>
<BoL> Returns the coefficient of `` monom `` in `` f `` if there , else None . <EoL>
<BoL> Returns all non-zero coefficients from `` f `` in lex order . <EoL>
<BoL> Returns the GCD of `` f `` and `` g `` and their cofactors . <EoL>
<BoL> Computes the functional composition of `` f `` and `` g `` . <EoL>
<BoL> Returns the GCD of polynomial coefficients . <EoL>
<BoL> Return the number of roots of `` f `` in `` [ inf , sup ] `` interval . <EoL>
<BoL> Computes a functional decomposition of `` f `` . <EoL>
<BoL> Reduce degree of `` f `` by mapping `` x_i**m `` to `` y_i `` . <EoL>
<BoL> Returns degree of `` f `` in `` x_j `` . <EoL>
<BoL> Returns a list of degrees of `` f `` . <EoL>
<BoL> Computes the discriminant of `` f `` . <EoL>
<BoL> Compute the *dispersion* of polynomials . <EoL>
<BoL> Compute the *dispersion set* of two polynomials . <EoL>
<BoL> Polynomial division with remainder of `` f `` by `` g `` . <EoL>
<BoL> Eject selected generators into the ground domain . <EoL>
<BoL> Evaluate `` f `` at `` a `` in the given variable . <EoL>
<BoL> Remove unnecessary generators from `` f `` . <EoL>
<BoL> Computes polynomial exact quotient of `` f `` by `` g `` . <EoL>
<BoL> Exact quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Construct a polynomial from a `` dict `` . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Construct a polynomial from a `` list `` . <EoL>
<BoL> Construct a polynomial from a polynomial . <EoL>
<BoL> Returns the polynomial GCD of `` f `` and `` g `` . <EoL>
<BoL> Extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Get the ground domain of `` f `` . <EoL>
<BoL> Get the modulus of `` f `` . <EoL>
<BoL> Computes greatest factorial factorization of `` f `` . <EoL>
<BoL> Compute roots of `` f `` by factorization in the ground domain . <EoL>
<BoL> Half extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Return `` True `` if `` Poly ( f , *gens ) `` retains ground domain . <EoL>
<BoL> Returns the homogeneous order of `` f `` . <EoL>
<BoL> Returns the homogeneous polynomial of `` f `` . <EoL>
<BoL> Inject ground domain generators into `` f `` . <EoL>
<BoL> Computes indefinite integral of `` f `` . <EoL>
<BoL> Compute isolating intervals for roots of `` f `` . <EoL>
<BoL> Invert `` f `` modulo `` g `` when possible . <EoL>
<BoL> Returns l1 norm of `` f `` . <EoL>
<BoL> Returns polynomial LCM of `` f `` and `` g `` . <EoL>
<BoL> Returns the number of non-zero terms in `` f `` . <EoL>
<BoL> Convert algebraic coefficients to rationals . <EoL>
<BoL> Remove dummy generators from `` f `` that are to the left of specified `` gen `` in the generators as ordered . When `` gen `` is an integer , it refers to the generator located at that position within the tuple of generators of `` f `` . <EoL>
<BoL> Returns maximum norm of `` f `` . <EoL>
<BoL> Divides all coefficients by `` LC ( f ) `` . <EoL>
<BoL> Returns all non-zero monomials from `` f `` in lex order . <EoL>
<BoL> Multiply two polynomials `` f `` and `` g `` . <EoL>
<BoL> Multiply `` f `` by a an element of the ground domain . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Construct : class : ` Poly ` instance from raw representation . <EoL>
<BoL> Computes the product , `` Norm ( f ) `` , of the conjugates of a polynomial `` f `` defined over a number field `` K `` . <EoL>
<BoL> Compute numerical approximations of roots of `` f `` . <EoL>
<BoL> Returns the `` n `` -th coefficient of `` f `` where `` N `` are the exponents of the generators in the term of interest . <EoL>
<BoL> Construct a polynomial with n-th powers of roots of `` f `` . <EoL>
<BoL> Polynomial pseudo-division of `` f `` by `` g `` . <EoL>
<BoL> Create a Poly out of the given representation . <EoL>
<BoL> Polynomial exact pseudo-quotient of `` f `` by `` g `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Polynomial pseudo-quotient of `` f `` by `` g `` . <EoL>
<BoL> Polynomial pseudo-remainder of `` f `` by `` g `` . <EoL>
<BoL> Returns the content and a primitive form of `` f `` . <EoL>
<BoL> Computes polynomial quotient of `` f `` by `` g `` . <EoL>
<BoL> Quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Clear denominators in a rational function `` f/g `` . <EoL>
<BoL> Return a list of real roots with multiplicities . <EoL>
<BoL> Refine an isolating interval of a root to the given precision . <EoL>
<BoL> Computes the polynomial remainder of `` f `` by `` g `` . <EoL>
<BoL> Efficiently apply new order of generators . <EoL>
<BoL> Replace `` x `` with `` y `` in generators list . <EoL>
<BoL> Computes the resultant of `` f `` and `` g `` via PRS . <EoL>
<BoL> Recalculate the ground domain of a polynomial . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` . <EoL>
<BoL> Get an indexed root of a polynomial . <EoL>
<BoL> Set the ground domain of `` f `` . <EoL>
<BoL> Set the modulus of `` f `` . <EoL>
<BoL> Efficiently compute Taylor shift `` f ( x + a ) `` . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Computes square-free norm of `` f `` . <EoL>
<BoL> Computes square-free part of `` f `` . <EoL>
<BoL> Square a polynomial `` f `` . <EoL>
<BoL> Computes the Sturm sequence of `` f `` . <EoL>
<BoL> Subtract two polynomials `` f `` and `` g `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Computes the subresultant PRS of `` f `` and `` g `` . <EoL>
<BoL> Returns all non-zero terms from `` f `` in lex order . <EoL>
<BoL> Remove GCD of terms from the polynomial `` f `` . <EoL>
<BoL> Apply a function to all terms of `` f `` . <EoL>
<BoL> Make the ground domain exact . <EoL>
<BoL> Make the ground domain a field . <EoL>
<BoL> Make the ground domain a ring . <EoL>
<BoL> Returns the total degree of `` f `` . <EoL>
<BoL> Efficiently evaluate the functional transformation `` q**n * f ( p/q ) `` . <EoL>
<BoL> Reduce `` f `` modulo a constant `` p `` . <EoL>
<BoL> Make `` f `` and `` g `` belong to the same domain . <EoL>
<BoL> Return True if o is contained within the boundary lines of self.altitudes <EoL>
<BoL> Return True/False for cw/ccw orientation . <EoL>
<BoL> Returns SVG path element for the Polygon . <EoL>
<BoL> A parameterized point on the polygon . <EoL>
<BoL> Returns the shortest distance between self and o . <EoL>
<BoL> Return True if p is enclosed by ( is inside of ) self . <EoL>
<BoL> The intersection of polygon and geometry entity . <EoL>
<BoL> Is the polygon convex ? <EoL>
<BoL> The plot interval for the default geometric plot of the polygon . <EoL>
<BoL> Returns the second moment and product moment of area of a two dimensional polygon . <EoL>
<BoL> Returns ` True ` if two domains are equivalent . <EoL>
<BoL> Returns factorial of ` a ` . <EoL>
<BoL> Convert an algebraic number to `` dtype `` . <EoL>
<BoL> Convert a rational function to `` dtype `` . <EoL>
<BoL> Convert a polynomial to `` dtype `` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's expression to ` dtype ` . <EoL>
<BoL> Returns GCD of ` a ` and ` b ` . <EoL>
<BoL> Extended GCD of ` a ` and ` b ` . <EoL>
<BoL> Returns a field associated with ` self ` . <EoL>
<BoL> Returns True if ` LC ( a ) ` is negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-negative . <EoL>
<BoL> Returns True if ` LC ( a ) ` is non-positive . <EoL>
<BoL> Returns True if ` LC ( a ) ` is positive . <EoL>
<BoL> Returns LCM of ` a ` and ` b ` . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> ( a + b + .. ) **n - > a**n + n*a** ( n-1 ) *b + .. , n is nonzero intege <EoL>
<BoL> ( a*b ) **n - > a**n * b**n <EoL>
<BoL> a** ( n + m ) - > a**n*a**m <EoL>
<BoL> A power is composite if both base and exponent are greater than 1 <EoL>
<BoL> An integer raised to the n ( > =2 ) -th power can not be a prime . <EoL>
<BoL> Return True if the exponent has a literal 2 as the denominator , else None.Return `` e `` evaluated to a Number with 2 significant digits , else None . <EoL>
<BoL> Return ( bool , pow , remainder_pow ) where , if bool is True , then the exponent of Pow ` old ` will combine with ` pow ` so the substitution is valid , otherwise bool will be False . <EoL>
<BoL> Return base and exp of self . <EoL>
<BoL> Return the tuple ( R , self/R ) where R is the positive Rational extracted from self . <EoL>
<BoL> Evaluate self ( expr ) under the given assumptions . <EoL>
<BoL> Change index of a Sum or Product . <EoL>
<BoL> Return the index of a dummy variable in the list of limits . <EoL>
<BoL> See docs of Sum.is_convergent ( ) for explanation of convergence in SymPy . <EoL>
<BoL> Reorder limits in a expression containing a Sum or a Product . <EoL>
<BoL> Interchange two limit tuples of a Sum or Product expression . <EoL>
<BoL> Reverse the order of a limit in a Product . <EoL>
<BoL> A method which implements is_iterable property method . <EoL>
<BoL> 'in ' operator for ProductSets <EoL>
<BoL> Allow SymPy to hash Poly instances . <EoL>
<BoL> Allow instantiation of this domain . <EoL>
<BoL> Compute factorial of `` a `` . <EoL>
<BoL> Convert `` ModularInteger ( mpz ) `` to Python 's `` int `` . <EoL>
<BoL> Convert `` ModularInteger ( int ) `` to Python 's `` int `` . <EoL>
<BoL> Convert GMPY 's `` mpq `` to Python 's `` int `` . <EoL>
<BoL> Convert Python 's `` Fraction `` to Python 's `` int `` . <EoL>
<BoL> Convert mpmath 's `` mpf `` to Python 's `` int `` . <EoL>
<BoL> Convert GMPY 's `` mpz `` to Python 's `` int `` . <EoL>
<BoL> Convert Python 's `` int `` to Python 's `` int `` . <EoL>
<BoL> Convert SymPy 's Integer to `` dtype `` . <EoL>
<BoL> Compute GCD of `` a `` and `` b `` . <EoL>
<BoL> Compute extended GCD of `` a `` and `` b `` . <EoL>
<BoL> Compute LCM of `` a `` and `` b `` . <EoL>
<BoL> Compute square root of `` a `` . <EoL>
<BoL> Convert `` a `` to a SymPy object . <EoL>
<BoL> Returns denominator of ` a ` . <EoL>
<BoL> Convert a GMPY ` mpq ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` Fraction ` object to ` dtype ` . <EoL>
<BoL> Convert a mpmath ` mpf ` object to ` dtype ` . <EoL>
<BoL> Convert a GMPY ` mpz ` object to ` dtype ` . <EoL>
<BoL> Convert a Python ` int ` object to ` dtype ` . <EoL>
<BoL> Convert SymPy 's Rational to ` dtype ` . <EoL>
<BoL> Returns ring associated with `` self `` . <EoL>
<BoL> Returns numerator of ` a ` . <EoL>
<BoL> Convert ` a ` to a SymPy object . <EoL>
<BoL> Returns the conjugate of the quaternion . <EoL>
<BoL> Returns the natural logarithm of the quaternion ( _ln ( q ) ) . <EoL>
<BoL> Adds quaternions . <EoL>
<BoL> Returns the exponential of q ( e^q ) . <EoL>
<BoL> Returns a rotation quaternion given the axis and the angle of rotation . <EoL>
<BoL> Returns the equivalent quaternion of a matrix . The quaternion will be normalized only if the matrix is special orthogonal ( orthogonal and det ( M ) = 1 ) . <EoL>
<BoL> Returns the inverse of the quaternion . <EoL>
<BoL> Multiplies quaternions . <EoL>
<BoL> Returns the norm of the quaternion . <EoL>
<BoL> Returns the normalized form of the quaternion . <EoL>
<BoL> Finds the pth power of the quaternion . Returns the inverse if p = -1 . <EoL>
<BoL> Computes the pth power in the cos-sin form . <EoL>
<BoL> Returns the coordinates of the point pin ( a 3 tuple ) after rotation . <EoL>
<BoL> Returns the axis and angle of rotation of a quaternion <EoL>
<BoL> Returns the equivalent rotation transformation matrix of the quaternion which represents rotation about the origin if v is not passed . <EoL>
<BoL> Returns SVG path element for the LinearEntity . <EoL>
<BoL> Is other GeometryEntity contained in this Ray ? <EoL>
<BoL> Finds the shortest distance between the ray and a point . <EoL>
<BoL> Returns True if self and other are the same mathematical entities <EoL>
<BoL> The plot interval for the default geometric plot of the Ray . Gives values that will produce a ray that is 10 units long ( where a unit is the distance between the two points that define the ray ) . <EoL>
<BoL> Return the angle by which r2 must be rotated so it faces the same direction as r1 . <EoL>
<BoL> Check if `` a `` and `` b `` are almost equal . <EoL>
<BoL> Convert SymPy 's number to `` dtype `` . <EoL>
<BoL> Returns GCD of `` a `` and `` b `` . <EoL>
<BoL> Returns an exact domain associated with `` self `` . <EoL>
<BoL> Returns a ring associated with `` self `` . <EoL>
<BoL> Returns LCM of `` a `` and `` b `` . <EoL>
<BoL> Convert a real number to rational number . <EoL>
<BoL> Convert `` element `` to SymPy number . <EoL>
<BoL> Return True if p is enclosed by ( is inside of ) self . <EoL>
<BoL> Override GeometryEntity.reflect since this is not made of only points . <EoL>
<BoL> Override GeometryEntity.rotate to first rotate the RegularPolygon about its center . <EoL>
<BoL> Override GeometryEntity.scale since it is the radius that must be scaled ( if x == y ) or else a new Polygon must be returned . <EoL>
<BoL> Increment *in place* the virtual Polygon 's rotation by ccw angle . <EoL>
<BoL> Construct a new `` CRootOf `` object for `` k `` -th root of `` f `` . <EoL>
<BoL> Construct a new `` RootSum `` instance of roots of a polynomial . <EoL>
<BoL> Check if a lambda is a rational function . <EoL>
<BoL> Construct new raw `` RootSum `` instance . <EoL>
<BoL> Handle the rational function case . <EoL>
<BoL> Transform an expression to a polynomial . <EoL>
<BoL> Construct new `` RootSum `` instance . <EoL>
<BoL> The SOPform function uses simplified_pairs and a redundant group- eliminating algorithm to convert the list of all input combos that generate ' 1 ' ( the minterms ) into the smallest Sum of Products form . <EoL>
<BoL> Is the other GeometryEntity contained within this Segment ? <EoL>
<BoL> Finds the shortest distance between a line segment and a point . <EoL>
<BoL> Returns True if self and other are the same mathematical entities <EoL>
<BoL> The perpendicular bisector of this segment . <EoL>
<BoL> The plot interval for the default geometric plot of the Segment gives values that will produce the full segment in a plot . <EoL>
<BoL> Returns SVG path element for the LinearEntity . <EoL>
<BoL> adds up the coefficients of all the sequences at point pt <EoL>
<BoL> Should be used when `` other `` is not a sequence . Should be defined to define custom behaviour . <EoL>
<BoL> Simplify : class : ` SeqAdd ` using known rules . <EoL>
<BoL> See docstring of SeqBase._add <EoL>
<BoL> See docstring of SeqBase._mul <EoL>
<BoL> See docstring of SeqBase.coeff_mul <EoL>
<BoL> multiplies the coefficients of all the sequences at point pt <EoL>
<BoL> Simplify a : class : ` SeqMul ` using known rules . <EoL>
<BoL> See docstring of SeqBase._add <EoL>
<BoL> See docstring of SeqBase._mul <EoL>
<BoL> See docstring of SeqBase.coeff_mul <EoL>
<BoL> Return the nth prime numbe <EoL>
<BoL> Reset all caches ( default ) . To reset one or more set the desired keyword to True . <EoL>
<BoL> Grow the sieve to cover all primes < = n ( a real number ) . <EoL>
<BoL> Extend to include the ith prime number . <EoL>
<BoL> Generate all mobius numbers for the range [ a , b ) . <EoL>
<BoL> Generate all prime numbers in the range [ a , b ) . <EoL>
<BoL> Return the indices i , j of the primes that bound n . <EoL>
<BoL> Generate all totient numbers for the range [ a , b ) . <EoL>
<BoL> Rewrites a Singularity Function expression using Heavisides and DiracDeltas . <EoL>
<BoL> Converts a Singularity Function expression into its Piecewise form . <EoL>
<BoL> Returns a simplified form or a value of Singularity Function depending on the argument passed by the object . <EoL>
<BoL> Returns the first derivative of a DiracDelta Function . <EoL>
<BoL> A compatibility function for ordering terms in Add . <EoL>
<BoL> Internal dispatcher <EoL>
<BoL> Returns printer 's representation for expr ( as a string ) <EoL>
<BoL> Set system-wide printing settings . <EoL>
<BoL> Differentiate wrt x as long as x is not in the free symbols of any of the upper or lower limits . <EoL>
<BoL> Return an Euler-Maclaurin approximation of self , where m is the number of leading terms to sum directly and n is the number of terms in the tail . <EoL>
<BoL> Check whether the function matches with the zeta function . If it matches , then return a ` Piecewise ` expression because zeta function does not converge unless ` s > 1 ` and ` q > 0 ` <EoL>
<BoL> Checks for the absolute convergence of an infinite series . <EoL>
<BoL> Reverse the order of a limit in a Sum . <EoL>
<BoL> Creates a TableForm . <EoL>
<BoL> Returns the string representation of 'self ' . <EoL>
<BoL> Returns the string representation of 'self ' . <EoL>
<BoL> Returns the data of the table in Matrix form . <EoL>
<BoL> The angle bisectors of the triangle . <EoL>
<BoL> Are all the sides the same length ? <EoL>
<BoL> Are two or more of the sides the same length ? <EoL>
<BoL> Is the triangle right-angled . <EoL>
<BoL> Are all the sides of the triangle of different lengths ? <EoL>
<BoL> Is another triangle similar to this one . <EoL>
<BoL> T.index ( value , [ start , [ stop ] ] ) - > integer -- return first index of value . Raises ValueError if the value is not present . <EoL>
<BoL> T.count ( value ) - > integer -- return number of occurrences of value <EoL>
<BoL> Rewrite a Union in terms of equalities and logic operators . <EoL>
<BoL> Conjugate spherical harmonics defined as <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Return True if all args are True , None if there is any None else False unless `` quick_exit `` is True ( then return None as soon as a second False is seen . <EoL>
<BoL> Return `` coeff*factors `` unevaluated if necessary . <EoL>
<BoL> Return a well-formed unevaluated Add : Numbers are collected and put in slot 0 and args are sorted . Use this when args have changed but you still want to return an unevaluated Add . <EoL>
<BoL> Not in fuzzy logic <EoL>
<BoL> Or in fuzzy logic . Returns True ( any True ) , False ( all False ) , or None <EoL>
<BoL> Computes nonnegative integer greatest common divisor . <EoL>
<BoL> Computes integer least common multiple . <EoL>
<BoL> Return a boolean indicating whether `` i `` is a sequence in the SymPy sense . If anything that fails the test below should be included as being a sequence for your application , set 'include ' to that object's type ; multiple types should be passed as a tuple of types . <EoL>
<BoL> Return product of elements of a . Start with int 1 so if only ints are included then an int result is returned . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Differentiate f with respect to symbols . <EoL>
<BoL> exp ( arg ) **e - > exp ( arg*e ) if assumptions allow it . <EoL>
<BoL> Returns the 2-tuple ( base , exponent ) . <EoL>
<BoL> Returns this with a positive exponent as a 2-tuple ( a fraction ) . <EoL>
<BoL> Returns this function as a 2-tuple representing a complex number . <EoL>
<BoL> Returns the first derivative of this function . <EoL>
<BoL> Returns the inverse function of `` exp ( x ) `` . <EoL>
<BoL> Return the imaginary part with a zero real part . <EoL>
<BoL> integrate ( f , var , ... ) <EoL>
<BoL> Returns this function in the form ( base , exponent ) . <EoL>
<BoL> Returns this function as a complex coordinate . <EoL>
<BoL> Returns the first derivative of the function . <EoL>
<BoL> Returns ` e^x ` , the inverse function of ` \log ( x ) ` . <EoL>
<BoL> Returns the real number with a zero imaginary part . <EoL>
<BoL> The square root function <EoL>
<BoL> Transform strings into instances of : class : ` Symbol ` class . <EoL>
<BoL> reduces expression by using known trig identities <EoL>
<BoL> Compute partial fraction decomposition of a rational function . <EoL>
<BoL> Compute partial fraction decomposition of a rational function and return the result in structured form . <EoL>
<BoL> Calculates the finite difference approximation of the derivative of requested order at `` x0 `` from points provided in `` x_list `` and `` y_list `` . <EoL>
<BoL> Are two geometrical entities similar . <EoL>
<BoL> Derivative by arrays . Supports both arrays and scalars . <EoL>
<BoL> Permutes the indices of an array . <EoL>
<BoL> Contraction of an array-like object on the specified axes . <EoL>
<BoL> Tensor product among scalars or array-like objects . <EoL>
<BoL> Short version of sympify for internal usage for __add__ and __eq__ methods where it is ok to allow some things ( like Python integers and floats ) in the expression . This excludes things ( like strings ) that are unwise to allow into such an expression . <EoL>
<BoL> Returns an approximation of a derivative of a function in the form of a finite difference formula . The expression is a weighted sum of the function at a number of discrete values of ( one of ) the independent variable ( s ) . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Method for inferring properties about objects . <EoL>
<BoL> Reassemble a full partial fraction decomposition from a structured result obtained by the function `` apart_list `` . <EoL>
<BoL> Context manager for assumptions <EoL>
<BoL> Convert a string version of a class name to the object . <EoL>
<BoL> Simplify an expression using assumptions . <EoL>
<BoL> Register a handler in the ask system . key must be a string and handler a class inheriting from AskHandler : : <EoL>
<BoL> Removes a handler from the ask system . Same syntax as register_handle <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Return True if a and b are structurally the same , else False . <EoL>
<BoL> Return atom-like quantities as far as substitution is concerned : Derivatives , Functions and Symbols . Don't return any 'atoms ' that are inside such quantities unless they also appear outside , too . <EoL>
<BoL> Convert the argument of Basic.find ( ) into a callable <EoL>
<BoL> Return expr as a Basic instance using strict sympify or raise a TypeError ; this is just a wrapper to _sympify , raising a TypeError instead of a SympifyError . <EoL>
<BoL> Return a boolean indicating whether `` i `` is SymPy iterable . <EoL>
<BoL> Return an iterator of the seq where keys are used to break ties in a conservative fashion : if , after applying a key , there are no ties then no other keys will be computed . <EoL>
<BoL> Skip yielding current node 's ( last yielded node 's ) subtrees . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> The second kind of Bell polynomials ( incomplete Bell polynomials ) . <EoL>
<BoL> Simplify bessel-type functions . <EoL>
<BoL> Function to expand binomial ( n , k ) when m is positive integer Also , n is self.args [ 0 ] and k is self.args [ 1 ] while using binomial ( n , k ) <EoL>
<BoL> Return a dictionary containing pairs : math : ` { ( k1 , k2 ) : C_kn } ` where : math : ` C_kn ` are binomial coefficients and : math : ` n=k1+k2 ` . <EoL>
<BoL> Return a list of binomial coefficients as rows of the Pascal's triangle . <EoL>
<BoL> process the generators of `` poly `` , returning the set of generators that have `` symbol `` . If there are two generators that are inverses of each other , prefer the one that has no denominator . <EoL>
<BoL> Return tuple ( i , d ) where `` i `` is independent of `` symbols `` and `` d `` contains symbols . <EoL>
<BoL> Given an expression assumed to be in the form `` F ( X , a..f ) = a*log ( b*X + c ) + d*X + f = 0 `` where X = g ( x ) and x = g^-1 ( X ) , return the Lambert solution if possible : `` x = g^-1 ( -c/b + ( a/d ) *W ( d/ ( a*b ) *exp ( c*d/a/b ) *exp ( -f/a ) ) ) `` . <EoL>
<BoL> Return `` a , b , X `` assuming `` arg `` can be written as `` a*X + b `` where `` X `` is a symbol-dependent factor and `` a `` and `` b `` are independent of `` symbol `` . <EoL>
<BoL> Returns the term in lhs which contains the most of the func-type things e.g . log ( log ( x ) ) wins over log ( x ) if both terms appear . <EoL>
<BoL> Return solution to `` f `` if it is a Lambert-type expression else raise NotImplementedError . <EoL>
<BoL> Given an expression , f , 3 tests will be done to see what type of composite bivariate it might be , options for u ( x , y ) are : : <EoL>
<BoL> Wrapper around expand that only uses the log hint . See the expand docstring for more information . <EoL>
<BoL> Compute the factorization of expression , `` f `` , into irreducibles . ( To factor an integer into primes , use `` factorint `` . ) <EoL>
<BoL> oot ( x , n , k ) - > Returns the k-th n-th root of x , defaulting to the principal root ( k=0 ) . <EoL>
<BoL> Separates variables in an expression , if possible . By default , it separates with respect to all symbols in an expression and collects constant coefficients that are independent of symbols . <EoL>
<BoL> Evaluates a block matrix expression <EoL>
<BoL> Cut a matrix expression into Blocks <EoL>
<BoL> Return the simplified version of bool1 , and the mapping of variables that makes the two expressions bool1 and bool2 represent the same logical behaviour for some correspondence between the variables of each . <EoL>
<BoL> Rewrite logic operators and relationals in terms of real sets . <EoL>
<BoL> Rewrite logic operators and relationals in terms of real sets . <EoL>
<BoL> Generator filtering args <EoL>
<BoL> Checks if a pair of minterms differs by only one bit . If yes , returns index , else returns -1 . <EoL>
<BoL> Return True if a binary term is satisfied by the given term . Used for recognizing prime implicants . <EoL>
<BoL> Converts a term in the expansion of a function from binary to its variable form ( for POS ) . <EoL>
<BoL> Converts a term in the expansion of a function from binary to its variable form ( for SOP ) . <EoL>
<BoL> Distributes info [ 1 ] over info [ 2 ] with respect to info [ 0 ] . <EoL>
<BoL> Helper to find logical predicates in BooleanFunctions . <EoL>
<BoL> Assign a 5-item fingerprint to each symbol in the equation : [ # of times it appeared as a Symbol , # of times it appeared as a Not ( symbol ) , # of times it appeared as a Symbol in an And or Or , # of times it appeared as a Not ( Symbol ) in an And or Or , sum of the number of arguments with which it appeared , counting Symbol as 1 and Not ( Symbol ) as 2 ] <EoL>
<BoL> Test whether or not an expression is of the required form . <EoL>
<BoL> After the truth table has been sufficiently simplified , use the prime implicant table method to recognize and eliminate redundant pairs , and return the essential arguments . <EoL>
<BoL> Reduces a set of minterms , if possible , to a simplified set of minterms with one less variable in the terms using QM method . <EoL>
<BoL> Like bool , return the Boolean value of an expression , e , which can be any instance of Boolean or bool . <EoL>
<BoL> Convert the argument to a builtin integer . <EoL>
<BoL> Return a list of the conjuncts in the expr s . <EoL>
<BoL> Return a list of the disjuncts in the sentence s . <EoL>
<BoL> Given a sentence s consisting of conjunctions and disjunctions of literals , return an equivalent sentence in CNF . <EoL>
<BoL> Given a sentence s consisting of conjunctions and disjunctions of literals , return an equivalent sentence in DNF . <EoL>
<BoL> Change > > , < < , and Equivalent into & , | , and ~ . That is , return an expression that is equivalent to s , but has only & , | , and ~ as logical operators . <EoL>
<BoL> Strips leading and trailing empty lines from a copy of ` s ` , then dedents , fills and returns it . <EoL>
<BoL> Return a list of the base-2 digits in the integer , `` k `` . <EoL>
<BoL> Test whether or not an expression is in conjunctive normal form . <EoL>
<BoL> Test whether or not an expression is in disjunctive normal form . <EoL>
<BoL> Returns True if expr is a literal , else False . <EoL>
<BoL> Checks if expr is in Negation Normal Form . <EoL>
<BoL> This function simplifies a boolean function to its simplified version in SOP or POS form . The return type is an Or or And object in SymPy . <EoL>
<BoL> Return an integer corresponding to the base-2 digits given by `` term `` . <EoL>
<BoL> Convert a propositional logical sentence s to conjunctive normal form . That is , of the form ( ( A | ~B | ... ) & ( B | C | ... ) & ... ) If simplify is True , the expr is evaluated to its simplest CNF form . <EoL>
<BoL> Convert a propositional logical sentence s to disjunctive normal form . That is , of the form ( ( A & ~B & ... ) | ( B & C & ... ) | ... ) If simplify is True , the expr is evaluated to its simplest DNF form . <EoL>
<BoL> Takes clauses in CNF format and puts them into an integer representation . <EoL>
<BoL> Converts expr to Negation Normal Form . <EoL>
<BoL> Return a generator of all possible configurations of the input variables , and the result of the boolean expression for those values . <EoL>
<BoL> Apply `` F `` to all expressions in an expression tree from the bottom up . If `` atoms `` is True , apply `` F `` even if there are no args ; if `` nonbasic `` is True , try to apply `` F `` to non-Basic objects . <EoL>
<BoL> The ` n ` -th B-spline at ` x ` of degree ` d ` with knots . <EoL>
<BoL> Return the `` len ( knots ) -d-1 `` B-splines at `` x `` of degree `` d `` with `` knots `` . <EoL>
<BoL> caching decorator . <EoL>
<BoL> cacheit + code to check cache consistency <EoL>
<BoL> clear cache content <EoL>
<BoL> print cache info <EoL>
<BoL> Find the Euler-Lagrange equations [ 1 ] _ for a given Lagrangian . <EoL>
<BoL> This is a decorator which can be used to mark functions as deprecated . It will result in a warning being emitted when the function is used . <EoL>
<BoL> Calculates the finite difference weights for an arbitrarily spaced one-dimensional grid ( `` x_list `` ) for derivatives at `` x0 `` of order 0 , 1 , ... , up to `` order `` using a recursive formula . Order of accuracy is at least `` len ( x_list ) - order `` , if `` x_list `` is defined correctly . <EoL>
<BoL> Return whether the function is decreasing in the given interval . <EoL>
<BoL> Return whether the function is increasing in the given interval . <EoL>
<BoL> Return whether the function is monotonic in the given interval . <EoL>
<BoL> Return whether the function is strictly decreasing in the given interval . <EoL>
<BoL> Return whether the function is strictly increasing in the given interval . <EoL>
<BoL> Finds the domain of the functions in ` finite_set ` in which the ` finite_set ` is not-emptyFinds the domain of an expression in any given interval <EoL>
<BoL> Tests the given function for periodicity in the given symbol.Return the checked period or raise an error . <EoL>
<BoL> Find singularities of a given function . <EoL>
<BoL> Helper for periodicity to find the period of a list of simpler functions . It uses the ` lcim ` method to find the least common period of all the functions . <EoL>
<BoL> decorator to smartly _sympify function arguments <EoL>
<BoL> Returns the intervals in the given domain for which the function is continuous . This method is limited by the ability to determine the various singularities and discontinuities of the given function . <EoL>
<BoL> Finds the range of a function in a given domain . This method is limited by the ability to determine the singularities and determine limits . <EoL>
<BoL> Returns the least common integral multiple of a list of numbers . <EoL>
<BoL> Compute LCM of a list of polynomials . <EoL>
<BoL> Compute the limit of `` e ( z ) `` at the point `` z0 `` . <EoL>
<BoL> Denest and combine rational expressions using symbolic methods . <EoL>
<BoL> Cancel common factors in a rational function `` f `` . <EoL>
<BoL> Return the printed output of func ( ) . <EoL>
<BoL> Given linear difference operator L of order ' k ' and homogeneous equation Ly = 0 we want to compute kernel of L , which is a set of ' k ' sequences : a ( n ) , b ( n ) , ... z ( n ) . <EoL>
<BoL> This function computes the principal cube root of ` arg ` , so it 's just a shortcut for ` arg**Rational ( 1 , 3 ) ` . <EoL>
<BoL> Converts an expr to a string of c code <EoL>
<BoL> Find the centroid ( center of mass ) of the collection containing only Points , Segments or Polygons . <EoL>
<BoL> Generates Chebyshev polynomial of the first kind of degree ` n ` in ` x ` . <EoL>
<BoL> Generates Chebyshev polynomial of the second kind of degree ` n ` in ` x ` . <EoL>
<BoL> Checks whether expression ` expr ` satisfies all assumptions . <EoL>
<BoL> Substitutes `` sol `` into `` ode `` and checks that the result is `` 0 `` . <EoL>
<BoL> Checks if the given solution satisfies the partial differential equation . <EoL>
<BoL> Checks whether sol is a solution of equation f == 0 . <EoL>
<BoL> Returns a tuple of possible pdsolve ( ) classifications for a PDE . <EoL>
<BoL> Return the subset of points from a set of points that were the closest to each other in the 2D plane . <EoL>
<BoL> Check arguments to __new__ and raise exception if any problems found . <EoL>
<BoL> Construct an attribute value from argument passed to `` __new__ ( ) `` . <EoL>
<BoL> Create a Sympy Tuple object from an iterable , converting Python strings to AST strings . <EoL>
<BoL> Get the constructor function for an attribute by name . <EoL>
<BoL> Get instance 's attributes as dict of keyword arguments . <EoL>
<BoL> Return a CodeBlock with topologically sorted assignments so that variables are assigned before they are used . <EoL>
<BoL> Returns the parameters of the Attribute with name `` looking_for `` in self.attrs <EoL>
<BoL> Convenience method for creating a Declaration instance . <EoL>
<BoL> Alt . constructor with type deduction from `` Type.from_expr `` . <EoL>
<BoL> Casts a value to the data type of the instance . <EoL>
<BoL> Casts without checking if out of bounds or subnormal . <EoL>
<BoL> Deduces type from an expression or a `` Symbol `` . <EoL>
<BoL> Casts without checking if out of bounds or subnormal . <EoL>
<BoL> Create 'lhs op= rhs ' . <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` allocated ( ... ) '' <EoL>
<BoL> Convenience function for creating a Variable instance for a Fortran array <EoL>
<BoL> Creates an Attribute `` bind_C `` with a name <EoL>
<BoL> Creates a 'dimension ' Attribute with ( up to 7 ) extents . <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` lbound ( ... ) '' <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` reshape ( ... ) '' <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` shape ( ... ) '' <EoL>
<BoL> Creates an AST node for a function call to Fortran 's `` size ( ... ) '' <EoL>
<BoL> Compute GCD and cofactors of `` f `` and `` g `` . <EoL>
<BoL> A non-greedy collection of terms with similar number coefficients in an Add expr . <EoL>
<BoL> Return True ( all True ) , False ( any False ) or None . <EoL>
<BoL> Computes the nth Fibonacci number as an integer , for integer n . <EoL>
<BoL> Return tuple used in permutation and combination counting . Input is a dictionary giving items with counts as values or a sequence of items ( which need not be sorted ) . <EoL>
<BoL> Returns a tuple of integers ` ( p , q ) ` such that ` p/q = B_n ` exactly , where ` B_n ` denotes the ` n ` -th Bernoulli number . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Wrapper around expand that only uses the mul hint . See the expand docstring for more information . <EoL>
<BoL> Return the number of combinations of `` n `` items taken `` k `` at a time . <EoL>
<BoL> Return the number of permutations of `` n `` items taken `` k `` at a time . <EoL>
<BoL> Return the number of `` k `` -sized partitions of `` n `` items . <EoL>
<BoL> Memo decorator for sequences defined by recurrence <EoL>
<BoL> Return Stirling number ` S ( n , k ) ` of the first or second ( default ) kind . <EoL>
<BoL> The block <EoL>
<BoL> Simplify combinatorial expressions . <EoL>
<BoL> The total number of entries in the matrix . <EoL>
<BoL> Most attribute access is passed straight through to the stored matrix <EoL>
<BoL> Ensure that row_slice and col_slice do n't have ` None ` in their arguments . Any integers are converted to slices of length 1Return the index in _mat corresponding to the ( i , j ) position in the matrix . <EoL>
<BoL> If ` mat ` is a Matrix or is matrix-like , return a Matrix or MatrixWrapper object . Otherwise ` mat ` is passed through without modification . <EoL>
<BoL> Simplifies the given expression.Return the choice that has the fewest ops . In case of a tie , the expression listed first is selected . <EoL>
<BoL> Return integer after making positive and validating against n . <EoL>
<BoL> A decorator for binary special methods to handle _op_priority . <EoL>
<BoL> Get the type of the result when combining matrices of different types . <EoL>
<BoL> Return a representation ( integer or expression ) of the operations in expr . <EoL>
<BoL> Return a key that can be used for sorting . <EoL>
<BoL> Recursively denest iterable containers . <EoL>
<BoL> Make all Add sub-expressions canonical wrt sign . <EoL>
<BoL> Return a bool indicating whether the error between z1 and z2 is < = tol . <EoL>
<BoL> A helper for ordered ( ) which returns the node count of `` e `` which for Basic objects is the number of Basic nodes in the expression tree but for other objects is 1 ( unless the object is an iterable or dict for which the sum of nodes is returned ) . <EoL>
<BoL> Compute functional composition `` f ( g ) `` . <EoL>
<BoL> Return the nth composite number , with the composite numbers indexed as composite ( 1 ) = 4 , composite ( 2 ) = 6 , etc ... . <EoL>
<BoL> Return the number of positive composite numbers less than or equal to n. The first positive composite is 4 , i.e . compositepi ( 4 ) = 1 . <EoL>
<BoL> Return either a special return value or the tuple , ( function , limits , orientation ) . This code is common to both ExprWithLimits and AddWithLimits . <EoL>
<BoL> Process the list of symbols and convert them to canonical limits , storing them as Tuple ( symbol , lower , upper ) . The orientation of the function is also returned when the upper limit is missing so ( x , 1 , None ) becomes ( x , None , 1 ) and the orientation is changed . <EoL>
<BoL> Takes an expression containing a piecewise function and returns the expression in piecewise form . In addition , any ITE conditions are rewritten in negation normal form and simplified . <EoL>
<BoL> Sift the sequence , `` seq `` according to `` keyfunc `` . <EoL>
<BoL> Compute the Gosper 's normal form of `` f `` and `` g `` . <EoL>
<BoL> Gosper 's hypergeometric summation algorithm . <EoL>
<BoL> Compute Gosper 's hypergeometric term for `` f `` . <EoL>
<BoL> Given combinatorial term f ( k ) simplify its consecutive term ratio i.e . <EoL>
<BoL> Construct polynomials from expressions . <EoL>
<BoL> Compute the product . <EoL>
<BoL> Remove common factors from terms in all arguments without changing the underlying structure of the expr . No expansion or simplification ( and no processing of non-commutatives ) is performed . <EoL>
<BoL> Compute polynomial quotient of `` f `` and `` g `` . <EoL>
<BoL> Compute the summation of f with respect to symbols . <EoL>
<BoL> Returns ( res , cond ) . Sums from a to oo . <EoL>
<BoL> Solves a given inequality or equation with set as output <EoL>
<BoL> Tries to perform the summation using the telescopic property <EoL>
<BoL> Returns the direct summation of the terms of a telescopic sum <EoL>
<BoL> Dispatch function on the types of the inputs <EoL>
<BoL> Return True , False or None according to x . <EoL>
<BoL> Construct a minimal domain for the list of coefficients . <EoL>
<BoL> Decorator that converts any tuple in the function arguments into a Tuple . <EoL>
<BoL> Compute GCD of coefficients of `` f `` . <EoL>
<BoL> Return an iterator over the convergents of a continued fraction ( cf ) . <EoL>
<BoL> Return continued fraction expansion of x as iterator . <EoL>
<BoL> Find the periodic continued fraction expansion of a quadratic irrational . <EoL>
<BoL> Reduce a continued fraction to a rational or quadratic irrational . <EoL>
<BoL> The convex hull surrounding the Points contained in the list of entities.Return positive if p-q-r are clockwise , neg if ccw , zero if collinear . <EoL>
<BoL> Performs convolution by determining the type of desired convolution using hints . <EoL>
<BoL> Performs linear convolution using Fast Fourier Transform . <EoL>
<BoL> Performs dyadic ( *bitwise-XOR* ) convolution using Fast Walsh Hadamard Transform . <EoL>
<BoL> Performs linear convolution using Number Theoretic Transform . <EoL>
<BoL> Performs Subset Convolution of given sequences . <EoL>
<BoL> Returns the covering product of given sequences . <EoL>
<BoL> Performs the Discrete Fourier Transform ( **DFT** ) in the complex domain . <EoL>
<BoL> Performs the Walsh Hadamard Transform ( **WHT** ) , and uses Hadamard ordering for the sequence . <EoL>
<BoL> Returns the intersecting product of given sequences . <EoL>
<BoL> Performs the Möbius Transform for subset lattice with indices of sequence as bitmasks . <EoL>
<BoL> Performs the Number Theoretic Transform ( **NTT** ) , which specializes the Discrete Fourier Transform ( **DFT** ) over quotient ring ` Z/pZ ` for prime ` p ` instead of complex numbers ` C ` . <EoL>
<BoL> Compute the unitary , ordinary-frequency cosine transform of ` f ` , defined as <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Return the number of roots of `` f `` in `` [ inf , sup ] `` interval . <EoL>
<BoL> Returns the first derivative of this function <EoL>
<BoL> Return the list of arguments in sorted order according to their value numbers . <EoL>
<BoL> Return a dict whose keys are function numbers . <EoL>
<BoL> Return the value number for the given argument . <EoL>
<BoL> Return a set of functions each of which whose argument list contains ` argset ` , optionally filtered only to contain functions in ` restrict_to_funcset ` . <EoL>
<BoL> Remove the function func_i from the argument to function mapping . <EoL>
<BoL> Update a function with a new set of arguments . <EoL>
<BoL> Return True if the leading Number is negative . <EoL>
<BoL> Move expressions that are in the form ( symbol , expr ) out of the expressions and sort them into the replacements using the reps_toposort . <EoL>
<BoL> Only yield elements from ` iterator ` that do not occur in ` exclude ` . <EoL>
<BoL> Recognize and extract common subexpressions of function arguments within a set of function calls . For instance , for the following function calls : : <EoL>
<BoL> Generate an infinite stream of Symbols consisting of a prefix and increasing subscripts provided that they do not occur in ` exclude ` . <EoL>
<BoL> Find optimization opportunities in Adds , Muls , Pows and negative coefficient Muls <EoL>
<BoL> Postprocess an expression after common subexpression elimination to return the expression to canonical sympy form . <EoL>
<BoL> Preprocess an expression to optimize for common subexpression elimination . <EoL>
<BoL> Sort replacements ` r ` so ( k1 , v1 ) appears before ( k2 , v2 ) if k2 is in v1 's free symbols . This orders items in the way that cse returns its results ( hence , in order to use the replacements in a substitution option it would make sense to reverse the order ) . <EoL>
<BoL> Topological sort of graph 's vertices . <EoL>
<BoL> Perform raw CSE on expression tree , taking opt_subs into account . <EoL>
<BoL> Replace 1*-1*x with -x . <EoL>
<BoL> Replace y - x with - ( x - y ) if -1 can be extracted from y - x . <EoL>
<BoL> Return s if s is a Symbol , else if s is a string , return either the matching_symbol if the names are the same or else a new symbol with the same assumptions as the matching symbol ( or the assumptions as provided ) . <EoL>
<BoL> C++ equivalent of : func : ` sympy.ccode ` . <EoL>
<BoL> For a given iterated sequence , return a generator that gives the length of the iterated cycle ( lambda ) and the length of terms before the cycle begins ( mu ) ; if `` values `` is True then the terms of the sequence will be returned instead . The sequence is started with value `` x0 `` . <EoL>
<BoL> Generates cyclotomic polynomial of order ` n ` in ` x ` . <EoL>
<BoL> Computes General functional decomposition of `` f `` . Given an expression `` f `` , returns a list `` [ f_1 , f_2 , ... , f_n ] `` , where : : f = f_1 o f_2 o ... f_n = f_1 ( f_2 ( ... f_n ) ) <EoL>
<BoL> Compute functional decomposition of `` f `` . <EoL>
<BoL> After the function finishes , resets the value of mpmath.mp.dps to the value it had before the function was run . <EoL>
<BoL> Adds metadata about the dependencies which need to be met for doctesting the docstrings of the decorated objects . <EoL>
<BoL> Create a property , where the lookup is stored in `` storage `` <EoL>
<BoL> Append `` obj `` 's name to global `` __all__ `` variable ( call site ) . <EoL>
<BoL> Apply `` func `` to sub -- elements of an object , including : class : ` Add ` . <EoL>
<BoL> A factory for `` threaded `` decorators . <EoL>
<BoL> Apply `` func `` to sub -- elements of an object , excluding : class : ` Add ` . <EoL>
<BoL> decorator to _sympify ` arg ` argument for function ` func ` <EoL>
<BoL> Return the degree value for the given radians ( pi = 180 degrees ) . <EoL>
<BoL> Return the degree of `` f `` in the given variable . <EoL>
<BoL> Return a list of degrees of `` f `` in all variables . <EoL>
<BoL> Compares the elements of a list/tuple ` a ` and a list/tuple ` b ` . ` _compare_sequence ( ( 1,2 ) , [ 1 , 2 ] ) ` is True , whereas ` ( 1,2 ) == [ 1 , 2 ] ` is False <EoL>
<BoL> Return a matrix as a Matrix , otherwise return x . <EoL>
<BoL> Returns True if x is zero . <EoL>
<BoL> Create a sparse , diagonal matrix from a list of diagonal values . <EoL>
<BoL> Create square identity matrix n x n <EoL>
<BoL> Compute Hessian matrix for a function f wrt parameters in varlist which may be given as a sequence or a row/column vector . A list of constraints may optionally be given . <EoL>
<BoL> Create a Jordan block : <EoL>
<BoL> Converts python list of SymPy expressions to a NumPy array . <EoL>
<BoL> Converts SymPy 's matrix to a NumPy array . <EoL>
<BoL> Return the Hadamard product ( elementwise product ) of A and B <EoL>
<BoL> Returns a matrix of ones with `` rows `` rows and `` cols `` columns ; if `` cols `` is omitted a square matrix will be returned . <EoL>
<BoL> Returns a rotation matrix for a rotation of theta ( in radians ) about the 1-axis . <EoL>
<BoL> Returns a rotation matrix for a rotation of theta ( in radians ) about the 2-axis . <EoL>
<BoL> Returns a rotation matrix for a rotation of theta ( in radians ) about the 3-axis . <EoL>
<BoL> Create a numpy ndarray of symbols ( as an object array ) . <EoL>
<BoL> Compute Wronskian for [ ] of functions <EoL>
<BoL> Returns a matrix of zeros with `` rows `` rows and `` cols `` columns ; if `` cols `` is omitted a square matrix will be returned . <EoL>
<BoL> Matrix Determinant <EoL>
<BoL> Return `` det ( M ) `` assuming that either there are lots of zeros or the size of the matrix is small . If this assumption is not met , then the normal Matrix.det function will be used with method = `` method `` . <EoL>
<BoL> This is a helper function to dsolve and pdsolve in the ode and pde modules . <EoL>
<BoL> Prepare expr for solving by making sure that differentiation is done so that only func remains in unevaluated derivatives and ( if hint does n't end with _Integral ) that doit is applied to all other derivatives . <EoL>
<BoL> Returns the order of a given differential equation with respect to func . <EoL>
<BoL> Merge dictionaries into a single dictionary . <EoL>
<BoL> Difference Operator . <EoL>
<BoL> The digamma function is the first derivative of the loggamma function i.e , <EoL>
<BoL> Utility function for the Discrete Fourier Transform <EoL>
<BoL> Utility function for performing Möbius Transform using Yate 's Dynamic Programming method <EoL>
<BoL> Utility function for the Number Theoretic Transform <EoL>
<BoL> Utility function for the Walsh Hadamard Transform <EoL>
<BoL> Return a list of length `` bits `` corresponding to the binary value of `` n `` with small bits to the right ( last ) . <EoL>
<BoL> Test if n is a prime number ( True ) or not ( False ) . For n < 2^64 the answer is definitive ; larger n values have a small probability of actually being pseudoprimes . <EoL>
<BoL> Returns the smallest primitive root or None <EoL>
<BoL> Compute the discrete logarithm of `` a `` to the base `` b `` modulo `` n `` . <EoL>
<BoL> Compute discriminant of `` f `` . <EoL>
<BoL> Compute polynomial division of `` f `` and `` g `` . <EoL>
<BoL> Return the number of divisors of `` n `` . If `` modulus `` is not 1 then only those that are divisible by `` modulus `` are counted . <EoL>
<BoL> Return all divisors of n sorted from 1..n by default . If generator is `` True `` an unordered generator is returned . <EoL>
<BoL> Runs doctests in all \*.py files in the sympy directory which match any of the given strings in `` paths `` or all tests if paths= [ ] . <EoL>
<BoL> Return the list of denominators of an Egyptian fraction expansion [ 1 ] _ of the said rational ` r ` . <EoL>
<BoL> Careful ! any evalf of polar numbers is flaky <EoL>
<BoL> Careful ! any evalf of polar numbers is flaky <EoL>
<BoL> Turn all numbers in eq into their polar equivalents ( under the standard choice of argument ) . <EoL>
<BoL> If p denotes the projection from the Riemann surface of the logarithm to the complex line , return a simplified version eq ' of ` eq ` such that p ( eq ' ) == p ( eq ) . <EoL>
<BoL> Find the greatest integer m such that p**m divides n . <EoL>
<BoL> Return `` ( b , e ) `` such that `` n `` == `` b**e `` if `` n `` is a perfect power ; otherwise return `` False `` . <EoL>
<BoL> Split ARG into two parts , a `` rest '' and a multiple of I*pi/2 . <EoL>
<BoL> Returns this function as a complex coordinate . <EoL>
<BoL> Returns the first derivative of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> With no = 1 , computes ceiling ( expr ) With no = -1 , computes floor ( expr ) <EoL>
<BoL> Return True if all args are True , False if they are all False , else None . <EoL>
<BoL> Return the real nth-root of arg if possible . If n is omitted then all instances of ( -n ) ** ( 1/odd ) will be changed to -n** ( 1/odd ) ; this will only create a real root of a principal root -- the presence of other factors may cause the result to not be real . <EoL>
<BoL> Return interval B as intervals that are covered by A ( keyed to k ) and all other intervals of B not covered by A keyed to -1 . <EoL>
<BoL> Return function name of ` x ` ( if defined ) else the ` type ( x ) ` . If short is True and there is a shorter alias for the result , return the alias . <EoL>
<BoL> Yield unique elements from `` seq `` as an iterator . The second parameter `` result `` is used internally ; it is not necessary to pass anything for this . <EoL>
<BoL> Split ARG into two parts , a `` rest '' and a multiple of pi/2 . <EoL>
<BoL> When arg is a Number times pi ( e.g . 3*pi/2 ) then return the Number normalized to be in the range [ 0 , 2 ] , else None . <EoL>
<BoL> Returns x , y , g such that g = x*a + y*b = gcd ( a , b ) . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Subclasses should implement this method and should return True if other is on the boundaries of self ; False if not on the boundaries of self ; None if a determination can not be made . <EoL>
<BoL> Do not treat NaN and infinities as valid polynomial coefficients . <EoL>
<BoL> Sort the numerical roots putting the real roots first , then sorting according to real and imaginary parts . If `` separated `` is True , then the real and imaginary roots will be returned in two lists , respectively . <EoL>
<BoL> Return a symbol which , when printed , will have a name unique from any other already in the expressions given . The name is made unique by prepending underscores ( default ) but this can be customized with the keyword 'modify ' . <EoL>
<BoL> Return `` dy/dx `` assuming that `` eq == 0 `` . <EoL>
<BoL> Return the matrix to rotate a 2-D point about the origin by `` angle `` . <EoL>
<BoL> Return the matrix to multiply a 2-D point 's coordinates by x and y . <EoL>
<BoL> Return the matrix to translate a 2-D point by x and y . <EoL>
<BoL> Allocates and initializes the partition stack . <EoL>
<BoL> Returns the number of partitions of a multiset whose components have the multiplicities given in `` multiplicities `` . <EoL>
<BoL> Returns the number of partitions of a multiset whose elements have the multiplicities given in `` multiplicities `` . <EoL>
<BoL> Useful for usderstanding/debugging the algorithms . Not generally activated in end-user code . <EoL>
<BoL> Decrements part ( a subrange of pstack ) , if possible , returning True iff the part was successfully decremented . <EoL>
<BoL> Decrements part , while respecting size constraint . <EoL>
<BoL> Decrements part ( a subrange of pstack ) , if possible , returning True iff the part was successfully decremented . <EoL>
<BoL> Decrements part ( a subrange of pstack ) , if possible , returning True iff the part was successfully decremented . <EoL>
<BoL> Enumerate the partitions of a multiset . <EoL>
<BoL> Enumerate the partitions of a multiset with lb < num ( parts ) <EoL>
<BoL> Enumerate multiset partitions with no more than `` ub `` parts . <EoL>
<BoL> Returns True if a new part has been created , and adjusts pstack , f and lpart as needed . <EoL>
<BoL> Return current top part on the stack , as a slice of pstack . <EoL>
<BoL> Define value oriented equality , which is useful for testers <EoL>
<BoL> Defined for consistency with __eq__ <EoL>
<BoL> Use with multiset_partitions_taocp to enumerate the ways a number can be expressed as a product of factors . For this usage , the exponents of the prime factors of a number are arguments to the partition enumerator , while the corresponding prime factors are input here . <EoL>
<BoL> Return a list of lists to represent the partition . <EoL>
<BoL> Enumerates partitions of a multiset . <EoL>
<BoL> Helper for MultisetPartitionTraverser.count_partitions that creates a key for `` part `` , that only includes information which can affect the count for that part . ( Any irrelevant information just reduces the effectiveness of dynamic programming . ) <EoL>
<BoL> Manipulate parts of an expression selected by a path . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Returns the inverse of this function . <EoL>
<BoL> Helper for evalf_add . Adds a list of ( mpfval , accuracy ) terms . <EoL>
<BoL> Return smallest integer , b , such that |n|/2**b < 1 . <EoL>
<BoL> Returns ( h , g , p ) where -- h is : > 0 for convergence of rate 1/factorial ( n ) **h < 0 for divergence of rate factorial ( n ) ** ( -h ) = 0 for geometric or polynomial convergence or divergence <EoL>
<BoL> Chop off tiny real or complex parts . <EoL>
<BoL> Returns relative accuracy of a complex number with given accuracies for the real and imaginary parts . The relative accuracy is defined in the complex norm sense as ||z|+|error|| / |z| where error is equal to ( real absolute error ) + ( imag absolute error ) *i . <EoL>
<BoL> Return the number of bits required to represent n decimals accurately . <EoL>
<BoL> Change all Float entries in ` subs ` to have precision prec . <EoL>
<BoL> This function handles sin and cos of complex arguments . <EoL>
<BoL> Fast approximation of log2 ( x ) for an mpf value tuple x . <EoL>
<BoL> Create a raw mpf from an integer . If no precision is specified , the mantissa is stored exactly . <EoL>
<BoL> Create raw mpf from ( man , exp ) pair . <EoL>
<BoL> Create a raw mpf from a rational number p/q , round if necessary . <EoL>
<BoL> no = 0 for real part , no = 1 for imaginary part <EoL>
<BoL> Sum a rapidly convergent infinite hypergeometric series with given general term , e.g . <EoL>
<BoL> A new mpf can be created from a Python float , an int , a or a decimal string representing a number in floating-point format . <EoL>
<BoL> Return abs ( s ) of the raw mpf s , rounded to the specified precision . The prec argument can be omitted to generate an exact result . <EoL>
<BoL> Add the two raw mpf values s and t . <EoL>
<BoL> Computation of Bernoulli numbers ( numerically ) <EoL>
<BoL> Compare the raw mpfs s and t. Return -1 if s < t , 0 if s == t , and 1 if s > t. ( Same convention as Python 's cmp ( ) function . ) <EoL>
<BoL> Compute the natural logarithm of the mpf value x . If x is negative , ComplexResult is raised . <EoL>
<BoL> Multiply two raw mpfs <EoL>
<BoL> Negate a raw mpf ( return -s ) , rounding the result to the specified precision . The prec argument can be omitted to do the operation exactly . <EoL>
<BoL> Compute s**t. Raises ComplexResult if s is negative and t is fractional . <EoL>
<BoL> Compute s**n , where s is a raw mpf and n is a Python integer . <EoL>
<BoL> Quickly multiply the raw mpf s by 2**n without rounding . <EoL>
<BoL> Compute the square root of a nonnegative mpf value . The result is correctly rounded . <EoL>
<BoL> Calculate bit size of the nonnegative integer n . <EoL>
<BoL> Create a raw mpf tuple with value ( -1 ) **sign * man * 2**exp and normalized mantissa . <EoL>
<BoL> Computes the sum <EoL>
<BoL> Return number of accurate decimals that can be represented with a precision of n bits . <EoL>
<BoL> Return a and b if v matches a + I*b where b is not zero and a and b are Numbers , else None . If ` or_real ` is True then 0 will be returned for ` b ` if ` v ` is a real number . <EoL>
<BoL> Calculates <EoL>
<BoL> Performs tanh-sinh quadrature . The call <EoL>
<BoL> Return an mpf representing a power of two with magnitude `` mag `` and -1 for precision . Or , if `` mag `` is a scaled_zero tuple , then just remove the sign from within the list that it was initially wrapped in . <EoL>
<BoL> Convert a raw mpf to the nearest int . <EoL>
<BoL> Control automatic evaluation <EoL>
<BoL> Wrapper around expand that only uses the complex hint . See the expand docstring for more information . <EoL>
<BoL> Wrapper around expand that only uses the func hint . See the expand docstring for more information . <EoL>
<BoL> Wrapper around expand that only uses the multinomial hint . See the expand docstring for more information . <EoL>
<BoL> Wrapper around expand that only uses the power_base hint . <EoL>
<BoL> Wrapper around expand that only uses the power_exp hint . <EoL>
<BoL> Wrapper around expand that only uses the trig hint . See the expand docstring for more information . <EoL>
<BoL> Return integer `` i `` such that .1 < = x/10**i < 1 <EoL>
<BoL> Return ( a - b ) .evalf ( 2 ) if a and b are comparable , else None . This should only be used when a and b are already sympified . <EoL>
<BoL> Matrix transpose <EoL>
<BoL> Turn a* [ X , Y ] into [ a*X , a*Y ] <EoL>
<BoL> Apply a rule down a tree running it on the bottom nodes first . <EoL>
<BoL> Convert sequence of numbers into pairs of low-high pairs <EoL>
<BoL> Only apply rule if condition is true <EoL>
<BoL> Flatten a BlockMatrix of BlockMatrices <EoL>
<BoL> Try each of the rules until one works . Then stop . <EoL>
<BoL> Apply a rule repeatedly until it has no effect <EoL>
<BoL> Reblock a BlockMatrix so that it has 2x2 blocks of block matrices <EoL>
<BoL> Apply rules based on the expression type <EoL>
<BoL> Rule to unpack singleton args <EoL>
<BoL> Combine KronekeckerProduct with expression . <EoL>
<BoL> Flatten T ( a , b , T ( c , d ) , T2 ( e ) ) to T ( a , b , c , d , T2 ( e ) ) <EoL>
<BoL> Return the elementwise ( aka Hadamard ) product of matrices . <EoL>
<BoL> Strategy for canonicalization <EoL>
<BoL> Turns an A containing Bs into a B of As <EoL>
<BoL> The Kronecker product of two or more arguments . <EoL>
<BoL> Create a rule to conglomerate identical argsConglomerate together identical args x + x - > 2x <EoL>
<BoL> Merge explicit MatrixBase arguments <EoL>
<BoL> Create a rule to remove identitiesRemove identities <EoL>
<BoL> Create a rule to sort by a key function <EoL>
<BoL> Merge explicit MatrixBase arguments <EoL>
<BoL> factor matrices only if they are square <EoL>
<BoL> Remove Identities from a MatMul <EoL>
<BoL> Checks for valid shapes for args of MatMul <EoL>
<BoL> Y * X * X.I - > Y <EoL>
<BoL> Collapse nested matrix slices <EoL>
<BoL> Trace of a Matrix . Sum of the diagonal elements <EoL>
<BoL> Initialize Factors from dict or expr . <EoL>
<BoL> Return the underlying expression . <EoL>
<BoL> Return `` self `` and `` other `` with `` gcd `` removed from each . This is optimized for the case when there are many factors in common . <EoL>
<BoL> Return Factors of `` gcd ( self , other ) `` . The keys are the intersection of factors with the minimum exponent for each factor . <EoL>
<BoL> Return Factors of `` lcm ( self , other ) `` which are the union of factors with the maximum exponent for each factor . <EoL>
<BoL> Return Factors of `` self * other `` . <EoL>
<BoL> Return `` self `` and `` other `` with `` gcd `` removed from each . The only differences between this and method `` div `` is that this is 1 ) optimized for the case when there are few factors in common and 2 ) this does not raise an error if `` other `` is zero . <EoL>
<BoL> Return self raised to a non-negative integer power . <EoL>
<BoL> Return numerator Factor of `` self / other `` . <EoL>
<BoL> Return denominator Factors of `` self / other `` . <EoL>
<BoL> Helper function for : func : ` gcd_terms ` . <EoL>
<BoL> Return `` eq `` with non-commutative objects replaced with Dummy symbols . <EoL>
<BoL> Return the subsequence that is a common start of sequences in `` seqs `` . <EoL>
<BoL> Return the subsequence that is a common ending of sequences in `` seqs `` . <EoL>
<BoL> Decompose power into symbolic base and integer exponent . <EoL>
<BoL> Decompose power into symbolic base and rational exponent . <EoL>
<BoL> Compute the GCD of `` terms `` and put them together.eplace nc portions of each term with a unique Dummy symbols and return the replacements to restore them <EoL>
<BoL> Returns a generator of the n-sized variations of `` seq `` ( size N ) . `` repetition `` controls whether items in `` seq `` can appear more than once ; <EoL>
<BoL> Simplifies exponential / trigonometric / hyperbolic functions . <EoL>
<BoL> Compute polynomial exact quotient of `` f `` and `` g `` . <EoL>
<BoL> Helper function for antidivisors which generates the antidivisors . <EoL>
<BoL> Helper function for divisors which generates the divisors . <EoL>
<BoL> Return the value of n and either a 0 ( indicating that factorization up to the limit was complete ) or else the next near-prime that would have been tested.eturn n , d if the sqrt ( n ) was n't reached yet , else n , 0 indicating that factoring is done . <EoL>
<BoL> Helper function for integer factorization . <EoL>
<BoL> Helper function for udivisors which generates the unitary divisors . <EoL>
<BoL> Return the number of antidivisors [ 1 ] _ of `` n `` . <EoL>
<BoL> Return all antidivisors of n sorted from 1..n by default . <EoL>
<BoL> Calculate core ( n , t ) = ` core_t ( n ) ` of a positive integer n <EoL>
<BoL> Return a list of the digits of n in base b . The first element in the list is b ( or -b if n is negative ) . <EoL>
<BoL> Return a tuple containing x = floor ( y** ( 1/n ) ) and a boolean indicating whether the result is exact ( that is , whether x**n == y ) . <EoL>
<BoL> Return the ith prime greater than n . <EoL>
<BoL> Use Pollard 's p-1 method to try to extract a nontrivial factor of `` n `` . Either a divisor ( perhaps composite ) or `` None `` is returned . <EoL>
<BoL> Use Pollard 's rho method to try to extract a nontrivial factor of `` n `` . <EoL>
<BoL> Return a sorted list of n 's prime factors , ignoring multiplicity and any composite factor that remains if the limit was set too low for complete factorization . Unlike factorint ( ) , primefactors ( ) does not return -1 or 0 . <EoL>
<BoL> Generate a list of all prime numbers in the range [ a , b ) . <EoL>
<BoL> Return the B-smooth and B-power smooth values of n . <EoL>
<BoL> Return a list of [ m , ( p , ( M , sm ( p + m ) , psm ( p + m ) ) ) ... ] where : <EoL>
<BoL> Count the number of trailing zero digits in the binary representation of n , i.e . determine the largest power of 2 that divides n . <EoL>
<BoL> Return the number of unitary divisors of `` n `` . <EoL>
<BoL> Return all unitary divisors of n sorted from 1..n by default . If generator is `` True `` an unordered generator is returned . <EoL>
<BoL> Compute a list of irreducible factors of `` f `` . <EoL>
<BoL> Add fact k=v to the knowledge base . <EoL>
<BoL> Update the KB with all the implications of a list of facts . <EoL>
<BoL> Compile rules into internal lookup tables <EoL>
<BoL> Logic from string with space around & and | but none after ! . <EoL>
<BoL> split proved rules into alpha and beta chains <EoL>
<BoL> Return the literal fact of an atom . <EoL>
<BoL> apply additional beta-rules ( And conditions ) to already-built alpha implication tables <EoL>
<BoL> deduce all implications <EoL>
<BoL> build prerequisites table from rules <EoL>
<BoL> Computes the transitive closure of a list of implications <EoL>
<BoL> Return a dictionary containing assumptions with values not matching those of the passed assumptions . <EoL>
<BoL> Return an image of the set under transformation `` f `` . <EoL>
<BoL> Normalize a Real Set ` theta ` in the Interval [ 0 , 2*pi ) . <EoL>
<BoL> Return the subset of points from a set of points that were the furthest apart from each other in the 2D plane . <EoL>
<BoL> Converts an expr to a string of fortran code <EoL>
<BoL> Construct new rational function field returning ( field , x1 , ... , xn ) . <EoL>
<BoL> Construct an isomorphism between two number fields . <EoL>
<BoL> Computes Fourier sine/cosine series expansion . <EoL>
<BoL> Compute the unitary , ordinary-frequency Fourier transform of ` f ` , defined as <EoL>
<BoL> Generates Formal Power Series of f . <EoL>
<BoL> Returns a pair with expression 's numerator and denominator . If the given expression is not a fraction then this function will return the tuple ( expr , 1 ) . <EoL>
<BoL> Attempt to simplify expression by using transformation rules given in the algorithm by Fu et al . <EoL>
<BoL> Make all Rationals in expr Floats except those in exponents ( unless the exponents flag is set to True ) . <EoL>
<BoL> Generates Hermite polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Return spline of degree `` d `` , passing through the given `` X `` and `` Y `` values . <EoL>
<BoL> Jacobi polynomial : math : ` P_n^ { \left ( \alpha , \beta\right ) } ( x ) ` <EoL>
<BoL> Zeros of the spherical Bessel function of the first kind . <EoL>
<BoL> Generates Laguerre polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Generates Legendre polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Return a number P such that G ( x*exp ( I*P ) ) == G ( x ) . <EoL>
<BoL> Get the defining integrand D ( s ) . <EoL>
<BoL> Expand self into a polynomial . Nu is guaranteed to be Integer . <EoL>
<BoL> Rewrite self in terms of ordinary Bessel functions . <EoL>
<BoL> Coefficients for the spherical Bessel functions . <EoL>
<BoL> Construct c*b1 + d*b2 . <EoL>
<BoL> The trigamma function is the second derivative of the loggamma function i.e , <EoL>
<BoL> An expression for F ( exp_polar ( 2*I*pi*n ) *x ) , |x| > 1 . <EoL>
<BoL> An expression for F ( exp_polar ( 2*I*pi*n + pi*I ) *x ) , |x| > 1 . <EoL>
<BoL> An expression for F ( x ) which holds for |x| < 1 . <EoL>
<BoL> An expression for F ( -x ) which holds for |x| < 1 . <EoL>
<BoL> Compute limit x- > xlim . <EoL>
<BoL> Turn an iterable argument V into a Tuple and unpolarify , since both hypergeometric and meijer g-functions are unbranched in their parameters . <EoL>
<BoL> Generates Gegenbauer polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Generates Jacobi polynomial of degree ` n ` in ` x ` . <EoL>
<BoL> Evaluate Levi-Civita symbol . <EoL>
<BoL> Return True if there are any duplicate elements in `` seq `` . <EoL>
<BoL> Simplify expressions with gamma functions . <EoL>
<BoL> Compute GCD of `` f `` and `` g `` . <EoL>
<BoL> Compute GCD of a list of polynomials . <EoL>
<BoL> Extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Return the largest prime smaller than n . <EoL>
<BoL> Return the nth prime , with the primes indexed as prime ( 1 ) = 2 , prime ( 2 ) = 3 , etc ... . The nth prime is approximately n*log ( n ) . <EoL>
<BoL> Return the value of the prime counting function pi ( n ) = the number of prime numbers less than or equal to n . <EoL>
<BoL> Returns the product of the first n primes ( default ) or the primes less than or equal to n ( when `` nth=False `` ) . <EoL>
<BoL> Return a random prime number in the range [ a , b ) . <EoL>
<BoL> The intersection of a collection of GeometryEntity instances . <EoL>
<BoL> Solve system of N linear equations with M variables , which means both under - and overdetermined systems are supported . <EoL>
<BoL> Return triangle having side with length l on the x-axis . <EoL>
<BoL> Return triangle having side with length l2 on the x-axis . <EoL>
<BoL> Return triangle having side of length l1 on the x-axis . <EoL>
<BoL> Return True if there are any different elements in `` seq `` . <EoL>
<BoL> Return the radian value for the given degrees ( pi = 180 degrees ) . <EoL>
<BoL> Return the tuple of points sorted numerically according to args <EoL>
<BoL> Returns True if the given entities are coplanar otherwise False <EoL>
<BoL> Determine dummy indices of `` expr `` and describe its structure <EoL>
<BoL> Determine the outer indices of expression `` expr `` <EoL>
<BoL> Compute greatest factorial factorization of `` f `` . <EoL>
<BoL> Compute a list of greatest factorial factors of `` f `` . <EoL>
<BoL> Converts an expr to a string of GLSL code <EoL>
<BoL> Computes the reduced Groebner basis for a set of polynomials . <EoL>
<BoL> Compute roots of `` f `` by factorization in the ground domain . <EoL>
<BoL> Splits a sequence into a list of lists of equal , adjacent elements . <EoL>
<BoL> Compute the limit of e ( z ) at the point z0 using the Gruntz algorithm . <EoL>
<BoL> Half extended Euclidean algorithm of `` f `` and `` g `` . <EoL>
<BoL> Compute the Hankel transform of ` f ` , defined as <EoL>
<BoL> Returns the order ` n ` if ` g ` is homogeneous and `` None `` if it is not homogeneous . <EoL>
<BoL> Rewrite a polynomial in Horner form . <EoL>
<BoL> Expand hypergeometric functions . If allow_hyper is True , allow partial simplification ( that is a result different from input , but still containing hypergeometric functions ) . <EoL>
<BoL> Returns True if ' f ' and ' g ' are hyper-similar . <EoL>
<BoL> Determine outer indices of an Add object . <EoL>
<BoL> Determine the outer indices of a Mul object . <EoL>
<BoL> Determine outer indices of a power or an exponential . <EoL>
<BoL> Removes repeated objects from sequences <EoL>
<BoL> Returns the unique and repeated indices . Also note , from the examples given below that the order of indices is maintained as given in the input . <EoL>
<BoL> Return a point between start and end <EoL>
<BoL> Return the inequality with s isolated on the left , if possible . <EoL>
<BoL> Reduce a system of inequalities with nested absolute values . <EoL>
<BoL> Reduce an inequality with nested absolute values . <EoL>
<BoL> Reduce a system of inequalities with rational coefficients . <EoL>
<BoL> Reduce a system of rational inequalities with rational coefficients . <EoL>
<BoL> Solve polynomial inequalities with rational coefficients . <EoL>
<BoL> Solve a polynomial inequality with rational coefficients . <EoL>
<BoL> Solve a system of rational inequalities with rational coefficients . <EoL>
<BoL> Checks if the query is true given the set of clauses . <EoL>
<BoL> Remove the sentence 's clauses from the KB <EoL>
<BoL> Add the sentence 's clauses to the KB <EoL>
<BoL> Check whether the given expr_set entail an expr . If formula_set is empty then it returns the validity of expr . <EoL>
<BoL> The symbol in this literal ( without the negation ) . <EoL>
<BoL> Returns whether the given assignment is a model or not . <EoL>
<BoL> Check satisfiability of a propositional sentence . <EoL>
<BoL> Check validity of a propositional sentence . A valid propositional sentence is True under every assignment . <EoL>
<BoL> Returns ( e , bool ) where e is the largest nonnegative integer such that |y| > = |x**e| and bool is True if y == x**e <EoL>
<BoL> Returns the power of x in a term . <EoL>
<BoL> Returns the i'th point of a series If start point is negative infinity , point is returned from the end . Assumes the first point to be indexed zero . <EoL>
<BoL> Integrate Formal Power Series . <EoL>
<BoL> Truncated series as polynomial . <EoL>
<BoL> Truncated series . <EoL>
<BoL> line_integrate ( field , Curve , variables ) <EoL>
<BoL> manualintegrate ( f , var ) <EoL>
<BoL> Integrate `` f `` over the interval [ `` a `` , `` b `` ] , by rewriting it as a product of two G functions , or as a single G function . <EoL>
<BoL> Compute an indefinite integral of `` f `` by rewriting it as a G function . <EoL>
<BoL> Convert products and powers of sin and cos to sums . <EoL>
<BoL> Integrate f = Mul ( trig ) over x <EoL>
<BoL> Setup printing in Python interactive session.Python 's pretty-printer display hook . <EoL>
<BoL> Is a shell instance an IPython shell ? <EoL>
<BoL> Print `` *args `` if SYMPY_DEBUG is True , else do nothing . <EoL>
<BoL> Create a banner for an interactive session . <EoL>
<BoL> Allow IPython to automatically convert integer literals to Integer . <EoL>
<BoL> Allow IPython to automatially create symbols ( `` isympy -a `` ) .Handle : exc : ` NameError ` exception and allow injection of missing symbols . <EoL>
<BoL> Construct new IPython session . <EoL>
<BoL> Construct new Python session.An interactive console with readline support . <EoL>
<BoL> Wrap integer literals with Integer.Returns true if string value num ( with token NUMBER ) represents an integer . <EoL>
<BoL> Traverse a tree asking a user which branch to choose . <EoL>
<BoL> Construct an interpolating polynomial for the data points . <EoL>
<BoL> Construct Lagrange interpolating polynomial for `` n `` data points . <EoL>
<BoL> Compute isolating intervals for roots of `` f `` . <EoL>
<BoL> Return the inverse of `` M `` , assuming that either there are lots of zeros or the size of the matrix is small . <EoL>
<BoL> Compute the unitary , ordinary-frequency inverse cosine transform of ` F ` , defined as <EoL>
<BoL> Compute the unitary , ordinary-frequency inverse Fourier transform of ` F ` , defined as <EoL>
<BoL> Compute the inverse Hankel transform of ` F ` defined as <EoL>
<BoL> Compute the inverse Laplace transform of ` F ( s ) ` , defined as <EoL>
<BoL> Compute the inverse Mellin transform of ` F ( s ) ` over the fundamental strip given by `` strip= ( a , b ) `` . <EoL>
<BoL> Compute the unitary , ordinary-frequency inverse sine transform of ` F ` , defined as <EoL>
<BoL> Invert `` f `` modulo `` g `` when possible . <EoL>
<BoL> Returns True if `` x**n == a ( mod m ) `` has solutions . <EoL>
<BoL> Returns True if `` a `` is a primitive root of `` p `` <EoL>
<BoL> Returns True if `` a `` ( mod `` p `` ) is in the set of squares mod `` p `` , i.e a % p in set ( [ i**2 % p for i in range ( p ) ] ) . If `` p `` is an odd prime , an iterative method is used to make the determination : <EoL>
<BoL> Checks if the ideal generated by a Groebner basis is zero-dimensional . <EoL>
<BoL> Give a rational isolating interval for an algebraic number . <EoL>
<BoL> Return the partition of seq as specified by the partition vector . <EoL>
<BoL> Cycle through all partions of n elements , yielding the current number of partitions , `` m `` , and a mutable list , `` q `` such that element [ i ] is in part q [ i ] of the partition . <EoL>
<BoL> Generates the binary partition of n . <EoL>
<BoL> Wrapper to necklaces to return a free ( unrestricted ) necklace . <EoL>
<BoL> Return permutations of [ 0 , 1 , ... , n - 1 ] such that each permutation differs from the last by the exchange of a single pair of neighbors . <EoL>
<BoL> Routine to generate unique derangements . <EoL>
<BoL> Generates involutions . <EoL>
<BoL> This algorithm generates oriented forests . <EoL>
<BoL> Return sequence `` l `` partitioned into `` k `` bins . <EoL>
<BoL> Return a tuple where the smallest element appears first ; if `` directed `` is True ( default ) then the order is preserved , otherwise the sequence will be reversed if that gives a smaller ordering . <EoL>
<BoL> Return the hashable sequence in multiset form with values being the multiplicity of the item in the sequence . <EoL>
<BoL> Return the unique combinations of size `` n `` from multiset `` m `` . <EoL>
<BoL> Return unique partitions of the given multiset ( in list form ) . If `` m `` is None , all multisets will be returned , otherwise only partitions with `` m `` parts will be returned . <EoL>
<BoL> Return the unique permutations of multiset `` m `` . <EoL>
<BoL> A routine to generate necklaces that may ( free=True ) or may not ( free=False ) be turned over to be viewed . <EoL>
<BoL> Generates ordered partitions of integer `` n `` . <EoL>
<BoL> Generate all partitions of positive integer , n . <EoL>
<BoL> Return iterator in which the signs of non-zero elements of t are permuted . <EoL>
<BoL> Generate all postfixes of a sequence . <EoL>
<BoL> Do a postorder traversal of a tree . <EoL>
<BoL> Generate all prefixes of a sequence . <EoL>
<BoL> Reshape the sequence according to the template in `` how `` . <EoL>
<BoL> Left rotates a list x by the number of steps specified in y . <EoL>
<BoL> Right rotates a list x by the number of steps specified in y . <EoL>
<BoL> Group the sequence into lists in which successive elements all compare the same with the comparison operator , `` op `` : op ( seq [ i + 1 ] , seq [ i ] ) is True from all elements in a run . <EoL>
<BoL> Return iterator in which the signs of non-zero elements of t and the order of the elements are permuted . <EoL>
<BoL> Generates all k-subsets ( combinations ) from an n-element set , seq . <EoL>
<BoL> Return `` n `` items from `` iter `` iterator . <EoL>
<BoL> Group `` iter `` into tuples of length `` n `` . Raise an error if the length of `` iter `` is not a multiple of `` n `` . <EoL>
<BoL> Generate a set of monomials of the degree greater than or equal to ` min_degree ` and less than or equal to ` max_degree ` . <EoL>
<BoL> Returns the Jacobi symbol ` ( m / n ) ` . <EoL>
<BoL> Converts an expr to a string of javascript code <EoL>
<BoL> Converts ` expr ` to a string of Julia code . <EoL>
<BoL> Compute the Laplace Transform ` F ( s ) ` of ` f ( t ) ` , <EoL>
<BoL> Compute LCM of `` f `` and `` g `` . <EoL>
<BoL> Returns the Legendre symbol ` ( a / p ) ` . <EoL>
<BoL> Finds limits of terms having sequences at infinity . <EoL>
<BoL> Converts a given System of Equations into Matrix form . <EoL>
<BoL> Takes logarithms and combines them using the following rules : <EoL>
<BoL> Pollute the global namespace with symbols - > objects mapping . <EoL>
<BoL> Strategy that makes an AlternativeRule out of multiple possible results . <EoL>
<BoL> Returns the steps needed to compute an integral . <EoL>
<BoL> Derivative of f in form expected by find_substitutions <EoL>
<BoL> Apply the rule that matches the condition , else None <EoL>
<BoL> Return original expr if rule returns None <EoL>
<BoL> Strategy that rewrites an integrand based on some other criteria . <EoL>
<BoL> Strategy that rewrites an integrand . <EoL>
<BoL> Select a rule based on the result of key called on the function <EoL>
<BoL> Converts an expr to a string of the Wolfram Mathematica code <EoL>
<BoL> Returns the MathML representation of expr . If printer is presentation then prints Presentation MathML else prints content MathML . <EoL>
<BoL> Find the lowest index of an item in ` col ` that is suitable for a pivot . <EoL>
<BoL> Helper that computes the pivot value and location from a sequence of contiguous matrix column elements . <EoL>
<BoL> Tests by expand_mul only , suitable for polynomials and rational functions . <EoL>
<BoL> Returns True if x is zero . <EoL>
<BoL> Return the number c such that , ( a * c ) = 1 ( mod m ) where c has the same sign as m. If no such value exists , a ValueError is raised . <EoL>
<BoL> Returns the expression as a string . <EoL>
<BoL> Return a condition under which the mellin transform of g exists . Any power of x has already been absorbed into the G function , so this is just int_0^\infty g dx . <EoL>
<BoL> Do naive simplifications on `` cond `` . <EoL>
<BoL> Return a dummy . This will return the same dummy if the same token+name is requested more than once , and it is not already in expr . This is for being cache-friendly . <EoL>
<BoL> Return a dummy associated to name and token . Same effect as declaring it globally . <EoL>
<BoL> Re-evaluate the conditions . <EoL>
<BoL> Find the exponents of `` x `` ( not including zero ) in `` expr `` . <EoL>
<BoL> Find numbers a such that a linear substitution x - > x + a would ( hopefully ) simplify expr . <EoL>
<BoL> Turn the G function into one of inverse argument ( i.e . G ( 1/x ) - > G ' ( x ) ) <EoL>
<BoL> Find the types of functions in expr , to estimate the complexity . <EoL>
<BoL> When expr is known to be of the form c*x**b , with c and/or b possibly 1 , return c , b . <EoL>
<BoL> Try to guess sensible rewritings for integrand f ( x ) . <EoL>
<BoL> Let d denote the integrand in the definition of the G function `` g `` . Consider the function H which is defined in the same way , but with integrand d/Gamma ( a*s ) ( contour conventions as usual ) . <EoL>
<BoL> Return C , h such that h is a G function of argument z**n and g = C*h. ( a1 , .. , ak ) - > ( a1/n , ( a1+1 ) /n , ... , ( ak + n-1 ) /n ) <EoL>
<BoL> Express integral from zero to infinity g1*g2 using a G function , assuming the necessary conditions are fulfilled . <EoL>
<BoL> Evaluate int_0^\infty g dx using G functions , assuming the necessary conditions are fulfilled . <EoL>
<BoL> Compute the laplace inversion integral , assuming the formula applies . <EoL>
<BoL> Check if f ( x ) , when expressed using G functions on the positive reals , will in fact agree with the G functions almost everywhere <EoL>
<BoL> Try to integrate f dx from zero to infinty . <EoL>
<BoL> Try to integrate f dx from zero to infinity . <EoL>
<BoL> Try to integrate f dx from zero to infinity . <EoL>
<BoL> Helper that does not attempt any substitution.This multiplies out superfluous powers of x we created , and chops off constants : <EoL>
<BoL> Return a list `` L `` such that Mul ( *L ) == f . <EoL>
<BoL> Find all the ways to split f into a product of two terms . Return None on failure . <EoL>
<BoL> Bring expr nearer to its principal branch by removing superfluous factors . This function does *not* guarantee to yield the principal branch , to avoid introducing opaque principal_branch ( ) objects , unless full_pb=True . <EoL>
<BoL> Create a hashable entity describing the type of f . <EoL>
<BoL> Try to rewrite f using a ( sum of ) single G functions with argument a*x**b . <EoL>
<BoL> Try to rewrite f as a product of two G functions of arguments a*x**b . <EoL>
<BoL> Absorb `` po `` == x**s into g . <EoL>
<BoL> Rewrite the integral fac*po*g1*g2 from 0 to oo in terms of G functions with argument c*x . Return C , f1 , f2 such that integral C f1 f2 from 0 to infinity equals integral fac po g1 g2 from 0 to infinity . <EoL>
<BoL> Rewrite the integral fac*po*g dx , from zero to infinity , as integral fac*G , where G has argument a*x . Note po=x**s. Return fac , G . <EoL>
<BoL> Split expression `` f `` into fac , po , g , where fac is a constant factor , po = x**s for some s independent of s , and g is `` the rest '' . <EoL>
<BoL> Compute the inverse laplace transform : math : \int_ { c+i\infty } ^ { c-i\infty } f ( x ) e^ { tx ) dx , for real c larger than the real part of all singularities of f. Note that `` t `` is always assumed real and positive . <EoL>
<BoL> Collect exponents on powers as assumptions allow . <EoL>
<BoL> Compute the Mellin transform ` F ( s ) ` of ` f ( x ) ` , <EoL>
<BoL> Memo decorator for associated sequences defined by recurrence starting from base <EoL>
<BoL> Computes the minimal polynomial of an algebraic element . <EoL>
<BoL> Return a function that can make the replacements , given in `` reps `` , on a string . The replacements should be given as mapping . <EoL>
<BoL> If SYMPY_DEBUG is True , it will print a nice execution tree with arguments and results of all decorated functions , else do nothing . <EoL>
<BoL> Fill a single paragraph of text , returning a new string . <EoL>
<BoL> Try to find 'executable ' in the directories listed in 'path ' ( a string listing directories separated by 'os.pathsep ' ; defaults to os.environ [ 'PATH ' ] ) . Returns the complete filename or None if not found <EoL>
<BoL> Return a cut-and-pastable string that , when printed , is equivalent to the input . The string returned is formatted so it can be indented nicely within tests ; in some cases it is wrapped in the dedent function which has to be imported from textwrap . <EoL>
<BoL> Return `` string `` with all keys in `` reps `` replaced with their corresponding values , longer strings first , irrespective of the order they are given . `` reps `` may be passed as tuples or a single mapping . <EoL>
<BoL> Return `` s `` where characters have been replaced or deleted . <EoL>
<BoL> Divide all coefficients of `` f `` by `` LC ( f ) `` . <EoL>
<BoL> Return a well-formed unevaluated Mul : Numbers are collected and put in slot 0 , any arguments that are Muls will be flattened , and args are sorted . Use this when args have changed but you still want to return an unevaluated Mul . <EoL>
<BoL> Returns a structure with the same dimension as the specified argument , where each basic element is replaced by the function f applied on it . All other arguments stay the same . <EoL>
<BoL> Returns a copy of an iterable object ( also copying all embedded iterables ) . <EoL>
<BoL> Returns a copy of the given structure ( numpy-array , list , iterable , .. ) . <EoL>
<BoL> Returns a wrapper for the one-dimensional function that can handle multidimensional arguments . <EoL>
<BoL> The given numbers and strings characterize the arguments that will be treated as data structures , where the decorated function will be applied to every single element . If no argument is given , everything is treated multidimensional . <EoL>
<BoL> Return a dictionary containing pairs `` { ( k1 , k2 , .. , km ) : C_kn } `` where `` C_kn `` are multinomial coefficients such that `` n=k1+k2+..+km `` . <EoL>
<BoL> Return a dictionary containing pairs `` { ( k1 , k2 , .. , km ) : C_kn } `` where `` C_kn `` are multinomial coefficients such that `` n=k1+k2+..+km `` . <EoL>
<BoL> multinomial coefficient iterator <EoL>
<BoL> Add new types/method pair to dispatcher <EoL>
<BoL> Deterimine appropriate implementation for this type signature <EoL>
<BoL> Get annotations of function positional parameters <EoL>
<BoL> Print docstring for the function corresponding to inputs <EoL>
<BoL> Register dispatcher with new implementation <EoL>
<BoL> Deterimine appropriate implementation for this type signature <EoL>
<BoL> Print source code for the function corresponding to inputs <EoL>
<BoL> Topological sort algorithm by Kahn [ 1 ] - O ( nodes + vertices ) <EoL>
<BoL> All signature pairs such that A is ambiguous with B <EoL>
<BoL> A is consistent with B but neither is strictly more specific <EoL>
<BoL> It is possible for an argument list to satisfy both A and B <EoL>
<BoL> A should be checked before B <EoL>
<BoL> Group a collection by a key function <EoL>
<BoL> A sane ordering of signatures to check , first to last <EoL>
<BoL> A signature that would break ambiguities <EoL>
<BoL> A is consistent and strictly more specific than B <EoL>
<BoL> Raise warning when ambiguity is detected <EoL>
<BoL> Is func a method ? <EoL>
<BoL> String representation of type signature <EoL>
<BoL> The text for ambiguity warnings <EoL>
<BoL> Reverses direction of dependence dict <EoL>
<BoL> Returns the order of `` a `` modulo `` n `` . <EoL>
<BoL> Solve system of N non linear equations with M variables , which means both under and overdetermined systems are supported . <EoL>
<BoL> Calculate the partition function P ( n ) , i.e . the number of ways that n can be written as a sum of positive integers . <EoL>
<BoL> Compute numerical approximations of roots of `` f `` . <EoL>
<BoL> Solve a nonlinear equation system numerically : : <EoL>
<BoL> Construct a polynomial with n-th powers of roots of `` f `` . <EoL>
<BoL> Find the solutions to `` x**n = a mod p `` <EoL>
<BoL> Compute the inner sum in HRR formula [ 1 ] _ <EoL>
<BoL> Compute the sinh term in the outer sum of the HRR formula . The constants sqrt ( 2/3*pi ) and sqrt ( 8 ) must be precomputed . <EoL>
<BoL> Find the solutions to `` x**2 = a mod p**k `` when `` a % p ! = 0 `` <EoL>
<BoL> Simultaneously compute ( cosh ( x ) , sinh ( x ) ) for real x <EoL>
<BoL> Floating-point division <EoL>
<BoL> Return the difference of two raw mpfs , s-t . This function is simply a wrapper of mpf_add that changes the sign of t . <EoL>
<BoL> Calculates the `` extra strong '' parameters ( D , P , Q ) for n . <EoL>
<BoL> Calculates the Selfridge parameters ( D , P , Q ) for n. This is method A from page 1401 of Baillie and Wagstaff . <EoL>
<BoL> Return the modular Lucas sequence ( U_k , V_k , Q_k ) . <EoL>
<BoL> Miller-Rabin strong pseudoprime test for one base . Return False if n is definitely composite , True if n is probably prime , with a probability greater than 3/4 . <EoL>
<BoL> Extra Strong Lucas compositeness test . Returns False if n is definitely composite , and True if n is a `` extra strong '' Lucas probable prime . <EoL>
<BoL> Standard Lucas compositeness test with Selfridge parameters . Returns False if n is definitely composite , and True if n is a Lucas probable prime . <EoL>
<BoL> Return True if n == a * a for some integer a , else False . If n is suspected of *not* being a square then this is a quick method of confirming that it is not . <EoL>
<BoL> Strong Lucas compositeness test with Selfridge parameters . Returns False if n is definitely composite , and True if n is a strong Lucas probable prime . <EoL>
<BoL> Perform a Miller-Rabin strong pseudoprime test on n using a given list of bases/witnesses . <EoL>
<BoL> Returns the list of quadratic residues . <EoL>
<BoL> Pohlig-Hellman algorithm for computing the discrete logarithm of `` a `` to the base `` b `` modulo `` n `` . <EoL>
<BoL> Pollard 's Rho algorithm for computing the discrete logarithm of `` a `` to the base `` b `` modulo `` n `` . <EoL>
<BoL> Baby-step giant-step algorithm for computing the discrete logarithm of `` a `` to the base `` b `` modulo `` n `` . <EoL>
<BoL> Trial multiplication algorithm for computing the discrete logarithm of `` a `` to the base `` b `` modulo `` n `` . <EoL>
<BoL> Returns True if `` x**n == a ( mod m ) `` has solutions for n > 2 . <EoL>
<BoL> Returns True/False if a solution for `` x**n == a ( mod ( p**k ) ) `` does/does n't exist . <EoL>
<BoL> Root of `` x**q = s mod p `` , `` p `` prime and `` q `` divides `` p - 1 `` <EoL>
<BoL> Generates the primitive roots for a prime `` p `` <EoL>
<BoL> Cartesian product generator <EoL>
<BoL> Find solution to `` x**2 == a mod p**n `` when `` a % p == 0 `` <EoL>
<BoL> Returns the square root in the case of `` p `` prime with `` p == 1 ( mod 8 ) `` <EoL>
<BoL> Return the largest integer less than or equal to sqrt ( n ) . <EoL>
<BoL> Find a root of `` x**2 = a mod p `` <EoL>
<BoL> Iterate over solutions to `` x**2 = a mod p `` <EoL>
<BoL> b is I = sqrt ( -1 ) e is symbolic object but not equal to 0 , 1 <EoL>
<BoL> `` expt `` is symbolic object but not equal to 0 or 1 . <EoL>
<BoL> `` expt `` is symbolic object but not equal to 0 or 1 . <EoL>
<BoL> Efficiently extract the coefficient of a summation . <EoL>
<BoL> Converts a numpy datatype input to an appropriate sympy type . <EoL>
<BoL> Convert an ordinary decimal instance to a Rational . <EoL>
<BoL> Return True if n can be interpreted as a floating point number . <EoL>
<BoL> Computes greatest common divisor of two integers . <EoL>
<BoL> Return the mpf tuple normalized appropriately for the indicated precision after doing a check to see if zero should be returned or not when the mantissa is 0 . `` mpf_normlize `` always assumes that this is zero , but it may not be since the mantissa for mpf 's values `` +inf '' , `` -inf '' and `` nan '' have a mantissa of zero , too . <EoL>
<BoL> Should sympy raise an exception on 0/0 or return a nan ? <EoL>
<BoL> Converts ` expr ` to a string of Octave ( or Matlab ) code . <EoL>
<BoL> Returns a dict with keys as coefficients and values as their values in terms of C0 <EoL>
<BoL> Converts a solution with Integrals in it into an actual solution . <EoL>
<BoL> Helper function of dsolve that calls the respective : py : mod : ` ~sympy.solvers.ode ` functions to solve for the ordinary differential equations . This minimizes the computation in calling : py : meth : ` ~sympy.solvers.deutils._desolve ` multiple times . <EoL>
<BoL> This function is strictly meant for internal use by the Lie group ODE solving method . It replaces arbitrary functions returned by pdsolve with either 0 or 1 or the args of the arbitrary function . <EoL>
<BoL> It is classified under system of two linear homogeneous first-order constant-coefficient ordinary differential equations . <EoL>
<BoL> The equations of this type are <EoL>
<BoL> The equations of this type of ode are <EoL>
<BoL> The equations of this type of ode are . <EoL>
<BoL> The equations of this type of ode are . <EoL>
<BoL> The equations of this type of ode are . <EoL>
<BoL> The equations of this type of ode are . <EoL>
<BoL> System of two constant-coefficient second-order linear homogeneous differential equations <EoL>
<BoL> The equation of this category are <EoL>
<BoL> The equations which comes under this type are <EoL>
<BoL> The equations in this type are <EoL>
<BoL> These type of equation is used for describing the horizontal motion of a pendulum taking into account the Earth rotation . The solution is given with ` a^2 + 4b > 0 ` : <EoL>
<BoL> These equations are found in the theory of oscillations <EoL>
<BoL> The equation which come under this category are <EoL>
<BoL> The equations are <EoL>
<BoL> The equations are given as <EoL>
<BoL> The equation of this category are <EoL>
<BoL> .. math : : t^2 x '' + a_1 t x ' + b_1 t y ' + c_1 x + d_1 y = 0 <EoL>
<BoL> .. math : : x ' = ax <EoL>
<BoL> The equations of this type are <EoL>
<BoL> Equations of this system of ODEs <EoL>
<BoL> Equations : <EoL>
<BoL> Helper function to match hint `` linear_coefficients `` . <EoL>
<BoL> System of n first-order constant-coefficient linear nonhomogeneous differential equation <EoL>
<BoL> Equations : <EoL>
<BoL> Equations : <EoL>
<BoL> Autonomous system of general form <EoL>
<BoL> Equation : <EoL>
<BoL> Clairaut system of ODEs <EoL>
<BoL> Equations : <EoL>
<BoL> Equations : <EoL>
<BoL> Equations : <EoL>
<BoL> .. math : : x ' = x ( c F_2 - b F_3 ) , \enspace y ' = y ( a F_3 - c F_1 ) , \enspace z ' = z ( b F_1 - a F_2 ) <EoL>
<BoL> Matches a differential equation to the linear form : <EoL>
<BoL> Helper function for the method of undetermined coefficients . <EoL>
<BoL> Helper function for the method of variation of parameters and nonhomogeneous euler eq . <EoL>
<BoL> Returns a trial function match if undetermined coefficients can be applied to `` expr `` , and `` None `` otherwise.Test if `` expr `` fits the proper form for undetermined coefficients.Returns a set of trial terms for undetermined coefficients.Returns the expression without a coefficient . <EoL>
<BoL> This function is used to check if the given infinitesimals are the actual infinitesimals of the given first order differential equation . This method is specific to the Lie Group Solver of ODEs . <EoL>
<BoL> Substitutes corresponding `` sols `` for each functions into each `` eqs `` and checks that the result of substitutions for each equation is `` 0 `` . The equations and solutions passed can be any iterable . <EoL>
<BoL> Renumber arbitrary constants in `` expr `` to have numbers 1 through ` N ` where ` N ` is `` endnumber - startnumber + 1 `` at most . In the process , this reorders expression terms in a standard way.We need to have an internal recursive function so that newstartnumber maintains its values throughout recursive calls . <EoL>
<BoL> Simplifies an expression with arbitrary constants in it . <EoL>
<BoL> Returns a list of constants that do not occur in eq already . <EoL>
<BoL> The infinitesimal functions of an ordinary differential equation , ` \xi ( x , y ) ` and ` \eta ( x , y ) ` , are the infinitesimals of the Lie group of point transformations for which the differential equation is invariant . <EoL>
<BoL> The second heuristic uses the following two assumptions on ` \xi ` and ` \eta ` <EoL>
<BoL> The first heuristic uses the following four sets of assumptions on ` \xi ` and ` \eta ` <EoL>
<BoL> This heuristic uses the following two assumptions on ` \xi ` and ` \eta ` <EoL>
<BoL> This heuristic finds if infinitesimals of the form ` \eta = f ( x ) ` , ` \xi = g ( y ) ` without making any assumptions on ` h ` . <EoL>
<BoL> This heuristic assumes the presence of unknown functions or known functions with non-integer powers . <EoL>
<BoL> The third heuristic assumes the infinitesimals ` \xi ` and ` \eta ` to be bi-variate polynomials in ` x ` and ` y ` . <EoL>
<BoL> The aim of the fourth heuristic is to find the function ` \chi ( x , y ) ` that satisfies the PDE ` \frac { d\chi } { dx } + h\frac { d\chi } { dx } - \frac { \partial h } { \partial y } \chi = 0 ` . <EoL>
<BoL> This heuristic uses the following two assumptions on ` \xi ` and ` \eta ` <EoL>
<BoL> This heuristic assumes <EoL>
<BoL> Solves 1st order exact ordinary differential equations . <EoL>
<BoL> Returns the best solution to an ODE from the two hints `` 1st_homogeneous_coeff_subs_dep_div_indep `` and `` 1st_homogeneous_coeff_subs_indep_div_dep `` . <EoL>
<BoL> Solves a 1st order differential equation with homogeneous coefficients using the substitution ` u_1 = \frac { \text { < dependent variable > } } { \text { < independent variable > } } ` . <EoL>
<BoL> Solves a 1st order differential equation with homogeneous coefficients using the substitution ` u_2 = \frac { \text { < independent variable > } } { \text { < dependent variable > } } ` . <EoL>
<BoL> Solves 1st order linear differential equations . <EoL>
<BoL> The power series solution is a method which gives the Taylor series expansion to the solution of a differential equation . <EoL>
<BoL> Gives a power series solution to a second order homogeneous differential equation with polynomial coefficients at an ordinary point . A homogenous differential equation is of the form <EoL>
<BoL> Gives a power series solution to a second order homogeneous differential equation with polynomial coefficients at a regular point . A second order homogenous differential equation is of the form <EoL>
<BoL> Solves Bernoulli differential equations . <EoL>
<BoL> Solves 2nd order Liouville differential equations . <EoL>
<BoL> The general Riccati equation has the form <EoL>
<BoL> Solves an almost-linear differential equation . <EoL>
<BoL> This hint implements the Lie group method of solving first order differential equations . <EoL>
<BoL> Solves a differential equation with linear coefficients . <EoL>
<BoL> Solves an ` n ` \th order linear differential equation with constant coefficients using the method of undetermined coefficients . <EoL>
<BoL> Solves an ` n ` \th order linear differential equation with constant coefficients using the method of variation of parameters . <EoL>
<BoL> Solves an ` n ` \th order linear homogeneous variable-coefficient Cauchy-Euler equidimensional ordinary differential equation . <EoL>
<BoL> Solves an ` n ` \th order linear non homogeneous Cauchy-Euler equidimensional ordinary differential equation using undetermined coefficients . <EoL>
<BoL> Solves an ` n ` \th order linear non homogeneous Cauchy-Euler equidimensional ordinary differential equation using variation of parameters . <EoL>
<BoL> Solves separable 1st order differential equations . <EoL>
<BoL> Solves a differential equation that can be reduced to the separable form . <EoL>
<BoL> Returns an extended integer representing how simple a solution to an ODE is . <EoL>
<BoL> Simplifies ODEs , including trying to solve for `` func `` and running : py : meth : ` ~sympy.solvers.ode.constantsimp ` . <EoL>
<BoL> Solves any ( supported ) kind of partial differential equation . <EoL>
<BoL> Return eq ( with generic symbols made positive ) and a dictionary containing the mapping between the old and new symbols . <EoL>
<BoL> An indexed root of a univariate polynomial . <EoL>
<BoL> Returns a list of roots of a quartic polynomial . <EoL>
<BoL> Series expansion of expr around point ` x = x0 ` . <EoL>
<BoL> Solve for the constants given initial conditions <EoL>
<BoL> When replacing the func with something else , we usually want the derivative evaluated , so this function helps in making that happen . <EoL>
<BoL> Remove GCD of terms from `` f `` . <EoL>
<BoL> Prints expr using the pager , in pretty form . <EoL>
<BoL> Converts a solution with integrals in it into an actual solution . <EoL>
<BoL> Helper function of pdsolve that calls the respective pde functions to solve for the partial differential equations . This minimizes the computation in calling _desolve multiple times . <EoL>
<BoL> Separate expression into two parts based on dependencies of variables . <EoL>
<BoL> Helper function to replace constants by functions in 1st_linear_variable_coeff <EoL>
<BoL> Solves a first order linear partial differential equation with constant coefficients . <EoL>
<BoL> Solves a first order linear homogeneous partial differential equation with constant coefficients . <EoL>
<BoL> Solves a first order linear partial differential equation with variable coefficients . The general form of this partial differential equation is <EoL>
<BoL> Separate variables in partial differential equation either by additive or multiplicative separation approach . It tries to rewrite an equation so that one of the specified variables occurs on a different side of the equation than the others . <EoL>
<BoL> Helper function for searching additive separable solutions . <EoL>
<BoL> Helper function for searching multiplicative separable solutions . <EoL>
<BoL> Compute polynomial pseudo-division of `` f `` and `` g `` . <EoL>
<BoL> Compute polynomial exact pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Plots a function of a single variable and returns an instance of the `` Plot `` class ( also , see the description of the `` show `` keyword argument below ) . <EoL>
<BoL> A plot function to plot implicit equations / inequalities.Recursively expands the arguments of an Boolean Function <EoL>
<BoL> Plot <EoL>
<BoL> Converts an expression string to a tree . <EoL>
<BoL> For no real reason this function is separated from sympy_expression_namespace . It can be moved to it . <EoL>
<BoL> Traverses the ( func , args ) tree of an expression and creates a sympy namespace . <EoL>
<BoL> Translate function names and the tree of arguments . <EoL>
<BoL> Translate substrings of estr using in order the dictionaries in dict_tuple_str . <EoL>
<BoL> Converts a tree to string without translations . <EoL>
<BoL> Converts a tree to string with translations . <EoL>
<BoL> Defines the three valued `` And `` behaviour for a 2-tuple of three valued logic values <EoL>
<BoL> Defines the three valued `` Or `` behaviour for a 2-tuple of three valued logic values <EoL>
<BoL> Evaluates the inverse cos of an interval <EoL>
<BoL> Evaluates the inverse hyperbolic cosine of an interval <EoL>
<BoL> Evaluates the inverse sine of an interval <EoL>
<BoL> Evaluates the inverse hyperbolic sine of an interval <EoL>
<BoL> evaluates the tan inverse of an interval <EoL>
<BoL> Evaluates the inverse hyperbolic tangent of an interval <EoL>
<BoL> Evaluates the ceiling of an interval <EoL>
<BoL> Evaluates the cos of an interval <EoL>
<BoL> Evaluates the hyperbolic cos of an interval <EoL>
<BoL> evaluates the exponential of an interval <EoL>
<BoL> Evaluates the floor of an interval <EoL>
<BoL> Evaluates the maximum of a list of intervals <EoL>
<BoL> Evaluates the minimum of a list of intervals <EoL>
<BoL> Evaluates an interval raised to a floating point . <EoL>
<BoL> Evaluates an interval raised to an integer powe <EoL>
<BoL> evaluates the natural logarithm of an interval <EoL>
<BoL> evaluates the logarithm to the base 10 of an interval <EoL>
<BoL> evaluates the sine of an interval <EoL>
<BoL> Evaluates the hyperbolic sine of an interval <EoL>
<BoL> Evaluates the square root of an interval <EoL>
<BoL> Evaluates the tan of an interval <EoL>
<BoL> Evaluates the hyperbolic tan of an interval <EoL>
<BoL> Plots a 3D surface plot . <EoL>
<BoL> Plots a 3D parametric line plot . <EoL>
<BoL> Plots a 3D parametric surface plot . <EoL>
<BoL> Plots a 2D parametric plot . <EoL>
<BoL> Print a crude ASCII art plot of the SymPy expression 'expr ' ( which should contain a single symbol , e.g . x or something else ) over the interval [ a , b ] . <EoL>
<BoL> Efficiently transform an expression into a polynomial . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Return leading coefficient of `` f `` . <EoL>
<BoL> Return trailing coefficient of `` f `` . <EoL>
<BoL> Make all coefficients positive in `` K [ X ] `` . <EoL>
<BoL> Add dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns `` f + g*h `` where `` f , g , h `` are in `` K [ X ] `` . <EoL>
<BoL> Add `` c ( x_2..x_u ) *x_0**i `` to `` f `` in `` K [ X ] `` . <EoL>
<BoL> Cancel common factors in a rational function ` f/g ` . <EoL>
<BoL> Clear denominators , i.e . transform `` K_0 `` to `` K_1 `` . <EoL>
<BoL> Evaluate functional composition `` f ( g ) `` in `` K [ X ] `` . <EoL>
<BoL> Returns GCD of multivariate coefficients . <EoL>
<BoL> Return the leading degree of `` f `` in `` x_0 `` in `` K [ X ] `` . <EoL>
<BoL> Return the leading degree of `` f `` in `` x_j `` in `` K [ X ] `` . <EoL>
<BoL> `` m `` -th order derivative in `` x_0 `` of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Differentiate and evaluate a polynomial in `` x_j `` at `` a `` in `` K [ X ] `` . <EoL>
<BoL> `` m `` -th order derivative in `` x_j `` of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Computes discriminant of a polynomial in ` K [ X ] ` . <EoL>
<BoL> Polynomial division with remainder in `` K [ X ] `` . <EoL>
<BoL> Euclidean polynomial remainder sequence ( PRS ) in ` K [ X ] ` . <EoL>
<BoL> Evaluate a polynomial at `` x_0 = a `` in `` K [ X ] `` using the Horner scheme . <EoL>
<BoL> Evaluate a polynomial at `` x_j = a `` in `` K [ X ] `` using the Horner scheme . <EoL>
<BoL> Evaluate a polynomial at `` x_j = a_j , ... `` in `` K [ X ] `` . <EoL>
<BoL> Multiply together several polynomials in `` K [ X ] `` . <EoL>
<BoL> Returns polynomial quotient in `` K [ X ] `` . <EoL>
<BoL> Exact quotient by a constant in `` K [ X ] `` . <EoL>
<BoL> Factor multivariate polynomials over algebraic number fields . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ X ] ` . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ X ] ` . <EoL>
<BoL> Polynomial division with remainder over a field . <EoL>
<BoL> Computes polynomial LCM over a field in ` K [ X ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a field . <EoL>
<BoL> Computes polynomial GCD of ` f ` and ` g ` in ` K [ X ] ` . <EoL>
<BoL> Extended Euclidean algorithm in ` F [ X ] ` . <EoL>
<BoL> Factor multivariate polynomials over finite fields . <EoL>
<BoL> Compute square-free decomposition of `` f `` in `` GF ( p ) [ X ] `` . <EoL>
<BoL> Compute square-free part of `` f `` in `` GF ( p ) [ X ] `` . <EoL>
<BoL> Compute greatest factorial factorization of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Return the ground leading coefficient . <EoL>
<BoL> Return the ground trailing coefficient . <EoL>
<BoL> Compute the GCD of coefficients of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Extract common content from a pair of polynomials in `` K [ X ] `` . <EoL>
<BoL> Divide all coefficients by `` LC ( f ) `` in `` K [ X ] `` . <EoL>
<BoL> Compute content and the primitive form of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Reduce a `` K [ X ] `` polynomial modulo a constant `` p `` in `` K `` . <EoL>
<BoL> Half extended Euclidean algorithm in ` F [ X ] ` . <EoL>
<BoL> Computes polynomial GCD and cofactors of ` f ` and ` g ` in ` K [ X ] ` . <EoL>
<BoL> Subresultant PRS algorithm in ` K [ X ] ` . <EoL>
<BoL> Computes the indefinite integral of `` f `` in `` x_0 `` in `` K [ X ] `` . <EoL>
<BoL> Computes the indefinite integral of `` f `` in `` x_j `` in `` K [ X ] `` . <EoL>
<BoL> Compute multiplicative inverse of ` f ` modulo ` g ` in ` F [ X ] ` . <EoL>
<BoL> Returns `` True `` if `` f `` has no factors over its domain . <EoL>
<BoL> Returns l1 norm of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Computes polynomial LCM of ` f ` and ` g ` in ` K [ X ] ` . <EoL>
<BoL> Convert algebraic coefficients to integers in `` K [ X ] `` . <EoL>
<BoL> Returns maximum norm of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Multiply dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Multiply `` f `` by a constant value in `` K [ X ] `` . <EoL>
<BoL> Multiply `` f `` by `` c ( x_2..x_u ) *x_0**i `` in `` K [ X ] `` . <EoL>
<BoL> Negate a polynomial in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-division in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-quotient in `` K [ X ] `` . <EoL>
<BoL> Raise `` f `` to the `` n `` -th power in `` K [ X ] `` . <EoL>
<BoL> Polynomial exact pseudo-quotient in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-remainder in `` K [ X ] `` . <EoL>
<BoL> Returns multivariate content and a primitive polynomial . <EoL>
<BoL> Primitive polynomial remainder sequence ( PRS ) in ` K [ X ] ` . <EoL>
<BoL> Resultant algorithm in ` K [ X ] ` using subresultant PRS . <EoL>
<BoL> Collins 's modular resultant algorithm in ` Q [ X ] ` . <EoL>
<BoL> Heuristic polynomial GCD in ` Q [ X ] ` . <EoL>
<BoL> Returns exact polynomial quotient in `` K [ X ] `` . <EoL>
<BoL> Quotient by a constant in `` K [ X ] `` . <EoL>
<BoL> Returns polynomial remainder in `` K [ X ] `` . <EoL>
<BoL> Computes resultant of two polynomials in ` K [ X ] ` . <EoL>
<BoL> Multivariate division with remainder over a ring . <EoL>
<BoL> Computes polynomial LCM over a ring in ` K [ X ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a ring . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Square-free norm of `` f `` in `` K [ X ] `` , useful over algebraic domains . <EoL>
<BoL> Return `` True `` if `` f `` is a square-free polynomial in `` K [ X ] `` . <EoL>
<BoL> Returns square-free part of a polynomial in `` K [ X ] `` . <EoL>
<BoL> Square dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Subtract dense polynomials in `` K [ X ] `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Returns `` f - g*h `` where `` f , g , h `` are in `` K [ X ] `` . <EoL>
<BoL> Subtract `` c ( x_2..x_u ) *x_0**i `` from `` f `` in `` K [ X ] `` . <EoL>
<BoL> Computes subresultant PRS of two polynomials in ` K [ X ] ` . <EoL>
<BoL> Convert a `` K [ X ] `` polynomial to a `` dict `` `` . <EoL>
<BoL> Determine multiplicities of factors using trial division . <EoL>
<BoL> Reduce a `` K [ X ] `` polynomial modulo a polynomial `` p `` in `` K [ Y ] `` . <EoL>
<BoL> Collins 's modular resultant algorithm in ` Z [ X ] ` . <EoL>
<BoL> Wang/EEZ : Solve multivariate Diophantine equations . <EoL>
<BoL> Factor ( non square-free ) polynomials in ` Z [ X ] ` . <EoL>
<BoL> Heuristic polynomial GCD in ` Z [ X ] ` . <EoL>
<BoL> Mignotte bound for multivariate polynomials in ` K [ X ] ` . <EoL>
<BoL> Compute resultant of ` f ` and ` g ` modulo a prime ` p ` . <EoL>
<BoL> Factor primitive square-free polynomials in ` Z [ X ] ` . <EoL>
<BoL> Wang/EEZ : Parallel Hensel lifting algorithm . <EoL>
<BoL> Wang/EEZ : Compute correct leading coefficients . <EoL>
<BoL> Wang/EEZ : Compute a set of valid divisors . <EoL>
<BoL> Make all coefficients positive in `` K [ x ] `` . <EoL>
<BoL> Add dense polynomials in `` K [ x ] `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns `` f + g*h `` where `` f , g , h `` are in `` K [ x ] `` . <EoL>
<BoL> Add `` c*x**i `` to `` f `` in `` K [ x ] `` . <EoL>
<BoL> Cancel common factors in a rational function ` f/g ` . <EoL>
<BoL> Clear denominators , i.e . transform `` K_0 `` to `` K_1 `` . <EoL>
<BoL> Evaluate functional composition `` f ( g ) `` in `` K [ x ] `` . <EoL>
<BoL> Compute the GCD of coefficients of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Count all roots in [ u + v*I , s + t*I ] rectangle using Collins-Krandick algorithm . <EoL>
<BoL> Returns the number of distinct real roots of `` f `` in `` [ inf , sup ] `` . <EoL>
<BoL> Efficiently test if `` f `` is a cyclotomic polnomial . <EoL>
<BoL> Computes functional decomposition of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return the leading degree of `` f `` in `` K [ x ] `` . <EoL>
<BoL> `` m `` -th order derivative of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Computes discriminant of a polynomial in ` K [ x ] ` . <EoL>
<BoL> Polynomial division with remainder in `` K [ x ] `` . <EoL>
<BoL> Euclidean polynomial remainder sequence ( PRS ) in ` K [ x ] ` . <EoL>
<BoL> Evaluate a polynomial at `` x = a `` in `` K [ x ] `` using Horner scheme . <EoL>
<BoL> Multiply together several polynomials in `` K [ x ] `` . <EoL>
<BoL> Returns polynomial quotient in `` K [ x ] `` . <EoL>
<BoL> Exact quotient by a constant in `` K [ x ] `` . <EoL>
<BoL> Factor univariate polynomials over algebraic number fields . <EoL>
<BoL> Extract common content from a pair of polynomials in `` K [ x ] `` . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ x ] ` . <EoL>
<BoL> Factor polynomials into irreducibles in ` K [ x ] ` . <EoL>
<BoL> Polynomial division with remainder over a field . <EoL>
<BoL> Computes polynomial LCM over a field in ` K [ x ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a field . <EoL>
<BoL> Computes polynomial GCD of ` f ` and ` g ` in ` K [ x ] ` . <EoL>
<BoL> Extended Euclidean algorithm in ` F [ x ] ` . <EoL>
<BoL> Factor univariate polynomials over finite fields . <EoL>
<BoL> Compute square-free decomposition of `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute square-free part of `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute greatest factorial factorization of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Half extended Euclidean algorithm in ` F [ x ] ` . <EoL>
<BoL> Computes polynomial GCD and cofactors of ` f ` and ` g ` in ` K [ x ] ` . <EoL>
<BoL> Iteratively compute disjoint negative root isolation intervals . <EoL>
<BoL> Iteratively compute disjoint positive root isolation intervals . <EoL>
<BoL> Internal function for isolation positive roots up to given precision . <EoL>
<BoL> Refine a positive root of ` f ` given a Mobius transform or an interval . <EoL>
<BoL> Subresultant PRS algorithm in ` K [ x ] ` . <EoL>
<BoL> Computes the indefinite integral of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Compute multiplicative inverse of ` f ` modulo ` g ` in ` F [ x ] ` . <EoL>
<BoL> Returns `` True `` if `` f `` has no factors over its domain . <EoL>
<BoL> Isolate real and complex roots of a non-square-free polynomial `` f `` . <EoL>
<BoL> Isolate real and complex roots of a square-free polynomial `` f `` . <EoL>
<BoL> Isolate real roots using Vincent-Akritas-Strzebonski ( VAS ) continued fractions approach . <EoL>
<BoL> Isolate real roots of a list of square-free polynomial using Vincent-Akritas-Strzebonski ( VAS ) CF approach . <EoL>
<BoL> Isolate real roots of a square-free polynomial using the Vincent-Akritas-Strzebonski ( VAS ) CF approach . <EoL>
<BoL> Returns l1 norm of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Computes polynomial LCM of ` f ` and ` g ` in ` K [ x ] ` . <EoL>
<BoL> Efficiently multiply `` f `` by `` x**n `` in `` K [ x ] `` . <EoL>
<BoL> Returns maximum norm of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Evaluate efficiently the composition `` f ( -x ) `` in `` K [ x ] `` . <EoL>
<BoL> Divide all coefficients by `` LC ( f ) `` in `` K [ x ] `` . <EoL>
<BoL> Multiply dense polynomials in `` K [ x ] `` . <EoL>
<BoL> Multiply `` f `` by a constant value in `` K [ x ] `` . <EoL>
<BoL> Multiply `` f `` by `` c*x**i `` in `` K [ x ] `` . <EoL>
<BoL> Negate a polynomial in `` K [ x ] `` . <EoL>
<BoL> Refine a positive root of ` f ` given an interval ` ( s , t ) ` . <EoL>
<BoL> Polynomial pseudo-division in `` K [ x ] `` . <EoL>
<BoL> Polynomial pseudo-quotient in `` K [ x ] `` . <EoL>
<BoL> Raise `` f `` to the `` n `` -th power in `` K [ x ] `` . <EoL>
<BoL> Polynomial exact pseudo-quotient in `` K [ X ] `` . <EoL>
<BoL> Polynomial pseudo-remainder in `` K [ x ] `` . <EoL>
<BoL> Compute content and the primitive form of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Primitive polynomial remainder sequence ( PRS ) in ` K [ x ] ` . <EoL>
<BoL> Resultant algorithm in ` K [ x ] ` using subresultant PRS . <EoL>
<BoL> Heuristic polynomial GCD in ` Q [ x ] ` . <EoL>
<BoL> Returns exact polynomial quotient in `` K [ x ] `` . <EoL>
<BoL> Quotient by a constant in `` K [ x ] `` . <EoL>
<BoL> Return bivariate polynomials `` f1 `` and `` f2 `` , such that `` f = f1 + f2*I `` . <EoL>
<BoL> Refine real root 's approximating interval to the given precision . <EoL>
<BoL> Returns polynomial remainder in `` K [ x ] `` . <EoL>
<BoL> Computes resultant of two polynomials in ` K [ x ] ` . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` using Newton iteration . <EoL>
<BoL> Compute the LMQ lower bound for the positive roots of ` f ` ; LMQ ( Local Max Quadratic ) was developed by Akritas-Strzebonski-Vigklas . <EoL>
<BoL> Compute the LMQ upper bound for the positive roots of ` f ` ; LMQ ( Local Max Quadratic ) was developed by Akritas-Strzebonski-Vigklas . <EoL>
<BoL> Univariate division with remainder over a ring . <EoL>
<BoL> Computes polynomial LCM over a ring in ` K [ x ] ` . <EoL>
<BoL> Computes polynomial GCD using subresultants over a ring . <EoL>
<BoL> Efficiently divide `` f `` by `` x**n `` in `` K [ x ] `` . <EoL>
<BoL> Evaluate efficiently composition `` f ( a*x ) `` in `` K [ x ] `` . <EoL>
<BoL> Evaluate efficiently Taylor shift `` f ( x + a ) `` in `` K [ x ] `` . <EoL>
<BoL> Compute the number of sign variations of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Return square-free decomposition of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Square-free norm of `` f `` in `` K [ x ] `` , useful over algebraic domains . <EoL>
<BoL> Return `` True `` if `` f `` is a square-free polynomial in `` K [ x ] `` . <EoL>
<BoL> Returns square-free part of a polynomial in `` K [ x ] `` . <EoL>
<BoL> Square dense polynomials in `` K [ x ] `` . <EoL>
<BoL> One step of positive real root refinement algorithm . <EoL>
<BoL> Computes the Sturm sequence of `` f `` in `` F [ x ] `` . <EoL>
<BoL> Subtract dense polynomials in `` K [ x ] `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Returns `` f - g*h `` where `` f , g , h `` are in `` K [ x ] `` . <EoL>
<BoL> Subtract `` c*x**i `` from `` f `` in `` K [ x ] `` . <EoL>
<BoL> Computes subresultant PRS of two polynomials in ` K [ x ] ` . <EoL>
<BoL> Evaluate functional transformation `` q**n * f ( p/q ) `` in `` K [ x ] `` . <EoL>
<BoL> Determine multiplicities of factors using trial division . <EoL>
<BoL> Reduce a `` K [ x ] `` polynomial modulo a constant `` p `` in `` K `` . <EoL>
<BoL> Efficiently factor polynomials ` x**n - 1 ` and ` x**n + 1 ` in ` Z [ x ] ` . <EoL>
<BoL> Efficiently generate n-th cyclotomic polnomial . <EoL>
<BoL> Wang/EEZ : Solve univariate Diophantine equations . <EoL>
<BoL> Factor ( non square-free ) polynomials in ` Z [ x ] ` . <EoL>
<BoL> Factor square-free ( non-primitive ) polyomials in ` Z [ x ] ` . <EoL>
<BoL> Multifactor Hensel lifting in ` Z [ x ] ` . <EoL>
<BoL> One step in Hensel lifting in ` Z [ x ] ` . <EoL>
<BoL> Heuristic polynomial GCD in ` Z [ x ] ` . <EoL>
<BoL> Test irreducibility using Eisenstein 's criterion . <EoL>
<BoL> Mignotte bound for univariate polynomials in ` K [ x ] ` . <EoL>
<BoL> Factor primitive square-free polynomials in ` Z [ x ] ` . <EoL>
<BoL> Return the leading coefficient of `` f `` . <EoL>
<BoL> Calculate Berlekamp 's `` Q `` matrix . <EoL>
<BoL> Return the trailing coefficient of `` f `` . <EoL>
<BoL> Add polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f + a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Returns `` f + g*h `` where `` f `` , `` g `` , `` h `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Factor a square-free `` f `` in `` GF ( p ) [ x ] `` for small `` p `` . <EoL>
<BoL> Compute polynomial GCD and cofactors in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial composition `` f ( g ) `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial composition `` g ( h ) `` in `` GF ( p ) [ x ] / ( f ) `` . <EoL>
<BoL> Kaltofen-Shoup : Deterministic Distinct Degree Factorization <EoL>
<BoL> Cantor-Zassenhaus : Deterministic Distinct Degree Factorization <EoL>
<BoL> Return the leading degree of `` f `` . <EoL>
<BoL> Differentiate polynomial in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Division with remainder in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Gathen-Shoup : Probabilistic Equal Degree Factorization <EoL>
<BoL> Cantor-Zassenhaus : Probabilistic Equal Degree Factorization <EoL>
<BoL> Evaluate `` f ( a ) `` in `` GF ( p ) `` using Horner scheme . <EoL>
<BoL> Expand results of : func : ` factor ` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial quotient in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Factor ( non square-free ) polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Factor a square-free polynomial `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Create a `` GF ( p ) [ x ] `` polynomial from a dict . <EoL>
<BoL> Create a `` GF ( p ) [ x ] `` polynomial from `` Z [ x ] `` . <EoL>
<BoL> Euclidean Algorithm in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Extended Euclidean Algorithm in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Ben-Or 's polynomial irreducibility test over finite fields . <EoL>
<BoL> Rabin 's polynomial irreducibility test over finite fields . <EoL>
<BoL> Generate random irreducible polynomial of degree `` n `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Test irreducibility of a polynomial `` f `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute polynomial LCM in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Efficiently multiply `` f `` by `` x**n `` . <EoL>
<BoL> Compute LC and a monic polynomial in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Multiply polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f * a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Evaluate `` f ( a ) `` for `` a `` in `` [ a_1 , ... , a_n ] `` . <EoL>
<BoL> Negate a polynomial in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f**n `` in `` GF ( p ) [ x ] `` using repeated squaring . <EoL>
<BoL> Compute `` f**n `` in `` GF ( p ) [ x ] / ( g ) `` using repeated squaring . <EoL>
<BoL> Compute exact quotient in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f/a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Generate a random polynomial in `` GF ( p ) [ x ] `` of degree `` n `` . <EoL>
<BoL> Compute polynomial remainder in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Efficiently divide `` f `` by `` x**n `` . <EoL>
<BoL> Factor a square-free `` f `` in `` GF ( p ) [ x ] `` for large `` p `` . <EoL>
<BoL> Return `` True `` if `` f `` is square-free in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Return square-free part of a `` GF ( p ) [ x ] `` polynomial . <EoL>
<BoL> Square polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Remove leading zeros from `` f `` . <EoL>
<BoL> Subtract polynomials in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Compute `` f - a `` where `` f `` in `` GF ( p ) [ x ] `` and `` a `` in `` GF ( p ) `` . <EoL>
<BoL> Compute `` f - g*h `` where `` f `` , `` g `` , `` h `` in `` GF ( p ) [ x ] `` . <EoL>
<BoL> Convert a `` GF ( p ) [ x ] `` polynomial to a dict . <EoL>
<BoL> Convert a `` GF ( p ) [ x ] `` polynomial to `` Z [ x ] `` . <EoL>
<BoL> Compute polynomial trace map in `` GF ( p ) [ x ] / ( f ) `` . <EoL>
<BoL> Factor a square-free `` f `` in `` GF ( p ) [ x ] `` for medium `` p `` . <EoL>
<BoL> We know that coefficients are algebraic so construct the extension . <EoL>
<BoL> Handle composite domains , e.g . : ZZ [ X ] , QQ [ X ] , ZZ ( X ) , QQ ( X ) . <EoL>
<BoL> The last resort case , i.e . use the expression domain . <EoL>
<BoL> Handle simple domains , e.g . : ZZ , QQ , RR and algebraic domains . <EoL>
<BoL> Construct options from keyword arguments or ... options . <EoL>
<BoL> Transform expressions into a multinomial form . <EoL>
<BoL> Return a multivariate constant . <EoL>
<BoL> Return a multivariate one over `` K `` . <EoL>
<BoL> Return `` True `` if `` f `` is one in `` K [ X ] `` . <EoL>
<BoL> Remove leading zeros from `` f `` in `` K [ X ] `` . <EoL>
<BoL> Return a multivariate zero . <EoL>
<BoL> Return `` True `` if `` f `` is zero in `` K [ X ] `` . <EoL>
<BoL> Return a list of multivariate zeros . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Remove leading zeros from `` f `` in `` K [ x ] `` . <EoL>
<BoL> Recursive helper function for : func : ` dmp_degree_in ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_degree_list ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_inflate ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_list_terms ` . <EoL>
<BoL> Recursive helper for : func : ` _rec_strip ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_validate ` . <EoL>
<BoL> Apply `` h `` to pairs of coefficients of `` f `` and `` g `` . <EoL>
<BoL> Convert the ground domain of `` f `` from `` K0 `` to `` K1 `` . <EoL>
<BoL> Create a new copy of a polynomial `` f `` in `` K [ X ] `` . <EoL>
<BoL> Map `` x_i**m_i `` to `` y_i `` in a polynomial in `` K [ X ] `` . <EoL>
<BoL> Return a list of degrees of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Convert `` f `` from `` K [ X , Y ] `` to `` K [ X ] [ Y ] `` . <EoL>
<BoL> Exclude useless levels from `` f `` . <EoL>
<BoL> Create a `` K [ X ] `` polynomial from a `` dict `` . <EoL>
<BoL> Convert the ground domain of `` f `` from SymPy to `` K `` . <EoL>
<BoL> Return the ground `` n `` -th coefficient of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return True if `` f `` is constant in `` K [ X ] `` . <EoL>
<BoL> Return a list of multivariate constants . <EoL>
<BoL> Include useless levels in `` f `` . <EoL>
<BoL> Map `` y_i `` to `` x_i**k_i `` in a polynomial in `` K [ X ] `` . <EoL>
<BoL> Convert `` f `` from `` K [ X ] [ Y ] `` to `` K [ X , Y ] `` . <EoL>
<BoL> List all non-zero terms from `` f `` in the given order `` order `` . <EoL>
<BoL> Map `` x_i**m_i `` to `` y_i `` in a set of polynomials in `` K [ X ] `` . <EoL>
<BoL> Return `` True `` if `` LC ( f ) `` is negative . <EoL>
<BoL> Return a multivariate value nested `` l `` -levels . <EoL>
<BoL> Normalize a multivariate polynomial in the given domain . <EoL>
<BoL> Return the `` n `` -th coefficient of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return a polynomial in `` K [ x_ { P ( 1 ) } , .. , x_ { P ( n ) } ] `` . <EoL>
<BoL> Return `` True `` if `` LC ( f ) `` is positive . <EoL>
<BoL> Return a multivariate polynomial raised `` l `` -levels . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` in `` K [ X ] `` . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` in `` x_j `` in `` K [ X ] `` . <EoL>
<BoL> Transform `` K [ ..x_i..x_j.. ] `` to `` K [ ..x_j..x_i.. ] `` . <EoL>
<BoL> Remove GCD of terms from `` f `` in `` K [ X ] `` . <EoL>
<BoL> Convert ` f ` into a nested tuple of tuples . <EoL>
<BoL> Return the leading term `` c * x_1**n_1 ... x_k**n_k `` . <EoL>
<BoL> Return the number of levels in `` f `` and recursively strip it . <EoL>
<BoL> Apply `` h `` to pairs of coefficients of `` f `` and `` g `` . <EoL>
<BoL> Convert the ground domain of `` f `` from `` K0 `` to `` K1 `` . <EoL>
<BoL> Create a new copy of a polynomial `` f `` in `` K [ x ] `` . <EoL>
<BoL> Map `` x**m `` to `` y `` in a polynomial in `` K [ x ] `` . <EoL>
<BoL> Create a `` K [ x ] `` polynomial from a `` dict `` . <EoL>
<BoL> Create a `` K [ x ] `` polynomial from a raw `` dict `` . <EoL>
<BoL> Convert the ground domain of `` f `` from SymPy to `` K `` . <EoL>
<BoL> Map `` y `` to `` x**m `` in a polynomial in `` K [ x ] `` . <EoL>
<BoL> Map `` x**m `` to `` y `` in a set of polynomials in `` K [ x ] `` . <EoL>
<BoL> Normalize univariate polynomial in the given domain . <EoL>
<BoL> Return the `` n `` -th coefficient of `` f `` in `` K [ x ] `` . <EoL>
<BoL> Return a polynomial of degree `` n `` with coefficients in `` [ a , b ] `` . <EoL>
<BoL> Compute `` x**n * f ( 1/x ) `` , i.e . : reverse `` f `` in `` K [ x ] `` . <EoL>
<BoL> Remove GCD of terms from `` f `` in `` K [ x ] `` . <EoL>
<BoL> Convert `` K [ x ] `` polynomial to a `` dict `` . <EoL>
<BoL> Convert a `` K [ x ] `` polynomial to a raw `` dict `` . <EoL>
<BoL> Convert ` f ` into a tuple . <EoL>
<BoL> Division of tuples representing monomials . <EoL>
<BoL> Return a function defining admissible order on monomials . <EoL>
<BoL> Returns minimal degree for each variable in a set of monomials . <EoL>
<BoL> Helper function for : func : ` dup_decompose ` . <EoL>
<BoL> Helper function for : func : ` _dup_decompose ` . <EoL>
<BoL> Helper function for : func : ` _dup_decompose ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_clear_denoms ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_diff_eval ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_diff_in ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_eval_in ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_eval_tail ` . <EoL>
<BoL> Recursive helper for : func : ` dmp_integrate_in ` . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` using Newton iteration . <EoL>
<BoL> Returns the leading coefficient of `` f `` . <EoL>
<BoL> Returns the trailing coefficient of `` f `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Convert `` f `` to a dict representation with native coefficients . <EoL>
<BoL> Convert `` f `` to a list representation with native coefficients . <EoL>
<BoL> Convert `` f `` to a dict representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a list representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a tuple representation with native coefficients . <EoL>
<BoL> Unify representations of two algebraic numbers . <EoL>
<BoL> Given a low-level mpf_ function , and optionally similar functions for mpc_ and mpi_ , defines the function as a context method . <EoL>
<BoL> Converts *x* to an `` mpf `` or `` mpc `` . If *x* is of type `` mpf `` , `` mpc `` , `` int `` , `` float `` , `` complex `` , the conversion will be performed losslessly . <EoL>
<BoL> Computes the dot product of the iterables ` A ` and ` B ` , <EoL>
<BoL> Calculates a sum containing a finite number of terms ( for infinite series , see : func : ` ~mpmath.nsum ` ) . <EoL>
<BoL> Return *True* if the absolute value of *x* is infinite ; otherwise return *False* : : <EoL>
<BoL> Return *True* if *x* is integer-valued ; otherwise return *False* : : <EoL>
<BoL> Return *True* if *x* is a NaN ( not-a-number ) , or for a complex number , whether either the real or complex part is NaN ; otherwise return *False* : : <EoL>
<BoL> Determine whether *x* is `` normal '' in the sense of floating-point representation ; that is , return *False* if *x* is zero , an infinity or NaN ; otherwise return *True* . By extension , a complex number *x* is considered `` normal '' if its magnitude is normal : : <EoL>
<BoL> Quick logarithmic magnitude estimate of a number . <EoL>
<BoL> Converts *x* to an `` mpf `` or `` mpc `` . *x* should be a numpy scalar . <EoL>
<BoL> Unify generators in a reasonably intelligent way . <EoL>
<BoL> Create custom class for specific integer modulus . <EoL>
<BoL> Create a raw mpf from a Python float , rounding if necessary . <EoL>
<BoL> Create a raw mpf from a decimal literal , rounding in the specified direction if the input number can not be represented exactly as a binary floating-point number with the given number of bits . The literal syntax accepted is the same as for Python floats . <EoL>
<BoL> Absolute value of a complex number , |a+bi| . Returns an mpf value . <EoL>
<BoL> Return the number of decimal digits required to represent a number with n-bit precision so that it can be uniquely reconstructed from the representation . <EoL>
<BoL> Convert a raw mpf to a rational number . Return integers ( p , q ) such that s = p/q exactly . <EoL>
<BoL> Wrapper of CRT for Collins 's resultant algorithm . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a field . <EoL>
<BoL> Helper function for ` dmp_inner_gcd ( ) ` . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a ring . <EoL>
<BoL> Try to eliminate ` x_0 ` from GCD computation in ` K [ X ] ` . <EoL>
<BoL> Interpolate polynomial GCD from integer GCD . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a field . <EoL>
<BoL> Handle trivial cases in GCD algorithm over a ring . <EoL>
<BoL> Interpolate polynomial GCD from integer GCD . <EoL>
<BoL> Chinese Remainder Theorem . <EoL>
<BoL> Coerce `` a mod p `` to an integer in the range `` [ -p/2 , p/2 ] `` . <EoL>
<BoL> Ask for a value of the given configuration item . <EoL>
<BoL> Sort low-level factors in increasing 'complexity ' order . <EoL>
<BoL> Wang/EEZ : Test evaluation points for suitability . <EoL>
<BoL> Computes a list of monomials which are not divisible by the leading monomials wrt to `` O `` of `` G `` . These monomials are a basis of ` K [ X_1 , \ldots , X_n ] / ( G ) ` . <EoL>
<BoL> Compute the matrices corresponding to the linear maps ` m \mapsto x_i m ` for all variables ` x_i ` . <EoL>
<BoL> Update `` P `` such that for the updated ` P ' ` ` P ' v = e_ { s } ` . <EoL>
<BoL> Converts the reduced Groebner basis `` F `` of a zero-dimensional ideal w.r.t . <EoL>
<BoL> Multiplication of tuples representing monomials . <EoL>
<BoL> Add rational functions `` f `` and `` g `` . <EoL>
<BoL> Computes quotient of fractions `` f `` and `` g `` . <EoL>
<BoL> Multiply rational functions `` f `` and `` g `` . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Subtract rational functions `` f `` and `` g `` . <EoL>
<BoL> Computes partial derivative in `` x `` . <EoL>
<BoL> Return a list of polynomial generators . <EoL>
<BoL> Add two polynomials . <EoL>
<BoL> Equality test for polynomials . <EoL>
<BoL> Multiply two polynomials . <EoL>
<BoL> aise polynomial to power ` n ` <EoL>
<BoL> p2 * p1 with p2 in the coefficient domain of p1 . <EoL>
<BoL> n - p1 with n convertible to the coefficient domain . <EoL>
<BoL> Subtract polynomial p2 from p1 . <EoL>
<BoL> add to self the monomial coeff*x0**i0*x1**i1* ... unless self is a generator -- then just return the sum of the two . <EoL>
<BoL> add to self the product of ( p ) * ( coeff*x0**i0*x1**i1* ... ) unless self is a generator -- then just return the sum of the two . <EoL>
<BoL> Approximate equality test for polynomials . <EoL>
<BoL> Cancel common factors in a rational function `` f/g `` . <EoL>
<BoL> Returns the coefficient that stands next to the given monomial . <EoL>
<BoL> Ordered list of polynomial coefficients . <EoL>
<BoL> Returns the constant coeffcient . <EoL>
<BoL> Returns GCD of polynomial 's coefficients . <EoL>
<BoL> Return a copy of polynomial self . <EoL>
<BoL> The leading degree in `` x `` or the main variable . <EoL>
<BoL> A tuple containing leading degrees in all variables . <EoL>
<BoL> Computes partial derivative in `` x `` . <EoL>
<BoL> Division algorithm , see [ CLO ] p64 . <EoL>
<BoL> multiply inplace the polynomial p by an element in the coefficient ring , provided p is not one of the generators ; else multiply not inplace <EoL>
<BoL> Iterator over coefficients of a polynomial . <EoL>
<BoL> Iterator over monomials of a polynomial . <EoL>
<BoL> Iterator over terms of a polynomial . <EoL>
<BoL> Leading monomial tuple according to the monomial ordering . <EoL>
<BoL> Leading monomial as a polynomial element . <EoL>
<BoL> Leading term as a polynomial element . <EoL>
<BoL> Unordered list of polynomial coefficients . <EoL>
<BoL> Unordered list of polynomial monomials . <EoL>
<BoL> Unordered list of polynomial terms . <EoL>
<BoL> Divides all coefficients by the leading coefficient . <EoL>
<BoL> Ordered list of polynomial monomials . <EoL>
<BoL> Returns content and a primitive polynomial . <EoL>
<BoL> square of a polynomial <EoL>
<BoL> Eliminate monomials with zero coefficient . <EoL>
<BoL> The tail degree in `` x `` or the main variable . <EoL>
<BoL> A tuple containing tail degrees in all variables . <EoL>
<BoL> Ordered list of polynomial terms . <EoL>
<BoL> Transform expressions into a multinomial form . <EoL>
<BoL> Construct a field deriving generators and domain from options and input expressions . <EoL>
<BoL> Construct new rational function field and inject generators into global namespace . <EoL>
<BoL> Construct new rational function field returning ( field , ( x1 , ... , xn ) ) . <EoL>
<BoL> utility function for `` gf_edf_zassenhaus `` Compute `` f** ( ( p**n - 1 ) // 2 ) `` in `` GF ( p ) [ x ] / ( g ) `` `` f** ( ( p**n - 1 ) // 2 ) = ( f*f**p* ... *f** ( p**n - 1 ) ) ** ( ( p - 1 ) // 2 ) `` <EoL>
<BoL> utility for `` gf_edf_shoup `` <EoL>
<BoL> Used in gf_csolve to generate solutions of f ( x ) cong 0 mod ( p** ( s + 1 ) ) from the solutions of f ( x ) cong 0 mod ( p**s ) . <EoL>
<BoL> Solutions of f ( x ) congruent 0 mod ( p**e ) . <EoL>
<BoL> Compute a basis of the kernel of `` Q `` . <EoL>
<BoL> First part of the Chinese Remainder Theorem . <EoL>
<BoL> Second part of the Chinese Remainder Theorem . <EoL>
<BoL> To solve f ( x ) congruent 0 mod ( n ) . <EoL>
<BoL> compute gf_pow_mod ( f , p , g , p , K ) using the Frobenius map <EoL>
<BoL> return the list of `` x** ( i*p ) mod g in Z_p `` for `` i = 0 , .. , n - 1 `` where `` n = gf_degree ( g ) `` <EoL>
<BoL> Normalize all coefficients in `` K `` . <EoL>
<BoL> Return the square-free decomposition of a `` GF ( p ) [ x ] `` polynomial . <EoL>
<BoL> Reduce all coefficients modulo `` p `` . <EoL>
<BoL> Value of polynomial ' f ' at ' a ' in field R . <EoL>
<BoL> Returns the values of x satisfying a*x congruent b mod ( m ) <EoL>
<BoL> Computes Groebner basis for a set of polynomials in ` K [ X ] ` . <EoL>
<BoL> Computes a reduced Groebner basis for the ideal generated by F . <EoL>
<BoL> Compare two critical pairs c and d . <EoL>
<BoL> Key for comparing critical pairs . <EoL>
<BoL> Compute the critical pair corresponding to two labeled polynomials . <EoL>
<BoL> F5-reduce a labeled polynomial f by B . <EoL>
<BoL> Computes Groebner basis for a set of polynomials in ` K [ X ] ` . <EoL>
<BoL> Computes GCD of two polynomials using Groebner bases . <EoL>
<BoL> Computes LCM of two polynomials using Groebner bases . <EoL>
<BoL> Check if G is a Groebner basis . <EoL>
<BoL> Checks if G is a minimal Groebner basis . <EoL>
<BoL> Checks if G is a reduced Groebner basis . <EoL>
<BoL> Check if a labeled polynomial is redundant by checking if its signature and number imply rewritability or comparability . <EoL>
<BoL> Compare two labeled polynomials . <EoL>
<BoL> Key for comparing two labeled polynomials . <EoL>
<BoL> Multiply a labeled polynomial with a term . <EoL>
<BoL> Subtract labeled polynomial g from f . <EoL>
<BoL> Does there exist a monomial X such that XA == B ? <EoL>
<BoL> Least common multiple of tuples representing monomials . <EoL>
<BoL> Compute reduced Groebner basis , from BeckerWeispfenning93 , p. 216The actual reduction algorithm . <EoL>
<BoL> Compute the S-polynomial of a critical pair . <EoL>
<BoL> Compare two signatures by extending the term order to K [ X ] ^n . <EoL>
<BoL> Key for comparing two signatures . <EoL>
<BoL> Multiply a signature by a monomial . <EoL>
<BoL> Compute LCM ( LM ( p1 ) , LM ( p2 ) ) /LM ( p1 ) *p1 - LCM ( LM ( p1 ) , LM ( p2 ) ) /LM ( p2 ) *p2 This is the S-poly provided p1 and p2 are monic <EoL>
<BoL> Division of two terms in over a ring/field . <EoL>
<BoL> Interpolate polynomial GCD from integer GCD . <EoL>
<BoL> Heuristic polynomial GCD in `` Z [ X ] `` . <EoL>
<BoL> Transform an expression into a multinomial form . <EoL>
<BoL> Computes the number of monomials . <EoL>
<BoL> Returns the total degree of a monomial . <EoL>
<BoL> Greatest common divisor of tuples representing monomials . <EoL>
<BoL> Division of tuples representing monomials . <EoL>
<BoL> Returns maximal degree for each variable in a set of monomials . <EoL>
<BoL> Return the n-th pow of the monomial . <EoL>
<BoL> Returns a tuple ( open_lines , close_lines ) containing lists of codelines <EoL>
<BoL> function to calculate score based on position among indices <EoL>
<BoL> Print the expression as code . <EoL>
<BoL> Return a factor having root `` v `` It is assumed that one of the factors has root `` v `` . <EoL>
<BoL> Generate coefficients for ` primitive_element ( ) ` . <EoL>
<BoL> Returns `` expand_mul ( x**degree ( p , x ) *p.subs ( x , 1/x ) ) `` <EoL>
<BoL> Returns the minimal polynomial for the `` nth-root `` of a sum of surds or `` None `` if it fails . <EoL>
<BoL> returns `` minpoly ( Add ( *a ) , dom , x ) `` <EoL>
<BoL> Computes the minimal polynomial of an algebraic element using operations on minimal polynomials <EoL>
<BoL> Returns the minimal polynomial of `` cos ( ex ) `` see http : //mathworld.wolfram.com/TrigonometryAngles.html <EoL>
<BoL> Returns the minimal polynomial of `` exp ( ex ) `` <EoL>
<BoL> Computes the minimal polynomial of an algebraic number using Groebner basesReturns True if it is more likely that the minimal polynomial algorithm works better with the inverse <EoL>
<BoL> returns `` minpoly ( Mul ( *a ) , dom , x ) `` <EoL>
<BoL> return the minimal polynomial for `` op ( ex1 , ex2 ) `` <EoL>
<BoL> Returns `` minpoly ( ex**pw , x ) `` <EoL>
<BoL> Returns the minimal polynomial of a `` CRootOf `` object . <EoL>
<BoL> Returns the minimal polynomial of `` sin ( ex ) `` see http : //mathworld.wolfram.com/TrigonometryAngles.html <EoL>
<BoL> Returns `` _mexpand ( y**deg*p.subs ( { x : x / y } ) ) `` <EoL>
<BoL> helper function for `` _minimal_polynomial_sq `` <EoL>
<BoL> split the list of integers `` a `` into a list of integers , `` a1 `` having `` g = gcd ( a1 ) `` , and a list `` a2 `` whose elements are not divisible by `` g `` . Returns `` g , a1 , a2 `` <EoL>
<BoL> Low-level implementation of Chebyshev polynomials of the 1st kind . <EoL>
<BoL> Convert a multinomial form into an expression . <EoL>
<BoL> Construct field isomorphism via factorization . <EoL>
<BoL> Construct field isomorphism using PSLQ algorithm . <EoL>
<BoL> Returns ` True ` if there is a chance for isomorphism . <EoL>
<BoL> Construct a common number field for all extensions . <EoL>
<BoL> Compute resultant of `` f `` and `` g `` . <EoL>
<BoL> Construct a polynomial ring returning `` ( ring , x_1 , ... , x_n ) `` . <EoL>
<BoL> compute the composed sum `` prod ( p2 ( x - beta ) for beta root of p1 ) `` <EoL>
<BoL> Compute square-free norm of `` f `` . <EoL>
<BoL> Express ` extension ` in the field generated by ` theta ` . <EoL>
<BoL> Build a monomial order on `` gens `` . <EoL>
<BoL> Returns the leading coefficient of `` f `` . <EoL>
<BoL> Returns the trailing coefficient of `` f `` . <EoL>
<BoL> Make all coefficients in `` f `` positive . <EoL>
<BoL> Add two multivariate polynomials `` f `` and `` g `` . <EoL>
<BoL> Add an element of the ground domain to `` f `` . <EoL>
<BoL> Returns all coefficients from `` f `` . <EoL>
<BoL> Returns all monomials from `` f `` . <EoL>
<BoL> Returns all terms from a `` f `` . <EoL>
<BoL> Cancel common factors in a rational function `` f/g `` . <EoL>
<BoL> Clear denominators , but keep the ground domain . <EoL>
<BoL> Returns all non-zero coefficients from `` f `` in lex order . <EoL>
<BoL> Returns GCD of `` f `` and `` g `` and their cofactors . <EoL>
<BoL> Computes functional composition of `` f `` and `` g `` . <EoL>
<BoL> Returns GCD of polynomial coefficients . <EoL>
<BoL> Convert the ground domain of `` f `` . <EoL>
<BoL> Return the number of complex roots of `` f `` in `` [ inf , sup ] `` . <EoL>
<BoL> Return the number of real roots of `` f `` in `` [ inf , sup ] `` . <EoL>
<BoL> Computes functional decomposition of `` f `` . <EoL>
<BoL> Reduce degree of ` f ` by mapping ` x_i^m ` to ` y_i ` . <EoL>
<BoL> Returns the leading degree of `` f `` in `` x_j `` . <EoL>
<BoL> Returns a list of degrees of `` f `` . <EoL>
<BoL> Computes the `` m `` -th order derivative of `` f `` in `` x_j `` . <EoL>
<BoL> Computes discriminant of `` f `` . <EoL>
<BoL> Polynomial division with remainder of `` f `` and `` g `` . <EoL>
<BoL> Eject selected generators into the ground domain . <EoL>
<BoL> Evaluates `` f `` at the given point `` a `` in `` x_j `` . <EoL>
<BoL> Remove useless generators from `` f `` . <EoL>
<BoL> Computes polynomial exact quotient of `` f `` and `` g `` . <EoL>
<BoL> Exact quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Returns a list of irreducible factors of `` f `` . <EoL>
<BoL> Construct and instance of `` cls `` from a `` dict `` representation . <EoL>
<BoL> Create an instance of `` cls `` given a list of native coefficients . <EoL>
<BoL> Create an instance of `` cls `` given a list of SymPy coefficients . <EoL>
<BoL> Returns polynomial GCD of `` f `` and `` g `` . <EoL>
<BoL> Extended Euclidean algorithm , if univariate . <EoL>
<BoL> Computes greatest factorial factorization of `` f `` . <EoL>
<BoL> Half extended Euclidean algorithm , if univariate . <EoL>
<BoL> Returns the homogeneous order of `` f `` . <EoL>
<BoL> Return homogeneous polynomial of `` f `` <EoL>
<BoL> Inject ground domain generators into `` f `` . <EoL>
<BoL> Computes the `` m `` -th order indefinite integral of `` f `` in `` x_j `` . <EoL>
<BoL> Compute isolating intervals for roots of `` f `` . <EoL>
<BoL> Invert `` f `` modulo `` g `` , if possible . <EoL>
<BoL> Returns l1 norm of `` f `` . <EoL>
<BoL> Returns polynomial LCM of `` f `` and `` g `` . <EoL>
<BoL> Convert algebraic coefficients to rationals . <EoL>
<BoL> Returns maximum norm of `` f `` . <EoL>
<BoL> Divides all coefficients by `` LC ( f ) `` . <EoL>
<BoL> Returns all non-zero monomials from `` f `` in lex order . <EoL>
<BoL> Multiply two multivariate polynomials `` f `` and `` g `` . <EoL>
<BoL> Multiply `` f `` by a an element of the ground domain . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Computes `` Norm ( f ) `` . <EoL>
<BoL> Returns the `` n `` -th coefficient of `` f `` . <EoL>
<BoL> Polynomial pseudo-division of `` f `` and `` g `` . <EoL>
<BoL> Create a DMP out of the given representation . <EoL>
<BoL> Returns a polynomial in ` K [ x_ { P ( 1 ) } , ... , x_ { P ( n ) } ] ` . <EoL>
<BoL> Polynomial exact pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Polynomial pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Polynomial pseudo-remainder of `` f `` and `` g `` . <EoL>
<BoL> Returns content and a primitive form of `` f `` . <EoL>
<BoL> Computes polynomial quotient of `` f `` and `` g `` . <EoL>
<BoL> Quotient of `` f `` by a an element of the ground domain . <EoL>
<BoL> Refine an isolating interval to the given precision . <EoL>
<BoL> Computes polynomial remainder of `` f `` and `` g `` . <EoL>
<BoL> Computes resultant of `` f `` and `` g `` via PRS . <EoL>
<BoL> Compute `` f** ( -1 ) `` mod `` x**n `` . <EoL>
<BoL> Efficiently compute Taylor shift `` f ( x + a ) `` . <EoL>
<BoL> Take a continuous subsequence of terms of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Returns a list of square-free factors of `` f `` . <EoL>
<BoL> Computes square-free norm of `` f `` . <EoL>
<BoL> Computes square-free part of `` f `` . <EoL>
<BoL> Square a multivariate polynomial `` f `` . <EoL>
<BoL> Computes the Sturm sequence of `` f `` . <EoL>
<BoL> Subtract two multivariate polynomials `` f `` and `` g `` . <EoL>
<BoL> Subtract an element of the ground domain from `` f `` . <EoL>
<BoL> Computes subresultant PRS sequence of `` f `` and `` g `` . <EoL>
<BoL> Returns all non-zero terms from `` f `` in lex order . <EoL>
<BoL> Remove GCD of terms from the polynomial `` f `` . <EoL>
<BoL> Convert `` f `` to a dict representation with native coefficients . <EoL>
<BoL> Make the ground domain exact . <EoL>
<BoL> Make the ground domain a field . <EoL>
<BoL> Convert `` f `` to a list representation with native coefficients . <EoL>
<BoL> Make the ground domain a ring . <EoL>
<BoL> Convert `` f `` to a dict representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a list representation with SymPy coefficients . <EoL>
<BoL> Convert `` f `` to a tuple representation with native coefficients . <EoL>
<BoL> Returns the total degree of `` f `` . <EoL>
<BoL> Evaluate functional transformation `` q**n * f ( p/q ) `` . <EoL>
<BoL> Reduce `` f `` modulo a constant `` p `` . <EoL>
<BoL> Unify representations of two multivariate polynomials . <EoL>
<BoL> Low-level implementation of Chebyshev polynomials of the 2nd kind . <EoL>
<BoL> Low-level implementation of Gegenbauer polynomials . <EoL>
<BoL> Low-level implementation of Hermite polynomials . <EoL>
<BoL> Low-level implementation of Jacobi polynomials . <EoL>
<BoL> Low-level implementation of Laguerre polynomials . <EoL>
<BoL> Low-level implementation of Legendre polynomials . <EoL>
<BoL> Low-level implementation of fn ( n , x ) <EoL>
<BoL> Low-level implementation of fn ( -n , x ) <EoL>
<BoL> Allow specified flags to be used in the given context . <EoL>
<BoL> Bronstein 's full partial fraction decomposition algorithm . <EoL>
<BoL> Bronstein 's full partial fraction decomposition algorithm . <EoL>
<BoL> Partial fractions via method of undetermined coefficients . <EoL>
<BoL> Update options with default values . <EoL>
<BoL> Add two multivariate fractions `` f `` and `` g `` . <EoL>
<BoL> Remove common factors from `` f.num `` and `` f.den `` . <EoL>
<BoL> Returns the denominator of `` f `` . <EoL>
<BoL> Computes quotient of fractions `` f `` and `` g `` . <EoL>
<BoL> Unify representations of two multivariate fractions . <EoL>
<BoL> Create a DMP out of the given representation . <EoL>
<BoL> Computes inverse of a fraction `` f `` . <EoL>
<BoL> Multiply two multivariate fractions `` f `` and `` g `` . <EoL>
<BoL> Negate all coefficients in `` f `` . <EoL>
<BoL> Returns the numerator of `` f `` . <EoL>
<BoL> Create a DMF out of the given representation . <EoL>
<BoL> Unify a multivariate fraction and a polynomial . <EoL>
<BoL> Raise `` f `` to a non-negative power `` n `` . <EoL>
<BoL> Subtract two multivariate fractions `` f `` and `` g `` . <EoL>
<BoL> Make the ground domain exact . <EoL>
<BoL> Make the ground domain a field . <EoL>
<BoL> Make the ground domain a ring . <EoL>
<BoL> Norm of `` f `` in `` K [ X1 , ... , Xn ] `` , often not square-free . <EoL>
<BoL> Initialized configuration of polys module . <EoL>
<BoL> Assign a value to ( or reset ) a configuration item . <EoL>
<BoL> Returns a rational interpolation , where the data points are element of any integral domain . <EoL>
<BoL> Generates symmetric polynomial of order ` n ` . <EoL>
<BoL> Rewrite a polynomial in terms of elementary symmetric polynomials . <EoL>
<BoL> Generate Viete 's formulas for `` f `` . <EoL>
<BoL> Compute coefficient basis for a polynomial over integers . <EoL>
<BoL> Find `` ( L , U ) `` such that `` L < = phi^-1 ( m ) < = U `` . <EoL>
<BoL> Descartes-Euler solution of the quartic equation <EoL>
<BoL> Try to get rid of symbolic coefficients from `` poly `` . <EoL>
<BoL> Returns all factors of a univariate polynomial . <EoL>
<BoL> Returns a list of roots of a binomial polynomial . <EoL>
<BoL> Returns a list of roots of a cubic polynomial . <EoL>
<BoL> Compute roots of cyclotomic polynomials . <EoL>
<BoL> Returns a list of roots of a linear polynomial . <EoL>
<BoL> Returns a list of roots of a quadratic polynomial . <EoL>
<BoL> Transform an expression into a multinomial form . <EoL>
<BoL> Reorder levels using dict representation . <EoL>
<BoL> Multiply a list of `` ( expr , exp ) `` pairs . <EoL>
<BoL> Helper function for : func : ` sqf ` and : func : ` factor ` . <EoL>
<BoL> Helper function for : func : ` sqf_list ` and : func : ` factor_list ` . <EoL>
<BoL> Construct polynomials from expressions . <EoL>
<BoL> Construct a polynomial from an expression . <EoL>
<BoL> Sort generators in a reasonably intelligent way . <EoL>
<BoL> Sort a list of `` ( expr , exp ) `` pairs . <EoL>
<BoL> Helper function for : func : ` _factor ` . <EoL>
<BoL> Helper function for : func : ` _symbolic_factor ` . <EoL>
<BoL> helper function to factor polynomial using to_rational_coeffs <EoL>
<BoL> Add a new `` ( key , value ) `` pair to arguments `` dict `` . <EoL>
<BoL> Compute polynomial pseudo-quotient of `` f `` and `` g `` . <EoL>
<BoL> Compute polynomial pseudo-remainder of `` f `` and `` g `` . <EoL>
<BoL> Compute content and the primitive form of `` f `` . <EoL>
<BoL> Return a list of real roots with multiplicities of `` f `` . <EoL>
<BoL> Reduces a polynomial `` f `` modulo a set of polynomials `` G `` . <EoL>
<BoL> Refine an isolating interval of a root to the given precision . <EoL>
<BoL> Compute polynomial remainder of `` f `` and `` g `` . <EoL>
<BoL> Compute square-free factorization of `` f `` . <EoL>
<BoL> Compute a list of square-free factors of `` f `` . <EoL>
<BoL> Compute square-free part of `` f `` . <EoL>
<BoL> Compute Sturm sequence of `` f `` . <EoL>
<BoL> Compute subresultant PRS of `` f `` and `` g `` . <EoL>
<BoL> Return the total_degree of `` f `` in the given variables . <EoL>
<BoL> Reduce `` f `` modulo a constant `` p `` . <EoL>
<BoL> Support for passing generators as ` *gens ` and ` [ gens ] ` . <EoL>
<BoL> Transform an expression into a multinomial form given generators . <EoL>
<BoL> Transform an expression into a multinomial form and figure out generators . <EoL>
<BoL> Transform expressions into a multinomial form given generators . <EoL>
<BoL> Transform expressions into a multinomial form and figure out generators . <EoL>
<BoL> Generates a polynomial of degree `` n `` with coefficients in `` [ inf , sup ] `` . <EoL>
<BoL> Expansion using formula . <EoL>
<BoL> Expansion using formula <EoL>
<BoL> Coefficient of ` x\_i**j ` in p , where `` t `` = ( i , j ) <EoL>
<BoL> Helper function for ` rs\_exp ` . <EoL>
<BoL> Return constant term in p with respect to x <EoL>
<BoL> Return a list of precision steps for the Newton 's method <EoL>
<BoL> Check if `` p `` has a constant term in `` x `` <EoL>
<BoL> Compute `` x**n * p1 ( 1/x ) `` for a univariate polynomial `` p1 `` in `` x `` . <EoL>
<BoL> Univariate series expansion of the nth root of `` p `` . <EoL>
<BoL> Univariate series inversion `` 1/p `` modulo `` O ( x**prec ) `` . <EoL>
<BoL> Helper function of ` rs\_tan ` . <EoL>
<BoL> Helper function of ` rs\_tanh ` <EoL>
<BoL> Return a list of integers ~= <EoL>
<BoL> Return n factorial ( for integers n > = 0 only ) . <EoL>
<BoL> Return ` p*x_i**n ` . <EoL>
<BoL> Calculate the series expansion of the principal branch of the Lambert W function . <EoL>
<BoL> Arcsine of a series <EoL>
<BoL> The arctangent of a series <EoL>
<BoL> Hyperbolic arctangent of a series <EoL>
<BoL> Cosine of a series <EoL>
<BoL> Return the tuple ` ( rs\_cos ( p , x , prec ) ` , ` rs\_sin ( p , x , prec ) ) ` . <EoL>
<BoL> Hyperbolic cosine of a series <EoL>
<BoL> Cotangent of a series <EoL>
<BoL> Return partial derivative of `` p `` with respect to `` x `` . <EoL>
<BoL> Exponentiation of a series modulo `` O ( x**prec ) `` <EoL>
<BoL> Function of a multivariate series computed by substitution . <EoL>
<BoL> Return `` sum f_i/i ! *x**i `` from `` sum f_i*x**i `` , where `` x `` is the first variable . <EoL>
<BoL> Integrate `` p `` with respect to `` x `` . <EoL>
<BoL> Test if `` p `` is Puiseux series in `` x `` . <EoL>
<BoL> The Logarithm of `` p `` modulo `` O ( x**prec ) `` . <EoL>
<BoL> Find the minimum power of ` a ` in the series expansion of exp <EoL>
<BoL> Return the product of the given two series , modulo `` O ( x**prec ) `` . <EoL>
<BoL> Compute the truncated Newton sum of the polynomial `` p `` <EoL>
<BoL> Multivariate series expansion of the nth root of `` p `` . <EoL>
<BoL> Return `` p1**n `` modulo `` O ( x**prec ) `` <EoL>
<BoL> Return the puiseux series for ` f ( p , x , prec ) ` . <EoL>
<BoL> Return the puiseux series for ` f ( p , q , x , prec ) ` . <EoL>
<BoL> Return the series expansion of an expression about 0 . <EoL>
<BoL> Return a series ` sum c [ n ] *p**n ` modulo ` O ( x**prec ) ` . <EoL>
<BoL> Multivariate series inversion `` 1/p `` modulo `` O ( x**prec ) `` . <EoL>
<BoL> Reversion of a series . <EoL>
<BoL> Sine of a series <EoL>
<BoL> Hyperbolic sine of a series <EoL>
<BoL> Square the series modulo `` O ( x**prec ) `` <EoL>
<BoL> Substitution with truncation according to the mapping in `` rules `` . <EoL>
<BoL> Tangent of a series . <EoL>
<BoL> Hyperbolic tangent of a series <EoL>
<BoL> Truncate the series in the `` x `` variable with precision `` prec `` , that is , modulo `` O ( x**prec ) `` <EoL>
<BoL> Construct a ring deriving generators and domain from options and input expressions . <EoL>
<BoL> Return a list of polynomial generators . <EoL>
<BoL> Add a sequence of polynomials or containers of polynomials . <EoL>
<BoL> Add the elements of `` symbols `` as generators to `` self `` <EoL>
<BoL> Add the generators of `` other `` to `` self `` <EoL>
<BoL> Remove specified generators from this ring . <EoL>
<BoL> Remove specified generators from the ring and inject them into its domain . <EoL>
<BoL> Compute index of `` gen `` in `` self.gens `` . <EoL>
<BoL> Return the ith-basis element . <EoL>
<BoL> Multiply a sequence of polynomials or containers of polynomials . <EoL>
<BoL> Construct a polynomial ring and inject `` x_1 , ... , x_n `` into the global namespace . <EoL>
<BoL> Construct a polynomial ring returning `` ( ring , ( x_1 , ... , x_n ) ) `` . <EoL>
<BoL> Initialize new complex interval with complete information . <EoL>
<BoL> Internal one step complex root refinement procedure . <EoL>
<BoL> Return tuple representation of the complex isolating interval 's SW and NE corners , respectively . <EoL>
<BoL> This complex interval really is located in lower half-plane . <EoL>
<BoL> Return `` True `` if two isolation intervals are disjoint . <EoL>
<BoL> Perform one step of complex root refinement algorithm . <EoL>
<BoL> Refine an isolating interval until it is disjoint with another one . <EoL>
<BoL> Refine an isolating interval until it is of sufficiently small size . <EoL>
<BoL> Perform several steps of complex root refinement algorithm . <EoL>
<BoL> Initialize new real interval with complete information . <EoL>
<BoL> Internal one step real root refinement procedure . <EoL>
<BoL> Return tuple representation of real isolating interval . <EoL>
<BoL> Return `` True `` if two isolation intervals are disjoint . <EoL>
<BoL> Perform one step of real root refinement algorithm . <EoL>
<BoL> Refine an isolating interval until it is disjoint with another one . <EoL>
<BoL> Refine an isolating interval until it is of sufficiently small size . <EoL>
<BoL> Perform several steps of real root refinement algorithm . <EoL>
<BoL> Return the half-axis ( or origin ) on which ( re , im ) point is located . <EoL>
<BoL> Find a rectangle of minimum area for bisection . <EoL>
<BoL> Discard an isolating interval if outside `` ( inf , sup ) `` . <EoL>
<BoL> Check if Mobius transforms define disjoint intervals . <EoL>
<BoL> Generate a sequence of extended quadrants from a list of critical points . <EoL>
<BoL> Handle special case of CF algorithm when `` f `` is homogeneous . <EoL>
<BoL> Convert an open interval to a Mobius transform . <EoL>
<BoL> Convert a Mobius transform to an open interval . <EoL>
<BoL> Isolate real roots of a list of polynomials and disjoin intervals . <EoL>
<BoL> Return `` True `` if the given rectangle is small enough . <EoL>
<BoL> Reverse intervals for traversal from right to left and from top to bottom . <EoL>
<BoL> Transform sequences of quadrants to a sequence of rules . <EoL>
<BoL> Compute the winding number of the input polynomial , i.e . the number of roots . <EoL>
<BoL> Return the number of imaginary roots for irreducible univariate polynomial `` f `` . <EoL>
<BoL> Find a solution to ` f ( x ) = 0 ` , using *x0* as starting point or interval for *x* . <EoL>
<BoL> Fateman 's GCD benchmark : trivial GCD <EoL>
<BoL> Fateman 's GCD benchmark : linearly dense quartic inputs <EoL>
<BoL> Fateman 's GCD benchmark : sparse inputs ( deg f ~ vars f ) <EoL>
<BoL> Fateman 's GCD benchmark : trivial GCD <EoL>
<BoL> Fateman 's GCD benchmark : linearly dense quartic inputs <EoL>
<BoL> Fateman 's GCD benchmark : sparse inputs ( deg f ~ vars f ) <EoL>
<BoL> Generates n-th Swinnerton-Dyer polynomial in ` x ` . <EoL>
<BoL> Recursively collect sums in an expression . <EoL>
<BoL> Solve a system of two bivariate quadratic polynomial equations . <EoL>
<BoL> Solve a generic system of polynomial equations.Returns True if ' f ' is univariate in its last variable.Replace generator with a root so that the result is nice.Recursively solves reduced polynomial systems . <EoL>
<BoL> Solve a system of polynomial equations . <EoL>
<BoL> Solve a polynomial system using Gianni-Kalkbrenner algorithm . <EoL>
<BoL> Correctly rounded integer ( floor ) square root with remainder . <EoL>
<BoL> See if unicode output is available and leverage it if possible <EoL>
<BoL> Set whether pretty-printer should use unicode by default <EoL>
<BoL> Returns a string containing the prettified form of expr . <EoL>
<BoL> Prints C representation of the given expression . <EoL>
<BoL> Prints the Fortran representation of the given expression . <EoL>
<BoL> Prints the GLSL representation of the given expression . <EoL>
<BoL> Print to Gtkmathview , a gtk widget capable of rendering MathML . <EoL>
<BoL> Prints the Javascript representation of the given expression . <EoL>
<BoL> Prints LaTeX representation of the given expression . Takes the same settings as `` latex ( ) `` . <EoL>
<BoL> Prints a pretty representation of the MathML code for expr . If printer is presentation then prints Presentation MathML else prints content MathML . <EoL>
<BoL> Print output of python ( ) function <EoL>
<BoL> Prints R representation of the given expression . <EoL>
<BoL> Prints a tree representation of `` node '' . <EoL>
<BoL> Declare a numeric constant at the top of a function <EoL>
<BoL> Take in a list of lines of code , and format them accordingly . <EoL>
<BoL> Formats a text string as a comment . <EoL>
<BoL> Formats a codestring with the proper line ending . <EoL>
<BoL> Returns the precedence of a given object . <EoL>
<BoL> Return whether a partial derivative symbol is required for printing <EoL>
<BoL> Split a symbol name into a name , superscripts and subscripts <EoL>
<BoL> Print a dictionary of attributes <EoL>
<BoL> List of strings for all expr- > expr.arg pairs <EoL>
<BoL> String defining a node <EoL>
<BoL> A string that follows obj = type ( obj ) ( *obj.args ) exactly <EoL>
<BoL> Merge style dictionaries in order <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Prints the Julia representation of the given expression . <EoL>
<BoL> Returns a string usable for lambdifying . <EoL>
<BoL> Register function mappings supplied by use <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Prints the Octave ( or Matlab ) representation of the given expression . <EoL>
<BoL> Returns the precedence of a given object according to the traditional rules of mathematics . This is the precedence for the LaTeX and pretty printer . <EoL>
<BoL> Converts an expr to a string of Python code <EoL>
<BoL> Return Python interpretation of passed expression ( can be passed to the exec ( ) function without any modifications ) <EoL>
<BoL> Converts an expr to a string of r code <EoL>
<BoL> The fallback printer . <EoL>
<BoL> Prints each item in ` args ` and joins them with ` sep ` . <EoL>
<BoL> eturn expr in repr form <EoL>
<BoL> basic function for printing ` Function ` <EoL>
<BoL> Accepts a string of code or a list of code lines <EoL>
<BoL> Prints Rust representation of the given expression . <EoL>
<BoL> Converts an expr to a string of Rust code <EoL>
<BoL> eturn expr in mixed str/repr form <EoL>
<BoL> Prettyprints systems of nodes . <EoL>
<BoL> Returns information about the `` node '' . <EoL>
<BoL> Returns a tree representation of `` node '' as a string . <EoL>
<BoL> Put an expression over a common denominator , cancel and reduce . <EoL>
<BoL> Solve univariate recurrence with rational coefficients . <EoL>
<BoL> Given linear recurrence operator ` \operatorname { L } ` of order ` k ` with polynomial coefficients and inhomogeneous equation ` \operatorname { L } y = f ` , where ` f ` is a polynomial , we seek for all rational solutions over field ` K ` of characteristic zero . <EoL>
<BoL> Solve equation of a type p ( x ; a_1 , ... , a_k ) == q ( x ) where both p , q are univariate polynomials and f depends on k parameters . The result of this functions is a dictionary with symbolic values of those parameters with respect to coefficients in q . <EoL>
<BoL> Finds the residue of `` expr `` at the point x=x0 . <EoL>
<BoL> Find tests for the given object and any contained objects , and add them to ` tests ` . <EoL>
<BoL> Return a line number of the given object 's docstring . Note : this method assumes that the object has a docstring . <EoL>
<BoL> Return true if the given object is defined in the given module . <EoL>
<BoL> Return a DocTest for the given object , if it defines a docstring ; otherwise , return None . <EoL>
<BoL> Return a list of the DocTests that are defined by the given object 's docstring , or by any of its contained objects' docstrings . <EoL>
<BoL> Record the fact that the given DocTest ( ` test ` ) generated ` f ` failures out of ` t ` tried examples . <EoL>
<BoL> Run the examples in ` test ` . <EoL>
<BoL> Create a new test runner . <EoL>
<BoL> Report that the given example failed . <EoL>
<BoL> Report that the test runner is about to process the given example . ( Only displays a message if verbose=True ) <EoL>
<BoL> Report that the given example ran successfully . ( Only displays a message if verbose=True ) <EoL>
<BoL> Report that the given example raised an unexpected exception . <EoL>
<BoL> Run the examples in ` test ` , and display the results using the writer function ` out ` . <EoL>
<BoL> Print a summary of all the test cases that have been run by this DocTestRunner , and return a tuple ` ( f , t ) ` , where ` f ` is the total number of failed examples , and ` t ` is the total number of tried examples . <EoL>
<BoL> Find tests for the given object and any contained objects , and add them to `` tests `` . <EoL>
<BoL> Return a DocTest for the given object , if it defines a docstring ; otherwise , return None . <EoL>
<BoL> Run the examples in `` test `` , and display the results using the writer function `` out `` . <EoL>
<BoL> Returns the list of \*.py files ( default ) from which docstrings will be tested which are at or below directory `` dir `` . By default , only those that have an __init__.py in their parent directory and do not start with `` test_ `` will be included.Checks if given pathname x is an importable module by checking for __init__.py file . <EoL>
<BoL> Runs the tests and returns True if all tests pass , otherwise False . <EoL>
<BoL> Convert string to hex-escaped ASCII string . <EoL>
<BoL> Return True iff the actual output from an example ( ` got ` ) matches the expected output ( ` want ` ) . <EoL>
<BoL> Return a string describing the differences between the expected output for a given example ( ` example ` ) and the actual output ( ` got ` ) . ` optionflags ` is the set of option flags used to compare ` want ` and ` got ` . <EoL>
<BoL> Returns the list of test_*.py ( default ) files at or below directory `` dir `` relative to the sympy home directory . <EoL>
<BoL> Does the keyword expression self._kw match `` x '' ? Returns True/False . <EoL>
<BoL> Internal function that actually runs the doctests . <EoL>
<BoL> Add the given number of space characters to the beginning of every non-blank line in `` s `` , and return the result . If the string `` s `` is Unicode , it is encoded using the stdout encoding and the `` backslashreplace `` error handler . <EoL>
<BoL> Report that the given example failed . <EoL>
<BoL> Internal function that actually runs the tests . <EoL>
<BoL> Converts a list of '/ ' separated paths into a list of native ( os.sep separated ) paths and converts to lowercase if the system is case insensitive . <EoL>
<BoL> Returns the root sympy directory and set the global value indicating whether the system is case sensitive or not . <EoL>
<BoL> Splits a list into part a of bInterpolate the inverse to the cumulative distribution function given by density <EoL>
<BoL> Run tests in the specified test_*.py files . <EoL>
<BoL> Returns appropriate sequence object . <EoL>
<BoL> Checks whether function `` func `` is invertible when the domain is restricted to set `` setv `` . <EoL>
<BoL> Simplify an intersection using known rules <EoL>
<BoL> Simplify a : class : ` Union ` using known rules <EoL>
<BoL> Compute the unitary , ordinary-frequency sine transform of ` f ` , defined as <EoL>
<BoL> Python calls __getattr__ if no attribute of that name was installed yet . <EoL>
<BoL> This function handles the indefinite integrations of Singularity functions . The `` integrate `` function calls this function internally whenever an instance of SingularityFunction is passed as argument . <EoL>
<BoL> Return a tuple derived from f = lhs - rhs that is one of the following : <EoL>
<BoL> Solve system of N linear equations with M variables , which means both under- and overdetermined systems are supported . <EoL>
<BoL> Solves the augmented matrix system using LUsolve and returns a dictionary in which solutions are keyed to the symbols of syms *as ordered* . <EoL>
<BoL> Replace sec , csc with 1/cos , 1/sin <EoL>
<BoL> Return True if e is a Pow or is exp . <EoL>
<BoL> Return ( recursively ) set of all denominators that appear in eq that contain any symbol in `` symbols `` ; if `` symbols `` are not provided then all denominators will be returned . <EoL>
<BoL> Return the `` det ( M ) `` computed from minors without introducing new nesting in products . <EoL>
<BoL> Return the det ( `` M `` ) by using permutations to select factors . <EoL>
<BoL> Find a particular solution to a linear system . <EoL>
<BoL> Return ( e , s , d ) where e and s are versions of eqs and symbols in which any non-Symbol objects in symbols have been replaced with generic Dummy symbols and d is a dictionary that can be used to restore the original expressions . <EoL>
<BoL> Return the maximum depth of any square root argument of p . <EoL>
<BoL> Prints the source code of a given object . <EoL>
<BoL> Denests sqrts in an expression that contain other square roots if possible , otherwise returns the expr unchanged . This is based on the algorithms of [ 1 ] . <EoL>
<BoL> Strategy for canonicalization <EoL>
<BoL> Compose a sequence of brules so that they apply to the expr sequentially <EoL>
<BoL> Only apply branching rule if condition is true <EoL>
<BoL> Print the input and output expressions at each rule application <EoL>
<BoL> Execute one of the branching rules <EoL>
<BoL> Apply a branching rule repeatedly until it has no effect <EoL>
<BoL> Multiplex many branching rules into one <EoL>
<BoL> Yield only those results which satisfy the predicate <EoL>
<BoL> Turn a rule into a branching rule <EoL>
<BoL> Apply a rule down a tree running it on the top nodes first <EoL>
<BoL> Strategic all - apply rule to args <EoL>
<BoL> Compose a sequence of rules so that they apply to the expr sequentially <EoL>
<BoL> Print out before and after expressions each time rule is used <EoL>
<BoL> Memoized version of a rule <EoL>
<BoL> Select result of rules that minimizes objective <EoL>
<BoL> Return original expr if rule raises exception <EoL>
<BoL> Rebuild a SymPy tree <EoL>
<BoL> Replace expressions exactly <EoL>
<BoL> Full simultaneous exact substitution <EoL>
<BoL> Apply a rule down a tree running it on the top nodes first . <EoL>
<BoL> Apply a rule up a tree - stop on success . <EoL>
<BoL> Strategic all - apply rule to args . <EoL>
<BoL> Apply a rule down a tree - stop on success . <EoL>
<BoL> Execute a strategic tree . Return all possibilities . <EoL>
<BoL> Execute a strategic tree . Select alternatives greedily <EoL>
<BoL> Apply functions onto recursive containers ( tree ) <EoL>
<BoL> Return a Tuple containing the passed expressions with symbols that appear the same when printed replaced with numerically subscripted symbols , and all Dummy symbols replaced with Symbols . <EoL>
<BoL> Create symbols and inject them into the global namespace.Recursively inject symbols to the global namespace . <EoL>
<BoL> Adaptively measure execution time of a function . <EoL>
<BoL> Compute a general Fourier-type transform F ( k ) = a int_-oo^oo exp ( b*I*x*k ) f ( x ) dx . <EoL>
<BoL> Compute a general Hankel transform <EoL>
<BoL> The backend function for inverse Laplace transforms.Simplify a piecewise expression from hyperexpand . <EoL>
<BoL> A helper for the real inverse_mellin_transform function , this one here assumes x to be real and positive . <EoL>
<BoL> Backend function to compute Mellin transforms.Turn `` cond `` into a strip ( a , b ) , and auxiliary conditions . <EoL>
<BoL> This is a decorator generator for dropping convergence conditions . <EoL>
<BoL> Re-write the sine function `` sin ( m*s + n ) `` as gamma functions , compatible with the strip ( a , b ) . <EoL>
<BoL> Naively simplify some conditions occurring in `` expr `` , given that ` \operatorname { Re } ( s ) > a ` .Return True only if |ex1| > |ex2| , False only if |ex1| < |ex2| . Else return None.simplify x < y <EoL>
<BoL> Compute a general sine or cosine-type transform F ( k ) = a int_0^oo b*sin ( x*k ) f ( x ) dx . F ( k ) = a int_0^oo b*cos ( x*k ) f ( x ) dx . <EoL>
<BoL> Use `` func `` to transform `` expr `` at the given level . <EoL>
<BoL> Return True if n is a node , False otherwise . Use the expression ' n in G ' . <EoL>
<BoL> Return a dict of neighbors of node n. Use the expression ' G [ n ] ' . <EoL>
<BoL> Initialize a graph with edges , name , graph attributes . <EoL>
<BoL> Iterate over the nodes . Use the expression 'for n in G ' . <EoL>
<BoL> Return the number of nodes . Use the expression 'len ( G ) ' . <EoL>
<BoL> Return the graph name . <EoL>
<BoL> Add a cycle . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Add all the edges in ebunch . <EoL>
<BoL> Add a single node n and update node attributes . <EoL>
<BoL> Add multiple nodes . <EoL>
<BoL> Add a path . <EoL>
<BoL> Add a star . <EoL>
<BoL> Add all the edges in ebunch as weighted edges with specified weights . <EoL>
<BoL> Return an iterator of ( node , adjacency dict ) tuples for all nodes . <EoL>
<BoL> Return an adjacency list representation of the graph . <EoL>
<BoL> Remove all nodes and edges from the graph . <EoL>
<BoL> Return a copy of the graph . <EoL>
<BoL> Return the degree of a node or nodes . <EoL>
<BoL> Return an iterator for ( node , degree ) . <EoL>
<BoL> Return a list of edges . <EoL>
<BoL> Return an iterator over the edges . <EoL>
<BoL> Return the attribute dictionary associated with edge ( u , v ) . <EoL>
<BoL> Return True if the edge ( u , v ) is in the graph . <EoL>
<BoL> Return True if the graph contains the node n . <EoL>
<BoL> Return True if node u has predecessor v . <EoL>
<BoL> Return True if node u has successor v . <EoL>
<BoL> Return the in-degree of a node or nodes . <EoL>
<BoL> Return an iterator for ( node , in-degree ) . <EoL>
<BoL> Return a list of the incoming edges . <EoL>
<BoL> Return an iterator over the incoming edges . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Return an iterator of nodes contained in nbunch that are also in the graph . <EoL>
<BoL> Return a list of successor nodes of n . <EoL>
<BoL> Return an iterator over successor nodes of n . <EoL>
<BoL> Return a list of the nodes in the graph . <EoL>
<BoL> Return an iterator over the nodes . <EoL>
<BoL> Return a list of nodes with self loops . <EoL>
<BoL> Return the number of edges between two nodes . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return the number of selfloop edges . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return the out-degree of a node or nodes . <EoL>
<BoL> Return an iterator for ( node , out-degree ) . <EoL>
<BoL> Return a list of predecessor nodes of n . <EoL>
<BoL> Return an iterator over predecessor nodes of n . <EoL>
<BoL> Remove the edge between u and v . <EoL>
<BoL> Remove all edges specified in ebunch . <EoL>
<BoL> Remove node n . <EoL>
<BoL> Remove multiple nodes . <EoL>
<BoL> Return the reverse of the graph . <EoL>
<BoL> Return a list of selfloop edges . <EoL>
<BoL> Return the number of edges . <EoL>
<BoL> Return the subgraph induced on nodes in nbunch . <EoL>
<BoL> Return a directed copy of the graph . <EoL>
<BoL> Return an undirected representation of the digraph . <EoL>
<BoL> Initialize a graph with edges , name , graph attributes . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Add all the edges in ebunch . <EoL>
<BoL> Add a single node n and update node attributes . <EoL>
<BoL> Add multiple nodes . <EoL>
<BoL> Remove all nodes and edges from the graph . <EoL>
<BoL> Return an iterator for ( node , degree ) . <EoL>
<BoL> Return an iterator over the edges . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Return a list of the nodes connected to the node n . <EoL>
<BoL> Return an iterator over all neighbors of node n . <EoL>
<BoL> Remove the edge between u and v . <EoL>
<BoL> Remove all edges specified in ebunch . <EoL>
<BoL> Remove node n . <EoL>
<BoL> Remove multiple nodes . <EoL>
<BoL> Return the subgraph induced on nodes in nbunch . <EoL>
<BoL> Return a directed representation of the graph . <EoL>
<BoL> Return an undirected copy of the graph . <EoL>
<BoL> Add an edge to the graph . <EoL>
<BoL> Add a node to the graph . <EoL>
<BoL> Use the key information to decode the data XML if present . <EoL>
<BoL> Extracts all the keys and key defaults from the xml . <EoL>
<BoL> Appends attributes to edges or nodes . <EoL>
<BoL> Make a data element for an edge or a node . Keep a log of the type in the keys table . <EoL>
<BoL> Serialize graph G in GraphML to the stream . <EoL>
<BoL> Add many graphs to this GraphML document . <EoL>
<BoL> Return the cubic graph specified in LCF notation . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Add all the edges in ebunch . <EoL>
<BoL> Return an iterator for ( node , degree ) . <EoL>
<BoL> Return a list of edges . <EoL>
<BoL> Return an iterator over the edges . <EoL>
<BoL> Return the attribute dictionary associated with edge ( u , v ) . <EoL>
<BoL> Return True if the graph has an edge between nodes u and v . <EoL>
<BoL> Return an iterator for ( node , in-degree ) . <EoL>
<BoL> Return a list of the incoming edges . <EoL>
<BoL> Return an iterator over the incoming edges . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Return the number of edges between two nodes . <EoL>
<BoL> Return an iterator for ( node , out-degree ) . <EoL>
<BoL> Return a list of the outgoing edges . <EoL>
<BoL> Remove an edge between u and v . <EoL>
<BoL> Remove all edges specified in ebunch . <EoL>
<BoL> Return the reverse of the graph . <EoL>
<BoL> Return a list of selfloop edges . <EoL>
<BoL> Return the subgraph induced on nodes in nbunch . <EoL>
<BoL> Return a directed copy of the graph . <EoL>
<BoL> Return an undirected representation of the digraph . <EoL>
<BoL> Add an edge between u and v . <EoL>
<BoL> Return an iterator for ( node , degree ) . <EoL>
<BoL> Return an iterator over the edges . <EoL>
<BoL> Return True if graph is directed , False otherwise . <EoL>
<BoL> Return True if graph is a multigraph , False otherwise . <EoL>
<BoL> Remove an edge between u and v . <EoL>
<BoL> Return the subgraph induced on nodes in nbunch . <EoL>
<BoL> Return a directed representation of the graph . <EoL>
<BoL> Compute the Adamic-Adar index of all node pairs in ebunch . <EoL>
<BoL> Return adjacency matrix of G . <EoL>
<BoL> Return eigenvalues of the adjacency matrix of G . <EoL>
<BoL> Generate a single line of the graph G in adjacency list format . <EoL>
<BoL> Return the string representation of t . <EoL>
<BoL> Decorator to ensure clean opening and closing of files . <EoL>
<BoL> Write graph G in single-line adjacency-list format to path . <EoL>
<BoL> Return a function that solves the Fiedler eigenvalue problem . <EoL>
<BoL> Compute edge weights and eliminate zero-weight edges . <EoL>
<BoL> Estimate the Fiedler vector using the reverse Cuthill-McKee ordering . <EoL>
<BoL> Compute the Fiedler vector of L using the TraceMIN-Fiedler algorithm.Make X orthogonal to the nullspace of L.Make X orthogonal to the nullspace of L . <EoL>
<BoL> Decorator to mark algorithms as not implemented <EoL>
<BoL> Generate an ordering ( permutation ) of the graph nodes to make a sparse matrix . <EoL>
<BoL> Return the composition of all graphs . <EoL>
<BoL> Return the disjoint union of all graphs . <EoL>
<BoL> Return a new graph that contains only the edges that exist in all graphs . <EoL>
<BoL> Return the union of all graphs . <EoL>
<BoL> Returns all minimum k cutsets of an undirected graph G . <EoL>
<BoL> Compute shortest paths between all nodes in a weighted graph . <EoL>
<BoL> Compute shortest path lengths between all nodes in a weighted graph . <EoL>
<BoL> Compute node connectivity between all pairs of nodes of G . <EoL>
<BoL> Compute shortest paths between all nodes . <EoL>
<BoL> Computes the shortest path lengths between all nodes in `` G `` . <EoL>
<BoL> Compute all shortest paths in the graph . <EoL>
<BoL> Generate all simple paths in the graph G from source to target . <EoL>
<BoL> Return all nodes having a path to ` source ` in G . <EoL>
<BoL> Generates antichains from a DAG . <EoL>
<BoL> Return a generator of articulation points , or cut vertices , of a graph . <EoL>
<BoL> Compute assortativity for node attributes . <EoL>
<BoL> Return dictionary representation of mixing matrix for attribute . <EoL>
<BoL> Compute assortativity for attribute matrix M . <EoL>
<BoL> Return iterator of node-attribute pairs for all edges in G . <EoL>
<BoL> Generate node degree-degree pairs for edges in G . <EoL>
<BoL> Compute assortativity for numerical node attributes . <EoL>
<BoL> Return numeric mixing matrix for attribute . <EoL>
<BoL> Convert a dictionary of dictionaries to a numpy array with optional mapping . <EoL>
<BoL> Return a dictionary representation of mixing matrix . <EoL>
<BoL> Return a list of nodes in a shortest path between source and target using the A* ( `` A-star '' ) algorithm . <EoL>
<BoL> Return the length of the shortest path between source and target using the A* ( `` A-star '' ) algorithm . <EoL>
<BoL> Generates a list of attracting component subgraphs from ` G ` . <EoL>
<BoL> Generates a list of attracting components in ` G ` . <EoL>
<BoL> Returns True if ` G ` consists of a single attracting component . <EoL>
<BoL> Returns the number of attracting components in ` G ` . <EoL>
<BoL> Return the HITS authority matrix . <EoL>
<BoL> Compute the average clustering coefficient for the graph G . <EoL>
<BoL> Returns the average connectivity of a graph G . <EoL>
<BoL> Return the average shortest path length . <EoL>
<BoL> Compute shortest path lengths and predecessors on shortest paths in weighted graphs . <EoL>
<BoL> Produce edges in a breadth-first-search starting at source . <EoL>
<BoL> Return dictionary of predecessors in breadth-first-search from source . <EoL>
<BoL> Return dictionary of successors in breadth-first-search from source . <EoL>
<BoL> Return an oriented tree constructed from of a breadth-first-search starting at source . <EoL>
<BoL> Return a generator of lists of edges , one list for each biconnected component of the input graph . <EoL>
<BoL> Return a generator of graphs , one graph for each biconnected component of the input graph . <EoL>
<BoL> Return a generator of sets of nodes , one set for each biconnected component of the graph <EoL>
<BoL> Return True if the graph is biconnected , False otherwise . <EoL>
<BoL> Dijkstra 's algorithm for shortest paths using bidirectional search . <EoL>
<BoL> Return a list of nodes in a shortest path between source and target . <EoL>
<BoL> Return a new graph of G composed with H . <EoL>
<BoL> Return a new graph that contains the edges that exist in G but not in H . <EoL>
<BoL> Return the disjoint union of graphs G and H . <EoL>
<BoL> Return a new graph that contains only the edges that exist in both G and H . <EoL>
<BoL> Check if obj is string . <EoL>
<BoL> Return new graph with edges that exist in either G or H but not both . <EoL>
<BoL> Return the union of graphs G and H . <EoL>
<BoL> Return a bipartite graph from two given degree sequences using an alternating Havel-Hakimi style construction . <EoL>
<BoL> Compute the average bipartite clustering coefficient . <EoL>
<BoL> Returns a two-coloring of the graph . <EoL>
<BoL> Return the degrees of the two node sets in the bipartite graph B . <EoL>
<BoL> Return density of bipartite graph B . <EoL>
<BoL> Returns True if graph G is bipartite , False if not . <EoL>
<BoL> Returns True if nodes and G/nodes are a bipartition of G . <EoL>
<BoL> Returns bipartite node sets of graph G . <EoL>
<BoL> Compute betweenness centrality for nodes in a bipartite network . <EoL>
<BoL> Compute the closeness centrality for nodes in a bipartite network . <EoL>
<BoL> Compute the degree centrality for nodes in a bipartite network . <EoL>
<BoL> Compute a bipartite clustering coefficient for nodes . <EoL>
<BoL> Compute the bipartite clustering of G . <EoL>
<BoL> Newman 's weighted projection of B onto one of its node sets . <EoL>
<BoL> Return the complete bipartite graph ` K_ { n_1 , n_2 } ` . <EoL>
<BoL> Return a random bipartite graph from two given degree sequences . <EoL>
<BoL> Return a graph object ready to be populated . <EoL>
<BoL> Generate a single line of the bipartite graph G in edge list format . <EoL>
<BoL> Returns the maximum cardinality matching of the bipartite graph ` G ` . <EoL>
<BoL> Creates a new bipartite graph from a biadjacency matrix given as a SciPy sparse matrix . <EoL>
<BoL> Return a random bipartite graph G_ { n , m , k } . <EoL>
<BoL> Return a bipartite graph from two given degree sequences using a Havel-Hakimi style construction . <EoL>
<BoL> Create a bipartite graph with a preferential attachment model from a given single degree sequence . <EoL>
<BoL> Return a bipartite random graph . <EoL>
<BoL> Return a bipartite graph from two given degree sequences using a Havel-Hakimi style construction . <EoL>
<BoL> Weighted projection of B with a user-specified weight function . <EoL>
<BoL> Returns the maximum cardinality matching of the bipartite graph ` G ` . <EoL>
<BoL> Returns the set of vertices that are connected to one of the target vertices by an alternating path in ` G ` . <EoL>
<BoL> Returns `` True `` if and only if the vertex ` v ` is connected to one of the target vertices by an alternating path in ` G ` .Returns `` True `` if and only if ` u ` is connected to one of the targets by an alternating path . <EoL>
<BoL> Returns the minimum vertex cover corresponding to the given maximum matching of the bipartite graph ` G ` . <EoL>
<BoL> Returns an iterable over ( u , v , w ) triples , where u and v are adjacent vertices and w is the weight of the edge joining u and v . <EoL>
<BoL> Computes the node redundancy coefficients for the nodes in the bipartite graph `` G `` . <EoL>
<BoL> Overlap weighted projection of B onto one of its node sets . <EoL>
<BoL> Returns the projection of B onto one of its node sets . <EoL>
<BoL> Returns a weighted projection of B onto one of its node sets . <EoL>
<BoL> Returns the redundancy of the node `` v `` in the bipartite graph `` G `` . <EoL>
<BoL> Fixture for nose tests . <EoL>
<BoL> Returns the spectral bipartivity . <EoL>
<BoL> Returns a reduced graph constructed using the generalized block modeling technique . <EoL>
<BoL> Return the edge boundary . <EoL>
<BoL> Return the node boundary . <EoL>
<BoL> Return the Cartesian product of G and H . <EoL>
<BoL> Return the center of the graph G . <EoL>
<BoL> Compute closeness centrality for nodes . <EoL>
<BoL> Return communicability between all pairs of nodes in G . <EoL>
<BoL> Return whether the heap if empty . <EoL>
<BoL> Return whether a key exists in the heap . <EoL>
<BoL> Initialize a binary heap . <EoL>
<BoL> Return the number of key-value pairs in the heap . <EoL>
<BoL> Return whether the heap if empty . <EoL>
<BoL> Initialize a new min-heap . <EoL>
<BoL> Return the value associated with a key . <EoL>
<BoL> Insert a new key-value pair or modify the value in an existing pair . <EoL>
<BoL> Query the minimum key-value pair . <EoL>
<BoL> Delete the minimum pair in the heap . <EoL>
<BoL> Initialize a pairing heap . <EoL>
<BoL> Cut a node from its parent . <EoL>
<BoL> Link two nodes , making the one with the smaller value the parent of the other . <EoL>
<BoL> Merge the subtrees of the root using the standard two-pass method . The resulting subtree is detached from the root . <EoL>
<BoL> Find and return the name of the set containing the object . <EoL>
<BoL> Create a new empty union-find structure . <EoL>
<BoL> Iterate through all items ever found or unioned by this structure . <EoL>
<BoL> Find the sets containing the objects and merge them all . <EoL>
<BoL> Return communicability betweenness for all pairs of nodes in G . <EoL>
<BoL> Return communicability centrality for each node in G . <EoL>
<BoL> Return the communicability centrality for each node of G <EoL>
<BoL> Return communicability between all pairs of nodes in G . <EoL>
<BoL> Return normalized cumulative distribution from discrete distribution . <EoL>
<BoL> Generate an ordering ( permutation ) of the graph nodes to make a sparse matrix . <EoL>
<BoL> Opens ` filename ` using system 's default program . <EoL>
<BoL> Convert a dictionary of numbers to a 1d numpy array with optional mapping . <EoL>
<BoL> Convert a dictionary of dictionaries to a 2d numpy array with optional mapping . <EoL>
<BoL> Return sample sequence of length n from a given discrete distribution or discrete cumulative distribution . <EoL>
<BoL> Return the Estrada index of a the graph G . <EoL>
<BoL> Return flattened version of ( possibly nested ) iterable object . <EoL>
<BoL> Generate a unique node label . <EoL>
<BoL> Return True if list is a list of ints . <EoL>
<BoL> Return True if obj is iterable with a well-defined len ( ) . <EoL>
<BoL> Return sample sequence of length n from a Pareto distribution . <EoL>
<BoL> Return sample sequence of length n from a power law distribution . <EoL>
<BoL> Return k items without replacement from a weighted sample . <EoL>
<BoL> A context manager for temporarily reversing a directed graph in place . <EoL>
<BoL> Return sample sequence of length n from a uniform distribution . <EoL>
<BoL> Return a single element from a weighted sample . <EoL>
<BoL> Return a random value chosen from the Zipf distribution . <EoL>
<BoL> Return a sample sequence of length n from a Zipf distribution with exponent parameter alpha and minimum value xmin . <EoL>
<BoL> Compute the degree centrality for nodes . <EoL>
<BoL> Compute the in-degree centrality for nodes . <EoL>
<BoL> Compute the out-degree centrality for nodes . <EoL>
<BoL> Calculate dispersion between ` u ` and ` v ` in ` G ` .dispersion for all nodes ' v ' in a ego network G_u of node ' u <EoL>
<BoL> Compute edge load . <EoL>
<BoL> Compute the eigenvector centrality for the graph G . <EoL>
<BoL> Compute harmonic centrality for nodes . <EoL>
<BoL> Edge betweenness helper . <EoL>
<BoL> Node betweenness helper : see betweenness_centrality for what you probably want . <EoL>
<BoL> Return the set of maximal cliques of a connected chordal graph . <EoL>
<BoL> Given a graph G , starts a max cardinality search ( starting from s if s is given and from a random node otherwise ) trying to find a non-chordal cycle . <EoL>
<BoL> Given a non-complete graph G , returns a missing edge . <EoL>
<BoL> Returns True if G is a complete graph . <EoL>
<BoL> Returns a the node in choices that has more connections in G to nodes in wanna_connect . <EoL>
<BoL> Returns the set of maximal cliques of a chordal graph . The algorithm breaks the graph in connected components and performs a maximum cardinality search in each component to get the cliques . <EoL>
<BoL> Returns the treewidth of the chordal graph G . <EoL>
<BoL> Returns the set of induced nodes in the path from s to t . <EoL>
<BoL> Checks whether G is a chordal graph . <EoL>
<BoL> Returns a list of cliques containing the given node . <EoL>
<BoL> Returns all cliques in an undirected graph . <EoL>
<BoL> Search for all maximal cliques in a graph . <EoL>
<BoL> Recursive search for all maximal cliques in a graph . <EoL>
<BoL> Return the clique number ( size of the largest clique ) for G . <EoL>
<BoL> Returns the number of maximal cliques in G . <EoL>
<BoL> Create a bipartite clique graph from a graph G . <EoL>
<BoL> Create the maximal clique graph of a graph . <EoL>
<BoL> Returns the size of the largest maximal clique containing each given node . <EoL>
<BoL> Returns the number of maximal cliques for each node . <EoL>
<BoL> Project a bipartite graph B down onto its `` bottom nodes '' . <EoL>
<BoL> Project a bipartite graph B down onto its `` bottom nodes '' . <EoL>
<BoL> Compute closeness vitality for nodes . <EoL>
<BoL> Return an iterator of ( node , degree , triangles ) . <EoL>
<BoL> Return an iterator of ( node , degree , weighted_triangles ) . Used for weighted clustering . <EoL>
<BoL> Compute the clustering coefficient for nodes . <EoL>
<BoL> Compute the squares clustering coefficient for nodes . <EoL>
<BoL> Compute graph transitivity , the fraction of all possible triangles present in G . <EoL>
<BoL> Compute the number of triangles . <EoL>
<BoL> Count the number of common neighbors of all node pairs in ebunch using community information . <EoL>
<BoL> Color a graph using various strategies of greedy graph coloring . The strategies are described in [ 1 ] _ . <EoL>
<BoL> This procedure is an adaption of the algorithm described by [ 1 ] _ , and is an implementation of coloring with interchange . Please be advised , that the datastructures used are rather complex because they are optimized to minimize the time spent identifying subcomponents of the graph , which are possible candidates for color interchange . <EoL>
<BoL> Connected sequential ordering ( CS ) . <EoL>
<BoL> Connected sequential ordering ( CS ) . Yield nodes in such an order , that each node , except the first one , has at least one neighbour in the preceeding sequence . The sequence is generated using BFS ) <EoL>
<BoL> Connected sequential ordering ( CS ) . Yield nodes in such an order , that each node , except the first one , has at least one neighbour in the preceeding sequence . The sequence is generated using DFS ) <EoL>
<BoL> Greedy independent set ordering ( GIS ) . <EoL>
<BoL> Largest first ( lf ) ordering . Ordering the nodes by largest degree first . <EoL>
<BoL> Random sequential ( RS ) ordering . Scrambles nodes into random ordering . <EoL>
<BoL> Saturation largest first ( SLF ) . Also known as degree saturation ( DSATUR ) . <EoL>
<BoL> Smallest last ( sl ) . <EoL>
<BoL> Find k-clique communities in graph using the percolation method . <EoL>
<BoL> Return the graph complement of G . <EoL>
<BoL> Returns the condensation of G . <EoL>
<BoL> A fast BFS node generato <EoL>
<BoL> Generate connected components as subgraphs . <EoL>
<BoL> Generate connected components . <EoL>
<BoL> Return True if the graph is connected , false otherwise . <EoL>
<BoL> Return the nodes in the component of graph containing node n . <EoL>
<BoL> Return the number of connected components . <EoL>
<BoL> Return True if the graph is semiconnected , False otherwise . <EoL>
<BoL> Test directed graph for strong connectivity . <EoL>
<BoL> Test directed graph for weak connectivity . <EoL>
<BoL> Generate nodes in strongly connected components of graph . <EoL>
<BoL> Return number of strongly connected components in graph . <EoL>
<BoL> Return the number of weakly connected components in G . <EoL>
<BoL> Generate strongly connected components as subgraphs . <EoL>
<BoL> Generate nodes in strongly connected components of graph . <EoL>
<BoL> Generate nodes in strongly connected components of graph . <EoL>
<BoL> A fast BFS node generator <EoL>
<BoL> Generate weakly connected components as subgraphs . <EoL>
<BoL> Generate weakly connected components of G . <EoL>
<BoL> Attempts the specified number of double-edge swaps in the graph `` G `` . <EoL>
<BoL> Auxiliary digraph for computing flow based edge connectivity <EoL>
<BoL> Creates a directed graph D from an undirected graph G to compute flow based node connectivity . <EoL>
<BoL> Build a residual network and initialize a zero flow . <EoL>
<BoL> Returns the edge connectivity of the graph or digraph G . <EoL>
<BoL> Returns node connectivity for a graph or digraph G . <EoL>
<BoL> Returns a set of edges of minimum cardinality that disconnects G . <EoL>
<BoL> Returns a set of nodes of minimum cardinality that disconnects G . <EoL>
<BoL> Returns a set of nodes of minimum cardinality that disconnect source from target in G . <EoL>
<BoL> Returns the k-component structure of a graph G. A ` k ` -component is a maximal subgraph of a graph G that has , at least , node connectivity ` k ` : we need to remove at least ` k ` nodes to break it into more components . ` k ` -components have an inherent hierarchical structure because they are nested in terms of connectivity : a connected graph can contain several 2-components , each of which can contain one or more 3-components , and so forth . <EoL>
<BoL> Merge sets that share k or more elements . <EoL>
<BoL> Assumes that the input graph is connected <EoL>
<BoL> Returns the weighted minimum edge cut using the Stoer-Wagner algorithm . <EoL>
<BoL> Returns the graph that results from contracting the specified edge . <EoL>
<BoL> Returns the graph that results from contracting `` u `` and `` v `` . <EoL>
<BoL> Return the core number for each vertex . <EoL>
<BoL> Return the k-core of G . <EoL>
<BoL> Return the k-corona of G . <EoL>
<BoL> Return the k-crust of G . <EoL>
<BoL> Return the k-shell of G . <EoL>
<BoL> Compute the cost of the flow given by flowDict on graph G . <EoL>
<BoL> Returns False if graphs are definitely not isomorphic . True does NOT guarantee isomorphism . <EoL>
<BoL> Returns a list of cycles which form a basis for cycles of G . <EoL>
<BoL> A directed , depth-first traversal of edges in `` G `` , beginning at `` source `` . <EoL>
<BoL> Returns the edges of a cycle found via a directed , depth-first traversal . <EoL>
<BoL> These are various G-specific functions that help us implement the algorithm for all graph types : graph , multigraph , directed or not.Returns the tail and head of an edge , as it was traversed . <EoL>
<BoL> Find simple cycles ( elementary circuits ) of a directed graph.Recursively unblock and remove nodes from B [ thisnode ] . <EoL>
<BoL> Find simple cycles ( elementary circuits ) of a directed graph . <EoL>
<BoL> Returns the longest path in a DAG <EoL>
<BoL> Returns the longest path length in a DAG <EoL>
<BoL> Return all nodes reachable from ` source ` in G . <EoL>
<BoL> Calculate the Greatest Common Divisor of a and b . <EoL>
<BoL> Return True if G is aperiodic . <EoL>
<BoL> Return True if the graph G is a directed acyclic graph ( DAG ) or False if not . <EoL>
<BoL> Return a list of nodes in topological sort order . <EoL>
<BoL> Return a list of nodes in topological sort order . <EoL>
<BoL> Returns transitive closure of a directed graph <EoL>
<BoL> Find all-pairs shortest path lengths using Floyd 's algorithm . <EoL>
<BoL> Find all-pairs shortest path lengths using Floyd 's algorithm . <EoL>
<BoL> Find all-pairs shortest path lengths using Floyd 's algorithm . <EoL>
<BoL> Produce edges in a depth-first-search ( DFS ) . <EoL>
<BoL> Produce edges in a depth-first-search ( DFS ) labeled by type . <EoL>
<BoL> Produce nodes in a depth-first-search post-ordering starting from source . <EoL>
<BoL> Return dictionary of predecessors in depth-first-search from source . <EoL>
<BoL> Produce nodes in a depth-first-search pre-ordering starting from source . <EoL>
<BoL> Return dictionary of successors in depth-first-search from source . <EoL>
<BoL> Return oriented tree constructed from a depth-first-search from source . <EoL>
<BoL> Return the diameter of the graph G . <EoL>
<BoL> Returns the shortest path from source to target in a weighted graph G . <EoL>
<BoL> Returns the shortest path length from source to target in a weighted graph . <EoL>
<BoL> Compute shortest path length and predecessors on shortest paths in weighted graphs . <EoL>
<BoL> Return the eccentricity of nodes in G . <EoL>
<BoL> Return the periphery of the graph G . <EoL>
<BoL> Return the radius of the graph G . <EoL>
<BoL> Return global parameters for a given intersection array . <EoL>
<BoL> Returns the intersection array of a distance-regular graph . <EoL>
<BoL> Returns True if the graph is distance regular , False otherwise . <EoL>
<BoL> Returns the dominance frontiers of all nodes of a directed graph . <EoL>
<BoL> Returns the immediate dominators of all nodes of a directed graph . <EoL>
<BoL> Finds a dominating set for the graph G . <EoL>
<BoL> Checks if nodes in nbunch are a dominating set for G . <EoL>
<BoL> Swap two edges in the graph while keeping the node degrees fixed . <EoL>
<BoL> Return the edges of an Eulerian circuit in G . <EoL>
<BoL> Return True if G is an Eulerian graph , False otherwise . <EoL>
<BoL> Returns False if graphs are definitely not isomorphic . <EoL>
<BoL> Returns False if graphs are definitely not isomorphic . <EoL>
<BoL> Build a flow dictionary from a residual network . <EoL>
<BoL> Build a flow dictionary from a residual network . <EoL>
<BoL> Build a residual network and initialize a zero flow . <EoL>
<BoL> Detect infinite-capacity negative cycles . <EoL>
<BoL> Detect an infinite-capacity s-t path in R . <EoL>
<BoL> Implementation of the Edmonds-Karp algorithm.Augment flow along a path from s to t.Bidirectional breadth-first search for an augmenting path . <EoL>
<BoL> Implementation of the Edmonds-Karp algorithm . <EoL>
<BoL> Return a maximum ( s , t ) -flow of minimum cost . <EoL>
<BoL> Find a maximum single-commodity flow . <EoL>
<BoL> Find the value of maximum single-commodity flow . <EoL>
<BoL> Compute the value and the node partition of a minimum ( s , t ) -cut . <EoL>
<BoL> Compute the value of a minimum ( s , t ) -cut . <EoL>
<BoL> Augment flow along a path from s to t.Relabel a node to create an admissible edge . <EoL>
<BoL> Returns the flow hierarchy of a directed network . <EoL>
<BoL> Return True if G has a path from source to target , False otherwise . <EoL>
<BoL> Compute shortest paths in the graph . <EoL>
<BoL> Compute shortest path lengths in the graph . <EoL>
<BoL> Compute shortest path lengths and predecessors on shortest paths in weighted graphs.Topologically sort nodes relabeled in the previous round and detect negative cycles.Relax out-edges of relabeled nodes . <EoL>
<BoL> Returns True if some directed graph can realize the in- and out-degree sequences . <EoL>
<BoL> Returns True if sequence is a valid degree sequence . <EoL>
<BoL> Returns True if some multigraph can realize the sequence . <EoL>
<BoL> Returns True if some pseudograph can realize the sequence . <EoL>
<BoL> Returns True if deg_sequence can be realized by a simple graph . <EoL>
<BoL> Returns True if deg_sequence can be realized by a simple graph . <EoL>
<BoL> Return HITS hubs and authorities values for nodes . <EoL>
<BoL> Return HITS hubs and authorities values for nodes . <EoL>
<BoL> Return HITS hubs and authorities values for nodes . <EoL>
<BoL> Return the HITS hub matrix . <EoL>
<BoL> Returns `` True `` if and only if `` G `` is locally ` ( k , l ) ` -connected . <EoL>
<BoL> Returns the maximum locally ` ( k , l ) ` -connected subgraph of `` G `` . <EoL>
<BoL> Returns `` True `` if `` G `` is an arborescence . <EoL>
<BoL> Returns `` True `` if `` G `` is a branching . <EoL>
<BoL> Returns `` True `` if `` G `` is a forest . <EoL>
<BoL> Determine of node n is an isolate ( degree zero ) . <EoL>
<BoL> Returns True if the graphs G1 and G2 are isomorphic and False otherwise . <EoL>
<BoL> Returns `` True `` if `` G `` is a tree . <EoL>
<BoL> Return list of isolates in the graph . <EoL>
<BoL> Initialize graph matcher . <EoL>
<BoL> Iterator over candidate pairs of nodes in G1 and G2 . <EoL>
<BoL> Reinitializes the state of the algorithm . <EoL>
<BoL> Returns True if G1 and G2 are isomorphic graphs . <EoL>
<BoL> Generator over isomorphisms between G1 and G2 . <EoL>
<BoL> Extends the isomorphism mapping . <EoL>
<BoL> Restores the recursion limit . <EoL>
<BoL> Returns True if mapping G1_node to G2_node is semantically feasible . <EoL>
<BoL> Returns True if a subgraph of G1 is isomorphic to G2 . <EoL>
<BoL> Generator over isomorphisms between a subgraph of G1 and G2 . <EoL>
<BoL> Initialize graph matcher . <EoL>
<BoL> Iterator over candidate pairs of nodes in G1 and G2 . <EoL>
<BoL> Reinitializes the state of the algorithm . <EoL>
<BoL> Returns True if mapping G1_node to G2_node is semantically feasible . <EoL>
<BoL> Returns True if adding ( G1_node , G2_node ) is syntactically feasible . <EoL>
<BoL> Returns a comparison function for a generic attribute . <EoL>
<BoL> Initializes DiGMState object . <EoL>
<BoL> Deletes the DiGMState object and restores the class variables . <EoL>
<BoL> Initializes GMState object . <EoL>
<BoL> Deletes the GMState object and restores the class variables . <EoL>
<BoL> Returns True if x and y are sufficiently close , elementwise . <EoL>
<BoL> Returns True if x and y are sufficiently close . <EoL>
<BoL> Returns a deepcopy of a function . <EoL>
<BoL> Compute the Jaccard coefficient of all node pairs in ebunch . <EoL>
<BoL> Compute shortest paths between all nodes in a weighted graph using Johnson 's algorithm . <EoL>
<BoL> Return a minimum spanning tree or forest of an undirected weighted graph . <EoL>
<BoL> Return the lexicographic product of G and H . <EoL>
<BoL> Get the community of the given node . <EoL>
<BoL> Compute the preferential attachment score of all node pairs in ebunch . <EoL>
<BoL> Compute the resource allocation index of all node pairs in ebunch using community information . <EoL>
<BoL> Compute the resource allocation index of all node pairs in ebunch . <EoL>
<BoL> Compute the ratio of within- and inter-cluster common neighbors of all node pairs in ebunch . <EoL>
<BoL> Find a maximal cardinality matching in the graph . <EoL>
<BoL> Return a random maximal independent set guaranteed to contain a given set of nodes . <EoL>
<BoL> Generate edges in a minimum spanning forest of an undirected weighted graph . <EoL>
<BoL> Returns the set of equivalence classes of the given `` iterable `` under the specified equivalence relation . <EoL>
<BoL> Returns an arbitrary element of `` iterable `` without removing it . <EoL>
<BoL> Returns the quotient graph of `` G `` under the specified equivalence relation on nodes . <EoL>
<BoL> Return a minimum spanning tree or forest of an undirected weighted graph . <EoL>
<BoL> Generate edges in a minimum spanning forest of an undirected weighted graph . <EoL>
<BoL> Return True if there exists a negative edge cycle anywhere in G . <EoL>
<BoL> Returns the specified power of a graph . <EoL>
<BoL> Return the strong product of G and H . <EoL>
<BoL> Return the tensor product of G and H . <EoL>
<BoL> Return the reverse directed graph of G . <EoL>
<BoL> Returns dictionary of predecessors for the path from source to all nodes in G . <EoL>
<BoL> Return the rich-club coefficient of the graph G . <EoL>
<BoL> Return the s-metric of graph . <EoL>
<BoL> Compute shortest paths and lengths in a weighted graph G . <EoL>
<BoL> Compute shortest path between source and all other reachable nodes for a weighted graph . <EoL>
<BoL> Compute shortest path between source and all other nodes reachable from source . <EoL>
<BoL> Compute the shortest path lengths from source to all reachable nodes . <EoL>
<BoL> Bidirectional shortest path helper . <EoL>
<BoL> Relaxation loop for Bellman–Ford algorithm <EoL>
<BoL> Generate all simple paths in the graph G from source to target , starting from shortest ones . <EoL>
<BoL> Bidirectional shortest path helper . Returns ( pred , succ , w ) where pred is a dictionary of predecessors from w to the source , and succ is a dictionary of successors from w to the target . <EoL>
<BoL> Returns the total weight of a branching . <EoL>
<BoL> Key is now required . <EoL>
<BoL> Return the subgraph induced on edges in ` ebunch ` . <EoL>
<BoL> Returns the edge keys of the unique path between u and v . <EoL>
<BoL> Returns a branching obtained through a greedy algorithm . <EoL>
<BoL> Determines the triadic census of a directed graph . <EoL>
<BoL> Returns the integer code of the given triad . <EoL>
<BoL> Returns a dictionary mapping triad name to triad graph.Returns a directed graph on three nodes , named `` ' a ' `` , `` ' b ' `` , and `` ' c ' `` . <EoL>
<BoL> Returns all of the neighbors of a node in the graph . <EoL>
<BoL> Returns a function that returns a value from G [ u ] [ v ] . <EoL>
<BoL> Returns a function that returns a value from G.node [ u ] . <EoL>
<BoL> Return the perfectly balanced r-tree of height h . <EoL>
<BoL> Returns a random graph according to the Barabási–Albert preferential attachment model . <EoL>
<BoL> Return the Barbell Graph : two complete graphs connected by a path . <EoL>
<BoL> Returns a ` G_ { n , p } ` random graph , also known as an Erdős-Rényi graph or a binomial graph . <EoL>
<BoL> Return the Bull graph . <EoL>
<BoL> Returns a caveman graph of `` l `` cliques of size `` k `` . <EoL>
<BoL> Return the chordal cycle graph on ` p ` nodes . <EoL>
<BoL> Return the Chvátal graph . <EoL>
<BoL> Generates the circulant graph Ci_n ( x_1 , x_2 , ... , x_m ) with n vertices . <EoL>
<BoL> Return the circular ladder graph CL_n of length n . <EoL>
<BoL> Position nodes on a circle . <EoL>
<BoL> Return the common neighbors of two nodes in a graph . <EoL>
<BoL> Return a copy of the graph G with all of the edges removed . <EoL>
<BoL> Return degree of single node or of nbunch of nodes . If nbunch is ommitted , then return degrees of *all* nodes . <EoL>
<BoL> Return a list of the frequency of each degree value . <EoL>
<BoL> Return the density of a graph . <EoL>
<BoL> Return list of edges incident to nodes in nbunch . <EoL>
<BoL> Return iterator over edges incident to nodes in nbunch . <EoL>
<BoL> Modify graph to prevent further change by adding or removing nodes or edges . <EoL>
<BoL> Dummy method for raising errors when trying to modify frozen graphs <EoL>
<BoL> Get edge attributes from graph <EoL>
<BoL> Get node attributes from graph <EoL>
<BoL> Print short summary of information for the graph G or the node n . <EoL>
<BoL> Return True if graph is directed . <EoL>
<BoL> Returns `` True `` if `` G `` has no edges . <EoL>
<BoL> Return True if graph is frozen . <EoL>
<BoL> Returns `` True `` if `` G `` has negatively weighted edges . <EoL>
<BoL> Returns `` True `` if `` G `` has weighted edges . <EoL>
<BoL> Return a list of nodes connected to node n . <EoL>
<BoL> Return a copy of the graph nodes in a list . <EoL>
<BoL> Return an iterator over the graph nodes . <EoL>
<BoL> Returns the non-existent edges in the graph . <EoL>
<BoL> Returns the non-neighbors of the node in the graph . <EoL>
<BoL> Return the number of edges in the graph . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Set edge attributes from dictionary of edge tuples and values . <EoL>
<BoL> Set node attributes from dictionary of nodes and values <EoL>
<BoL> Return the subgraph induced on nodes in nbunch . <EoL>
<BoL> Return the complete graph K_n with n nodes . <EoL>
<BoL> Returns the complete multipartite graph with the specified block sizes . <EoL>
<BoL> Return the cycle graph C_n over n nodes . <EoL>
<BoL> Return the hierarchically constructed Dorogovtsev-Goltsev-Mendes graph . <EoL>
<BoL> Return the empty graph with n nodes and zero edges . <EoL>
<BoL> Creates a full r-ary tree of n vertices . <EoL>
<BoL> Return the 2d grid graph of mxn nodes , each connected to its nearest neighbors . Optional argument periodic=True will connect boundary nodes via periodic boundary conditions . <EoL>
<BoL> Return the n-dimensional grid graph . <EoL>
<BoL> Return the n-dimensional hypercube . <EoL>
<BoL> Return the Ladder graph of length n . <EoL>
<BoL> Return the Lollipop Graph ; ` K_m ` connected to ` P_n ` . <EoL>
<BoL> Return the Null graph with no nodes or edges . <EoL>
<BoL> Return the Path graph P_n of n nodes linearly connected by n-1 edges . <EoL>
<BoL> Return the Star graph with n+1 nodes : one center node , connected to n outer nodes . <EoL>
<BoL> Return the Trivial graph with one node ( with integer label 0 ) and no edges . <EoL>
<BoL> Return the wheel graph : a single hub node connected to each node of the ( n-1 ) -node cycle graph . <EoL>
<BoL> Return a random graph with the given degree sequence . <EoL>
<BoL> Returns a connected caveman graph of `` l `` cliques of size `` k `` . <EoL>
<BoL> Returns a connected Watts–Strogatz small-world graph . <EoL>
<BoL> Return a new directed representation of the graph G . <EoL>
<BoL> Return a new undirected representation of the graph G . <EoL>
<BoL> Return a graph from a dictionary of dictionaries . <EoL>
<BoL> Return a graph from a dictionary of lists . <EoL>
<BoL> Return a graph from a list of edges . <EoL>
<BoL> Return adjacency representation of graph as a dictionary of dictionaries . <EoL>
<BoL> Return adjacency representation of graph as a dictionary of lists . <EoL>
<BoL> Return a list of edges in the graph . <EoL>
<BoL> Make a NetworkX graph from a known data structure . <EoL>
<BoL> Converts a SciPy sparse matrix in **Coordinate** format to an iterable of weighted edge triples . <EoL>
<BoL> Converts a SciPy sparse matrix in **Compressed Sparse Column** format to an iterable of weighted edge triples . <EoL>
<BoL> Converts a SciPy sparse matrix in **Compressed Sparse Row** format to an iterable of weighted edge triples . <EoL>
<BoL> Converts a SciPy sparse matrix in **Dictionary of Keys** format to an iterable of weighted edge triples . <EoL>
<BoL> Return a graph from numpy matrix . <EoL>
<BoL> Return the graph adjacency matrix as a Pandas DataFrame . <EoL>
<BoL> Return the 3-regular Platonic Cubical graph . <EoL>
<BoL> Return Davis Southern women social network . <EoL>
<BoL> Make a tree for the given degree sequence . <EoL>
<BoL> Return a random graph with given expected degrees . <EoL>
<BoL> Return a simple graph with given degree sequence constructed using the Havel-Hakimi algorithm . <EoL>
<BoL> Return a simple random graph with the given degree sequence . <EoL>
<BoL> Returns a ` G_ { n , m } ` random graph . <EoL>
<BoL> Return the Desargues graph . <EoL>
<BoL> Return the Diamond graph . <EoL>
<BoL> Return the growing network ( GN ) digraph with `` n `` nodes . <EoL>
<BoL> Return the growing network with copying ( GNC ) digraph with `` n `` nodes . <EoL>
<BoL> Return the growing network with redirection ( GNR ) digraph with `` n `` nodes and redirection probability `` p `` . <EoL>
<BoL> Return the directed modularity matrix of G . <EoL>
<BoL> Return the Platonic Dodecahedral graph . <EoL>
<BoL> Draw the graph G with Matplotlib . <EoL>
<BoL> Draw the graph G with a circular layout . <EoL>
<BoL> Draw networkx graph with graphviz layout . <EoL>
<BoL> Draw the graph G using Matplotlib . <EoL>
<BoL> Draw the graph G with a random layout . <EoL>
<BoL> Draw networkx graph with shell layout . <EoL>
<BoL> Draw the graph G with a spectral layout . <EoL>
<BoL> Draw the graph G with a spring layout . <EoL>
<BoL> Position nodes uniformly at random . <EoL>
<BoL> Position nodes in concentric circles . <EoL>
<BoL> Position nodes using the eigenvectors of the graph Laplacian . <EoL>
<BoL> Internal function to display a graph in OS dependent manner . <EoL>
<BoL> Return a NetworkX Graph or DiGraph from a PyGraphviz graph . <EoL>
<BoL> Create node positions for G using Graphviz . <EoL>
<BoL> Create node positions for G using Graphviz . <EoL>
<BoL> Return a NetworkX graph from a dot file on path . <EoL>
<BoL> Return a pygraphviz graph from a NetworkX graph N . <EoL>
<BoL> Write NetworkX graph G to Graphviz dot format on path . <EoL>
<BoL> Return a NetworkX graph from a Pydot graph . <EoL>
<BoL> Create node positions using Pydot and Graphviz . <EoL>
<BoL> Create a NetworkX graph from a Pydot graph . <EoL>
<BoL> Create a Pydot graph from a NetworkX graph . <EoL>
<BoL> Create node positions using Pydot and Graphviz . <EoL>
<BoL> Return a NetworkX MultiGraph or MultiDiGraph from a dot file on path . <EoL>
<BoL> Return a pydot graph from a NetworkX graph N . <EoL>
<BoL> Write NetworkX graph G to Graphviz dot format on path . <EoL>
<BoL> For backward compatibility ; use draw or draw_networkx . <EoL>
<BoL> Returns an undirected graph using the duplication-divergence model . <EoL>
<BoL> Generate a single line of the graph G in edge list format . <EoL>
<BoL> Returns induced subgraph of neighbors centered at node n within a given radius . <EoL>
<BoL> Return the Margulis-Gabber-Galil undirected MultiGraph on ` n^2 ` nodes . <EoL>
<BoL> Returns a ` G_ { n , p } ` random graph , also known as an Erdős-Rényi graph or a binomial graph . <EoL>
<BoL> Return Florentine families graph . References <EoL>
<BoL> Return the Frucht Graph . <EoL>
<BoL> Return a random intersection graph with independent probabilities for connections between node and attribute sets . <EoL>
<BoL> Generate lines of GEXF format representation of G '' <EoL>
<BoL> Generate a single entry of the graph G in GML format . <EoL>
<BoL> Generate graph6 format string from a simple undirected graph . <EoL>
<BoL> Generate GraphML lines for G <EoL>
<BoL> Generate a single line of the graph G in multiline adjacency list format . <EoL>
<BoL> Generate lines in Pajek graph format . <EoL>
<BoL> Generate sparse6 format string from an undirected graph.Big endian k-bit encoding of x <EoL>
<BoL> Return the planted l-partition graph . <EoL>
<BoL> Return the random partition graph with a partition of sizes . <EoL>
<BoL> Return a relaxed caveman graph . <EoL>
<BoL> Generates edges for a geographical threshold graph given a graph with positions and weights assigned as node attributes `` 'pos ' `` and `` 'weight ' `` . <EoL>
<BoL> Return a navigable small-world graph . <EoL>
<BoL> Returns a random geometric graph in the unit cube . <EoL>
<BoL> Return a Waxman random graph . <EoL>
<BoL> Returns a ` G_ { n , m } ` random graph . <EoL>
<BoL> Return the Heawood graph , a ( 3,6 ) cage . <EoL>
<BoL> Return the House graph ( square with triangle on top ) . <EoL>
<BoL> Return the House graph with a cross inside the house square . <EoL>
<BoL> Return the Platonic Icosahedral graph . <EoL>
<BoL> Return a intersection graph with randomly chosen attribute sets for each node that are of equal size ( k ) . <EoL>
<BoL> Return a uniform random intersection graph . <EoL>
<BoL> Return the Krackhardt Kite Social Network . <EoL>
<BoL> Returns the edges from G , handling keys for multigraphs as necessary . <EoL>
<BoL> Return the line graph L of the ( multi ) digraph G . <EoL>
<BoL> Return the line graph L of the ( multi ) graph G . <EoL>
<BoL> Returns a function which returns a sorted node for line graphs . <EoL>
<BoL> Returns a sorted edge . <EoL>
<BoL> Returns the line graph of the graph or digraph `` G `` . <EoL>
<BoL> Return the small graph described by graph_description . <EoL>
<BoL> Return the Moebius-Kantor graph . <EoL>
<BoL> Return a Newman–Watts–Strogatz small-world graph . <EoL>
<BoL> Returns a list of nonisomporphic trees <EoL>
<BoL> Returns the number of nonisomorphic trees <EoL>
<BoL> Return the Platonic Octahedral graph . <EoL>
<BoL> Return the Pappus graph . <EoL>
<BoL> Return the Petersen graph . <EoL>
<BoL> Holme and Kim algorithm for growing graphs with powerlaw degree distribution and approximate average clustering . <EoL>
<BoL> Return m unique elements from seq . <EoL>
<BoL> Returns a random lobster graph . <EoL>
<BoL> Returns a tree with a power law degree distribution . <EoL>
<BoL> Returns a degree sequence for a tree with a power law distribution . <EoL>
<BoL> Returns a random `` d `` -regular graph on `` n `` nodes . <EoL>
<BoL> Returns a random shell graph for the constructor given . <EoL>
<BoL> Return a Watts–Strogatz small-world graph . <EoL>
<BoL> Return a small maze with a cycle . <EoL>
<BoL> Return a small undirected graph described by graph_description . <EoL>
<BoL> Return the 3-regular Platonic Tetrahedral graph . <EoL>
<BoL> Return the skeleton of the truncated cube . <EoL>
<BoL> Return the skeleton of the truncated Platonic tetrahedron . <EoL>
<BoL> Return the Tutte graph . <EoL>
<BoL> Returns a right-stochastic representation of the directed graph `` G `` . <EoL>
<BoL> Return betweenness for the threshold graph with the given creation sequence . <EoL>
<BoL> Return cluster sequence for the given threshold graph creation sequence . <EoL>
<BoL> Determines the creation sequence for the given threshold degree sequence . <EoL>
<BoL> Returns a list of node weights which create the threshold graph designated by the creation sequence . <EoL>
<BoL> Return the degree-degree correlation over all edges . <EoL>
<BoL> Return degree sequence for the threshold graph with the given creation sequence <EoL>
<BoL> Return the density of the graph with this creation_sequence . The density is the fraction of possible edges present . <EoL>
<BoL> Return sequence of eigenvalues of the Laplacian of the threshold graph for the given creation_sequence . <EoL>
<BoL> Return a 2-tuple of Laplacian eigenvalues and eigenvectors for the threshold network with creation_sequence . <EoL>
<BoL> Returns False if there are n't any alternating 4 cycles . Otherwise returns the cycle as [ a , b , c , d ] where ( a , b ) and ( c , d ) are edges and ( a , c ) and ( b , d ) are not . <EoL>
<BoL> Find a threshold subgraph that is close to largest in G. Returns the labeled creation sequence of that threshold graph . <EoL>
<BoL> Return a threshold subgraph that is close to largest in G. The threshold graph will contain the largest degree node in G . <EoL>
<BoL> Returns True if G is a threshold graph . <EoL>
<BoL> Returns True if the sequence is a threshold degree seqeunce . <EoL>
<BoL> Create a skewed threshold graph with a given number of vertices ( n ) and a given number of edges ( m ) . <EoL>
<BoL> Returns the creation sequence in a compact form that is the number of ' i 's and 'd 's alternating . <EoL>
<BoL> Create a random threshold sequence of size n. A creation sequence is built by randomly choosing d 's with probabiliy p and i 's with probability 1-p . <EoL>
<BoL> Create a skewed threshold graph with a given number of vertices ( n ) and a given number of edges ( m ) . The routine returns an unlabeled creation sequence for the threshold graph . <EoL>
<BoL> Find the shortest path between u and v in a threshold graph G with the given creation_sequence . <EoL>
<BoL> Return the shortest path length from indicated node to every other node for the threshold graph with the given creation sequence . Node is indicated by index i in creation_sequence unless creation_sequence is labeled in which case , i is taken to be the label of the node . <EoL>
<BoL> Returns the coefficients of each eigenvector in a projection of the vector u onto the normalized eigenvectors which are contained in eigenpairs . <EoL>
<BoL> Perform a `` swap '' operation on a threshold sequence . <EoL>
<BoL> Create a threshold graph from the creation sequence or compact creation_sequence . <EoL>
<BoL> Return triangle sequence for the given threshold graph creation sequence . <EoL>
<BoL> Compute number of triangles in the threshold graph with the given creation sequence . <EoL>
<BoL> Converts a compact creation sequence for a threshold graph to a standard creation sequence ( unlabeled ) . <EoL>
<BoL> Returns a creation sequence for a threshold graph determined by the weights and threshold given as input . If the sum of two node weights is greater than the threshold value , an edge is created between these nodes . <EoL>
<BoL> Replace root element of this tree . <EoL>
<BoL> Find first matching element by tag name or path . <EoL>
<BoL> Find all matching subelements by tag name or path . <EoL>
<BoL> Find first matching element by tag name or path . <EoL>
<BoL> Return root element of this tree . <EoL>
<BoL> Create and return tree iterator for the root element . <EoL>
<BoL> Find all matching subelements by tag name or path . <EoL>
<BoL> Load external XML document into element tree . <EoL>
<BoL> Read graph in GEXF format from path . <EoL>
<BoL> Relabel graph using `` label '' node keyword for node label . <EoL>
<BoL> Write G in GEXF format to path . <EoL>
<BoL> Initializer . <EoL>
<BoL> Do our best to decode a Python source file correctly . <EoL>
<BoL> Generates lines as expected by tokenize from a list of lines . <EoL>
<BoL> Inspects the options to load the requested patterns and handlers . <EoL>
<BoL> Called when an error occurs . <EoL>
<BoL> Hook to log a message . <EoL>
<BoL> Parses a block into a tree . <EoL>
<BoL> Called with the old version , new version , and filename of a refactored file . <EoL>
<BoL> Refactor a list of files and directories . <EoL>
<BoL> Descends down a directory and refactor every Python file found . <EoL>
<BoL> Refactors a docstring , looking for doctests . <EoL>
<BoL> Refactors one doctest . <EoL>
<BoL> Refactors a file . <EoL>
<BoL> Refactor a given input string . <EoL>
<BoL> Refactors a parse tree ( modifying the tree in place ) . <EoL>
<BoL> Traverse an AST , applying a set of fixers to each node . <EoL>
<BoL> Wraps a tokenize stream to systematically modify start/end . <EoL>
<BoL> Writes a string to a file . <EoL>
<BoL> Escape unprintable or non-ASCII characters , double quotes and ampersands in a string using XML character references . <EoL>
<BoL> Convert a Python literal to the value it represents . <EoL>
<BoL> Convert a value to a Python literal in GML representation . <EoL>
<BoL> Parse GML graph from a string or iterable . <EoL>
<BoL> Read graph in GML format from path . <EoL>
<BoL> Replace XML character references in a string with the referenced characters . <EoL>
<BoL> Write a graph `` G `` in GML format to the file or file handle `` path `` . <EoL>
<BoL> Read graph object in Python pickle format . <EoL>
<BoL> Write graph in Python pickle format . <EoL>
<BoL> Convert 6-bit integer sequence to graph6 character sequence . <EoL>
<BoL> Read initial one- , four- or eight-unit value from graph6 integer sequence . <EoL>
<BoL> Convert graph6 character sequence to 6-bit integers . <EoL>
<BoL> Convert an integer to one- , four- or eight-unit graph6 sequence . <EoL>
<BoL> Read a simple undirected graph in graph6 format from string.Return sequence of individual bits from 6-bit-per-value list of data values . <EoL>
<BoL> Read simple undirected graphs in graph6 format from path . <EoL>
<BoL> Write a simple undirected graph to path in graph6 format . <EoL>
<BoL> Parse XML document from string constant . <EoL>
<BoL> Read graph in GraphML format from string . <EoL>
<BoL> Read graph in GraphML format from path . <EoL>
<BoL> Write G in GraphML XML format to path <EoL>
<BoL> Return the Laplacian matrix of G . <EoL>
<BoL> Return eigenvalues of the Laplacian of G <EoL>
<BoL> Return the normalized Laplacian matrix of G . <EoL>
<BoL> Read graph in LEDA format from string or iterable . <EoL>
<BoL> Read graph in LEDA format from path . <EoL>
<BoL> Return the modularity matrix of G . <EoL>
<BoL> Return eigenvalues of the modularity matrix of G . <EoL>
<BoL> Generates a networkx.DiGraph from shapefiles . <EoL>
<BoL> Writes a networkx.DiGraph to two shapefiles , edges and nodes . <EoL>
<BoL> Read graph in YAML format from path . <EoL>
<BoL> Write graph G in YAML format to path . <EoL>
<BoL> Return the string representation of t. Add outer double-quotes if the string has a space . <EoL>
<BoL> Parse Pajek format graph from string or iterable . <EoL>
<BoL> Read graph in Pajek format from path . <EoL>
<BoL> Write graph in Pajek format to path . <EoL>
<BoL> Read an undirected graph in sparse6 format from string.Return stream of pairs b [ i ] , x [ i ] for sparse6 format . <EoL>
<BoL> Read an undirected graph in sparse6 format from path . <EoL>
<BoL> Write graph G to given path in sparse6 format . <EoL>
<BoL> Relabel the nodes of the graph G . <EoL>
<BoL> Returns revision and vcs information , dynamically obtained . <EoL>
<BoL> Creates a static file containing version information.Version information for NetworkX , created during installation . <EoL>
<BoL> Run NetworkX tests . <EoL>
<BoL> Decorator for inheriting docstrings from base classes . <EoL>
<BoL> Asserts that the given condition is true . <EoL>
<BoL> Internal method used by the protocol message implementation . Clients should not call this directly . <EoL>
<BoL> Support the pickle protocol . <EoL>
<BoL> Attempts to apply a gradient to the accumulator . <EoL>
<BoL> Number of gradients that have currently been aggregated in accumulator . <EoL>
<BoL> Sets the global time step of the accumulator . <EoL>
<BoL> Attempts to extract the average gradient from the accumulator . <EoL>
<BoL> Creates a new ConditionalAccumulator . <EoL>
<BoL> Returns True iff this DType refers to the same type as ` other ` . <EoL>
<BoL> Creates a new ` DataType ` . <EoL>
<BoL> Returns True iff self ! = other . <EoL>
<BoL> Returns True if the ` other ` DType will be converted to this DType . <EoL>
<BoL> Construct a ` DeviceSpec ` from a string . <EoL>
<BoL> Merge the properties of `` dev '' into this ` DeviceSpec ` . <EoL>
<BoL> Parse a ` DeviceSpec ` name into its components . <EoL>
<BoL> Return a string representation of this ` DeviceSpec ` . <EoL>
<BoL> Returns the sum of ` self ` and ` other ` . <EoL>
<BoL> DEPRECATED : Use ` __floordiv__ ` via ` x // y ` instead . <EoL>
<BoL> Returns true if ` other ` has the same known value as this Dimension . <EoL>
<BoL> Returns the quotient of ` self ` and ` other ` rounded down . <EoL>
<BoL> Returns True if ` self ` is known to be greater than or equal to ` other ` . <EoL>
<BoL> Returns True if ` self ` is known to be greater than ` other ` . <EoL>
<BoL> Creates a new Dimension with the given value . <EoL>
<BoL> Returns True if ` self ` is known to be less than or equal to ` other ` . <EoL>
<BoL> Returns True if ` self ` is known to be less than ` other ` . <EoL>
<BoL> Returns ` self ` modulo ` other ` . <EoL>
<BoL> Returns the product of ` self ` and ` other ` . <EoL>
<BoL> Returns true if ` other ` has a different known value from ` self ` . <EoL>
<BoL> Returns the sum of ` other ` and ` self ` . <EoL>
<BoL> Returns the quotient of ` other ` and ` self ` rounded down . <EoL>
<BoL> Returns ` other ` modulo ` self ` . <EoL>
<BoL> Returns the product of ` self ` and ` other ` . <EoL>
<BoL> Returns the subtraction of ` self ` from ` other ` . <EoL>
<BoL> Returns the subtraction of ` other ` from ` self ` . <EoL>
<BoL> Raises an exception if ` other ` is not compatible with this Dimension . <EoL>
<BoL> Returns true if ` other ` is compatible with this Dimension . <EoL>
<BoL> Returns a Dimension that combines the information in ` self ` and ` other ` . <EoL>
<BoL> Validate and convert ` vals ` to a list of ` Tensor ` s . <EoL>
<BoL> Return the value to return from a dequeue op . <EoL>
<BoL> Return a list of values to pass to ` name_scope ( ) ` . <EoL>
<BoL> Closes this queue . <EoL>
<BoL> Dequeues one element from this queue . <EoL>
<BoL> Dequeues and concatenates ` n ` elements from this queue . <EoL>
<BoL> Dequeues and concatenates ` n ` elements from this queue . <EoL>
<BoL> Enqueues one element to this queue . <EoL>
<BoL> Enqueues zero or more elements to this queue . <EoL>
<BoL> Create a queue using the queue reference from ` queues [ index ] ` . <EoL>
<BoL> Returns true if queue is closed . <EoL>
<BoL> Compute the number of elements in this queue . <EoL>
<BoL> Returns the number of records this reader has produced . <EoL>
<BoL> Returns the number of work units this reader has finished processing . <EoL>
<BoL> Returns the next record ( key , value ) pair produced by a reader . <EoL>
<BoL> Restore a reader to its initial clean state . <EoL>
<BoL> Restore a reader to a previously saved state . <EoL>
<BoL> Produce a string tensor that encodes the state of a reader . <EoL>
<BoL> Enters a context inside which operations are recorded on this tape . <EoL>
<BoL> Exits the recording context , no further operations are traced . <EoL>
<BoL> Creates a new GradientTape . <EoL>
<BoL> Computes the gradient using operations recorded in context of this tape . <EoL>
<BoL> Clears all information stored in this tape . <EoL>
<BoL> Temporarily stops recording operations on this tape . <EoL>
<BoL> Ensures that ` tensor ` is being traced by this tape . <EoL>
<BoL> Returns variables watched by this tape in order of construction . <EoL>
<BoL> Creates a new , empty Graph . <EoL>
<BoL> Add device to stack manually , separate from a context manager . <EoL>
<BoL> Adds a function to the graph . <EoL>
<BoL> Creates ` Operations ` in this graph for any new TF_Operations . <EoL>
<BoL> Adds 'op ' to the graph . <EoL>
<BoL> Applies the current device function stack to the given operation . <EoL>
<BoL> See ` Graph.as_graph_element ( ) ` for details . <EoL>
<BoL> EXPERIMENTAL : A context manager for setting attributes on operators . <EoL>
<BoL> Check if the graph is finalized . <EoL>
<BoL> For an op that takes ` input_ops ` as inputs , compute control inputs . <EoL>
<BoL> If this graph contains functions , copy them to ` graph_def ` . <EoL>
<BoL> Creates an ` Operation ` in this graph from the supplied TF_Operation . <EoL>
<BoL> Common logic for creating an op in this graph . <EoL>
<BoL> Returns the current control flow context . <EoL>
<BoL> Returns the function definition for 'name ' . <EoL>
<BoL> Returns the ` OpDef ` proto for ` type ` . ` type ` is a string . <EoL>
<BoL> Returns the ` Operation ` with the given ` name ` . <EoL>
<BoL> Returns the ` Tensor ` representing ` tf_output ` . <EoL>
<BoL> Tests whether 'name ' is registered in this graph 's function library . <EoL>
<BoL> EXPERIMENTAL : A context manager for setting kernel labels . <EoL>
<BoL> Return detailed error message about device conflict due to colocation . <EoL>
<BoL> Returns a lock to guard code that creates & mutates ops . <EoL>
<BoL> Id for next Operation instance . Also increments the internal id . <EoL>
<BoL> Python 'with ' handler to help annotate ops with their originator . <EoL>
<BoL> Record that the given op depends on all registered control dependencies . <EoL>
<BoL> Returns a lock to guard code for Session.run . <EoL>
<BoL> Sets the current control flow context . <EoL>
<BoL> Return colocation stack metadata as a dictionary . <EoL>
<BoL> Return device function stack as a list of TraceableObjects . <EoL>
<BoL> Opposite of ` finalize ` . Internal interface . <EoL>
<BoL> Stores ` value ` in the collections given by ` names ` . <EoL>
<BoL> Returns a context manager that makes this ` Graph ` the default graph . <EoL>
<BoL> Returns the object referred to by ` obj ` , as an ` Operation ` or ` Tensor ` . <EoL>
<BoL> Clears all values in a collection . <EoL>
<BoL> Returns a context manager that specifies an op to colocate with . <EoL>
<BoL> Returns a context manager that specifies the resource container to use . <EoL>
<BoL> Returns a context manager that specifies control dependencies . <EoL>
<BoL> Finalizes this graph , making it read-only . <EoL>
<BoL> Returns a list of collections used in this graph . <EoL>
<BoL> Returns the current name scope . <EoL>
<BoL> Returns the ` Operation ` with the given ` name ` . <EoL>
<BoL> Return the list of operations in the graph . <EoL>
<BoL> Returns the ` Tensor ` with the given ` name ` . <EoL>
<BoL> EXPERIMENTAL : A context manager for overriding gradient functions . <EoL>
<BoL> Returns ` True ` if and only if ` tensor ` is feedable . <EoL>
<BoL> Returns ` True ` if and only if ` tensor_or_op ` is fetchable . <EoL>
<BoL> Returns a context manager that creates hierarchical names for operations . <EoL>
<BoL> Marks the given ` tensor ` as unfeedable in this graph . <EoL>
<BoL> Marks the given ` op ` as unfetchable in this graph . <EoL>
<BoL> Make device , colocation and dependencies stacks thread-local . <EoL>
<BoL> Return a unique operation name for ` name ` . <EoL>
<BoL> Create a IdentityReader . <EoL>
<BoL> Creates an ` IndexedSlices ` . <EoL>
<BoL> Creates a new interactive TensorFlow session . <EoL>
<BoL> Returns a handle to a `` callable '' with the given options . <EoL>
<BoL> Perform either run or partial_run , depending the presence of ` handle ` . <EoL>
<BoL> Returns a context manager that makes this object the default session . <EoL>
<BoL> Closes an ` InteractiveSession ` . <EoL>
<BoL> Lists available devices in this session . <EoL>
<BoL> Returns a Python callable that runs a particular step.Template callable that accepts RunOptions and RunMetadata . <EoL>
<BoL> Continues the execution with more feeds and fetches . <EoL>
<BoL> Sets up a graph with feeds and fetches for partial run . <EoL>
<BoL> Runs operations and evaluates tensors in ` fetches ` . <EoL>
<BoL> Create a LMDBReader . <EoL>
<BoL> Specifies that ops of type ` op_type ` is not differentiable . <EoL>
<BoL> Creates a new ` OpError ` indicating that a particular op failed . <EoL>
<BoL> Creates an ` Operation ` . <EoL>
<BoL> Add a new control input to this operation . <EoL>
<BoL> Add a list of new control inputs to this operation . <EoL>
<BoL> Add this op to its control flow context . <EoL>
<BoL> Returns the control flow context of this op . <EoL>
<BoL> Regroups a flat list of input tensors into scalar and sequence inputs . <EoL>
<BoL> Removes any control inputs to this operation . <EoL>
<BoL> Private method used to set an attribute in the node_def . <EoL>
<BoL> Sets the current control flow context of this op . <EoL>
<BoL> Set the device of this operation . <EoL>
<BoL> Create and return a new TF_Input for input_idx'th input of this op . <EoL>
<BoL> Create and return a new TF_Output for output_idx'th output of this op . <EoL>
<BoL> Update the input to this operation at the given index . <EoL>
<BoL> Returns the list of colocation groups of the op . <EoL>
<BoL> Returns the value of the attr of this op with the given ` name ` . <EoL>
<BoL> Runs this operation in a ` Session ` . <EoL>
<BoL> DEPRECATED : Use outputs . <EoL>
<BoL> Constructs a queue object from a queue reference . <EoL>
<BoL> Creates a new ReaderBase . <EoL>
<BoL> Registers the function ` f ` as gradient function for ` op_type ` . <EoL>
<BoL> Creates a new decorator with ` op_type ` as the Operation type . <EoL>
<BoL> Creates a new TensorFlow session . <EoL>
<BoL> Closes this session . <EoL>
<BoL> Resets resource containers on ` target ` , and close all connected sessions . <EoL>
<BoL> Attempts to apply a gradient to the accumulator . <EoL>
<BoL> Attempts to extract the average gradient from the accumulator . <EoL>
<BoL> Attempts to extract the average gradient from the accumulator . <EoL>
<BoL> Creates a ` SparseTensor ` . <EoL>
<BoL> Returns a list of ` Operation ` s that consume this ` SparseTensor ` . <EoL>
<BoL> Evaluates this sparse tensor in a ` Session ` . <EoL>
<BoL> Get the ` TensorShape ` representing the shape of the dense tensor . <EoL>
<BoL> Create a TFRecordReader . <EoL>
<BoL> Computes the absolute value of a tensor . <EoL>
<BoL> Dummy method to prevent a tensor from being used as a Python ` bool ` . <EoL>
<BoL> Returns the truth value of ( x > = y ) element-wise . <EoL>
<BoL> Overload for Tensor.__getitem__ . <EoL>
<BoL> Returns the truth value of ( x > y ) element-wise . <EoL>
<BoL> Creates a new ` Tensor ` . <EoL>
<BoL> Returns the truth value of NOT x element-wise . <EoL>
<BoL> Returns the truth value of ( x < = y ) element-wise . <EoL>
<BoL> Returns the truth value of ( x < y ) element-wise . <EoL>
<BoL> Computes numerical negative value element-wise . <EoL>
<BoL> Dummy method to prevent a tensor from being used as a Python ` bool ` . <EoL>
<BoL> Return a value to use for the NodeDef `` input '' attribute . <EoL>
<BoL> Returns the TensorShape of this tensor according to the C API . <EoL>
<BoL> Returns ops needing shape inference to compute target_op 's shape . <EoL>
<BoL> Integer rank of this Tensor , if known , else None . <EoL>
<BoL> Returns a list of ` Operation ` s that consume this tensor . <EoL>
<BoL> Evaluates this tensor in a ` Session ` . <EoL>
<BoL> Alias of Tensor.shape . <EoL>
<BoL> Updates the shape of this tensor . <EoL>
<BoL> Close the current TensorArray . <EoL>
<BoL> Return the values in the TensorArray as a concatenated ` Tensor ` . <EoL>
<BoL> Return selected values in the TensorArray as a packed ` Tensor ` . <EoL>
<BoL> Returns a TensorArray with the same content and properties . <EoL>
<BoL> Read the value at location ` index ` in the TensorArray . <EoL>
<BoL> Scatter the values of a ` Tensor ` in specific indices of a ` TensorArray ` . <EoL>
<BoL> Return the size of the TensorArray . <EoL>
<BoL> Split the values of a ` Tensor ` into the TensorArray . <EoL>
<BoL> Return the values in the TensorArray as a stacked ` Tensor ` . <EoL>
<BoL> Unstack the values of a ` Tensor ` in the TensorArray . <EoL>
<BoL> Write ` value ` into index ` index ` of the TensorArray . <EoL>
<BoL> Returns True if this shape contains non-zero information . <EoL>
<BoL> Returns True if ` self ` is equivalent to ` other ` . <EoL>
<BoL> Returns the value of a dimension or a shape , depending on the key . <EoL>
<BoL> Creates a new TensorShape with the given dimensions . <EoL>
<BoL> Returns ` self.dims ` if the rank is known , otherwise raises ValueError . <EoL>
<BoL> Returns the rank of this shape , or raises ValueError if unspecified . <EoL>
<BoL> Returns True if ` self ` is known to be different from ` other ` . <EoL>
<BoL> Returns a list of integers or ` None ` for each dimension . <EoL>
<BoL> Returns this shape as a ` TensorShapeProto ` . <EoL>
<BoL> Raises an exception if ` self ` is not compatible with the given ` rank ` . <EoL>
<BoL> Raises exception if ` self ` and ` other ` do not represent the same shape . <EoL>
<BoL> Raises an exception if ` self ` is not fully defined in every dimension . <EoL>
<BoL> Raises an exception if ` self ` and ` other ` do not have compatible ranks . <EoL>
<BoL> Returns the concatenation of the dimension in ` self ` and ` other ` . <EoL>
<BoL> Returns True iff ` self ` is compatible with ` other ` . <EoL>
<BoL> Returns True iff ` self ` is fully defined in every dimension . <EoL>
<BoL> Returns a ` TensorShape ` combining the information in ` self ` and ` other ` . <EoL>
<BoL> Returns the most specific TensorShape compatible with ` self ` and ` other ` . <EoL>
<BoL> Returns the total number of elements , or none for incomplete shapes . <EoL>
<BoL> Returns a shape based on ` self ` with the given rank . <EoL>
<BoL> Returns a shape based on ` self ` with at least the given rank . <EoL>
<BoL> Returns a shape based on ` self ` with at most the given rank . <EoL>
<BoL> Create a TextLineReader . <EoL>
<BoL> Register overloads for all operators . <EoL>
<BoL> Defer an operator overload to ` ops.Tensor ` . <EoL>
<BoL> Utility function for converting a Variable to a Tensor . <EoL>
<BoL> Creates a slice helper object given a variable . <EoL>
<BoL> Returns a dictionary of values to checkpoint with this object . <EoL>
<BoL> Pop and load any deferred checkpoint restores into ` checkpointable ` . <EoL>
<BoL> Look up a dependency by name . <EoL>
<BoL> Initialize dependency management . <EoL>
<BoL> Restore the object 's attributes from a name-based checkpoint . <EoL>
<BoL> If automatic dependency tracking is enabled , ignores ` value ` . <EoL>
<BoL> Return a dependency 's value for restore-on-create . <EoL>
<BoL> Restore this object and its dependencies ( may be deferred ) . <EoL>
<BoL> Declare a dependency on another ` Checkpointable ` object . <EoL>
<BoL> Assigns a new value to the variable . <EoL>
<BoL> Adds a value to this variable . <EoL>
<BoL> Subtracts a value from this variable . <EoL>
<BoL> Increments this variable until it reaches ` limit ` . <EoL>
<BoL> In a session , computes and returns the value of this variable . <EoL>
<BoL> Returns a ` Variable ` object created from ` variable_def ` . <EoL>
<BoL> Alias of Variable.shape . <EoL>
<BoL> Returns the value of the initialized variable . <EoL>
<BoL> Load new value into this variable . <EoL>
<BoL> Returns the value of this variable , read in the current context . <EoL>
<BoL> Adds ` IndexedSlices ` to this variable . <EoL>
<BoL> Applies sparse addition to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse subtraction to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse assignment to individual values or slices in a Variable . <EoL>
<BoL> Subtracts ` IndexedSlices ` from this variable . <EoL>
<BoL> Assigns ` IndexedSlices ` to this variable . <EoL>
<BoL> Overrides the shape for this variable . <EoL>
<BoL> Converts a ` Variable ` to a ` VariableDef ` protocol buffer . <EoL>
<BoL> Returns the last snapshot of this variable . <EoL>
<BoL> Get this scope 's variables . <EoL>
<BoL> Get this scope 's global variables . <EoL>
<BoL> Get this scope 's local variables . <EoL>
<BoL> Reuse variables in this scope . <EoL>
<BoL> Set caching_device for this scope . <EoL>
<BoL> Set custom getter for this scope . <EoL>
<BoL> Set data type for this scope . <EoL>
<BoL> Set initializer for this scope . <EoL>
<BoL> Set partitioner for this scope . <EoL>
<BoL> Set regularizer for this scope . <EoL>
<BoL> Sets whether to use ResourceVariables for this scope . <EoL>
<BoL> Get this scope 's trainable variables . <EoL>
<BoL> Create a WholeFileReader . <EoL>
<BoL> Returns the element-wise sum of a list of tensors . <EoL>
<BoL> Computes acos of x element-wise . <EoL>
<BoL> Computes inverse hyperbolic cosine of x element-wise . <EoL>
<BoL> Returns x + y element-wise . <EoL>
<BoL> Connect a ` check_numerics ` to every floating point tensor . <EoL>
<BoL> Adds all input tensors element-wise . <EoL>
<BoL> Wrapper for ` Graph.add_to_collection ( ) ` using the default graph . <EoL>
<BoL> Wrapper for ` Graph.add_to_collections ( ) ` using the default graph . <EoL>
<BoL> See ` tf.global_variables ` . <EoL>
<BoL> Returns the element-wise argument of a complex ( or real ) tensor . <EoL>
<BoL> Runs the program with an optional 'main ' function and 'argv ' list . <EoL>
<BoL> Returns the index with the largest value across dimensions of a tensor . <EoL>
<BoL> Returns the index with the smallest value across dimensions of a tensor . <EoL>
<BoL> Converts the given ` type_value ` to a ` DType ` . <EoL>
<BoL> Converts each entry in the given tensor to strings . Supports many numeric <EoL>
<BoL> Computes asin of x element-wise . <EoL>
<BoL> Computes inverse hyperbolic sine of x element-wise . <EoL>
<BoL> Assert the condition ` x == y ` holds element-wise . <EoL>
<BoL> Assert the condition ` x > y ` holds element-wise . <EoL>
<BoL> Assert that ` x ` is of integer dtype . <EoL>
<BoL> Assert the condition ` x < y ` holds element-wise . <EoL>
<BoL> Assert the condition ` x < = y ` holds element-wise . <EoL>
<BoL> Assert the condition ` x < 0 ` holds element-wise . <EoL>
<BoL> Assert the condition ` x > = 0 ` holds element-wise . <EoL>
<BoL> Assert the condition ` x < = 0 ` holds element-wise . <EoL>
<BoL> Assert the condition ` x > 0 ` holds element-wise . <EoL>
<BoL> Static assert that values is a `` proper '' iterable . <EoL>
<BoL> Assert ` x ` has rank equal to ` rank ` . <EoL>
<BoL> Validate and return float type based on ` tensors ` and ` dtype ` . <EoL>
<BoL> Statically asserts that the given ` Tensor ` is of the specified type . <EoL>
<BoL> Returns an Op to check if variables are initialized . <EoL>
<BoL> Update 'ref ' by assigning 'value ' to it . <EoL>
<BoL> Update 'ref ' by adding 'value ' to it . <EoL>
<BoL> Update 'ref ' by subtracting 'value ' from it . <EoL>
<BoL> Computes atan of x element-wise . <EoL>
<BoL> Computes arctangent of ` y/x ` element-wise , respecting signs of the arguments . <EoL>
<BoL> Computes inverse hyperbolic tangent of x element-wise . <EoL>
<BoL> Gather slices from ` params ` according to ` indices ` with leading batch dims . <EoL>
<BoL> Generalization of ` tf.scatter_update ` to axis different than 0 . <EoL>
<BoL> BatchToSpace for N-D tensors of type T . <EoL>
<BoL> Compute the regularized incomplete beta integral \\ ( I_x ( a , b ) \\ ) . <EoL>
<BoL> Bitcasts a tensor from one type to another without copying data . <EoL>
<BoL> Elementwise computes the bitwise AND of ` x ` and ` y ` . <EoL>
<BoL> Elementwise computes the bitwise OR of ` x ` and ` y ` . <EoL>
<BoL> Elementwise computes the bitwise XOR of ` x ` and ` y ` . <EoL>
<BoL> Flips all bits elementwise . <EoL>
<BoL> Elementwise computes the bitwise left-shift of ` x ` and ` y ` . <EoL>
<BoL> Elementwise computes the bitwise right-shift of ` x ` and ` y ` . <EoL>
<BoL> Apply boolean mask to tensor . Numpy equivalent is ` tensor [ mask ] ` .Mask tensor along dimension 0 with a 1-D mask . <EoL>
<BoL> Returns the broadcasted dynamic shape between ` shape_x ` and ` shape_y ` . <EoL>
<BoL> Returns the broadcasted static shape between ` shape_x ` and ` shape_y ` . <EoL>
<BoL> Broadcast an array for a compatible shape . <EoL>
<BoL> Casts a tensor to a new type . <EoL>
<BoL> Returns element-wise smallest integer not less than x . <EoL>
<BoL> Checks a tensor for NaN and Inf values . <EoL>
<BoL> Computes the Cholesky decomposition of one or more square matrices . <EoL>
<BoL> Solves systems of linear eqns ` A X = RHS ` , given Cholesky factorizations . <EoL>
<BoL> Clips tensor values to a maximum average L2-norm . <EoL>
<BoL> Clips values of multiple tensors by the ratio of the sum of their norms . <EoL>
<BoL> Clips tensor values to a maximum L2-norm . <EoL>
<BoL> Converts either bytes or unicode to ` bytes ` , using utf-8 encoding for text . <EoL>
<BoL> Returns the given argument as a unicode string . <EoL>
<BoL> Converts to ` str ` as ` str ( value ) ` , but use ` as_str ` for ` bytes ` . <EoL>
<BoL> Context manager for testing forward compatibility of generated graphs . <EoL>
<BoL> Return true if the forward compatibility window has expired . <EoL>
<BoL> Returns the file system path representation of a ` PathLike ` object , else as it is . <EoL>
<BoL> Converts two real numbers to a complex number . <EoL>
<BoL> Concatenates tensors along one dimension . <EoL>
<BoL> Returns the complex conjugate of a complex number . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Instantiates an initializer from a configuration dictionary . <EoL>
<BoL> Wrapper for ` Graph.container ( ) ` using the default graph . <EoL>
<BoL> Wrapper for ` Graph.control_dependencies ( ) ` using the default graph . <EoL>
<BoL> Converts the given ` value ` to a ` Tensor ` . <EoL>
<BoL> Converts the given object to a ` Tensor ` or an ` IndexedSlices ` . <EoL>
<BoL> Converts value to a ` SparseTensor ` or ` Tensor ` . <EoL>
<BoL> Computes cos of x element-wise . <EoL>
<BoL> Computes hyperbolic cosine of x element-wise . <EoL>
<BoL> Increments 'ref ' until it reaches 'limit ' . <EoL>
<BoL> Compute the pairwise cross product . <EoL>
<BoL> Compute the cumulative product of the tensor ` x ` along ` axis ` . <EoL>
<BoL> Compute the cumulative sum of the tensor ` x ` along ` axis ` . <EoL>
<BoL> Decorator to define a function with a custom gradient.Decorated function with custom gradient . <EoL>
<BoL> Creates an ` Iterator ` for enumerating the elements of this dataset . <EoL>
<BoL> Produces serialized graph representation of the dataset . <EoL>
<BoL> Creates a scalar ` tf.Tensor ` of ` tf.variant ` representing this dataset . <EoL>
<BoL> Returns a list of the input datasets of the dataset . <EoL>
<BoL> Applies a transformation function to this dataset . <EoL>
<BoL> Combines consecutive elements of this dataset into batches . <EoL>
<BoL> Caches the elements in this dataset . <EoL>
<BoL> Creates a ` Dataset ` by concatenating given dataset with this dataset . <EoL>
<BoL> Filters this dataset according to ` predicate ` . <EoL>
<BoL> Maps ` map_func ` across this dataset and flattens the result . <EoL>
<BoL> Creates a ` Dataset ` whose elements are generated by ` generator ` .Creates a unique ` iterator_id ` for each pass over the dataset.Generates the next element from iterator with ID ` iterator_id_t ` .A ` py_func ` that will be called to invoke the iterator.Releases host-side state for the iterator with ID ` iterator_id_t ` . <EoL>
<BoL> Splits each rank-N ` tf.SparseTensor ` in this dataset row-wise . <EoL>
<BoL> Creates a ` Dataset ` whose elements are slices of the given tensors . <EoL>
<BoL> Creates a ` Dataset ` with a single element , comprising the given tensors . <EoL>
<BoL> A dataset of all files matching a pattern . <EoL>
<BoL> Creates an ` Iterator ` for enumerating the elements of this dataset . <EoL>
<BoL> Creates an ` Iterator ` for enumerating the elements of this dataset . <EoL>
<BoL> Maps ` map_func ` across the elements of this dataset . <EoL>
<BoL> Returns the options for this dataset . <EoL>
<BoL> Creates a ` Dataset ` that prefetches elements from this dataset . <EoL>
<BoL> Creates a ` Dataset ` of a step-separated range of values . <EoL>
<BoL> Reduces the input dataset to a single element . <EoL>
<BoL> Repeats this dataset ` count ` times . <EoL>
<BoL> Creates a ` Dataset ` that includes only 1/ ` num_shards ` of this dataset . <EoL>
<BoL> Randomly shuffles the elements of this dataset . <EoL>
<BoL> Creates a ` Dataset ` that skips ` count ` elements from this dataset . <EoL>
<BoL> Creates a ` Dataset ` with at most ` count ` elements from this dataset . <EoL>
<BoL> Combines input elements into a dataset of windows . <EoL>
<BoL> Returns a new ` tf.data.Dataset ` with the given options set . <EoL>
<BoL> Creates a ` Dataset ` by zipping together the given datasets . <EoL>
<BoL> Returns a nested structure of ` tf.Tensor ` s representing the next element . <EoL>
<BoL> Returns a ` tf.Operation ` that initializes this iterator on ` dataset ` . <EoL>
<BoL> Returns a string-valued ` tf.Tensor ` that represents this iterator . <EoL>
<BoL> Produces the list of enabled static optimizations . <EoL>
<BoL> Merges itself with the given ` tf.data.Options ` . <EoL>
<BoL> Creates a ` TextLineDataset ` . <EoL>
<BoL> Initializes a ` CheckpointInputPipelineHook ` . <EoL>
<BoL> Called when new TensorFlow session is created . <EoL>
<BoL> Creates a ` Dataset ` that counts from ` start ` in steps of size ` step ` . <EoL>
<BoL> Returns an ` Optional ` that wraps the given value . <EoL>
<BoL> Returns a nested structure of values wrapped by this optional . <EoL>
<BoL> Returns a tensor that evaluates to ` True ` if this optional has a value . <EoL>
<BoL> Returns an ` Optional ` that has no value . <EoL>
<BoL> A ` Dataset ` of pseudorandom values . <EoL>
<BoL> Creates a ` SqlDataset ` . <EoL>
<BoL> Creates a ` StatsAggregator ` . <EoL>
<BoL> Returns a string ` tf.Tensor ` that summarizes the aggregated statistics . <EoL>
<BoL> Returns a ` tf.Operation ` to write a dataset to a file . <EoL>
<BoL> Return int64 id of the length bucket for this element.Batch elements in dataset . <EoL>
<BoL> Creates a dataset that deterministically chooses elements from ` datasets ` . <EoL>
<BoL> A transformation that copies dataset elements to the given ` target_device ` . <EoL>
<BoL> A transformation that batches ragged elements into ` tf.SparseTensor ` s . <EoL>
<BoL> A transformation that enumerate the elements of a dataset . <EoL>
<BoL> Returns an ` Optional ` that contains the next value from the iterator . <EoL>
<BoL> Returns the single element in ` dataset ` as a nested structure of tensors . <EoL>
<BoL> A transformation that groups elements and performs a reduction.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Creates a ` Dataset ` from another ` Dataset ` and silently ignores any errors . <EoL>
<BoL> Records the latency of producing each element of the input dataset . <EoL>
<BoL> Organizes columns into a features dictionary . <EoL>
<BoL> Returns a SaveableObject for saving/restore iterator state using Saver . <EoL>
<BoL> A transformation that parses ` Example ` protos into a ` dict ` of tensors.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> A transformation that prefetches dataset values to the given ` device ` . <EoL>
<BoL> A transformation that resamples a dataset to achieve a target distribution.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Samples elements at random from the datasets in ` datasets ` . <EoL>
<BoL> A transformation that scans a function across an input dataset . <EoL>
<BoL> Set the given ` stats_aggregator ` for aggregating the input dataset stats . <EoL>
<BoL> Shuffles and repeats a Dataset returning a new permutation for each epoch . <EoL>
<BoL> Splits elements of a dataset into multiple elements on the batch dimension.Function from ` Dataset ` to ` Dataset ` that applies the transformation . <EoL>
<BoL> Creates a ` Dataset ` from another ` Dataset ` , discarding duplicates . <EoL>
<BoL> Assert that the tensor does not contain any NaN 's or Inf 's . <EoL>
<BoL> Returns which elements of x are finite . <EoL>
<BoL> Returns which elements of x are Inf . <EoL>
<BoL> Returns which elements of x are NaN . <EoL>
<BoL> Returns ` True ` if ` x ` is non-decreasing . <EoL>
<BoL> Returns ` True ` if ` x ` is strictly increasing . <EoL>
<BoL> Decode web-safe base64-encoded strings . <EoL>
<BoL> Decompress strings . <EoL>
<BoL> Convert JSON-encoded Example records to binary protocol buffer strings . <EoL>
<BoL> Reinterpret the bytes of a string as a vector of numbers . <EoL>
<BoL> Delete the tensor for the given tensor handle . <EoL>
<BoL> Dequantize the 'input ' tensor into a float Tensor . <EoL>
<BoL> Deserialize and concatenate ` SparseTensors ` from a serialized minibatch . <EoL>
<BoL> Wrapper for ` Graph.device ( ) ` using the default graph . <EoL>
<BoL> Returns a diagonal tensor with a given diagonal values . <EoL>
<BoL> Returns the diagonal part of the tensor . <EoL>
<BoL> Computes Psi , the derivative of Lgamma ( the log of the absolute value of <EoL>
<BoL> Opts out of resource variables . <EoL>
<BoL> Helper to ` sample ` which ensures input is 1D . <EoL>
<BoL> Implementation for ` is_scalar_batch ` and ` is_scalar_event ` . <EoL>
<BoL> Returns ` 1 ` if ` prob > 0.5 ` and ` 0 ` otherwise . <EoL>
<BoL> Helper function to standardize op scope . <EoL>
<BoL> Helper to ` sample ` ; sets static shape info . <EoL>
<BoL> Shape of a single sample from a single event index as a 1-D ` Tensor ` . <EoL>
<BoL> Cumulative distribution function . <EoL>
<BoL> Creates a deep copy of the distribution . <EoL>
<BoL> Covariance . <EoL>
<BoL> Computes the ( Shannon ) cross entropy . <EoL>
<BoL> Shannon entropy in nats . <EoL>
<BoL> Shape of a single sample from a single batch as a 1-D int32 ` Tensor ` . <EoL>
<BoL> Indicates that ` batch_shape == [ ] ` . <EoL>
<BoL> Indicates that ` event_shape == [ ] ` . <EoL>
<BoL> Computes the Kullback -- Leibler divergence . <EoL>
<BoL> Log cumulative distribution function . <EoL>
<BoL> Log probability density/mass function . <EoL>
<BoL> Log survival function . <EoL>
<BoL> Mean . <EoL>
<BoL> Mode . <EoL>
<BoL> Shapes of parameters given the desired shape of a call to ` sample ( ) ` . <EoL>
<BoL> param_shapes with static ( i.e . ` TensorShape ` ) shapes . <EoL>
<BoL> Probability density/mass function . <EoL>
<BoL> Quantile function . Aka `` inverse cdf '' or `` percent point function '' . <EoL>
<BoL> Generate samples of the specified shape . <EoL>
<BoL> Standard deviation . <EoL>
<BoL> Survival function . <EoL>
<BoL> Variance . <EoL>
<BoL> Checks the validity of a concentration parameter . <EoL>
<BoL> Checks the validity of a sample . <EoL>
<BoL> Checks the validity of the concentration parameter . <EoL>
<BoL> Checks the validity of a sample . <EoL>
<BoL> Helper to ` _covariance ` and ` _variance ` which computes a shared scale . <EoL>
<BoL> Checks the validity of the concentration parameter . <EoL>
<BoL> Check counts for proper shape , values , then return tensor version . <EoL>
<BoL> Helper to ` _covariance ` and ` _variance ` which computes a shared scale . <EoL>
<BoL> Check counts for proper shape , values , then return tensor version . <EoL>
<BoL> Reconstruct input ` x ` from a its normalized version . <EoL>
<BoL> Standardize input ` x ` to a unit normal . <EoL>
<BoL> Perform the KL registration . <EoL>
<BoL> Initialize the KL registrar . <EoL>
<BoL> Determine if this ` ReparameterizationType ` is equal to another . <EoL>
<BoL> ` high - low ` . <EoL>
<BoL> Divides x / y elementwise ( using Python 2 division operator semantics ) . <EoL>
<BoL> Computes an unsafe divide which returns 0 if the y is zero . <EoL>
<BoL> Computes Python style division of ` x ` by ` y ` . <EoL>
<BoL> Performs a safe saturating cast of ` value ` to ` dtype ` . <EoL>
<BoL> Partitions ` data ` into ` num_partitions ` tensors using indices from ` partitions ` . <EoL>
<BoL> Interleave the values from the ` data ` tensors into a single tensor . <EoL>
<BoL> Computes the Levenshtein distance between sequences . <EoL>
<BoL> A generalized contraction between tensors of arbitrary dimension . <EoL>
<BoL> Creates resource variables by default . <EoL>
<BoL> Encode strings into web-safe base64 format . <EoL>
<BoL> Updates the shape of a tensor and checks at runtime that the shape holds . <EoL>
<BoL> Returns the truth value of ( x == y ) element-wise . <EoL>
<BoL> Computes the Gauss error function of ` x ` element-wise . <EoL>
<BoL> Computes the complementary error function of ` x ` element-wise . <EoL>
<BoL> Creates an ` AbortedError ` . <EoL>
<BoL> Creates an ` AlreadyExistsError ` . <EoL>
<BoL> Creates a ` CancelledError ` . <EoL>
<BoL> Creates a ` DataLossError ` . <EoL>
<BoL> Creates a ` DeadlineExceededError ` . <EoL>
<BoL> Creates a ` FailedPreconditionError ` . <EoL>
<BoL> Creates an ` InternalError ` . <EoL>
<BoL> Creates an ` InvalidArgumentError ` . <EoL>
<BoL> Creates a ` NotFoundError ` . <EoL>
<BoL> Creates an ` OutOfRangeError ` . <EoL>
<BoL> Creates a ` PermissionDeniedError ` . <EoL>
<BoL> Creates a ` ResourceExhaustedError ` . <EoL>
<BoL> Creates an ` UnauthenticatedError ` . <EoL>
<BoL> Creates an ` UnavailableError ` . <EoL>
<BoL> Creates an ` UnimplementedError ` . <EoL>
<BoL> Creates an ` UnknownError ` . <EoL>
<BoL> Returns True if the current thread has eager execution enabled . <EoL>
<BoL> Computes exponential of x element-wise . \\ ( y = e^x\\ ) . <EoL>
<BoL> Inserts a dimension of 1 into a tensor 's shape . <EoL>
<BoL> Computes exponential of x - 1 element-wise . <EoL>
<BoL> Extract ` patches ` from ` images ` and put them in the `` depth '' output dimension . <EoL>
<BoL> Extract ` patches ` from ` input ` and put them in the `` depth '' output dimension . 3D extension of ` extract_image_patches ` . <EoL>
<BoL> Fake-quantize the 'inputs ' tensor , type float to 'outputs ' tensor of same type . <EoL>
<BoL> Compute gradients for a FakeQuantWithMinMaxArgs operation . <EoL>
<BoL> Fake-quantize the 'inputs ' tensor of type float via global float scalars ` min ` <EoL>
<BoL> Compute gradients for a FakeQuantWithMinMaxVars operation . <EoL>
<BoL> Fake-quantize the 'inputs ' tensor of type float and one of the shapes : ` [ d ] ` , <EoL>
<BoL> Compute gradients for a FakeQuantWithMinMaxVarsPerChannel operation . <EoL>
<BoL> Represents discretized dense input . <EoL>
<BoL> A ` _CategoricalColumn ` that returns identity values . <EoL>
<BoL> A ` _CategoricalColumn ` with in-memory vocabulary . <EoL>
<BoL> Returns a column for performing crosses of categorical features . <EoL>
<BoL> Represents multi-hot representation of given categorical column . <EoL>
<BoL> Creates parsing spec dictionary from input feature_columns . <EoL>
<BoL> Fast Fourier transform . <EoL>
<BoL> 2D fast Fourier transform . <EoL>
<BoL> 3D fast Fourier transform . <EoL>
<BoL> Creates a tensor filled with a scalar value . <EoL>
<BoL> Partitioner to specify a fixed number of shards along given axis . <EoL>
<BoL> Returns element-wise largest integer not greater than x . <EoL>
<BoL> Returns x // y element-wise . <EoL>
<BoL> Divides ` x / y ` elementwise , rounding toward the most negative integer . <EoL>
<BoL> Returns element-wise remainder of division . When ` x < 0 ` xor ` y < 0 ` is <EoL>
<BoL> Gather slices from ` params ` into a Tensor with shape specified by ` indices ` . <EoL>
<BoL> Wrapper for ` Graph.get_collection ( ) ` using the default graph . <EoL>
<BoL> Wrapper for ` Graph.get_collection_ref ( ) ` using the default graph . <EoL>
<BoL> Returns the default graph for the current thread . <EoL>
<BoL> Returns the default session for the current thread . <EoL>
<BoL> Returns the local seeds an operation should use given an op-specific seed . <EoL>
<BoL> Return the handle of ` data ` . <EoL>
<BoL> Get the tensor of type ` dtype ` by feeding a tensor handle . <EoL>
<BoL> Returns the current variable scope . <EoL>
<BoL> Copies data from oldpath to newpath . <EoL>
<BoL> Deletes everything under dirname recursively . <EoL>
<BoL> Determines whether a path exists or not . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Closes FileIO . Should be called for the WritableFile to be flushed . <EoL>
<BoL> Flushes the Writable file . <EoL>
<BoL> Returns the contents of a file as a string . <EoL>
<BoL> Reads the next line from the file . Leaves the '\n ' at the end . <EoL>
<BoL> Returns all lines from the file in a list . <EoL>
<BoL> Returns the size of the file . <EoL>
<BoL> Returns the current position in the file . <EoL>
<BoL> Writes file_content to the file . Appends to the end of the file . <EoL>
<BoL> Returns a list of files that match the given pattern ( s ) . <EoL>
<BoL> Returns whether the path is a directory or not . <EoL>
<BoL> Returns a list of entries contained within a directory . <EoL>
<BoL> Creates a directory and all parent/intermediate directories . <EoL>
<BoL> Creates a directory with the name 'dirname ' . <EoL>
<BoL> Deletes the file located at 'filename ' . <EoL>
<BoL> Rename or move a file / directory . <EoL>
<BoL> Returns file statistics for a given path . <EoL>
<BoL> Recursive directory tree generator for directories . <EoL>
<BoL> Computes the global norm of multiple tensors . <EoL>
<BoL> Returns global variables . <EoL>
<BoL> Returns an Op that initializes global variables . <EoL>
<BoL> Extract the subgraph that can reach any of the nodes in 'dest_nodes ' . <EoL>
<BoL> Returns True if the given node_def must run on CPU , otherwise False . <EoL>
<BoL> Prunes out nodes that are n't needed for inference . <EoL>
<BoL> Convenience function to get a shape from a NodeDef 's input string . <EoL>
<BoL> Create an op that groups multiple operations.A sort key that allows None to be compared to strings . <EoL>
<BoL> Gives a guarantee to the TF runtime that the input tensor is a constant . <EoL>
<BoL> Return a tensor with the same shape and contents as input . <EoL>
<BoL> Returns a list of tensors with the same shapes and contents as the input <EoL>
<BoL> Inverse fast Fourier transform . <EoL>
<BoL> Inverse 2D fast Fourier transform . <EoL>
<BoL> Inverse 3D fast Fourier transform . <EoL>
<BoL> Compute the lower regularized incomplete Gamma function ` P ( a , x ) ` . <EoL>
<BoL> Compute the upper regularized incomplete Gamma function ` Q ( a , x ) ` . <EoL>
<BoL> Returns the imaginary part of a complex ( or real ) tensor . <EoL>
<BoL> Adjust the brightness of RGB or Grayscale images . <EoL>
<BoL> Adjust contrast of RGB or grayscale images . <EoL>
<BoL> Performs Gamma Correction on the input image . <EoL>
<BoL> Adjust hue of an RGB image . <EoL>
<BoL> Adjust jpeg encoding quality of an RGB image . <EoL>
<BoL> Adjust saturation of an RGB image . <EoL>
<BoL> Crop the central region of the image ( s ) . <EoL>
<BoL> Convert ` image ` to ` dtype ` , scaling its values if needed . <EoL>
<BoL> Extracts crops from the input image tensor and resizes them . <EoL>
<BoL> Decode and Crop a JPEG-encoded image to a uint8 tensor . <EoL>
<BoL> Decode the first frame of a BMP-encoded image to a uint8 tensor . <EoL>
<BoL> Decode the first frame of a GIF-encoded image to a uint8 tensor . <EoL>
<BoL> Convenience function for ` decode_bmp ` , ` decode_gif ` , ` decode_jpeg ` , and ` decode_png ` .Decodes a GIF image.Decodes a PNG image.Checks if an image is PNG.Decodes a jpeg image . <EoL>
<BoL> Decode a JPEG-encoded image to a uint8 tensor . <EoL>
<BoL> Decode a PNG-encoded image to a uint8 or uint16 tensor . <EoL>
<BoL> Draw bounding boxes on a batch of images . <EoL>
<BoL> JPEG-encode an image . <EoL>
<BoL> PNG-encode an image . <EoL>
<BoL> Extracts a glimpse from the input tensor . <EoL>
<BoL> Extract the shape information of a JPEG-encoded image . <EoL>
<BoL> Flip an image horizontally ( left to right ) . <EoL>
<BoL> Flip an image vertically ( upside down ) . <EoL>
<BoL> Converts one or more images from Grayscale to RGB . <EoL>
<BoL> Convert one or more images from HSV to RGB . <EoL>
<BoL> Returns image gradients ( dy , dx ) for each color channel . <EoL>
<BoL> Convenience function to check if the 'contents ' encodes a JPEG image . <EoL>
<BoL> Linearly scales ` image ` to have zero mean and unit variance . <EoL>
<BoL> Returns the Peak Signal-to-Noise Ratio between a and b . <EoL>
<BoL> Adjust the brightness of images by a random factor . <EoL>
<BoL> Adjust the contrast of an image by a random factor . <EoL>
<BoL> Randomly crops a tensor to a given size . <EoL>
<BoL> Randomly flip an image horizontally ( left to right ) . <EoL>
<BoL> Randomly flips an image vertically ( upside down ) . <EoL>
<BoL> Adjust the hue of an RGB image by a random factor . <EoL>
<BoL> Randomly changes jpeg encoding quality for inducing jpeg noise . <EoL>
<BoL> Adjust the saturation of an RGB image by a random factor . <EoL>
<BoL> Resize ` images ` to ` size ` using area interpolation . <EoL>
<BoL> Resize ` images ` to ` size ` using bicubic interpolation . <EoL>
<BoL> Resize ` images ` to ` size ` using bilinear interpolation . <EoL>
<BoL> Crops and/or pads an image to a target width and height . <EoL>
<BoL> Resize ` images ` to ` size ` using nearest neighbor interpolation . <EoL>
<BoL> Converts one or more images from RGB to Grayscale . <EoL>
<BoL> Converts one or more images from RGB to HSV . <EoL>
<BoL> Converts one or more images from RGB to YIQ . <EoL>
<BoL> Converts one or more images from RGB to YUV . <EoL>
<BoL> Rotate image ( s ) counter-clockwise by 90 degrees . <EoL>
<BoL> Returns a tensor holding Sobel edge maps . <EoL>
<BoL> Computes SSIM index between img1 and img2 . <EoL>
<BoL> Computes the MS-SSIM between img1 and img2 . <EoL>
<BoL> Calculate and return the total variation for one or more images . <EoL>
<BoL> Transpose image ( s ) by swapping the height and width dimension . <EoL>
<BoL> Converts one or more images from YIQ to RGB . <EoL>
<BoL> Converts one or more images from YUV to RGB . <EoL>
<BoL> A context manager that lifts ops out of control-flow scopes and function-building graphs . <EoL>
<BoL> Returns an Op that initializes all tables of the default graph . <EoL>
<BoL> See ` tf.global_variables_initializer ` . <EoL>
<BoL> See ` tf.local_variables_initializer ` . <EoL>
<BoL> See ` tf.variables_initializer ` . <EoL>
<BoL> He normal initializer . <EoL>
<BoL> He uniform variance scaling initializer . <EoL>
<BoL> LeCun normal initializer . <EoL>
<BoL> LeCun uniform initializer . <EoL>
<BoL> Returns an Op that initializes all local variables . <EoL>
<BoL> Returns an Op that initializes all tables of the default graph . <EoL>
<BoL> Returns an Op that initializes a list of variables . <EoL>
<BoL> Computes the inverse permutation of a tensor . <EoL>
<BoL> Convert to RecordWriterOptions for use with PyRecordWriter . <EoL>
<BoL> Convert various option types to a unified string . <EoL>
<BoL> Save the list of files matching pattern , so it is only computed once . <EoL>
<BoL> Returns the set of files matching one or more glob patterns . <EoL>
<BoL> Parses a single ` Example ` proto . <EoL>
<BoL> Transforms a serialized tensorflow.TensorProto proto into a Tensor . <EoL>
<BoL> Reads and outputs the entire contents of the input filename . <EoL>
<BoL> Serialize ` N ` -minibatch ` SparseTensor ` into an ` [ N , 3 ] ` ` Tensor ` . <EoL>
<BoL> Serialize a ` SparseTensor ` into a 3-vector ( 1-D ` Tensor ` ) object . <EoL>
<BoL> An iterator that read the records from a TFRecords file . <EoL>
<BoL> Writes contents to the file at input filename . Creates file and recursively <EoL>
<BoL> Writes a graph proto to a file . <EoL>
<BoL> Tests if a variable has been initialized . <EoL>
<BoL> Wraps ` call ` , applying pre- and post-processing steps . <EoL>
<BoL> Makes the metric name unique and adds it to the model 's metric name list . <EoL>
<BoL> Checks compatibility between the layer and provided inputs . <EoL>
<BoL> Caches metric name and function attributes for every model output . <EoL>
<BoL> Check trainable weights count consistency . <EoL>
<BoL> Decides how ` self.call ( ) ` is invoked . See base_layer.CallConvention . <EoL>
<BoL> Set model 's input and output specs based on the input data received . <EoL>
<BoL> Returns the Callback Model for this Model . <EoL>
<BoL> Private utility to retrieves an attribute ( e.g . inputs ) from a node . <EoL>
<BoL> Create lambdas which compute regularization losses.Creates a regularization loss ` Tensor ` for variable ` v ` . <EoL>
<BoL> Initialized model metric attributes . <EoL>
<BoL> Get Layer inputs from __call__ *args and **kwargs . <EoL>
<BoL> Override to allow ` Layer ` to disable dependency tracking . <EoL>
<BoL> Computes output tensors for new inputs . <EoL>
<BoL> Set model 's input and output specs based on the input data received . <EoL>
<BoL> Sets the metric attributes on the model for all the model outputs . <EoL>
<BoL> Sets the metric attributes on the model for the given output . <EoL>
<BoL> Set model 's inputs and output specs based . <EoL>
<BoL> Add Checkpointable dependencies on a list of Layers . <EoL>
<BoL> Util shared between different serialization methods . <EoL>
<BoL> Add update op ( s ) , potentially dependent on layer inputs . <EoL>
<BoL> Apply the layer on a input . <EoL>
<BoL> Builds the model based on input shapes received . <EoL>
<BoL> Calls the model on new inputs . <EoL>
<BoL> Count the total number of scalars composing the weights . <EoL>
<BoL> Instantiates a Model from its config ( output of ` get_config ( ) ` ) .Deserialize a node.Deserializes a layer , then call it on appropriate inputs . <EoL>
<BoL> Retrieves the input tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves a layer based on either its name ( unique ) or index . <EoL>
<BoL> Retrieves losses relevant to a specific set of inputs . <EoL>
<BoL> Retrieves the output tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves updates relevant to a specific set of inputs . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Loads all layer weights , either from a TensorFlow or an HDF5 weight file . <EoL>
<BoL> Returns predictions for a single batch of samples . <EoL>
<BoL> Saves the model to a single HDF5 file . <EoL>
<BoL> Saves all layer weights . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Prints a string summary of the network . <EoL>
<BoL> Test the model on a single batch of samples . <EoL>
<BoL> Returns a JSON string containing the network configuration . <EoL>
<BoL> Returns a yaml string containing the network configuration . <EoL>
<BoL> Runs a single gradient update on a single batch of data . <EoL>
<BoL> Adds a layer instance on top of the layer stack . <EoL>
<BoL> Removes the last layer in the model . <EoL>
<BoL> Generate class predictions for the input samples . <EoL>
<BoL> Generates class probability predictions for the input samples . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Hard sigmoid activation function . <EoL>
<BoL> Rectified Linear Unit . <EoL>
<BoL> Scaled Exponential Linear Unit ( SELU ) . <EoL>
<BoL> Softmax activation function . <EoL>
<BoL> Softplus activation function . <EoL>
<BoL> Softsign activation function . <EoL>
<BoL> Element-wise absolute value . <EoL>
<BoL> Bitwise reduction ( logical AND ) . <EoL>
<BoL> Bitwise reduction ( logical OR ) . <EoL>
<BoL> Creates a 1D tensor containing a sequence of integers . <EoL>
<BoL> Returns the index of the maximum value along an axis . <EoL>
<BoL> Returns the index of the minimum value along an axis . <EoL>
<BoL> Publicly accessible method for determining the current backend . <EoL>
<BoL> Batchwise dot product . <EoL>
<BoL> Turn a nD tensor into a 2D tensor with same 0th dimension . <EoL>
<BoL> Returns the value of more than one tensor variable . <EoL>
<BoL> Applies batch normalization on x given mean , var , beta and gamma . <EoL>
<BoL> Sets the values of many tensor variables at once . <EoL>
<BoL> Adds a bias vector to a tensor . <EoL>
<BoL> Binary crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Casts a tensor to a different dtype and returns it . <EoL>
<BoL> Cast a Numpy array to the default Keras float type . <EoL>
<BoL> Categorical crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Destroys the current TF graph and creates a new one . <EoL>
<BoL> Element-wise value clipping . <EoL>
<BoL> Concatenates a list of tensors alongside the specified axis . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Computes cos of x element-wise . <EoL>
<BoL> Returns the static number of elements in a variable or tensor . <EoL>
<BoL> Runs CTC loss algorithm on each batch element . <EoL>
<BoL> Decodes the output of a softmax . <EoL>
<BoL> Converts CTC labels from dense to sparse . <EoL>
<BoL> Multiplies 2 tensors ( and/or variables ) and returns a *tensor* . <EoL>
<BoL> Sets entries in ` x ` to zero at random , while scaling the entire tensor . <EoL>
<BoL> Returns the dtype of a Keras tensor or variable , as a string . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Returns the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Element-wise equality between two tensors . <EoL>
<BoL> Evaluates the value of a variable . <EoL>
<BoL> Element-wise exponential . <EoL>
<BoL> Adds a 1-sized dimension at index `` axis '' . <EoL>
<BoL> Instantiate an identity matrix and returns it . <EoL>
<BoL> Flatten a tensor . <EoL>
<BoL> Returns the default float type , as a string . <EoL>
<BoL> Reduce elems using fn to combine them from left to right . <EoL>
<BoL> Reduce elems using fn to combine them from right to left . <EoL>
<BoL> Instantiates a Keras function . <EoL>
<BoL> Retrieves the elements of indices ` indices ` in the tensor ` reference ` . <EoL>
<BoL> Returns the TF session to be used by the backend . <EoL>
<BoL> Associates a string prefix with an integer counter in a TensorFlow graph . <EoL>
<BoL> Returns the value of a variable . <EoL>
<BoL> Returns the gradients of ` loss ` w.r.t . ` variables ` . <EoL>
<BoL> Element-wise truth value of ( x > y ) . <EoL>
<BoL> Element-wise truth value of ( x > = y ) . <EoL>
<BoL> Segment-wise linear approximation of sigmoid . <EoL>
<BoL> Returns the default image data format convention . <EoL>
<BoL> Selects ` x ` in test phase , and ` alt ` otherwise . <EoL>
<BoL> Returns whether the ` targets ` are in the top ` k ` ` predictions ` . <EoL>
<BoL> Selects ` x ` in train phase , and ` alt ` otherwise . <EoL>
<BoL> Returns the shape of tensor or variable as a tuple of int or None entries . <EoL>
<BoL> Returns whether a tensor is a sparse tensor . <EoL>
<BoL> Normalizes a tensor wrt the L2 norm alongside the specified axis . <EoL>
<BoL> Returns the learning phase flag . <EoL>
<BoL> Element-wise truth value of ( x < y ) . <EoL>
<BoL> Element-wise truth value of ( x < = y ) . <EoL>
<BoL> Element-wise log . <EoL>
<BoL> Sets the manual variable initialization flag . <EoL>
<BoL> Map the function fn over the elements elems and return the outputs . <EoL>
<BoL> Maximum value in a tensor . <EoL>
<BoL> Element-wise maximum of two tensors . <EoL>
<BoL> Mean of a tensor , alongside the specified axis . <EoL>
<BoL> Minimum value in a tensor . <EoL>
<BoL> Element-wise minimum of two tensors . <EoL>
<BoL> Compute the moving average of a variable . <EoL>
<BoL> Start the scope block . <EoL>
<BoL> Initialize the context manager . <EoL>
<BoL> Returns the number of axes in a tensor , as an integer . <EoL>
<BoL> Computes mean and std for batch then apply batch_normalization on batch . <EoL>
<BoL> Element-wise inequality between two tensors . <EoL>
<BoL> Computes the one-hot representation of an integer tensor . <EoL>
<BoL> Instantiates an all-ones variable and returns it . <EoL>
<BoL> Instantiates an all-ones variable of the same shape as another tensor . <EoL>
<BoL> Permutes axes in a tensor . <EoL>
<BoL> Instantiates a placeholder tensor and returns it . <EoL>
<BoL> Element-wise exponentiation . <EoL>
<BoL> Prints ` message ` and the tensor value when evaluated . <EoL>
<BoL> Multiplies the values in a tensor , alongside the specified axis . <EoL>
<BoL> Returns a tensor with random binomial distribution of values . <EoL>
<BoL> Returns a tensor with normal distribution of values . <EoL>
<BoL> Returns a tensor with uniform distribution of values . <EoL>
<BoL> Instantiates a variable with values drawn from a uniform distribution . <EoL>
<BoL> Rectified linear unit . <EoL>
<BoL> Repeats a 2D tensor . <EoL>
<BoL> Repeats the elements of a tensor along an axis , like ` np.repeat ` . <EoL>
<BoL> Resets graph identifiers . <EoL>
<BoL> Reshapes a tensor to the specified shape . <EoL>
<BoL> Resizes the images contained in a 4D tensor . <EoL>
<BoL> Resizes the volume contained in a 5D tensor . <EoL>
<BoL> Reverse a tensor along the specified axes . <EoL>
<BoL> Element-wise rounding to the closest integer . <EoL>
<BoL> Sets the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Sets the default float type . <EoL>
<BoL> Sets the value of the image data format convention . <EoL>
<BoL> Sets the learning phase to a fixed value . <EoL>
<BoL> Sets the global TensorFlow session . <EoL>
<BoL> Sets the value of a variable , from a Numpy array . <EoL>
<BoL> Returns the symbolic shape of a tensor or variable . <EoL>
<BoL> Element-wise sigmoid . <EoL>
<BoL> Element-wise sign . <EoL>
<BoL> Computes sin of x element-wise . <EoL>
<BoL> Softmax of a tensor . <EoL>
<BoL> Softplus of a tensor . <EoL>
<BoL> Softsign of a tensor . <EoL>
<BoL> Categorical crossentropy with integer targets . <EoL>
<BoL> Pads the 2nd and 3rd dimensions of a 4D tensor . <EoL>
<BoL> Pads 5D tensor with zeros along the depth , height , width dimensions . <EoL>
<BoL> Element-wise square root . <EoL>
<BoL> Element-wise square . <EoL>
<BoL> Removes a 1-dimension from the tensor at index `` axis '' . <EoL>
<BoL> Stacks a list of rank ` R ` tensors into a rank ` R+1 ` tensor . <EoL>
<BoL> Standard deviation of a tensor , alongside the specified axis . <EoL>
<BoL> Returns ` variables ` but with zero gradient w.r.t . every other variable . <EoL>
<BoL> Sum of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Switches between two operations depending on a scalar value . <EoL>
<BoL> Element-wise tanh . <EoL>
<BoL> Pads the middle dimension of a 3D tensor . <EoL>
<BoL> Converts a sparse tensor into a dense tensor and returns it . <EoL>
<BoL> Transposes a tensor and returns it . <EoL>
<BoL> Returns a tensor with truncated random normal distribution of values . <EoL>
<BoL> Update the value of ` x ` by adding ` increment ` . <EoL>
<BoL> Update the value of ` x ` by subtracting ` decrement ` . <EoL>
<BoL> Variance of a tensor , alongside the specified axis . <EoL>
<BoL> Instantiates a variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable of the same shape as another tensor . <EoL>
<BoL> Resets wait counter and cooldown counter . <EoL>
<BoL> Sets file writer . <EoL>
<BoL> Defines histogram ops when histogram_freq > 0 . <EoL>
<BoL> Writes metrics out as custom scalar summaries . <EoL>
<BoL> Writes scalar summaries for metrics on every training batch . <EoL>
<BoL> Add histogram op to Model test_function callbacks , reset batch count . <EoL>
<BoL> Checks if summary ops should run next epoch , logs scalar summaries . <EoL>
<BoL> Checks if histogram summaries can be run . <EoL>
<BoL> Sets Keras model and creates summary ops . <EoL>
<BoL> Loads the Boston Housing dataset . <EoL>
<BoL> Loads CIFAR10 dataset . <EoL>
<BoL> Loads CIFAR100 dataset . <EoL>
<BoL> Loads the Fashion-MNIST dataset . <EoL>
<BoL> Retrieves the dictionary mapping word indices back to words . <EoL>
<BoL> Loads the MNIST dataset . <EoL>
<BoL> Retrieves the dictionary mapping word indices back to words . <EoL>
<BoL> Returns the configuration of the initializer as a JSON-serializable dict . <EoL>
<BoL> Add loss tensor ( s ) , potentially dependent on layer inputs . <EoL>
<BoL> Alias for ` add_weight ` . <EoL>
<BoL> Creates the variables of the layer . <EoL>
<BoL> Computes an output mask tensor . <EoL>
<BoL> Creates a layer from its config . <EoL>
<BoL> Returns the current weights of the layer . <EoL>
<BoL> Sets the weights of the layer , from Numpy arrays . <EoL>
<BoL> This is where the layer 's logic lives . <EoL>
<BoL> Computes the shape of the resultant of an elementwise operation . <EoL>
<BoL> Returns the config of the layer . <EoL>
<BoL> Returns the output of fused batch norm . <EoL>
<BoL> Returns the correction and update values for renorm.Updates a moving average and weight , returns the unbiased value.Updates the var and weight , returns their updated ratio . <EoL>
<BoL> ` Bidirectional.__call__ ` implements the same API as the wrapped ` RNN ` . <EoL>
<BoL> Calculates padding for 'causal ' option for 1-d conv layers . <EoL>
<BoL> Validate the state spec between the initial_state and the state_size . <EoL>
<BoL> Computes the output shape of the layer . <EoL>
<BoL> Find and replace a missing dimension in an output shape . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Finds non-specific dimensions in the static shapes . <EoL>
<BoL> Computes an output mask tensor for Embedding layer . <EoL>
<BoL> Functional interface to the ` Add ` layer . <EoL>
<BoL> Functional interface to the ` Average ` layer . <EoL>
<BoL> Functional interface to the ` Concatenate ` layer . <EoL>
<BoL> Functional interface to the ` Dot ` layer . <EoL>
<BoL> Functional interface to the ` Maximum ` layer . <EoL>
<BoL> Functional interface to the ` Minimum ` layer . <EoL>
<BoL> Functional interface to the ` Multiply ` layer . <EoL>
<BoL> Functional interface to the ` Subtract ` layer . <EoL>
<BoL> Logarithm of the hyperbolic cosine of the prediction error . <EoL>
<BoL> Clone any ` Model ` instance . <EoL>
<BoL> Loads a model saved via ` save_model ` .Handles custom object lookup . <EoL>
<BoL> Instantiates a Keras model from its config . <EoL>
<BoL> Parses a JSON model configuration file and returns a model instance . <EoL>
<BoL> Parses a yaml model configuration file and returns a model instance . <EoL>
<BoL> Saves a model to a HDF5 file . <EoL>
<BoL> Returns gradients of ` loss ` with respect to ` params ` . <EoL>
<BoL> Returns the current value of the weights of the optimizer . <EoL>
<BoL> Sets the weights of the optimizer , from Numpy arrays . <EoL>
<BoL> Inverse of the ` serialize ` function . <EoL>
<BoL> Retrieves a Keras Optimizer instance . <EoL>
<BoL> For python 2.x . <EoL>
<BoL> Applies a transformation to an image according to given parameters . <EoL>
<BoL> Generates random parameters for a transformation . <EoL>
<BoL> Applies a random transformation to an image . <EoL>
<BoL> Applies the normalization configuration to a batch of inputs . <EoL>
<BoL> For python 2.x . <EoL>
<BoL> Performs a brightness shift . <EoL>
<BoL> Performs a channel shift . <EoL>
<BoL> Converts a 3D Numpy array to a PIL Image instance . <EoL>
<BoL> Converts a PIL Image instance to a Numpy array . <EoL>
<BoL> Performs a random brightness shift . <EoL>
<BoL> Performs a random channel shift . <EoL>
<BoL> Creates an infinite generator that iterate over the Sequence . <EoL>
<BoL> Returns the TimeseriesGenerator configuration as Python dictionary . <EoL>
<BoL> Method called at the end of every epoch . <EoL>
<BoL> Returns a JSON string containing the timeseries generator configuration . To load a generator from a JSON string , use ` keras.preprocessing.sequence.timeseries_generator_from_json ( json_string ) ` . <EoL>
<BoL> Generates a word rank-based probabilistic sampling table . <EoL>
<BoL> Updates internal vocabulary based on a list of sequences . <EoL>
<BoL> Updates internal vocabulary based on a list of texts . <EoL>
<BoL> Returns the tokenizer configuration as Python dictionary . The word count dictionaries used by the tokenizer get serialized into plain JSON , so that the configuration can be read by other projects . <EoL>
<BoL> Converts a list of sequences into a Numpy matrix . <EoL>
<BoL> Transforms each sequence into a list of text . <EoL>
<BoL> Transforms each sequence in ` sequences ` to a list of texts ( strings ) . <EoL>
<BoL> Convert a list of texts to a Numpy matrix . <EoL>
<BoL> Transforms each text in texts to a sequence of integers . <EoL>
<BoL> Transforms each text in ` texts ` to a sequence of integers . <EoL>
<BoL> Returns a JSON string containing the tokenizer configuration . To load a tokenizer from a JSON string , use ` keras.preprocessing.text.tokenizer_from_json ( json_string ) ` . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Kicks off threads which add data from the generator into the queue . <EoL>
<BoL> Stops running threads and wait for them to exit , if necessary . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Send current Sequence to all workers . <EoL>
<BoL> Wait for the queue to be empty . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Start the handler 's workers . <EoL>
<BoL> Stops running threads and wait for them to exit , if necessary . <EoL>
<BoL> Updates the progress bar . <EoL>
<BoL> Gets batch at position ` index ` . <EoL>
<BoL> Number of batch in the Sequence . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Starts the handler 's workers . <EoL>
<BoL> Stop running threads and wait for them to exit , if necessary . <EoL>
<BoL> Converts all convolution kernels in a model from Theano to TensorFlow . <EoL>
<BoL> Provides a scope that changes to ` _GLOBAL_CUSTOM_OBJECTS ` can not escape . <EoL>
<BoL> Retrieves a live reference to the global dictionary of custom objects . <EoL>
<BoL> Returns the list of input tensors necessary to compute ` tensor ` . <EoL>
<BoL> Replicates a model on different GPUs.Slice an array into ` parts ` slices and return slice ` i ` . <EoL>
<BoL> Normalizes a Numpy array . <EoL>
<BoL> Converts a class vector ( integers ) to binary class matrix . <EoL>
<BoL> Checks for user typos in ` params ` . <EoL>
<BoL> Filters ` sk_params ` and returns those in ` fn ` 's arguments . <EoL>
<BoL> Constructs a new model with ` build_fn ` & fit the model to ` ( x , y ) ` . <EoL>
<BoL> Gets parameters for this estimator . <EoL>
<BoL> Returns the class predictions for the given test data . <EoL>
<BoL> Returns class probability estimates for the given test data . <EoL>
<BoL> Returns the mean accuracy on the given test data and labels . <EoL>
<BoL> Sets the parameters of this estimator . <EoL>
<BoL> Constructs a new model with ` build_fn ` & fit the model to ` ( x , y ) ` . <EoL>
<BoL> Returns predictions for the given test data . <EoL>
<BoL> Returns the mean loss on the given test data and labels . <EoL>
<BoL> Flattens an input tensor while preserving the batch axis ( axis 0 ) . <EoL>
<BoL> Computes \\ ( ln ( |Beta ( x ) | ) \\ ) , reducing along the last dimension . <EoL>
<BoL> Computes the log of the absolute value of ` Gamma ( x ) ` element-wise . <EoL>
<BoL> Generates values in an interval . <EoL>
<BoL> Private default implementation of _assert_non_singular . <EoL>
<BoL> Default implementation of _assert_positive_definite . <EoL>
<BoL> Check that arg.dtype == self.dtype . <EoL>
<BoL> Generic and often inefficient implementation . Override often . <EoL>
<BoL> Return the maximum condition number that we consider nonsingular . <EoL>
<BoL> Helper function to standardize op scope . <EoL>
<BoL> Default implementation of _solve . <EoL>
<BoL> Default implementation of _solvevec . <EoL>
<BoL> Generic and often inefficient implementation . Override often . <EoL>
<BoL> Add matrix represented by this operator to ` x ` . Equivalent to ` A + x ` . <EoL>
<BoL> Returns an ` Op ` that asserts this operator is non singular . <EoL>
<BoL> Returns an ` Op ` that asserts this operator is positive definite . <EoL>
<BoL> Returns an ` Op ` that asserts this operator is self-adjoint . <EoL>
<BoL> Shape of batch dimensions of this operator , determined at runtime . <EoL>
<BoL> Determinant for every batch member . <EoL>
<BoL> Efficiently get the [ batch ] diagonal part of this operator . <EoL>
<BoL> Dimension ( in the sense of vector spaces ) of the domain of this operator . <EoL>
<BoL> Log absolute value of determinant for every batch member . <EoL>
<BoL> Transform [ batch ] matrix ` x ` with left multiplication : ` x -- > Ax ` . <EoL>
<BoL> Transform [ batch ] vector ` x ` with left multiplication : ` x -- > Ax ` . <EoL>
<BoL> Dimension ( in the sense of vector spaces ) of the range of this operator . <EoL>
<BoL> Shape of this ` LinearOperator ` , determined at runtime . <EoL>
<BoL> Solve ( exact or approx ) ` R ` ( batch ) systems of equations : ` A X = rhs ` . <EoL>
<BoL> Solve single equation with best effort : ` A X = rhs ` . <EoL>
<BoL> Rank ( in the sense of tensors ) of matrix corresponding to this operator . <EoL>
<BoL> Return a dense ( batch ) matrix representing this operator . <EoL>
<BoL> Trace of the linear operator , equal to sum of ` self.diag_part ( ) ` . <EoL>
<BoL> Split ` x ` into blocks matching ` operators ` 's ` domain_dimension ` . <EoL>
<BoL> Broadcast batch dims of batch matrix ` x ` and spectrum . <EoL>
<BoL> Static check of spectrum . Then return ` Tensor ` version . <EoL>
<BoL> FFT along the last self.block_depth dimensions of x . <EoL>
<BoL> IFFT along the last self.block_depth dimensions of x . <EoL>
<BoL> Flatten the block dimensions then reshape to a batch matrix . <EoL>
<BoL> Shape batch matrix to batch vector , then blockify trailing dimensions . <EoL>
<BoL> Returns an ` Op ` that asserts this operator has Hermitian spectrum . <EoL>
<BoL> Shape of the block dimensions of ` self.spectrum ` . <EoL>
<BoL> Convolution kernel corresponding to ` self.spectrum ` . <EoL>
<BoL> Static check of diag . <EoL>
<BoL> Static check of the ` matrix ` argument . <EoL>
<BoL> Static check of init arg ` batch_shape ` , possibly add asserts . <EoL>
<BoL> Static check of init arg ` num_rows ` , possibly add asserts . <EoL>
<BoL> Minimum of domain/range dimension , if statically available , else None . <EoL>
<BoL> Minimum of domain/range dimension , as a tensor . <EoL>
<BoL> Returns the diagonal of this operator as all ones . <EoL>
<BoL> Return ' x ' , possibly after broadcasting the leading dimensions . <EoL>
<BoL> Add matrix represented by this operator to ` mat ` . Equiv to ` I + mat ` . <EoL>
<BoL> Static check that shapes are compatible . <EoL>
<BoL> Set attributes self._diag_update and self._diag_operator . <EoL>
<BoL> Static check of the ` tril ` argument . <EoL>
<BoL> Static check of init arg ` num_rows ` , possibly add asserts . <EoL>
<BoL> Add matrix represented by this operator to ` mat ` . Equiv to ` I + mat ` . <EoL>
<BoL> Static check of init arg ` batch_shape ` , possibly add asserts . <EoL>
<BoL> Static check of init arg ` num_rows ` , possibly add asserts . <EoL>
<BoL> Minimum of domain/range dimension , if statically available , else None . <EoL>
<BoL> Minimum of domain/range dimension , as a tensor . <EoL>
<BoL> Return ' x ' , possibly after broadcasting the leading dimensions . <EoL>
<BoL> Returns the diagonal of this operator as all zeros . <EoL>
<BoL> Add matrix represented by this operator to ` mat ` . Equiv to ` I + mat ` . <EoL>
<BoL> Transposes the last two dimensions of and conjugates tensor ` matrix ` . <EoL>
<BoL> Copy a tensor setting everything outside a central band in each innermost matrix <EoL>
<BoL> Computes the determinant of one or more square matrices . <EoL>
<BoL> Returns a batched diagonal tensor with a given batched diagonal values . <EoL>
<BoL> Returns the batched diagonal part of a batched tensor . <EoL>
<BoL> Computes the eigen decomposition of a batch of self-adjoint matrices . <EoL>
<BoL> Computes the eigenvalues of one or more self-adjoint matrices . <EoL>
<BoL> Computes the matrix exponential of one or more square matrices . <EoL>
<BoL> Computes the inverse of one or more square invertible matrices or their <EoL>
<BoL> Normalizes along dimension ` axis ` using an L2 norm . <EoL>
<BoL> Computes log of the determinant of a hermitian positive definite matrix . <EoL>
<BoL> Computes the matrix logarithm of one or more square matrices : <EoL>
<BoL> Solves one or more linear least-squares problems.Determines whether to use the composite or specialized CPU kernel.Computes ( A^H*A + l2_regularizer ) ^ { -1 } * A^H * rhs.Computes A^H * ( A*A^H + l2_regularizer ) ^ { -1 } * rhs.Composite implementation of matrix_solve_ls that supports GPU . <EoL>
<BoL> Computes the QR decompositions of one or more matrices . <EoL>
<BoL> Returns a batched matrix tensor with new batched diagonal values . <EoL>
<BoL> Computes the sign and the log of the absolute value of the determinant of <EoL>
<BoL> Solves systems of linear equations . <EoL>
<BoL> Computes the singular value decompositions of one or more matrices . <EoL>
<BoL> Compute the trace of a tensor ` x ` . <EoL>
<BoL> Transposes last two dimensions of tensor ` a ` . <EoL>
<BoL> Solves systems of linear equations with upper or lower triangular matrices by <EoL>
<BoL> Loads a TensorFlow plugin , containing file system implementation . <EoL>
<BoL> Loads a TensorFlow plugin . <EoL>
<BoL> Loads a TensorFlow plugin , containing custom ops and kernels . <EoL>
<BoL> Returns local variables . <EoL>
<BoL> Computes natural logarithm of x element-wise . <EoL>
<BoL> Computes natural logarithm of ( 1 + x ) element-wise . <EoL>
<BoL> Computes log sigmoid of ` x ` element-wise . <EoL>
<BoL> Return how much logging output will be produced . <EoL>
<BoL> Log 'msg % args ' at level 'level ' once per ' n ' times . <EoL>
<BoL> Log 'msg % args ' at level 'level ' only first ' n ' times . <EoL>
<BoL> Log 'msg % args ' at level 'level ' only if condition is fulfilled . <EoL>
<BoL> Sets the threshold for what messages will be logged . <EoL>
<BoL> Returns the truth value of x AND y element-wise . <EoL>
<BoL> Returns the truth value of x OR y element-wise . <EoL>
<BoL> x ^ y = ( x | y ) & ~ ( x & y ) . <EoL>
<BoL> Adds a externally defined loss to the collection of losses . <EoL>
<BoL> Gets the list of losses from the loss_collection . <EoL>
<BoL> Gets the total regularization loss . <EoL>
<BoL> Gets the list of regularization losses . <EoL>
<BoL> Returns a tensor whose value represents the total loss . <EoL>
<BoL> Create a numpy ndarray from a tensor . <EoL>
<BoL> Create a TensorProto.Argument must be a dense tensor : % s <EoL>
<BoL> Reshapes a tensor . <EoL>
<BoL> Reverses specific dimensions of a tensor . <EoL>
<BoL> Scatter ` updates ` into a new tensor according to ` indices ` . <EoL>
<BoL> SpaceToBatch for N-D tensors of type T . <EoL>
<BoL> Constructs a tensor by tiling a given tensor . <EoL>
<BoL> The loop body of map_fn . <EoL>
<BoL> Computes the Bessel i0 function of ` x ` element-wise . <EoL>
<BoL> Computes the Bessel i0e function of ` x ` element-wise . <EoL>
<BoL> Computes the Bessel i1 function of ` x ` element-wise . <EoL>
<BoL> Computes the Bessel i1e function of ` x ` element-wise . <EoL>
<BoL> Says whether the targets are in the top ` K ` predictions . <EoL>
<BoL> Computes log softmax activations . <EoL>
<BoL> Returns the max of x and y ( i.e . x > y ? x : y ) element-wise . <EoL>
<BoL> Returns the min of x and y ( i.e . x < y ? x : y ) element-wise . <EoL>
<BoL> Computes numerical negative value element-wise . <EoL>
<BoL> Returns the truth value of ( x ! = y ) element-wise . <EoL>
<BoL> Compute the polygamma function \\ ( \psi^ { ( n ) } ( x ) \\ ) . <EoL>
<BoL> Computes the elementwise value of a polynomial . <EoL>
<BoL> Computes the power of one value to another . <EoL>
<BoL> Returns the real part of a complex ( or real ) tensor . <EoL>
<BoL> Computes the reciprocal of x element-wise . <EoL>
<BoL> Returns element-wise integer closest to x . <EoL>
<BoL> Rounds the values of a tensor to the nearest integer , element-wise . <EoL>
<BoL> Computes reciprocal of square root of x element-wise . <EoL>
<BoL> Multiplies a scalar times a ` Tensor ` or ` IndexedSlices ` object . <EoL>
<BoL> Computes the maximum along segments of a tensor . <EoL>
<BoL> Computes the mean along segments of a tensor . <EoL>
<BoL> Computes the minimum along segments of a tensor . <EoL>
<BoL> Computes the product along segments of a tensor . <EoL>
<BoL> Computes the sum along segments of a tensor . <EoL>
<BoL> Computes sigmoid of ` x ` element-wise . <EoL>
<BoL> Returns an element-wise indication of the sign of a number . <EoL>
<BoL> Computes sin of x element-wise . <EoL>
<BoL> Computes hyperbolic sine of x element-wise . <EoL>
<BoL> Computes softmax activations . <EoL>
<BoL> Computes softplus : ` log ( exp ( features ) + 1 ) ` . <EoL>
<BoL> Computes softsign : ` features / ( abs ( features ) + 1 ) ` . <EoL>
<BoL> Computes square root of x element-wise . <EoL>
<BoL> Computes square of x element-wise . <EoL>
<BoL> Returns ( x - y ) ( x - y ) element-wise . <EoL>
<BoL> Computes tan of x element-wise . <EoL>
<BoL> Computes hyperbolic tangent of ` x ` element-wise . <EoL>
<BoL> Finds values and indices of the ` k ` largest entries for the last dimension . <EoL>
<BoL> Divides x / y elementwise ( using Python 3 division operator semantics ) . <EoL>
<BoL> Computes the maximum along segments of a tensor . <EoL>
<BoL> Computes the mean along segments of a tensor . <EoL>
<BoL> Computes the minimum along segments of a tensor . <EoL>
<BoL> Computes the product along segments of a tensor . <EoL>
<BoL> Computes the sum along segments of a tensor divided by the sqrt ( N ) . <EoL>
<BoL> Computes the sum along segments of a tensor . <EoL>
<BoL> Returns 0 if x == 0 , and x / y otherwise , elementwise . <EoL>
<BoL> Returns 0 if x == 0 , and x * log ( y ) otherwise , elementwise . <EoL>
<BoL> Returns the fraction of zeros in ` value ` . <EoL>
<BoL> Compute the Hurwitz zeta function \\ ( \zeta ( x , q ) \\ ) . <EoL>
<BoL> Broadcasts parameters for evaluation on an N-D grid . <EoL>
<BoL> Interpolation formula inspired by section 4 of Davis & Goadrich 2006.Computes the roc-auc or pr-auc based on confusion counts . <EoL>
<BoL> Compute the mean intersection-over-union via the confusion matrix . <EoL>
<BoL> Computes the specificity at the given sensitivity . <EoL>
<BoL> Partitioner that partitions list for a variable of given shape and type . <EoL>
<BoL> Returns all variables in the MODEL_VARIABLES collection . <EoL>
<BoL> Returns all variables that maintain their moving averages . <EoL>
<BoL> Draws samples from a multinomial distribution . <EoL>
<BoL> Atrous convolution ( a.k.a . convolution with holes or dilated convolution ) . <EoL>
<BoL> Performs the average pooling on the input . <EoL>
<BoL> Performs 3D average pooling on the input . <EoL>
<BoL> Adds ` bias ` to ` value ` . <EoL>
<BoL> Computes a 2-D convolution given 4-D ` input ` and ` filter ` tensors . <EoL>
<BoL> Computes the gradients of convolution with respect to the filter . <EoL>
<BoL> Computes the gradients of convolution with respect to the input . <EoL>
<BoL> Computes a 3-D convolution given 5-D ` input ` and ` filter ` tensors . <EoL>
<BoL> Computes the gradients of 3-D convolution with respect to the filter . <EoL>
<BoL> Computes Concatenated ReLU . <EoL>
<BoL> Performs greedy decoding on the logits given in input ( best path ) . <EoL>
<BoL> Computes a 2-D depthwise convolution given 4-D ` input ` and ` filter ` tensors . <EoL>
<BoL> Computes the gradients of depthwise convolution with respect to the filter . <EoL>
<BoL> Computes the gradients of depthwise convolution with respect to the input . <EoL>
<BoL> Computes the grayscale dilation of 4-D ` input ` and 3-D ` filter ` tensors . <EoL>
<BoL> Computes dropout . <EoL>
<BoL> Computes exponential linear : ` exp ( features ) - 1 ` if < 0 , ` features ` otherwise . <EoL>
<BoL> Computes the grayscale erosion of 4-D ` value ` and 3-D ` kernel ` tensors . <EoL>
<BoL> Performs fractional average pooling on the input . <EoL>
<BoL> Performs fractional max pooling on the input . <EoL>
<BoL> L2 Loss . <EoL>
<BoL> Compute the Leaky ReLU activation function . <EoL>
<BoL> Local Response Normalization . <EoL>
<BoL> Computes log Poisson loss given ` log_input ` . <EoL>
<BoL> Performs the max pooling on the input . <EoL>
<BoL> Performs 3D max pooling on the input . <EoL>
<BoL> Performs max pooling on the input and outputs both max values and indices . <EoL>
<BoL> Calculate the mean and variance of based on the sufficient statistics . <EoL>
<BoL> Produces the average pool of the input tensor for quantized types . <EoL>
<BoL> Computes a 2D convolution given quantized 4D input and filter tensors . <EoL>
<BoL> Produces the max pool of the input tensor for quantized types . <EoL>
<BoL> Computes Quantized Rectified Linear X : ` min ( max ( features , 0 ) , max_value ) ` <EoL>
<BoL> Computes rectified linear : ` max ( features , 0 ) ` . <EoL>
<BoL> Computes Rectified Linear 6 : ` min ( max ( features , 0 ) , 6 ) ` . <EoL>
<BoL> Computes Relu ( x * weight + biases ) . <EoL>
<BoL> Run this RNN cell on inputs , starting from the given state . <EoL>
<BoL> Determines op naming for the Layer . <EoL>
<BoL> Long short-term memory cell ( LSTM ) . <EoL>
<BoL> Return zero-filled state tensor ( s ) . <EoL>
<BoL> Most basic RNN : output = new_state = act ( W * input + U * state + B ) . <EoL>
<BoL> Run the cell on specified device . <EoL>
<BoL> Construct a ` DeviceWrapper ` for ` cell ` with device ` device ` . <EoL>
<BoL> Run the cell with the declared dropouts . <EoL>
<BoL> Run this RNN cell on inputs , starting from the given state . <EoL>
<BoL> Create a RNN cell composed sequentially of a number of RNNCells . <EoL>
<BoL> Run this multi-layer cell on inputs , starting from state . <EoL>
<BoL> Run the cell and then apply the residual_fn on its inputs to its outputs . <EoL>
<BoL> Constructs a ` ResidualWrapper ` for ` cell ` . <EoL>
<BoL> Computes scaled exponential linear : ` scale * alpha * ( exp ( features ) - 1 ) ` <EoL>
<BoL> Calculate the sufficient statistics for the mean and variance of ` x ` . <EoL>
<BoL> Computes a weighted cross entropy . <EoL>
<BoL> Returns the frequency-weighted mean and variance of ` x ` . <EoL>
<BoL> Computes matmul ( x , weights ) + biases . <EoL>
<BoL> Does nothing . Only useful as a placeholder for control edges . <EoL>
<BoL> Use this function to prevent regularization of variables . <EoL>
<BoL> Creates a tensor with all elements set to 1 . <EoL>
<BoL> Creates a tensor with all elements set to 1 . <EoL>
<BoL> DEPRECATED . Same as name_scope above , just different argument order . <EoL>
<BoL> Pads a tensor . <EoL>
<BoL> Stacks a list of rank- ` R ` tensors into one rank- ` ( R+1 ) ` tensor in parallel . <EoL>
<BoL> Inserts a placeholder for a tensor that will be always fed . <EoL>
<BoL> A placeholder op that passes through ` input ` when its output is not fed . <EoL>
<BoL> Print the specified inputs . <EoL>
<BoL> Constructor . <EoL>
<BoL> Whether only account the statistics of displayed profiler nodes . <EoL>
<BoL> Build a profiling option . <EoL>
<BoL> Options used to profile trainable variable parameters . <EoL>
<BoL> Selectively counting statistics based on node types . <EoL>
<BoL> Do not generate side-effect outputs . <EoL>
<BoL> Print the result to a file . <EoL>
<BoL> Set the maximum depth of display . <EoL>
<BoL> Only show profiler nodes holding no less than 'min_params ' parameters . <EoL>
<BoL> Generate a pprof profile gzip file . <EoL>
<BoL> Print the result to stdout . <EoL>
<BoL> Which profile step to use for profiling . <EoL>
<BoL> Generate a timeline json file . <EoL>
<BoL> Constructor . <EoL>
<BoL> Writes the profile to a file . <EoL>
<BoL> Add statistics of a step . <EoL>
<BoL> Automatically detect problems and generate reports . <EoL>
<BoL> Profile the statistics of graph nodes , organized by dataflow graph . <EoL>
<BoL> Profile the statistics of graph nodes , organized by name scope . <EoL>
<BoL> Profile the statistics of the Operation types ( e.g . MatMul , Conv2D ) . <EoL>
<BoL> Profile the statistics of the Python codes . <EoL>
<BoL> Serialize the ProfileProto to a binary string . <EoL>
<BoL> Auto profile and advise . <EoL>
<BoL> Log provided 'op_log ' , and add additional model information below . <EoL>
<BoL> Wraps a python function and uses it as a TensorFlow op . <EoL>
<BoL> Concatenates quantized tensors along one dimension . <EoL>
<BoL> Draws ` shape ` samples from each of the given Poisson distribution ( s ) . <EoL>
<BoL> Sets the graph-level random seed . <EoL>
<BoL> Randomly shuffles a tensor along its first dimension . <EoL>
<BoL> Creates a sequence of numbers . <EoL>
<BoL> Returns the rank of a tensor . <EoL>
<BoL> Returns x / y element-wise for real types . <EoL>
<BoL> Replaces the match of pattern in input with rewrite . <EoL>
<BoL> Clears the default graph stack and resets the global default graph . <EoL>
<BoL> Get a direct path to the data files colocated with the script . <EoL>
<BoL> Get the path to the specified file in the data dependencies . <EoL>
<BoL> Get a root directory containing all the data attributes in the build rule . <EoL>
<BoL> Load the resource at given path , where path is relative to tensorflow/ . <EoL>
<BoL> Readahead files not implemented ; simply returns given path . <EoL>
<BoL> Add train op to the SavedModel . <EoL>
<BoL> Adds main op to the SavedModel . <EoL>
<BoL> Creates a sharded saver if one does not already exist . <EoL>
<BoL> Saves asset to the meta graph and writes asset files to disk . <EoL>
<BoL> Tags the meta graph def and adds it to the SavedModel . <EoL>
<BoL> Validates the ` SignatureDef ` entries in the signature def map . <EoL>
<BoL> Validates the ` TensorInfo ` proto . <EoL>
<BoL> Writes a ` SavedModel ` protocol buffer to disk . <EoL>
<BoL> Utility function to build a SignatureDef protocol buffer . <EoL>
<BoL> Utility function to build TensorInfo proto . <EoL>
<BoL> Creates classification signature from given examples and predictions . <EoL>
<BoL> Returns the Tensor or SparseTensor described by a TensorInfo proto . <EoL>
<BoL> Determine whether a SignatureDef can be served by TensorFlow Serving . <EoL>
<BoL> Loads the model from a SavedModel as specified by tags . <EoL>
<BoL> Checks whether the provided export directory could contain a SavedModel . <EoL>
<BoL> Returns a main op to init variables and tables . <EoL>
<BoL> Returns a main op to init variables , tables and restore the graph . <EoL>
<BoL> Creates prediction signature from given inputs and outputs . <EoL>
<BoL> Creates regression signature from given examples and predictions . <EoL>
<BoL> Convenience function to build a SavedModel suitable for serving . <EoL>
<BoL> The loop body of scan . <EoL>
<BoL> Divides a variable reference by sparse updates . <EoL>
<BoL> Reduces sparse updates into a variable reference using the ` max ` operation . <EoL>
<BoL> Reduces sparse updates into a variable reference using the ` min ` operation . <EoL>
<BoL> Multiplies sparse updates into a variable reference . <EoL>
<BoL> Applies sparse addition to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse subtraction to individual values or slices in a Variable . <EoL>
<BoL> Applies sparse ` updates ` to individual values or slices in a Variable . <EoL>
<BoL> Subtracts sparse updates to a variable reference . <EoL>
<BoL> Returns a mask tensor representing the first N positions of each cell . <EoL>
<BoL> Transforms a Tensor into a serialized TensorProto proto . <EoL>
<BoL> Compute set difference of elements in last dimension of ` a ` and ` b ` . <EoL>
<BoL> Compute set intersection of elements in last dimension of ` a ` and ` b ` . <EoL>
<BoL> Compute number of unique elements along last dimension of ` a ` . <EoL>
<BoL> Compute set union of elements in last dimension of ` a ` and ` b ` . <EoL>
<BoL> Returns the shape of a tensor . <EoL>
<BoL> Returns shape of tensors . <EoL>
<BoL> Returns the size of a tensor . <EoL>
<BoL> Extracts a slice from a tensor . <EoL>
<BoL> Adds two tensors , at least one of each is a ` SparseTensor ` . <EoL>
<BoL> Generates sparse cross from a list of sparse and dense tensors . <EoL>
<BoL> Generates hashed sparse cross from a list of sparse and dense tensors . <EoL>
<BoL> Inserts a dimension of 1 into a tensor 's shape . <EoL>
<BoL> Fills empty rows in the input 2-D ` SparseTensor ` with a default value . <EoL>
<BoL> Masks elements of ` IndexedSlices ` . <EoL>
<BoL> Returns the element-wise max of two SparseTensors . <EoL>
<BoL> Returns the element-wise min of two SparseTensors . <EoL>
<BoL> Inserts a placeholder for a sparse tensor that will be always fed . <EoL>
<BoL> Reorders a ` SparseTensor ` into the canonical , row-major ordering . <EoL>
<BoL> Resets the shape of a ` SparseTensor ` with indices and values unchanged . <EoL>
<BoL> Reshapes a ` SparseTensor ` to represent values in a new dense shape . <EoL>
<BoL> Retains specified non-empty values within a ` SparseTensor ` . <EoL>
<BoL> Slice a ` SparseTensor ` based on the ` start ` and ` size . <EoL>
<BoL> Applies softmax to a batched N-D ` SparseTensor ` . <EoL>
<BoL> Converts a ` SparseTensor ` of ids into a dense bool indicator tensor . <EoL>
<BoL> Transposes a ` SparseTensor ` <EoL>
<BoL> Multiply matrix `` a '' by matrix `` b '' . <EoL>
<BoL> Computes the 1D [ Discrete Cosine Transform ( DCT ) ] [ dct ] of ` input ` . <EoL>
<BoL> Computes the 1D [ Inverse Discrete Cosine Transform ( DCT ) ] [ idct ] of ` input ` . <EoL>
<BoL> Splits a tensor into sub tensors . <EoL>
<BoL> Removes dimensions of size 1 from the shape of a tensor . <EoL>
<BoL> Stacks a list of rank- ` R ` tensors into one rank- ` ( R+1 ) ` tensor . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Closure that holds all the arguments to create an assignment . <EoL>
<BoL> Joins the strings in the given list of string tensors into one tensor ; <EoL>
<BoL> Split elements of ` source ` based on ` delimiter ` into a ` SparseTensor ` . <EoL>
<BoL> Strip leading and trailing whitespaces from the Tensor . <EoL>
<BoL> Converts each string in the input Tensor to its hash mod by a number of buckets . <EoL>
<BoL> Converts each string in the input Tensor to its hash mod by a number of buckets . <EoL>
<BoL> Converts each string in the input Tensor to its hash mod by a number of buckets . <EoL>
<BoL> Converts each string in the input Tensor to the specified numeric type . <EoL>
<BoL> Formats a string template using a list of tensors . <EoL>
<BoL> Match elements of ` input ` with regex ` pattern ` . <EoL>
<BoL> Split elements of ` source ` based on ` sep ` into a ` SparseTensor ` . <EoL>
<BoL> Return substrings from ` Tensor ` of strings . <EoL>
<BoL> Determine the script codes of a given tensor of Unicode integer code points . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Make usable with `` with '' statement . <EoL>
<BoL> Adds an event to the event file . <EoL>
<BoL> Adds a ` Graph ` to the event file . <EoL>
<BoL> Adds a ` MetaGraphDef ` to the event file . <EoL>
<BoL> Adds a metadata information for a single session.run ( ) call . <EoL>
<BoL> Adds a ` SessionLog ` protocol buffer to the event file . <EoL>
<BoL> Adds a ` Summary ` protocol buffer to the event file . <EoL>
<BoL> Flushes the event file to disk and close the file . <EoL>
<BoL> Flushes the event file to disk . <EoL>
<BoL> Returns the directory where event file will be written . <EoL>
<BoL> Reopens the EventFileWriter . <EoL>
<BoL> Clear cached summary writers . Currently only used for unit tests . <EoL>
<BoL> Returns the FileWriter for the specified directory . <EoL>
<BoL> Given a TensorSummary node_def , retrieve its SummaryDescription . <EoL>
<BoL> Outputs a ` Summary ` protocol buffer with images . <EoL>
<BoL> Merges all summaries collected in the default graph . <EoL>
<BoL> Outputs a ` Summary ` protocol buffer containing a single scalar value . <EoL>
<BoL> Summarizes textual data . <EoL>
<BoL> Get the compilation flags for custom operators . <EoL>
<BoL> Get the directory containing the TensorFlow C++ header files . <EoL>
<BoL> Get the directory containing the TensorFlow framework library . <EoL>
<BoL> Get the link flags for custom operators . <EoL>
<BoL> Returns full name of class and method calling report_benchmark . <EoL>
<BoL> Undoes all SmartSet ( ) & Set ( ) calls , restoring original definitions . <EoL>
<BoL> In parent , replace child_name 's old definition with new_child . <EoL>
<BoL> Replace obj.attr_name with new_attr . <EoL>
<BoL> Reverses SmartSet ( ) calls , restoring things to original definitions . <EoL>
<BoL> Reverses Set ( ) calls , restoring things to their original definitions . <EoL>
<BoL> Do not rely on the destructor to undo your stubs . <EoL>
<BoL> Asserts that a and b are the same proto . <EoL>
<BoL> Set the session and its graph to global default and constrain devices . <EoL>
<BoL> See session ( ) for details.Returns a config for sessions . <EoL>
<BoL> Generate a summary of ndarray subscripts as a list of str . <EoL>
<BoL> Asserts that two structures of numpy arrays or Tensors , have near values . <EoL>
<BoL> Asserts that two numpy arrays or Tensors have the same values . <EoL>
<BoL> Assert element values are all greater than a target value . <EoL>
<BoL> Assert element values are all greater than a target value . <EoL>
<BoL> Assert that elements of a Tensor are all in a given closed set . <EoL>
<BoL> Assert element values are all greater than a target value . <EoL>
<BoL> Assert element values are all greater than a target value . <EoL>
<BoL> Asserts that two float arrays are near each other . <EoL>
<BoL> Assert ndarray data type is equal to expected . <EoL>
<BoL> Asserts that the two given devices are the same . <EoL>
<BoL> Asserts that two numpy arrays have near values . <EoL>
<BoL> Asserts that two floats are near each other . <EoL>
<BoL> Assert that two numpy arrays , or or Tensors , do not have near values . <EoL>
<BoL> Asserts that message is same as parsed expected_message_ascii . <EoL>
<BoL> Asserts that a Numpy ndarray and a TensorFlow tensor have the same shape . <EoL>
<BoL> Assert that actual.startswith ( expected_start ) is True . <EoL>
<BoL> A context manager that captures the writes to a given stream . <EoL>
<BoL> Returns a Thread wrapper that asserts 'target ' completes successfully . <EoL>
<BoL> Evaluates tensors and returns numpy values . <EoL>
<BoL> Returns a unique temporary directory for the test to use . <EoL>
<BoL> Returns a TensorFlow Session for use in executing tests . <EoL>
<BoL> Asserts that two ` GraphDef ` s are ( mostly ) the same . <EoL>
<BoL> Returns a temporary directory for use during tests . <EoL>
<BoL> Returns the name of a GPU device if available or the empty string . <EoL>
<BoL> Returns whether TensorFlow was built with CUDA ( GPU ) support . <EoL>
<BoL> Returns whether TensorFlow can access a GPU . <EoL>
<BoL> Runs all unit tests . <EoL>
<BoL> Creates an absolute test srcdir path given a relative path . <EoL>
<BoL> Provides the time since epoch in seconds . <EoL>
<BoL> Casts a tensor to type ` bfloat16 ` . <EoL>
<BoL> Casts a tensor to type ` complex128 ` . <EoL>
<BoL> Casts a tensor to type ` complex64 ` . <EoL>
<BoL> Casts a tensor to type ` float64 ` . <EoL>
<BoL> Casts a tensor to type ` float32 ` . <EoL>
<BoL> Casts a tensor to type ` int32 ` . <EoL>
<BoL> Casts a tensor to type ` int64 ` . <EoL>
<BoL> Add ops to apply sparse gradients to ` var ` , with repeated sparse indices . <EoL>
<BoL> Asserts tensors are all valid types ( see ` _valid_dtypes ` ) . <EoL>
<BoL> Call the function if param is callable . <EoL>
<BoL> Add an extra variable , not associated with a slot . <EoL>
<BoL> Apply gradients to a replica variable . <EoL>
<BoL> Do what is needed to finish the update . <EoL>
<BoL> Find or create a slot for a variable . <EoL>
<BoL> From Checkpointable . Find a non-slot variable in the current graph . <EoL>
<BoL> Additional variables created by the ` Optimizer ` . <EoL>
<BoL> Add ops to apply sparse gradients to ` handle ` , with repeated indices . <EoL>
<BoL> Restore a newly created slot variable 's value . <EoL>
<BoL> Returns a dict for caching slots created under the given name . <EoL>
<BoL> Valid types for loss , variables and gradients . <EoL>
<BoL> Find or create a slot initialized with 0.0 . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Return a slot named ` name ` created for ` var ` by the Optimizer . <EoL>
<BoL> Return a list of the names of slots created by the ` Optimizer ` . <EoL>
<BoL> A list of variables which encode the current state of ` Optimizer ` . <EoL>
<BoL> Group objects into a training checkpoint . <EoL>
<BoL> Support self.foo = checkpointable syntax . <EoL>
<BoL> Create a save counter if it does not yet exist . <EoL>
<BoL> Override to allow CheckpointableBase to disable dependency tracking . <EoL>
<BoL> Restore a training checkpoint . <EoL>
<BoL> Saves a training checkpoint and provides basic checkpoint management . <EoL>
<BoL> Writes a training checkpoint . <EoL>
<BoL> Saves the latest checkpoint , returns should_stop . <EoL>
<BoL> Creates a ` ClusterSpec ` . <EoL>
<BoL> Creates a ` tf.train.ClusterDef ` based on the given ` cluster_spec ` . <EoL>
<BoL> Returns a ` tf.train.ClusterDef ` protocol buffer based on this cluster . <EoL>
<BoL> Returns a dictionary from job names to their tasks . <EoL>
<BoL> Returns a mapping from task ID to address in the given job . <EoL>
<BoL> Returns the number of tasks defined in the given job . <EoL>
<BoL> Returns the address of the given task in the given job . <EoL>
<BoL> Returns a list of valid task indices in the given job . <EoL>
<BoL> Create a new Coordinator . <EoL>
<BoL> Check if the exception indicated in 'ex ' should be ignored . <EoL>
<BoL> Clears the stop flag . <EoL>
<BoL> If an exception has been passed to ` request_stop ` , this raises it . <EoL>
<BoL> Register a thread to join . <EoL>
<BoL> Request that the threads stop . <EoL>
<BoL> Check if stop was requested . <EoL>
<BoL> Context manager to request stop when an Exception is raised . <EoL>
<BoL> Wait till the Coordinator is told to stop . <EoL>
<BoL> Maintains moving averages of variables . <EoL>
<BoL> Returns the ` Variable ` holding the average of ` var ` . <EoL>
<BoL> Returns the name of the ` Variable ` holding the average for ` var ` . <EoL>
<BoL> Returns a map of names to ` Variables ` to restore . <EoL>
<BoL> Initializes a ` FeedFnHook ` . <EoL>
<BoL> Called once before using the session . <EoL>
<BoL> Called at the end of session . <EoL>
<BoL> Initializes ` FinalOpHook ` with ops to run at the end of the session . <EoL>
<BoL> Called before each call to run ( ) . <EoL>
<BoL> Initializes a ` GlobalStepWaiterHook ` . <EoL>
<BoL> Construct a new gradient descent optimizer . <EoL>
<BoL> Add ops to apply sparse gradients to ` var ` . <EoL>
<BoL> Create all slots needed by the variables . <EoL>
<BoL> Add ops to apply sparse gradients to the variable ` handle ` . <EoL>
<BoL> Start a LooperThread that calls a function periodically . <EoL>
<BoL> Called at 'timer_interval_secs ' boundaries . <EoL>
<BoL> Called when the thread starts . <EoL>
<BoL> Called when the thread stops . <EoL>
<BoL> Return True if the monitored session is closed . For tests only . <EoL>
<BoL> Run ops in the monitored session . <EoL>
<BoL> Run ops using a step function . <EoL>
<BoL> Initializes a ` NanTensorHook ` . <EoL>
<BoL> Create a QueueRunner . <EoL>
<BoL> Close the queue when the Coordinator requests stop . <EoL>
<BoL> Create a QueueRunner from ` QueueRunnerDef ` . <EoL>
<BoL> Execute the enqueue op in a loop , close the queue in case of error . <EoL>
<BoL> Create threads to run the enqueue ops for the given session . <EoL>
<BoL> Returns a ` QueueRunner ` object created from ` queue_runner_def ` . <EoL>
<BoL> Converts this ` QueueRunner ` to a ` QueueRunnerDef ` protocol buffer . <EoL>
<BoL> Returns the checkpoint filename given a ` ( filename , time ) ` pair . <EoL>
<BoL> Deletes old checkpoints if necessary . <EoL>
<BoL> Manages the list of the latest checkpoints . <EoL>
<BoL> Adds a collection to MetaGraphDef protocol buffer . <EoL>
<BoL> Builds saver_def . <EoL>
<BoL> Generates a ` SaverDef ` representation of this saver . <EoL>
<BoL> Returns a ` Saver ` object created from ` saver_def ` . <EoL>
<BoL> Recovers the internal saver state after a crash . <EoL>
<BoL> Restores previously saved variables . <EoL>
<BoL> DEPRECATED : Use set_last_checkpoints_with_time . <EoL>
<BoL> Sets the list of old checkpoint filenames and timestamps . <EoL>
<BoL> Converts this ` Saver ` to a ` SaverDef ` protocol buffer . <EoL>
<BoL> Returns an op that groups the default local init ops . <EoL>
<BoL> Creates operations if needed and finalizes the graph . <EoL>
<BoL> Get from cache or create a default operation . <EoL>
<BoL> Return true if the timer should trigger for the specified step . <EoL>
<BoL> Creates a new single-process cluster running on the local host . <EoL>
<BoL> Blocks until the server has shut down . <EoL>
<BoL> Starts this server . <EoL>
<BoL> Checks if the model is ready or not . <EoL>
<BoL> Checks if the model is ready to run local_init_op . <EoL>
<BoL> Closes a session without raising an exception . <EoL>
<BoL> Tries to run _local_init_op , if not None , and is ready for local init . <EoL>
<BoL> Creates a new ` Session ` and waits for model to be ready . <EoL>
<BoL> Initializes SessionRunContext . <EoL>
<BoL> Sets stop requested field . <EoL>
<BoL> Returns underlying ` TensorFlow.Session ` object . <EoL>
<BoL> Initializes a ` StopAtStepHook ` . <EoL>
<BoL> Fetches the summary op either from self._summary_op or self._scaffold . <EoL>
<BoL> Start a LooperThread that calls a function periodically . <EoL>
<BoL> Request that the coordinator stop the threads . <EoL>
<BoL> Check if the coordinator was told to stop . <EoL>
<BoL> Start threads for ` QueueRunners ` . <EoL>
<BoL> Start the standard services for 'sess ' . <EoL>
<BoL> Context handler to stop the supervisor when an exception is raised . <EoL>
<BoL> Indicate that a summary was computed . <EoL>
<BoL> Block waiting for the coordinator to stop . <EoL>
<BoL> Returns the global_step from the default graph . <EoL>
<BoL> Returns the first ` Operation ` from a collection . <EoL>
<BoL> Initializes global_step . <EoL>
<BoL> Initializes init_op . <EoL>
<BoL> Initializes local_init_op . <EoL>
<BoL> Initializes saver . <EoL>
<BoL> Initializes summary_op . <EoL>
<BoL> Check that all is good . <EoL>
<BoL> Writes graph_def to ` logdir ` and adds it to summary if applicable . <EoL>
<BoL> Add ops to apply dense gradients to ` var ` . <EoL>
<BoL> Create all needed tensors before applying gradients . <EoL>
<BoL> Add ops to apply dense gradients to the variable ` handle ` . <EoL>
<BoL> Apply gradients to variables . <EoL>
<BoL> Compute gradients of `` loss '' for the variables in `` var_list '' . <EoL>
<BoL> Returns the QueueRunner for the chief to execute . <EoL>
<BoL> Returns the op to fill the sync_token_queue with the tokens . <EoL>
<BoL> Return a slot named `` name '' created for `` var '' by the Optimizer . <EoL>
<BoL> Return a list of the names of slots created by the ` Optimizer ` . <EoL>
<BoL> Creates a hook to handle SyncReplicasHook ops such as initialization . <EoL>
<BoL> Fetches a list of optimizer variables in the default graph . <EoL>
<BoL> Adds a ` QueueRunner ` to a collection in the graph . <EoL>
<BoL> Asserts ` global_step_tensor ` is a scalar int ` Variable ` or ` Tensor ` . <EoL>
<BoL> Checks whether a V1 or V2 checkpoint exists with the specified prefix . <EoL>
<BoL> Applies cosine decay to the learning rate . <EoL>
<BoL> Create global step tensor in graph . <EoL>
<BoL> A general quantization scheme is being developed in ` tf.contrib.quantize ` . <EoL>
<BoL> Returns the mtimes ( modification timestamps ) of the checkpoints . <EoL>
<BoL> Returns CheckpointState proto from the `` checkpoint '' file . <EoL>
<BoL> Get the global step tensor . <EoL>
<BoL> Returns and create ( if necessary ) the global step tensor . <EoL>
<BoL> Small helper to get the global step . <EoL>
<BoL> Initializes current variables with tensors loaded from given checkpoint . <EoL>
<BoL> Finds the filename of latest saved checkpoint file . <EoL>
<BoL> Returns tensor ` num_epochs ` times and then raises an ` OutOfRange ` error . <EoL>
<BoL> Returns list of all variables in the checkpoint . <EoL>
<BoL> Returns ` CheckpointReader ` for checkpoint found in ` ckpt_dir_or_file ` . <EoL>
<BoL> Returns the tensor value of the given variable in the checkpoint . <EoL>
<BoL> Piecewise constant from boundaries and interval values . <EoL>
<BoL> Computes fingerprints of the input strings . <EoL>
<BoL> Distributed version of Stochastic Dual Coordinate Ascent ( SDCA ) optimizer for <EoL>
<BoL> Applies L1 regularization shrink step on the parameters . <EoL>
<BoL> Returns all variables created with ` trainable=True ` . <EoL>
<BoL> Transposes ` a ` . Permutes the dimensions according to ` perm ` . <EoL>
<BoL> Returns x / y element-wise for integer types . <EoL>
<BoL> Returns element-wise remainder of division . This emulates C semantics in that <EoL>
<BoL> Group tensors together . <EoL>
<BoL> Converts a flat index or array of flat indices into a tuple of <EoL>
<BoL> Unpacks the given dimension of a rank- ` R ` tensor into rank- ` ( R-1 ) ` tensors . <EoL>
<BoL> Example of overriding the generated code for an Op . <EoL>
<BoL> Partitioner that partitions shards to have max_shard_bytes total size . <EoL>
<BoL> Scope which defines a variable creation function to be used by variable ( ) . <EoL>
<BoL> Enters the context manager when there is no cached scope yet . <EoL>
<BoL> Return the elements , either from ` x ` or ` y ` , depending on the ` condition ` . <EoL>
<BoL> Creates a tensor with all elements set to zero . <EoL>
<BoL> Creates a tensor with all elements set to zero . <EoL>
<BoL> Asserts members of ` Estimator ` are not overridden . <EoL>
<BoL> Calls the input function . <EoL>
<BoL> Calls model function . <EoL>
<BoL> Call model_fn for evaluation and handle return values . <EoL>
<BoL> Call model_fn in distribution mode and handle return values.Runs one step of the eval computation and captures outputs . <EoL>
<BoL> Create hooks to run correct number of steps in evaluation . <EoL>
<BoL> Create hooks to run correct number of steps in training . <EoL>
<BoL> Creates and asserts properties of the global step . <EoL>
<BoL> Creates the global step tensor in graph . <EoL>
<BoL> Builds the graph and related hooks to run evaluation . <EoL>
<BoL> Extracts batch length of predictions . <EoL>
<BoL> Extracts ` predict_keys ` from ` predictions ` . <EoL>
<BoL> Extracts the ` features ` and labels from return values of ` input_fn ` . <EoL>
<BoL> Extracts the ` features ` from return values of ` input_fn ` . <EoL>
<BoL> Initiate training with ` input_fn ` , without ` DistributionStrategies ` . <EoL>
<BoL> Initiate training with ` input_fn ` , using ` DistributionStrategies ` .A single step that is passed to run_on_dataset . <EoL>
<BoL> Shows the directory name where evaluation metrics are dumped . <EoL>
<BoL> Returns list of all variable names in this model . <EoL>
<BoL> Returns value of the variable given by name . <EoL>
<BoL> Finds the filename of the latest saved checkpoint file in ` model_dir ` . <EoL>
<BoL> Deletes older exports , retaining only a given number of the most recent . <EoL>
<BoL> Get the best eval result from event files . <EoL>
<BoL> Computes gain-based feature importances . <EoL>
<BoL> Call the defined shared _dnn_model_fn . <EoL>
<BoL> Call the _dnn_linear_combined_model_fn . <EoL>
<BoL> Call the _dnn_linear_combined_model_fn . <EoL>
<BoL> Call the defined shared _dnn_model_fn . <EoL>
<BoL> Return a new EstimatorSpec replacing specified fields with new values . <EoL>
<BoL> Deletes older exports , retaining only a given number of the most recent . <EoL>
<BoL> Call the defined shared _linear_model_fn . <EoL>
<BoL> Call the defined shared _linear_model_fn . <EoL>
<BoL> Returns None or tf.ConfigProto instance with default device_filters set . <EoL>
<BoL> Initialize distributed properties based on ` tf_config ` . <EoL>
<BoL> Overwrites the session_config for distributed training . <EoL>
<BoL> See ` replace ` . <EoL>
<BoL> Returns a new instance of ` RunConfig ` replacing specified properties . <EoL>
<BoL> Creates a validated ` TrainSpec ` instance . <EoL>
<BoL> Constructor for ` ClassificationOutput ` . <EoL>
<BoL> Wraps raw tensors as dicts and checks type . <EoL>
<BoL> Generate a SignatureDef proto for inclusion in a MetaGraphDef . <EoL>
<BoL> Constructor for PredictOutput . <EoL>
<BoL> Constructor for ` RegressionOutput ` . <EoL>
<BoL> Build a serving_input_receiver_fn expecting fed tf.Examples.An input_fn that expects a serialized tf.Example . <EoL>
<BoL> Build a serving_input_receiver_fn expecting feature Tensors.A serving_input_receiver_fn that expects features to be fed directly . <EoL>
<BoL> Numpy input function . <EoL>
<BoL> Pandas input function . <EoL>
<BoL> Train and evaluate the ` estimator ` . <EoL>
<BoL> Wraps absl.flags 's define functions so tf.flags accepts old names.Wrapper function that turns old keyword names to new ones . <EoL>
<BoL> Returns a flat list from a given nested structure . <EoL>
<BoL> Returns a flat sequence from a given nested structure . <EoL>
<BoL> Returns True iff ` instance ` is an instance of an ` attr.s ` decorated class . <EoL>
<BoL> Returns True iff ` instance ` is a ` collections.Mapping ` . <EoL>
<BoL> Returns a true if its input is a collections.Sequence ( except strings ) . <EoL>
<BoL> Returns a true if ` seq ` is a Sequence or dict ( except strings/lists ) . <EoL>
<BoL> Returns True if the two namedtuples have the same name and fields . <EoL>
<BoL> A decorator : Do not generate docs for this method . <EoL>
<BoL> A decorator : Do not generate docs for this object . <EoL>
<BoL> A decorator : Only generate docs for this method in the defining class . <EoL>
<BoL> Returns true if docs generation should be skipped for this object . <EoL>
<BoL> Returns true if docs should be skipped for this class attribute . <EoL>
<BoL> Wrapper around self.call ( ) , for handling internal references . <EoL>
<BoL> Check trainable weights count consistency . <EoL>
<BoL> Retrieves an attribute ( e.g . input_tensors ) from a node . <EoL>
<BoL> Converts a layer and its index to a unique ( immutable type ) name . <EoL>
<BoL> Set model 's input and output specs based on the input data received . <EoL>
<BoL> Util hared between different serialization methods . <EoL>
<BoL> Adds losses to the layer . <EoL>
<BoL> Adds updates to the layer . <EoL>
<BoL> Checks compatibility between the layer and provided inputs . <EoL>
<BoL> Creates the layer weights . <EoL>
<BoL> Calls the model on new inputs . <EoL>
<BoL> Counts the total number of scalars composing the weights . <EoL>
<BoL> Instantiates a Model from its config ( output of ` get_config ( ) ` ) .Deserializes a layer , then call it on appropriate inputs . <EoL>
<BoL> Retrieves the input tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the input shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves a layer based on either its name ( unique ) or index . <EoL>
<BoL> Retrieves the output tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output mask tensor ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the output shape ( s ) of a layer at a given node . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Returns predictions for a single batch of samples . <EoL>
<BoL> Saves the model to a single HDF5 file . <EoL>
<BoL> Dumps all layer weights to a HDF5 file . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Prints a string summary of the network . <EoL>
<BoL> Test the model on a single batch of samples . <EoL>
<BoL> Returns a JSON string containing the network configuration . <EoL>
<BoL> Returns a yaml string containing the network configuration . <EoL>
<BoL> Adds a layer instance on top of the layer stack . <EoL>
<BoL> Removes the last layer in the model . <EoL>
<BoL> Generate class predictions for the input samples . <EoL>
<BoL> Generates class probability predictions for the input samples . <EoL>
<BoL> This is where the layer 's logic lives . <EoL>
<BoL> Computes an output mask tensor . <EoL>
<BoL> Computes the output shape of the layer . <EoL>
<BoL> Creates a layer from its config . <EoL>
<BoL> Returns the config of the layer . <EoL>
<BoL> Returns the current weights of the layer . <EoL>
<BoL> Sets the weights of the layer , from Numpy arrays . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Exponential ( base e ) activation function . <EoL>
<BoL> Get the ` identifier ` activation function . <EoL>
<BoL> Hard sigmoid activation function . <EoL>
<BoL> Linear ( i.e . identity ) activation function . <EoL>
<BoL> Rectified Linear Unit . <EoL>
<BoL> Scaled Exponential Linear Unit ( SELU ) . <EoL>
<BoL> Sigmoid activation function . <EoL>
<BoL> Softmax activation function . <EoL>
<BoL> Softplus activation function . <EoL>
<BoL> Softsign activation function . <EoL>
<BoL> Hyperbolic tangent activation function . <EoL>
<BoL> Generates a callable that runs the graph . <EoL>
<BoL> Element-wise absolute value . <EoL>
<BoL> Bitwise reduction ( logical AND ) . <EoL>
<BoL> Bitwise reduction ( logical OR ) . <EoL>
<BoL> Creates a 1D tensor containing a sequence of integers . <EoL>
<BoL> Returns the index of the maximum value along an axis . <EoL>
<BoL> Returns the index of the minimum value along an axis . <EoL>
<BoL> Publicly accessible method for determining the current backend . <EoL>
<BoL> Batchwise dot product . <EoL>
<BoL> Turn a nD tensor into a 2D tensor with same 0th dimension . <EoL>
<BoL> Returns the value of more than one tensor variable . <EoL>
<BoL> Applies batch normalization on x given mean , var , beta and gamma . <EoL>
<BoL> Sets the values of many tensor variables at once . <EoL>
<BoL> Adds a bias vector to a tensor . <EoL>
<BoL> Binary crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Casts a tensor to a different dtype and returns it . <EoL>
<BoL> Cast a Numpy array to the default Keras float type . <EoL>
<BoL> Categorical crossentropy between an output tensor and a target tensor . <EoL>
<BoL> Destroys the current TF graph and creates a new one . <EoL>
<BoL> Element-wise value clipping . <EoL>
<BoL> Returns the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Returns the default float type , as a string . <EoL>
<BoL> Returns the default image data format convention ( 'channels_first ' or 'channels_last ' ) . <EoL>
<BoL> Legacy getter for ` image_data_format ` . <EoL>
<BoL> Checks that the value correspond to a valid data format . <EoL>
<BoL> Sets the value of the fuzz factor used in numeric expressions . <EoL>
<BoL> Sets the default float type . <EoL>
<BoL> Sets the value of the data format convention . <EoL>
<BoL> Legacy setter for ` image_data_format ` . <EoL>
<BoL> Concatenates a list of tensors alongside the specified axis . <EoL>
<BoL> Creates a constant tensor . <EoL>
<BoL> Computes cos of x element-wise . <EoL>
<BoL> Returns the static number of elements in a Keras variable or tensor . <EoL>
<BoL> Runs CTC loss algorithm on each batch element . <EoL>
<BoL> Converts CTC labels from dense to sparse . <EoL>
<BoL> Cumulative product of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Cumulative sum of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Multiplies 2 tensors ( and/or variables ) and returns a *tensor* . <EoL>
<BoL> Sets entries in ` x ` to zero at random , while scaling the entire tensor . <EoL>
<BoL> Returns the dtype of a Keras tensor or variable , as a string . <EoL>
<BoL> Exponential linear unit . <EoL>
<BoL> Element-wise equality between two tensors . <EoL>
<BoL> Evaluates the value of a variable . <EoL>
<BoL> Element-wise exponential . <EoL>
<BoL> Adds a 1-sized dimension at index `` axis '' . <EoL>
<BoL> Instantiate an identity matrix and returns it . <EoL>
<BoL> Flatten a tensor . <EoL>
<BoL> Reduce elems using fn to combine them from left to right . <EoL>
<BoL> Reduce elems using fn to combine them from right to left . <EoL>
<BoL> Instantiates a Keras function . <EoL>
<BoL> Retrieves the elements of indices ` indices ` in the tensor ` reference ` . <EoL>
<BoL> Returns the TF session to be used by the backend . <EoL>
<BoL> Get the uid for the default graph . <EoL>
<BoL> Returns the value of a variable . <EoL>
<BoL> Returns the shape of a variable . <EoL>
<BoL> Returns the gradients of ` loss ` w.r.t . ` variables ` . <EoL>
<BoL> Element-wise truth value of ( x > y ) . <EoL>
<BoL> Element-wise truth value of ( x > = y ) . <EoL>
<BoL> Segment-wise linear approximation of sigmoid . <EoL>
<BoL> Checks if a callable accepts a given keyword argument . <EoL>
<BoL> Returns a tensor with the same content as the input tensor . <EoL>
<BoL> Selects ` x ` in test phase , and ` alt ` otherwise . <EoL>
<BoL> Returns whether the ` targets ` are in the top ` k ` ` predictions ` . <EoL>
<BoL> Selects ` x ` in train phase , and ` alt ` otherwise . <EoL>
<BoL> Returns the shape of tensor or variable as a tuple of int or None entries . <EoL>
<BoL> Returns whether ` x ` is a Keras tensor . <EoL>
<BoL> Returns whether ` x ` is a placeholder . <EoL>
<BoL> Returns whether a tensor is a sparse tensor . <EoL>
<BoL> Normalizes a tensor wrt the L2 norm alongside the specified axis . <EoL>
<BoL> Returns the learning phase flag . <EoL>
<BoL> Element-wise truth value of ( x < y ) . <EoL>
<BoL> Element-wise truth value of ( x < = y ) . <EoL>
<BoL> Apply 1D conv with un-shared weights . <EoL>
<BoL> Apply 2D conv with un-shared weights . <EoL>
<BoL> Element-wise log . <EoL>
<BoL> Computes log ( sum ( exp ( elements across dimensions of a tensor ) ) ) . <EoL>
<BoL> Sets the manual variable initialization flag . <EoL>
<BoL> Map the function fn over the elements elems and return the outputs . <EoL>
<BoL> Maximum value in a tensor . <EoL>
<BoL> Element-wise maximum of two tensors . <EoL>
<BoL> Mean of a tensor , alongside the specified axis . <EoL>
<BoL> Minimum value in a tensor . <EoL>
<BoL> Element-wise minimum of two tensors . <EoL>
<BoL> Compute the moving average of a variable . <EoL>
<BoL> Returns the number of axes in a tensor , as an integer . <EoL>
<BoL> Element-wise inequality between two tensors . <EoL>
<BoL> Computes the one-hot representation of an integer tensor . <EoL>
<BoL> Instantiates an all-ones variable and returns it . <EoL>
<BoL> Instantiates an all-ones variable of the same shape as another tensor . <EoL>
<BoL> Permutes axes in a tensor . <EoL>
<BoL> Instantiates a placeholder tensor and returns it . <EoL>
<BoL> Element-wise exponentiation . <EoL>
<BoL> Prints ` message ` and the tensor value when evaluated . <EoL>
<BoL> Multiplies the values in a tensor , alongside the specified axis . <EoL>
<BoL> Returns a tensor with random binomial distribution of values . <EoL>
<BoL> Returns a tensor with normal distribution of values . <EoL>
<BoL> Returns a tensor with uniform distribution of values . <EoL>
<BoL> Rectified linear unit . <EoL>
<BoL> Repeats a 2D tensor . <EoL>
<BoL> Repeats the elements of a tensor along an axis , like ` np.repeat ` . <EoL>
<BoL> Resets graph identifiers . <EoL>
<BoL> Reshapes a tensor to the specified shape . <EoL>
<BoL> Resizes the volume contained in a 5D tensor . <EoL>
<BoL> Reverses a tensor along the specified axes . <EoL>
<BoL> Element-wise rounding to the closest integer . <EoL>
<BoL> Sets the learning phase to a fixed value . <EoL>
<BoL> Sets the global TensorFlow session . <EoL>
<BoL> Sets the value of a variable , from a Numpy array . <EoL>
<BoL> Returns the symbolic shape of a tensor or variable . <EoL>
<BoL> Element-wise sigmoid . <EoL>
<BoL> Element-wise sign . <EoL>
<BoL> Computes sin of x element-wise . <EoL>
<BoL> Extracts a slice from a tensor . <EoL>
<BoL> Softmax of a tensor . <EoL>
<BoL> Softplus of a tensor . <EoL>
<BoL> Softsign of a tensor . <EoL>
<BoL> Categorical crossentropy with integer targets . <EoL>
<BoL> Pads the 2nd and 3rd dimensions of a 4D tensor . <EoL>
<BoL> Pads 5D tensor with zeros along the depth , height , width dimensions . <EoL>
<BoL> Element-wise square root . <EoL>
<BoL> Element-wise square . <EoL>
<BoL> Removes a 1-dimension from the tensor at index `` axis '' . <EoL>
<BoL> Stacks a list of rank ` R ` tensors into a rank ` R+1 ` tensor . <EoL>
<BoL> Standard deviation of a tensor , alongside the specified axis . <EoL>
<BoL> Returns ` variables ` but with zero gradient w.r.t . every other variable . <EoL>
<BoL> Sum of the values in a tensor , alongside the specified axis . <EoL>
<BoL> Switches between two operations depending on a scalar value . <EoL>
<BoL> Element-wise tanh . <EoL>
<BoL> Pads the middle dimension of a 3D tensor . <EoL>
<BoL> This method captures TF 's explicit device scope setting . <EoL>
<BoL> Get a list of available gpu devices ( formatted as strings ) . <EoL>
<BoL> Return explicit device of current context , otherwise returns ` None ` . <EoL>
<BoL> Check whether the current scope supports NCHW ops . <EoL>
<BoL> Check if the current device is explicitly set on the device type specified . <EoL>
<BoL> Transpose and cast the input before the conv1d . <EoL>
<BoL> Transpose and cast the input before the conv2d . <EoL>
<BoL> Transpose and cast the input before the conv3d . <EoL>
<BoL> Convert keras ' padding to tensorflow 's padding . <EoL>
<BoL> Convert the input ` x ` to a tensor of type ` dtype ` . <EoL>
<BoL> Creates a tensor by tiling ` x ` by ` n ` . <EoL>
<BoL> Converts a sparse tensor into a dense tensor and returns it . <EoL>
<BoL> Transposes a tensor and returns it . <EoL>
<BoL> Converts a tuple or a list to the correct ` data_format ` . <EoL>
<BoL> Returns a tensor with truncated random normal distribution of values . <EoL>
<BoL> Update the value of ` x ` to ` new_x ` . <EoL>
<BoL> Update the value of ` x ` by adding ` increment ` . <EoL>
<BoL> Update the value of ` x ` by subtracting ` decrement ` . <EoL>
<BoL> Variance of a tensor , alongside the specified axis . <EoL>
<BoL> Instantiates a variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable and returns it . <EoL>
<BoL> Instantiates an all-zeros variable of the same shape as another tensor . <EoL>
<BoL> Called right before processing a batch . <EoL>
<BoL> Called at the end of a batch . <EoL>
<BoL> Called at the start of an epoch . <EoL>
<BoL> Called at the end of an epoch . <EoL>
<BoL> Called at the beginning of training . <EoL>
<BoL> Called at the end of training . <EoL>
<BoL> Updates the progress bar . <EoL>
<BoL> Resets wait counter and cooldown counter . <EoL>
<BoL> Loads the Boston Housing dataset . <EoL>
<BoL> Internal utility for parsing CIFAR data . <EoL>
<BoL> Loads CIFAR10 dataset . <EoL>
<BoL> Loads CIFAR100 dataset . <EoL>
<BoL> Loads the Fashion-MNIST dataset . <EoL>
<BoL> Removes sequences that exceed the maximum length . <EoL>
<BoL> Retrieves the dictionary mapping words to word indices . <EoL>
<BoL> Loads the MNIST dataset . <EoL>
<BoL> Retrieves the dictionary mapping words to word indices . <EoL>
<BoL> Collects the output shape ( s ) of a list of Keras tensors . <EoL>
<BoL> Retrieves the output mask ( s ) of the previous node . <EoL>
<BoL> Count the total number of scalars composing the weights . <EoL>
<BoL> Normalizes a list/tensor into a list . <EoL>
<BoL> Gets the first element if the iterable has only one value . <EoL>
<BoL> Returns the list of input tensors necessary to compute ` tensor ` . <EoL>
<BoL> Validates a network 's topology and gather its layers and nodes.Builds a map of the graph of layers . <EoL>
<BoL> Produces a prompt asking about overwriting a file . <EoL>
<BoL> Prints a summary of a model.Prints a summary for a single layer . <EoL>
<BoL> Converts weights for RNN layers between native and CuDNN format.Transforms kernel for each gate separately using given function.Makes a function that transforms input kernels from/to CuDNN format . <EoL>
<BoL> De-serializes a model serialized via _serialize_modelHandles custom object lookup . <EoL>
<BoL> Checks if conversion on kernel matrices is required during weight loading . <EoL>
<BoL> Model serialization logic.Serialize any object to a JSON-serializable structure . <EoL>
<BoL> Loads attributes of the specified name from the HDF5 group . <EoL>
<BoL> Loads a model saved via ` save_model ` . <EoL>
<BoL> Implements topological ( order-based ) weight loading . <EoL>
<BoL> Instantiates a Keras model from its config . <EoL>
<BoL> Parses a JSON model configuration file and returns a model instance . <EoL>
<BoL> Parses a yaml model configuration file and returns a model instance . <EoL>
<BoL> Saves attributes ( data ) of the specified name into the HDF5 group . <EoL>
<BoL> Save a model to a HDF5 file . <EoL>
<BoL> Checks if batch axes are the same for numpy arrays . <EoL>
<BoL> Does validation on the compatibility of targets and loss functions . <EoL>
<BoL> Maps metric functions to model outputs . <EoL>
<BoL> Slices an array or list of arrays . <EoL>
<BoL> Shuffles an array in a batch-wise fashion . <EoL>
<BoL> Returns a list of batch indices ( tuples of indices ) . <EoL>
<BoL> Abstract method to loop over some data in batches . <EoL>
<BoL> Abstract method to loop over some data in batches . <EoL>
<BoL> Get the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Send current Iterable to all workers . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Start the handler 's workers . <EoL>
<BoL> Stops running threads and wait for them to exit , if necessary . <EoL>
<BoL> Get the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Wait for the queue to be empty . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Gets batch at position ` index ` . <EoL>
<BoL> Create a generator that iterate over the Sequence . <EoL>
<BoL> Number of batch in the Sequence . <EoL>
<BoL> Method called at the end of every epoch . <EoL>
<BoL> Iterate indefinitely over a Sequence . <EoL>
<BoL> Adds support for masking and sample-weighting to an objective function.Wrapper function . <EoL>
<BoL> Computes the number of input and output units for a weight shape . <EoL>
<BoL> Glorot normal initializer , also called Xavier normal initializer . <EoL>
<BoL> Glorot uniform initializer , also called Xavier uniform initializer . <EoL>
<BoL> He normal initializer . <EoL>
<BoL> He uniform variance scaling initializer . <EoL>
<BoL> LeCun normal initializer . <EoL>
<BoL> LeCun uniform initializer . <EoL>
<BoL> Computes the shape of the resultant of an elementwise operation . <EoL>
<BoL> Finds and replaces a missing dimension in an output shape . <EoL>
<BoL> Retrieves the weights of the model . <EoL>
<BoL> Sets the weights of the model . <EoL>
<BoL> Finds non-specific dimensions in the static shapes and replaces them by the corresponding dynamic shapes of the tensor . <EoL>
<BoL> Computes an output mask tensor for Embedding layer based on the inputs , mask , and the inner layer . <EoL>
<BoL> Functional interface to the ` Add ` layer . <EoL>
<BoL> Functional interface to the ` Average ` layer . <EoL>
<BoL> Functional interface to the ` Concatenate ` layer . <EoL>
<BoL> Standardize ` __call__ ` to a single list of tensor inputs . <EoL>
<BoL> Serializes a user defined function . <EoL>
<BoL> Deserializes a user defined function.Ensures that a value is converted to a python cell object . <EoL>
<BoL> Instantiate a layer from a config dictionary . <EoL>
<BoL> Functional interface to the ` Dot ` layer . <EoL>
<BoL> Functional interface to the ` Maximum ` layer . <EoL>
<BoL> Functional interface to the ` Minimum ` layer . <EoL>
<BoL> Functional interface to the ` Multiply ` layer . <EoL>
<BoL> Functional interface to the ` Subtract ` layer . <EoL>
<BoL> Serialize a layer . <EoL>
<BoL> Get the ` identifier ` loss function . <EoL>
<BoL> Logarithm of the hyperbolic cosine of the prediction error . <EoL>
<BoL> Clone a functional ` Model ` instance . <EoL>
<BoL> Clone a ` Sequential ` model instance . <EoL>
<BoL> Clone any ` Model ` instance . <EoL>
<BoL> Returns the current value of the weights of the optimizer . <EoL>
<BoL> Sets the weights of the optimizer , from Numpy arrays . <EoL>
<BoL> Clip the gradient ` g ` if the L2 norm ` n ` exceeds ` c ` . <EoL>
<BoL> Inverse of the ` serialize ` function . <EoL>
<BoL> Retrieves a Keras Optimizer instance . <EoL>
<BoL> Gets a batch of transformed samples . <EoL>
<BoL> Determines input length of a convolution given output length . <EoL>
<BoL> Converts a Numpy kernel matrix from Theano format to TensorFlow format . <EoL>
<BoL> Transforms a single int or iterable of ints into an int tuple . <EoL>
<BoL> Converts all convolution kernels in a model from Theano to TensorFlow . <EoL>
<BoL> Provides a scope that changes to ` _GLOBAL_CUSTOM_OBJECTS ` can not escape . <EoL>
<BoL> Get the Pool initializer for multiprocessing . <EoL>
<BoL> Submits request to the executor and queue the ` Future ` objects . <EoL>
<BoL> Creates a generator to extract data from the queue . <EoL>
<BoL> Extracts an archive if it matches tar , tar.gz , tar.bz , or zip formats . <EoL>
<BoL> Calculates a file sha256 or md5 hash . <EoL>
<BoL> Get the value from the Sequence ` uid ` at index ` i ` . <EoL>
<BoL> Get the next value from the generator ` uid ` . <EoL>
<BoL> Validates a file against a sha256 or md5 hash . <EoL>
<BoL> Retrieves a live reference to the global dictionary of custom objects . <EoL>
<BoL> Replicates a model on different GPUs . <EoL>
<BoL> Normalizes a Numpy array . <EoL>
<BoL> Converts a class vector ( integers ) to binary class matrix . <EoL>
<BoL> Raise errors if ` pydot ` or GraphViz unavailable . <EoL>
<BoL> Duplicate this Apply instance with inputs = self.inputs . <EoL>
<BoL> Duplicate this Apply instance in a new graph . <EoL>
<BoL> Returns the default output for this node . <EoL>
<BoL> Returns the params for the node , or NoParams if no params is set . <EoL>
<BoL> Associate linker with fgraph <EoL>
<BoL> Return a complete hashable signature of the module we compiled . <EoL>
<BoL> Returns a list of compile args that are needed by one or more Variables or Ops . <EoL>
<BoL> This compiles the source code for this linker and returns a loaded module . <EoL>
<BoL> Fills the inputs , outputs , variables , orphans , temps and node_order fields . <EoL>
<BoL> Return a cmodule.DynamicModule instance full of the code for our fgraph . <EoL>
<BoL> Returns a list of lib directories that are needed by one or more Types or Ops . <EoL>
<BoL> Returns a list of headers that are needed by one or more Types or Ops . <EoL>
<BoL> Return a list of code snippets that have to be inserted in the module initialization code . <EoL>
<BoL> Returns a list of lib directories that are needed by one or more Types or Ops . <EoL>
<BoL> Returns a list of libraries that are needed by one or more Types or Ops . <EoL>
<BoL> Returns a function that takes values corresponding to the inputs of the fgraph used by this L { Linker } and returns values corresponding the the outputs of that fgraph . If inplace is True , the calculations will operate in the same storage the fgraph uses , else independent storage will be allocated for the function . <EoL>
<BoL> Returns a list of support code strings that are needed by one or more Variables or Ops . The support code from Variables is added before the support code from Ops.This might contain duplicates . <EoL>
<BoL> WRITEME <EoL>
<BoL> Return a repr of the Variable . <EoL>
<BoL> Return a repr of the test value . <EoL>
<BoL> We clone this object , but we do n't clone the data to lower memory requirement . We suppose that the data will never change . <EoL>
<BoL> Evaluates this variable . <EoL>
<BoL> Initialize a DualLinker . <EoL>
<BoL> Update/tie self with fgraph <EoL>
<BoL> Compiles this linker 's fgraph and returns a function to perform the computations <EoL>
<BoL> Updates the list of clients of r with new_clients . <EoL>
<BoL> This is needed as some features introduce instance methods . This is not picklable . <EoL>
<BoL> Given an apply_node , recursively search from this node to know graph , and then add all unknown variables and apply_nodes to this graph . <EoL>
<BoL> Import variables to this FunctionGraph and also their apply_node , if those nodes are not in this graph . <EoL>
<BoL> Adds a gof.toolbox.Feature to this function_graph and triggers its on_attach callback . <EoL>
<BoL> Changes node.inputs [ i ] to new_r . <EoL>
<BoL> Call this for a diagnosis if things go awry . <EoL>
<BoL> Set of all the ( node , i ) pairs such that node.inputs [ i ] is r. Told differently , a list of ( node , i ) such that each node have r as input at index i . <EoL>
<BoL> Clone the graph and get a memo ( a dict ) that map old node to new node <EoL>
<BoL> Clone the graph and get a dict that maps old nodes to new ones <EoL>
<BoL> Collects callbacks <EoL>
<BoL> Cleans up all of this FunctionGraph 's nodes and variables so they are not associated with this FunctionGraph anymore . <EoL>
<BoL> Execute callbacks <EoL>
<BoL> Return dict d s.t . d [ node ] is a list of nodes that must be evaluated before node itself can be evaluated . <EoL>
<BoL> Removes the feature from the graph . <EoL>
<BoL> This is the main interface to manipulate the subgraph in FunctionGraph . For every node that uses r as input , makes it use new_r instead . <EoL>
<BoL> For every node that uses r as input , makes it use new_r instead <EoL>
<BoL> Toposort <EoL>
<BoL> Create a function . <EoL>
<BoL> Return a new ` Variable ` instance of Type ` self ` . <EoL>
<BoL> Optional : Return a list of compile args recommended to compile the code returned by other methods in this class . <EoL>
<BoL> Optional : Return the name of the primitive C type of items into variables handled by this type . <EoL>
<BoL> Optional : C code to extract a PyObject * instance . <EoL>
<BoL> Optional : Return a list of header search paths required by code returned by this class . <EoL>
<BoL> Optional : Return a list of header files required by code returned by this class . <EoL>
<BoL> Optional : return a list of code snippets to be inserted in module initialization . <EoL>
<BoL> Optional : Return True for small or builtin C types . <EoL>
<BoL> Optional : Return a list of library search paths required by code returned by this class . <EoL>
<BoL> Optional : Return a list of libraries required by code returned by this class . <EoL>
<BoL> Optional : WRITEME <EoL>
<BoL> Optional : return a list of incompatible gcc compiler arguments . <EoL>
<BoL> Optional : Return utility code ( a string , or a list of strings ) for use by a ` Variable ` or ` Op ` to be included at global scope prior to the rest of the code for this class . <EoL>
<BoL> Patch variable so that its type will match self , if possible . <EoL>
<BoL> Convert a symbolic variable into this Type , if compatible . <EoL>
<BoL> Return a new ` Variable ` instance of Type ` self ` . <EoL>
<BoL> Optional : Return a message explaining the output of is_valid_value . <EoL>
<BoL> Return True if a and b can be considered exactly equal . <EoL>
<BoL> Return True if a and b can be considered approximately equal.Optional function . <EoL>
<BoL> This function must return a triplet ( function , input_variables , output_variables ) where function is a thunk that operates on the returned variables . <EoL>
<BoL> Create a new instance of this Mode . <EoL>
<BoL> Adds new optimization instances to a mode . <EoL>
<BoL> This method is primarily used by tensor.Rop <EoL>
<BoL> Optional : return some or all output [ s ] of ` make_node ` . <EoL>
<BoL> Extract test value from variable v. Raises AttributeError if there is none . <EoL>
<BoL> Add tag.trace to an node or variable . <EoL>
<BoL> Optional : return a code string specific to the apply to be inserted in the struct cleanup code . <EoL>
<BoL> Required : return the C implementation of an Op . <EoL>
<BoL> Return a tuple of integers indicating the version of this Op . <EoL>
<BoL> Return a tuple of integers indicating the version of this Op . <EoL>
<BoL> Optional : return C code to run after c_code , whether it failed or not . <EoL>
<BoL> Optional : return a code string specific to the apply to be inserted in the module initialization code . <EoL>
<BoL> Optional : return a code string specific to the apply to be inserted in the struct initialization code . <EoL>
<BoL> Optional : return utility code for use by an ` Op ` that will be inserted at global scope , that can be specialized for the support of a particular ` Apply ` node . <EoL>
<BoL> Optional : return utility code for use by an ` Op ` that will be inserted at struct scope , that can be specialized for the support of a particular ` Apply ` node . <EoL>
<BoL> This allows each op to determine if it wants to be constant folded when all its inputs are constant . <EoL>
<BoL> Like make_thunk , but will only try to make a C thunk . <EoL>
<BoL> Create a `` apply '' nodes for the inputs in that order . <EoL>
<BoL> Required : Calculate the function on the inputs and put the variables in the output storage . Return None . <EoL>
<BoL> Make any special modifications that the Op needs before doing make_thunk ( ) . <EoL>
<BoL> converts self._rop_op from user supplied form to type ( self ) instance <EoL>
<BoL> Return connection pattern of subfgraph defined by inputs and outputs . <EoL>
<BoL> getter method for self._lop_op <EoL>
<BoL> getter method for self._rop_op <EoL>
<BoL> Set gradient overrides , see help ( theano.OpFromGraph ) for syntax This will completely remove any previously set L_op/gradient overrides <EoL>
<BoL> Set L_op overrides , see help ( theano.OpFromGraph ) for syntax This will completely remove any previously set L_op/gradient overrides <EoL>
<BoL> Set R_op overrides , see help ( theano.OpFromGraph ) for syntax This will completely remove any previously set R_op overrides <EoL>
<BoL> Associate linker with fgraph <EoL>
<BoL> Return the compilation arg `` fopenmp '' if openMP is supported <EoL>
<BoL> Return the header file name `` omp.h '' if openMP is supported <EoL>
<BoL> Check if openMP is supported # include < omp.h > int main ( int argc , const char* argv [ ] ) { int res [ 10 ] ; <EoL>
<BoL> Make sure self.openmp is not True if there is no support in gxx . <EoL>
<BoL> Returns Function to run all nodes , list of input containers , list of outputs <EoL>
<BoL> dict op - > total number of thunk calls <EoL>
<BoL> dict op - > total number of nodes <EoL>
<BoL> dict op - > total number of nodes <EoL>
<BoL> dict op - > total time on thunks <EoL>
<BoL> dict op - > total time icluding the time for parents <EoL>
<BoL> node - > fill total time icluding its parents ( returns nothing ) <EoL>
<BoL> dict op - > total number of thunk calls <EoL>
<BoL> dict op - > ' C ' or 'Py ' depending how the op is implemented <EoL>
<BoL> dict op - > total number of nodes <EoL>
<BoL> dict op - > total time on thunks <EoL>
<BoL> Ignore previous function call <EoL>
<BoL> TODO : writeme <EoL>
<BoL> Return C code to clean up after ` c_extract ` . <EoL>
<BoL> Return a tuple of integers indicating the version of this Type . <EoL>
<BoL> Required : Return c code to declare variables that will be instantiated by ` c_extract ` . <EoL>
<BoL> Required : Return c code to extract a PyObject * instance . <EoL>
<BoL> Required : Return c code to initialize the variables that were declared by self.c_declare ( ) . <EoL>
<BoL> Required : Return C code to pack C types back into a PyObject . <EoL>
<BoL> Required : Return data or an appropriately wrapped/converted data . <EoL>
<BoL> Required : Return True for any python object ` a ` that would be a legal value for a Variable of this Type . <EoL>
<BoL> Return a str representation of the Variable . <EoL>
<BoL> Return a new Variable like self . <EoL>
<BoL> Convert the input to a Numpy array . <EoL>
<BoL> Decorator that converts a function into a basic Theano op that will call the supplied function as its implementation . <EoL>
<BoL> Return -1 if x < y , 0 if x == y , 1 if x > y . <EoL>
<BoL> Unfortunately , Conda offers to make itself the default Python and those who use it that way will probably not activate envs correctly meaning e.g . mingw-w64 g++ may not be on their PATH . <EoL>
<BoL> Same as self.optimize ( fgraph ) . <EoL>
<BoL> This is meant as a shortcut to : opt.add_requirements ( fgraph ) opt.apply ( fgraph ) <EoL>
<BoL> Applies the optimization to the provided L { FunctionGraph } . <EoL>
<BoL> Return an instance of ` _Maker ` which handles much of the debugging work . <EoL>
<BoL> Tuple of properties of all attributes <EoL>
<BoL> This return a dict of all `` __props__ `` key- > value . <EoL>
<BoL> Copy a function . Copied function have separate intermediate storages and output storages with original function <EoL>
<BoL> Assert two SharedVariable follow some restirctions : 1. same type 2. same shape or dim ? <EoL>
<BoL> When allow_gc = False , clear the Variables in storage_map <EoL>
<BoL> Return the shared variable read or updated by by this function . <EoL>
<BoL> Create a new instance of this Mode . <EoL>
<BoL> The method that calls the thunk ` fn ` . <EoL>
<BoL> Add features to the fgraph that are required to apply the optimization . For example : fgraph.attach_feature ( History ( ) ) fgraph.attach_feature ( MyFeature ( ) ) etc . <EoL>
<BoL> Get the non-symbolic value associated with this SharedVariable . <EoL>
<BoL> Set the non-symbolic value associated with this SharedVariable . <EoL>
<BoL> Set the values of a shared variable to 0 . <EoL>
<BoL> Return the variable to which v is aliased by view_maps and destroy_maps . <EoL>
<BoL> Returns the connection pattern of a subgraph defined by given inputs and outputs . <EoL>
<BoL> Upgrade a input shortcut to an In instance . <EoL>
<BoL> Return a pretty multiline string representating the cause of the exception . <EoL>
<BoL> Return the Op class whose c_code and perform implementations did n't match . <EoL>
<BoL> Return a pretty multiline string representing the cause of the exception . <EoL>
<BoL> This functions raises a BadViewMap exception when it detects the following : - Output node storages aliased to input storage , with no declaration in view_map . - If not aliased to an input , check if two outputs are aliased together and used subsequently in the graph . <EoL>
<BoL> Use a simple algorithm to find broken optimizations . <EoL>
<BoL> Use a simple algorithm to find broken optimizations.Verify that ` r ` has the same value as the results it replaces . <EoL>
<BoL> Returns -- -- -- - bool True if ` var ` is used by another node in the graph . <EoL>
<BoL> Create a FunctionGraph for debugging . <EoL>
<BoL> Converts number to string by rendering it in base 26 using capital letters as digits . <EoL>
<BoL> Given an fgraph and a list of variables , returns the list or set of all variables which may share the same underlying data storage as any of the specified variables . Used internally by function , FunctionMaker . <EoL>
<BoL> Add a ` Mode ` which can be referred to by ` name ` in ` function ` . <EoL>
<BoL> Makes an FunctionGraph corresponding to the input specs and the output specs . <EoL>
<BoL> Reconstruct the full `` updates '' dictionary , mapping from FunctionGraph input variables to the fgraph outputs that will replace their values . <EoL>
<BoL> Return a human-readable description of named and un-named inputs . <EoL>
<BoL> Insert deepcopy in the fgraph to break aliasing of outputs <EoL>
<BoL> Return True iff Variables ` var1 ` and ` var2 ` perform the same computation . <EoL>
<BoL> Add to ` treeset ` all variables that are views of v , given that v is not a view . <EoL>
<BoL> Add a ` Linker ` which can be referred to by ` name ` in ` Mode ` . <EoL>
<BoL> Add a ` Optimizer ` which can be referred to by ` name ` in ` Mode ` . <EoL>
<BoL> Tell DeepCopyOp how to generate C code for a Theano Type . <EoL>
<BoL> Tell Rebroadcast how to generate C code for a Theano Type . <EoL>
<BoL> Tell Shape Op how to generate C code for a Theano Type . <EoL>
<BoL> Tell Shape_i how to generate C code for a Theano Type . <EoL>
<BoL> Tell ViewOp how to generate C code for a Theano Type . <EoL>
<BoL> Equivalent of var.shape [ i ] , but apply if possible the shape feature optimization . <EoL>
<BoL> Print ProfileStat objects in _atexit_print_list to _atexit_print_file . <EoL>
<BoL> Print the following stats : -- Time elapsed since Theano was imported -- Time spent inside Theano functions -- Time spent in compiling Theano functions -- on graph optimization -- on linker <EoL>
<BoL> Return a SharedVariable Variable , initialized with a copy or reference of ` value ` . <EoL>
<BoL> SharedVariable Constructor . <EoL>
<BoL> Add a new variable to theano.config <EoL>
<BoL> If allow_override is False , we ca n't change the value after the import of Theano . So the value should be the same during all the execution . <EoL>
<BoL> Calls subprocess_Popen and discards the output , returning only the exit code . <EoL>
<BoL> Returns the number of CPUs in the system <EoL>
<BoL> Return location of the user 's home directory . <EoL>
<BoL> Return 32 for 32bit arch , 64 for 64bit arch . <EoL>
<BoL> Calls subprocess_Popen , returning the output , error and exit code in a tuple . <EoL>
<BoL> Return the bit width of Python int ( C long int ) . <EoL>
<BoL> Make sure the user is not attempting to use dnn.conv.algo_bwd ` . <EoL>
<BoL> Make sure the user is not attempting to use dnn.conv.workmem ` . <EoL>
<BoL> Make sure the user is not attempting to use dnn.conv.workmem_bwd ` . <EoL>
<BoL> Return a safe shorter version of platform.platform ( ) . <EoL>
<BoL> Take version as a dot-separated string , return a tuple of int <EoL>
<BoL> We only support clang++ as otherwise we hit strange g++/OSX bugs . <EoL>
<BoL> Return True iff we should warn about bugs fixed after a given version . <EoL>
<BoL> Return the overriding config value for a key . A successful search returns a string value . An unsuccessful search raises a KeyError <EoL>
<BoL> Return a string sha256 of the current config options . In the past , it was md5 . <EoL>
<BoL> Parses a config string ( comma-separated key=value components ) into a dict . <EoL>
<BoL> Return a symbolic matrix/dot product between l and r <EoL>
<BoL> eturn the constant scalar ( 0-D ) value underlying variable ` v ` <EoL>
<BoL> Called by FunctionGraph.attach_feature , the method that attaches the feature to the FunctionGraph . Since this is called after the FunctionGraph is initially populated , this is where you should run checks on the initial contents of the FunctionGraph . <EoL>
<BoL> Called whenever node.inputs [ i ] is changed from r to new_r . At the moment the callback is done , the change has already taken place . <EoL>
<BoL> Should remove any dynamically added functionality that it installed into the function_graph <EoL>
<BoL> Called whenever a node is imported into function_graph , which is just before the node is actually connected to the graph . <EoL>
<BoL> Called whenever a node is pruned ( removed ) from the function_graph , after it is disconnected from the graph . <EoL>
<BoL> Called by toposort . It should return a dictionary of { node : predecessors } where predecessors is a list of nodes that should be computed before the key node . <EoL>
<BoL> Return code for a C function that will convert an enumeration value to a string representation . The function prototype is : <EoL>
<BoL> Get a constant value by its alias . If there is not such alias in this enum , look for a constant with this alias as constant name . <EoL>
<BoL> Return the sorted tuple of all aliases in this enumeration . <EoL>
<BoL> return True if and only if this enum has this alias . <EoL>
<BoL> Returns a list of ( name , value ) pairs that will be turned into macros for use within the op code . <EoL>
<BoL> Sections are loaded from files in order with sections in later files overriding sections in previous files . <EoL>
<BoL> Stitches all the macros and `` code_cleanup '' together <EoL>
<BoL> Get the code section for init_code <EoL>
<BoL> Stitches all the macros and `` init_code '' together <EoL>
<BoL> Convert a path relative to the location of the class file into an aboslute path . Paths that are already absolute are passed through unchanged . <EoL>
<BoL> Loads the c code to perform the Op <EoL>
<BoL> Do the check for only 1 level . <EoL>
<BoL> When attaching to a new fgraph , check that 1 ) This DestroyHandler was n't already attached to some fgraph ( its data structures are only set up to serve one ) . <EoL>
<BoL> app.inputs [ i ] changed from old_r to new_r . <EoL>
<BoL> Add Apply instance to set which must be computed . <EoL>
<BoL> Remove Apply instance from set which must be computed . <EoL>
<BoL> Return orderings induced by destructive operations . <EoL>
<BoL> Makes sure self.droot , self.impact , and self.root_destroyer are up to date , and returns them ( see docstrings for these properties above ) . <EoL>
<BoL> Return None . <EoL>
<BoL> Install some FunctionGraph listeners to help the navigator deal with the ignore_trees-related functionality . <EoL>
<BoL> Undo the work of attach_updater . <EoL>
<BoL> This function will use ` lopt ` to ` transform ` the ` node ` . The ` transform ` method will return either False or a list of Variables that are intended to replace ` node.outputs ` . <EoL>
<BoL> Failure_callback for NavigatorOptimizer : print traceback . <EoL>
<BoL> Failure_callback for NavigatorOptimizer : ignore all errors . <EoL>
<BoL> Failure_callback for NavigatorOptimizer . <EoL>
<BoL> Called by FunctionGraph.attach_feature , the method that attaches the feature to the FunctionGraph . Since this is called after the FunctionGraph is initially populated , this is where you should run checks on the initial contents of the FunctionGraph . <EoL>
<BoL> Called by remove_feature ( feature ) . Should remove any dynamically-added functionality that it installed into the function_graph . <EoL>
<BoL> Should remove any dynamically added functionality that it installed into the function_graph <EoL>
<BoL> Reverts the graph to whatever it was at the provided checkpoint ( undoes all replacements ) . A checkpoint at any given time can be obtained using self.checkpoint ( ) . <EoL>
<BoL> If this local optimization wants to add some requirements to the fgraph , this is the place to do it . <EoL>
<BoL> Return the list of op classes that this opt applies to . <EoL>
<BoL> Transform a subgraph whose output is ` node ` . <EoL>
<BoL> Should remove any dynamically added functionality that it installed into the function_graph <EoL>
<BoL> Requires the following features : - NodeFinder - ReplaceValidate ( Added by default ) <EoL>
<BoL> Look for a constant that has alias `` alias `` in the Theano enumeration types wrapped into current ParamsType . Return value of the constant found , or raise an exception if either <EoL>
<BoL> Return a copy of current ParamsType extended with attributes given in kwargs . New attributes must follow same rules as in ParamsType constructor . <EoL>
<BoL> Look for a constant named `` key `` in the Theano enumeration types wrapped into current ParamsType . Return value of the constant found , or raise an exception if either the constant is not found or current wrapper does not contain any Theano enumeration type . <EoL>
<BoL> Return the name ( string ) of the first field associated to the given Theano type . <EoL>
<BoL> Convenient method to extract fields values from a list of Python objects and key-value args , and wrap them into a : class : ` Params ` object compatible with current ParamsType . <EoL>
<BoL> Return the Theano type associated to the given field name in the current ParamsType . <EoL>
<BoL> Return True if current ParamsType contains the specified Theano type . <EoL>
<BoL> Checks if the graph from node corresponds to in_pattern . If it does , constructs out_pattern and performs the replacement . <EoL>
<BoL> Should remove any dynamically added functionality that it installed into the function_graph <EoL>
<BoL> Required : return an Apply instance representing the application of this Op to the provided inputs . <EoL>
<BoL> Should remove any dynamically added functionality that it installed into the function_graph <EoL>
<BoL> If the caller is replace_all_validate , just raise the exception . <EoL>
<BoL> Applies each L { Optimizer } in self in turn . <EoL>
<BoL> Merge 2 profiles returned by this cass apply ( ) fct . <EoL>
<BoL> Default failure_callback for SeqOptimizer . <EoL>
<BoL> Should remove any dynamically added functionality that it installed into the function_graph <EoL>
<BoL> Shallow copy of a WrapLinker . <EoL>
<BoL> Variant on WrapLinker that runs a series of wrapper functions instead of just one . <EoL>
<BoL> Retrieve item from the cache ( if available ) based on a key <EoL>
<BoL> Cache `` filename '' as a pickle file <EoL>
<BoL> Maps a failure code to the task that is associated to it . <EoL>
<BoL> Default checker for DualLinker . This checks that the variables contain the same data using == . <EoL>
<BoL> Apply the list of policies to name.r , sub <EoL>
<BoL> From a list of L { CodeBlock } instances , returns a string that executes them all in sequence . <EoL>
<BoL> Code contained in sub [ 'fail ' ] , usually substituted for % ( fail ) s . <EoL>
<BoL> Code for failure in the struct init . <EoL>
<BoL> Wrapper around c_cleanup that decrefs py_name . <EoL>
<BoL> Wrapper around c_declare that declares py_name . <EoL>
<BoL> Wrapper around c_extract that initializes py_name from storage . <EoL>
<BoL> Wrapper around c_extract_out that initializes py_name from storage . <EoL>
<BoL> Wrapper around c_init that initializes py_name to Py_None . <EoL>
<BoL> Wrapper around c_sync that syncs py_name with storage . <EoL>
<BoL> Obtain lock on compilation directory . <EoL>
<BoL> WRITEME <EoL>
<BoL> Release lock on compilation directory . <EoL>
<BoL> Generates a struct conforming to the following specifications : <EoL>
<BoL> Update `` sub '' dict and create two codeblocks with different failure modes <EoL>
<BoL> Print out the code with line numbers to ` ofile ` . <EoL>
<BoL> Returns the signature for this function . <EoL>
<BoL> Add a key to self.keys , and update pickled file if asked to . <EoL>
<BoL> Delete from entry_from_key all keys associated to this KeyData object . <EoL>
<BoL> Return path to the module file . <EoL>
<BoL> Remove a key from self.keys , and update pickled file if asked to . <EoL>
<BoL> Dump this object into its ` key_pkl ` file . <EoL>
<BoL> This function expects the compile lock to be held . <EoL>
<BoL> Returns a module if the passed-in key is found in the cache and None otherwise . <EoL>
<BoL> Fetch a compiled module from the loaded cache or the disk . <EoL>
<BoL> Perform checks to detect broken __eq__ / __hash__ implementations . <EoL>
<BoL> Remove base directories 'cutils_ext ' , 'lazylinker_ext ' and 'scan_perform ' if present . <EoL>
<BoL> Delete entries from the filesystem for cache entries that are too old . <EoL>
<BoL> Delete unversioned dynamic modules . <EoL>
<BoL> Return a module from the cache , compiling it if necessary . <EoL>
<BoL> Get the suffix for compiled extensions <EoL>
<BoL> Debug counter to know how often we go through some piece of code . <EoL>
<BoL> Dynamically load a .so , .pyd , .dll , or .py file . <EoL>
<BoL> Return a directory where you should put your .so file for dlimport to be able to load it , given a basedir which should normally be config.compiledir . <EoL>
<BoL> Recursively flatten tuple , list and set in a list . <EoL>
<BoL> Detect if the g++ version used is the llvm one or not . <EoL>
<BoL> Return the platform-dependent GCC argument for shared libraries . <EoL>
<BoL> Return the platform-dependent extension for compiled modules . <EoL>
<BoL> Create a new module_cache with the ( k , v ) pairs in this dictionary <EoL>
<BoL> Return a SHA256 hash that uniquely identifies a module . <EoL>
<BoL> Return a tuple containing a subset of ` key ` , to be used to find equal keys . <EoL>
<BoL> Return True iff both paths can be considered to point to the same module . <EoL>
<BoL> Return the number of seconds since the epoch of the last access of a given file . <EoL>
<BoL> Scan the contents of a cache directory and return full path of the dynamic lib in it . <EoL>
<BoL> Utility function to work around windows behavior that open windows . <EoL>
<BoL> Try to compile and run a simple C snippet using current flags . Return : compilation success ( True/False ) , execution success ( True/False ) <EoL>
<BoL> Remove current lock . <EoL>
<BoL> Delete the compilation lock if someone else has it . <EoL>
<BoL> Obtain lock access by creating a given temporary directory ( whose base will be created if needed , but will not be deleted after the lock is removed ) . <EoL>
<BoL> 'Refresh ' an existing lock by re-writing the file containing the owner's unique id , using a new ( randomly generated ) id , which is also returned . <EoL>
<BoL> Enable or disable the lock on the compilation directory ( which is enabled by default ) . Disabling may make compilation slightly faster ( but is not recommended for parallel execution ) . <EoL>
<BoL> Function to check if the given graph contains a cycle <EoL>
<BoL> Return the variables in inputs that are posible candidate for as inputs of inplace operation . <EoL>
<BoL> Return a list of the parents of this node . Should return a copy -- i.e. , modifying the return value should not modify the graph structure . <EoL>
<BoL> Return the variables that contribute to those in variable_list ( inclusive ) . <EoL>
<BoL> Returns a string representation of the subgraph between i and o <EoL>
<BoL> Copies the subgraph contained between i and o . <EoL>
<BoL> Return the inputs required to compute the given Variables . <EoL>
<BoL> Perform topological sort from input and output nodes <EoL>
<BoL> Goes up in the graph and returns True if the apply node f_node is found . <EoL>
<BoL> Return the apply nodes of the graph between inputs and outputs . <EoL>
<BoL> A contextmanager that is used in inherit_stack_trace and keeps track of all the newly created varaible nodes inside an optimization . A list of new_nodes is instantiated but will be filled in a lazy manner ( when Variable.notify_construction_observers is called ) . <EoL>
<BoL> Op to return a string representation of the subgraph between i and o <EoL>
<BoL> Set of Ops contained within the subgraph between i and o <EoL>
<BoL> Extracts list of variables within input and output nodes via dfs travesal and returns the orphans among them <EoL>
<BoL> Search through a graph , either breadth- or depth-first . <EoL>
<BoL> Extracts list of variables within input and output nodes via dfs travesal <EoL>
<BoL> Extract list of variables between i and o nodes via dfs traversal and chooses the orphans among them <EoL>
<BoL> Utility function that returns the leaves of a search through consecutive view_map ( ) s . <EoL>
<BoL> Decorator for FromFunctionOptimizer . <EoL>
<BoL> Return the set of Variable instances which are computed by node_list . <EoL>
<BoL> Log Theano 's diagnostic stack trace for an exception raised by raise_with_op . <EoL>
<BoL> Ensure there is storage ( a length-1 list ) for inputs , outputs , and interior nodes . <EoL>
<BoL> This function is meant to replace excepthook and do some special work if the exception value has a __thunk_trace__ field . In that case , it retrieves the field , which should contain a trace as returned by L { traceback.extract_stack } , and prints it out on L { stderr } . <EoL>
<BoL> WRITEME <EoL>
<BoL> Customized assert with options to ignore the assert with just a warning <EoL>
<BoL> Displays a message saying that an error was found in some test_values . Becomes a warning or a ValueError depending on config.compute_test_value . <EoL>
<BoL> Intended use : <EoL>
<BoL> Extract test value from ` v ` . Raises AttributeError if there is none . <EoL>
<BoL> Displays msg , a message saying that some test_value is missing , in the appropriate form based on config.compute_test_value : <EoL>
<BoL> Can be overrided to change the way opts are selected <EoL>
<BoL> If implemented , returns a dictionary mapping all symbolic variables in `` inputs `` to SharedVariable instances of suitable dummy values . The `` node `` can be inspected to infer required input shapes . <EoL>
<BoL> Check if a constant can be merged , and queue that replacement . <EoL>
<BoL> Check if a node can be merged , and queue that replacement . <EoL>
<BoL> WRITEME <EoL>
<BoL> WRITEME <EoL>
<BoL> This function checks if the outputs of specific ops of a compiled graph have a stack . <EoL>
<BoL> Copies the stack trace from one or more tensor variables to one or more tensor variables and returns the destination variables . <EoL>
<BoL> Uses the TopoOptimizer from the input nodes to output nodes of the graph . <EoL>
<BoL> Contextmanager that copies the stack trace from one or more variable nodes to all variable nodes constructed in the body . new_nodes is the list of all the newly created variable nodes inside an optimization that is managed by graph.nodes_constructed ( ) . <EoL>
<BoL> Merge-based implementation of ` theano.gof.graph.is_same_graph ` . <EoL>
<BoL> merge 2 dicts by adding the values . <EoL>
<BoL> Decorator for FromFunctionOptimizer . <EoL>
<BoL> Uses the TopoOptimizer from the output nodes to input nodes of the graph . <EoL>
<BoL> Merge constants in the subgraph used to compute nodes in ` vars ` . <EoL>
<BoL> This function traverses the computation graph described by all `` node `` in the graph before the variable out but that are not in the fgraph . It applies each of the local_optimizations on the traversed graph . <EoL>
<BoL> Topological sort algorithm by Kahn [ 1 ] - O ( nodes + vertices ) . <EoL>
<BoL> comparator function based on `` key '' function <EoL>
<BoL> Create a comparator to represent the dependence of nodes in a graph.A cmp function for nodes in a graph - does a depend on b ? <EoL>
<BoL> Returns True if a depends on b . <EoL>
<BoL> Memoization decorator for a function taking a single argument . <EoL>
<BoL> Partially ordered sort with multiple comparators.Tests for cycles in manufactured edges . <EoL>
<BoL> Reverses direction of dependence dict . <EoL>
<BoL> Order a graph of apply nodes according to a list of comparators . <EoL>
<BoL> Make a schedule function from comparators.Order nodes in a FunctionGraph . <EoL>
<BoL> Return a function that makes a value from an integer . <EoL>
<BoL> Make a value of this type . <EoL>
<BoL> For a variable v , returns a Variable that represents the tightest set of possible values it can take . <EoL>
<BoL> Links all the specified vars to a Variable that represents their unification . <EoL>
<BoL> Tuple of properties of all attributesThis return a dict of all `` __props__ `` key- > value . <EoL>
<BoL> Decorator which will print a warning message on the first call . <EoL>
<BoL> Returns all elements in seq1 which are not in seq2 : i.e `` seq1\seq2 `` . <EoL>
<BoL> Return the SHA256 hash of a file . <EoL>
<BoL> Cache the return value for each tuple of arguments ( which must be hashable ) . <EoL>
<BoL> Return those items of collection for which predicate ( item ) is true . <EoL>
<BoL> This is traceback.extract_stack from python 2.7 with this change : <EoL>
<BoL> Sorts prereqs_d.keys ( ) topologically . <EoL>
<BoL> Do not use set , this must always return the same value at the same index . If we just exchange other values , but keep the same pattern of duplication , we must keep the same order . <EoL>
<BoL> Free any internal references to temporary variables . <EoL>
<BoL> Accumulate into the profile object <EoL>
<BoL> Run the thunk corresponding to Apply instance ` node ` . <EoL>
<BoL> Run the machine . <EoL>
<BoL> Check if fgraph is the first FunctionGraph that has ever been associated to self , else , create a new VM_Linker associated to fgraph <EoL>
<BoL> Returns dict : variable K - > list of variables [ v1 , v2 , v3 , ... ] for each K in variables . <EoL>
<BoL> Like ones_like , but forces the object to have a floating point dtype <EoL>
<BoL> Like zeros_like , but forces the object to have a a floating point dtype <EoL>
<BoL> Returns 'yes ' , 'no ' , or 'maybe ' indicating whether x is always 0 . 'maybe ' means that x is an expression that is complicated enough that we ca n't tell that it simplifies to 0 . <EoL>
<BoL> given an apply node , obtain its connection pattern this is just a wrapper around Op.connection_pattern that does type checking and supplies the default value if the method is not implemented <EoL>
<BoL> Helper function for grad function . <EoL>
<BoL> DEPRECATED : use zero_grad ( ) or disconnected_grad ( ) instead . <EoL>
<BoL> Consider an expression constant when computing gradients . <EoL>
<BoL> Formats the outputs according to the flags ` use_list ` and ` use_tuple ` . <EoL>
<BoL> This op do a view in the forward , but clip the gradient . <EoL>
<BoL> Return an un-computable symbolic variable of type ` x.type ` . <EoL>
<BoL> This op scale or inverse the gradient in the backpropagation . <EoL>
<BoL> Return an un-computable symbolic variable of type ` x.type ` . <EoL>
<BoL> Return the gradient of f at pt . <EoL>
<BoL> Return absolute and relative error between a and b . <EoL>
<BoL> Return the abs and rel error of gradient estimate ` g_pt ` <EoL>
<BoL> Find the biggest error between g_pt and self.gf . <EoL>
<BoL> With respect to ` wrt ` , computes gradients of cost and/or from existing ` start ` gradients , up to the ` end ` variables of a symbolic digraph . <EoL>
<BoL> Consider the gradient of this variable undefined . <EoL>
<BoL> Consider an expression constant when computing gradients . <EoL>
<BoL> Returns a short , mostly hexadecimal hash of a numpy ndarray <EoL>
<BoL> Returns a string , with no endlines , fully specifying how a variable is computed . Does not include any memory location dependent information such as the id of a node . <EoL>
<BoL> This function is called by Elemwise when all inputs and outputs are c_contiguous . This allows to use the SIMD version of this op . <EoL>
<BoL> Returns True if the current op has functioning C code for the given Elemwise inputs , outputs . <EoL>
<BoL> This op.__init__ fct do n't have the same parameter as other scalar op . <EoL>
<BoL> Assemble the C code for this Composite Op . <EoL>
<BoL> Return a readable string representation of self.fgraph . <EoL>
<BoL> Return a list of functions that compute each output of self . <EoL>
<BoL> This op.__init__ fct do n't have the same parameter as other scalar op . <EoL>
<BoL> We want the result to have the same sign as Python , not the other implementation of mod . <EoL>
<BoL> For for theano.scalar.Scalar and TensorVariable . <EoL>
<BoL> Symbolically cast ` x ` to a Scalar of given ` dtype ` . <EoL>
<BoL> Convert the input to a properly typed numpy value according to the current casting policy . Work with scalars and tensors . <EoL>
<BoL> Proxy for either true_div or int_div , depending on types of x , y . <EoL>
<BoL> Return a Scalar ( dtype ) object . <EoL>
<BoL> Return 'int ' or 'true ' depending on the type of division used for x / y . <EoL>
<BoL> Upgrade any int types to float32 or float64 to avoid losing precision . <EoL>
<BoL> Upgrade any int and float32 to float64 to do as SciPy . <EoL>
<BoL> Do n't accept complex , otherwise call upgrade_to_float ( ) . <EoL>
<BoL> SharedVariable constructor for scalar values . Default : int64 or float64 . <EoL>
<BoL> Compute and return dictionary mappings between the inputs and outputs of the inner function and the inputs and outputs of the Scan node in the outer graph . <EoL>
<BoL> Perform some elementary validations on the inner graph to ensure that it is coherent . <EoL>
<BoL> Compare True iff other is the same kind of TensorType . <EoL>
<BoL> Hash equal for same kinds of TensorType <EoL>
<BoL> Override ` CLinkerType.c_cleanup ` . <EoL>
<BoL> Override ` CLinkerType.c_declare ` . <EoL>
<BoL> Override ` CLinkerType.c_extract ` . <EoL>
<BoL> Override ` CLinkerObject.c_headers ` . <EoL>
<BoL> Override ` CLinkerType.c_init ` . <EoL>
<BoL> Override ` CLinkerObject.c_support_code ` . <EoL>
<BoL> Override ` CLinkerType.c_sync ` . <EoL>
<BoL> Return a copy of the type optionally with a new dtype or broadcastable pattern . <EoL>
<BoL> Return a tuple ( python type , c type , numpy typenum ) that corresponds to self.dtype . <EoL>
<BoL> Convert ` data ` to something which can be associated to a ` TensorVariable ` . <EoL>
<BoL> Convert a symbolic Variable into a TensorType , if compatible . <EoL>
<BoL> Return the information needed to compute the memory size of `` obj `` . <EoL>
<BoL> Number of bytes taken by the object represented by shape_info . <EoL>
<BoL> Return a ` TensorVariable ` of this type . <EoL>
<BoL> Create an numpy ndarray full of 0 values . <EoL>
<BoL> Return ` x ` , transformed into a ` TensorType ` . <EoL>
<BoL> Check all internal values of the graph that compute the variable `` out `` for occurrences of values identical with `` x `` . If such occurrences are encountered then they are replaced with variable `` y `` . <EoL>
<BoL> Internal function that constructs a new variable from x with the same type , but with a different name ( old name + tag ) . This function is used by gradient , or the R-op to construct new variables for the inputs of the inner graph such that there is no interference between the original graph and the newly constructed graph . <EoL>
<BoL> If the alloc would be useless , this function returns val . <EoL>
<BoL> Given a inner nit_sot output of scan , return True iff the outer nit_sot output has only one client and that client is a Subtensor instance that takes only the last step ( last element along the first axis ) . <EoL>
<BoL> Attempts to replace a Scan node by one which computes the specified outputs inplace . <EoL>
<BoL> This function checks if node ` node ` belongs to ` set_nodes ` , in the sense that it can be merged together with every other node in ` set_nodes ` . In order for two nodes to be mergeable , they have to go over the same number of steps , have the same condition ( if any ) , have the same value for truncate_gradient , and have the same mode . Questionable , we should also consider profile ? <EoL>
<BoL> Checks if Theano graphs represent the same computations.Compare two nodes to determine if they perform equal computation . This is done by comparing the ops , the number of inputs , outputs and by ensuring that the inputs themselves are the result of equal computation . <EoL>
<BoL> Returns true if l has any duplicates ( according to __eq__ ) . <EoL>
<BoL> Builds a dictionary of equivalences between inner inputs based on the equivalence of their corresponding outer inputs . <EoL>
<BoL> Helpful function that gets a Scan op , a list of indices indicating which outputs are not required anymore and should be removed , and a list of inputs to the apply node corresponding to the scan op and produces the list of inputs and outputs and the info dictionary where the indicated outputs are eliminated . Note that eliminating an output means removing its inputs from the inner function and from the node inputs , and changing the dictionary . <EoL>
<BoL> Transforms the shape of a tensor from ( d1 , d2 ... ) to ( d1+size , d2 , .. ) by adding uninitialized memory at the end of the tensor . <EoL>
<BoL> This function tries to recognize the updates OrderedDict , the list of outputs and the stopping condition returned by the lambda expression and arrange them in a predefined order.Ensure ` x ` is made only of allowed data types . <EoL>
<BoL> Compute the shape of the outputs given the shape of the inputs of a theano graph.Go back in the graph , from out , adding computable shapes to shape_of . <EoL>
<BoL> Construct new graphs based on 'graphs ' with some variables replaced according to 'replacer ' . <EoL>
<BoL> Different interface to clone , that allows you to pass inputs . Compared to clone , this method always replaces the inputs with new variables of the same type , and returns those ( in the same order as the original inputs ) . <EoL>
<BoL> Looks at all outputs defined by indices `` out_idxs `` and see whom can be removed from the scan op without affecting the rest . Return two lists , the first one with the indices of outs that can be removed , the second with the outputs that can not be removed . <EoL>
<BoL> Function used by scan to parse the tree and figure out which nodes it needs to replace . <EoL>
<BoL> This function return a new variable whose gradient will be stored in a sparse format instead of dense . <EoL>
<BoL> Return the outputs dtype and broadcastable pattern and the dimshuffled niputs . <EoL>
<BoL> If the inputs have different number of dimensions , their shape is left-completed to the greatest number of dimensions with 1s using DimShuffle . <EoL>
<BoL> Return True if we do not want to compile c code when doing constant folding of this node . <EoL>
<BoL> Return C code to add x to zview . Should DECREF zview if the add fails . <EoL>
<BoL> Should raise NotImplementedError if c_code does not support the types involved in this node . <EoL>
<BoL> Return a dictionary of arguments to pass to helper_c_code . <EoL>
<BoL> The gradient wrt a join op is a ` Split ` , used to partition the gradient along the ` axis ` which was used for joining . <EoL>
<BoL> Perform the permutation by doing a recursion over the input dimensions . <EoL>
<BoL> Join the gradients along the axis that was used to split x . <EoL>
<BoL> WRITEME <EoL>
<BoL> WRITEME <EoL>
<BoL> Change references to Variables into references to Types . <EoL>
<BoL> Returns a dictionary of default arguments to helper_c_code . <EoL>
<BoL> See ` theano.tensor.argmax ` . <EoL>
<BoL> See ` theano.tensor.argmin ` . <EoL>
<BoL> See ` theano.tensor.argsort ` . <EoL>
<BoL> Construct an array from an index array and a set of arrays to choose from . <EoL>
<BoL> Return selected slices only . <EoL>
<BoL> See ` theano.tensor.conj ` . <EoL>
<BoL> Return a symbolic copy and optionally assign a name . <EoL>
<BoL> Reorder the dimensions of this variable , optionally inserting broadcasted dimensions . <EoL>
<BoL> Fill inputted tensor with the assigned value . <EoL>
<BoL> See ` theano.tensor.max ` . <EoL>
<BoL> See ` theano.tensor.mean ` . <EoL>
<BoL> See ` theano.tensor.min ` . <EoL>
<BoL> See ` theano.tensor.nonzero ` . <EoL>
<BoL> See ` theano.tensor.nonzero_values ` . <EoL>
<BoL> See ` theano.tensor.prod ` . <EoL>
<BoL> See 'theano.tensor.ptp ' . <EoL>
<BoL> See ` theano.tensor.repeat ` . <EoL>
<BoL> Return a reshaped view/copy of this variable . <EoL>
<BoL> See ` theano.tensor.round ` . <EoL>
<BoL> See ` theano.tensor.sort ` . <EoL>
<BoL> Remove broadcastable dimensions from the shape of an array . <EoL>
<BoL> See ` theano.tensor.std ` . <EoL>
<BoL> See ` theano.tensor.sum ` . <EoL>
<BoL> Return 'tensor.swapaxes ( self , axis1 , axis2 ) . <EoL>
<BoL> If ` target ` is ` 'cpu ' ` this will transfer to a TensorType ( if not already one ) . Other types may define additional targets . <EoL>
<BoL> Returns -- -- -- - object ` tensor.transpose ( self , axes ) ` or ` tensor.transpose ( self , axes [ 0 ] ) ` . <EoL>
<BoL> See ` theano.tensor.var ` . <EoL>
<BoL> Compute sum of non NaN / Inf values in the array . <EoL>
<BoL> Make the input broadcastable in the specified axes . <EoL>
<BoL> This function is only used to determine the broadcast pattern for AdvancedSubtensor output variable . <EoL>
<BoL> Implement Numpy 's `` allclose `` on tensors . <EoL>
<BoL> Returns indices of maximum elements obtained by iterating over given axis . <EoL>
<BoL> Returns indices of minimum elements obtained by iterating over given axis . <EoL>
<BoL> Returns the indices that would sort an array . <EoL>
<BoL> Returns the indices of k-largest elements along an axis . <EoL>
<BoL> An instance of this class returns the Bartlett spectral window in the time-domain . <EoL>
<BoL> Convert x to a list if it is an iterable , otherwise wrap it in a list . <EoL>
<BoL> Replace a symbol definition with an elementwise version of the corresponding scalar Op . <EoL>
<BoL> Reduces a tensor dot product to a matrix or vector dot product . Based on code from Tijmen Tieleman 's gnumpy ( http : //www.cs.toronto.edu/~tijmen/gnumpy.html ) . <EoL>
<BoL> Compute the batched dot product of two variables : <EoL>
<BoL> Compute a batched tensordot product . <EoL>
<BoL> Symbolically cast ` x ` to a Tensor of type ` dtype ` . <EoL>
<BoL> Safely compute ceil ( float_division ( a , b ) ) . <EoL>
<BoL> Check axes , normalize and convert them to a Python list of integers . Return an empty list if argument is None . <EoL>
<BoL> Return True iff x and y are equal . <EoL>
<BoL> Construct an array from an index array and a set of arrays to choose from . <EoL>
<BoL> Return a symbolic column variable ( ndim=2 , broadcastable= [ False , True ] ) . <EoL>
<BoL> Alias for ` join ` ( axis , *tensor_list ) . <EoL>
<BoL> Return a symbolic ` Constant ` with value ` x ` . <EoL>
<BoL> Add ` f ` to : doc : ` oplist ` . <EoL>
<BoL> Calculate the covariance matrix . Covariance indicates the level to which two variables vary together . <EoL>
<BoL> A helper function for two ops : ` theano.tensor.ExtractDiag ` and ` theano.tensor.AllocDiag ` . <EoL>
<BoL> A helper function for ` theano.tensor.ExtractDiag ` . <EoL>
<BoL> Proxy for either true_div or int_div , depending on types of x , y . <EoL>
<BoL> elementvise divmod , using floor_div and mod_check <EoL>
<BoL> Computes the dot product of two variables . <EoL>
<BoL> This function is basically a call to tensor.get_scalar_constant_value . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Return a vector of indices that are non-zero in the flattened version of a . <EoL>
<BoL> Reshapes the variable x by keeping the first outdim-1 dimension size ( s ) of x the same , and making the last dimension size of x equal to the multiplication of its remaining dimension size ( s ) . <EoL>
<BoL> Return the run-time length of a symbolic vector . <EoL>
<BoL> Horizontally stack two L { TensorType } s . <EoL>
<BoL> Computes the inverse of permutations . <EoL>
<BoL> cast ( round ( a , mode ) , 'int64 ' ) <EoL>
<BoL> Verifies the dimensionality of the var is equal to outdim . This method is usually called after flatten method on a variable , where the first outdim-1 dimension size ( s ) of the variable is kept intact , and the last dimension size of the variable is made equal to the multiplication of its remaining dimension size ( s ) , such that the variable would end up with as many dimension as outdim . <EoL>
<BoL> Implements Numpy 's `` isclose `` on tensors . <EoL>
<BoL> isinf ( a ) <EoL>
<BoL> isnan ( a ) <EoL>
<BoL> Convenience function to concatenate ` TensorType ` s along the given axis . <EoL>
<BoL> Return the [ elementwise ] largest of a variable number of arguments . <EoL>
<BoL> Reintroduces in y with length one the axes of x which have been left out in a prior reduction of x . With this option , the resulting tensor will broadcast correctly against the original tensor x . <EoL>
<BoL> Return a symbolic matrix variable . <EoL>
<BoL> Returns maximum elements obtained by iterating over given axis . <EoL>
<BoL> Returns maximum elements and their indices obtained by iterating over given axis . <EoL>
<BoL> Returns minimum elements obtained by iterating over given axis . <EoL>
<BoL> Make sure we do not try to use complex numbers . <EoL>
<BoL> Returns one of the following : <EoL>
<BoL> Return a vector of non-zero elements contained in the input array . <EoL>
<BoL> Return a scalar stored in a numpy ndarray . <EoL>
<BoL> Create a Tensor filled with ones , closer to Numpy 's syntax than `` alloc `` . <EoL>
<BoL> equivalent of numpy.ones_like <EoL>
<BoL> Return vector-vector outer product . <EoL>
<BoL> Make the input adopt a specific broadcasting pattern . <EoL>
<BoL> Range of values ( maximum - minimum ) along an axis . <EoL>
<BoL> Register a transfer function for alternative targets . <EoL>
<BoL> Convenience function to roll TensorTypes along the given axis . <EoL>
<BoL> ound_mode ( a ) with mode in [ half_away_from_zero , half_to_even ] . Default to half_to_even . <EoL>
<BoL> Return a symbolic row variable ( ndim=2 , broadcastable= [ True , False ] ) . <EoL>
<BoL> Return a symbolic scalar variable . <EoL>
<BoL> Reshape ` t ` by inserting 1 at the dimension ` axis ` . <EoL>
<BoL> Reshape ` t ` by left-padding the shape with ` n_ones ` 1s . <EoL>
<BoL> Reshape ` t ` by right-padding the shape with ` n_ones ` 1s . <EoL>
<BoL> Return the [ elementwise ] smallest of a variable number of arguments . <EoL>
<BoL> Stack tensors in sequence on given axis ( default is 0 ) . <EoL>
<BoL> Recursively stack lists of tensors to maintain similar structure . <EoL>
<BoL> Computes the standard deviation along the given axis ( es ) of a tensor ` input ` . <EoL>
<BoL> Computes the sum along the given axis ( es ) of a tensor ` input ` . <EoL>
<BoL> Return a symbolic 3-D variable . <EoL>
<BoL> Return a symbolic 4-D variable . <EoL>
<BoL> Return a symbolic 5-D variable . <EoL>
<BoL> Return a symbolic 6-D variable . <EoL>
<BoL> Return a symbolic 7-D variable . <EoL>
<BoL> Compute a generalized dot product over provided axes . <EoL>
<BoL> Tile input array ` x ` according to ` reps ` . <EoL>
<BoL> Return a version of ` var ` transferred to ` target ` . <EoL>
<BoL> Reorder the dimensions of x . ( Default : reverse them ) <EoL>
<BoL> An array with ones at and below the given diagonal and zeros elsewhere . <EoL>
<BoL> Lower triangle of an array . <EoL>
<BoL> Upper triangle of an array . <EoL>
<BoL> Make the input impossible to broadcast in the specified axes . <EoL>
<BoL> Computes the variance along the given axis ( es ) of a tensor ` input ` . <EoL>
<BoL> Return a symbolic vector variable . <EoL>
<BoL> Create a Tensor filled with zeros , closer to Numpy 's syntax than `` alloc `` . <EoL>
<BoL> equivalent of numpy.zeros_like <EoL>
<BoL> Count number of occurrences of each value in array of ints . <EoL>
<BoL> // clean up views Py_XDECREF ( xs ) ; xs = 0 ; Py_XDECREF ( ys ) ; ys = 0 ; Py_XDECREF ( zs ) ; zs = 0 ; <EoL>
<BoL> template < typename dtype > bool batch_gemm ( void ( *gemm ) ( char* , char* , const int* , const int* , const int* , const dtype* , const dtype* , const int* , const dtype* , const int* , const dtype* , dtype* , const int* ) , int type_size , PyArrayObject* xs , PyArrayObject* ys , PyArrayObject* zs ) { npy_intp *Nx = PyArray_DIMS ( xs ) , *Sx = PyArray_STRIDES ( xs ) ; npy_intp *Ny = PyArray_DIMS ( ys ) , *Sy = PyArray_STRIDES ( ys ) ; npy_intp *Nz = PyArray_DIMS ( zs ) , *Sz = PyArray_STRIDES ( zs ) ; <EoL>
<BoL> Return None or a TensorVariable whose type is in T.float_scalar_types <EoL>
<BoL> Returns None , or a list to replace node.outputs . <EoL>
<BoL> : todo : In many expressions , there are many ways to turn it into a gemm . For example dot ( a , b ) + c + d. This function should return all of them , so that if one version of gemm causes a cycle in the graph , then another application of gemm can be tried . <EoL>
<BoL> C header for the fortran blas interfaceextern `` C '' { <EoL>
<BoL> Extract a list of compilation flags from config.blas.ldflags . <EoL>
<BoL> C header for the cblas interface.// # include < stddef.h > <EoL>
<BoL> Try to detect a bug in the default BLAS in MacOS . <EoL>
<BoL> C header for MKL threads interfaceextern `` C '' { int MKL_Set_Num_Threads_Local ( int ) ; # define mkl_set_num_threads_local MKL_Set_Num_Threads_Local <EoL>
<BoL> C header for OpenBLAS threads interfaceextern `` C '' { void openblas_set_num_threads ( int ) ; void goto_set_num_threads ( int ) ; int openblas_get_num_threads ( void ) ; } <EoL>
<BoL> This function checks if the index list in idx_list is correct . <EoL>
<BoL> Return the cumulative product of the elements along a given axis . <EoL>
<BoL> Return the cumulative sum of the elements along a given axis . <EoL>
<BoL> The grad of this Op could be very easy , if it is was not for the case where zeros are present in a given `` group '' ( ie . elements reduced together to form the product ) . <EoL>
<BoL> Generate C code to allocate outputs . <EoL>
<BoL> Produce code to declare all necessary variables . <EoL>
<BoL> Make a nested loop over several arrays and associate specific code to each level of nesting . <EoL>
<BoL> Make a nested loop over several arrays and associate specific code to each level of nesting . <EoL>
<BoL> Returns a list containing a C expression representing the stride for each dimension of the ith variable , in the specified loop_order . <EoL>
<BoL> Notes -- -- - The gradient is currently implemented for matrices only . <EoL>
<BoL> Notes -- -- - The gradient is currently implemented for matrices only . <EoL>
<BoL> Return selected slices of an array along given axis . <EoL>
<BoL> Calculate the n-th order discrete difference along given axis . <EoL>
<BoL> Returns a copy of an array with all elements of the main diagonal set to a specified scalar value . <EoL>
<BoL> Returns a copy of an array with all elements of the main diagonal set to a specified scalar value . <EoL>
<BoL> Converts a tuple of index arrays into an array of flat indices , applying boundary modes to the multi-index . <EoL>
<BoL> Repeat elements of an array . <EoL>
<BoL> Find indices where elements should be inserted to maintain order . <EoL>
<BoL> Remove broadcastable dimensions from the shape of an array . <EoL>
<BoL> Return a matrix where each row correspond to the one hot encoding of each element in y . <EoL>
<BoL> Converts a flat index or array of flat indices into a tuple of coordinate arrays . <EoL>
<BoL> Given a slice [ start : stop : step ] transform it into a canonical form that respects the conventions imposed by python and numpy . <EoL>
<BoL> Given a list of inputs to the subtensor and its idx_list reorders the inputs according to the idx list to get the right values . <EoL>
<BoL> Non-blocking receive . <EoL>
<BoL> Non blocking send . <EoL>
<BoL> Load an array from an .npy file . <EoL>
<BoL> Wait as long as possible on Waits , Start Send/Recvs early . <EoL>
<BoL> Break MPI ties by using the variable tag - prefer lower tags first . <EoL>
<BoL> Blocking receive . <EoL>
<BoL> Blocking send . <EoL>
<BoL> Convert python litterals to theano constants in subtensor arguments . <EoL>
<BoL> The gradient function should return <EoL>
<BoL> Implements the `` reverse-mode '' gradient for the eigensystem of a square matrix . <EoL>
<BoL> The gradient function should return <EoL>
<BoL> The gradient function should return <EoL>
<BoL> The gradient function should return <EoL>
<BoL> Numpy-compatibility method If ` x ` is a matrix , return its diagonal . If ` x ` is a vector return a matrix with it as its diagonal . <EoL>
<BoL> Shorthand for product between several dots . <EoL>
<BoL> Raise a square matrix to the ( integer ) power n . <EoL>
<BoL> Computes the QR decomposition of a matrix . Factor the matrix a as qr , where q is orthonormal and r is upper-triangular . <EoL>
<BoL> This function performs the SVD on CPU . <EoL>
<BoL> Does not run on GPU ; Theano utilization of numpy.linalg.tensorinv ; <EoL>
<BoL> Theano utilization of numpy.linalg.tensorsolve . Does not run on GPU ! <EoL>
<BoL> Returns the sum of diagonal elements of matrix X . <EoL>
<BoL> Useful with the hack in profiling to print the MFlops . <EoL>
<BoL> Computes the output dimensions of convolving an image of shape `` inshp '' with kernels of shape `` kshp '' . <EoL>
<BoL> Return True if we will generate code that use gemm . <EoL>
<BoL> The math , where x is an input vector , and t is a target index : <EoL>
<BoL> Basic slow Python 2D or 3D convolution for DebugMode <EoL>
<BoL> Useful with the hack in profiling to print the MFlops <EoL>
<BoL> Basic slow Python unshared 2d convolution . <EoL>
<BoL> This function adds Assert nodes that check if shape is a valid convolution shape . <EoL>
<BoL> Wraps ` x ` in an ` Assert ` to check its shape . <EoL>
<BoL> Compute 1D kernel for bilinear upsampling <EoL>
<BoL> Compute 2D kernel for bilinear upsampling <EoL>
<BoL> Computes a tuple for padding given the border_mode parameter <EoL>
<BoL> Compute the crossentropy of binary random variables . <EoL>
<BoL> Compute the dot product of the specified pieces of vectors and matrices . <EoL>
<BoL> Compute the dot product of the specified pieces of vectors and matrices . <EoL>
<BoL> Compute the dot product ( plus bias ) of the specified pieces of vectors and matrices . See SparseBlockGemv to get more information . <EoL>
<BoL> Return the cross-entropy between an approximating distribution and a true distribution . <EoL>
<BoL> Computes the confusion matrix of given vectors containing actual observations and predicted observations . <EoL>
<BoL> c_code for ConvOp that unroll the batch size loop . } //for n } //for m } //for stack_size } //for n_kern } //for b Py_XDECREF ( img2d ) ; Py_XDECREF ( filtersflipped ) ; <EoL>
<BoL> Upcast input variables if necessary . <EoL>
<BoL> This generates the C code for CorrMM ( direction= '' forward '' ) , CorrMM_gradWeights ( direction= '' backprop weights '' ) , and CorrMM_gradInputs ( direction= '' backprop inputs '' ) . Depending on the direction , one of bottom , weights , top will receive the output , while the other two serve as inputs . <EoL>
<BoL> Upcast input variables if necessary . <EoL>
<BoL> Returns -- -- -- - object The cross-entropy , the softmax output , the max probability , and the argmax index . <EoL>
<BoL> Compute the element-wise exponential linear activation function [ 2 ] _ . <EoL>
<BoL> An approximation of sigmoid . <EoL>
<BoL> Check that 'rows ' is the same node as T.arange ( labels.shape [ 0 ] ) . <EoL>
<BoL> Compute the element-wise rectified linear activation function . <EoL>
<BoL> Compute the element-wise Scaled Exponential Linear unit [ 3 ] _ . <EoL>
<BoL> Compute the cross-entropy of binary random variables . <EoL>
<BoL> This method was used to generate the graph : sigmoid_prec.png in the doc . <EoL>
<BoL> Returns -- -- -- - bool True iff expr is a constant close to 1 . <EoL>
<BoL> Compute the Variable that is the output of a multiplication tree . <EoL>
<BoL> Returns -- -- -- - object If 't ' is of the form ( 1+exp ( x ) ) , return ( False , x ) . Else return None . <EoL>
<BoL> Match a variable with either of the ` exp ( x ) ` or ` -exp ( x ) ` patterns . <EoL>
<BoL> Match a variable with ` x * y * z * ... ` . <EoL>
<BoL> Match a variable with the ` -x ` pattern . <EoL>
<BoL> Parse a tree of multiplications starting at the given root . <EoL>
<BoL> Attempt to replace a leaf of a multiplication tree . <EoL>
<BoL> Simplify a multiplication tree . <EoL>
<BoL> Returns -- -- -- - object A numeric constant if v is a Constant or , well , a numeric constant . If v is a plain Variable , returns None . <EoL>
<BoL> This extract two lists , num and denum , such that the input is : self.inverse ( self.main ( \*num ) , self.main ( \*denum ) ) . It returns the two lists in a ( num , denum ) pair . <EoL>
<BoL> Utility function which takes two lists , num and denum , and returns something which is equivalent to inverse ( main ( \*num ) , main ( \*denum ) ) , but depends on the length of num and the length of denum ( in order to minimize the number of operations ) . <EoL>
<BoL> Shorthand for : <EoL>
<BoL> Find all constants and put them together into a single constant . <EoL>
<BoL> For any Variable r which is both in num and denum , removes it from both lists . <EoL>
<BoL> Return a list of shape tuple or None for the outputs of node . <EoL>
<BoL> Optimization can call this to get the current shape_i <EoL>
<BoL> Register r 's shape in the shape_of dictionary . <EoL>
<BoL> Return True if we are able to assert that x and y have the same shape . <EoL>
<BoL> Assign the shape ` s ` to previously un-shaped variable ` r ` . <EoL>
<BoL> Replace element i of shape_of [ r ] by s_i <EoL>
<BoL> Return symbolic r.shape [ i ] for tensor variable r , int i . <EoL>
<BoL> Return a tuple of symbolic shape vars for tensor variable r . <EoL>
<BoL> Return a symbolic integer scalar for the shape element s_i . <EoL>
<BoL> Replace shape of r by shape of other_r . <EoL>
<BoL> Apply as many times as required the optimization local_useless_rebroadcast and local_rebroadcast_lift . <EoL>
<BoL> Return a Variable with the same shape and dtype as the template , filled by broadcasting value through it . ` value ` will be cast as necessary . <EoL>
<BoL> Convert x/abs ( x ) into sign ( x ) . <EoL>
<BoL> Used by erf/erfc opt to track less frequent op . <EoL>
<BoL> Used by erf/erfc opt to track less frequent op . <EoL>
<BoL> Given two data types ( as strings ) , check if converting to type2 from type1 constitutes an upcast . Differs from theano.scalar.upcast <EoL>
<BoL> Given two consecutive operations , check if they are the provided pair of inverse functions . <EoL>
<BoL> Fuse consecutive add or mul in one such node with more inputs . <EoL>
<BoL> elemwise ( alloc ( x , shp ) , ... , y.TensorType ( BROADCAST CONDITION ) ) - > elemwise ( x , y.TensorType ( BROADCAST CONDITION ) ) <EoL>
<BoL> As part of specialization , we fuse two consecutive elemwise Ops of the same shape . <EoL>
<BoL> Reshape ( Reshape ( shape1 ) , shape2 ) - > Reshape ( shape2 ) <EoL>
<BoL> Partition a list of variables into two kinds : scalar constants , and the rest . <EoL>
<BoL> Sample from a normal distribution centered on avg with the specified standard deviation ( std ) . <EoL>
<BoL> Return permutations of the integers between 0 and n-1 . <EoL>
<BoL> Draw samples from a Poisson distribution . <EoL>
<BoL> Return a variable with every row ( rightmost index ) shuffled . <EoL>
<BoL> Sample a tensor of given size whose element from a uniform distribution between low and high . <EoL>
<BoL> Return indices over each shape that broadcast them to match out_shape . <EoL>
<BoL> Infer the number of dimensions from the shape or the other arguments . <EoL>
<BoL> Helper function to draw random numbers using numpy 's choice function . <EoL>
<BoL> Helper function drawing from multinomial distributions . <EoL>
<BoL> Sample from a normal distribution centered on avg with the specified standard deviation ( std ) . <EoL>
<BoL> Return permutations of the integers between 0 and n-1 . <EoL>
<BoL> Helper function to generate permutations from integers . <EoL>
<BoL> Draw samples from a Poisson distribution . <EoL>
<BoL> Helper function to draw random integers . <EoL>
<BoL> Sample from a uniform distribution between low and high . <EoL>
<BoL> Retrieve the numpy RandomState instance associated with a particular stream . <EoL>
<BoL> Set the numpy RandomState instance associated with a particular stream . <EoL>
<BoL> Create a new random stream in this container . <EoL>
<BoL> Re-initialize each random stream . <EoL>
<BoL> This function is only here to keep some pickles loading after a failed fix done in August 2011 . It can be removed after sufficient time has passed . <EoL>
<BoL> Sum of gx over dimensions to reproduce x.broadcastable . <EoL>
<BoL> Returns the k-largest elements along an axis . <EoL>
<BoL> Returns the results of both topk ( ) and argtopk ( ) in one Op . <EoL>
<BoL> Return a hash from an ndarray . <EoL>
<BoL> Compute the numeric shape of all intermediate variables given input shapes . <EoL>
<BoL> Generate argv for nosetest command <EoL>
<BoL> Creates a new storage in shared memory with the same data type <EoL>
<BoL> Casts this storage to byte type <EoL>
<BoL> Casts this storage to char type <EoL>
<BoL> Returns a copy of this storage <EoL>
<BoL> Returns a CPU copy of this storage if it 's not already on the CPU <EoL>
<BoL> Returns a copy of this object in CUDA memory . <EoL>
<BoL> Casts this storage to double type <EoL>
<BoL> Casts this storage to float type <EoL>
<BoL> Casts this storage to half type <EoL>
<BoL> Casts this storage to int type <EoL>
<BoL> Casts this storage to long type <EoL>
<BoL> Copies the storage to pinned memory , if it 's not already pinned . <EoL>
<BoL> Moves the storage to shared memory . <EoL>
<BoL> Casts this storage to short type <EoL>
<BoL> Returns a list containing the elements of this storage <EoL>
<BoL> Returns the type if ` dtype ` is not provided , else casts this object to the specified type . <EoL>
<BoL> See : func : ` torch.argmax ` <EoL>
<BoL> See : func : ` torch.argmin ` <EoL>
<BoL> Computes the gradient of current tensor w.r.t . graph leaves . <EoL>
<BoL> See : func : ` torch.btrifact ` <EoL>
<BoL> Returns true if this tensor resides in pinned memory <EoL>
<BoL> Checks if tensor is in shared memory . <EoL>
<BoL> Registers a backward hook . <EoL>
<BoL> Enables .grad attribute for non-leaf Tensors . <EoL>
<BoL> Moves the underlying storage to shared memory . <EoL>
<BoL> See : func : ` torch.split ` <EoL>
<BoL> Returns the unique scalar elements of the tensor as a 1-D tensor . <EoL>
<BoL> view_as ( other ) - > Tensor <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Flatten dense tensors into a contiguous 1D buffer . Assume tensors are of same dense type . <EoL>
<BoL> Flatten sparse tensors into two contiguous 1D buffers , one of indices and one of values . Assume tensors are of same sparse type . <EoL>
<BoL> Assume that tensors are of same order as ordered_tensors within their types , e.g. , from _take_tensors . Reorder them to be of same order as ordered_tensors . <EoL>
<BoL> Group tensors into chunks . This generator yields a chunk at each time , each containing tensors of same type up to certain byte limit in total size . <EoL>
<BoL> View a flat buffer using the sizes of tensors . Assume that tensors are of same dense type , and that flat is given by _flatten_dense_tensors . <EoL>
<BoL> View flat buffer ( containing indices and values ) using the sizes of tensors . Assume that tensors are of same sparse type , and that flat is given by _flatten_sparse_tensors . <EoL>
<BoL> Returns the indices of the maximum values of a tensor across a dimension . <EoL>
<BoL> Returns the indices of the minimum values of a tensor across a dimension . <EoL>
<BoL> Marks given tensors as modified in an in-place operation . <EoL>
<BoL> Marks outputs as non-differentiable . <EoL>
<BoL> Saves given tensors for a future call to : func : ` ~Function.backward ` . <EoL>
<BoL> Computes the sum of gradients of given tensors w.r.t . graph leaves . <EoL>
<BoL> Defines a formula for differentiating the operation . <EoL>
<BoL> Performs the operation . <EoL>
<BoL> Marks Function as traceable for the JIT . <EoL>
<BoL> Check gradients computed via small finite differences against analytical gradients w.r.t . tensors in : attr : ` inputs ` that are of floating point type and with `` requires_grad=True `` . <EoL>
<BoL> Exports an EventList as a Chrome tracing tools file . <EoL>
<BoL> Averages all function events over their keys . <EoL>
<BoL> Prints an EventList as a nicely formatted table . <EoL>
<BoL> Averages all events . <EoL>
<BoL> Prints a summary of events ( which can be a list of FunctionEvent or FunctionEventAvg ) . <EoL>
<BoL> Demangle a C++ identifier using c++filt <EoL>
<BoL> Defines how to format time in FunctionEvent <EoL>
<BoL> Opens an nvprof trace file and parses autograd annotations . <EoL>
<BoL> Returns whether PyTorch is built with MKL support . <EoL>
<BoL> Batch LU factorization . <EoL>
<BoL> Unpacks the data and pivots from a batched LU factorization ( btrifact ) of a tensor . <EoL>
<BoL> Returns the time elapsed before the event was recorded . <EoL>
<BoL> Returns an IPC handle of this event . <EoL>
<BoL> Checks if the event has been recorded . <EoL>
<BoL> Records the event in a given stream . <EoL>
<BoL> Synchronizes with the event . <EoL>
<BoL> Makes a given stream wait for the event . <EoL>
<BoL> Checks if all the work submitted has been completed . <EoL>
<BoL> Records an event . <EoL>
<BoL> Wait for all the kernels in this stream to complete . <EoL>
<BoL> Makes all future work submitted to the stream wait for an event . <EoL>
<BoL> Synchronizes with another stream . <EoL>
<BoL> Found GPU % d % s which requires CUDA_VERSION > = % d for optimal performance and fast startup time , but your PyTorch was compiled with CUDA_VERSION % d . <EoL>
<BoL> Broadcasts a tensor to a number of GPUs . <EoL>
<BoL> Broadcasts a sequence tensors to the specified GPUs . Small tensors are first coalesced into a buffer to reduce the number of synchronizations . <EoL>
<BoL> Gathers tensors from multiple GPUs . <EoL>
<BoL> Sums tensors from multiple GPUs . <EoL>
<BoL> Sums tensors from multiple GPUs . <EoL>
<BoL> Scatters tensor across multiple GPUs . <EoL>
<BoL> Returns cublasHandle_t pointer to current cuBLAS handle <EoL>
<BoL> Returns the index of a currently selected device . <EoL>
<BoL> Returns a currently selected : class : ` Stream ` . <EoL>
<BoL> Returns the number of GPUs available . <EoL>
<BoL> Releases all unoccupied cached memory currently held by the caching allocator so that those can be used in other GPU application and visible in ` nvidia-smi ` . <EoL>
<BoL> Gets the cuda capability of a device . <EoL>
<BoL> Gets the name of a device . <EoL>
<BoL> Returns the random number generator state of the current GPU as a ByteTensor . <EoL>
<BoL> Returns a tuple of ByteTensor representing the random number states of all devices . <EoL>
<BoL> Initialize PyTorch 's CUDA state . <EoL>
<BoL> Returns the current random seed of the current GPU . <EoL>
<BoL> Returns a bool indicating if CUDA is currently available . <EoL>
<BoL> Sets the seed for generating random numbers for the current GPU . It 's safe to call this function if CUDA is not available ; in that case , it is silently ignored . <EoL>
<BoL> Sets the seed for generating random numbers on all GPUs . It 's safe to call this function if CUDA is not available ; in that case , it is silently ignored . <EoL>
<BoL> Returns the maximum GPU memory usage by tensors in bytes for a given device . <EoL>
<BoL> Returns the maximum GPU memory managed by the caching allocator in bytes for a given device . <EoL>
<BoL> Returns the current GPU memory usage by tensors in bytes for a given device . <EoL>
<BoL> Returns the current GPU memory managed by the caching allocator in bytes for a given device . <EoL>
<BoL> Describe an instantaneous event that occurred at some point . <EoL>
<BoL> Pops a range off of a stack of nested range spans . Returns the zero-based depth of the range that is ended . <EoL>
<BoL> Pushes a range onto a stack of nested range span . Returns zero-based depth of the range that is started . <EoL>
<BoL> Sets the seed for generating random numbers to a random number for the current GPU . It 's safe to call this function if CUDA is not available ; in that case , it is silently ignored . <EoL>
<BoL> Sets the seed for generating random numbers to a random number on all GPUs . It 's safe to call this function if CUDA is not available ; in that case , it is silently ignored . <EoL>
<BoL> Sets the random number generator state of the current GPU . <EoL>
<BoL> Sets the random number generator state of all devices . <EoL>
<BoL> Sets the current device . <EoL>
<BoL> Context-manager that selects a given stream . <EoL>
<BoL> Waits for all kernels in all streams on current device to complete . <EoL>
<BoL> Clear the created distributed group 's cached resource <EoL>
<BoL> Gathers tensors from the whole group in a list . <EoL>
<BoL> Reduces the tensor data across all machines in such a way that all get the final result . <EoL>
<BoL> Reduces the tensor data across all machines in such a way that all get the final result . <EoL>
<BoL> Synchronizes all processes . <EoL>
<BoL> Broadcasts the tensor to the whole group . <EoL>
<BoL> Broadcasts the tensor to the whole group with multiple GPU tensors per node . <EoL>
<BoL> Destroy the initialized distributed package <EoL>
<BoL> Gathers a list of tensors in a single process . <EoL>
<BoL> Returns the rank of current process . <EoL>
<BoL> Returns the number of processes in the distributed group . <EoL>
<BoL> Initializes the distributed package . <EoL>
<BoL> Receives a tensor asynchronously . <EoL>
<BoL> Checking if the process group has been initialized <EoL>
<BoL> Sends a tensor asynchronously . <EoL>
<BoL> Creates a new distributed group . <EoL>
<BoL> Receives a tensor synchronously . <EoL>
<BoL> Reduces the tensor data across all machines . <EoL>
<BoL> Reduces the tensor data on multiple GPUs across all machines . Each tensor in `` tensor_list `` should reside on a separate GPU <EoL>
<BoL> Scatters a list of tensors to all processes in a group . <EoL>
<BoL> Sends a tensor synchronously . <EoL>
<BoL> Computes the transform ` x = > y ` . <EoL>
<BoL> Inverts the transform ` y = > x ` . <EoL>
<BoL> Computes the log det jacobian ` log |dy/dx| ` given input and output . <EoL>
<BoL> Returns the size of the sample returned by the distribution , given a ` sample_shape ` . <EoL>
<BoL> Argument validation for distribution methods such as ` log_prob ` , ` cdf ` and ` icdf ` . The rightmost dimensions of a value to be scored via these methods must agree with the distribution 's batch and event shapes . <EoL>
<BoL> Returns the cumulative density/mass function evaluated at ` value ` . <EoL>
<BoL> Returns the inverse cumulative density/mass function evaluated at ` value ` . <EoL>
<BoL> Returns perplexity of distribution , batched over batch_shape . <EoL>
<BoL> Generates a sample_shape shaped reparameterized sample or sample_shape shaped batch of reparameterized samples if the distribution parameters are batched . <EoL>
<BoL> Generates n samples or n batches of samples if the distribution parameters are batched . <EoL>
<BoL> Returns tensor containing all values supported by a discrete distribution . The result will enumerate over dimension 0 , so the shape of the result will be ` ( cardinality , ) + batch_shape + event_shape ` ( where ` event_shape = ( ) ` for univariate distributions ) . <EoL>
<BoL> Generates a sample_shape shaped sample or sample_shape shaped batch of samples if the distribution parameters are batched . <EoL>
<BoL> Returns entropy of distribution , batched over batch_shape . <EoL>
<BoL> Abstract method to compute forward transformation . <EoL>
<BoL> Abstract method to compute inverse transformation . <EoL>
<BoL> Returns the log of the probability density/mass function evaluated at ` value ` . <EoL>
<BoL> Abstract method for log normalizer function . Returns a log normalizer based on the distribution and input <EoL>
<BoL> Method to compute the entropy using Bregman divergence of the log normalizer . <EoL>
<BoL> This conditionally flips `` value - > 1-value `` to ensure : meth : ` cdf ` is monotone increasing . <EoL>
<BoL> Computes the cumulative distribution function by inverting the transform ( s ) and computing the score of the base distribution . <EoL>
<BoL> Computes the inverse cumulative distribution function using transform ( s ) and computing the score of the base distribution . <EoL>
<BoL> Scores the sample by inverting the transform ( s ) and computing the score using the score of the base distribution and the log abs det jacobian . <EoL>
<BoL> Generates a sample_shape shaped reparameterized sample or sample_shape shaped batch of reparameterized samples if the distribution parameters are batched . Samples first from base distribution and applies ` transform ( ) ` for every transform in the list . <EoL>
<BoL> Generates a sample_shape shaped sample or sample_shape shaped batch of samples if the distribution parameters are batched . Samples first from base distribution and applies ` transform ( ) ` for every transform in the list . <EoL>
<BoL> Given a list of values ( possibly containing numbers ) , returns a list where each value is broadcasted based on the following rules : - ` torch . <EoL>
<BoL> Converts a tensor of logits into probabilities . Note that for the binary case , each value denotes log odds , whereas for the multi-dimensional case , the values along the last dimension denote the log probabilities ( possibly unnormalized ) of the events . <EoL>
<BoL> Converts a tensor of probabilities into logits . <EoL>
<BoL> Numerically stable implementation for the ` LogSumExp ` operation . The summing is done along the last dimension . <EoL>
<BoL> Looks up a transform to constrained space , given a constraint object . Usage : : <EoL>
<BoL> Registers a : class : ` ~torch.distributions.constraints.Constraint ` subclass in this registry . Usage : : <EoL>
<BoL> Returns a byte tensor of ` sample_shape + batch_shape ` indicating whether each event in value satisfies this constraint . <EoL>
<BoL> Given a batch of matrices , returns the lower triangular part of each matrix , with the other entries set to 0 . The argument ` diagonal ` has the same meaning as in ` torch.tril ` . <EoL>
<BoL> Return floating point info about a ` Tensor ` : - ` .eps ` is the smallest number that can be added to 1 without being lost . - ` .tiny ` is the smallest positive number greater than zero ( much smaller than ` .eps ` ) . <EoL>
<BoL> Sum out `` dim `` many rightmost dimensions of a given tensor . <EoL>
<BoL> Returns the diagonals of a batch of square matrices . <EoL>
<BoL> Returns the inverses of a batch of square matrices . <EoL>
<BoL> Computes the squared Mahalanobis distance : math : ` \mathbf { x } ^\top\mathbf { M } ^ { -1 } \mathbf { x } ` for a factored : math : ` \mathbf { M } = \mathbf { L } \mathbf { L } ^\top ` . <EoL>
<BoL> Utility function for calculating the trace of XX^ { T } with X having arbitrary trailing batch dimensions <EoL>
<BoL> Find the most specific approximate match , assuming single inheritance . <EoL>
<BoL> Helper function for obtaining infinite KL Divergence throughout <EoL>
<BoL> Utility function for calculating x log x <EoL>
<BoL> Compute Kullback-Leibler divergence : math : ` KL ( p \| q ) ` between two distributions . <EoL>
<BoL> Decorator to register a pairwise function with : meth : ` kl_divergence ` . Usage : : <EoL>
<BoL> Performs a batched matrix-vector product , with compatible but different batch shapes . <EoL>
<BoL> Applies a Cholesky decomposition to all matrices in a batch of arbitrary shape . <EoL>
<BoL> Given a batch of matrices and a batch of vectors , compute the combined ` batch_shape ` . <EoL>
<BoL> Pads tensor . <EoL>
<BoL> Given a list of tensor sizes , returns the size of the resulting broadcasted tensor . <EoL>
<BoL> Returns a new tensor with boolean elements representing if each element is ` NaN ` or not . <EoL>
<BoL> Splits the tensor into chunks . <EoL>
<BoL> Returns the unique scalar elements of the input tensor as a 1-D tensor . <EoL>
<BoL> Returns the random number generator state as a ` torch.ByteTensor ` . <EoL>
<BoL> Returns the initial seed for generating random numbers as a Python ` long ` . <EoL>
<BoL> Returns True if ` obj ` is a PyTorch storage object . <EoL>
<BoL> Returns True if ` obj ` is a PyTorch tensor . <EoL>
<BoL> Copies parameters and buffers from : attr : ` state_dict ` into only this module , but not its descendants . <EoL>
<BoL> Adds a child module to the current module . <EoL>
<BoL> Applies `` fn `` recursively to every submodule ( as returned by `` .children ( ) `` ) as well as self . Typical use includes initializing the parameters of a model ( see also : ref : ` torch-nn-init ` ) . <EoL>
<BoL> Returns an iterator over immediate children modules . <EoL>
<BoL> Moves all model parameters and buffers to the CPU . <EoL>
<BoL> Moves all model parameters and buffers to the GPU . <EoL>
<BoL> Casts all floating point parameters and buffers to `` double `` datatype . <EoL>
<BoL> Sets the module in evaluation mode . <EoL>
<BoL> Set the extra representation of the module <EoL>
<BoL> Casts all floating point parameters and buffers to float datatype . <EoL>
<BoL> Casts all floating point parameters and buffers to `` half `` datatype . <EoL>
<BoL> Copies parameters and buffers from : attr : ` state_dict ` into this module and its descendants . If : attr : ` strict ` is `` True `` , then the keys of : attr : ` state_dict ` must exactly match the keys returned by this module 's : meth : ` ~torch.nn.Module.state_dict ` function . <EoL>
<BoL> Returns an iterator over all modules in the network . <EoL>
<BoL> Returns an iterator over immediate children modules , yielding both the name of the module as well as the module itself . <EoL>
<BoL> Returns an iterator over all modules in the network , yielding both the name of the module as well as the module itself . <EoL>
<BoL> Returns an iterator over module parameters , yielding both the name of the parameter as well as the parameter itself <EoL>
<BoL> Returns an iterator over module parameters . <EoL>
<BoL> Registers a backward hook on the module . <EoL>
<BoL> Adds a persistent buffer to the module . <EoL>
<BoL> Registers a forward hook on the module . <EoL>
<BoL> Registers a forward pre-hook on the module . <EoL>
<BoL> Adds a parameter to the module . <EoL>
<BoL> Returns a dictionary containing a whole state of the module . <EoL>
<BoL> Moves and/or casts the parameters and buffers . <EoL>
<BoL> Sets the module in training mode . <EoL>
<BoL> Casts all parameters and buffers to : attr : ` dst_type ` . <EoL>
<BoL> Sets gradients of all model parameters to zero . <EoL>
<BoL> Defines the computation performed at every call . <EoL>
<BoL> Get the absolute index for the list of modules <EoL>
<BoL> Appends a given module to the end of the list . <EoL>
<BoL> Appends modules from a Python iterable to the end of the list . <EoL>
<BoL> Appends a given parameter at the end of the list . <EoL>
<BoL> Appends parameters from a Python iterable to the end of the list . <EoL>
<BoL> Get the idx-th item of the iterato <EoL>
<BoL> Creates a function which , given a string variable name , returns the value of the variable in the scope of the caller of the function which called createResolutionCallback ( by default ) . For example , the following program prints 2 : : <EoL>
<BoL> Trace a function or model , returning a tuple consisting of the both the *trace* of an execution , as well as the original return value . <EoL>
<BoL> Trace a function and return an executable trace that will be optimized using just-in-time compilation . <EoL>
<BoL> Verify that a JIT compiled model has the same behavior as its uncompiled version along with its backwards pass . If your model returns multiple outputs , you must also specify a ` loss_fn ` to produce a loss for which the backwards will be computed . <EoL>
<BoL> Loads an object saved with : func : ` torch.save ` from a file . <EoL>
<BoL> Sets the seed for generating random numbers . Returns a ` torch._C.Generator ` object . <EoL>
<BoL> Returns a set of sharing strategies supported on a current system . <EoL>
<BoL> Returns the current strategy for sharing CPU tensors . <EoL>
<BoL> Register a reduce function for a type . <EoL>
<BoL> Sets the strategy for sharing CPU tensors . <EoL>
<BoL> Given input tensor , and output of ` self.head ` , compute the log of the full distribution <EoL>
<BoL> Computes log probabilities for all : math : ` n\_classes ` <EoL>
<BoL> This is equivalent to ` self.log_pob ( input ) .argmax ( dim=1 ) ` , but is more efficient in some cases . <EoL>
<BoL> Creates Embedding instance from given 2-dimensional FloatTensor . <EoL>
<BoL> Resets parameter data pointer so that they can use faster code paths . <EoL>
<BoL> Draw a sample from the Gumbel-Softmax distribution <EoL>
<BoL> Sample from Gumbel ( 0 , 1 ) <EoL>
<BoL> Applies a 2D adaptive average pooling over an input signal composed of several input planes . <EoL>
<BoL> Applies a 3D adaptive average pooling over an input signal composed of several input planes . <EoL>
<BoL> Applies a 1D adaptive max pooling over an input signal composed of several input planes . <EoL>
<BoL> Applies a 2D adaptive max pooling over an input signal composed of several input planes . <EoL>
<BoL> Applies a 3D adaptive max pooling over an input signal composed of several input planes . <EoL>
<BoL> Generates a 2d flow field , given a batch of affine matrices : attr : ` theta ` Generally used in conjunction with : func : ` grid_sample ` to implement Spatial Transformer Networks . <EoL>
<BoL> Applies alpha dropout to the input . <EoL>
<BoL> Applies a 1-dimensional sequence convolution over an input sequence . Input and output dimensions are ( Time , Batch , Channels ) - hence TBC . <EoL>
<BoL> Returns cosine similarity between x1 and x2 , computed along dim . <EoL>
<BoL> Applies element-wise , : math : ` \text { ELU } ( x ) = \max ( 0 , x ) + \min ( 0 , \alpha * ( \exp ( x ) - 1 ) ) ` . <EoL>
<BoL> Combines an array of sliding local blocks into a large containing tensor . <EoL>
<BoL> glu ( input , dim=-1 ) - > Tensor <EoL>
<BoL> Given an : attr : ` input ` and a flow-field : attr : ` grid ` , computes the ` output ` using input pixel locations from the grid . <EoL>
<BoL> Applies Group Normalization for last certain number of dimensions . <EoL>
<BoL> Sample from the Gumbel-Softmax distribution and optionally discretize . <EoL>
<BoL> hardshrink ( input , lambd=0.5 ) - > Tensor <EoL>
<BoL> hardtanh ( input , min_val=-1. , max_val=1. , inplace=False ) - > Tensor <EoL>
<BoL> Down/up samples the input to either the given : attr : ` size ` or the given : attr : ` scale_factor ` <EoL>
<BoL> The ` Kullback-Leibler divergence ` _ Loss . <EoL>
<BoL> l1_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> Applies Layer Normalization for last certain number of dimensions . <EoL>
<BoL> leaky_relu ( input , negative_slope=0.01 , inplace=False ) - > Tensor <EoL>
<BoL> Applies a linear transformation to the incoming data : : math : ` y = xA^T + b ` . <EoL>
<BoL> Applies local response normalization over an input signal composed of several input planes , where channels occupy the second dimension . Applies normalization across channels . <EoL>
<BoL> Applies a softmax followed by a logarithm . <EoL>
<BoL> Applies a 1D power-average pooling over an input signal composed of several input planes . If the sum of all inputs to the power of ` p ` is zero , the gradient is set to zero as well . <EoL>
<BoL> Applies a 2D power-average pooling over an input signal composed of several input planes . If the sum of all inputs to the power of ` p ` is zero , the gradient is set to zero as well . <EoL>
<BoL> mse_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> multilabel_margin_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> Performs : math : ` L_p ` normalization of inputs over specified dimension . <EoL>
<BoL> See : class : ` torch.nn.PairwiseDistance ` for details <EoL>
<BoL> Rearranges elements in a tensor of shape : math : ` [ * , C*r^2 , H , W ] ` to a tensor of shape : math : ` [ C , H*r , W*r ] ` . <EoL>
<BoL> elu ( input , inplace=False ) - > Tensor <EoL>
<BoL> elu6 ( input , inplace=False ) - > Tensor <EoL>
<BoL> elu ( input , lower=1./8 , upper=1./3 , training=False , inplace=False ) - > Tensor <EoL>
<BoL> selu ( input , inplace=False ) - > Tensor <EoL>
<BoL> sigmoid ( input ) - > Tensor <EoL>
<BoL> Function that uses a squared term if the absolute element-wise error falls below 1 and an L1 term otherwise . <EoL>
<BoL> soft_margin_loss ( input , target , size_average=None , reduce=None , reduction='elementwise_mean ' ) - > Tensor <EoL>
<BoL> Applies a softmax function . <EoL>
<BoL> Applies a softmin function . <EoL>
<BoL> softsign ( input ) - > Tensor <EoL>
<BoL> tanh ( input ) - > Tensor <EoL>
<BoL> tanhshrink ( input ) - > Tensor <EoL>
<BoL> Thresholds each element of the input Tensor . <EoL>
<BoL> Extracts sliding local blocks from an batched input tensor . <EoL>
<BoL> Upsamples the input to either the given : attr : ` size ` or the given : attr : ` scale_factor ` <EoL>
<BoL> Upsamples the input , using bilinear upsampling . <EoL>
<BoL> Upsamples the input , using nearest neighbours ' pixel values . <EoL>
<BoL> Computes the gradient of conv1d with respect to the input of the convolution . <EoL>
<BoL> Computes the gradient of conv1d with respect to the weight of the convolution . <EoL>
<BoL> Computes the gradient of conv2d with respect to the input of the convolution . <EoL>
<BoL> Computes the gradient of conv2d with respect to the weight of the convolution . <EoL>
<BoL> Computes the gradient of conv3d with respect to the input of the convolution . <EoL>
<BoL> Computes the gradient of conv3d with respect to the weight of the convolution . <EoL>
<BoL> Return the recommended gain value for the given nonlinearity function . The values are as follows : <EoL>
<BoL> Fills the input Tensor with the value : math : ` \text { val } ` . <EoL>
<BoL> Fills the { 3 , 4 , 5 } -dimensional input ` Tensor ` with the Dirac delta function . Preserves the identity of the inputs in ` Convolutional ` layers , where as many input channels are preserved as possible . <EoL>
<BoL> Fills the 2-dimensional input ` Tensor ` with the identity matrix . Preserves the identity of the inputs in ` Linear ` layers , where as many inputs are preserved as possible . <EoL>
<BoL> Fills the input ` Tensor ` with values according to the method described in `` Delving deep into rectifiers : Surpassing human-level performance on ImageNet classification '' - He , K. et al . ( 2015 ) , using a normal distribution . The resulting tensor will have values sampled from : math : ` \mathcal { N } ( 0 , \text { std } ) ` where <EoL>
<BoL> Fills the input ` Tensor ` with values according to the method described in `` Delving deep into rectifiers : Surpassing human-level performance on ImageNet classification '' - He , K. et al . ( 2015 ) , using a uniform distribution . The resulting tensor will have values sampled from : math : ` \mathcal { U } ( -\text { bound } , \text { bound } ) ` where <EoL>
<BoL> Fills the input Tensor with values drawn from the normal distribution : math : ` \mathcal { N } ( \text { mean } , \text { std } ) ` . <EoL>
<BoL> Fills the input Tensor with ones ` . <EoL>
<BoL> Fills the input ` Tensor ` with a ( semi ) orthogonal matrix , as described in `` Exact solutions to the nonlinear dynamics of learning in deep linear neural networks '' - Saxe , A. et al . <EoL>
<BoL> Fills the 2D input ` Tensor ` as a sparse matrix , where the non-zero elements will be drawn from the normal distribution : math : ` \mathcal { N } ( 0 , 0.01 ) ` , as described in `` Deep learning via Hessian-free optimization '' - Martens , J . ( 2010 ) . <EoL>
<BoL> Fills the input Tensor with values drawn from the uniform distribution : math : ` \mathcal { U } ( a , b ) ` . <EoL>
<BoL> Fills the input ` Tensor ` with values according to the method described in `` Understanding the difficulty of training deep feedforward neural networks '' - Glorot , X . <EoL>
<BoL> Fills the input ` Tensor ` with values according to the method described in `` Understanding the difficulty of training deep feedforward neural networks '' - Glorot , X . <EoL>
<BoL> Fills the input Tensor with zeros ` . <EoL>
<BoL> Returns copy with ` self.data ` cast to byte type <EoL>
<BoL> Returns copy with ` self.data ` cast to char type <EoL>
<BoL> Returns a CPU copy if ` self.data ` not already on the CPU <EoL>
<BoL> Returns a GPU copy if ` self.data ` not already on the GPU <EoL>
<BoL> Returns copy with ` self.data ` cast to double type <EoL>
<BoL> Returns copy with ` self.data ` cast to float type <EoL>
<BoL> Returns copy with ` self.data ` cast to half type <EoL>
<BoL> Returns copy with ` self.data ` cast to int type <EoL>
<BoL> Returns copy with ` self.data ` cast to long type <EoL>
<BoL> Returns copy with ` self.data ` cast to short type <EoL>
<BoL> Performs dtype and/or device conversion on ` self.data ` . <EoL>
<BoL> Broadcast a sequence of tensors to the default group from rank 0 . Small tensors are first coalesced into a buffer to reduce the number of broadcasts . <EoL>
<BoL> This function registers the callback all-reduction function for the NCCL backend . <EoL>
<BoL> Gets a background stream for copying between CPU and GPU <EoL>
<BoL> Evaluates module ( input ) in parallel across the GPUs given in device_ids . <EoL>
<BoL> Gathers tensors from different GPUs on a specified device ( -1 means the CPU ) . <EoL>
<BoL> Applies each ` module ` in : attr : ` modules ` in parallel on arguments contained in : attr : ` inputs ` ( positional ) and : attr : ` kwargs_tup ` ( keyword ) on each of : attr : ` devices ` . <EoL>
<BoL> Scatter with support for kwargs dictionary <EoL>
<BoL> Slices tensors into approximately equal chunks and distributes them across given GPUs . Duplicates references to objects that are not tensors . <EoL>
<BoL> Clips gradient norm of an iterable of parameters . <EoL>
<BoL> Clips gradient norm of an iterable of parameters . <EoL>
<BoL> Clips gradient of an iterable of parameters at specified value . <EoL>
<BoL> This helper function is to check if the parameters are located in the same device . <EoL>
<BoL> Convert parameters to one vector <EoL>
<BoL> Convert one vector to the parameters <EoL>
<BoL> Removes the spectral normalization reparameterization from a module . <EoL>
<BoL> Removes the weight normalization reparameterization from a module . <EoL>
<BoL> Packs a Tensor containing padded sequences of variable length . <EoL>
<BoL> Packs a list of variable length Tensors <EoL>
<BoL> Pads a packed batch of variable length sequences . <EoL>
<BoL> Pad a list of variable length Tensors with zero <EoL>
<BoL> Applies spectral normalization to a parameter in the given module . <EoL>
<BoL> Applies weight normalization to a parameter in the given module . <EoL>
<BoL> Decorator to override ONNX export of the a function with specified subgraph . <EoL>
<BoL> Decorator to override ONNX export of the a function with specified subgraph . <EoL>
<BoL> Decorator to override ONNX export of the a function with specified subgraph . <EoL>
<BoL> Add a param group to the : class : ` Optimizer ` s ` param_groups ` . <EoL>
<BoL> Loads the optimizer state.Make a deep copy of value , casting all tensors to device of param . <EoL>
<BoL> Returns the state of the optimizer as a : class : ` dict ` . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Clears the gradients of all optimized : class : ` torch.Tensor ` s . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step ( parameter update ) . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Performs a single optimization step . <EoL>
<BoL> Loads the schedulers state . <EoL>
<BoL> Returns the state of the scheduler as a : class : ` dict ` . <EoL>
<BoL> Resets num_bad_epochs counter and cooldown counter . <EoL>
<BoL> Forks the RNG , so that when you return , the RNG is reset to the state that it was previously in . <EoL>
<BoL> Sets the random number generator state . <EoL>
<BoL> Saves an object to a disk file . <EoL>
<BoL> Checks if f is a file that should be read directly . It should be read directly if it is backed by a real file ( has a fileno ) and is not a a compressed file ( e.g . gzip ) <EoL>
<BoL> Executes a body function with a file object for f , opening it in 'mode ' if it is a string filename . <EoL>
<BoL> Sets the default floating point dtype to : attr : ` d ` . This type will be used as default floating point type for type inference in : func : ` torch.tensor ` . <EoL>
<BoL> Sets the default `` torch.Tensor `` type to floating point tensor type : attr : ` t ` . This type will also be used as default floating point type for type inference in : func : ` torch.tensor ` . <EoL>
<BoL> Recursively add the gradient of two objects . <EoL>
<BoL> Append a statement to the current statement . <EoL>
<BoL> Append a statement to the current block . <EoL>
<BoL> Insert statements at the top of the function body . <EoL>
<BoL> Prepend a statement to the current statement . <EoL>
<BoL> Prepend a statement to the current block . <EoL>
<BoL> Remove the given node . <EoL>
<BoL> Visit a series of nodes in a node body . <EoL>
<BoL> Turn an AST into ANF-like form . <EoL>
<BoL> Find pushes and pops to the stack and annotate them as such . <EoL>
<BoL> Parse a function into an AST with function calls resolved . <EoL>
<BoL> Find unused definitions that can be remove . <EoL>
<BoL> Calculate the size of ` x ` along ` axis ` dimensions only . <EoL>
<BoL> Copy a node but keep its annotations intact . <EoL>
<BoL> Get the name of a variable . <EoL>
<BoL> Return the variable names created or mutated by this statement . <EoL>
<BoL> Check whether a context manager calls ` insert_grad_of ` . <EoL>
<BoL> A functional form of the ` astype ` method . <EoL>
<BoL> Gradient of the max operator with tie breaking . <EoL>
<BoL> Given a CFG with outgoing links , create incoming links . <EoL>
<BoL> Build a CFG for a function . <EoL>
<BoL> Link this node to the current leaves . <EoL>
<BoL> Perform a given analysis on all functions within an AST . <EoL>
<BoL> Add a comment to the given node . <EoL>
<BoL> Remove comments that repeat themselves . <EoL>
<BoL> Compile by saving to file and importing that . <EoL>
<BoL> Convert an AST or string into a function with inspectable source . <EoL>
<BoL> Given a variable , create a variable for the gradient . <EoL>
<BoL> Create a temporary variable . <EoL>
<BoL> Create a variable to store partial gradients . <EoL>
<BoL> Creates a LanguageFence . <EoL>
<BoL> Call this function to validate an AST . <EoL>
<BoL> Visit assignment statement . <EoL>
<BoL> Tangent of e.g . x = y.z <EoL>
<BoL> Tangent of e.g . x = y <EoL>
<BoL> Tangent of e.g . x = None <EoL>
<BoL> Tangent of e.g . x = 0 <EoL>
<BoL> Tangent of e.g . x = y [ i ] <EoL>
<BoL> Perform forward-mode AD on an AST . <EoL>
<BoL> Creates a customized copy of the Parameter . <EoL>
<BoL> Private method . Do n't use directly . <EoL>
<BoL> Get a BoundArguments object , that maps the passed ` args ` and ` kwargs ` to the function 's signature . Raises ` TypeError ` if the passed arguments can not be bound . <EoL>
<BoL> Get a BoundArguments object , that partially maps the passed ` args ` and ` kwargs ` to the function 's signature . Raises ` TypeError ` if the passed arguments can not be bound . <EoL>
<BoL> Constructs Signature for the given python function <EoL>
<BoL> Creates a customized copy of the Signature . Pass 'parameters ' and/or 'return_annotation ' arguments to override them in the new copy . <EoL>
<BoL> Get a signature object for the passed callable . <EoL>
<BoL> Gradient of NumPy dot product w.r.t . to the left hand side . <EoL>
<BoL> Create a user-friendly forward function . <EoL>
<BoL> Create a user-friendly gradient function . <EoL>
<BoL> Perform AD on a single function and return the AST . <EoL>
<BoL> d|A|/dA = adj ( A ) .T <EoL>
<BoL> Finds functions that do not have implemented derivatives . <EoL>
<BoL> Initialize the gradient for an object . <EoL>
<BoL> The context manager that allows insertion of arbitrary adjoint code . <EoL>
<BoL> Implementation of dtfmatmul wrt x , separate for readability . <EoL>
<BoL> Implementation of dtfmatmul , separate for readability . <EoL>
<BoL> Access unwrapped versions of methods . <EoL>
<BoL> Construct a namer object for a given function scope . <EoL>
<BoL> When the name is too long , use the LHS or a random string instead . <EoL>
<BoL> Make a variable name unique by appending a number if needed . <EoL>
<BoL> Ensure a variable name is valid . <EoL>
<BoL> Name for the adjoint of a function . <EoL>
<BoL> Find the arguments and variables assigned to in a certain node . <EoL>
<BoL> Name for a function in joint mode . <EoL>
<BoL> Name for the primal of a function . <EoL>
<BoL> Name for a function in forward mode . <EoL>
<BoL> Make sure that a method returns a unique name . <EoL>
<BoL> Make sure that a method returns a unique name . <EoL>
<BoL> Check how many times a variable definition was used . <EoL>
<BoL> Pop a value from the stack ( i.e . read it from the tape ) . <EoL>
<BoL> Proxy of pop , where we know we 're popping a stack off of a stack . <EoL>
<BoL> Push a value onto the stack ( i.e . record it on the tape ) . <EoL>
<BoL> Proxy of push , where we know we 're pushing a stack onto a stack . <EoL>
<BoL> Get the source of a function and return its AST . <EoL>
<BoL> Parse a string into an AST . <EoL>
<BoL> Go from source code to AST nodes . <EoL>
<BoL> Return source code of a given AST . <EoL>
<BoL> Go from an AST to source code . <EoL>
<BoL> Register a new gradient initializer . <EoL>
<BoL> Register a new shape function . <EoL>
<BoL> Register a new unbroadcaster . <EoL>
<BoL> Register a new unreducer . <EoL>
<BoL> Checks whether a statement is active . <EoL>
<BoL> Build the primal and adjoint of a traceable function . <EoL>
<BoL> Visit a node . <EoL>
<BoL> Visit assignment statement . <EoL>
<BoL> Create adjoint for call . <EoL>
<BoL> Deal with the special with insert_grad_of ( x ) statement . <EoL>
<BoL> Generate the adjoint of a series of statements . <EoL>
<BoL> Fix the naive construction of the adjont . <EoL>
<BoL> Create pop and push nodes that are linked . <EoL>
<BoL> Create pop and push nodes for substacks that are linked . <EoL>
<BoL> Merge the bodies of primal and adjoint into a single function . <EoL>
<BoL> Perform reverse-mode AD on an AST . <EoL>
<BoL> Carry over the state from the primal to the adjoint . <EoL>
<BoL> Push the final state of the primal onto the stack for the adjoint . <EoL>
<BoL> Recursively check if shapes of object ` a ` and ` b ` match . <EoL>
<BoL> A decorator which removes the ` with insert_grad_of ` statement . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse summing over a dimension . <EoL>
<BoL> Decorator that marks a function to be traced . <EoL>
<BoL> Trace a function , and return a VJP and the function 's output . <EoL>
<BoL> Returns a function that computes f and is vjp w.r.t . params.Computes the value and gradient of the decorated function . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse summing over a dimension . <EoL>
<BoL> Reverse summing over a dimension . <EoL>
<BoL> Creates the reduction axis for unbroadcasting . <EoL>
<BoL> Initialize gradients for the types of common objects we support . <EoL>
<BoL> Initialize gradient for an bool type . This prints a warning . <EoL>
<BoL> Initialize gradient for an integral type . This prints a warning . <EoL>
<BoL> Register a new gradient adder supporting the given types . <EoL>
<BoL> Register a new shape checking function supporting given types . <EoL>
<BoL> Reverse the broadcasting operation . <EoL>
<BoL> Reverse summing over a dimension , NumPy implementation . <EoL>
<BoL> Get the attribute dict given the attribute set by the symbol . <EoL>
<BoL> Compares two contexts . Two contexts are equal if they have the same device type and device id . <EoL>
<BoL> Compute hash value of context for dictionary lookup <EoL>
<BoL> ctypes implementation of imperative invoke wrappe <EoL>
<BoL> initialize a new NDArray <EoL>
<BoL> ctypes implementation of imperative invoke wrappe <EoL>
<BoL> Set the symbolic class to be cls <EoL>
<BoL> Create ctypes const void ** from a list of MXNet objects with handles . <EoL>
<BoL> Create ctypes const char ** from a list of Python strings . <EoL>
<BoL> Check the return value of C API call . <EoL>
<BoL> Initialize the function with handle <EoL>
<BoL> Compose symbol on inputs . <EoL>
<BoL> Set the attribute of the symbol . <EoL>
<BoL> Set handle . <EoL>
<BoL> Set the symbolic class to be cls <EoL>
<BoL> x.__add__ ( y ) < = > x+y <EoL>
<BoL> Composes symbol using inputs . <EoL>
<BoL> Returns a deep copy of the input object . <EoL>
<BoL> x.__div__ ( y ) < = > x/y <EoL>
<BoL> x.__eq__ ( y ) < = > x==y <EoL>
<BoL> x.__ge__ ( y ) < = > x > =y <EoL>
<BoL> x.__getitem__ ( i ) < = > x [ i ] <EoL>
<BoL> x.__gt__ ( y ) < = > x > y <EoL>
<BoL> Returns a generator object of symbol . <EoL>
<BoL> x.__le__ ( y ) < = > x < =y <EoL>
<BoL> Get number of outputs for the symbol . <EoL>
<BoL> x.__lt__ ( y ) < = > x < y <EoL>
<BoL> x.__mod__ ( y ) < = > x % y <EoL>
<BoL> x.__mul__ ( y ) < = > x*y <EoL>
<BoL> x.__ne__ ( y ) < = > x ! =y <EoL>
<BoL> x.__neg__ ( ) < = > -x <EoL>
<BoL> x.__pow__ ( y ) < = > x**y <EoL>
<BoL> x.__rdiv__ ( y ) < = > y/x <EoL>
<BoL> Gets a string representation of the symbol . <EoL>
<BoL> x.__rmod__ ( y ) < = > y % x <EoL>
<BoL> x.__rsub__ ( y ) < = > y-x <EoL>
<BoL> x.__sub__ ( y ) < = > x-y <EoL>
<BoL> Composes symbol using inputs . <EoL>
<BoL> Helper function to get NDArray lists handles from various inputs . <EoL>
<BoL> The actual implementation for calling shape inference API . <EoL>
<BoL> Sets an attribute of the symbol . <EoL>
<BoL> Convenience fluent method for : py : func : ` abs ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arccos ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arccosh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arcsin ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arcsinh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arctan ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arctanh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argmax ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argmax_channel ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argmin ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argsort ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` cast ` . <EoL>
<BoL> Returns the attribute string for corresponding input key from the symbol . <EoL>
<BoL> Recursively gets all attributes from the symbol and its children . <EoL>
<BoL> Convenience fluent method for : py : func : ` broadcast_axes ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` broadcast_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` broadcast_to ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` cbrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` ceil ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` clip ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` cos ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` cosh ` . <EoL>
<BoL> Gets a debug string of symbol . <EoL>
<BoL> Convenience fluent method for : py : func : ` degrees ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` depth_to_space ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` diag ` . <EoL>
<BoL> Evaluates a symbol given arguments . <EoL>
<BoL> Convenience fluent method for : py : func : ` exp ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` expand_dims ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` expm1 ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` fix ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` flatten ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` flip ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` floor ` . <EoL>
<BoL> Gets a new grouped symbol whose output contains inputs to output nodes of the original symbol . <EoL>
<BoL> Gets a new grouped symbol ` sgroup ` . The output of ` sgroup ` is a list of outputs of all of the internal nodes . <EoL>
<BoL> Gets the autodiff of current symbol . <EoL>
<BoL> Infers the shapes of all arguments and all outputs given the known shapes of some arguments . <EoL>
<BoL> Infers the shape partially . <EoL>
<BoL> Infers the type of all arguments and all outputs , given the known types for some arguments . <EoL>
<BoL> Lists all the arguments in the symbol . <EoL>
<BoL> Gets all attributes from the symbol . <EoL>
<BoL> Lists all the auxiliary states in the symbol . <EoL>
<BoL> Lists all arguments and auxiliary states of this Symbol . <EoL>
<BoL> Lists all the outputs in the symbol . <EoL>
<BoL> Convenience fluent method for : py : func : ` log ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log10 ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log1p ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log2 ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log_softmax ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` max ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` mean ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` min ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` nanprod ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` nansum ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` norm ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` one_hot ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` ones_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` pad ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` pick ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` prod ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` radians ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` rcbrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` reciprocal ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` relu ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` repeat ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` reshape ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` reshape_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` rint ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` round ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` rsqrt ` . <EoL>
<BoL> Saves symbol to a file . <EoL>
<BoL> Convenience fluent method for : py : func : ` shape_array ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sigmoid ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sign ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sin ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sinh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` size_array ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` slice ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` slice_axis ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` slice_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` softmax ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sort ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` space_to_depth ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` split ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sqrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` square ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` squeeze ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sum ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` swapaxes ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` take ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` tan ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` tanh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` tile ` . <EoL>
<BoL> Saves symbol to a JSON string . <EoL>
<BoL> Convenience fluent method for : py : func : ` topk ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` transpose ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` trunc ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` zeros_like ` . <EoL>
<BoL> Create ctypes char * from a Python string . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> entry point for backward.C Callback for CustomFunction : :delete <EoL>
<BoL> Backward computation . <EoL>
<BoL> Forward computation . <EoL>
<BoL> x.__add__ ( y ) < = > x+y < = > mx.nd.add ( x , y ) <EoL>
<BoL> x.__div__ ( y ) < = > x/y < = > mx.nd.divide ( x , y ) <EoL>
<BoL> x.__eq__ ( y ) < = > x==y < = > mx.nd.equal ( x , y ) <EoL>
<BoL> x.__ge__ ( y ) < = > x > =y < = > mx.nd.greater_equal ( x , y ) <EoL>
<BoL> x.__getitem__ ( i ) < = > x [ i ] <EoL>
<BoL> x.__gt__ ( y ) < = > x > y < = > mx.nd.greater ( x , y ) <EoL>
<BoL> Default hash function . <EoL>
<BoL> x.__iadd__ ( y ) < = > x+=y <EoL>
<BoL> x.__rdiv__ ( y ) < = > x/=y <EoL>
<BoL> x.__rmod__ ( y ) < = > x % =y <EoL>
<BoL> x.__imul__ ( y ) < = > x*=y <EoL>
<BoL> x.__isub__ ( y ) < = > x-=y <EoL>
<BoL> x.__le__ ( y ) < = > x < =y < = > mx.nd.less_equal ( x , y ) <EoL>
<BoL> Number of element along the first axis . <EoL>
<BoL> x.__lt__ ( y ) < = > x < y < = > mx.nd.lesser ( x , y ) <EoL>
<BoL> x.__mod__ ( y ) < = > x % y < = > mx.nd.modulo ( x , y ) <EoL>
<BoL> x.__mul__ ( y ) < = > x*y < = > mx.nd.multiply ( x , y ) <EoL>
<BoL> x.__ne__ ( y ) < = > x ! =y < = > mx.nd.not_equal ( x , y ) <EoL>
<BoL> x.__neg__ ( y ) < = > -x <EoL>
<BoL> x.__pow__ ( y ) < = > x**y < = > mx.nd.power ( x , y ) <EoL>
<BoL> x.__rdiv__ ( y ) < = > y/x < = > mx.nd.divide ( y , x ) <EoL>
<BoL> Returns a string representation of the array . <EoL>
<BoL> x.__rmod__ ( y ) < = > y % x < = > mx.nd.modulo ( y , x ) <EoL>
<BoL> x.__pow__ ( y ) < = > y**x < = > mx.nd.power ( y , x ) <EoL>
<BoL> x.__rsub__ ( y ) < = > y-x < = > mx.nd.subtract ( y , x ) <EoL>
<BoL> x.__setitem__ ( i , y ) < = > x [ i ] =y <EoL>
<BoL> x.__sub__ ( y ) < = > x-y < = > mx.nd.subtract ( x , y ) <EoL>
<BoL> Returns a view of the array sliced at ` idx ` in the first dim . This is called through `` x [ idx ] `` . <EoL>
<BoL> Get item when key is a tuple of any objects of the following types : NDArray , np.ndarray , list , tuple , slice , and integer . <EoL>
<BoL> This function is called when key is a slice , or an integer , or a tuple of slices or integers <EoL>
<BoL> Given value and vshape , create an ` NDArray ` from value with the same context and dtype as the current one and broadcast it to vshape . <EoL>
<BoL> This function is called by __setitem__ when key is an advanced index . <EoL>
<BoL> This function is called by __setitem__ when key is a basic index , i.e . <EoL>
<BoL> Returns a sliced NDArray that shares memory with the current one . This is called through `` x [ start : stop ] `` . <EoL>
<BoL> Performs a synchronized copy from the ` source_array ` to the current array . <EoL>
<BoL> Convenience fluent method for : py : func : ` abs ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arccos ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arccosh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arcsin ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arcsinh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arctan ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` arctanh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argmax ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argmax_channel ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argmin ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` argsort ` . <EoL>
<BoL> Returns an array on the target device with the same value as this array . <EoL>
<BoL> Returns a `` numpy.ndarray `` object with value copied from this array . <EoL>
<BoL> Returns a scalar whose value is copied from this array . <EoL>
<BoL> Returns a copy of the array after casting to a specified type . <EoL>
<BoL> Attach a gradient buffer to this NDArray , so that ` backward ` can compute gradient with respect to it . <EoL>
<BoL> Compute the gradients of this NDArray w.r.t variables . <EoL>
<BoL> Convenience fluent method for : py : func : ` broadcast_axes ` . <EoL>
<BoL> Broadcasts the input array to the shape of other . <EoL>
<BoL> Broadcasts the input array to a new shape . <EoL>
<BoL> Convenience fluent method for : py : func : ` cbrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` ceil ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` clip ` . <EoL>
<BoL> Makes a copy of this `` NDArray `` , keeping the same context . <EoL>
<BoL> Copies the value of this array to another array . <EoL>
<BoL> Convenience fluent method for : py : func : ` cos ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` cosh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` degrees ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` depth_to_space ` . <EoL>
<BoL> Returns a new NDArray , detached from the current graph . <EoL>
<BoL> Convenience fluent method for : py : func : ` diag ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` exp ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` expand_dims ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` expm1 ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` fix ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` flatten ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` flip ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` floor ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log10 ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log1p ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log2 ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` log_softmax ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` max ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` mean ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` min ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` nanprod ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` nansum ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` norm ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` one_hot ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` ones_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` pad ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` pick ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` prod ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` radians ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` rcbrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` reciprocal ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` relu ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` repeat ` . <EoL>
<BoL> Returns a **view** of this array with a new shape without altering any data . <EoL>
<BoL> Convenience fluent method for : py : func : ` reshape_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` rint ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` round ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` rsqrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` shape_array ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sigmoid ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sign ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sin ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sinh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` size_array ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` slice ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` slice_axis ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` slice_like ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` softmax ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sort ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` space_to_depth ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` split ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sqrt ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` square ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` squeeze ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` sum ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` swapaxes ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` take ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` tan ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` tanh ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` tile ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` topk ` . <EoL>
<BoL> Return a copy of the array with chosen storage type . <EoL>
<BoL> Convenience fluent method for : py : func : ` transpose ` . <EoL>
<BoL> Convenience fluent method for : py : func : ` trunc ` . <EoL>
<BoL> Waits until all previous write operations on the current array are finished . <EoL>
<BoL> Convenience fluent method for : py : func : ` zeros_like ` . <EoL>
<BoL> parse head gradient for backward and grad . <EoL>
<BoL> Compute the gradients of heads w.r.t previously marked variables . <EoL>
<BoL> Create ctypes array from a Python array . <EoL>
<BoL> Create ctypes array from a Python buffer . For primitive types , using the buffer created with array.array is faster than a c_array call . <EoL>
<BoL> Retrieve recorded computation history as ` Symbol ` . <EoL>
<BoL> Compute the gradients of heads w.r.t variables . <EoL>
<BoL> Get status on recording/not recording . <EoL>
<BoL> Get status on training/predicting . <EoL>
<BoL> Mark NDArrays as variables to compute gradient for autograd . <EoL>
<BoL> Returns a scope context to be used in 'with ' statement for codes that do not need gradients to be calculated . <EoL>
<BoL> Returns a scope context to be used in 'with ' statement in which forward pass behavior is set to inference mode , without changing the recording states . <EoL>
<BoL> Returns an autograd recording scope context to be used in 'with ' statement and captures code that needs gradients to be calculated . <EoL>
<BoL> Set status to recording/not recording . When recording , graph will be constructed for gradient computation . <EoL>
<BoL> Set status to training/predicting . This affects ctx.is_train in operator running context . For example , Dropout will drop inputs randomly when train_mode=True while simply passing through if train_mode=False . <EoL>
<BoL> Returns a scope context to be used in 'with ' statement in which forward pass behavior is set to training mode , without changing the recording states . <EoL>
<BoL> A utility function that converts the argument to a list if it is not already . <EoL>
<BoL> Generate op functions created by ` op_code_gen_func ` and write to the source file of ` root_namespace.module_name . [ submodule_name ] ` , where ` submodule_name ` is one of ` _OP_SUBMODULE_NAME_LIST ` .Return the generated module file based on module name.Write the proper __all__ based on available operators . <EoL>
<BoL> Check whether the given op_name starts with any words in ` _OP_NAME_PREFIX_LIST ` . If found , return the prefix ; else , return an empty string . <EoL>
<BoL> Registers op functions created by ` make_op_func ` under ` root_namespace.module_name . [ submodule_name ] ` , where ` submodule_name ` is one of ` _OP_SUBMODULE_NAME_LIST ` . <EoL>
<BoL> Load library by searching possible path . <EoL>
<BoL> Notify MXNet about a shutdown . <EoL>
<BoL> Append the definition position to each function contained in module.Add fileinto to a object . <EoL>
<BoL> Build argument docs in python style . <EoL>
<BoL> Convert ctypes pointer to buffer type . <EoL>
<BoL> Convert a ctypes pointer to a numpy array . <EoL>
<BoL> : return : data directory in the filesystem for storage , for example when downloading models <EoL>
<BoL> : return : default data directory depending on the platform and environment variables <EoL>
<BoL> Callback to Show progress bar . <EoL>
<BoL> Callback to Show speed . <EoL>
<BoL> A callback that saves a model checkpoint every few epochs . <EoL>
<BoL> Callback to log the training evaluation result every period.The checkpoint function . <EoL>
<BoL> Callback to checkpoint Module to prefix every epoch.The checkpoint function . <EoL>
<BoL> Checkpoint the model data into file . <EoL>
<BoL> Returns a CPU context . <EoL>
<BoL> Returns a CPU pinned memory context . Copying from CPU pinned memory to GPU is faster than from normal CPU memory . <EoL>
<BoL> Returns the current context . <EoL>
<BoL> Returns a GPU context . <EoL>
<BoL> Query CUDA for the free and total bytes of GPU global memory . <EoL>
<BoL> Query CUDA for the number of GPUs present . <EoL>
<BoL> Compute the gradients of outputs w.r.t variables . <EoL>
<BoL> Deprecated . Please use backward <EoL>
<BoL> Return function that computes gradient of arguments . <EoL>
<BoL> Return function that computes both gradient of arguments and loss value.Wrapped function . <EoL>
<BoL> Mark NDArrays as variables to compute gradient for autograd . <EoL>
<BoL> Set status to training/not training . <EoL>
<BoL> Returns a testing scope context to be used in 'with ' statement and captures testing code . <EoL>
<BoL> Returns a training scope context to be used in 'with ' statement and captures training code . <EoL>
<BoL> Get the dimension that corresponds to the batch size . <EoL>
<BoL> Get DataDesc list from attribute lists . <EoL>
<BoL> Get data of current batch . <EoL>
<BoL> Get index of the current batch . <EoL>
<BoL> Get label of the current batch . <EoL>
<BoL> Get the number of padding examples in the current batch . <EoL>
<BoL> Move to the next batch . <EoL>
<BoL> Get next data batch from iterator . <EoL>
<BoL> Reset the iterator to the begin of the data . <EoL>
<BoL> Returns the name and shape information of input and output tensors of the given ONNX model file . <EoL>
<BoL> Imports the ONNX model file , passed as a parameter , into MXNet symbol and parameters . Operator support and coverage - https : //cwiki.apache.org/confluence/display/MXNET/ONNX <EoL>
<BoL> Imports the ONNX model files , passed as a parameter , into Gluon SymbolBlock object . <EoL>
<BoL> Loads the MXNet model file and returns MXNet symbol and params ( weights ) . <EoL>
<BoL> Map MXNet 's abs operator attributes to onnx 's Abs operator and return the created node . <EoL>
<BoL> Map MXNet 's Activation operator attributes to onnx 's Tanh/Relu operator and return the created node . <EoL>
<BoL> Map MXNet 's _plus_scalar operator attributes to onnx 's Add operator . Creates a new node for the input scalar value , adds it to the initializer and return multiple created nodes . <EoL>
<BoL> Map MXNet 's add_n operator attributes to onnx 's Sum operator and return the created node . <EoL>
<BoL> Map MXNet 's argmax operator attributes to onnx 's ArgMax operator and return the created node . <EoL>
<BoL> Map MXNet 's argmin operator attributes to onnx 's ArgMin operator and return the created node . <EoL>
<BoL> Map MXNet 's BatchNorm operator attributes to onnx 's BatchNormalization operator and return the created node . <EoL>
<BoL> Map MXNet 's broadcast_div operator attributes to onnx 's Div operator and return the created node . <EoL>
<BoL> Map MXNet 's broadcast_mul operator attributes to onnx 's Mul operator and return the created node . <EoL>
<BoL> Map MXNet 's Cast operator attributes to onnx 's Cast operator and return the created node . <EoL>
<BoL> Map MXNet 's ceil operator attributes to onnx 's Ceil operator and return the created node . <EoL>
<BoL> Map MXNet 's Concat operator attributes to onnx 's Concat operator and return the created node . <EoL>
<BoL> Map MXNet 's convolution operator attributes to onnx 's Conv operator and return the created node . <EoL>
<BoL> Map MXNet 's _div_scalar operator attributes to onnx 's Div operator . Creates a new node for the input scalar value , adds it to the initializer and return multiple created nodes . <EoL>
<BoL> Map MXNet 's dot operator attributes to onnx's MatMul and Transpose operators based on the values set for transpose_a , transpose_b attributes . <EoL>
<BoL> Map MXNet 's Dropout operator attributes to onnx 's Dropout operator and return the created node . <EoL>
<BoL> Map MXNet 's elemwise_add operator attributes to onnx 's Add operator and return the created node . <EoL>
<BoL> Map MXNet 's elemwise_sub operator attributes to onnx 's Sub operator and return the created node . <EoL>
<BoL> Map MXNet 's elemwise_div operator attributes to onnx 's Div operator and return the created node . <EoL>
<BoL> Map MXNet 's elemwise_mul operator attributes to onnx 's Mul operator and return the created node . <EoL>
<BoL> Map MXNet 's exp operator attributes to onnx 's Exp operator and return the created node . <EoL>
<BoL> Map MXNet 's expand_dims operator attributes to onnx 's Unsqueeze operator and return the created node . <EoL>
<BoL> Map MXNet 's Flatten operator attributes to onnx 's Flatten operator and return the created node . <EoL>
<BoL> Map MXNet 's floor operator attributes to onnx 's Floor operator and return the created node . <EoL>
<BoL> Map MXNet 's FullyConnected operator attributes to onnx 's Gemm operator and return the created node . <EoL>
<BoL> Map MXNet 's _copy operator attributes to onnx 's Identity operator and return the created node . <EoL>
<BoL> Map MXNet 's L2Normalization operator attributes to onnx 's LpNormalization operator and return the created node . <EoL>
<BoL> Map MXNet 's LeakyReLU operator attributes to onnx 's Elu/LeakyRelu/PRelu operators based on the input node 's attributes and return the created node . <EoL>
<BoL> Map MXNet 's _linalg_gemm2 operator attributes to onnx's MatMul and Transpose operators based on the values set for transpose_a , transpose_b attributes . Return multiple nodes created . <EoL>
<BoL> Map MXNet 's log operator attributes to onnx 's Log operator and return the created node . <EoL>
<BoL> Map MXNet 's LRN operator attributes to onnx 's LRN operator and return the created node . <EoL>
<BoL> Map MXNet 's max operator attributes to onnx 's ReduceMax operator and return the created node . <EoL>
<BoL> Map MXNet 's _maximum operator attributes to onnx 's Max operator and return the created node . <EoL>
<BoL> Map MXNet 's mean operator attributes to onnx 's ReduceMean operator and return the created node . <EoL>
<BoL> Map MXNet 's min operator attributes to onnx 's ReduceMin operator and return the created node . <EoL>
<BoL> Map MXNet 's _minimum operator attributes to onnx 's Min operator and return the created node . <EoL>
<BoL> Map MXNet 's _minus_scalar operator attributes to onnx 's Minus operator . Creates a new node for the input scalar value , adds it to the initializer and return multiple created nodes . <EoL>
<BoL> Map MXNet 's _mul_scalar operator attributes to onnx 's Mul operator . Creates a new node for the input scalar value , adds it to the initializer and return multiple created nodes . <EoL>
<BoL> Map MXNet 's negative operator attributes to onnx 's Neg operator and return the created node . <EoL>
<BoL> Map MXNet 's pad operator attributes to onnx 's Pad operator and return the created node . <EoL>
<BoL> Map MXNet 's Pooling operator attributes to onnx's MaxPool/AveragePool/GlobalMaxPool/GlobalAveragePool operators based on the input node 's attributes and return the created node . <EoL>
<BoL> Map MXNet 's _power operator attributes to onnx 's Pow operator and return the created node . <EoL>
<BoL> Map MXNet 's prod operator attributes to onnx 's ReduceProd operator and return the created node . <EoL>
<BoL> Map MXNet 's reciprocal operator attributes to onnx 's Reciprocal operator and return the created node . <EoL>
<BoL> Map MXNet 's relu operator attributes to onnx 's Relu operator and return the created node . <EoL>
<BoL> Map MXNet 's Reshape operator attributes to onnx 's Reshape operator . Converts output shape attribute to output shape tensor and return multiple created nodes . <EoL>
<BoL> Map MXNet 's sigmoid operator attributes to onnx 's Sigmoid operator and return the created node . <EoL>
<BoL> Map MXNet 's slice_axis operator attributes to onnx 's Slice operator and return the created node . <EoL>
<BoL> Map MXNet 's SliceChannel operator attributes to onnx 's Squeeze or Split operator based on squeeze_axis attribute and return the created node . <EoL>
<BoL> Map MXNet 's softmax operator attributes to onnx 's Softmax operator and return the created node . <EoL>
<BoL> Map MXNet 's SoftmaxOutput operator attributes to onnx 's Softmax operator and return the created node . <EoL>
<BoL> Map MXNet 's sqrt operator attributes to onnx 's Sqrt operator and return the created node . <EoL>
<BoL> Map MXNet 's squeeze operator attributes to onnx 's squeeze operator and return the created node . <EoL>
<BoL> Helper function to convert string to list . Used to convert shape attribute string to list format . <EoL>
<BoL> Map MXNet 's tanh operator attributes to onnx 's Tanh operator and return the created node . <EoL>
<BoL> Map MXNet 's transpose operator attributes to onnx 's Transpose operator and return the created node . <EoL>
<BoL> Helper function to convert weights and inputs . <EoL>
<BoL> Map MXNet 's broadcast_add operator attributes to onnx 's Add operator and return the created node . <EoL>
<BoL> Map MXNet 's broadcast_sub operator attributes to onnx 's Sub operator and return the created node . <EoL>
<BoL> create extra transpose node for dot operato <EoL>
<BoL> To make sure ONNX is runtime dependency , it is imported used only when needed <EoL>
<BoL> Convert MXNet layer to ONNX <EoL>
<BoL> Convert weights to numpy <EoL>
<BoL> Convert MXNet graph to ONNX graph <EoL>
<BoL> Do a forward pass based on the sym and params to get the shape of the output using dummy data <EoL>
<BoL> Infer output shape by doing a forward pass using dummy inputs <EoL>
<BoL> Register operatorsHelper function to map functions <EoL>
<BoL> Helper function to split params dictionary into args and aux params <EoL>
<BoL> Helper function to parse operator attributes in required format . <EoL>
<BoL> Helper function for scalar arithmetic operations <EoL>
<BoL> Helper function to convert padding format for pad operator . <EoL>
<BoL> Elementwise cosine of input array . <EoL>
<BoL> Elu function <EoL>
<BoL> Elementwise log of input array . <EoL>
<BoL> PRelu function <EoL>
<BoL> Elementwise sine of input array . <EoL>
<BoL> Returns a slice of the input tensor along multiple axes . <EoL>
<BoL> Elementwise tan of input array . <EoL>
<BoL> Returns element-wise absolute value of the input . <EoL>
<BoL> Adding two tensors <EoL>
<BoL> Elementwise sum of arrays <EoL>
<BoL> Elementwise inverse cos of input array . <EoL>
<BoL> Elementwise inverse sin of input array . <EoL>
<BoL> Elementwise inverse tan of input array . <EoL>
<BoL> Returns indices of the maximum values along an axis <EoL>
<BoL> Returns indices of the minimum values along an axis . <EoL>
<BoL> Average pooling <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Cast input to a given dtype <EoL>
<BoL> Calculate ceil value for input <EoL>
<BoL> Clips ( limits ) the values in an array . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Compute N-D convolution on ( N+2 ) -D input . <EoL>
<BoL> Computes transposed convolution of the input tensor . <EoL>
<BoL> Divide two tensors <EoL>
<BoL> Dropout Regularization . <EoL>
<BoL> Logical Equal operator with broadcasting . <EoL>
<BoL> Elementwise exponent of input array . <EoL>
<BoL> Flattens the input array into a 2-D array by collapsing the higher dimensions . <EoL>
<BoL> Calculate floor value for input <EoL>
<BoL> Applies a linear transformation : Y=XWT+b . <EoL>
<BoL> Gather elements from an input array along the given axis . <EoL>
<BoL> Performs avg pooling on the input . <EoL>
<BoL> Performs global lp pooling on the input . <EoL>
<BoL> Performs max pooling on the input . <EoL>
<BoL> Logical Greater operator with broadcasting . <EoL>
<BoL> Computes elementwise hard sigmoid of the input array <EoL>
<BoL> Returns the identity function of the the input . <EoL>
<BoL> Instance Normalization . <EoL>
<BoL> Leaky Relu function <EoL>
<BoL> Logical Lesser operator with broadcasting . <EoL>
<BoL> Performs general matrix multiplication and accumulation <EoL>
<BoL> Local Response Normalization . <EoL>
<BoL> Computes the log softmax of the input . This is equivalent to computing softmax followed by log . <EoL>
<BoL> Logical and of two input arrays . <EoL>
<BoL> Logical not of two input arrays . <EoL>
<BoL> Logical or of two input arrays . <EoL>
<BoL> Logical xor of two input arrays . <EoL>
<BoL> LP Pooling <EoL>
<BoL> Performs general matrix multiplication <EoL>
<BoL> Average pooling <EoL>
<BoL> Max ROI Pooling . <EoL>
<BoL> Elementwise maximum of arrays . MXNet maximum compares only two symbols at a time . ONNX can send more than two to compare . Breaking into multiple mxnet ops to compare two symbols at a time <EoL>
<BoL> Mean of all the input tensors . <EoL>
<BoL> Elementwise minimum of arrays . <EoL>
<BoL> Multiply two tensors <EoL>
<BoL> Negation of every element in a tenso <EoL>
<BoL> Add padding to input tenso <EoL>
<BoL> Returns element-wise result of base element raised to powers from exp element . <EoL>
<BoL> Draw random samples from a Gaussian distribution . <EoL>
<BoL> Draw random samples from a uniform distribtuion . <EoL>
<BoL> Returns the reciprocal of the argument , element-wise . <EoL>
<BoL> Reduce input tensor by l1 normalization . <EoL>
<BoL> Reduce input tensor by l2 normalization . <EoL>
<BoL> Reduce the array along a given axis by log sum value <EoL>
<BoL> Reduce the array along a given axis by log sum exp value <EoL>
<BoL> Reduce the array along a given axis by maximum value <EoL>
<BoL> Reduce the array along a given axis by mean value <EoL>
<BoL> Reduce the array along a given axis by minimum value <EoL>
<BoL> Reduce the array along a given axis by product value <EoL>
<BoL> Reduce the array along a given axis by sum value <EoL>
<BoL> Reduce the array along a given axis by sum square value <EoL>
<BoL> Computes rectified linear function . <EoL>
<BoL> Reshape the given array by the shape attribute . <EoL>
<BoL> Returns shape of input array . <EoL>
<BoL> Computes elementwise sigmoid of the input array <EoL>
<BoL> Softmax function . <EoL>
<BoL> Applies the sofplus activation function element-wise to the input . <EoL>
<BoL> Computes softsign of x element-wise . <EoL>
<BoL> Splits an array along a particular axis into multiple sub-arrays . <EoL>
<BoL> Returns element-wise square-root value of the input . <EoL>
<BoL> Remove single-dimensional entries from the shape of a tensor . <EoL>
<BoL> Subtracting two tensors <EoL>
<BoL> Returns the hyperbolic tangent of the input array . <EoL>
<BoL> Transpose the input array . <EoL>
<BoL> Inserts a new axis of size 1 into the array shape <EoL>
<BoL> : param attrs : Current Attribute list : param extraAttrMap : Additional attributes to be added : return : new_attr <EoL>
<BoL> Change attribute names as per values in change_map dictionary . <EoL>
<BoL> A workaround for 'use_bias ' attribute since onnx do n't provide this attribute , we have to check the number of inputs to decide it . <EoL>
<BoL> A workaround to reshape bias term to ( 1 , num_channel ) . <EoL>
<BoL> A workaround for getting 'channels ' or 'units ' since onnx do n't provide these attributes . We check the shape of weights provided to get the number . <EoL>
<BoL> Using FullyConnected operator in place of linalg_gemm to perform same operation <EoL>
<BoL> onnx pooling operator supports asymmetrical padding Adding pad operator before pooling in mxnet to work with onnx <EoL>
<BoL> Changing onnx 's pads sequence to match with mxnet 's pad_width mxnet : ( x1_begin , x1_end , ... , xn_begin , xn_end ) onnx : ( x1_begin , x2_begin , ... , xn_end , xn_end ) <EoL>
<BoL> Removes attributes in the remove list from the input attribute dict : param attrs : Dict of operator attributes : param remove_list : list of attributes to be removed <EoL>
<BoL> Helper function to obtain the shape of an array <EoL>
<BoL> Convert from onnx operator to mxnet operator . The converter must specify conversions explicitly for incompatible name , and apply handlers to operator attributes . <EoL>
<BoL> Grab data in TensorProto and convert to numpy array . <EoL>
<BoL> Convert a list of AttributeProto to a dict , with names as keys . <EoL>
<BoL> Construct symbol from onnx graph . <EoL>
<BoL> Get the model metadata from a given onnx graph . <EoL>
<BoL> Construct SymbolBlock from onnx graph . <EoL>
<BoL> Internal function to reset binded state . <EoL>
<BoL> Synchronizes parameters from devices to CPU . This function should be called after calling ` update ` that updates the parameters on the devices , before one can read the latest parameters from `` self._arg_params `` and `` self._aux_params `` . <EoL>
<BoL> Backward computation . <EoL>
<BoL> Borrows optimizer from a shared module . <EoL>
<BoL> Forward computation . It supports data batches with different shapes , such as different batch sizes or different image sizes . If reshaping of data batch relates to modification of symbol or module , such as changing image layout ordering or switching from training to predicting , module rebinding is required . <EoL>
<BoL> A convenient function that calls both `` forward `` and `` backward `` . <EoL>
<BoL> Gets the gradients with respect to the inputs of the module . <EoL>
<BoL> Gets outputs of the previous forward computation . <EoL>
<BoL> Gets current parameters . <EoL>
<BoL> Gets states from all devices . <EoL>
<BoL> Internal helper for parameter initialization <EoL>
<BoL> Installs monitor on all executors . <EoL>
<BoL> Iterates over predictions . <EoL>
<BoL> Creates a model from previously saved checkpoint . <EoL>
<BoL> Loads optimizer ( updater ) state from a file . <EoL>
<BoL> Loads model parameters from file . <EoL>
<BoL> Prepares the module for processing a data batch . <EoL>
<BoL> Reshapes the module for new input shapes . <EoL>
<BoL> Saves current progress to checkpoint . Use ` mx.callback.module_checkpoint ` as ` epoch_end_callback ` to save during training . <EoL>
<BoL> Saves optimizer ( updater ) state to a file . <EoL>
<BoL> Saves model parameters to file . <EoL>
<BoL> Sets value for states . Only one of the states & value can be specified . <EoL>
<BoL> Updates parameters according to the installed optimizer and the gradients computed in the previous forward-backward batch . <EoL>
<BoL> Evaluates and accumulates evaluation metric on outputs of the last forward computation . <EoL>
<BoL> Callback function for collecting layer output NDArrays . <EoL>
<BoL> Callback function for collecting min and max values from an NDArray . <EoL>
<BoL> Given a dictionary containing the thresholds for quantizing the layers , set the thresholds into the quantized symbol as the params of requantize operators . <EoL>
<BoL> Collect layer outputs and save them in a dictionary mapped by layer names . <EoL>
<BoL> Given a dataset , find the optimal threshold for quantizing it . <EoL>
<BoL> Given a ndarray dict , find the optimal threshold for quantizing each value of the key . <EoL>
<BoL> Given a str as a path to the .params file or a pair of params , returns two dictionaries representing arg_params and aux_params . <EoL>
<BoL> Given a str as a path the symbol .json file or a symbol , returns a Symbol object . <EoL>
<BoL> Given a quantized symbol and a dict of params that have not been quantized , generate quantized params . <EoL>
<BoL> Given a discrete distribution ( may have not been normalized to 1 ) , smooth it by replacing zeros with eps multiplied by a scaling factor and taking the corresponding amount off the non-zero values . Ref : http : //web.engr.illinois.edu/~hanj/cs412/bk3/KL-divergence.pdf <EoL>
<BoL> Loads an array from file . <EoL>
<BoL> Loads symbol from a JSON file . <EoL>
<BoL> Callback to log training speed and metrics in TensorBoard . <EoL>
<BoL> Take an executor 's underlying symbol graph and return its generated optimized version . <EoL>
<BoL> Get an environment variable which describes if TensorRT is currently enabled in the backend . <EoL>
<BoL> Set an environment variable which will enable or disable the use of TensorRT in the backend . <EoL>
<BoL> Checks if a pre-trained token embedding file name is valid . <EoL>
<BoL> Indexes unknown and reserved tokens . <EoL>
<BoL> Load embedding vectors from the pre-trained token embedding file . <EoL>
<BoL> Sets the mapping between token indices and token embedding vectors . <EoL>
<BoL> Look up embedding vectors of tokens . <EoL>
<BoL> Converts tokens to indices according to the vocabulary . <EoL>
<BoL> Converts token indices to tokens according to the vocabulary . <EoL>
<BoL> Updates embedding vectors for tokens . <EoL>
<BoL> Creates an instance of token embedding . <EoL>
<BoL> Get valid token embedding names and their pre-trained file names . <EoL>
<BoL> Registers a new token embedding . <EoL>
<BoL> Bulk execution bundles many operators to run together . This can improve performance when running a lot of small operators sequentially . <EoL>
<BoL> Set size limit on bulk execution . <EoL>
<BoL> Constructor , used Symbol.bind and Symbol.simple_bind instead . <EoL>
<BoL> Get the dictionary given name and ndarray pairs . <EoL>
<BoL> List all the output NDArray . <EoL>
<BoL> Do backward pass to get the gradient of arguments . <EoL>
<BoL> Copy parameters from arg_params , aux_params into executor 's internal array . <EoL>
<BoL> Get a debug string about internal execution plan . <EoL>
<BoL> Calculate the outputs specified by the bound symbol . <EoL>
<BoL> Return a new executor with the same symbol and shared memory , but different input/output shapes . <EoL>
<BoL> Install callback for monitor . <EoL>
<BoL> Check the argument names of symbol . <EoL>
<BoL> Load data into sliced arrays . <EoL>
<BoL> Load label into sliced arrays . <EoL>
<BoL> A wrapper for the user-defined handle.ctypes function <EoL>
<BoL> Get input slice from the input shape . <EoL>
<BoL> Perform a backward pass on each executor . <EoL>
<BoL> Perform a forward pass on each executor . <EoL>
<BoL> Load data and labels into arrays . <EoL>
<BoL> Update evaluation metric with label and current outputs . <EoL>
<BoL> Run backward on the current executor . <EoL>
<BoL> Copy data from each executor to `` ` arg_params `` and `` aux_params `` . <EoL>
<BoL> Run forward on the current executor . <EoL>
<BoL> Install monitor on all executors . <EoL>
<BoL> Load data and labels into arrays . <EoL>
<BoL> Set parameter and aux values . <EoL>
<BoL> Update metric with the current executor . <EoL>
<BoL> Load a list of arrays into a list of arrays specified by slices . <EoL>
<BoL> Calls forward . Only accepts positional arguments . <EoL>
<BoL> Registers parameters . <EoL>
<BoL> Applies `` fn `` recursively to every child block as well as self . <EoL>
<BoL> Cast this Block to use another data type . <EoL>
<BoL> Returns a : py : class : ` ParameterDict ` containing this : py : class : ` Block ` and all of its children 's Parameters ( default ) , also can returns the select : py : class : ` ParameterDict ` which match some given regular expressions . <EoL>
<BoL> Overrides to implement forward computation using : py : class : ` NDArray ` . Only accepts positional arguments . <EoL>
<BoL> Activates or deactivates : py : class : ` HybridBlock ` s recursively . Has no effect on non-hybrid children . <EoL>
<BoL> Returns a name space object managing a child : py : class : ` Block ` and parameter names . Should be used within a `` with `` statement : : <EoL>
<BoL> Registers block as a child of self . : py : class : ` Block ` s assigned to self as attributes will be registered automatically . <EoL>
<BoL> Registers a forward hook on the block . <EoL>
<BoL> Registers a forward pre-hook on the block . <EoL>
<BoL> Save parameters to file . <EoL>
<BoL> [ Deprecated ] Please use save_parameters . Note that if you want load from SymbolBlock later , please use export instead . <EoL>
<BoL> Print the summary of the model 's output and parameters . <EoL>
<BoL> Finishes deferred initialization . <EoL>
<BoL> Get row_sparse data from row_sparse parameters based on row_id . <EoL>
<BoL> Initialize grad buffers . <EoL>
<BoL> Sets data and grad . <EoL>
<BoL> ( Re ) initializes by loading from data . <EoL>
<BoL> Reduce data from multiple context to cpu . <EoL>
<BoL> Set the trainer this parameter is associated with . <EoL>
<BoL> Cast data and gradient of this Parameter to a new data type . <EoL>
<BoL> Returns a copy of this parameter on one context . <EoL>
<BoL> Returns a gradient buffer for this parameter on one context . <EoL>
<BoL> Returns a list of contexts this parameter is initialized on . <EoL>
<BoL> Returns copies of this parameter on all contexts , in the same order as creation . For sparse parameters , use : py : meth : ` Parameter.list_row_sparse_data ` instead . <EoL>
<BoL> Returns gradient buffers on all contexts , in the same order as : py : meth : ` values ` . <EoL>
<BoL> Returns copies of the 'row_sparse ' parameter on all contexts , in the same order as creation . <EoL>
<BoL> Re-assign Parameter to other contexts . <EoL>
<BoL> Returns a copy of the 'row_sparse ' parameter on the same context as row_id 's . <EoL>
<BoL> Sets this parameter 's value on all contexts . <EoL>
<BoL> Returns a symbol representing this parameter . <EoL>
<BoL> Sets gradient buffer on all contexts to 0 . No action is taken if parameter is uninitialized or does n't require gradient . <EoL>
<BoL> Registers parameters . <EoL>
<BoL> Generic infer attributes . <EoL>
<BoL> Export HybridBlock to json format that can be loaded by ` SymbolBlock.imports ` , ` mxnet.mod.Module ` or the C++ interface . <EoL>
<BoL> Defines the forward computation . Arguments can be either : py : class : ` NDArray ` or : py : class : ` Symbol ` . <EoL>
<BoL> Overrides to construct symbolic graph for this ` Block ` . <EoL>
<BoL> Infers shape of Parameters from inputs . <EoL>
<BoL> Infers data type of Parameters from inputs . <EoL>
<BoL> Retrieves a : py : class : ` Parameter ` with name `` self.prefix+name `` . <EoL>
<BoL> Retrieves a : py : class : ` Constant ` with name `` self.prefix+name `` . <EoL>
<BoL> Re-assign all Parameters to other contexts . <EoL>
<BoL> Save parameters to file . <EoL>
<BoL> Set an attribute to a new value for all Parameters . <EoL>
<BoL> Copies all Parameters in `` other `` to self . <EoL>
<BoL> Sets all Parameters ' gradient buffer to 0 . <EoL>
<BoL> Import model previously saved by ` HybridBlock.export ` or ` Module.save_checkpoint ` as a SymbolBlock for use in Gluon . <EoL>
<BoL> Create kvstore . <EoL>
<BoL> Initialize parameters in the KVStore . <EoL>
<BoL> Reset kvstore . <EoL>
<BoL> Internal method to invoke pull operations on KVStore . If ` full_idx ` is set to True , ` kv.pull ` is preferred instead of ` kv.row_sparse_pull ` . <EoL>
<BoL> For each parameter , reduce the gradients from different contexts . <EoL>
<BoL> Loads trainer states ( e.g . optimizer , momentum ) from a file . <EoL>
<BoL> Saves trainer states ( e.g . optimizer , momentum ) to a file . <EoL>
<BoL> Sets a new learning rate of the optimizer . <EoL>
<BoL> Makes one step of parameter update . Should be called after ` autograd.backward ( ) ` and outside of ` record ( ) ` scope . <EoL>
<BoL> Makes one step of parameter update . <EoL>
<BoL> Creates prefix and params for new ` Block ` . <EoL>
<BoL> Print at most ` limit ` elements of list . <EoL>
<BoL> Get the common prefix for all names <EoL>
<BoL> Indent string <EoL>
<BoL> Utility function that helps in inferring DType of args and auxs params from given input param . <EoL>
<BoL> Returns a new dataset with each sample transformed by the transformer function ` fn ` . <EoL>
<BoL> Returns a new dataset with the first element of each sample transformed by the transformer function ` fn ` . <EoL>
<BoL> Return the URL for hosted file in Gluon repository . <EoL>
<BoL> Check whether the sha1 hash of the file content matches the expected hash . <EoL>
<BoL> Download an given URL <EoL>
<BoL> Adds block on top of the stack . <EoL>
<BoL> Activates or deactivates ` HybridBlock ` s recursively . Has no effect on non-hybrid children . <EoL>
<BoL> Adds block on top of the stack . <EoL>
<BoL> Get activation function . Convert if is string <EoL>
<BoL> Initial state for this cell . <EoL>
<BoL> Unrolls the recurrent cell for one time step . <EoL>
<BoL> Reset before re-using the cell for another graph . <EoL>
<BoL> shape and layout information of states <EoL>
<BoL> Appends a cell into the stack . <EoL>
<BoL> Emmulate conn <EoL>
<BoL> Receive object <EoL>
<BoL> Send object <EoL>
<BoL> Closes the record file . <EoL>
<BoL> Opens the record file . <EoL>
<BoL> Returns record as a string . <EoL>
<BoL> Resets the pointer to first item . <EoL>
<BoL> Inserts a string buffer as a record . <EoL>
<BoL> Assign next batch workload to workers . <EoL>
<BoL> Shutdown internal workers by pushing terminate signals . <EoL>
<BoL> Move data into new context . <EoL>
<BoL> Recursively find instance of MXRecordIO and reset file handler . This is required for MXRecordIO which holds a C pointer to a opened file after fork . <EoL>
<BoL> Collate data into batch . <EoL>
<BoL> Collate data into batch . Use shared memory for stacking . <EoL>
<BoL> Fetcher loop for fetching data from queue and put in reorder dict . <EoL>
<BoL> Rebuild ndarray from pickled shared memory <EoL>
<BoL> Reduce ndarray to shared memory handle <EoL>
<BoL> Worker loop for multiprocessing DataLoader . <EoL>
<BoL> Overrides to construct symbolic graph for this ` Block ` . <EoL>
<BoL> Apply weighting to loss . <EoL>
<BoL> Reshapes x to the same shape as y . <EoL>
<BoL> Return location for the pretrained on local file system . <EoL>
<BoL> Purge all pretrained model files in local file store . <EoL>
<BoL> Densenet-BC 121-layer model from the ` `` Densely Connected Convolutional Networks '' < https : //arxiv.org/pdf/1608.06993.pdf > ` _ paper . <EoL>
<BoL> Densenet-BC 161-layer model from the ` `` Densely Connected Convolutional Networks '' < https : //arxiv.org/pdf/1608.06993.pdf > ` _ paper . <EoL>
<BoL> Densenet-BC 169-layer model from the ` `` Densely Connected Convolutional Networks '' < https : //arxiv.org/pdf/1608.06993.pdf > ` _ paper . <EoL>
<BoL> Densenet-BC 201-layer model from the ` `` Densely Connected Convolutional Networks '' < https : //arxiv.org/pdf/1608.06993.pdf > ` _ paper . <EoL>
<BoL> Returns a pre-defined model by name <EoL>
<BoL> MobileNet model from the ` `` MobileNets : Efficient Convolutional Neural Networks for Mobile Vision Applications '' < https : //arxiv.org/abs/1704.04861 > ` _ paper , with width multiplier 0.25 . <EoL>
<BoL> MobileNet model from the ` `` MobileNets : Efficient Convolutional Neural Networks for Mobile Vision Applications '' < https : //arxiv.org/abs/1704.04861 > ` _ paper , with width multiplier 0.5 . <EoL>
<BoL> MobileNet model from the ` `` MobileNets : Efficient Convolutional Neural Networks for Mobile Vision Applications '' < https : //arxiv.org/abs/1704.04861 > ` _ paper , with width multiplier 0.75 . <EoL>
<BoL> MobileNet model from the ` `` MobileNets : Efficient Convolutional Neural Networks for Mobile Vision Applications '' < https : //arxiv.org/abs/1704.04861 > ` _ paper , with width multiplier 1.0 . <EoL>
<BoL> MobileNetV2 model from the ` `` Inverted Residuals and Linear Bottlenecks : Mobile Networks for Classification , Detection and Segmentation '' < https : //arxiv.org/abs/1801.04381 > ` _ paper . <EoL>
<BoL> MobileNetV2 model from the ` `` Inverted Residuals and Linear Bottlenecks : Mobile Networks for Classification , Detection and Segmentation '' < https : //arxiv.org/abs/1801.04381 > ` _ paper . <EoL>
<BoL> MobileNetV2 model from the ` `` Inverted Residuals and Linear Bottlenecks : Mobile Networks for Classification , Detection and Segmentation '' < https : //arxiv.org/abs/1801.04381 > ` _ paper . <EoL>
<BoL> MobileNetV2 model from the ` `` Inverted Residuals and Linear Bottlenecks : Mobile Networks for Classification , Detection and Segmentation '' < https : //arxiv.org/abs/1801.04381 > ` _ paper . <EoL>
<BoL> ResNet-101 V1 model from ` `` Deep Residual Learning for Image Recognition '' < http : //arxiv.org/abs/1512.03385 > ` _ paper . <EoL>
<BoL> ResNet-101 V2 model from ` `` Identity Mappings in Deep Residual Networks '' < https : //arxiv.org/abs/1603.05027 > ` _ paper . <EoL>
<BoL> ResNet-152 V1 model from ` `` Deep Residual Learning for Image Recognition '' < http : //arxiv.org/abs/1512.03385 > ` _ paper . <EoL>
<BoL> ResNet-152 V2 model from ` `` Identity Mappings in Deep Residual Networks '' < https : //arxiv.org/abs/1603.05027 > ` _ paper . <EoL>
<BoL> ResNet-18 V1 model from ` `` Deep Residual Learning for Image Recognition '' < http : //arxiv.org/abs/1512.03385 > ` _ paper . <EoL>
<BoL> ResNet-18 V2 model from ` `` Identity Mappings in Deep Residual Networks '' < https : //arxiv.org/abs/1603.05027 > ` _ paper . <EoL>
<BoL> ResNet-34 V1 model from ` `` Deep Residual Learning for Image Recognition '' < http : //arxiv.org/abs/1512.03385 > ` _ paper . <EoL>
<BoL> ResNet-34 V2 model from ` `` Identity Mappings in Deep Residual Networks '' < https : //arxiv.org/abs/1603.05027 > ` _ paper . <EoL>
<BoL> ResNet-50 V1 model from ` `` Deep Residual Learning for Image Recognition '' < http : //arxiv.org/abs/1512.03385 > ` _ paper . <EoL>
<BoL> ResNet-50 V2 model from ` `` Identity Mappings in Deep Residual Networks '' < https : //arxiv.org/abs/1603.05027 > ` _ paper . <EoL>
<BoL> SqueezeNet 1.0 model from the ` `` SqueezeNet : AlexNet-level accuracy with 50x fewer parameters and < 0.5MB model size '' < https : //arxiv.org/abs/1602.07360 > ` _ paper . <EoL>
<BoL> SqueezeNet 1.1 model from the ` official SqueezeNet repo < https : //github.com/DeepScale/SqueezeNet/tree/master/SqueezeNet_v1.1 > ` _ . SqueezeNet 1.1 has 2.4x less computation and slightly fewer parameters than SqueezeNet 1.0 , without sacrificing accuracy . <EoL>
<BoL> Initialize an array <EoL>
<BoL> Legacy initialization method . <EoL>
<BoL> Internal verbose print function <EoL>
<BoL> Saves the initializer to string <EoL>
<BoL> Switch on/off verbose modeeturns |x|/size ( x ) , async execution . <EoL>
<BoL> VGG-11 model from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-11 model with batch normalization from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-13 model from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-13 model with batch normalization from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-16 model from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-16 model with batch normalization from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-19 model from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> VGG-19 model with batch normalization from the ` `` Very Deep Convolutional Networks for Large-Scale Image Recognition '' < https : //arxiv.org/abs/1409.1556 > ` _ paper . <EoL>
<BoL> forward using CUDNN or CPU kenrel <EoL>
<BoL> Unfuses the fused RNN in to a stack of rnn cells . <EoL>
<BoL> Initial state for this cell . <EoL>
<BoL> Appends a cell into the stack . <EoL>
<BoL> Create kvstore This function select and create a proper kvstore if given the kvstore type . <EoL>
<BoL> Create kvstore assuming some parameters ' storage types are row_sparse . <EoL>
<BoL> Return the base URL for Gluon dataset and model repository . <EoL>
<BoL> Rescales NDArrays so that the sum of their 2-norm is smaller than ` max_norm ` . <EoL>
<BoL> Splits an NDArray into ` len ( ctx_list ) ` slices along ` batch_axis ` and loads each slice to one context in ` ctx_list ` . <EoL>
<BoL> Splits an NDArray into ` num_slice ` slices along ` batch_axis ` . <EoL>
<BoL> Abstract implementation body <EoL>
<BoL> Saves the Augmenter to string <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Override the default to avoid duplicate dump . <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Align parameters as pairs <EoL>
<BoL> Abstract implementation body <EoL>
<BoL> Saves the Augmenter to string <EoL>
<BoL> Augmenter implementation body <EoL>
<BoL> Override the default one to avoid duplicate dump . <EoL>
<BoL> Augmenter implementation <EoL>
<BoL> Helper function to flip label . <EoL>
<BoL> Augmenter implementation body <EoL>
<BoL> Calculate areas for multiple labels <EoL>
<BoL> Check if constrains are satisfied <EoL>
<BoL> Calculate intersect areas , normalized . <EoL>
<BoL> Propose cropping areas <EoL>
<BoL> Convert labels according to crop box <EoL>
<BoL> Augmenter body <EoL>
<BoL> Generate random padding region <EoL>
<BoL> Update label according to padding region <EoL>
<BoL> Augmenter implementation body <EoL>
<BoL> Override default . <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body . Using approximate linear transfomation described in : https : //beesbuzz.biz/code/hsv_color_transforms.php <EoL>
<BoL> Helper function for batchifying data <EoL>
<BoL> Validate label and its shape . <EoL>
<BoL> Helper function to estimate label shape <EoL>
<BoL> Helper function to parse object detection label . <EoL>
<BoL> Override Transforms input data with specified augmentations . <EoL>
<BoL> Checks if the input data shape is valid <EoL>
<BoL> Checks if the new label shape is valid <EoL>
<BoL> Checks if the input data is valid <EoL>
<BoL> Resets the iterator and ignore roll over data <EoL>
<BoL> Decodes a string or byte string to an NDArray . See mx.img.imdecode for more details.Locate the image file/index if decode fails . <EoL>
<BoL> Override the function for returning next batch . <EoL>
<BoL> Helper function for reading in next sample . <EoL>
<BoL> Final postprocessing step before image is loaded into the batch . <EoL>
<BoL> Reads an input image ` fname ` and returns the decoded raw bytes . <EoL>
<BoL> Resets the iterator to the beginning of the data . <EoL>
<BoL> Reshape iterator for data_shape or label_shape . <EoL>
<BoL> Synchronize label shape with the input iterator . This is useful when train/validation iterators have different label padding . <EoL>
<BoL> Transforms input data with specified augmentation . <EoL>
<BoL> Returns the next batch of data . <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Augmenter body <EoL>
<BoL> Override the default to avoid duplicate dump . <EoL>
<BoL> Crops the image ` src ` to the given ` size ` by trimming on all four sides and preserving the center of the image . Upsamples if ` src ` is smaller than ` size ` . <EoL>
<BoL> Normalize src with mean and std . <EoL>
<BoL> Crop src at fixed location , and ( optionally ) resize it to size . <EoL>
<BoL> Get the interpolation method for resize functions . The major purpose of this function is to wrap a random interp method selection and a auto-estimation method . <EoL>
<BoL> Decode an image to an NDArray . <EoL>
<BoL> Read and decode an image to an NDArray . <EoL>
<BoL> Randomly crop ` src ` with ` size ` ( width , height ) . Upsample result if ` src ` is smaller than ` size ` . <EoL>
<BoL> Randomly crop src with size . Randomize area and aspect ratio . <EoL>
<BoL> Resizes shorter edge to size . <EoL>
<BoL> Scales down crop size if it 's larger than image size . <EoL>
<BoL> Abstract method to Initialize weight . <EoL>
<BoL> Register functions <EoL>
<BoL> alias registratoegistrator function <EoL>
<BoL> Create instance from config <EoL>
<BoL> Registers a custom initializer . <EoL>
<BoL> x.__getitem__ ( i ) < = > x [ i ] <EoL>
<BoL> Returns a string representation of the sparse array . <EoL>
<BoL> x.__setitem__ ( i , y ) < = > x [ i ] =y <EoL>
<BoL> Get a deep copy NDArray of the i-th aux data array associated with the BaseSparseNDArray . <EoL>
<BoL> Data-type of the array 's ith aux data . <EoL>
<BoL> A deep copy NDArray of the data array associated with the BaseSparseNDArray . <EoL>
<BoL> Return a dense `` numpy.ndarray `` object with value copied from this array <EoL>
<BoL> Returns a `` scipy.sparse.csr.csr_matrix `` object with value copied from this array <EoL>
<BoL> Returns a copy of the array after casting to a specified type . <EoL>
<BoL> Check whether the NDArray format is valid . <EoL>
<BoL> Copies the value of this array to another array . <EoL>
<BoL> Return a copy of the array with chosen storage type . <EoL>
<BoL> Create an iterator . The parameters listed below can be passed in as keyword arguments . <EoL>
<BoL> Load data from underlying arrays , internal use only . <EoL>
<BoL> Ignore roll over data and set to start . <EoL>
<BoL> Thread entry <EoL>
<BoL> Return True if `` data `` has instance of `` dtype `` . This function is called after _init_data . `` data `` is a list of ( str , NDArray ) <EoL>
<BoL> Convert data into canonical form . <EoL>
<BoL> List and add all the data iterators to current module . <EoL>
<BoL> Create an io iterator by handle.Create an iterator . The parameters listed below can be passed in as keyword arguments . <EoL>
<BoL> Shuffle the data . <EoL>
<BoL> Returns evenly spaced values within a given interval . <EoL>
<BoL> Creates an array from any object exposing the array interface . <EoL>
<BoL> DEPRECATED , use `` concat `` instead <EoL>
<BoL> Shuffle the elements randomly . <EoL>
<BoL> Creates a sparse array from any object exposing the array interface . <EoL>
<BoL> Initializes a new KVStore . <EoL>
<BoL> Invokes global barrier among all worker nodes . <EoL>
<BoL> Sends a command to all server nodes . <EoL>
<BoL> Sets a push updater into the store . <EoL>
<BoL> Initializes a single or a sequence of key-value pairs into the store . <EoL>
<BoL> Loads the optimizer ( updater ) state from the file . <EoL>
<BoL> Pulls a single value or a sequence of values from the store . <EoL>
<BoL> Pushes a single or a sequence of key-value pairs into the store . <EoL>
<BoL> Pulls a single RowSparseNDArray value or a sequence of RowSparseNDArray values \ from the store with specified row_ids . When there is only one row_id , KVStoreRowSparsePull \ is invoked just once and the result is broadcast to all the rest of outputs . <EoL>
<BoL> Saves the optimizer ( updater ) state to a file . This is often used when checkpointing the model during training . <EoL>
<BoL> Specifies type of low-bit quantization for gradient compression \ and additional arguments depending on the type of compression being used . <EoL>
<BoL> Registers an optimizer with the kvstore . <EoL>
<BoL> Returns ctype arrays for keys and values ( converted to strings ) in a dictionary <EoL>
<BoL> Returns ctype arrays for the key-value args , and the whether string keys are used . For internal use only . <EoL>
<BoL> A wrapper for the user-defined handle.ctypes function <EoL>
<BoL> Creates a new KVStore . <EoL>
<BoL> Initialize a new KVStoreServer . <EoL>
<BoL> Return the server controller.Server controler . <EoL>
<BoL> Run the server , whose behavior is like . <EoL>
<BoL> Start server/scheduler . <EoL>
<BoL> Find MXNet dynamic library files . <EoL>
<BoL> Gets a customized logger . <EoL>
<BoL> Gets a customized logger . <EoL>
<BoL> Return a new learning rate . <EoL>
<BoL> Gets the current evaluation result . <EoL>
<BoL> Save configurations of metric . Can be recreated from configs with metric.create ( **config ) <EoL>
<BoL> Returns zipped name and value pairs . <EoL>
<BoL> Resets the internal evaluation result to initial state . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Update the internal evaluation with named label and pred <EoL>
<BoL> Adds a child metric . <EoL>
<BoL> Returns the current evaluation result . <EoL>
<BoL> Returns a child metric . <EoL>
<BoL> Resets the internal evaluation result to initial state . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Resets the internal evaluation result to initial state . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Resets the internal evaluation result to initial state . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Returns the current evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Updates the internal evaluation result . <EoL>
<BoL> Update various binary classification counts for a single ( label , pred ) pair . <EoL>
<BoL> Helper function for checking shape of label and prediction <EoL>
<BoL> Creates evaluation metric from metric names or instances of EvalMetric or a custom metric function . <EoL>
<BoL> Creates a custom evaluation metric that receives its inputs as numpy arrays.Internal eval function . <EoL>
<BoL> Backward computation . <EoL>
<BoL> Forward computation . It supports data batches with different shapes , such as different batch sizes or different image sizes . If reshaping of data batch relates to modification of symbol or module , such as changing image layout ordering or switching from training to predicting , module rebinding is required . <EoL>
<BoL> Gets the gradients to the inputs , computed in the previous backward computation . <EoL>
<BoL> Gets outputs of the previous forward computation . <EoL>
<BoL> Gets parameters , those are potentially copies of the the actual parameters used to do computation on the device . <EoL>
<BoL> Gets states from all devices <EoL>
<BoL> Installs monitor on all executors . <EoL>
<BoL> Prepares the module for processing a data batch . <EoL>
<BoL> Sets value for states . Only one of states & value can be specified . <EoL>
<BoL> Updates parameters according to the installed optimizer and the gradients computed in the previous forward-backward batch . <EoL>
<BoL> Evaluates and accumulates evaluation metric on outputs of the last forward computation . <EoL>
<BoL> Internal utility function to reset binding . <EoL>
<BoL> Backward computation . <EoL>
<BoL> Forward computation . <EoL>
<BoL> Gets the gradients with respect to the inputs of the module . <EoL>
<BoL> Gets outputs from a previous forward computation . <EoL>
<BoL> Gets current parameters . <EoL>
<BoL> Gets states from all devices . <EoL>
<BoL> Installs monitor on all executors <EoL>
<BoL> Prepares the module for processing a data batch . <EoL>
<BoL> Sets value for states . Only one of states & values can be specified . <EoL>
<BoL> Switches to a different bucket . This will change `` self.curr_module `` . <EoL>
<BoL> Updates parameters according to installed optimizer and the gradient computed in the previous forward-backward cycle . <EoL>
<BoL> Evaluates and accumulates evaluation metric on outputs of the last forward computation . <EoL>
<BoL> Actual implementation of the backward computation . The computation should take `` self._scores `` and `` self._labels `` and then compute the gradients with respect to the scores , store it as an ` NDArray ` in `` self._scores_grad `` . <EoL>
<BoL> Computes the shapes of outputs . <EoL>
<BoL> Backward computation . <EoL>
<BoL> Forward computation . Here we do nothing but to keep a reference to the scores and the labels so that we can do backward computation . <EoL>
<BoL> Gets the gradients to the inputs , computed in the previous backward computation . <EoL>
<BoL> Gets outputs of the previous forward computation . As a output loss module , we treat the inputs to this module as scores , and simply return them . <EoL>
<BoL> Gets parameters , those are potentially copies of the the actual parameters used to do computation on the device . Subclass should override this method if contains parameters . <EoL>
<BoL> Installs monitor on all executors . <EoL>
<BoL> Updates parameters according to the installed optimizer and the gradients computed in the previous forward-backward batch . <EoL>
<BoL> Evaluates and accumulates evaluation metric on outputs of the last forward computation . Subclass should override this method if needed . <EoL>
<BoL> The subclass should implement this method to compute the shape of outputs . This method can assume that the `` data_shapes `` and `` label_shapes `` are already initialized . <EoL>
<BoL> Adds a module to the chain . <EoL>
<BoL> Backward computation . <EoL>
<BoL> Forward computation . <EoL>
<BoL> Gets the gradients with respect to the inputs of the module . <EoL>
<BoL> Gets outputs from a previous forward computation . <EoL>
<BoL> Gets current parameters . <EoL>
<BoL> Internal function to help checking duplicated names . <EoL>
<BoL> Installs monitor on all executors . <EoL>
<BoL> Updates parameters according to installed optimizer and the gradient computed in the previous forward-backward cycle . <EoL>
<BoL> Evaluates and accumulates evaluation metric on outputs of the last forward computation . <EoL>
<BoL> Check that all input names are in symbol 's arguments . <EoL>
<BoL> Check that input names matches input data descriptors . <EoL>
<BoL> parse data_attrs into DataDesc format and check that names match <EoL>
<BoL> Get the canonical name for a symbol . <EoL>
<BoL> Load data into sliced arrays . <EoL>
<BoL> Load a list of arrays into a list of arrays specified by slices . <EoL>
<BoL> Load label into sliced arrays . <EoL>
<BoL> Merge outputs that lives on multiple context into one , so that they look like living on one context . <EoL>
<BoL> Prepare the group2contexts , will duplicate the context if some ctx_group map to only one context . <EoL>
<BoL> Initialize kvstore <EoL>
<BoL> Perform update of param_arrays from grad_arrays on kvstore . <EoL>
<BoL> Load model checkpoint from file . <EoL>
<BoL> Return a new array of given shape and type , filled with zeros . <EoL>
<BoL> verify the argument of the default symbol and user provided parameters <EoL>
<BoL> Initialize the iterator given eval_data . <EoL>
<BoL> Initialize the iterator given input . <EoL>
<BoL> Initialize weight parameters and auxiliary states . <EoL>
<BoL> Initialize the predictor module for running prediction . <EoL>
<BoL> Check if name is a data argument . <EoL>
<BoL> Load model checkpoint from file . <EoL>
<BoL> Run the prediction , always only use one device . <EoL>
<BoL> Checkpoint the model checkpoint into file . <EoL>
<BoL> Run the model given an input and calculate the score as assessed by an evaluation metric . <EoL>
<BoL> Sends args and kwargs to any configured callbacks . This handles the cases where the 'callbacks ' variable is `` None `` , a single function , or a list . <EoL>
<BoL> Perform update of param_arrays from grad_arrays on NCCL kvstore . <EoL>
<BoL> Returns a closure of the updater needed for kvstore . <EoL>
<BoL> eturns |x|/size ( x ) , async execution.wrapper for executor callback <EoL>
<BoL> install callback to executor . Supports installing to multiple exes . <EoL>
<BoL> Start collecting stats for current batch . Call before calling forward . <EoL>
<BoL> End collecting for current batch and return results . Call after computation of current batch . <EoL>
<BoL> End collecting and print results . <EoL>
<BoL> Returns a new empty handle . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Run an if-then-else using user-defined condition and computationConverts `` inputs '' , possibly typed mxnet NDArray , a numpy ndarray , other python types , to the given type <EoL>
<BoL> Run a for loop with user-defined computation over NDArrays on dimension 0 . <EoL>
<BoL> Draw random samples from an approximately log-uniform or Zipfian distribution . <EoL>
<BoL> Draw random samples from a uniform distribution . <EoL>
<BoL> Run a while loop with user-defined computation and loop condition.Converts `` inputs '' , possibly typed mxnet NDArray , a numpy ndarray , other python types , to the given typeThis wrapper unifies `` func : loop_vars - > new_loop_vars '' and `` func : loop_vars - > ( step_output , new_loop_vars ) '' into `` func : loop_vars - > ( None or tuple of step_outputs , tuple of new_loop_vars ) <EoL>
<BoL> Returns element-wise division of the input arrays with broadcasting . <EoL>
<BoL> Returns a new array of given shape and type , without initializing entries . <EoL>
<BoL> Returns the result of element-wise **equal to** ( == ) comparison operation with broadcasting . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Returns a new array of given shape and type , filled with the given value ` val ` . <EoL>
<BoL> Special op to copy data cross device <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Divide an array with a scalar . <EoL>
<BoL> Given the `` legs '' of a right triangle , return its hypotenuse . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Multiply an array with a scalar . <EoL>
<BoL> Stub for implementing an operator implemented in native frontend language with ndarray . <EoL>
<BoL> Stub for implementing an operator implemented in native frontend language . <EoL>
<BoL> Place holder for variable who can not perform gradient <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Return evenly spaced values within a given interval . Similar to Numpy <EoL>
<BoL> Accumulates data according to indices and get the result . It 's the backward of ` gather_nd ` . <EoL>
<BoL> Run a if-then-else using user-defined condition and computation <EoL>
<BoL> Returns a copy of the input . <EoL>
<BoL> Assign the rhs to a cropped subset of lhs . <EoL>
<BoL> ( Assign the scalar to a cropped subset of the input . <EoL>
<BoL> Pad image border with OpenCV . <EoL>
<BoL> Decode image with OpenCV . Note : return image in RGB by default , instead of OpenCV 's default BGR . <EoL>
<BoL> Read and decode image with OpenCV . Note : return image in RGB by default , instead of OpenCV 's default BGR . <EoL>
<BoL> Resize image with OpenCV . <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Divide an array with a scalar . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Run a for loop over an NDArray with user-defined computation <EoL>
<BoL> fill target with a scalar value <EoL>
<BoL> This operators implements the histogram function . <EoL>
<BoL> Given the `` legs '' of a right triangle , return its hypotenuse . <EoL>
<BoL> Decode an image , clip to ( x0 , y0 , x1 , y1 ) , subtract mean , and write to buffer <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Multiply an array with a scalar . <EoL>
<BoL> fill target with ones <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Converts a batch of index arrays into an array of flat indices . The operator follows numpy conventions so a single multi index is given by a column of the input matrix . <EoL>
<BoL> Concurrent sampling from multiple exponential distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple gamma distributions with parameters *alpha* ( shape ) and *beta* ( scale ) . <EoL>
<BoL> Concurrent sampling from multiple generalized negative binomial distributions with parameters *mu* ( mean ) and *alpha* ( dispersion ) . <EoL>
<BoL> Concurrent sampling from multiple multinomial distributions . <EoL>
<BoL> Concurrent sampling from multiple negative binomial distributions with parameters *k* ( failure limit ) and *p* ( failure probability ) . <EoL>
<BoL> Concurrent sampling from multiple normal distributions with parameters *mu* ( mean ) and *sigma* ( standard deviation ) . <EoL>
<BoL> Concurrent sampling from multiple Poisson distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple uniform distributions on the intervals given by * [ low , high ) * . <EoL>
<BoL> Draw random samples from an an approximately log-uniform or Zipfian distribution without replacement . <EoL>
<BoL> Divides arguments element-wise . If the left-hand-side input is 'row_sparse ' , then only the values which exist in the left-hand sparse array are computed . The 'missing ' values are ignored . <EoL>
<BoL> Subtracts a scalar to a tensor element-wise . <EoL>
<BoL> Adds a scalar to a tensor element-wise . <EoL>
<BoL> This operator has the same functionality as scatter_nd except that it does not reset the elements not indexed by the input index ` NDArray ` in the input data ` NDArray ` . output should be explicitly given and be the same as lhs . <EoL>
<BoL> Randomly shuffle the elements . <EoL>
<BoL> Assign the rhs to a cropped subset of lhs . <EoL>
<BoL> ( Assign the scalar to a cropped subset of the input . <EoL>
<BoL> Computes the square sum of array elements over a given axis for row-sparse matrix . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Converts an array of flat indices into a batch of index arrays . The operator follows numpy conventions so a single multi index is given by a column of the output matrix . <EoL>
<BoL> Run a while loop over with user-defined condition and computation <EoL>
<BoL> fill target with zeros <EoL>
<BoL> Applies a 2D adaptive average pooling over a 4D input with the shape of ( NCHW ) . The pooling kernel and stride sizes are automatically chosen for desired output sizes . <EoL>
<BoL> Perform 2D resizing ( upsampling or downsampling ) for 4D input using bilinear interpolation . <EoL>
<BoL> Connectionist Temporal Classification Loss . <EoL>
<BoL> Compute 2-D deformable convolution on 4-D input . <EoL>
<BoL> Performs deformable position-sensitive region-of-interest pooling on inputs . The DeformablePSROIPooling operation is described in https : //arxiv.org/abs/1703.06211 .batch_size will change to the number of region bounding boxes after DeformablePSROIPooling <EoL>
<BoL> Convert multibox detection predictions . <EoL>
<BoL> Generate prior ( anchor ) boxes from data , sizes and ratios . <EoL>
<BoL> Compute Multibox training targets <EoL>
<BoL> Generate region proposals via RPN <EoL>
<BoL> Performs region-of-interest pooling on inputs . <EoL>
<BoL> Generate region proposals via RPN <EoL>
<BoL> This operator takes a 4D feature map as an input array and region proposals as ` rois ` , then align the feature map over sub-regions of input and produces a fixed-sized output array . This operator is typically used in Faster R-CNN & Mask R-CNN networks . <EoL>
<BoL> Maps integer indices to vector representations ( embeddings ) . <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Compute bipartite matching . The matching is performed on score matrix with shape [ B , N , M ] - B : batch_size - N : number of rows to match - M : number of columns as reference to be matched against . <EoL>
<BoL> Bounding box overlap of two arrays . The overlap is defined as Intersection-over-Union , aka , IOU . - lhs : ( a_1 , a_2 , ... , a_n , 4 ) array - rhs : ( b_1 , b_2 , ... , b_n , 4 ) array - output : ( a_1 , a_2 , ... , a_n , b_1 , b_2 , ... , b_n ) array <EoL>
<BoL> Apply non-maximum suppression to input . <EoL>
<BoL> Apply non-maximum suppression to input . <EoL>
<BoL> Apply CountSketch to input : map a d-dimension data to k-dimension data '' <EoL>
<BoL> Connectionist Temporal Classification Loss . <EoL>
<BoL> Dequantize the input tensor into a float tensor . min_range and max_range are scalar floats that specify the range for the output data . <EoL>
<BoL> Rescale the input by the square root of the channel dimension . <EoL>
<BoL> Apply 1D FFT to input '' <EoL>
<BoL> Apply 1D ifft to input '' <EoL>
<BoL> This operators implements the quadratic function : .. math : : f ( x ) = ax^2+bx+c where : math : ` x ` is an input tensor and all operations in the function are element-wise . <EoL>
<BoL> Quantize a input tensor from float to ` out_type ` , with user-specified ` min_range ` and ` max_range ` . <EoL>
<BoL> Convolution operator for input , weight and bias data type of int8 , and accumulates in type int32 for the output . <EoL>
<BoL> Fully Connected operator for input , weight and bias data type of int8 , and accumulates in type int32 for the output . <EoL>
<BoL> Pooling operator for input and output data type of int8 . The input and output data comes with min and max thresholds for quantizing the float32 data into int8 . <EoL>
<BoL> Given data that is quantized in int32 and the corresponding thresholds , requantize the data into int8 using min and max thresholds either calculated at runtime or from calibration . It 's highly recommended to pre-calucate the min and max thresholds through calibration since it is able to save the runtime of the operator and improve the inference accuracy . <EoL>
<BoL> Adjust the lighting level of the input . Follow the AlexNet style . <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L68 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L76 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L52 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L84 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L111 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L90 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L72 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L80 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L104 <EoL>
<BoL> Randomly add PCA noise . Follow the AlexNet style . <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L97 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L42 <EoL>
<BoL> LQ factorization for general matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs general matrix multiplication and accumulation . Input are tensors *A* , *B* , *C* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs general matrix multiplication . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs Cholesky factorization of a symmetric positive-definite matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs matrix inversion from a Cholesky factorization . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Computes the sum of the logarithms of the diagonal elements of a square matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Eigendecomposition for symmetric matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Multiplication of matrix with its transpose . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs multiplication with a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Solves matrix equation involving a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Applies an activation function element-wise to the input . <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Applies bilinear sampling to input feature map . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Casts all elements of the input to a new type . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Compute *N*-D convolution on * ( N+2 ) *-D input . <EoL>
<BoL> This operator is DEPRECATED . Apply convolution to input then add a bias . <EoL>
<BoL> Applies correlation to inputs . <EoL>
<BoL> .. note : : ` Crop ` is deprecated . Use ` slice ` instead . <EoL>
<BoL> Apply a custom operator implemented in a frontend language ( like Python ) . <EoL>
<BoL> Computes 1D or 2D transposed convolution ( aka fractionally strided convolution ) of the input tensor . <EoL>
<BoL> Applies dropout operation to input array . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Maps integer indices to vector representations ( embeddings ) . <EoL>
<BoL> Flattens the input array into a 2-D array by collapsing the higher dimensions . <EoL>
<BoL> Applies a linear transformation : : math : ` Y = XW^T + b ` . <EoL>
<BoL> Generates 2D sampling grid for bilinear sampling . <EoL>
<BoL> Apply a sparse regularization to the output a sigmoid activation function . <EoL>
<BoL> Applies instance normalization to the n-dimensional input array . <EoL>
<BoL> Normalize the input array using the L2 norm . <EoL>
<BoL> Applies local response normalization to the input . <EoL>
<BoL> Layer normalization . <EoL>
<BoL> Applies Leaky rectified linear unit activation element-wise to the input . <EoL>
<BoL> Computes and optimizes for squared loss during backward propagation . Just outputs `` data `` during forward propagation . <EoL>
<BoL> Applies a logistic function to the input . <EoL>
<BoL> Computes mean absolute error of the input . <EoL>
<BoL> Make your own loss function in network construction . <EoL>
<BoL> Pads an input array with a constant or edge values of the array . <EoL>
<BoL> Performs pooling on the input . <EoL>
<BoL> This operator is DEPRECATED . Perform pooling on the input . <EoL>
<BoL> Applies recurrent layers to input data . Currently , vanilla RNN , LSTM and GRU are implemented , with both multi-layer and bidirectional support . <EoL>
<BoL> Performs region of interest ( ROI ) pooling on the input array . <EoL>
<BoL> Reshapes the input array . <EoL>
<BoL> Computes support vector machine based transformation of the input . <EoL>
<BoL> Takes the last element of a sequence . <EoL>
<BoL> Sets all elements outside the sequence to a constant value . <EoL>
<BoL> Reverses the elements of each sequence . <EoL>
<BoL> Splits an array along a particular axis into multiple sub-arrays . <EoL>
<BoL> Please use ` SoftmaxOutput ` . <EoL>
<BoL> Applies softmax activation to input . This is intended for internal layers . <EoL>
<BoL> Computes the gradient of cross entropy loss with respect to softmax output . <EoL>
<BoL> Applies a spatial transformer to input feature map . <EoL>
<BoL> Interchanges two axes of an array . <EoL>
<BoL> Performs nearest neighbor/bilinear up sampling to inputs . <EoL>
<BoL> Returns element-wise absolute value of the input . <EoL>
<BoL> Update function for Adam optimizer . Adam is seen as a generalization of AdaGrad . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Returns element-wise inverse cosine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic cosine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse sine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic sine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse tangent of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic tangent of the input array , \ computed element-wise . <EoL>
<BoL> Returns indices of the maximum values along an axis . <EoL>
<BoL> Returns argmax indices of each channel from the input array . <EoL>
<BoL> Returns indices of the minimum values along an axis . <EoL>
<BoL> Returns the indices that would sort an input array along the given axis . <EoL>
<BoL> Batchwise dot product . <EoL>
<BoL> Takes elements from a data batch . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Broadcasts the input array over particular axes . <EoL>
<BoL> Broadcasts the input array over particular axes . <EoL>
<BoL> Returns element-wise division of the input arrays with broadcasting . <EoL>
<BoL> Returns the result of element-wise **equal to** ( == ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **greater than** ( > ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **greater than or equal to** ( > = ) comparison operation with broadcasting . <EoL>
<BoL> Returns the hypotenuse of a right angled triangle , given its `` legs '' with broadcasting . <EoL>
<BoL> Returns the result of element-wise **lesser than** ( < ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **lesser than or equal to** ( < = ) comparison operation with broadcasting . <EoL>
<BoL> Broadcasts lhs to have the same shape as rhs . <EoL>
<BoL> Returns the result of element-wise **logical and** with broadcasting . <EoL>
<BoL> Returns the result of element-wise **logical or** with broadcasting . <EoL>
<BoL> Returns the result of element-wise **logical xor** with broadcasting . <EoL>
<BoL> Returns element-wise maximum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise minimum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise modulo of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise product of the input arrays with broadcasting . <EoL>
<BoL> Returns the result of element-wise **not equal to** ( ! = ) comparison operation with broadcasting . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Returns result of first array elements raised to powers from second array , element-wise with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Broadcasts the input array to a new shape . <EoL>
<BoL> Casts all elements of the input to a new type . <EoL>
<BoL> Casts tensor storage type to the new type . <EoL>
<BoL> Returns element-wise cube-root value of the input . <EoL>
<BoL> Returns element-wise ceiling of the input . <EoL>
<BoL> Choose one element from each line ( row for python , column for R/Julia ) in lhs according to index indicated by rhs . This function assume rhs uses 0-based index . <EoL>
<BoL> Clips ( limits ) the values in an array . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Computes the element-wise cosine of the input array . <EoL>
<BoL> Returns the hyperbolic cosine of the input array , computed element-wise . <EoL>
<BoL> Slices a region of the array . <EoL>
<BoL> Converts each element of the input array from radians to degrees . <EoL>
<BoL> Rearranges ( permutes ) data from depth into blocks of spatial data . <EoL>
<BoL> Extracts a diagonal or constructs a diagonal array . <EoL>
<BoL> Dot product of two arrays . <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Returns element-wise exponential value of the input . <EoL>
<BoL> Inserts a new axis of size 1 into the array shape <EoL>
<BoL> Returns `` exp ( x ) - 1 `` computed element-wise on the input . <EoL>
<BoL> Fill one element of each line ( row for python , column for R/Julia ) in lhs according to index indicated by rhs and values indicated by mhs . This function assume rhs uses 0-based index . <EoL>
<BoL> Returns element-wise rounded value to the nearest \ integer towards zero of the input . <EoL>
<BoL> Flattens the input array into a 2-D array by collapsing the higher dimensions . <EoL>
<BoL> Reverses the order of elements along given axis while preserving array shape . <EoL>
<BoL> Returns element-wise floor of the input . <EoL>
<BoL> The FTML optimizer described in *FTML - Follow the Moving Leader in Deep Learning* , available at http : //proceedings.mlr.press/v70/zheng17a/zheng17a.pdf . <EoL>
<BoL> Update function for Ftrl optimizer . Referenced from *Ad Click Prediction : a View from the Trenches* , available at http : //dl.acm.org/citation.cfm ? id=2488200 . <EoL>
<BoL> Returns the gamma function ( extension of the factorial function \ to the reals ) , computed element-wise on the input array . <EoL>
<BoL> Returns element-wise log of the absolute value of the gamma function \ of the input . <EoL>
<BoL> Gather elements or slices from ` data ` and store to a tensor whose shape is defined by ` indices ` . <EoL>
<BoL> Computes hard sigmoid of x element-wise . <EoL>
<BoL> Returns a copy of the input . <EoL>
<BoL> Computes the Khatri-Rao product of the input matrices . <EoL>
<BoL> LQ factorization for general matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs general matrix multiplication and accumulation . Input are tensors *A* , *B* , *C* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs general matrix multiplication . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs Cholesky factorization of a symmetric positive-definite matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs matrix inversion from a Cholesky factorization . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Computes the sum of the logarithms of the diagonal elements of a square matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Multiplication of matrix with its transpose . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs multiplication with a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Solves matrix equation involving a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Returns element-wise Natural logarithmic value of the input . <EoL>
<BoL> Returns element-wise Base-10 logarithmic value of the input . <EoL>
<BoL> Returns element-wise `` log ( 1 + x ) `` value of the input . <EoL>
<BoL> Returns element-wise Base-2 logarithmic value of the input . <EoL>
<BoL> Computes the log softmax of the input . This is equivalent to computing softmax followed by log . <EoL>
<BoL> Returns the result of logical NOT ( ! ) function <EoL>
<BoL> Make your own loss function in network construction . <EoL>
<BoL> Computes the max of array elements over given axes . <EoL>
<BoL> Computes the max of array elements over given axes . <EoL>
<BoL> Computes the mean of array elements over given axes . <EoL>
<BoL> Computes the min of array elements over given axes . <EoL>
<BoL> Computes the min of array elements over given axes . <EoL>
<BoL> Updater function for multi-precision sgd optimizer <EoL>
<BoL> Updater function for multi-precision sgd optimizer <EoL>
<BoL> Computes the product of array elements over given axes treating Not a Numbers ( `` NaN `` ) as one . <EoL>
<BoL> Computes the sum of array elements over given axes treating Not a Numbers ( `` NaN `` ) as zero . <EoL>
<BoL> Numerical negative of the argument , element-wise . <EoL>
<BoL> Computes the norm on an NDArray . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Returns a one-hot array . <EoL>
<BoL> Return an array of ones with the same shape and type as the input array . <EoL>
<BoL> Pads an input array with a constant or edge values of the array . <EoL>
<BoL> Picks elements from an input array according to the input indices along the given axis . <EoL>
<BoL> Computes the product of array elements over given axes . <EoL>
<BoL> Converts each element of the input array from degrees to radians . <EoL>
<BoL> Draw random samples from an exponential distribution . <EoL>
<BoL> Draw random samples from a gamma distribution . <EoL>
<BoL> Draw random samples from a generalized negative binomial distribution . <EoL>
<BoL> Draw random samples from a negative binomial distribution . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Draw random samples from a Poisson distribution . <EoL>
<BoL> Draw random samples from a uniform distribution . <EoL>
<BoL> Converts a batch of index arrays into an array of flat indices . The operator follows numpy conventions so a single multi index is given by a column of the input matrix . <EoL>
<BoL> Returns element-wise inverse cube-root value of the input . <EoL>
<BoL> Returns the reciprocal of the argument , element-wise . <EoL>
<BoL> Computes rectified linear . <EoL>
<BoL> Repeats elements of an array . <EoL>
<BoL> Reshapes the input array . <EoL>
<BoL> Reshape some or all dimensions of ` lhs ` to have the same shape as some or all dimensions of ` rhs ` . <EoL>
<BoL> Reverses the order of elements along given axis while preserving array shape . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Update function for ` RMSProp ` optimizer . <EoL>
<BoL> Update function for RMSPropAlex optimizer . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Returns element-wise inverse square-root value of the input . <EoL>
<BoL> Concurrent sampling from multiple exponential distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple gamma distributions with parameters *alpha* ( shape ) and *beta* ( scale ) . <EoL>
<BoL> Concurrent sampling from multiple generalized negative binomial distributions with parameters *mu* ( mean ) and *alpha* ( dispersion ) . <EoL>
<BoL> Concurrent sampling from multiple multinomial distributions . <EoL>
<BoL> Concurrent sampling from multiple negative binomial distributions with parameters *k* ( failure limit ) and *p* ( failure probability ) . <EoL>
<BoL> Concurrent sampling from multiple normal distributions with parameters *mu* ( mean ) and *sigma* ( standard deviation ) . <EoL>
<BoL> Concurrent sampling from multiple Poisson distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple uniform distributions on the intervals given by * [ low , high ) * . <EoL>
<BoL> Scatters data into a new tensor according to indices . <EoL>
<BoL> Momentum update function for Stochastic Gradient Descent ( SGD ) optimizer . <EoL>
<BoL> Update function for Stochastic Gradient Descent ( SDG ) optimizer . <EoL>
<BoL> Returns a 1D int64 array containing the shape of data . <EoL>
<BoL> Randomly shuffle the elements . <EoL>
<BoL> Computes sigmoid of x element-wise . <EoL>
<BoL> Returns element-wise sign of the input . <EoL>
<BoL> Update function for SignSGD optimizer . <EoL>
<BoL> SIGN momentUM ( Signum ) optimizer . <EoL>
<BoL> Computes the element-wise sine of the input array . <EoL>
<BoL> Returns the hyperbolic sine of the input array , computed element-wise . <EoL>
<BoL> Returns a 1D int64 array containing the size of data . <EoL>
<BoL> Slices a region of the array . <EoL>
<BoL> Slices along a given axis . <EoL>
<BoL> Slices a region of the array like the shape of another array . <EoL>
<BoL> Calculate Smooth L1 Loss ( lhs , scalar ) by summing <EoL>
<BoL> Applies the softmax function . <EoL>
<BoL> Calculate cross entropy of softmax output and one-hot label . <EoL>
<BoL> Computes softsign of x element-wise . <EoL>
<BoL> Returns a sorted copy of an input array along the given axis . <EoL>
<BoL> Rearranges ( permutes ) blocks of spatial data into depth . Similar to ONNX SpaceToDepth operator : https : //github.com/onnx/onnx/blob/master/docs/Operators.md # SpaceToDepth <EoL>
<BoL> Splits an array along a particular axis into multiple sub-arrays . <EoL>
<BoL> Returns element-wise square-root value of the input . <EoL>
<BoL> Returns element-wise squared value of the input . <EoL>
<BoL> Remove single-dimensional entries from the shape of an array . <EoL>
<BoL> Join a sequence of arrays along a new axis . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Computes the sum of array elements over given axes . <EoL>
<BoL> Computes the sum of array elements over given axes . <EoL>
<BoL> Interchanges two axes of an array . <EoL>
<BoL> Takes elements from an input array along the given axis . <EoL>
<BoL> Computes the element-wise tangent of the input array . <EoL>
<BoL> Returns the hyperbolic tangent of the input array , computed element-wise . <EoL>
<BoL> Repeats the whole array multiple times . <EoL>
<BoL> Returns the top *k* elements in an input array along the given axis . The returned elements will be sorted . <EoL>
<BoL> Permutes the dimensions of an array . <EoL>
<BoL> Return the element-wise truncated value of the input . <EoL>
<BoL> Draw random samples from a uniform distribution . <EoL>
<BoL> Converts an array of flat indices into a batch of index arrays . The operator follows numpy conventions so a single multi index is given by a column of the output matrix . <EoL>
<BoL> Return the elements , either from x or y , depending on the condition . <EoL>
<BoL> Return an array of zeros with the same shape , type and storage type as the input array . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Maps integer indices to vector representations ( embeddings ) . <EoL>
<BoL> Applies a linear transformation : : math : ` Y = XW^T + b ` . <EoL>
<BoL> Computes and optimizes for squared loss during backward propagation . Just outputs `` data `` during forward propagation . <EoL>
<BoL> Applies a logistic function to the input . <EoL>
<BoL> Computes mean absolute error of the input . <EoL>
<BoL> Returns element-wise absolute value of the input . <EoL>
<BoL> Update function for AdaGrad optimizer . <EoL>
<BoL> Update function for Adam optimizer . Adam is seen as a generalization of AdaGrad . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Returns element-wise inverse cosine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic cosine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse sine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic sine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse tangent of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic tangent of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise division of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise product of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Casts tensor storage type to the new type . <EoL>
<BoL> Returns element-wise cube-root value of the input . <EoL>
<BoL> Returns element-wise ceiling of the input . <EoL>
<BoL> Clips ( limits ) the values in an array . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Computes the element-wise cosine of the input array . <EoL>
<BoL> Returns the hyperbolic cosine of the input array , computed element-wise . <EoL>
<BoL> Converts each element of the input array from radians to degrees . <EoL>
<BoL> Dot product of two arrays . <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Returns element-wise exponential value of the input . <EoL>
<BoL> Returns `` exp ( x ) - 1 `` computed element-wise on the input . <EoL>
<BoL> Returns element-wise rounded value to the nearest \ integer towards zero of the input . <EoL>
<BoL> Returns element-wise floor of the input . <EoL>
<BoL> Update function for Ftrl optimizer . Referenced from *Ad Click Prediction : a View from the Trenches* , available at http : //dl.acm.org/citation.cfm ? id=2488200 . <EoL>
<BoL> Returns the gamma function ( extension of the factorial function \ to the reals ) , computed element-wise on the input array . <EoL>
<BoL> Returns element-wise log of the absolute value of the gamma function \ of the input . <EoL>
<BoL> Returns element-wise Natural logarithmic value of the input . <EoL>
<BoL> Returns element-wise Base-10 logarithmic value of the input . <EoL>
<BoL> Returns element-wise `` log ( 1 + x ) `` value of the input . <EoL>
<BoL> Returns element-wise Base-2 logarithmic value of the input . <EoL>
<BoL> Make your own loss function in network construction . <EoL>
<BoL> Computes the mean of array elements over given axes . <EoL>
<BoL> Numerical negative of the argument , element-wise . <EoL>
<BoL> Computes the norm on an NDArray . <EoL>
<BoL> Converts each element of the input array from degrees to radians . <EoL>
<BoL> Computes rectified linear . <EoL>
<BoL> pick rows specified by user input index array from a row sparse matrix and save them in the output sparse matrix . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Returns element-wise inverse square-root value of the input . <EoL>
<BoL> Momentum update function for Stochastic Gradient Descent ( SGD ) optimizer . <EoL>
<BoL> Update function for Stochastic Gradient Descent ( SDG ) optimizer . <EoL>
<BoL> Computes sigmoid of x element-wise . <EoL>
<BoL> Returns element-wise sign of the input . <EoL>
<BoL> Computes the element-wise sine of the input array . <EoL>
<BoL> Returns the hyperbolic sine of the input array , computed element-wise . <EoL>
<BoL> Slices a region of the array . <EoL>
<BoL> Returns element-wise square-root value of the input . <EoL>
<BoL> Returns element-wise squared value of the input . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Computes the sum of array elements over given axes . <EoL>
<BoL> Computes the element-wise tangent of the input array . <EoL>
<BoL> Returns the hyperbolic tangent of the input array , computed element-wise . <EoL>
<BoL> Return the element-wise truncated value of the input . <EoL>
<BoL> Return the elements , either from x or y , depending on the condition . <EoL>
<BoL> Return an array of zeros with the same shape , type and storage type as the input array . <EoL>
<BoL> Returns the result of element-wise **greater than** ( > ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **greater than or equal to** ( > = ) comparison operation with broadcasting . <EoL>
<BoL> Compute the histogram of the input data . <EoL>
<BoL> DEPRECATED , use mx.img instead <EoL>
<BoL> Returns the result of element-wise **lesser than** ( < ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **lesser than or equal to** ( < = ) comparison operation with broadcasting . <EoL>
<BoL> Loads an array dictionary or list from a buffer <EoL>
<BoL> Returns the result of element-wise **logical and** comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **logical or** comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **logical xor** comparison operation with broadcasting . <EoL>
<BoL> Returns element-wise maximum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise minimum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise modulo of the input arrays with broadcasting . <EoL>
<BoL> Moves the ` source ` axis into the ` destination ` position while leaving the other axes in their original order <EoL>
<BoL> Returns element-wise product of the input arrays with broadcasting . <EoL>
<BoL> Given two shapes that are not identical , find the shape that both input shapes can broadcast to . <EoL>
<BoL> Given start , stop , and stop , calculate the number of elements of this slice . <EoL>
<BoL> Given start , stop , step and array length , return absolute values of start , stop , and step for generating index range . <EoL>
<BoL> Returns a dispatch code for calling basic or advanced indexing functions . <EoL>
<BoL> Given data and index shapes , get the output ` NDArray ` shape . This basically implements the infer shape logic of op gather_nd . <EoL>
<BoL> Return a new handle with specified shape and context . <EoL>
<BoL> Helper function for element-wise operation . The function will perform numpy-like broadcasting if needed and call different functions . <EoL>
<BoL> Creates an array from any object exposing the array interface . <EoL>
<BoL> Returns a new array of given shape and type , without initializing entries . <EoL>
<BoL> Returns the result of element-wise **not equal to** ( ! = ) comparison operation with broadcasting . <EoL>
<BoL> One-hot encoding indices into matrix out . <EoL>
<BoL> Returns a new array filled with all ones , with the given shape and type . <EoL>
<BoL> Returns result of first array elements raised to powers from second array , element-wise with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Wait for all async operations to finish in MXNet . <EoL>
<BoL> Returns a new array filled with all zeros , with the given shape and type . <EoL>
<BoL> Helper function for random generators . <EoL>
<BoL> Draw samples from an exponential distribution . <EoL>
<BoL> Draw random samples from a gamma distribution . <EoL>
<BoL> Concurrent sampling from multiple multinomial distributions . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Draw random samples from a Poisson distribution . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Generate function for ndarray op by handle and function name . <EoL>
<BoL> Create a NDArray function from the FunctionHandle . <EoL>
<BoL> Saves a list of arrays or a dict of str- > array to file . <EoL>
<BoL> Copies the value of this array to another array . <EoL>
<BoL> x.__getitem__ ( i ) < = > x [ i ] <EoL>
<BoL> x.__setitem__ ( i , y ) < = > x [ i ] =y <EoL>
<BoL> Copies the value of this array to another array . <EoL>
<BoL> Convenience fluent method for : py : func : ` retain ` . <EoL>
<BoL> Return a copy of the array with chosen storage type . <EoL>
<BoL> check s1 == s2 if both are not None <EoL>
<BoL> Return a new handle with specified storage type , shape , dtype and context . <EoL>
<BoL> Prepare the value of dtype if ` dtype ` is None . <EoL>
<BoL> Prepare ` source_array ` so that it can be used to construct NDArray . ` source_array ` is converted to a ` np.ndarray ` if it 's neither an ` NDArray ` \ nor an ` np.ndarray ` . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Creates a ` CSRNDArray ` , an 2D array with compressed sparse row ( CSR ) format . <EoL>
<BoL> Returns element-wise division of the input arrays with broadcasting . <EoL>
<BoL> Returns a new array of given shape and type , without initializing entries . <EoL>
<BoL> Returns element-wise product of the input arrays with broadcasting . <EoL>
<BoL> Creates a ` RowSparseNDArray ` , a multidimensional row sparse array with a set of \ tensor slices at given indices . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Return a new array of given shape and type , filled with zeros . <EoL>
<BoL> Helper function for assigning into dst depending on requirements . <EoL>
<BoL> Backward interface . Can override when creating new operators . <EoL>
<BoL> Forward interface . Can override when creating new operators . <EoL>
<BoL> Create an operator that carries out the real computation given the context , input shapes , and input data types . <EoL>
<BoL> Declare dependencies of this operator for backward pass . <EoL>
<BoL> infer_shape interface . Can override when creating new operators . <EoL>
<BoL> infer_storage_type interface . Used to infer storage type of inputs and outputs in the forward pass . When this interface is not implemented , all stypes will be inferred as default . <EoL>
<BoL> infer_storage_type_backward interface . Used to infer storage type of inputs and outputs in the backward pass . <EoL>
<BoL> infer_type interface . override to create new operators <EoL>
<BoL> list_arguments interface . Can override when creating new operators . <EoL>
<BoL> list_auxiliary_states interface . Can override when creating new operators . <EoL>
<BoL> list_outputs interface . Can override when creating new operators . <EoL>
<BoL> Backward interface . Can override when creating new operators . <EoL>
<BoL> Declare dependencies of this operator for backward pass . <EoL>
<BoL> Forward interface . Override to create new operators . <EoL>
<BoL> Interface for `` infer_shape `` . Can override when creating new operators . <EoL>
<BoL> Interface for `` list_arguments `` . Can override when creating new operators . <EoL>
<BoL> Interface for `` list_outputs `` . Can override when creating new operators . <EoL>
<BoL> Whether this operator needs out_grad for backward . <EoL>
<BoL> C Callback for NumpyOpProp : :ListOutputsC Callback for NumpyOpProp : :ListArguments <EoL>
<BoL> Create a symbol from numpy operator . This should only be called once per instance if the operator contains internal states . <EoL>
<BoL> Get index for new entry . <EoL>
<BoL> Gets the learning rate given the index of the weight . <EoL>
<BoL> Gets weight decay for index . Returns 0 for non-weights if the name of weights are provided for ` __init__ ` . <EoL>
<BoL> Updates num_update . <EoL>
<BoL> Instantiates an optimizer with a given name and kwargs . <EoL>
<BoL> Creates auxiliary state for a given weight , including FP32 high precision copy if original weight is FP16 . <EoL>
<BoL> Registers a new optimizer . <EoL>
<BoL> Sets a new learning rate of the optimizer . <EoL>
<BoL> Sets an individual learning rate multiplier for each parameter . <EoL>
<BoL> [ DEPRECATED ] Sets lr scale . Use set_lr_mult instead . <EoL>
<BoL> Sets an individual weight decay multiplier for each parameter . <EoL>
<BoL> Updates the given parameter using the corresponding gradient and state . Mixed precision version . <EoL>
<BoL> Returns a scaling factor for the learning rate for this layer default is 1 <EoL>
<BoL> Returns lr scaling factor for large batch according to warmup schedule ( to be implemented ) <EoL>
<BoL> Creates auxiliary state for a given weight . <EoL>
<BoL> Updates the given parameter using the corresponding gradient and state . <EoL>
<BoL> Creates a state to duplicate weight . <EoL>
<BoL> Performs w += rescale_grad * grad . <EoL>
<BoL> Updates weight given gradient and index . <EoL>
<BoL> Gets updater states . <EoL>
<BoL> Sets updater states . <EoL>
<BoL> sync state context . <EoL>
<BoL> Decrement counter value . <EoL>
<BoL> Increment counter value . <EoL>
<BoL> Set counter value . <EoL>
<BoL> Create new Counter object owned by this domain <EoL>
<BoL> Create new Frame object owned by this domain <EoL>
<BoL> Create new Marker object owned by this domain <EoL>
<BoL> Create new Task object owned by this domain <EoL>
<BoL> Start timing scope for this object <EoL>
<BoL> Stop timing scope for this object <EoL>
<BoL> Start timing scope for this object <EoL>
<BoL> Stop timing scope for this object <EoL>
<BoL> Set up the profiler state to record operator . <EoL>
<BoL> Start timing scope for this object <EoL>
<BoL> Stop timing scope for this object <EoL>
<BoL> Dump profile and stop profiler . Use this to save profile in advance in case your program can not exit normally . <EoL>
<BoL> Dump profile and stop profiler . Use this to save profile in advance in case your program can not exit normally . <EoL>
<BoL> Return a printable string of aggregate profile stats . <EoL>
<BoL> Pause profiling . <EoL>
<BoL> Set up the configure of profiler ( Deprecated ) . <EoL>
<BoL> Set up the profiler state to 'run ' or 'stop ' ( Deprecated ) . <EoL>
<BoL> Resume paused profiling . <EoL>
<BoL> Set up the configure of profiler ( only accepts keyword arguments ) . <EoL>
<BoL> Set up the profiler state to 'run ' or 'stop ' . <EoL>
<BoL> Seeds the random number generators in MXNet . <EoL>
<BoL> Closes the record file . <EoL>
<BoL> Returns the record at given index . <EoL>
<BoL> Sets the current read pointer position . <EoL>
<BoL> Returns the current position of write head . <EoL>
<BoL> Inserts input record at given index . <EoL>
<BoL> Pack a string into MXImageRecord . <EoL>
<BoL> Pack an image into `` MXImageRecord `` . <EoL>
<BoL> Unpack a MXImageRecord to string . <EoL>
<BoL> Unpack a MXImageRecord to image . <EoL>
<BoL> Get registrator function that allow aliases.alias registratoegistrator function <EoL>
<BoL> Get creator functionCreate instance from config <EoL>
<BoL> Get registrator function.Register functions <EoL>
<BoL> Get a copy of the registry . <EoL>
<BoL> Get activation function . Convert if is string <EoL>
<BoL> Initial state for this cell . <EoL>
<BoL> Pack separate weight matrices into a single packed weight . <EoL>
<BoL> Reset before re-using the cell for another graph . <EoL>
<BoL> Unpack fused weight matrices into separate weight matrices . <EoL>
<BoL> Unroll an RNN cell across time steps . <EoL>
<BoL> Unroll the RNN for one time step . <EoL>
<BoL> Returns the next batch of data . <EoL>
<BoL> Resets the iterator to the beginning of the data . <EoL>
<BoL> slice fused rnn weights <EoL>
<BoL> Unfuse the fused RNN in to a stack of rnn cells . <EoL>
<BoL> Get the variable given a name if one exists or create a new one if missing . <EoL>
<BoL> Make a callback to checkpoint Module to prefix every epoch . unpacks weights used by cells before saving.The checkpoint function . <EoL>
<BoL> Load model checkpoint from file . Pack weights after loading . <EoL>
<BoL> Deprecated . Please use cell.unroll instead <EoL>
<BoL> Save checkpoint for model using RNN cells . Unpacks weight before saving . <EoL>
<BoL> Launch cuda kernel . <EoL>
<BoL> Get CUDA kernel from compiled module . <EoL>
<BoL> Creates a symbol that contains a collection of other symbols , grouped together . <EoL>
<BoL> Returns evenly spaced values within a given interval . <EoL>
<BoL> Run an if-then-else using user-defined condition and computation <EoL>
<BoL> Run a for loop with user-defined computation over Symbols on dimension 0 . <EoL>
<BoL> Draw random samples from an approximately log-uniform or Zipfian distribution . <EoL>
<BoL> Draw random samples from a uniform distribution . <EoL>
<BoL> Returns a new symbol of 2-D shpae , filled with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Returns a new array of given shape and type , filled with the given value ` val ` . <EoL>
<BoL> Special op to copy data cross device <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Divide an array with a scalar . <EoL>
<BoL> Given the `` legs '' of a right triangle , return its hypotenuse . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Multiply an array with a scalar . <EoL>
<BoL> Stub for implementing an operator implemented in native frontend language with ndarray . <EoL>
<BoL> Stub for implementing an operator implemented in native frontend language . <EoL>
<BoL> Place holder for variable who can not perform gradient <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Return evenly spaced values within a given interval . Similar to Numpy <EoL>
<BoL> Accumulates data according to indices and get the result . It 's the backward of ` gather_nd ` . <EoL>
<BoL> Run a if-then-else using user-defined condition and computation <EoL>
<BoL> Returns a copy of the input . <EoL>
<BoL> Assign the rhs to a cropped subset of lhs . <EoL>
<BoL> ( Assign the scalar to a cropped subset of the input . <EoL>
<BoL> Pad image border with OpenCV . <EoL>
<BoL> Decode image with OpenCV . Note : return image in RGB by default , instead of OpenCV 's default BGR . <EoL>
<BoL> Read and decode image with OpenCV . Note : return image in RGB by default , instead of OpenCV 's default BGR . <EoL>
<BoL> Resize image with OpenCV . <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Divide an array with a scalar . <EoL>
<BoL> Return a 2-D array with ones on the diagonal and zeros elsewhere . <EoL>
<BoL> Run a for loop over an NDArray with user-defined computation <EoL>
<BoL> fill target with a scalar value <EoL>
<BoL> This operators implements the histogram function . <EoL>
<BoL> Given the `` legs '' of a right triangle , return its hypotenuse . <EoL>
<BoL> Decode an image , clip to ( x0 , y0 , x1 , y1 ) , subtract mean , and write to buffer <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Multiply an array with a scalar . <EoL>
<BoL> fill target with ones <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Converts a batch of index arrays into an array of flat indices . The operator follows numpy conventions so a single multi index is given by a column of the input matrix . <EoL>
<BoL> This function support variable length of positional input . <EoL>
<BoL> Concurrent sampling from multiple exponential distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple gamma distributions with parameters *alpha* ( shape ) and *beta* ( scale ) . <EoL>
<BoL> Concurrent sampling from multiple generalized negative binomial distributions with parameters *mu* ( mean ) and *alpha* ( dispersion ) . <EoL>
<BoL> Concurrent sampling from multiple multinomial distributions . <EoL>
<BoL> Concurrent sampling from multiple negative binomial distributions with parameters *k* ( failure limit ) and *p* ( failure probability ) . <EoL>
<BoL> Concurrent sampling from multiple normal distributions with parameters *mu* ( mean ) and *sigma* ( standard deviation ) . <EoL>
<BoL> Concurrent sampling from multiple Poisson distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple uniform distributions on the intervals given by * [ low , high ) * . <EoL>
<BoL> Draw random samples from an an approximately log-uniform or Zipfian distribution without replacement . <EoL>
<BoL> Divides arguments element-wise . If the left-hand-side input is 'row_sparse ' , then only the values which exist in the left-hand sparse array are computed . The 'missing ' values are ignored . <EoL>
<BoL> Subtracts a scalar to a tensor element-wise . <EoL>
<BoL> Adds a scalar to a tensor element-wise . <EoL>
<BoL> This operator has the same functionality as scatter_nd except that it does not reset the elements not indexed by the input index ` NDArray ` in the input data ` NDArray ` . output should be explicitly given and be the same as lhs . <EoL>
<BoL> Randomly shuffle the elements . <EoL>
<BoL> Assign the rhs to a cropped subset of lhs . <EoL>
<BoL> ( Assign the scalar to a cropped subset of the input . <EoL>
<BoL> Computes the square sum of array elements over a given axis for row-sparse matrix . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Converts an array of flat indices into a batch of index arrays . The operator follows numpy conventions so a single multi index is given by a column of the output matrix . <EoL>
<BoL> Run a while loop over with user-defined condition and computation <EoL>
<BoL> fill target with zeros <EoL>
<BoL> Applies a 2D adaptive average pooling over a 4D input with the shape of ( NCHW ) . The pooling kernel and stride sizes are automatically chosen for desired output sizes . <EoL>
<BoL> Perform 2D resizing ( upsampling or downsampling ) for 4D input using bilinear interpolation . <EoL>
<BoL> Connectionist Temporal Classification Loss . <EoL>
<BoL> Compute 2-D deformable convolution on 4-D input . <EoL>
<BoL> Performs deformable position-sensitive region-of-interest pooling on inputs . The DeformablePSROIPooling operation is described in https : //arxiv.org/abs/1703.06211 .batch_size will change to the number of region bounding boxes after DeformablePSROIPooling <EoL>
<BoL> Convert multibox detection predictions . <EoL>
<BoL> Generate prior ( anchor ) boxes from data , sizes and ratios . <EoL>
<BoL> Compute Multibox training targets <EoL>
<BoL> Generate region proposals via RPN <EoL>
<BoL> Performs region-of-interest pooling on inputs . <EoL>
<BoL> Generate region proposals via RPN <EoL>
<BoL> This operator takes a 4D feature map as an input array and region proposals as ` rois ` , then align the feature map over sub-regions of input and produces a fixed-sized output array . This operator is typically used in Faster R-CNN & Mask R-CNN networks . <EoL>
<BoL> Maps integer indices to vector representations ( embeddings ) . <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Compute bipartite matching . The matching is performed on score matrix with shape [ B , N , M ] - B : batch_size - N : number of rows to match - M : number of columns as reference to be matched against . <EoL>
<BoL> Bounding box overlap of two arrays . The overlap is defined as Intersection-over-Union , aka , IOU . - lhs : ( a_1 , a_2 , ... , a_n , 4 ) array - rhs : ( b_1 , b_2 , ... , b_n , 4 ) array - output : ( a_1 , a_2 , ... , a_n , b_1 , b_2 , ... , b_n ) array <EoL>
<BoL> Apply non-maximum suppression to input . <EoL>
<BoL> Apply non-maximum suppression to input . <EoL>
<BoL> Apply CountSketch to input : map a d-dimension data to k-dimension data '' <EoL>
<BoL> Connectionist Temporal Classification Loss . <EoL>
<BoL> Dequantize the input tensor into a float tensor . min_range and max_range are scalar floats that specify the range for the output data . <EoL>
<BoL> Rescale the input by the square root of the channel dimension . <EoL>
<BoL> Apply 1D FFT to input '' <EoL>
<BoL> Apply 1D ifft to input '' <EoL>
<BoL> This operators implements the quadratic function : .. math : : f ( x ) = ax^2+bx+c where : math : ` x ` is an input tensor and all operations in the function are element-wise . <EoL>
<BoL> Quantize a input tensor from float to ` out_type ` , with user-specified ` min_range ` and ` max_range ` . <EoL>
<BoL> Convolution operator for input , weight and bias data type of int8 , and accumulates in type int32 for the output . <EoL>
<BoL> Fully Connected operator for input , weight and bias data type of int8 , and accumulates in type int32 for the output . <EoL>
<BoL> Pooling operator for input and output data type of int8 . The input and output data comes with min and max thresholds for quantizing the float32 data into int8 . <EoL>
<BoL> Given data that is quantized in int32 and the corresponding thresholds , requantize the data into int8 using min and max thresholds either calculated at runtime or from calibration . It 's highly recommended to pre-calucate the min and max thresholds through calibration since it is able to save the runtime of the operator and improve the inference accuracy . <EoL>
<BoL> Adjust the lighting level of the input . Follow the AlexNet style . <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L68 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L76 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L52 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L84 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L111 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L90 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L72 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L80 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L104 <EoL>
<BoL> Randomly add PCA noise . Follow the AlexNet style . <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L97 <EoL>
<BoL> Defined in src/operator/image/image_random.cc : L42 <EoL>
<BoL> LQ factorization for general matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs general matrix multiplication and accumulation . Input are tensors *A* , *B* , *C* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs general matrix multiplication . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs Cholesky factorization of a symmetric positive-definite matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs matrix inversion from a Cholesky factorization . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Computes the sum of the logarithms of the diagonal elements of a square matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Eigendecomposition for symmetric matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Multiplication of matrix with its transpose . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs multiplication with a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Solves matrix equation involving a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Applies an activation function element-wise to the input . <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Batch normalization . <EoL>
<BoL> Applies bilinear sampling to input feature map . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Casts all elements of the input to a new type . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Compute *N*-D convolution on * ( N+2 ) *-D input . <EoL>
<BoL> This operator is DEPRECATED . Apply convolution to input then add a bias . <EoL>
<BoL> Applies correlation to inputs . <EoL>
<BoL> .. note : : ` Crop ` is deprecated . Use ` slice ` instead . <EoL>
<BoL> Apply a custom operator implemented in a frontend language ( like Python ) . <EoL>
<BoL> Computes 1D or 2D transposed convolution ( aka fractionally strided convolution ) of the input tensor . <EoL>
<BoL> Applies dropout operation to input array . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Maps integer indices to vector representations ( embeddings ) . <EoL>
<BoL> Flattens the input array into a 2-D array by collapsing the higher dimensions . <EoL>
<BoL> Applies a linear transformation : : math : ` Y = XW^T + b ` . <EoL>
<BoL> Generates 2D sampling grid for bilinear sampling . <EoL>
<BoL> Apply a sparse regularization to the output a sigmoid activation function . <EoL>
<BoL> Applies instance normalization to the n-dimensional input array . <EoL>
<BoL> Normalize the input array using the L2 norm . <EoL>
<BoL> Applies local response normalization to the input . <EoL>
<BoL> Layer normalization . <EoL>
<BoL> Applies Leaky rectified linear unit activation element-wise to the input . <EoL>
<BoL> Computes and optimizes for squared loss during backward propagation . Just outputs `` data `` during forward propagation . <EoL>
<BoL> Applies a logistic function to the input . <EoL>
<BoL> Computes mean absolute error of the input . <EoL>
<BoL> Make your own loss function in network construction . <EoL>
<BoL> Pads an input array with a constant or edge values of the array . <EoL>
<BoL> Performs pooling on the input . <EoL>
<BoL> This operator is DEPRECATED . Perform pooling on the input . <EoL>
<BoL> Applies recurrent layers to input data . Currently , vanilla RNN , LSTM and GRU are implemented , with both multi-layer and bidirectional support . <EoL>
<BoL> Performs region of interest ( ROI ) pooling on the input array . <EoL>
<BoL> Reshapes the input array . <EoL>
<BoL> Computes support vector machine based transformation of the input . <EoL>
<BoL> Takes the last element of a sequence . <EoL>
<BoL> Sets all elements outside the sequence to a constant value . <EoL>
<BoL> Reverses the elements of each sequence . <EoL>
<BoL> Splits an array along a particular axis into multiple sub-arrays . <EoL>
<BoL> Please use ` SoftmaxOutput ` . <EoL>
<BoL> Applies softmax activation to input . This is intended for internal layers . <EoL>
<BoL> Computes the gradient of cross entropy loss with respect to softmax output . <EoL>
<BoL> Applies a spatial transformer to input feature map . <EoL>
<BoL> Interchanges two axes of an array . <EoL>
<BoL> Performs nearest neighbor/bilinear up sampling to inputs . This function support variable length of positional input . <EoL>
<BoL> Returns element-wise absolute value of the input . <EoL>
<BoL> Update function for Adam optimizer . Adam is seen as a generalization of AdaGrad . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Returns element-wise inverse cosine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic cosine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse sine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic sine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse tangent of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic tangent of the input array , \ computed element-wise . <EoL>
<BoL> Returns indices of the maximum values along an axis . <EoL>
<BoL> Returns argmax indices of each channel from the input array . <EoL>
<BoL> Returns indices of the minimum values along an axis . <EoL>
<BoL> Returns the indices that would sort an input array along the given axis . <EoL>
<BoL> Batchwise dot product . <EoL>
<BoL> Takes elements from a data batch . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Broadcasts the input array over particular axes . <EoL>
<BoL> Broadcasts the input array over particular axes . <EoL>
<BoL> Returns element-wise division of the input arrays with broadcasting . <EoL>
<BoL> Returns the result of element-wise **equal to** ( == ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **greater than** ( > ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **greater than or equal to** ( > = ) comparison operation with broadcasting . <EoL>
<BoL> Returns the hypotenuse of a right angled triangle , given its `` legs '' with broadcasting . <EoL>
<BoL> Returns the result of element-wise **lesser than** ( < ) comparison operation with broadcasting . <EoL>
<BoL> Returns the result of element-wise **lesser than or equal to** ( < = ) comparison operation with broadcasting . <EoL>
<BoL> Broadcasts lhs to have the same shape as rhs . <EoL>
<BoL> Returns the result of element-wise **logical and** with broadcasting . <EoL>
<BoL> Returns the result of element-wise **logical or** with broadcasting . <EoL>
<BoL> Returns the result of element-wise **logical xor** with broadcasting . <EoL>
<BoL> Returns element-wise maximum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise minimum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise modulo of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise product of the input arrays with broadcasting . <EoL>
<BoL> Returns the result of element-wise **not equal to** ( ! = ) comparison operation with broadcasting . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Returns result of first array elements raised to powers from second array , element-wise with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Broadcasts the input array to a new shape . <EoL>
<BoL> Casts all elements of the input to a new type . <EoL>
<BoL> Casts tensor storage type to the new type . <EoL>
<BoL> Returns element-wise cube-root value of the input . <EoL>
<BoL> Returns element-wise ceiling of the input . <EoL>
<BoL> Choose one element from each line ( row for python , column for R/Julia ) in lhs according to index indicated by rhs . This function assume rhs uses 0-based index . <EoL>
<BoL> Clips ( limits ) the values in an array . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Computes the element-wise cosine of the input array . <EoL>
<BoL> Returns the hyperbolic cosine of the input array , computed element-wise . <EoL>
<BoL> Slices a region of the array . <EoL>
<BoL> Converts each element of the input array from radians to degrees . <EoL>
<BoL> Rearranges ( permutes ) data from depth into blocks of spatial data . <EoL>
<BoL> Extracts a diagonal or constructs a diagonal array . <EoL>
<BoL> Dot product of two arrays . <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Returns element-wise exponential value of the input . <EoL>
<BoL> Inserts a new axis of size 1 into the array shape <EoL>
<BoL> Returns `` exp ( x ) - 1 `` computed element-wise on the input . <EoL>
<BoL> Fill one element of each line ( row for python , column for R/Julia ) in lhs according to index indicated by rhs and values indicated by mhs . This function assume rhs uses 0-based index . <EoL>
<BoL> Returns element-wise rounded value to the nearest \ integer towards zero of the input . <EoL>
<BoL> Flattens the input array into a 2-D array by collapsing the higher dimensions . <EoL>
<BoL> Reverses the order of elements along given axis while preserving array shape . <EoL>
<BoL> Returns element-wise floor of the input . <EoL>
<BoL> The FTML optimizer described in *FTML - Follow the Moving Leader in Deep Learning* , available at http : //proceedings.mlr.press/v70/zheng17a/zheng17a.pdf . <EoL>
<BoL> Update function for Ftrl optimizer . Referenced from *Ad Click Prediction : a View from the Trenches* , available at http : //dl.acm.org/citation.cfm ? id=2488200 . <EoL>
<BoL> Returns the gamma function ( extension of the factorial function \ to the reals ) , computed element-wise on the input array . <EoL>
<BoL> Returns element-wise log of the absolute value of the gamma function \ of the input . <EoL>
<BoL> Gather elements or slices from ` data ` and store to a tensor whose shape is defined by ` indices ` . <EoL>
<BoL> Computes hard sigmoid of x element-wise . <EoL>
<BoL> Returns a copy of the input . <EoL>
<BoL> Computes the Khatri-Rao product of the input matrices . <EoL>
<BoL> LQ factorization for general matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs general matrix multiplication and accumulation . Input are tensors *A* , *B* , *C* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs general matrix multiplication . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Performs Cholesky factorization of a symmetric positive-definite matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs matrix inversion from a Cholesky factorization . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Computes the sum of the logarithms of the diagonal elements of a square matrix . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Multiplication of matrix with its transpose . Input is a tensor *A* of dimension *n > = 2* . <EoL>
<BoL> Performs multiplication with a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Solves matrix equation involving a lower triangular matrix . Input are tensors *A* , *B* , each of dimension *n > = 2* and having the same shape on the leading *n-2* dimensions . <EoL>
<BoL> Returns element-wise Natural logarithmic value of the input . <EoL>
<BoL> Returns element-wise Base-10 logarithmic value of the input . <EoL>
<BoL> Returns element-wise `` log ( 1 + x ) `` value of the input . <EoL>
<BoL> Returns element-wise Base-2 logarithmic value of the input . <EoL>
<BoL> Computes the log softmax of the input . This is equivalent to computing softmax followed by log . <EoL>
<BoL> Returns the result of logical NOT ( ! ) function <EoL>
<BoL> Make your own loss function in network construction . <EoL>
<BoL> Computes the max of array elements over given axes . <EoL>
<BoL> Computes the max of array elements over given axes . <EoL>
<BoL> Computes the mean of array elements over given axes . <EoL>
<BoL> Computes the min of array elements over given axes . <EoL>
<BoL> Computes the min of array elements over given axes . <EoL>
<BoL> Updater function for multi-precision sgd optimizer <EoL>
<BoL> Updater function for multi-precision sgd optimizer <EoL>
<BoL> Computes the product of array elements over given axes treating Not a Numbers ( `` NaN `` ) as one . <EoL>
<BoL> Computes the sum of array elements over given axes treating Not a Numbers ( `` NaN `` ) as zero . <EoL>
<BoL> Numerical negative of the argument , element-wise . <EoL>
<BoL> Computes the norm on an NDArray . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Returns a one-hot array . <EoL>
<BoL> Return an array of ones with the same shape and type as the input array . <EoL>
<BoL> Pads an input array with a constant or edge values of the array . <EoL>
<BoL> Picks elements from an input array according to the input indices along the given axis . <EoL>
<BoL> Computes the product of array elements over given axes . <EoL>
<BoL> Converts each element of the input array from degrees to radians . <EoL>
<BoL> Draw random samples from an exponential distribution . <EoL>
<BoL> Draw random samples from a gamma distribution . <EoL>
<BoL> Draw random samples from a generalized negative binomial distribution . <EoL>
<BoL> Draw random samples from a negative binomial distribution . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Draw random samples from a Poisson distribution . <EoL>
<BoL> Draw random samples from a uniform distribution . <EoL>
<BoL> Converts a batch of index arrays into an array of flat indices . The operator follows numpy conventions so a single multi index is given by a column of the input matrix . <EoL>
<BoL> Returns element-wise inverse cube-root value of the input . <EoL>
<BoL> Returns the reciprocal of the argument , element-wise . <EoL>
<BoL> Computes rectified linear . <EoL>
<BoL> Repeats elements of an array . <EoL>
<BoL> Reshapes the input array . <EoL>
<BoL> Reshape some or all dimensions of ` lhs ` to have the same shape as some or all dimensions of ` rhs ` . <EoL>
<BoL> Reverses the order of elements along given axis while preserving array shape . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Update function for ` RMSProp ` optimizer . <EoL>
<BoL> Update function for RMSPropAlex optimizer . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Returns element-wise inverse square-root value of the input . <EoL>
<BoL> Concurrent sampling from multiple exponential distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple gamma distributions with parameters *alpha* ( shape ) and *beta* ( scale ) . <EoL>
<BoL> Concurrent sampling from multiple generalized negative binomial distributions with parameters *mu* ( mean ) and *alpha* ( dispersion ) . <EoL>
<BoL> Concurrent sampling from multiple multinomial distributions . <EoL>
<BoL> Concurrent sampling from multiple negative binomial distributions with parameters *k* ( failure limit ) and *p* ( failure probability ) . <EoL>
<BoL> Concurrent sampling from multiple normal distributions with parameters *mu* ( mean ) and *sigma* ( standard deviation ) . <EoL>
<BoL> Concurrent sampling from multiple Poisson distributions with parameters lambda ( rate ) . <EoL>
<BoL> Concurrent sampling from multiple uniform distributions on the intervals given by * [ low , high ) * . <EoL>
<BoL> Scatters data into a new tensor according to indices . <EoL>
<BoL> Momentum update function for Stochastic Gradient Descent ( SGD ) optimizer . <EoL>
<BoL> Update function for Stochastic Gradient Descent ( SDG ) optimizer . <EoL>
<BoL> Returns a 1D int64 array containing the shape of data . <EoL>
<BoL> Randomly shuffle the elements . <EoL>
<BoL> Computes sigmoid of x element-wise . <EoL>
<BoL> Returns element-wise sign of the input . <EoL>
<BoL> Update function for SignSGD optimizer . <EoL>
<BoL> SIGN momentUM ( Signum ) optimizer . <EoL>
<BoL> Computes the element-wise sine of the input array . <EoL>
<BoL> Returns the hyperbolic sine of the input array , computed element-wise . <EoL>
<BoL> Returns a 1D int64 array containing the size of data . <EoL>
<BoL> Slices a region of the array . <EoL>
<BoL> Slices along a given axis . <EoL>
<BoL> Slices a region of the array like the shape of another array . <EoL>
<BoL> Calculate Smooth L1 Loss ( lhs , scalar ) by summing <EoL>
<BoL> Applies the softmax function . <EoL>
<BoL> Calculate cross entropy of softmax output and one-hot label . <EoL>
<BoL> Computes softsign of x element-wise . <EoL>
<BoL> Returns a sorted copy of an input array along the given axis . <EoL>
<BoL> Rearranges ( permutes ) blocks of spatial data into depth . Similar to ONNX SpaceToDepth operator : https : //github.com/onnx/onnx/blob/master/docs/Operators.md # SpaceToDepth <EoL>
<BoL> Splits an array along a particular axis into multiple sub-arrays . <EoL>
<BoL> Returns element-wise square-root value of the input . <EoL>
<BoL> Returns element-wise squared value of the input . <EoL>
<BoL> Remove single-dimensional entries from the shape of an array . <EoL>
<BoL> Join a sequence of arrays along a new axis . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Computes the sum of array elements over given axes . <EoL>
<BoL> Computes the sum of array elements over given axes . <EoL>
<BoL> Interchanges two axes of an array . <EoL>
<BoL> Takes elements from an input array along the given axis . <EoL>
<BoL> Computes the element-wise tangent of the input array . <EoL>
<BoL> Returns the hyperbolic tangent of the input array , computed element-wise . <EoL>
<BoL> Repeats the whole array multiple times . <EoL>
<BoL> Returns the top *k* elements in an input array along the given axis . The returned elements will be sorted . <EoL>
<BoL> Permutes the dimensions of an array . <EoL>
<BoL> Return the element-wise truncated value of the input . <EoL>
<BoL> Draw random samples from a uniform distribution . <EoL>
<BoL> Converts an array of flat indices into a batch of index arrays . The operator follows numpy conventions so a single multi index is given by a column of the output matrix . <EoL>
<BoL> Return the elements , either from x or y , depending on the condition . <EoL>
<BoL> Return an array of zeros with the same shape , type and storage type as the input array . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Maps integer indices to vector representations ( embeddings ) . <EoL>
<BoL> Applies a linear transformation : : math : ` Y = XW^T + b ` . <EoL>
<BoL> Computes and optimizes for squared loss during backward propagation . Just outputs `` data `` during forward propagation . <EoL>
<BoL> Applies a logistic function to the input . <EoL>
<BoL> Computes mean absolute error of the input . <EoL>
<BoL> Returns element-wise absolute value of the input . <EoL>
<BoL> Update function for AdaGrad optimizer . <EoL>
<BoL> Update function for Adam optimizer . Adam is seen as a generalization of AdaGrad . <EoL>
<BoL> Adds all input arguments element-wise . <EoL>
<BoL> Returns element-wise inverse cosine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic cosine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse sine of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic sine of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise inverse tangent of the input array . <EoL>
<BoL> Returns the element-wise inverse hyperbolic tangent of the input array , \ computed element-wise . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise division of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise product of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise sum of the input arrays with broadcasting . <EoL>
<BoL> Returns element-wise difference of the input arrays with broadcasting . <EoL>
<BoL> Casts tensor storage type to the new type . <EoL>
<BoL> Returns element-wise cube-root value of the input . <EoL>
<BoL> Returns element-wise ceiling of the input . <EoL>
<BoL> Clips ( limits ) the values in an array . <EoL>
<BoL> Joins input arrays along a given axis . <EoL>
<BoL> Computes the element-wise cosine of the input array . <EoL>
<BoL> Returns the hyperbolic cosine of the input array , computed element-wise . <EoL>
<BoL> Converts each element of the input array from radians to degrees . <EoL>
<BoL> Dot product of two arrays . <EoL>
<BoL> Adds arguments element-wise . <EoL>
<BoL> Divides arguments element-wise . <EoL>
<BoL> Multiplies arguments element-wise . <EoL>
<BoL> Subtracts arguments element-wise . <EoL>
<BoL> Returns element-wise exponential value of the input . <EoL>
<BoL> Returns `` exp ( x ) - 1 `` computed element-wise on the input . <EoL>
<BoL> Returns element-wise rounded value to the nearest \ integer towards zero of the input . <EoL>
<BoL> Returns element-wise floor of the input . <EoL>
<BoL> Update function for Ftrl optimizer . Referenced from *Ad Click Prediction : a View from the Trenches* , available at http : //dl.acm.org/citation.cfm ? id=2488200 . <EoL>
<BoL> Returns the gamma function ( extension of the factorial function \ to the reals ) , computed element-wise on the input array . <EoL>
<BoL> Returns element-wise log of the absolute value of the gamma function \ of the input . <EoL>
<BoL> Returns element-wise Natural logarithmic value of the input . <EoL>
<BoL> Returns element-wise Base-10 logarithmic value of the input . <EoL>
<BoL> Returns element-wise `` log ( 1 + x ) `` value of the input . <EoL>
<BoL> Returns element-wise Base-2 logarithmic value of the input . <EoL>
<BoL> Make your own loss function in network construction . <EoL>
<BoL> Computes the mean of array elements over given axes . <EoL>
<BoL> Numerical negative of the argument , element-wise . <EoL>
<BoL> Computes the norm on an NDArray . <EoL>
<BoL> Converts each element of the input array from degrees to radians . <EoL>
<BoL> Computes rectified linear . <EoL>
<BoL> pick rows specified by user input index array from a row sparse matrix and save them in the output sparse matrix . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Returns element-wise rounded value to the nearest integer of the input . <EoL>
<BoL> Returns element-wise inverse square-root value of the input . <EoL>
<BoL> Momentum update function for Stochastic Gradient Descent ( SGD ) optimizer . <EoL>
<BoL> Update function for Stochastic Gradient Descent ( SDG ) optimizer . <EoL>
<BoL> Computes sigmoid of x element-wise . <EoL>
<BoL> Returns element-wise sign of the input . <EoL>
<BoL> Computes the element-wise sine of the input array . <EoL>
<BoL> Returns the hyperbolic sine of the input array , computed element-wise . <EoL>
<BoL> Slices a region of the array . <EoL>
<BoL> Returns element-wise square-root value of the input . <EoL>
<BoL> Returns element-wise squared value of the input . <EoL>
<BoL> Stops gradient computation . <EoL>
<BoL> Computes the sum of array elements over given axes . <EoL>
<BoL> Computes the element-wise tangent of the input array . <EoL>
<BoL> Returns the hyperbolic tangent of the input array , computed element-wise . <EoL>
<BoL> Return the element-wise truncated value of the input . <EoL>
<BoL> Return the elements , either from x or y , depending on the condition . <EoL>
<BoL> Return an array of zeros with the same shape , type and storage type as the input array . <EoL>
<BoL> Compute the histogram of the input data . <EoL>
<BoL> Given the `` legs '' of a right triangle , returns its hypotenuse . <EoL>
<BoL> Loads symbol from json string . <EoL>
<BoL> Returns element-wise maximum of the input elements . <EoL>
<BoL> Returns element-wise minimum of the input elements . <EoL>
<BoL> Returns a new symbol of given shape and type , filled with ones . <EoL>
<BoL> Returns element-wise result of base element raised to powers from exp element . <EoL>
<BoL> Helper function for random generators . <EoL>
<BoL> Draw samples from an exponential distribution . <EoL>
<BoL> Draw random samples from a gamma distribution . <EoL>
<BoL> Draw random samples from a generalized negative binomial distribution . <EoL>
<BoL> Concurrent sampling from multiple multinomial distributions . <EoL>
<BoL> Draw random samples from a negative binomial distribution . <EoL>
<BoL> Draw random samples from a normal ( Gaussian ) distribution . <EoL>
<BoL> Draw random samples from a Poisson distribution . <EoL>
<BoL> Shuffle the elements randomly . <EoL>
<BoL> Generate function for symbol op by handle and function name . <EoL>
<BoL> Create a symbol function by handle and function name . <EoL>
<BoL> Returns a new symbol of given shape and type , filled with zeros . <EoL>
<BoL> Get user friendly information of the output shapes . <EoL>
<BoL> Get a data batch from iterator . <EoL>
<BoL> Returns CSRNDArray with powerlaw distribution with exponentially increasing number of non zeros in each row . <EoL>
<BoL> Parses the given auxiliary states to a dictionary . <EoL>
<BoL> Parses the given location to a dictionary . <EoL>
<BoL> Test if two numpy arrays are almost equal . <EoL>
<BoL> Test that two NumPy arrays are almost equal ( ignoring NaN in either array ) . <EoL>
<BoL> Test that two numpy arrays are almost equal . Raise exception message if not . <EoL>
<BoL> Test that two NumPy arrays are almost equal ( ignoring NaN in either array ) . <EoL>
<BoL> Test that function f will throw an exception of type given by ` exception_type ` <EoL>
<BoL> Return ndarray composed of passing each array value through some function <EoL>
<BoL> Return ndarray composed of passing two array values through some function <EoL>
<BoL> Verify an operation by checking backward pass via finite difference method.Get a random weight matrix with not too small elements <EoL>
<BoL> Compares a symbol 's backward results with the expected ones . Prints error messages if the backward results are not the same as the expected results . <EoL>
<BoL> Compares a symbol 's forward results with the expected ones . Prints error messages if the forward results are not the same as the expected ones . <EoL>
<BoL> Run the chi-square test for the generator . <EoL>
<BoL> Get default context for regression test . <EoL>
<BoL> Get default data type for regression test . <EoL>
<BoL> Discards error output of a routine if invoked as : <EoL>
<BoL> Download an given URL <EoL>
<BoL> Finds and returns the location of maximum violation . <EoL>
<BoL> Generate the buckets and probabilities for chi_square test when the ppf ( Quantile function ) is specified . <EoL>
<BoL> Get default numerical threshold for regression test . <EoL>
<BoL> Download and extract bz2 data . <EoL>
<BoL> Downloads CIFAR10 dataset into a directory in the current directory with the name ` data ` , and then extracts all files into the directory ` data/cifar ` . <EoL>
<BoL> Get path to the im2rec.py tool <EoL>
<BoL> Download and load the MNIST dataset <EoL>
<BoL> Returns training and validation iterators for MNIST dataset <EoL>
<BoL> Downloads MNIST dataset as a pkl.gz into a directory in the current directory with the name ` data ` <EoL>
<BoL> Downloads ubyte version of the MNIST dataset into a directory in the current directory with the name ` data ` and extracts all files in the zip archive to this directory . <EoL>
<BoL> Get default numerical threshold for regression test . <EoL>
<BoL> Download and extract zip data . <EoL>
<BoL> Return a list of GPUs <EoL>
<BoL> Test the generator by matching the mean . <EoL>
<BoL> Compatible reduce for old version of NumPy . <EoL>
<BoL> Calculates a numeric gradient via finite difference method . <EoL>
<BoL> Generate some random numpy arrays . <EoL>
<BoL> Return a k length list of the elements chosen from the population sequence . <EoL>
<BoL> Retry n times before failing for stochastic test cases.Decorate a test case.Wrapper for tests function . <EoL>
<BoL> Test if two NumPy arrays are the same . <EoL>
<BoL> Check whether two NDArrays sharing the same memory block <EoL>
<BoL> Set default context . <EoL>
<BoL> Set environment variable <EoL>
<BoL> Shuffle CSR column indices per row This allows validation of unordered column indices , which is not a requirement for a valid CSR matrix <EoL>
<BoL> A simple forward function for a symbol . <EoL>
<BoL> Test the generator by matching the variance . It will need a large number of samples and is not recommended to use <EoL>
<BoL> Verify whether the generator is correct using chi-square testing . <EoL>
<BoL> List and add all the torch backed ndarray functions to current module . <EoL>
<BoL> Create a Torch function from the FunctionHandle.Invoke this function by passing in parameters . <EoL>
<BoL> Create directories recursively if they do n't exist . os.makedirs ( exist_ok=True ) is not available in Python2 <EoL>
<BoL> Convert shape string to list , internal use only . <EoL>
<BoL> Internal helper to figure out if node should be hidden with ` hide_weights ` . <EoL>
<BoL> Convert symbol for detail information.Print format row.print layer information <EoL>
<BoL> pygame._numpysndarray.array ( Sound ) : return array <EoL>
<BoL> pygame._numpysndarray.make_sound ( array ) : return Sound <EoL>
<BoL> pygame._numpysndarray.samples ( Sound ) : return array <EoL>
<BoL> pygame.numpyarray.array2d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array3d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_alpha ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_blue ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_colorkey ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_green ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.array_red ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.blit_array ( Surface , array ) : return None <EoL>
<BoL> pygame.surfarray.make_surface ( array ) : return Surface <EoL>
<BoL> pygame.numpyarray.map_array ( Surface , array3d ) : return array2d <EoL>
<BoL> pygame.numpyarray.pixels2d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.pixels3d ( Surface ) : return array <EoL>
<BoL> pygame.numpyarray.pixels_alpha ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_blue ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_green ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_red ( Surface ) : return array <EoL>
<BoL> ' < binary literal > ' = > b ' < binary literal > ' <EoL>
<BoL> r ' < Unicode literal > ' = > ' < Unicode literal > ' <EoL>
<BoL> pygame.cursors.compile ( strings , black , white , xor ) - > data , mask compile cursor strings into cursor data <EoL>
<BoL> pygame.cursors.load_xbm ( cursorfile , maskfile ) - > cursor_args reads a pair of XBM files into set_cursor arguments <EoL>
<BoL> pygame.font.SysFont ( name , size , bold=False , italic=False , constructor=None ) - > Font create a pygame Font from system font resources <EoL>
<BoL> pygame.font.get_fonts ( ) - > list get a list of system font names <EoL>
<BoL> pygame.font.match_font ( name , bold=0 , italic=0 ) - > name find the filename for the named system font <EoL>
<BoL> some additional imports that py2app/py2exe will want to see <EoL>
<BoL> pygame.sndarray.array ( Sound ) : return array <EoL>
<BoL> pygame.sndarray.get_arraytype ( ) : return str <EoL>
<BoL> pygame.sndarray.get_arraytypes ( ) : return tuple <EoL>
<BoL> pygame.sndarray.make_sound ( array ) : return Sound <EoL>
<BoL> pygame.sndarray.samples ( Sound ) : return array <EoL>
<BoL> pygame.sndarray.use_arraytype ( arraytype ) : return None <EoL>
<BoL> eturn number of sprites in group <EoL>
<BoL> add sprite ( s ) to group <EoL>
<BoL> erase the previous position of all sprites <EoL>
<BoL> copy a group with all the same sprites <EoL>
<BoL> draw all sprites onto the surface <EoL>
<BoL> emove all sprites <EoL>
<BoL> ask if group has a sprite or sprites <EoL>
<BoL> emove sprite ( s ) from group <EoL>
<BoL> get a list of sprites in the group <EoL>
<BoL> call the update method of every member sprite <EoL>
<BoL> eturn the visible value of that sprite <EoL>
<BoL> set the visible value ( 0 or 1 ) and makes the sprite dirty <EoL>
<BoL> add the sprite to groups <EoL>
<BoL> does the sprite belong to any groups <EoL>
<BoL> list of Groups that contain this Sprite <EoL>
<BoL> emove the Sprite from all Groups <EoL>
<BoL> emove the sprite from groups <EoL>
<BoL> method to control sprite behavior <EoL>
<BoL> initialize group . <EoL>
<BoL> add a sprite or sequence of sprites to a group <EoL>
<BoL> Do not use this method directly . <EoL>
<BoL> change the layer of the sprite <EoL>
<BoL> use to set background <EoL>
<BoL> draw all sprites in the right order onto the given surface <EoL>
<BoL> eturn the bottom layer <EoL>
<BoL> get the area where drawing will occur <EoL>
<BoL> eturn the layer that sprite is currently in <EoL>
<BoL> eturn the sprite at the index idx from the groups sprites <EoL>
<BoL> eturn a list with all sprites at that position <EoL>
<BoL> eturn all sprites from a layer ordered as they where added <EoL>
<BoL> eturn the top layer <EoL>
<BoL> eturn the topmost sprite <EoL>
<BoL> eturn a list of unique defined layers defined . <EoL>
<BoL> move the sprite to the bottom layer <EoL>
<BoL> bring the sprite to front layer <EoL>
<BoL> Do not use this method directly . <EoL>
<BoL> emove all sprites from a layer and return them as a list <EoL>
<BoL> epaint the given area <EoL>
<BoL> clip the area where to draw ; pass None ( default ) to reset the clip <EoL>
<BoL> set the treshold in milliseconds <EoL>
<BoL> eturn a ordered list of sprites ( first back , last top ) . <EoL>
<BoL> switch the sprites from layer1_nr to layer2_nr <EoL>
<BoL> initialize an instance of LayeredUpdates with the given attributes <EoL>
<BoL> Do not use this method directly . <EoL>
<BoL> change the layer of the sprite <EoL>
<BoL> draw all sprites in the right order onto the passed surface <EoL>
<BoL> detect collision between two sprites using circles <EoL>
<BoL> detect collision between two sprites using scaled circles <EoL>
<BoL> creates a new collide_circle_ratio callable instance <EoL>
<BoL> collision detection between two sprites , using masks . <EoL>
<BoL> collision detection between two sprites , using rects . <EoL>
<BoL> detect collision between two sprites using scaled rects <EoL>
<BoL> create a new collide_rect_ratio callable <EoL>
<BoL> detect collision between a group and another group <EoL>
<BoL> find Sprites in a Group that intersect another Sprite <EoL>
<BoL> finds any sprites in a group that collide with the given sprite <EoL>
<BoL> pygame.surfarray.array2d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.array3d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.array_alpha ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.array_colorkey ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.blit_array ( Surface , array ) : return None <EoL>
<BoL> pygame.surfarray.get_arraytype ( ) : return str <EoL>
<BoL> pygame.surfarray.get_arraytypes ( ) : return tuple <EoL>
<BoL> pygame.surfarray.make_surface ( array ) : return Surface <EoL>
<BoL> pygame.surfarray.map_array ( Surface , array3d ) : return array2d <EoL>
<BoL> pygame.surfarray.pixels2d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels3d ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_alpha ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_blue ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_green ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.pixels_red ( Surface ) : return array <EoL>
<BoL> pygame.surfarray.use_arraytype ( arraytype ) : return None <EoL>
<BoL> insert a font and style into the font dictionary <EoL>
<BoL> create simple version of the font name <EoL>
<BoL> map common fonts that are absent from the system to similar fonts that are installed in the system <EoL>
<BoL> ead the fonts on OS X. X11 is required for this to work . <EoL>
<BoL> use the fc-list from fontconfig to get a list of fonts <EoL>
<BoL> initialize fonts dictionary on Windows <EoL>
<BoL> convert bytes to ASCII-only string <EoL>
<BoL> f - is the function we that we call callback ( result ) - this is called when the function ( f ) returns errback ( exception ) - this is called when the function ( f ) raises an exception . <EoL>
<BoL> Sets up the worker threads NOTE : undefined behaviour if you call this again . <EoL>
<BoL> puts a function on a queue for running later . <EoL>
<BoL> Stops the WorkerQueue , waits for all of the threads to finish up . <EoL>
<BoL> Loops until all of the tasks are finished . <EoL>
<BoL> waits until all tasks are complete . <EoL>
<BoL> does a little test to see if workers are at all faster . <EoL>
<BoL> Does a little test to see if threading is worth it . Sets up a global worker queue if it 's worth it . <EoL>
<BoL> cleans up everything . <EoL>
<BoL> like map , but uses a thread pool to execute . <EoL>
<BoL> warn about unneeded old files <EoL>
<BoL> Turn off axis labels and legend . <EoL>
<BoL> Finalize the annotations and layout . <EoL>
<BoL> Get a list of colors for the hue variable . <EoL>
<BoL> Extract the legend data from an axes object and save it . <EoL>
<BoL> Remove axis spines from the facets . <EoL>
<BoL> Make the axis identified by these indices active and return it . <EoL>
<BoL> Generator for name indices and data subsets for each facet . <EoL>
<BoL> Apply a plotting function to each facet 's subset of the data . <EoL>
<BoL> Like `` .map `` but passes args as strings and inserts data in kwargs . <EoL>
<BoL> Save the figure . <EoL>
<BoL> Set attributes on each subplot Axes . <EoL>
<BoL> Set axis labels on the left column and bottom row of the grid . <EoL>
<BoL> Label the x axis on the bottom row of the grid . <EoL>
<BoL> Set x axis tick labels on the bottom row of the grid . <EoL>
<BoL> Label the y axis on the left column of the grid . <EoL>
<BoL> Set y axis tick labels on the left column of the grid . <EoL>
<BoL> Annotate the plot with a statistic about the relationship . <EoL>
<BoL> Shortcut to draw the full plot . <EoL>
<BoL> Draw a bivariate plot of ` x ` and ` y ` . <EoL>
<BoL> Draw univariate plots for ` x ` and ` y ` separately . <EoL>
<BoL> Wrap figure.savefig defaulting to tight bounding box . <EoL>
<BoL> Set the axis labels on the bivariate axes . <EoL>
<BoL> Add labels to the left and bottom Axes . <EoL>
<BoL> Find which variables in a DataFrame are numeric . <EoL>
<BoL> Plot with the same function in every subplot . <EoL>
<BoL> Plot with a univariate function on each diagonal subplot . <EoL>
<BoL> Plot with a bivariate function on the lower diagonal subplots . <EoL>
<BoL> Plot with a bivariate function on the off-diagonal subplots . <EoL>
<BoL> Plot with a bivariate function on the upper diagonal subplots . <EoL>
<BoL> Bootstrap by resampling from a kernel density estimate . <EoL>
<BoL> Resample units instead of datapoints . <EoL>
<BoL> Resample one or more arrays with replacement and store aggregate values . <EoL>
<BoL> Return a parameter dict for the aesthetic style of the plots . <EoL>
<BoL> Calculate number of hist bins using Freedman-Diaconis rule . <EoL>
<BoL> Make a palette that blends between a list of colors . <EoL>
<BoL> Return a list of colors defining a color palette . <EoL>
<BoL> Group a long-form variable by another with correct order . <EoL>
<BoL> Add a dummy patch object so we can get legend data . <EoL>
<BoL> Add descriptive labels to an Axes object . <EoL>
<BoL> Draw the bars onto ` ax ` . <EoL>
<BoL> Get a list of colors for the main component of the plots . <EoL>
<BoL> Determine how the plot should be oriented based on the data . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Use matplotlib to draw a boxplot on an Axes . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Take a drawn matplotlib boxplot and make it look nice . <EoL>
<BoL> Add empty scatterplot artists with labels for the legend . <EoL>
<BoL> Get the number of data points and calculate ` depth ` of letter-value plot . <EoL>
<BoL> Find the outliers based on the letter value depth . <EoL>
<BoL> Use matplotlib to draw a letter value plot on an Axes . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Draw the main data components of the plot . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Draw the points onto ` ax ` . <EoL>
<BoL> Make the plot . <EoL>
<BoL> Stop points from extending beyond their territory . <EoL>
<BoL> Adjust x position of points to avoid overlaps . <EoL>
<BoL> Return a list of all swarm points that could overlap with target . <EoL>
<BoL> Plot the data . <EoL>
<BoL> Remove candidates from the list if they overlap with the swarm . <EoL>
<BoL> Make the full plot . <EoL>
<BoL> Return a list of ( x , y ) coordinates that might be valid . <EoL>
<BoL> Find new positions on the categorical axis for each point . <EoL>
<BoL> Draw boxplot information at center of the density . <EoL>
<BoL> Draw individual observations as points at middle of the violin . <EoL>
<BoL> Draw the quartiles as lines at width of density . <EoL>
<BoL> Draw a line to mark a single observation . <EoL>
<BoL> Draw a line orthogonal to the value axis at width of density . <EoL>
<BoL> Draw the violins onto ` ax ` . <EoL>
<BoL> Find the support and density for all of the data . <EoL>
<BoL> Estimate a KDE for a vector of data with flexible bandwidth . <EoL>
<BoL> Define a grid of support for the violin . <EoL>
<BoL> Make the violin plot . <EoL>
<BoL> Scale the relative area under the KDE curve . <EoL>
<BoL> Scale each density curve by the number of observations . <EoL>
<BoL> Scale each density curve to the same height . <EoL>
<BoL> Return a list of unique data values . <EoL>
<BoL> Make a sequential palette that blends from dark to `` color `` . <EoL>
<BoL> Deprecated ; please use ` catplot ` instead . <EoL>
<BoL> Get a set of evenly spaced colors in HUSL hue space . <EoL>
<BoL> Calculate the IQR for an array of numbers . <EoL>
<BoL> Deprecated ; please use ` boxenplot ` . <EoL>
<BoL> Helper method for removing NA values from array-like . <EoL>
<BoL> Select a palette from the ColorBrewer set . <EoL>
<BoL> Launch an interactive widget to create a sequential cubehelix palette . <EoL>
<BoL> Launch an interactive widget to create a dark sequential palette . <EoL>
<BoL> Launch an interactive widget to choose a diverging color palette . <EoL>
<BoL> Launch an interactive widget to create a light sequential palette . <EoL>
<BoL> Make a palette with color names from Crayola crayons . <EoL>
<BoL> Decrease the saturation channel of a color by some percent . <EoL>
<BoL> Establish support for a kernel density estimate . <EoL>
<BoL> Compute a bivariate kde using scipy . <EoL>
<BoL> Compute a univariate kernel density estimate using scipy . <EoL>
<BoL> Compute a bivariate kde using statsmodels . <EoL>
<BoL> Plot datapoints in an array as sticks on an axis . <EoL>
<BoL> Who 's a good boy ? <EoL>
<BoL> Return None <EoL>
<BoL> Return true , if the named module is a package . <EoL>
<BoL> Add documentation to a function . <EoL>
<BoL> Import module , returning the module after the last dot . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Add an item to six.moves . <EoL>
<BoL> A decorator that defines __unicode__ and __str__ methods under Python 2 . Under Python 3 it does nothing . <EoL>
<BoL> Remove item from six.moves . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Report available example datasets , useful for reporting issues . <EoL>
<BoL> Get a set of evenly spaced colors in HLS hue space . <EoL>
<BoL> Load a dataset from the online repository ( requires internet ) . <EoL>
<BoL> Preprocess { row/col } _colors to extract labels and convert colors . <EoL>
<BoL> Turns a list of colors into a numpy matrix and matplotlib colormap <EoL>
<BoL> Get the proportions of the figure taken up by each axes <EoL>
<BoL> Plots color labels between the dendrogram and the heatmap <EoL>
<BoL> Divide the data by the difference between the max and min <EoL>
<BoL> Standarize the mean and variance of the data axis <EoL>
<BoL> Plot a dendrogram of the relationships between the columns of data <EoL>
<BoL> Calculates a dendrogram based on the linkage matrix <EoL>
<BoL> Plots a dendrogram of the similarities between data on the axes <EoL>
<BoL> Add textual labels with the value in each cell . <EoL>
<BoL> Determine ticks and ticklabels that minimize overlap . <EoL>
<BoL> Return ticks and labels at evenly spaced intervals . <EoL>
<BoL> Draw the heatmap on the provided Axes . <EoL>
<BoL> Convert either a list of colors or nested lists of colors to RGB . <EoL>
<BoL> Convert a pandas index or multiindex to an axis label . <EoL>
<BoL> Convert a pandas index or multiindex into ticklabels . <EoL>
<BoL> Ensure that data and mask are compatabile and add missing values . <EoL>
<BoL> Return a boolean for whether the list of ticklabels have overlaps . <EoL>
<BoL> Calculate the relative luminance of a color according to W3C standards <EoL>
<BoL> Return a Unicode string representing a Python object . <EoL>
<BoL> Plot the values in a color palette as a horizontal array . <EoL>
<BoL> Return discrete colors from a matplotlib palette . <EoL>
<BoL> Open the context . <EoL>
<BoL> Close the context . <EoL>
<BoL> Return a color palette with hex codes instead of RGB values . <EoL>
<BoL> Add some more flexibility to color choices . <EoL>
<BoL> Turn stringified cubehelix params into args/kwargs . <EoL>
<BoL> Return the list of colors in the current matplotlib color cycle . <EoL>
<BoL> Change how matplotlib color shorthands are interpreted . <EoL>
<BoL> Independently manipulate the h , l , or s channels of a color . <EoL>
<BoL> Make a palette with color names from the xkcd color survey . <EoL>
<BoL> Return a parameter dict to scale elements of the figure . <EoL>
<BoL> Set the aesthetic style of the plots . <EoL>
<BoL> Set the plotting context parameters . <EoL>
<BoL> Restore all RC params to default settings . <EoL>
<BoL> Restore all RC params to original settings ( respects custom rc ) . <EoL>
<BoL> Set the matplotlib color cycle using a seaborn palette . <EoL>
<BoL> Remove observations with missing data . <EoL>
<BoL> Extract variables from data or use directly . <EoL>
<BoL> Discretize a predictor by assigning value to closest bin . <EoL>
<BoL> Low-level regression and prediction using linear algebra . <EoL>
<BoL> Fit the model in log-space . <EoL>
<BoL> Fit a locally-weighted regression , which returns its own grid . <EoL>
<BoL> Regression using numpy polyfit for higher-order trends . <EoL>
<BoL> Fit the regression model . <EoL>
<BoL> More general regression function using statsmodels objects . <EoL>
<BoL> Draw the model . <EoL>
<BoL> Draw the full plot . <EoL>
<BoL> Regress b from a keeping a 's original mean . <EoL>
<BoL> Draw the data . <EoL>
<BoL> Test if a series is completely missing . <EoL>
<BoL> Determine if data should considered numeric or categorical . <EoL>
<BoL> Add labeled artists to represent the different plot semantics . <EoL>
<BoL> Compute an estimate and confidence interval using grouper . <EoL>
<BoL> Determine colors when the hue variable is qualitative . <EoL>
<BoL> Return the color corresponding to the hue level . <EoL>
<BoL> Set x and y labels with visibility that matches the ticklabels . <EoL>
<BoL> Determine colors when the hue variable is quantitative . <EoL>
<BoL> Determine what colors to use given data characteristics . <EoL>
<BoL> Determine the linewidths given data characteristics . <EoL>
<BoL> Determine the markers and line dashes . <EoL>
<BoL> Draw the plot onto an axes , passing matplotlib kwargs . <EoL>
<BoL> Return the size corresponding to the size level . <EoL>
<BoL> Convert a style argument to a dict of matplotlib attributes . <EoL>
<BoL> Return ( x , y ) data for each subset defined by semantics . <EoL>
<BoL> Convert intervals to error arguments relative to plot heights . <EoL>
<BoL> Wrapper to handle different pandas sorting API pre/post 0.17 . <EoL>
<BoL> Return a fully saturated color with the same hue . <EoL>
<BoL> Plot the kernal density estimate of the bootstrap distribution . <EoL>
<BoL> Plot 250 traces from bootstrap . <EoL>
<BoL> Plot translucent error bands around the central tendancy . <EoL>
<BoL> Plot error bars at each data point . <EoL>
<BoL> Plot the kernal density estimate over the sample . <EoL>
<BoL> Plot each original data point discretely . <EoL>
<BoL> Plot a trace for each observation in the original data . <EoL>
<BoL> Upsample over time and plot a KDE of the bootstrap distribution . <EoL>
<BoL> Decorator that will skip a test if ` url ` is unreachable . <EoL>
<BoL> Set the spine 's position without resetting an associated axis . <EoL>
<BoL> Return booleans for whether the x and y ticklabels on an Axes overlap . <EoL>
<BoL> Grab current axis and label it . <EoL>
<BoL> Return a percentile range from an array of values . <EoL>
<BoL> Return the path of the seaborn data directory . <EoL>
<BoL> Like scoreatpercentile but can take and return array of percentiles . <EoL>
<BoL> Return arguments to plt.bar for pmf-like histogram of an array . <EoL>
<BoL> Return a R-style significance string corresponding to p values . <EoL>
<BoL> Object disposal <EoL>
<BoL> Static method , called when a widget is constructed . <EoL>
<BoL> Called when a custom msg is received . <EoL>
<BoL> Called when a view has been displayed for this widget instance <EoL>
<BoL> Called when ` IPython.display.display ` is called on the widget . <EoL>
<BoL> Lock a property-value pair . <EoL>
<BoL> Setup a handler to be called when a trait should be cross validated . <EoL>
<BoL> Sends a message to the model in the front-end . <EoL>
<BoL> Check the property lock ( property_lock ) <EoL>
<BoL> Convert json values to objects . <EoL>
<BoL> Convert a trait value to json . <EoL>
<BoL> Adds a class to the top level element of the widget . <EoL>
<BoL> Dynamically add trait attributes to the Widget . <EoL>
<BoL> Get a dict of all event handlers defined on this class , not a parent . <EoL>
<BoL> Get a dict of all the traitlets defined on this class , not a parent . <EoL>
<BoL> Get a list of all the names of this class ' traits . <EoL>
<BoL> Get a `` dict `` of all the traits of this class . The dictionary is keyed on the name and the values are the TraitType objects . <EoL>
<BoL> Close method . <EoL>
<BoL> Return the value for this widget which should be passed to interactive functions . Custom widgets can change this method to process the raw value `` self.value `` . <EoL>
<BoL> Returns the full state for a widget manager for embedding <EoL>
<BoL> Gets the widget state , or a piece of it . <EoL>
<BoL> Static method , called when a widget is constructed . <EoL>
<BoL> Returns True if the object has a trait with the specified name . <EoL>
<BoL> Hold syncing any state until the outermost context manager exits <EoL>
<BoL> Context manager for bundling trait change notifications and cross validation.Merges the provided change with the last if possible . <EoL>
<BoL> Called when a property has changed . <EoL>
<BoL> Setup a handler to be called when a trait changes . <EoL>
<BoL> ( Un ) Register a widget displayed callback . <EoL>
<BoL> ( Un ) Register a custom msg receive callback . <EoL>
<BoL> DEPRECATED : Setup a handler to be called when a trait changes . <EoL>
<BoL> Registers a callback to be called when a widget is constructed . <EoL>
<BoL> Open a comm to the frontend if one is n't already open . <EoL>
<BoL> Removes a class from the top level element of the widget . <EoL>
<BoL> Sends a custom msg to the widget model in the front-end . <EoL>
<BoL> Sends the widget state , or a piece of it , to the front-end , if it exists . <EoL>
<BoL> Called when a state is received from the front-end . <EoL>
<BoL> Forcibly sets trait attribute , including read-only attributes . <EoL>
<BoL> Get a `` dict `` of all the event handlers of this class . <EoL>
<BoL> Get metadata values for trait by key . <EoL>
<BoL> Get a list of all the names of this class ' traits . <EoL>
<BoL> Get a `` dict `` of all the traits of this class . The dictionary is keyed on the name and the values are the TraitType objects . <EoL>
<BoL> Remove a trait change handler . <EoL>
<BoL> Remove trait change handlers of any type for the specified name . If name is not specified , removes all trait notifiers . <EoL>
<BoL> Create a matplotlib colormap that will be updated by the widgets . <EoL>
<BoL> Show a continuous matplotlib colormap . <EoL>
<BoL> Change the LUT values in a matplotlib colormap in-place . <EoL>
<BoL> Return a file handle for given path . <EoL>
<BoL> Apply graphviz program to graph and return the result as a string . <EoL>
<BoL> Searches for name in exec path and returns full path <EoL>
<BoL> Reverse sufficient edges in digraph to make graph acyclic . Modifies existing graph . <EoL>
<BoL> Add the cycle of nodes given in nlist . <EoL>
<BoL> Add a single edge between nodes u and v . <EoL>
<BoL> Add nodes to graph from a container ebunch . <EoL>
<BoL> Add a single node n . <EoL>
<BoL> Add nodes from a container nbunch . <EoL>
<BoL> Add the path of nodes given in nlist . <EoL>
<BoL> Return subgraph induced by nodes in nbunch . <EoL>
<BoL> Remove all nodes , edges , and attributes from the graph . <EoL>
<BoL> Return a copy of the graph . <EoL>
<BoL> Return the degree of nodes given in nbunch container . <EoL>
<BoL> Return an iterator over the degree of the nodes given in nbunch container . <EoL>
<BoL> Remove edge between nodes u and v from the graph . <EoL>
<BoL> Remove edges from ebunch ( a container of edges ) . <EoL>
<BoL> Remove the single node n . <EoL>
<BoL> Remove nodes from a container nbunch . <EoL>
<BoL> Remove subgraph with given name . <EoL>
<BoL> Output graph to path in specified format . <EoL>
<BoL> Return list of edges in the graph . <EoL>
<BoL> Return iterator over edges in the graph . <EoL>
<BoL> Load a graph from a string in dot format . <EoL>
<BoL> Return an edge object ( Edge ) corresponding to edge ( u , v ) . <EoL>
<BoL> Return a node object ( Node ) corresponding to node n . <EoL>
<BoL> Return existing subgraph with specified name or None if it does n't exist . <EoL>
<BoL> Return True an edge u-v is in the graph or False if not . <EoL>
<BoL> Return True if u has an edge to v or False if not . <EoL>
<BoL> Return True if n is in the graph or False if not . <EoL>
<BoL> Return the in-degree of nodes given in nbunch container . <EoL>
<BoL> Return an iterator over the in-degree of the nodes given in nbunch container . <EoL>
<BoL> Return list of in edges in the graph . If the optional nbunch ( container of nodes ) only in edges adjacent to nodes in nbunch will be returned . <EoL>
<BoL> Return iterator over out edges in the graph . <EoL>
<BoL> Return list of predecessor nodes of n . <EoL>
<BoL> Return True if graph is directed or False if not . <EoL>
<BoL> Return True if graph is strict or False if not . <EoL>
<BoL> Return True if graph is undirected or False if not . <EoL>
<BoL> Return iterator over the nodes attached to n . <EoL>
<BoL> Return an iterator over all the nodes in the graph . <EoL>
<BoL> Return an iterator over the out-degree of the nodes given in nbunch container . <EoL>
<BoL> Return iterator over out edges in the graph . <EoL>
<BoL> Return iterator over predecessor nodes of n . <EoL>
<BoL> Return iterator over successor nodes of n . <EoL>
<BoL> Assign positions to nodes in graph . <EoL>
<BoL> Return a list of the nodes attached to n . <EoL>
<BoL> Return a list of all nodes in the graph . <EoL>
<BoL> Return the number of edges in the graph . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return the number of nodes in the graph . <EoL>
<BoL> Return the out-degree of nodes given in nbunch container . <EoL>
<BoL> Return list of out edges in the graph . <EoL>
<BoL> Return list of successor nodes of n . <EoL>
<BoL> Read graph from dot format file on path . <EoL>
<BoL> Return copy of directed graph with edge directions reversed . <EoL>
<BoL> Return a string ( unicode ) representation of graph in dot format . <EoL>
<BoL> Return a string ( unicode ) representation of graph in dot format . <EoL>
<BoL> Return parent graph of subgraph or None if graph is root graph . <EoL>
<BoL> Return root graph of subgraph or None if graph is root graph . <EoL>
<BoL> Return a list of all subgraphs in the graph . <EoL>
<BoL> Iterator over subgraphs . <EoL>
<BoL> Return directed copy of graph . <EoL>
<BoL> Return a string ( unicode ) representation of graph in dot format . <EoL>
<BoL> Return undirected copy of graph . <EoL>
<BoL> Transitive reduction of graph . Modifies existing graph . <EoL>
<BoL> Adjust directed graphs to improve layout aspect ratio . <EoL>
<BoL> Write graph in dot format to file on path . <EoL>
<BoL> Return pointer to graphviz node object . <EoL>
<BoL> Creates a file containing version information.Version information for PyGraphviz , created during installation . <EoL>
<BoL> Run PyGraphviz tests . <EoL>
<BoL> Private constructor . <EoL>
<BoL> Iterate over the names of attributes.Callback to gather attribute names <EoL>
<BoL> Decode a name according to the current file settings . <EoL>
<BoL> Encode a name according to the current file settings.Create an appropriate link creation property list <EoL>
<BoL> Create a new attribute , overwriting any existing attribute . <EoL>
<BoL> Get a view object on member items <EoL>
<BoL> Get a view object on member names <EoL>
<BoL> Change the value of an attribute while preserving its type . <EoL>
<BoL> Get a view object on member objects <EoL>
<BoL> Get a context manager allowing you to perform reads to a different destination type , e.g . : <EoL>
<BoL> The size of the first axis . TypeError if scalar . <EoL>
<BoL> Read data directly from HDF5 into an existing NumPy array . <EoL>
<BoL> Resize the dataset , or the specified axis . <EoL>
<BoL> Write data directly to HDF5 from a NumPy array . <EoL>
<BoL> Add an object to the group . The name must not already be in use . <EoL>
<BoL> Close the file . All open objects become invalid <EoL>
<BoL> Create a new HDF5 dataset <EoL>
<BoL> Create a dataset similar to ` other ` . <EoL>
<BoL> Create and return a new subgroup . <EoL>
<BoL> Create a new virtual dataset in this group . <EoL>
<BoL> Tell the HDF5 library to flush its buffers . <EoL>
<BoL> Retrieve an item or other information . <EoL>
<BoL> Move a link to a new location in the file . <EoL>
<BoL> Open a dataset , creating it if it does n't exist . <EoL>
<BoL> Recursively visit all names in this group and subgroups ( HDF5 1.8 ) .Call the function with the text name , not bytes <EoL>
<BoL> Recursively visit names and objects in this group ( HDF5 1.8 ) .Use the text name of the object , not bytes <EoL>
<BoL> Create a new Group object by binding to a low-level GroupID . <EoL>
<BoL> Decode filename used by HDF5 library . <EoL>
<BoL> Encode filename for use in the HDF5 library . <EoL>
<BoL> Check if an object 's dataspace is empty <EoL>
<BoL> Make a NumPy dtype appropriate for reading <EoL>
<BoL> Get the shape of the target dataspace selection referred to by *ref* <EoL>
<BoL> Get the shape of the target dataspace referred to by *ref* . <EoL>
<BoL> Default link access property list <EoL>
<BoL> Default link creation property list <EoL>
<BoL> Attempt to guess an appropriate dtype for the object , returning None if nothing is appropriate ( or if it should be left up the the array constructor to figure out ) <EoL>
<BoL> Determine if a file is valid HDF5 ( False if it does n't exist ) . <EoL>
<BoL> Decode filename from the filesystem encoding with 'surrogateescape ' error handler , return str unchanged . On Windows , use 'strict ' error handler if the file system encoding is 'mbcs ' ( which is the default encoding ) . <EoL>
<BoL> Encode filename to the filesystem encoding with 'surrogateescape ' error handler , return bytes unchanged . On Windows , use 'strict ' error handler if the file system encoding is 'mbcs ' ( which is the default encoding ) . <EoL>
<BoL> Set up a file access property list <EoL>
<BoL> Set up a file creation property list <EoL>
<BoL> Get a new FileID by opening or creating a file . Also validates mode argument . <EoL>
<BoL> Register a custom driver . <EoL>
<BoL> Return a frozenset of the names of all of the registered drivers . <EoL>
<BoL> Unregister a custom driver . <EoL>
<BoL> Check for and return a well-formed entry tuple for a call to h5p.set_external . <EoL>
<BoL> Bootstrap function to figure out what filters are available . <EoL>
<BoL> Normalize external into a well-formed list of tuples and return . <EoL>
<BoL> Check if chunks/maxshape match dataset rank <EoL>
<BoL> Extract a dictionary of active filters from a DCPL , along with their settings . <EoL>
<BoL> Guess an appropriate chunk layout for a dataset , given its shape and the size of each element in bytes . <EoL>
<BoL> Perform point-wise selection from a NumPy boolean array <EoL>
<BoL> Create a selection . Shape may be None if spaceid is given . <EoL>
<BoL> Internal method which actually performs the selection <EoL>
<BoL> Add the sequence of points to the end of the current selection <EoL>
<BoL> Get an iterable for broadcasting <EoL>
<BoL> Add the sequence of points to the beginning of the current selection <EoL>
<BoL> Replace the current selection with the given sequence of points <EoL>
<BoL> Return an iterator over target dataspaces for broadcasting . <EoL>
<BoL> Expand ellipsis objects and fill in missing axes . <EoL>
<BoL> Process a `` simple '' selection tuple , containing only slices and integer objects . Return is a 4-tuple with tuples for start , count , step , and a flag which tells if the axis is a `` scalar '' selection ( indexed by an integer ) . <EoL>
<BoL> Given an integer index , return a 3-tuple ( start , count , step ) for hyperslab selection <EoL>
<BoL> Given a slice object , return a 3-tuple ( start , count , step ) for use with the hyperslab selection routines <EoL>
<BoL> Given a dataspace , try to deduce the shape of the selection.Determine the number of elements selected along a particular axis . <EoL>
<BoL> High-level routine to generate a selection from arbitrary arguments to __getitem__ . The arguments should be the following : <EoL>
<BoL> Returns a 2-tuple containing : <EoL>
<BoL> Returns a 2-tuple containing : <EoL>
<BoL> Top-level dispatch function for reading . <EoL>
<BoL> Call this from an interactive IPython session to enable tab-completion of group and attribute names . <EoL>
<BoL> Run tests with TextTestRunner and returns a TestResult instance . <EoL>
<BoL> The numpy array interface . <EoL>
<BoL> Return an item . <EoL>
<BoL> Returns an Iterator over the values of this Categorical . <EoL>
<BoL> The length of this Categorical . <EoL>
<BoL> Item assignment . <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Unicode representation . <EoL>
<BoL> Code the categories to ensure we can groupby for categoricals . <EoL>
<BoL> add additional __dir__ for this object <EoL>
<BoL> Get the codes . <EoL>
<BoL> return an indexer coerced to the codes dtype <EoL>
<BoL> return the base repr for the categories <EoL>
<BoL> Returns a string representation of the footer . <EoL>
<BoL> Compute the inverse of a categorical , returning a dict of categories - > indexers . <EoL>
<BoL> Sets new categories inplace <EoL>
<BoL> Not settable by the user directly <EoL>
<BoL> Internal method for directly updating the CategoricalDtype <EoL>
<BoL> Return a slice of myself . <EoL>
<BoL> a short repr displaying only max_vals and an optional ( but default footer ) <EoL>
<BoL> For correctly ranking ordered categorical data . See GH # 15420 <EoL>
<BoL> Add new categories . <EoL>
<BoL> Sets the Categorical to be ordered <EoL>
<BoL> Sets the Categorical to be unordered <EoL>
<BoL> Coerce this type to another dtype <EoL>
<BoL> assert that we are ordered <EoL>
<BoL> Copy constructor . <EoL>
<BoL> Describes this Categorical <EoL>
<BoL> Return the Categorical without null values . <EoL>
<BoL> Returns True if categorical arrays are equal . <EoL>
<BoL> Fill NA/NaN values using the specified method . <EoL>
<BoL> Make a Categorical type from codes and categories arrays . <EoL>
<BoL> Return the values . <EoL>
<BoL> Returns True if categoricals are the same dtype same categories , and same ordered <EoL>
<BoL> Check whether ` values ` are contained in Categorical . <EoL>
<BoL> Detect missing values <EoL>
<BoL> Map categories using input correspondence ( dict , Series , or function ) . <EoL>
<BoL> The maximum value of the object . <EoL>
<BoL> Memory usage of my values <EoL>
<BoL> The minimum value of the object . <EoL>
<BoL> Returns the mode ( s ) of the Categorical . <EoL>
<BoL> Inverse of isna <EoL>
<BoL> Replace specific elements in the Categorical with given values . <EoL>
<BoL> Return a flattened ( numpy ) array . <EoL>
<BoL> Removes the specified categories . <EoL>
<BoL> Removes categories which are not used . <EoL>
<BoL> Renames categories . <EoL>
<BoL> Reorders categories as specified in new_categories . <EoL>
<BoL> Repeat elements of a Categorical . <EoL>
<BoL> Sets the ordered attribute to the boolean value <EoL>
<BoL> Shift Categorical by desired number of periods . <EoL>
<BoL> Sorts the Categorical by category value returning a new Categorical by default . <EoL>
<BoL> Take elements from the Categorical . <EoL>
<BoL> Return my 'dense ' representation <EoL>
<BoL> Return a list of the values . <EoL>
<BoL> Return the `` Categorical `` which `` categories `` and `` codes `` are unique . Unused categories are NOT returned . <EoL>
<BoL> Returns a Series containing counts of each category . <EoL>
<BoL> Return a view of myself . <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Gets called after a ufunc <EoL>
<BoL> Override numpy.ndarray 's __getitem__ method to work as desired . <EoL>
<BoL> return the length of the Index <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Return a string representation for this object . <EoL>
<BoL> add in Categorical accessor methods <EoL>
<BoL> add in comparison methods <EoL>
<BoL> add in logical methods % ( desc ) s <EoL>
<BoL> add in logical methods to disable <EoL>
<BoL> add in the numeric add/sub methods to disable <EoL>
<BoL> add in numeric methods <EoL>
<BoL> add in numeric methods to disable other than add/sub <EoL>
<BoL> add in numeric unary methods <EoL>
<BoL> Check value is valid for scalar op <EoL>
<BoL> Faster check for `` name in self `` when we know ` name ` is a Python identifier ( e.g . <EoL>
<BoL> always allow reindexing <EoL>
<BoL> Return a Categorical adjusted for groupby <EoL>
<BoL> we need to coerce a scalar to a compat for our index type <EoL>
<BoL> coerces data to ndarray , raises on scalar data . <EoL>
<BoL> Concatenate to_concat which has the same class ValueError if other is not in the categories <EoL>
<BoL> Convert value to be insertable to ndarray <EoL>
<BoL> .. versionadded : : 0.19.0 <EoL>
<BoL> method delegation to the ._values <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> Return the formatted data as a unicode string <EoL>
<BoL> actually format my specific types <EoL>
<BoL> return an attributes dict for my class <EoL>
<BoL> Given 2 indexes , give a consensus name meaning we take the not None one , or None if the names differ . Return a new object if we are resetting the name <EoL>
<BoL> Fallback pad/backfill get_indexer that works for monotonic decreasing indexes and non-monotonic targets <EoL>
<BoL> Return an Index of values for requested level , equal to the length of the index . <EoL>
<BoL> This is overridden on subclasses ( namely , IntervalIndex ) to control get_slice_bound . <EoL>
<BoL> Get the indexer for the nearest index labels ; requires an index with values that can be subtracted from each other ( e.g. , not strings or tuples ) . <EoL>
<BoL> Returns an index containing unique values . <EoL>
<BoL> consistent invalid indexer message <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> return a boolean if we need a qualified .info display <EoL>
<BoL> returns sorter for the inner most level while preserving the order of higher levels <EoL>
<BoL> If we have a float key and are not a floating index then try to cast to an int if equivalent <EoL>
<BoL> Update Index attributes ( e.g . freq ) depending on op <EoL>
<BoL> reindex from a non-unique ; which CategoricalIndex 's are almost always <EoL>
<BoL> Initializes or resets `` _id `` attribute with new object <EoL>
<BoL> Set new names on index . Each name has to be a hashable type . <EoL>
<BoL> create a new Index inferring the class with passed value , do n't copy the data , use the same object attributes with passed in attributes taking precedence <EoL>
<BoL> compat with MultiIndex <EoL>
<BoL> Return a summarized representation <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> convert to object if we are a categorical <EoL>
<BoL> Attempt to convert an array of data into an integer index . <EoL>
<BoL> return valid other , evaluate or raise TypeError if we are not of the appropriate type <EoL>
<BoL> validate if we can perform a numeric unary operation <EoL>
<BoL> Validate index level . <EoL>
<BoL> if we are positional indexer validate that we have appropriate typed bounds must be an integer <EoL>
<BoL> Handles the quirks of having a singular 'name ' parameter for general Index and plural 'names ' parameter for MultiIndex . <EoL>
<BoL> Append a collection of Index options together <EoL>
<BoL> return a ndarray of the maximum argument indexer <EoL>
<BoL> return a ndarray of the minimum argument indexer <EoL>
<BoL> For a sorted index , return the most recent label up to and including the passed label . Return NaN if not found . <EoL>
<BoL> where : array of timestamps mask : array of booleans where data is not NA <EoL>
<BoL> Make new Index with passed location ( -s ) deleted <EoL>
<BoL> Return a new Index with elements from the index that are not in ` other ` . <EoL>
<BoL> Make new Index with passed list of labels deleted <EoL>
<BoL> Return Index with duplicate values removed . <EoL>
<BoL> Determines if two CategorialIndex objects contain the same elements . <EoL>
<BoL> Render a string representation of the Index <EoL>
<BoL> Extract duplicated index elements . <EoL>
<BoL> guaranteed return of an indexer even when non-unique This dispatches to get_indexer or get_indexer_nonunique as appropriate <EoL>
<BoL> Get integer location , slice or boolean mask for requested label . <EoL>
<BoL> Calculate slice bound that corresponds to given label . <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you know what you 're doing <EoL>
<BoL> return the underlying data as an ndarray <EoL>
<BoL> Group the index labels by a given array of values . <EoL>
<BoL> Similar to equals , but check that other comparable attributes are also equal <EoL>
<BoL> Make new Index inserting new item at location . Follows Python list.append semantics for negative values <EoL>
<BoL> Form the intersection of two Index objects . <EoL>
<BoL> More flexible , faster check like `` is `` but that works through views <EoL>
<BoL> Check if the Index holds categorical data . <EoL>
<BoL> Return a boolean array where the index values are in ` values ` . <EoL>
<BoL> Detect missing values . <EoL>
<BoL> Map values using input correspondence ( a dict , Series , or function ) . <EoL>
<BoL> Detect existing ( non-missing ) values . <EoL>
<BoL> return a new Index of the values set with the mask <EoL>
<BoL> return an ndarray of the flattened values of the underlying data <EoL>
<BoL> Set new names on index . Defaults to returning new index . <EoL>
<BoL> Repeat elements of an Index . <EoL>
<BoL> Set new names on index . Defaults to returning new index . <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you know what you 're doing <EoL>
<BoL> Shift index by desired number of time frequency increments . <EoL>
<BoL> For an ordered or unique index , compute the slice indexer for input labels and step . <EoL>
<BoL> Compute slice locations for input labels . <EoL>
<BoL> Return a sorted copy of the index . <EoL>
<BoL> For internal compatibility with with the Index API <EoL>
<BoL> Return a summarized representation .. deprecated : : 0.23.0 <EoL>
<BoL> Compute the symmetric difference of two Index objects . It 's sorted if sorting is possible . <EoL>
<BoL> Create a DataFrame with a column containing the Index . <EoL>
<BoL> Format specified values of ` self ` and return them . <EoL>
<BoL> Create a Series with both index and values equal to the index keys useful with map for returning an indexer based on an index <EoL>
<BoL> Form the union of two Index objects and sorts if possible . <EoL>
<BoL> Iterate over infor axis <EoL>
<BoL> Returns length of info axis , but here we use the index <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> Matrix multiplication using binary ` @ ` operator in Python > =3.5 <EoL>
<BoL> Return a string representation for a particular DataFrame <EoL>
<BoL> provide boxed values for a column <EoL>
<BoL> ensure that if we do n't have an index , that we can create one from the passed value <EoL>
<BoL> let 's be explicit about this <EoL>
<BoL> return the actual column <EoL>
<BoL> True if the repr should show the info view . <EoL>
<BoL> Segregate Series based on type and coerce into matrices . Needs to handle a lot of exceptional cases . <EoL>
<BoL> i : int , slice , or sequence of integers axis : intNotes -- -- - If slice passed , the resulting data will be a viewNotes -- -- - If slice passed , the resulting data will be a view <EoL>
<BoL> Check if we do need a multi reindex . <EoL>
<BoL> we are guaranteed non-Nones in the axes ! <EoL>
<BoL> Check if full repr fits in horizontal boundaries imposed by the display options width and max_columns . In case off non-interactive session , no boundaries apply . <EoL>
<BoL> Check length against max_rows . <EoL>
<BoL> Return a html representation for a particular DataFrame . Mainly for IPython notebook . <EoL>
<BoL> Ensures new columns ( which go into the BlockManager as new blocks ) are always copied and converted into an array . <EoL>
<BoL> Add series to DataFrame in specified column . <EoL>
<BoL> Construct a slice of this container . <EoL>
<BoL> Replace self internals with result . <EoL>
<BoL> Apply a function to a Dataframe elementwise . <EoL>
<BoL> Assign new columns to a DataFrame , returning a new object ( a copy ) with the new columns added to the original ones . Existing columns that are re-assigned will be overwritten . <EoL>
<BoL> Add two DataFrame objects and do not propagate NaN values , so if for a ( column , time ) one frame is missing a value , it will default to the other frame 's value ( which might be NaN as well ) <EoL>
<BoL> Combine two DataFrame objects and default to non-null values in frame calling the method . Result index columns will be the union of the respective indexes and columns <EoL>
<BoL> Compute pairwise correlation of columns , excluding NA/null values <EoL>
<BoL> Compute pairwise correlation between rows or columns of two DataFrame objects . <EoL>
<BoL> Count non-NA cells for each column or row . <EoL>
<BoL> Compute pairwise covariance of columns , excluding NA/null values . <EoL>
<BoL> First discrete difference of element . <EoL>
<BoL> Matrix multiplication with DataFrame or Series objects . Can also be called using ` self @ other ` in Python > = 3.5 . <EoL>
<BoL> Return DataFrame with duplicate rows removed , optionally only considering certain columns <EoL>
<BoL> Return boolean Series denoting duplicate rows , optionally only considering certain columns <EoL>
<BoL> Evaluate a string describing operations on DataFrame columns . <EoL>
<BoL> Construct DataFrame from dict of array-like or dicts . <EoL>
<BoL> Construct a dataframe from a list of tuples <EoL>
<BoL> Quickly retrieve single value at passed column and index <EoL>
<BoL> Return an ndarray after converting sparse values to dense . <EoL>
<BoL> Return index of first occurrence of maximum over requested axis . NA/null values are excluded . <EoL>
<BoL> Return index of first occurrence of minimum over requested axis . NA/null values are excluded . <EoL>
<BoL> Insert column into DataFrame at specified location . <EoL>
<BoL> Return boolean DataFrame showing whether each element in the DataFrame is contained in values . <EoL>
<BoL> Iterator over ( column name , Series ) pairs . <EoL>
<BoL> Iterate over DataFrame rows as ( index , Series ) pairs . <EoL>
<BoL> Iterate over DataFrame rows as namedtuples , with index value as first element of the tuple . <EoL>
<BoL> Get the 'info axis ' ( see Indexing for more ) <EoL>
<BoL> Label-based `` fancy indexing '' function for DataFrame . Given equal-length arrays of row and column labels , return an array of the values corresponding to each ( row , col ) pair . <EoL>
<BoL> Return the memory usage of each column in bytes . <EoL>
<BoL> Gets the mode ( s ) of each element along the axis selected . Adds a row for each mode per label , fills in gaps with nan . <EoL>
<BoL> Return the first ` n ` rows ordered by ` columns ` in descending order . <EoL>
<BoL> Get the rows of a DataFrame sorted by the ` n ` smallest values of ` columns ` . <EoL>
<BoL> Return Series with number of distinct observations over requested axis . <EoL>
<BoL> Return reshaped DataFrame organized by given index / column values . <EoL>
<BoL> Query the columns of a frame with a boolean expression . <EoL>
<BoL> Alter axes labels . <EoL>
<BoL> Rearrange index levels using input order . May not drop or duplicate levels <EoL>
<BoL> Round a DataFrame to a variable number of decimal places . <EoL>
<BoL> Return a subset of the DataFrame 's columns based on the column dtypes . <EoL>
<BoL> Put single value at passed column and index <EoL>
<BoL> Stack the prescribed level ( s ) from columns to index . <EoL>
<BoL> Swap levels i and j in a MultiIndex on a particular axis <EoL>
<BoL> Convert the DataFrame to a dictionary . <EoL>
<BoL> write out the binary feather-format for DataFrames <EoL>
<BoL> Transform long ( stacked ) format ( DataFrame ) into wide ( 3D , Panel ) format . <EoL>
<BoL> Convert DataFrame from DatetimeIndex to PeriodIndex with desired frequency ( inferred from index if not passed ) <EoL>
<BoL> Convert DataFrame to a NumPy record array . <EoL>
<BoL> Convert to SparseDataFrame <EoL>
<BoL> Cast to DatetimeIndex of timestamps , at *beginning* of period <EoL>
<BoL> Transpose index and columns . <EoL>
<BoL> Pivot a level of the ( necessarily hierarchical ) index labels , returning a DataFrame having a new level of column labels whose inner-most level consists of the pivoted index labels . <EoL>
<BoL> Reconstruct an instance from a pickled state <EoL>
<BoL> Roll provided date backward to next offset only if not on offset <EoL>
<BoL> Roll provided date forward to next offset only if not on offset <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> This getitem defers to the underlying array , which by-definition can only handle list-likes , slices , and integer scalars <EoL>
<BoL> Return an iterator over the boxed values <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> add in comparison methods <EoL>
<BoL> add in the datetimelike methods ( as we may have to override the superclass ) <EoL>
<BoL> Add a timedelta-like , DateOffset , or TimedeltaIndex-like object to self . <EoL>
<BoL> Add a delta of a timedeltalike return the i8 result view <EoL>
<BoL> Add a delta of a TimedeltaIndex return the i8 result view <EoL>
<BoL> Add pd.NaT to self <EoL>
<BoL> Add or subtract array-like of DateOffset objects <EoL>
<BoL> Ensure incoming data can be represented as ints . <EoL>
<BoL> apply box func to passed values <EoL>
<BoL> return object Index which contains boxed values <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> Concatenate to_concat which has the same class <EoL>
<BoL> Convert value to be insertable to ndarray <EoL>
<BoL> we do n't allow integer or float indexing on datetime-like when using loc <EoL>
<BoL> ensure that we are re-localized <EoL>
<BoL> We have been called because a comparison between 8 aware arrays . numpy > = 1.11 will now warn about NaT comparisons <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> If label is a string , cast it to datetime according to resolution . <EoL>
<BoL> Update Index attributes ( e.g . freq ) depending on op <EoL>
<BoL> Return Index or ndarray filled with NaT which has the same length as the caller . <EoL>
<BoL> Calculate datetime bounds for parsed time string and its resolution . <EoL>
<BoL> *this is an internal non-public method* <EoL>
<BoL> subtraction of two DatetimeIndexes <EoL>
<BoL> Subtract pd.NaT from self <EoL>
<BoL> Return a summarized representation <EoL>
<BoL> return an array repr of this object , potentially casting to object <EoL>
<BoL> convert to object if we are a categorical <EoL>
<BoL> Validate that a frequency is compatible with the values of a given DatetimeIndex or TimedeltaIndex <EoL>
<BoL> Returns the indices of the maximum values along an axis . See ` numpy.ndarray.argmax ` for more information on the ` axis ` parameter . <EoL>
<BoL> Returns the indices of the minimum values along an axis . See ` numpy.ndarray.argmin ` for more information on the ` axis ` parameter . <EoL>
<BoL> Return the integer indicies that would sort the index . <EoL>
<BoL> Return the day names of the DateTimeIndex with specified locale . <EoL>
<BoL> Make a new DatetimeIndex with passed location ( s ) deleted . <EoL>
<BoL> Indicate duplicate index values . <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> Get integer location for requested label <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you know what you 're doing <EoL>
<BoL> Return ` Index ` data as an ` numpy.ndarray ` . <EoL>
<BoL> Returns index locations of index values at particular time of day ( e.g . 9:30AM ) . <EoL>
<BoL> Make new Index inserting new item at location <EoL>
<BoL> Specialized intersection for DatetimeIndex objects . May be much faster than Index.intersection <EoL>
<BoL> Compute boolean array of whether each index value is found in the passed set of values <EoL>
<BoL> Return the maximum value of the Index or maximum along an axis . <EoL>
<BoL> Return the minimum value of the Index or minimum along an axis . <EoL>
<BoL> Return the month names of the DateTimeIndex with specified locale . <EoL>
<BoL> Convert times to midnight . <EoL>
<BoL> Analogous to ndarray.repeat <EoL>
<BoL> Specialized shift which produces a DatetimeIndex <EoL>
<BoL> Return indexer for specified label slice . Index.slice_indexer , customized to handle time slicing . <EoL>
<BoL> Snap time stamps to nearest occurring frequency <EoL>
<BoL> Return sorted copy of Index <EoL>
<BoL> Convert DatetimeIndex to Float64Index of Julian Dates . 0 Julian date is noon January 1 , 4713 BC . http : //en.wikipedia.org/wiki/Julian_day <EoL>
<BoL> Cast to PeriodIndex at a particular frequency . <EoL>
<BoL> Calculate TimedeltaIndex of difference between index values and index converted to periodIndex at specified freq . Used for vectorized offsets <EoL>
<BoL> Return DatetimeIndex as object ndarray of datetime.datetime objects <EoL>
<BoL> Create a Series with both index and values equal to the index keys useful with map for returning an indexer based on an index <EoL>
<BoL> return a list of the underlying data <EoL>
<BoL> Convert tz-aware DatetimeIndex from one time zone to another . <EoL>
<BoL> Localize tz-naive DatetimeIndex to tz-aware DatetimeIndex . <EoL>
<BoL> Specialized union for DatetimeIndex objects . If combine overlapping ranges with the same DateOffset , will be much faster than Index.union <EoL>
<BoL> A bit of a hack to accelerate unioning a collection of indexes <EoL>
<BoL> Convert comma separated list of column names and column ranges to a list of 0-based column indexes . <EoL>
<BoL> close io if necessary <EoL>
<BoL> Convert numpy types to Python types for the Excel writers . <EoL>
<BoL> checks that path 's extension against the Writer 's supported extensions . If it is n't supported , raises UnsupportedFiletypeError . <EoL>
<BoL> synonym for save , to make it more file-like <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> add in comparison methods <EoL>
<BoL> Subclasses need to override this only if the process of casting data from some accepted dtype to the internal dtype ( s ) bears the risk of truncation ( e.g . float to int ) . <EoL>
<BoL> Convert value to be insertable to ndarray <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> we require the we have a dtype compat for the values if we are passed a non-dtype compat , then coerce using the constructor <EoL>
<BoL> Make new Index with passed location ( -s ) deleted <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> we always want to get an index value , never a value <EoL>
<BoL> Make new Index inserting new item at location . Follows Python list.append semantics for negative values <EoL>
<BoL> Map values using input correspondence ( a dict , Series , or function ) . <EoL>
<BoL> Return the maximum value of the Index . <EoL>
<BoL> Return the minimum value of the Index . <EoL>
<BoL> given an object and the specifications , setup the internal grouper for this particular specification <EoL>
<BoL> check for existence of this key can match the exact pathname or the pathnm w/o the leading '/ ' <EoL>
<BoL> allow attribute access to get stores <EoL>
<BoL> validate / deprecate formats ; return the new kwargs <EoL>
<BoL> Close the PyTables file handle <EoL>
<BoL> Create a pytables index on the table <EoL>
<BoL> Force all buffered modifications to be written to disk . <EoL>
<BoL> Retrieve pandas object stored in file <EoL>
<BoL> return the node with the key or None if it does not exist <EoL>
<BoL> return the storer object for a key , raise if not in the file <EoL>
<BoL> eturn a list of all the top-level nodes ( that are not themselves a pandas storage object ) <EoL>
<BoL> print detailed information on the store <EoL>
<BoL> iterate on key- > group <EoL>
<BoL> Return a ( potentially unordered ) list of the keys corresponding to the objects stored in the HDFStore . These are ABSOLUTE path-names ( e.g . have the leading '/ ' <EoL>
<BoL> Open the file in the specified mode <EoL>
<BoL> Store object in HDFStore <EoL>
<BoL> Remove pandas object partially by specifying the where condition <EoL>
<BoL> return a single column from the table . This is generally only useful to select an indexable <EoL>
<BoL> Concatenate to_concat which has the same class <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you know what you 're doing <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> return a boolean if this key is IN the index We *only* accept an Interval <EoL>
<BoL> assert that we all have the same .closed we allow a 0-len index here as well <EoL>
<BoL> we are passed a list-like indexer . Return the indexer for matching intervals . <EoL>
<BoL> actually format my specific types <EoL>
<BoL> Return an indexer for a target IntervalIndex with self <EoL>
<BoL> we need to cast the key , which could be a scalar or an array-like to the type of our subtype <EoL>
<BoL> Verify that the IntervalIndex is valid . <EoL>
<BoL> Return a boolean indicating if the key is IN the index <EoL>
<BoL> Return a new IntervalIndex with passed location ( -s ) deleted <EoL>
<BoL> Determines if two IntervalIndex objects contain the same elements <EoL>
<BoL> Get integer location , slice or boolean mask for requested label . <EoL>
<BoL> Return a new IntervalIndex inserting new item at location . Follows Python list.append semantics for negative values . Only Interval objects and NA can be inserted into an IntervalIndex <EoL>
<BoL> Return an Index of tuples of the form ( left , right ) <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> we categorizing our labels by using the available catgories ( all , not just observed ) excluding any missing ones ( -1 ) ; this is in preparation for sorting , where we need to disambiguate that -1 is not a valid valid <EoL>
<BoL> Return vector of label values for requested level , equal to the length of the index <EoL>
<BoL> validate and return the hash for the provided key <EoL>
<BoL> return a boolean if we need a qualified .info display <EoL>
<BoL> return the number of bytes in the underlying data deeply introspect the level data if deep=True <EoL>
<BoL> Returns True if the name refered to in self.names is duplicated . <EoL>
<BoL> Set new names on index . Each name has to be a hashable type . <EoL>
<BoL> .. versionadded : : 0.20.0 <EoL>
<BoL> convert to object if we are a categorical <EoL>
<BoL> Append a collection of Index options together <EoL>
<BoL> Make new index with passed location deleted <EoL>
<BoL> Compute sorted set difference of two MultiIndex objects <EoL>
<BoL> Make new MultiIndex with passed list of labels deleted <EoL>
<BoL> Return Index with requested level removed . If MultiIndex has only 2 levels , the result will be of Index type not MultiIndex . <EoL>
<BoL> Return True if the levels of both MultiIndex objects are the same <EoL>
<BoL> Determines if two MultiIndex objects have the same labeling information ( the levels themselves do not necessarily have to be the same ) <EoL>
<BoL> fillna is not implemented for MultiIndex <EoL>
<BoL> Convert arrays to MultiIndex <EoL>
<BoL> Make a MultiIndex from the cartesian product of multiple iterables <EoL>
<BoL> Convert list of tuples to MultiIndex <EoL>
<BoL> Return vector of label values for requested level , equal to the length of the index . <EoL>
<BoL> Get location for a label or a tuple of labels as an integer , slice or boolean mask.convert integer indexer to boolean mask or slice if possible <EoL>
<BoL> Get both the location for the requested label ( s ) and the resulting sliced index . <EoL>
<BoL> Get location for a given label/slice/list/mask or a sequence of such as an array of integers . <EoL>
<BoL> For an ordered MultiIndex , compute the slice locations for input labels . <EoL>
<BoL> Make new MultiIndex inserting new item at location <EoL>
<BoL> Form the intersection of two MultiIndex objects , sorting if possible <EoL>
<BoL> Return True if the labels are lexicographically sorted <EoL>
<BoL> create a new MultiIndex from the current that removing unused levels , meaning that they are not expressed in the labels <EoL>
<BoL> Rearrange levels using input order . May not drop or duplicate levels <EoL>
<BoL> Sort MultiIndex at the requested level . The result will respect the original ordering of the associated factor at that level . <EoL>
<BoL> Swap level i with level j . <EoL>
<BoL> Create a DataFrame with the levels of the MultiIndex as columns . <EoL>
<BoL> Return a MultiIndex reshaped to conform to the shapes given by n_repeat and n_shuffle . <EoL>
<BoL> Slice index between two labels / tuples , return new MultiIndex <EoL>
<BoL> Form the union of two MultiIndex objects , sorting if possible <EoL>
<BoL> this is defined as a copy with the same identity <EoL>
<BoL> Returns length of info axis <EoL>
<BoL> Return a string representation for a particular Panel <EoL>
<BoL> handle 2-d slices , equiv to iterating over the other axis <EoL>
<BoL> return the type for the ndim of the result <EoL>
<BoL> return a list of the axis indicies <EoL>
<BoL> return the slice dictionary for these axes <EoL>
<BoL> Get my plane axes indexes : these are already ( as compared with higher level planes ) , as we are returning a DataFrame axes <EoL>
<BoL> Get my plane axes indexes : these are already ( as compared with higher level planes ) , as we are returning a DataFrame axes indexes <EoL>
<BoL> sub-classes to define return a sliced object <EoL>
<BoL> Conform set of _constructor_sliced-like objects to either an intersection of indices / columns or a union . <EoL>
<BoL> Generate ND initialization ; axes are passed as required objects to __init__ <EoL>
<BoL> i : int , slice , or sequence of integers axis : int <EoL>
<BoL> do n't allow a multi reindex on Panel or above ndim <EoL>
<BoL> Return slice of panel along selected axis <EoL>
<BoL> Applies function along axis ( or axes ) of the Panel <EoL>
<BoL> Conform input DataFrame to align with chosen axis pair . <EoL>
<BoL> Return number of observations over requested axis . <EoL>
<BoL> Drop 2D from panel , holding passed axis constant <EoL>
<BoL> Construct Panel from dict of DataFrame objects <EoL>
<BoL> Quickly retrieve single value at ( item , major , minor ) location <EoL>
<BoL> Group data on given axis , returning GroupBy object <EoL>
<BoL> Iterate over ( label , values ) on info axis <EoL>
<BoL> Join items with other Panel either on major and minor axes column <EoL>
<BoL> Return slice of panel along major axis <EoL>
<BoL> Return slice of panel along minor axis <EoL>
<BoL> Round each value in Panel to a specified number of decimal places . <EoL>
<BoL> Quickly set single value at ( item , major , minor ) location <EoL>
<BoL> Shift index by desired number of periods with an optional time freq . The shifted data will not include the dropped periods and the shifted axis will be smaller than the original . This is different from the behavior of DataFrame.shift ( ) <EoL>
<BoL> Swap levels i and j in a MultiIndex on a particular axis <EoL>
<BoL> Write each DataFrame in Panel to a separate excel sheet <EoL>
<BoL> Transform wide format into long ( stacked ) format as DataFrame whose columns are the Panel 's items and whose index is a MultiIndex formed of the Panel 's major and minor axes . <EoL>
<BoL> NOT IMPLEMENTED : do not call this method , as sparsifying is not supported for Panel objects and will raise an error . <EoL>
<BoL> Gets called after a ufunc . Needs additional handling as PeriodIndex stores internal data as int dtype <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> add in comparison methods <EoL>
<BoL> we need to coerce a scalar to a compat for our index type <EoL>
<BoL> Values should be int ordinals ` __new__ ` & ` _simple_new ` cooerce to ordinals and call this method <EoL>
<BoL> wrap Index._get_unique_index to handle NaT <EoL>
<BoL> create the join wrapper methods <EoL>
<BoL> If label is a string or a datetime , cast it to Period.ordinal according to resolution . <EoL>
<BoL> we always want to return a PeriodIndex <EoL>
<BoL> Values can be any type that can be coerced to Periods . Ordinals in an ndarray are fastpath-ed to ` _from_ordinals ` <EoL>
<BoL> return an array repr of this object , potentially casting to object <EoL>
<BoL> Convert the PeriodIndex to the specified frequency ` freq ` . <EoL>
<BoL> where : array of timestamps mask : array of booleans where data is not NA <EoL>
<BoL> Get integer location for requested label <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you know what you 're doing <EoL>
<BoL> Specialized shift which produces an PeriodIndex <EoL>
<BoL> Cast to DatetimeIndex <EoL>
<BoL> Convert tz-aware DatetimeIndex from one time zone to another ( using pytz/dateutil ) <EoL>
<BoL> Localize tz-naive DatetimeIndex to given time zone ( using pytz/dateutil ) , or remove timezone from tz-aware DatetimeIndex <EoL>
<BoL> Conserve RangeIndex type for scalar and slice keys . <EoL>
<BoL> return the length of the RangeIndex <EoL>
<BoL> add in numeric methods , specialized to RangeIndex <EoL>
<BoL> Extended Euclidean algorithms to solve Bezout 's identity : a*x + b*y = gcd ( x , y ) Finds one particular solution for x , y : s , t Returns : gcd , s , t <EoL>
<BoL> Return a list of tuples of the ( attr , formatted_value ) <EoL>
<BoL> return a list of tuples of start , stop , step <EoL>
<BoL> Returns the largest element smaller than or equal to the limit <EoL>
<BoL> Returns the smallest element greater than or equal to the limit <EoL>
<BoL> require dtype to be None or int64 <EoL>
<BoL> Returns the indices that would sort the index and its underlying data . <EoL>
<BoL> Determines if two Index objects contain the same elements . <EoL>
<BoL> create RangeIndex from a range ( py3 ) , or xrange ( py2 ) object <EoL>
<BoL> Form the intersection of two Index objects . Sortedness of the result is not guaranteed <EoL>
<BoL> The maximum value of the RangeIndex <EoL>
<BoL> Memory usage of my values <EoL>
<BoL> The minimum value of the RangeIndex <EoL>
<BoL> Form the union of two Index objects and sorts if possible <EoL>
<BoL> Gets called after any ufunc or other array operations , necessary to pass on the index . <EoL>
<BoL> NumPy calls this method when ufunc is applied <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> Tests whether all elements evaluate True <EoL>
<BoL> Tests whether at least one of elements evaluate True <EoL>
<BoL> Make a copy of the SparseArray . Only the actual sparse values need to be copied . <EoL>
<BoL> Compute sum of non-NA/null observations in SparseArray . If the fill_value is not NaN , the `` sparse '' locations will be included in the observation count . <EoL>
<BoL> Cumulative sum of non-NA/null values . <EoL>
<BoL> return a dense representation <EoL>
<BoL> Mean of non-NA/null values <EoL>
<BoL> Sum of non-NA/null values <EoL>
<BoL> Convert SparseArray to a NumPy array . <EoL>
<BoL> Returns a Series containing counts of unique values . <EoL>
<BoL> Retrieve column or slice from DataFrame <EoL>
<BoL> get new SparseDataFrame applying func to each columns <EoL>
<BoL> Init self from ndarray or list of lists <EoL>
<BoL> Creates a new SparseArray from the input value . <EoL>
<BoL> original pickle format <EoL>
<BoL> Apply a function to a DataFrame that is intended to operate elementwise , i.e . like doing map ( func , series ) for each series in the DataFrame <EoL>
<BoL> Make a copy of this SparseDataFrame <EoL>
<BoL> Return SparseDataFrame of cumulative sums over requested axis . <EoL>
<BoL> Quickly retrieve single value at passed column and index <EoL>
<BoL> Put single value at passed column and index <EoL>
<BoL> Return the contents of the frame as a sparse SciPy COO matrix . <EoL>
<BoL> Convert to dense DataFrame <EoL>
<BoL> Returns a DataFrame with the rows/columns switched . <EoL>
<BoL> Returns a row ( cross-section ) from the SparseDataFrame as a Series object . <EoL>
<BoL> the array interface , return my values <EoL>
<BoL> Gets called after any ufunc or other array operations , necessary to pass on the index . <EoL>
<BoL> Gets called prior to a ufunc ( and after ) <EoL>
<BoL> forward to the array <EoL>
<BoL> forward to the array <EoL>
<BoL> Return the i-th value or values in the SparseSeries by location <EoL>
<BoL> Return an object with absolute value taken . Only applicable to objects that are all numeric <EoL>
<BoL> return my self as a sparse array , do not copy by default <EoL>
<BoL> Combine Series values , choosing the calling Series 's values first . Result index will be the union of the two indexes <EoL>
<BoL> Make a copy of the SparseSeries . Only the actual sparse values need to be copied <EoL>
<BoL> Cumulative sum of non-NA/null values . <EoL>
<BoL> Analogous to Series.dropna . If fill_value=NaN , returns a dense Series <EoL>
<BoL> Create a SparseSeries from a scipy.sparse.coo_matrix . <EoL>
<BoL> Returns value occupying requested label , default to specified missing value if not present . Analogous to dict.get <EoL>
<BoL> Retrieve single value at passed index label <EoL>
<BoL> same as values <EoL>
<BoL> Quickly set single value at passed label . If label is not contained , a new object is created with the label placed at the end of the result index <EoL>
<BoL> Conform sparse values to new SparseIndex <EoL>
<BoL> Create a scipy.sparse.coo_matrix from a SparseSeries with MultiIndex . <EoL>
<BoL> Convert SparseSeries to a Series . <EoL>
<BoL> Necessary for making this object picklable <EoL>
<BoL> add in comparison methods <EoL>
<BoL> Add a timedelta-like , Tick , or TimedeltaIndex-like object to self . <EoL>
<BoL> If label is a string , cast it to timedelta according to resolution . <EoL>
<BoL> Update Index attributes ( e.g . freq ) depending on op <EoL>
<BoL> Make a new TimedeltaIndex with passed location ( s ) deleted . <EoL>
<BoL> Get integer location for requested label <EoL>
<BoL> Fast lookup of value from 1-dimensional ndarray . Only use this if you know what you 're doing <EoL>
<BoL> Make new Index inserting new item at location <EoL>
<BoL> Specialized intersection for TimedeltaIndex objects . May be much faster than Index.intersection <EoL>
<BoL> Return TimedeltaIndex as object ndarray of datetime.timedelta objects <EoL>
<BoL> Return total duration of each element expressed in seconds . <EoL>
<BoL> Specialized union for TimedeltaIndex objects . If combine overlapping ranges with the same DateOffset , will be much faster than Index.union <EoL>
<BoL> Ensure incoming data can be represented as uints . <EoL>
<BoL> Check whether the provided array or dtype is of a boolean dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the Categorical dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the datetime64 dtype . <EoL>
<BoL> Check whether the provided array or dtype is of a float dtype . <EoL>
<BoL> Check whether the provided array or dtype is of an integer dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the object dtype . <EoL>
<BoL> Converts input into a pandas only dtype object or a numpy dtype object . <EoL>
<BoL> Combine list-like of Categorical-like , unioning categories . All categories must have the same dtype . <EoL>
<BoL> True if two arrays , left and right , have equal non-NaN elements , and NaNs in corresponding locations . <EoL>
<BoL> Check if two dtypes are equal . <EoL>
<BoL> Detect missing values for an array-like object . <EoL>
<BoL> This function breaks the time string into lexical units ( tokens ) , which can be parsed by the parser . Lexical units are demarcated by changes in the character set , so any continuous string of letters is considered one unit , any continuous string of numbers is considered one unit . <EoL>
<BoL> Whether the next character is part of a number <EoL>
<BoL> Whether the next character is whitespace <EoL>
<BoL> Whether or not the next character is part of a word <EoL>
<BoL> Hash table-based unique . Uniques are returned in order of appearance . This does NOT sort . <EoL>
<BoL> Specify whether to record warnings and if an alternative module should be used other than sys.modules [ 'warnings ' ] . <EoL>
<BoL> Iterate over elements of the array . <EoL>
<BoL> Length of this array <EoL>
<BoL> Reconstruct an ExtensionArray after factorization . <EoL>
<BoL> Construct a new ExtensionArray from a sequence of scalars . <EoL>
<BoL> Return the indices that would sort this array . <EoL>
<BoL> Cast to a NumPy array with 'dtype ' . <EoL>
<BoL> Fill NA/NaN values using the specified method . <EoL>
<BoL> Compute the ExtensionArray of unique values . <EoL>
<BoL> Check whether 'other ' is equal to self . <EoL>
<BoL> Attempt to construct this type from a string . <EoL>
<BoL> Check if we match 'dtype ' . <EoL>
<BoL> Take elements from an array . <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Rules for CDT equality : 1 ) Any CDT is equal to the string 'category' 2 ) Any CDT is equal to a CDT with categories=None regardless of ordered 3 ) A CDT with ordered=True is only equal to another CDT with ordered=True and identical categories in the same order 4 ) A CDT with ordered= { False , None } is only equal to another CDT with ordered= { False , None } and identical categories , but same order is not required . There is no distinction between False/None . 5 ) Any other comparison returns False <EoL>
<BoL> Return a string representation for a particular Object <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError if it 's not possible <EoL>
<BoL> clear the cache <EoL>
<BoL> Returns a CategoricalDtype with categories and ordered taken from dtype if specified , otherwise falling back to self if unspecified <EoL>
<BoL> Validates that we have good categories <EoL>
<BoL> Validates that we have a valid ordered parameter . If it is not a boolean , a TypeError will be raised . <EoL>
<BoL> Create a new unit if needed , otherwise return from the cache <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError if it 's not possible <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError if its not possible <EoL>
<BoL> Return a boolean if we if the passed type is an actual dtype that we can match ( via string or type ) <EoL>
<BoL> attempt to construct this type from a string , raise a TypeError if its not possible <EoL>
<BoL> Return a boolean if we if the passed type is an actual dtype that we can match ( via string or type ) <EoL>
<BoL> Check if the object is array-like . <EoL>
<BoL> Check whether an array-like is a Categorical instance . <EoL>
<BoL> Check whether the provided array or dtype is of a complex dtype . <EoL>
<BoL> Check whether the provided array or dtype is of the datetime64 dtype . <EoL>
<BoL> Check whether the provided array or dtype is of the datetime64 [ ns ] dtype . <EoL>
<BoL> Check whether an array-like or dtype is of a DatetimeTZDtype dtype . <EoL>
<BoL> Check whether an array-like is a datetime array-like with a timezone component in its dtype . <EoL>
<BoL> Check if the object is dict-like . <EoL>
<BoL> Check whether an array-like is of a pandas extension class instance . <EoL>
<BoL> Check if the object is a file-like object . <EoL>
<BoL> Return True if hash ( obj ) will succeed , False otherwise . <EoL>
<BoL> Check whether the provided array or dtype is of the int64 dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the Interval dtype . <EoL>
<BoL> Check if the object is an iterator . <EoL>
<BoL> Check if the object is list-like . <EoL>
<BoL> Check if the object is a named tuple . <EoL>
<BoL> Check if the object is a number . <EoL>
<BoL> Check whether the provided array or dtype is of a numeric dtype . <EoL>
<BoL> Check whether an array-like is a periodical index . <EoL>
<BoL> Check whether an array-like or dtype is of the Period dtype . <EoL>
<BoL> Check if the object is a regex pattern instance . <EoL>
<BoL> Check if the object can be compiled into a regex pattern instance . <EoL>
<BoL> Check whether the provided array or dtype is of a signed integer dtype . <EoL>
<BoL> Check whether an array-like is a pandas sparse array . <EoL>
<BoL> Check whether the provided array or dtype is of the string dtype . <EoL>
<BoL> Check whether an array-like or dtype is of the timedelta64 dtype . <EoL>
<BoL> Check whether the provided array or dtype is of the timedelta64 [ ns ] dtype . <EoL>
<BoL> Check whether the provided array or dtype is of an unsigned integer dtype . <EoL>
<BoL> Class decorator for creating a class with a metaclass . <EoL>
<BoL> Bind a method to class , python 2 and python 3 compatible . <EoL>
<BoL> Calculate display width considering unicode East Asian Width <EoL>
<BoL> Gets the start , stop , and step parameters from a range object <EoL>
<BoL> import lzma from the std library <EoL>
<BoL> am I little endian <EoL>
<BoL> If 'Series.argmax ' is called via the 'numpy ' library , the third parameter in its signature is 'out ' , which takes either an ndarray or 'None ' , so check if the 'skipna ' parameter is either an instance of ndarray or is None , since 'skipna ' itself should be a boolean <EoL>
<BoL> If 'Series.argmin ' is called via the 'numpy ' library , the third parameter in its signature is 'out ' , which takes either an ndarray or 'None ' , so check if the 'skipna ' parameter is either an instance of ndarray or is None , since 'skipna ' itself should be a boolean <EoL>
<BoL> Checks whether the length of the ` *args ` argument passed into a function has at most ` len ( compat_args ) ` arguments and whether or not all of these elements in ` args ` are set to their default values . <EoL>
<BoL> If 'Categorical.argsort ' is called via the 'numpy ' library , the first parameter in its signature is 'axis ' , which takes either an integer or 'None ' , so check if the 'ascending ' parameter has either integer type or is None , since 'ascending ' itself should be a boolean <EoL>
<BoL> If 'NDFrame.clip ' is called via the numpy library , the third parameter in its signature is 'out ' , which can takes an ndarray , so check if the 'axis ' parameter is an instance of ndarray , since 'axis ' itself should either be an integer or None <EoL>
<BoL> If this function is called via the 'numpy ' library , the third parameter in its signature is 'dtype ' , which takes either a 'numpy ' dtype or 'None ' , so check if the 'skipna ' parameter is a boolean or not <EoL>
<BoL> 'args ' and 'kwargs ' should be empty , except for allowed kwargs because all of their necessary parameters are explicitly listed in the function signature <EoL>
<BoL> Checks whether parameters passed to the **kwargs argument in a function ` fname ` are valid parameters as specified in ` *compat_args ` and whether or not they are set to their default values . <EoL>
<BoL> 'args ' and 'kwargs ' should be empty because all of their necessary parameters are explicitly listed in the function signature <EoL>
<BoL> If this function is called via the 'numpy ' library , the third parameter in its signature is 'axis ' , which takes either an ndarray or 'None ' , so check if the 'convert ' parameter is either an instance of ndarray or is None <EoL>
<BoL> provide compat for construction of an array of strings to a np.array ( ... , dtype=np.datetime64 ( .. ) ) tz-changes in 1.11 that make '2015-01-01 09:00:00Z ' show a deprecation warning , when need to pass '2015-01-01 09:00:00 ' <EoL>
<BoL> provide compat for construction of strings to numpy datetime64 's with tz-changes in 1.11 that make '2015-01-01 09:00:00Z ' show a deprecation warning , when need to pass '2015-01-01 09:00:00 ' <EoL>
<BoL> load a pickle , with a provided encoding <EoL>
<BoL> Bind the name/qualname attributes of the function <EoL>
<BoL> Convert bytes and non-string into Python 3 str <EoL>
<BoL> Helper function to determine if dtype is valid for nsmallest/nlargest methods <EoL>
<BoL> Helper function to concat ` current_indexer ` and ` other_indexer ` depending on ` method ` <EoL>
<BoL> In the case where the params is a mutable sequence ( list or dictionary ) and it may change before this class is called , one may explicitly use a reference to the params rather than using *args or **kwargs which will copy the values and not reference them . <EoL>
<BoL> Update self.params with supplied args . <EoL>
<BoL> ensure that we are arraylike if not already <EoL>
<BoL> routine to ensure that our data is of the correct input dtype for lower-level routines <EoL>
<BoL> reverse of _ensure_data <EoL>
<BoL> Perform array addition that checks for underflow and overflow.Helper function to broadcast arrays / scalars to the desired shape . <EoL>
<BoL> Transform any list-like object in a 1-dimensional numpy array of object dtype . <EoL>
<BoL> Decorator to deprecate a keyword argument of a function . <EoL>
<BoL> difference of n between self , analogous to s-s.shift ( n ) <EoL>
<BoL> Return boolean ndarray denoting duplicate values . <EoL>
<BoL> Check if an object is a pandas extension array type . <EoL>
<BoL> Compute the isin boolean array <EoL>
<BoL> Compute locations of to_match into values <EoL>
<BoL> Returns the mode ( s ) of an array . <EoL>
<BoL> Return a dtype compat na value <EoL>
<BoL> Check whether the array or dtype should be converted to int64 . <EoL>
<BoL> Compute sample quantile or quantiles of the input array . For example , q=0.5 computes the median.Returns the point at the given fraction between a and b , where 'fraction ' must be between 0 and 1 . <EoL>
<BoL> Detect non-missing values for an array-like object . <EoL>
<BoL> Return a fixed frequency PeriodIndex , with day ( calendar ) as the default frequency <EoL>
<BoL> Alter default behavior on how float is formatted in DataFrame . <EoL>
<BoL> Convert argument to a numeric type . <EoL>
<BoL> Convert argument to timedelta <EoL>
<BoL> Return a string representation for a particular object . <EoL>
<BoL> Prevents setting additional attributes <EoL>
<BoL> Factorize an input ` values ` into ` categories ` and ` codes ` . Preserves categorical dtype in ` categories ` . <EoL>
<BoL> A higher-level wrapper over ` _factorize_from_iterable ` . <EoL>
<BoL> utility routine to turn values into codes given the specified categories <EoL>
<BoL> Coerce to a categorical if a series is given . <EoL>
<BoL> Convert a set of codes for to a new set of categories <EoL>
<BoL> coerce the indexer input array to the smallest dtype possible <EoL>
<BoL> Detect terminal size and return tuple = ( width , height ) . <EoL>
<BoL> Check whether an array-like is a datetime-like array-like . <EoL>
<BoL> Check if the object is a sequence of objects . String types are not included as sequences here . <EoL>
<BoL> we might have a array ( or single object ) that is datetime like , and no dtype is passed do n't change the value unless we find a datetime/timedelta set <EoL>
<BoL> Ensures that argument passed in arg_name is of type bool . <EoL>
<BoL> Validate the keyword arguments to 'fillna ' . <EoL>
<BoL> dispatch to apply <EoL>
<BoL> sub-classes to define return a sliced object <EoL>
<BoL> Memory usage of the values <EoL>
<BoL> Returns a boolean indicating if all arguments are None <EoL>
<BoL> Returns a boolean indicating if all arguments are not None <EoL>
<BoL> Returns a boolean indicating if any argument is None <EoL>
<BoL> Returns a boolean indicating if any argument is not None <EoL>
<BoL> Evaluate possibly callable input using obj and kwargs if it is callable , otherwise return as it is <EoL>
<BoL> Returns the count of arguments that are not None <EoL>
<BoL> Helper function to convert datetimelike-keyed dicts to Timestamp-keyed dict <EoL>
<BoL> Return a list with distinct elements of `` objs '' ( different ids ) . Preserves order . <EoL>
<BoL> Slice the info axis of ` obj ` with ` indexer ` . <EoL>
<BoL> Transform label or iterable of labels to array , for use in Index . <EoL>
<BoL> Check if the object is an iterable but not a string . <EoL>
<BoL> Returns a generator consisting of the arguments that are not None <EoL>
<BoL> Apply a function `` func `` to object `` obj `` either by passing obj as the first argument to the function or , in the case that the func is a tuple , interpret the first element of the tuple as a function and pass the obj to that function as a keyword argument whose key is the value of the second element of the tuple . <EoL>
<BoL> Helper function for processing random_state arguments . <EoL>
<BoL> Flatten an arbitrarily nested sequence . <EoL>
<BoL> check if we 're running in an interactive shell <EoL>
<BoL> check if we 're inside an IPython Notebook <EoL>
<BoL> check if we 're inside an an IPython zmq frontend <EoL>
<BoL> check if we 're inside an IPython qtconsole <EoL>
<BoL> we have a full length slice <EoL>
<BoL> we have a null slice <EoL>
<BoL> Find non-trivial slices in `` l '' : return a list of booleans with same length . <EoL>
<BoL> Returns a dictionary with ( element , index ) pairs for each element in the given array/list <EoL>
<BoL> Generates tuples of ranges which cover all True value in mask <EoL>
<BoL> Helper function to standardize a supplied mapping . <EoL>
<BoL> Align a set of terms <EoL>
<BoL> Check a sequence of terms for instances of PandasObject . <EoL>
<BoL> Reconstruct an object given its type , raw value , and possibly empty ( None ) axes . <EoL>
<BoL> wrapper around numpy.result_type which overcomes the NPY_MAXARGS ( 32 ) argument limit <EoL>
<BoL> if we have bytes , decode them to unicode <EoL>
<BoL> Return an evaluated expression . <EoL>
<BoL> Convert an expression for evaluation . <EoL>
<BoL> Run the engine on the expression <EoL>
<BoL> Attempt to prevent foot-shooting in a helpful way . <EoL>
<BoL> Make sure a valid engine is passed . <EoL>
<BoL> Make sure an expression is not an empty string <EoL>
<BoL> Make sure a valid parser is passed . <EoL>
<BoL> Convert an object to an expression . <EoL>
<BoL> Return a partial function with an Op subclass with an operator already passed . <EoL>
<BoL> support a single assignment node , like <EoL>
<BoL> in 3.5 the starargs attribute was changed to be more flexible , # 11097 <EoL>
<BoL> df.index [ 4 ] <EoL>
<BoL> df.index [ slice ( 4,6 ) ] <EoL>
<BoL> Recursively evaluate an expression in Python space . <EoL>
<BoL> Print a generic n-ary operator and its operands using infix notation <EoL>
<BoL> Convert datetimes to a comparable value in an expression . <EoL>
<BoL> Evaluate a binary operation *before* being passed to the engine . <EoL>
<BoL> search order for local ( i.e. , @ variable ) variables : <EoL>
<BoL> Parse an expression <EoL>
<BoL> Get specifically scoped variables from a list of stack frames . <EoL>
<BoL> Add a temporary variable to the scope . <EoL>
<BoL> Resolve a variable name in a possibly local context <EoL>
<BoL> Replace a variable name , with a potentially new value . <EoL>
<BoL> Update the current scope by going back ` level ` levels . <EoL>
<BoL> Filter out AST nodes that are subclasses of `` superclass `` . <EoL>
<BoL> Factory for a type checking function of type `` t `` or tuple of types . <EoL>
<BoL> Return a function that raises a NotImplementedError with a passed node name . <EoL>
<BoL> Return a function to create an op class with its symbol already passed.Return a partial function with an Op subclass with an operator already passed . <EoL>
<BoL> Replace `` & `` with `` and `` and `` | `` with `` or `` so that bitwise precedence is changed to boolean precedence . <EoL>
<BoL> Replace local variables with a syntactically valid name . <EoL>
<BoL> Rewrite the assignment operator for PyTables expressions that use `` = `` as a substitute for `` == `` . <EoL>
<BoL> Decorator to add default implementation of ops . <EoL>
<BoL> Compose 2 or more callables <EoL>
<BoL> Decorator to disallow certain nodes from parsing . Raises a NotImplementedError instead . <EoL>
<BoL> Tokenize a Python source code string . <EoL>
<BoL> Cast an expression inplace . <EoL>
<BoL> Compute the vectorized membership of `` x in y `` if possible , otherwise use Python . <EoL>
<BoL> Compute the vectorized membership of `` x not in y `` if possible , otherwise use Python . <EoL>
<BoL> inplace conform rhs <EoL>
<BoL> convert the expression that is in the term to something that is accepted by pytables <EoL>
<BoL> return the actual ne format <EoL>
<BoL> create and return the op string for this TermValue <EoL>
<BoL> invert the condition <EoL>
<BoL> create and return a new specialized BinOp from myself <EoL>
<BoL> return the actual filter format <EoL>
<BoL> invert the filter <EoL>
<BoL> quote the string if not encoded else encode and return <EoL>
<BoL> Convert string ' r ' to a timedelta object . <EoL>
<BoL> Validate that the where statement is of the right type . <EoL>
<BoL> loose checking if s is a pytables-acceptable expression <EoL>
<BoL> Return a prettier version of obj <EoL>
<BoL> Return the padded hexadecimal id of `` obj `` . <EoL>
<BoL> Replace a number with its hexadecimal representation . Used to tag temporary variables with their calling scope 's id . <EoL>
<BoL> Builds a formatted description of a registered option and prints it <EoL>
<BoL> Retrieves the metadata for a deprecated option , if ` key ` is deprecated . <EoL>
<BoL> Retrieves the option metadata if ` key ` is a registered option . <EoL>
<BoL> Returns True if the given option has been deprecated <EoL>
<BoL> eturns a list of keys matching ` pat ` <EoL>
<BoL> if key id deprecated and a replacement key defined , will return the replacement key , otherwise returns ` key ` as - is <EoL>
<BoL> Checks if ` key ` is a deprecated option and if so , prints a warning . <EoL>
<BoL> contextmanager for multiple invocations of API with a common prefix <EoL>
<BoL> Mark option ` key ` as deprecated , if code attempts to access this option , a warning will be produced , using ` msg ` if given , or a default message if not . if ` rkey ` is given , any access to the key will be re-routed to ` rkey ` . <EoL>
<BoL> Builds a concise listing of available options , grouped by prefix <EoL>
<BoL> Register an option in the package-wide pandas config object <EoL>
<BoL> Try to find the most capable encoding supported by the console . slightly modified from the way IPython handles the same issue . <EoL>
<BoL> Detect if Python is running in a terminal . <EoL>
<BoL> return a view if copy is False , but need to be very careful as the result shape could change ! <EoL>
<BoL> create np.ndarray of specified shape and dtype , filled with values <EoL>
<BoL> given a dtypes and a result set , coerce the result elements to the dtypes <EoL>
<BoL> create a np.ndarray / pandas type of specified shape and dtype filled with values <EoL>
<BoL> Construct a new ndarray , coercing ` values ` to ` dtype ` , preserving NA . <EoL>
<BoL> Find a common data type among the given dtypes . <EoL>
<BoL> interpret the dtype from a scalar or array . This is a convenience routines to infer dtype from a scalar or an array <EoL>
<BoL> infer the dtype from a scalar or array <EoL>
<BoL> interpret the dtype from a scalar <EoL>
<BoL> Change string like dtypes to object for `` DataFrame.select_dtypes ( ) `` . <EoL>
<BoL> Check whether the provided array or dtype is of a timedelta64 or datetime64 dtype . <EoL>
<BoL> return a boolean if we have a nested object , e.g . a Series with 1 or more Series elements <EoL>
<BoL> try to cast the array/value to a datetimelike dtype , converting float nan to iNaT <EoL>
<BoL> try to do platform conversion , allow ndarray or list here <EoL>
<BoL> Convert a python scalar to the appropriate numpy dtype if possible This avoids numpy directly converting according to platform preferences <EoL>
<BoL> Convert string-like and string-like array to convert object dtype . This is to avoid numpy to handle the array as str dtype . <EoL>
<BoL> try to cast to the specified dtype ( e.g . convert back to bool/int or could be an astype of float64- > float32 <EoL>
<BoL> Try to infer an object 's dtype , for use in arithmetic ops <EoL>
<BoL> provide explicit type promotion and coercion <EoL>
<BoL> A safe version of putmask that potentially upcasts the result <EoL>
<BoL> Coerce a string or np.dtype to a pandas or numpy dtype if possible . <EoL>
<BoL> Ensure that an array-like object is a Categorical ( if not already ) . <EoL>
<BoL> Ensure that an array object has a float dtype if possible . <EoL>
<BoL> Get the dtype instance associated with an array or dtype object . <EoL>
<BoL> Get a numpy dtype.type-style object for a dtype object . <EoL>
<BoL> Get the type ( NOT dtype ) instance associated with an array or dtype object . <EoL>
<BoL> Check if the exception raised is an unorderable exception . <EoL>
<BoL> Check whether the dtype is a date-like dtype . Raises an error if invalid . <EoL>
<BoL> Check whether the provided array or dtype is of an integer dtype . <EoL>
<BoL> Check whether an array-like is a datetime array-like or DatetimeIndex . <EoL>
<BoL> Check if we are comparing a datetime-like object to a numeric object.Check if an object has a numeric dtype ( i.e . integer or float ) . <EoL>
<BoL> Check if we are comparing a datetime-like object to an object instance . <EoL>
<BoL> Check whether two arrays have compatible dtypes to do a union . <EoL>
<BoL> Check whether the provided array or dtype is an instance of numpy 's float dtype . <EoL>
<BoL> Check whether the provided array or dtype is of an integer , timedelta64 , or datetime64 dtype . <EoL>
<BoL> Check if the object is list-like , and that all of its elements are also list-like . <EoL>
<BoL> Check if we are comparing a string-like object to a numeric ndarray . <EoL>
<BoL> Check if obj or all elements of list-like is DateOffset <EoL>
<BoL> Check whether an array-like is a periodical array-like or PeriodIndex . <EoL>
<BoL> Check whether an array-like is a scipy.sparse.spmatrix instance . <EoL>
<BoL> Check if the object is a string . <EoL>
<BoL> Check whether the provided array or dtype is of a string-like dtype . <EoL>
<BoL> Concatenate an object/categorical array of arrays , each of which is a single dtype <EoL>
<BoL> provide concatenation of an array of arrays each of which is a single 'normalized ' dtypes ( in that for example , if it 's object , then it is a non-datetimelike and provide a combined dtype for the resulting array that preserves the overall dtype if possible ) <EoL>
<BoL> provide concatenation of an datetimelike array of arrays each of which is a single M8 [ ns ] , datetimet64 [ ns , tz ] or m8 [ ns ] dtype <EoL>
<BoL> concat DatetimeIndex with the same tz all inputs must be DatetimeIndex it is used in DatetimeIndex.append also <EoL>
<BoL> concat all inputs as object . DatetimeIndex , TimedeltaIndex and PeriodIndex are converted to object dtype before concatenation <EoL>
<BoL> Concatenates multiple RangeIndex instances . All members of `` indexes '' must be of type RangeIndex ; result will be RangeIndex if possible , Int64Index otherwise . E.g . : indexes = [ RangeIndex ( 3 ) , RangeIndex ( 3 , 6 ) ] - > RangeIndex ( 6 ) indexes = [ RangeIndex ( 3 ) , RangeIndex ( 4 , 6 ) ] - > Int64Index ( [ 0,1,2,4,5 ] ) <EoL>
<BoL> provide concatenation of an sparse/dense array of arrays each of which is a single dtype <EoL>
<BoL> return appropriate class of DataFrame-like concat if all blocks are SparseBlock , return SparseDataFrame otherwise , return 1st obj <EoL>
<BoL> return appropriate class of Series concat input is either dict or array-like <EoL>
<BoL> return appropriate class of Series . When data is sparse it will return a SparseSeries , otherwise it will return the Series . <EoL>
<BoL> infer the fill value for the nan/NaT from the provided scalar/ndarray/list-like if we are a NaT , return the correct dtyped element to provide proper block construction <EoL>
<BoL> Detect missing values . Treat None , NaN , INF , -INF as null . <EoL>
<BoL> if we have a compatible fill_value and arr dtype , then fill <EoL>
<BoL> Option change callback for na/inf behaviour Choose which replacement for numpy.isnan / -numpy.isfinite is used . <EoL>
<BoL> test whether the object is a null datelike , e.g . Nat but guard against passing a non-scalar <EoL>
<BoL> Return array-like containing only true/non-NaN values , possibly empty . <EoL>
<BoL> return a dict of the counts of the function in BlockManager <EoL>
<BoL> Return ndarray from blocks with specified item order Items must be contained in the blocks <EoL>
<BoL> Check all axes except items <EoL>
<BoL> Update mgr._blknos / mgr._blklocs . <EoL>
<BoL> Slice/take blocks along axis=0 . <EoL>
<BoL> Convert the blockmanager data into an numpy array . <EoL>
<BoL> return a new manager with the blocks <EoL>
<BoL> Join together blocks having same dtype <EoL>
<BoL> Make deep or shallow copy of BlockManager <EoL>
<BoL> Delete selected item ( items if non-unique ) in-place . <EoL>
<BoL> get a cross sectional for a given location in the items ; handle dups <EoL>
<BoL> Return values for selected item ( ndarray or BlockManager ) . <EoL>
<BoL> Retrieve single item <EoL>
<BoL> Return the data as a SingleBlockManager if fastpath=True and possible <EoL>
<BoL> Insert item at selected position . <EoL>
<BoL> Return True if more than one block with the same dtype <EoL>
<BoL> return an empty BlockManager with the items axis of len 0 <EoL>
<BoL> Rename one of axes . <EoL>
<BoL> a 2d-nd reshape operation on a BlockManager <EoL>
<BoL> Set new item in-place . Does not consolidate . Adds new Block if not contained in the current set of items if check , then validate that we are not setting the same data in-place <EoL>
<BoL> Take items along any axis . <EoL>
<BoL> Return a dict of str ( dtype ) - > BlockManager <EoL>
<BoL> Return a blockmanager with all blocks unstacked . <EoL>
<BoL> Segregate Series based on type and coerce into matrices . Needs to handle a lot of exceptional cases . <EoL>
<BoL> Ensure that we have an index from some index-like object <EoL>
<BoL> Construct an index from sequences of data . <EoL>
<BoL> extract from a masked rec array and create the manager <EoL>
<BoL> Return list of arrays , columns <EoL>
<BoL> if we are index sliceable , then return my slicer , otherwise return None <EoL>
<BoL> Argument handler for mixed index , columns / axis functions <EoL>
<BoL> Checks whether the frame should be truncated . If so , slices the frame up . <EoL>
<BoL> Render a DataFrame to a list of columns ( as lists of strings ) . <EoL>
<BoL> Render a DataFrame to a html table . <EoL>
<BoL> Render a DataFrame to a console-friendly tabular output . <EoL>
<BoL> convert rhs to meet lhs dims if input is list , tuple or np.ndarray <EoL>
<BoL> Return a tuple of the doc parms . <EoL>
<BoL> require integer args ( and convert to label arguments ) <EoL>
<BoL> convert a range argument <EoL>
<BoL> Convert indexing key into something we can use to do actual fancy indexing on an ndarray <EoL>
<BoL> validate that an positional indexer can not enlarge its target will raise if needed , does not modify the indexer externally <EoL>
<BoL> check the key for valid keys across my indexer <EoL>
<BoL> create the reindex map for our objects , raise the _exception if we ca n't create the indexer <EoL>
<BoL> Ensure that key is valid for current indexer . <EoL>
<BoL> Check that indexer can be used to return a result ( e.g . at least one element was found , unless the list of keys was actually empty ) . <EoL>
<BoL> Replaces values in a Series using the fill method specified when no replacement value is given in the replace method <EoL>
<BoL> Outputs rounded and formatted percentiles . <EoL>
<BoL> Return DateOffset object from string or tuple representation or datetime.timedelta object <EoL>
<BoL> Groupby iterator <EoL>
<BoL> add numeric operations to the GroupBy generically <EoL>
<BoL> we create the grouper on instantiation sub-classes may have a different policy <EoL>
<BoL> Shared func to call any / all Cython GroupBy implementations <EoL>
<BoL> Overridden method to join grouped columns in output <EoL>
<BoL> safe get index , translate keys for datelike to underlying repr <EoL>
<BoL> safe get multiple indices , translate keys for datelike to underlying repr <EoL>
<BoL> sub-classes to define return a sliced object <EoL>
<BoL> If we have categorical groupers , then we want to make sure that we have a fully reindex-output to the levels . These may have not participated in the groupings ( e.g . may have all been nan groups ) ; <EoL>
<BoL> Clear group based selection . Used for methods needing to return info on each group regardless of whether a group selection was previously set . <EoL>
<BoL> Create group based selection . Used when selection is not passed directly but instead via a grouper . <EoL>
<BoL> Fast transform path for aggregations <EoL>
<BoL> try to cast the result to our obj original type , we may have roundtripped thru object in the mean-time <EoL>
<BoL> Returns True if all values in the group are truthful , else False <EoL>
<BoL> Returns True if any value in the group is truthful , else False <EoL>
<BoL> Backward fill the values <EoL>
<BoL> Compute count of group , excluding missing values <EoL>
<BoL> Number each item in each group from 0 to the length of that group - 1 . <EoL>
<BoL> Cumulative max for each group <EoL>
<BoL> Cumulative min for each group <EoL>
<BoL> Cumulative product for each group <EoL>
<BoL> Cumulative sum for each group <EoL>
<BoL> Return an expanding grouper , providing expanding functionality per group <EoL>
<BoL> Forward fill the values <EoL>
<BoL> Return a copy of a DataFrame excluding elements from groups that do not satisfy the boolean criterion specified by func . <EoL>
<BoL> Constructs NDFrame from group with provided name <EoL>
<BoL> Returns first n rows of each group . <EoL>
<BoL> Compute mean of groups , excluding missing values <EoL>
<BoL> Compute median of groups , excluding missing values <EoL>
<BoL> Number each group from 0 to the number of groups - 1 . <EoL>
<BoL> Take the nth row from each group if n is an int , or a subset of rows if n is a list of ints . <EoL>
<BoL> Return DataFrame with number of distinct observations per group for each column . <EoL>
<BoL> Compute sum of values , excluding missing values For multiple groupings , the result index will be a MultiIndex <EoL>
<BoL> Provide resampling when using a TimeGrouper Return a new grouper with our resampler appended <EoL>
<BoL> Return a rolling grouper , providing rolling functionality per group <EoL>
<BoL> Compute standard error of the mean of groups , excluding missing values <EoL>
<BoL> Shift each group by periods observations <EoL>
<BoL> Compute group sizes <EoL>
<BoL> Compute standard deviation of groups , excluding missing values <EoL>
<BoL> Returns last n rows of each group <EoL>
<BoL> Compute variance of groups , excluding missing values <EoL>
<BoL> Shared function for ` pad ` and ` backfill ` to call Cython method <EoL>
<BoL> Compute count of group , excluding missing values <EoL>
<BoL> return a pass thru <EoL>
<BoL> fast version of transform , only applicable to builtin/cythonizable functions <EoL>
<BoL> common agg/transform wrapping logic <EoL>
<BoL> Compute count of group , excluding missing values <EoL>
<BoL> Return a copy of a Series excluding elements from groups that do not satisfy the boolean criterion specified by func . <EoL>
<BoL> Returns number of unique elements in the group <EoL>
<BoL> Calculate percent change of each value to previous entry in group <EoL>
<BoL> if we define an builtin function for this argument , return it , otherwise return the arg <EoL>
<BoL> Groupby iterator <EoL>
<BoL> Compute group sizes <EoL>
<BoL> Groupby iterator <EoL>
<BoL> Aggregate using input function or dict of { column - > function } <EoL>
<BoL> set / reset the _group_selection_context <EoL>
<BoL> Yields all GroupBy member defs for DataFrame/Series names in _whitelist.def % ( name ) s ( % ( sig ) s ) : \ '' '' '' % ( doc ) s \ '' '' '' f = % ( self ) s.__getattr__ ( ' % ( name ) s ' ) return f ( % ( args ) s ) @ property def % ( name ) s ( self ) : \ '' '' '' % ( doc ) s \ '' '' '' return self.__getattr__ ( ' % ( name ) s ' ) <EoL>
<BoL> Group_index is offsets into cartesian product of all possible labels . This space can be huge , so this function compresses it , by computing offsets ( comp_ids ) into the list of unique labels ( obs_group_ids ) . <EoL>
<BoL> reconstruct labels from observed group ids <EoL>
<BoL> Generate bin edge offsets and bin labels for one array using another array which has bin edge values . Both arrays must be sorted . <EoL>
<BoL> For the particular label_list , gets the offsets into the hypothetical list representing the totally ordered cartesian product of all possible label combinations , *as long as* this space fits within int64 bounds ; otherwise , though group indices identify unique combinations of labels , they can not be deconstructed . <EoL>
<BoL> algos.groupsort_indexer implements ` counting sort ` and it is at least O ( ngroups ) , where ngroups = prod ( shape ) shape = map ( len , keys ) that is , linear in the number of combinations ( cartesian product ) of unique values of groupby keys . <EoL>
<BoL> return a diction of { labels } - > { indexers } <EoL>
<BoL> Returns a string repr of the arg list of a func call , with any defaults . <EoL>
<BoL> This is called upon unpickling , rather than the default which doesn't have arguments and breaks __new__ <EoL>
<BoL> Return the data as an array of native Python datetime objects <EoL>
<BoL> Return an array of native ` datetime.timedelta ` objects . <EoL>
<BoL> This method will not function because object is immutable . <EoL>
<BoL> Auxiliary function for : meth : ` str.cat ` . Turn potentially mixed input into a list of Series ( elements without an index must match the length of the calling Series/Index ) . <EoL>
<BoL> Concatenate strings in the Series/Index with given separator . <EoL>
<BoL> Return the Unicode normal form for the strings in the Series/Index . For more information on the forms , see the : func : ` unicodedata.normalize ` . <EoL>
<BoL> Filling left side of strings in the Series/Index with 0 . Equivalent to : meth : ` str.zfill ` . <EoL>
<BoL> If seq is an iterator , put its values into a list . <EoL>
<BoL> Trims zeros and decimal points <EoL>
<BoL> Return a binary method that always raises a TypeError . <EoL>
<BoL> helper for coercing an input scalar or array to i8 <EoL>
<BoL> Return a pickleable state <EoL>
<BoL> Wrap comparison operations to convert datetime-like to datetime64 <EoL>
<BoL> This is called upon unpickling , rather than the default which doesn't have arguments and breaks __new__ <EoL>
<BoL> Timestamp-like = > dt64 <EoL>
<BoL> alias to closest period strings BQ- > Q etc <EoL>
<BoL> This method will not function because object is immutable . <EoL>
<BoL> Return a string representation for this object . <EoL>
<BoL> Find indices where elements of v should be inserted in a to maintain order . <EoL>
<BoL> eturns *copy* of underlying array <EoL>
<BoL> Given an Interval or IntervalIndex , return the corresponding interval with closed bounds . <EoL>
<BoL> helper for interval_range to check type compat of start/end/freq <EoL>
<BoL> helper for interval_range to check if start/end are valid types <EoL>
<BoL> This is called upon unpickling , rather than the default which does n't have arguments and breaks __new__ <EoL>
<BoL> Try to do platform conversion , with special casing for IntervalIndex . <EoL>
<BoL> Transform combination ( s ) of uint64 in one Python integer ( each ) , in a strictly monotonic way ( i.e . respecting the lexicographic order of integer combinations ) : see BaseMultiIndexCodesEngine documentation . <EoL>
<BoL> Transform combination ( s ) of uint64 in one uint64 ( each ) , in a strictly monotonic way ( i.e . respecting the lexicographic order of integer combinations ) : see BaseMultiIndexCodesEngine documentation . <EoL>
<BoL> Wrap comparison operations to convert Period-like to PeriodDtype <EoL>
<BoL> return a boolean whether I can attempt conversion to a TimedeltaIndex <EoL>
<BoL> Wrap comparison operations to convert timedelta-like to timedelta64 <EoL>
<BoL> Timedelta-like = > dt64 <EoL>
<BoL> require they keys to be the same type as the index ( so we don't fallback ) <EoL>
<BoL> Transform a list of keys into a new array ready to be used as axis of the object we return ( e.g . including NaNs ) . <EoL>
<BoL> Translate any partial string timestamp matches in key , returning the new key ( GH 10331 ) <EoL>
<BoL> this is pretty simple as we just have to deal with labels <EoL>
<BoL> much simpler as we only have to deal with our valid types <EoL>
<BoL> Return Series values by list or array of integers <EoL>
<BoL> want nice defaults for background_gradient that do n't break with non-numeric data . But if slice_ is passed go with that . <EoL>
<BoL> Ensurse that a slice does n't reduce to a Series or Scalar . <EoL>
<BoL> Validate that value and indexer are the same length . <EoL>
<BoL> create a filtered indexer that does n't have any missing indexers <EoL>
<BoL> reverse convert a missing indexer , which is a dict return the scalar indexer and a boolean indicating if we converted <EoL>
<BoL> eturn the length of a single non-tuple indexer which could be a slice <EoL>
<BoL> Attempt to convert indices into valid , positive indices . <EoL>
<BoL> We likely want to take the cross-product <EoL>
<BoL> Perform bounds-checking for an indexer . <EoL>
<BoL> require the same dtype as ourselves <EoL>
<BoL> ndim inference and validation . <EoL>
<BoL> no-op on a non-ObjectBlock <EoL>
<BoL> return a slice of my values <EoL>
<BoL> try to cast the result to our original type , we may have roundtripped thru object in the mean-time <EoL>
<BoL> provide coercion to our input arguments <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> Return a list of unstacked blocks of self <EoL>
<BoL> apply the function to my values ; return a block if we are not one <EoL>
<BoL> coerce the current block to a dtype compat for other we will return a block , possibly object , and not raise <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> attempt to coerce any object types to better types return a copy of the block ( if copy = True ) by definition we are not an ObjectBlock here ! <EoL>
<BoL> copy constructor <EoL>
<BoL> Delete given loc ( -s ) from block in-place . <EoL>
<BoL> return block for the diff of the values <EoL>
<BoL> try to downcast each item to the dict of dtypes if present <EoL>
<BoL> evaluate the block ; return result block from the result <EoL>
<BoL> return an outside world format , currently just the ndarray <EoL>
<BoL> Return the internal values used by the DataFrame/SeriesFormatte <EoL>
<BoL> return an internal format , currently just the ndarray this is often overridden to handle to_dense like operations <EoL>
<BoL> Perform __getitem__-like , return result as block . <EoL>
<BoL> return an internal format , currently just the ndarray this should be the pure internal API format <EoL>
<BoL> validate that we have a astypeable to categorical , returns a boolean if we are a categorical <EoL>
<BoL> Create a new block , with type inference propagate any values that are not specified <EoL>
<BoL> Create a ScalarBlock <EoL>
<BoL> compute the quantiles of the <EoL>
<BoL> Modify Block in-place with new item value <EoL>
<BoL> Set the value inplace , returning a a maybe different typed block . <EoL>
<BoL> shift the block by periods , possibly upcast <EoL>
<BoL> split the block per-column , and apply the callable f per-column , return a new block for each . Handle masking which will not change a block unless needed . <EoL>
<BoL> Take values according to indexer and return them as a block.bb <EoL>
<BoL> Unbox to an extension array . <EoL>
<BoL> return a slice of my values <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> Return a list of unstacked blocks of self <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> Set the value inplace , returning a same-typed block . <EoL>
<BoL> Take values according to indexer and return them as a block . <EoL>
<BoL> convert to our native types format , slicing if desired <EoL>
<BoL> these automatically copy , so copy=True has no effect raise on an except if raise == True <EoL>
<BoL> Input validation for values passed to __init__ . Ensure that we have datetime64ns , coercing if necessary . <EoL>
<BoL> Coerce values and other to dtype 'i8 ' . NaN and NaT convert to the smallest i8 , and will correctly round-trip to NaT if converted back in _try_coerce_result . values is always ndarray-like , other may not be <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> return object dtype as boxed values , such as Timestamps/Timedelta <EoL>
<BoL> Modify Block in-place with new item value <EoL>
<BoL> Input validation for values passed to __init__ . Ensure that we have datetime64TZ , coercing if necessary . <EoL>
<BoL> return a slice of my values <EoL>
<BoL> localize and return i8 for the values <EoL>
<BoL> reverse of try_coerce_args <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> copy constructor <EoL>
<BoL> 1st discrete difference <EoL>
<BoL> we internally represent the data as a DatetimeIndex , but for external compat with ndarray , export as a ndarray of Timestamps <EoL>
<BoL> shift the block by periods <EoL>
<BoL> Concatenate list of single blocks of the same type . <EoL>
<BoL> Initialize a non-consolidatable block . <EoL>
<BoL> return a slice of my values ( but densify first ) <EoL>
<BoL> need to to_dense myself ( and always return a ndim sized object ) <EoL>
<BoL> provide coercion to our input arguments <EoL>
<BoL> attempt to coerce any object types to better types return a copy of the block ( if copy = True ) by definition we ARE an ObjectBlock ! ! ! ! ! <EoL>
<BoL> Modify Block in-place with new item value <EoL>
<BoL> Concatenate a list of SingleBlockManagers into a single SingleBlockManager . <EoL>
<BoL> convert the whole block as one <EoL>
<BoL> Delete single item from SingleBlockManager . <EoL>
<BoL> fast path for getting a cross-section return a view of the data <EoL>
<BoL> Return the internal values used by the DataFrame/SeriesFormatte <EoL>
<BoL> return a dense type view <EoL>
<BoL> shift the block by periods <EoL>
<BoL> sparse reindex and return a new block current reindex only works for float64 dtype ! <EoL>
<BoL> Coerce values and other to int64 , with null values converted to iNaT . values is always ndarray-like , other may not be <EoL>
<BoL> reverse of try_coerce_args / try_operate <EoL>
<BoL> pivot to the labels shape <EoL>
<BoL> guarantee the shape of the values to be at least 1 d <EoL>
<BoL> Merge blocks having same dtype , exclude non-consolidating blocks <EoL>
<BoL> return a new extended blocks , givin the result <EoL>
<BoL> given a tuple of shape and a list of Categorical labels , return the expanded label indexer <EoL>
<BoL> Faster version of set ( arr ) for sequences of small numbers . <EoL>
<BoL> array must be SparseSeries or SparseArray <EoL>
<BoL> return an array of blocks that potentially have different dtypes <EoL>
<BoL> Return a new ndarray , try to preserve dtype if possible . <EoL>
<BoL> If possible , reshape ` arr ` to have shape ` new_shape ` , with a couple of exceptions ( see gh-13012 ) : <EoL>
<BoL> return a single array of a block that has a single dtype ; if dtype is not None , coerce to this dtype <EoL>
<BoL> return an array of blocks that potentially have different dtypes ( and are sparse ) <EoL>
<BoL> Apply function to all values found in index . <EoL>
<BoL> Combine multiple concatenation plans into one . <EoL>
<BoL> Concatenate block managers into one . <EoL>
<BoL> Concatenate values from several join units along selected axis . <EoL>
<BoL> raise a helpful message about our construction <EoL>
<BoL> Find the appropriate Block subclass to use for the given values and dtype . <EoL>
<BoL> Return dtype and N/A values to use when concatenating specified units . <EoL>
<BoL> Construct concatenation plan for given block manager and indexers . <EoL>
<BoL> Check if the join units consist of blocks of uniform type that can be concatenated using Block.concat_same_type instead of the generic concatenate_join_units ( which uses ` _concat._concat_compat ` ) . <EoL>
<BoL> If two indices overlap , add suffixes to overlapping entries . <EoL>
<BoL> Reduce join_unit 's shape along item axis to length . <EoL>
<BoL> Convenience function for akima interpolation . xi and yi are arrays of values used to approximate some function f , with `` yi = f ( xi ) `` . <EoL>
<BoL> Convenience function for interpolate.BPoly.from_derivatives <EoL>
<BoL> Get indexers of values that wo n't be filled because they exceed the limits . <EoL>
<BoL> [ True , True , False , True , False ] , 2 - > <EoL>
<BoL> Fill nulls caused by division by zero , casting to a diffferent dtype if necessary . <EoL>
<BoL> if this is a reversed op , then flip x , y <EoL>
<BoL> Return a masking array of same size/shape as arr with entries equaling any member of values_to_mask set to True <EoL>
<BoL> Set results of 0 / 0 or 0 // 0 to np.nan , regardless of the dtypes of the numerator or the denominator . <EoL>
<BoL> return the correct fill value for the dtype of the values <EoL>
<BoL> Return the missing value for ` values ` <EoL>
<BoL> wrap our results if needed <EoL>
<BoL> Returns -1 in the NA case <EoL>
<BoL> Returns -1 in the NA case <EoL>
<BoL> a , b : ndarrays <EoL>
<BoL> Compute the sample excess kurtosis . <EoL>
<BoL> Compute the sample skewness . <EoL>
<BoL> align lhs and rhs Series <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid code duplication . <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid code duplication . <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid code duplication . <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid code duplication . <EoL>
<BoL> For SparseSeries operation , coerce to float64 if the result is expected to have NaN or inf values <EoL>
<BoL> Wrapper function for Series arithmetic operations , to avoid code duplication . <EoL>
<BoL> divmod returns a tuple of like indexed series instead of a single series . <EoL>
<BoL> If the raw op result has a non-None name ( e.g . it is an Index object ) and the name argument is None , then passing name to the constructor will not be enough ; we still need to override the name attribute . <EoL>
<BoL> Find the keyword arguments to pass to numexpr for the given operation . <EoL>
<BoL> Find the appropriate fill value to use when filling in undefined values in the results of the given operation caused by operating on ( generally dividing by ) zero . <EoL>
<BoL> Only DataFrame cares about default_axis , specifically : special methods have default_axis=None and flex methods have default_axis='columns ' . <EoL>
<BoL> Find the appropriate operation-wrappers to use when defining flex/special arithmetic , boolean , and comparison operations with the given class . <EoL>
<BoL> Find the name to attach to this method according to conventions for special and non-special methods . <EoL>
<BoL> Find the operation string , if any , to pass to numexpr for this operation . <EoL>
<BoL> Make the appropriate substitutions for the given operation and class-typ into either _flex_doc_SERIES or _flex_doc_FRAME to return the docstring to attach to a generated method . <EoL>
<BoL> Try to find a name to attach to the result of an operation between a and b . <EoL>
<BoL> Adds the full suite of flex arithmetic methods ( `` pow `` , `` mul `` , `` add `` ) to the class . <EoL>
<BoL> Adds the full suite of special arithmetic methods ( `` __add__ `` , `` __sub__ `` , etc . ) to the class.return an inplace wrapper for this method <EoL>
<BoL> Wrap Series left in the given index_class to delegate the operation op to the index implementation . DatetimeIndex and TimedeltaIndex perform type checking , timezone handling , overflow checks , etc . <EoL>
<BoL> If a non-None fill_value is given , replace null entries in left and right with this value , but only in positions where _one_ of left/right is null , not both . <EoL>
<BoL> Find the appropriate name to pin to an operation result . This result should always be either an Index or a Series . <EoL>
<BoL> Apply the function ` op ` to only non-null points in x and y . <EoL>
<BoL> Makes sure that time and panels are conformable <EoL>
<BoL> Numpy version of itertools.product or pandas.compat.product . Sometimes faster ( for large inputs ) ... <EoL>
<BoL> Returns a multi-index suitable for a panel-like DataFrame <EoL>
<BoL> Reshape long-format data to wide . Generalized inverse of DataFrame.pivot <EoL>
<BoL> Produce 'pivot ' table based on 3 columns of this DataFrame . Uses unique values from index / columns and fills with values . <EoL>
<BoL> Quantile-based discretization function . Discretize variable into equal-sized buckets based on rank or based on sample quantiles . For example 1000 values for 10 quantiles would produce a Categorical object indicating quantile membership for each data point . <EoL>
<BoL> Wide panel to long format . Less flexible but more user-friendly than melt . <EoL>
<BoL> Return index to be used along concatenation axis . <EoL>
<BoL> return the join indexersunlike np.transpose , this returns an array of tuples <EoL>
<BoL> Restore index levels specified as ` on ` parameters <EoL>
<BoL> return the join indexers <EoL>
<BoL> Note : has side effects ( copy/delete key columns ) <EoL>
<BoL> Given a dtype , return a C name like 'int64_t ' or 'double ' <EoL>
<BoL> Upcast a dtype to 'int64_t ' , 'double ' , or 'object ' <EoL>
<BoL> Produce 'pivot ' table based on 3 columns of this DataFrame . Uses unique values from index / columns and fills with values . <EoL>
<BoL> Logic for converting the level number to something we can safely pass to swaplevel : <EoL>
<BoL> Group_index is offsets into cartesian product of all possible labels . This space can be huge , so this function compresses it , by computing offsets ( comp_ids ) into the list of unique labels ( obs_group_ids ) . <EoL>
<BoL> Construct 1-0 dummy variables corresponding to designated axis labels <EoL>
<BoL> See DataFrame.pivot <EoL>
<BoL> Convert DataFrame to Series with multi-level Index . Columns become the second level of the resulting hierarchical index <EoL>
<BoL> if the passed data is of datetime/timedelta type , this method converts it to numeric so that cut method can handle it <EoL>
<BoL> if the passed bin is of datetime/timedelta type , this method converts it to integer <EoL>
<BoL> Infer an appropriate precision for _round_frac <EoL>
<BoL> handles preprocessing for cut where we convert passed input to array , strip the index information and store it separately <EoL>
<BoL> Round the fractional part of the given number <EoL>
<BoL> Compose 2 callables <EoL>
<BoL> install the scalar coercion methods <EoL>
<BoL> sanitize an index type to return an ndarray of the underlying , pass thru a non-Index <EoL>
<BoL> .. deprecated : : % ( version ) s <EoL>
<BoL> Remove null values from array like structure . <EoL>
<BoL> This is intended to be a drop-in replacement for np.argsort which handles NaNs . It adds ascending and na_position parameters . GH # 6399 , # 5231 <EoL>
<BoL> Sort `` values `` and reorder corresponding `` labels `` . <EoL>
<BoL> try to convert to dense <EoL>
<BoL> return an ndarray for our input , in a platform independent manner <EoL>
<BoL> wrap op result to have correct dtype <EoL>
<BoL> Convert ndarray to sparse format <EoL>
<BoL> Conform a set of SparseSeries ( with NaN fill_value ) to a common SparseIndex corresponding to the locations where they all have data <EoL>
<BoL> Only makes sense when fill_value is NaN <EoL>
<BoL> create and return the block manager from a dataframe of series , columns , index <EoL>
<BoL> Convert a scipy.sparse.coo_matrix to a SparseSeries . Use the defaults given in the SparseSeries constructor . <EoL>
<BoL> For arbitrary ( MultiIndexed ) SparseSeries return ( v , i , j , ilabels , jlabels ) where ( v , ( i , j ) ) is suitable for passing to scipy.sparse.coo constructor.Return sparse coords and dense labels for subset levelsReturn OrderedDict of unique labels to number . Optionally sort by label . <EoL>
<BoL> Auxiliary function for : func : ` str_cat ` <EoL>
<BoL> Used in both extract_noexpand and extract_frame <EoL>
<BoL> For each subject string in the Series , extract groups from the first match of regular expression pat . This function is called from str_extract ( expand=True ) , and always returns a DataFrame . <EoL>
<BoL> Find groups in each string in the Series using passed regular expression . This function is called from str_extract ( expand=False ) , and can return Series , DataFrame , or Index . <EoL>
<BoL> Auxiliary function for : meth : ` str.cat ` <EoL>
<BoL> Test if pattern or regex is contained within a string of a Series or Index . <EoL>
<BoL> Count occurrences of pattern in each string of the Series/Index . <EoL>
<BoL> Decode character string in the Series/Index using indicated encoding . Equivalent to : meth : ` str.decode ` in python2 and : meth : ` bytes.decode ` in python3 . <EoL>
<BoL> Encode character string in the Series/Index using indicated encoding . Equivalent to : meth : ` str.encode ` . <EoL>
<BoL> Test if the end of each string element matches a pattern . <EoL>
<BoL> For each subject string in the Series , extract groups from the first match of regular expression pat . <EoL>
<BoL> For each subject string in the Series , extract groups from all matches of regular expression pat . When each subject string in the Series has exactly one match , extractall ( pat ) .xs ( 0 , level='match ' ) is the same as extract ( pat ) . <EoL>
<BoL> Return indexes in each strings in the Series/Index where the substring is fully contained between [ start : end ] . Return -1 on failure . <EoL>
<BoL> Find all occurrences of pattern or regular expression in the Series/Index . <EoL>
<BoL> Extract element from each component at specified position . <EoL>
<BoL> Split each string in the Series by sep and return a frame of dummy/indicator variables . <EoL>
<BoL> Join lists contained as elements in the Series/Index with passed delimiter . <EoL>
<BoL> Determine if each string matches a regular expression . <EoL>
<BoL> Pad strings in the Series/Index with an additional character to specified side . <EoL>
<BoL> Duplicate each string in the Series/Index by indicated number of times . <EoL>
<BoL> Replace occurrences of pattern/regex in the Series/Index with some other string . Equivalent to : meth : ` str.replace ` or : func : ` re.sub ` . <EoL>
<BoL> Split each string in the Series/Index by the given delimiter string , starting at the end of the string and working to the front . Equivalent to : meth : ` str.rsplit ` . <EoL>
<BoL> Slice substrings from each element in the Series/Index <EoL>
<BoL> Replace a positional slice of a string with another value . <EoL>
<BoL> Split strings around given separator/delimiter . <EoL>
<BoL> Test if the start of each string element matches a pattern . <EoL>
<BoL> Strip whitespace ( including newlines ) from each string in the Series/Index . <EoL>
<BoL> Map all characters in the string through the given mapping table . <EoL>
<BoL> Wrap long strings in the Series/Index to be formatted in paragraphs with length less than a given width . <EoL>
<BoL> assemble the unit specified fields from the arg ( DataFrame ) Return a Series for actual parsing <EoL>
<BoL> try to parse the YYYYMMDD/ % Y % m % d format , try to deal with NaT-like , arg is a passed in as an object dtype , but could really be ints/strings with nan-like/or floats ( e.g . with nan ) <EoL>
<BoL> Convert array of dates with a cache and box the result <EoL>
<BoL> Create a cache of unique dates from an array of dates <EoL>
<BoL> Returns date in YYYYMMDD format . <EoL>
<BoL> function for converting excel date to normal date format <EoL>
<BoL> Parse time strings to time objects using fixed strptime formats ( `` % H : % M '' , `` % H % M '' , `` % I : % M % p '' , `` % I % M % p '' , `` % H : % M : % S '' , `` % H % M % S '' , `` % I : % M : % S % p '' , `` % I % M % S % p '' ) <EoL>
<BoL> Convert a list of objects to a timedelta index object . <EoL>
<BoL> provide validation / translation for timedelta short units <EoL>
<BoL> Hash a Categorical by hashing its categories , and then mapping the codes to the hashes <EoL>
<BoL> Hash scalar value <EoL>
<BoL> Given a 1d array , return an array of deterministic integers . <EoL>
<BoL> Hash a single tuple efficiently <EoL>
<BoL> Hash an MultiIndex / list-of-tuples efficiently <EoL>
<BoL> provide a nice str repr of our rolling object <EoL>
<BoL> Rolling statistical measure using supplied function . Designed to be used with passed-in Cython array-based functions . <EoL>
<BoL> center the result in the window <EoL>
<BoL> resample according to the how , return a new object <EoL>
<BoL> split data into blocks & return conformed data <EoL>
<BoL> Return index as ndarrays <EoL>
<BoL> sub-classes to define return a sliced object <EoL>
<BoL> wrap a single result <EoL>
<BoL> wrap the results <EoL>
<BoL> exponential weighted sample correlation <EoL>
<BoL> exponential weighted sample covariance <EoL>
<BoL> exponential weighted moving average <EoL>
<BoL> exponential weighted moving stddev <EoL>
<BoL> exponential weighted moving variance <EoL>
<BoL> validate & return window frequency <EoL>
<BoL> validate on is monotonic <EoL>
<BoL> validate that on is monotonic ; we do n't care for groupby.rolling because we have already validated at a higher level <EoL>
<BoL> Applies a moving window of type `` window_type `` on the data . <EoL>
<BoL> provide validation for our window type , return the window we have already been validated <EoL>
<BoL> Backwards compatible alias for `` HDFStore `` <EoL>
<BoL> Infer the most likely frequency given the input index . If the frequency is uncertain , a warning will be printed . <EoL>
<BoL> Read text from clipboard and pass to read_table . See read_table for the full argument list <EoL>
<BoL> Load a feather-format object from the file path <EoL>
<BoL> Read from the store , close it if we opened it . <EoL>
<BoL> Read HTML tables into a `` list `` of `` DataFrame `` objects . <EoL>
<BoL> Load msgpack pandas object from the specified file path <EoL>
<BoL> Load a parquet object from the file path , returning a DataFrame . <EoL>
<BoL> Load pickled pandas object ( or any object ) from file . <EoL>
<BoL> msgpack ( serialize ) object to input file path <EoL>
<BoL> Pickle ( serialize ) object to file . <EoL>
<BoL> Attempt to write text representation of object to the system clipboard The clipboard can be then pasted into Excel for example . <EoL>
<BoL> Read in the table of contents for the ZIP file . <EoL>
<BoL> Call the `` close ( ) '' method in case the user forgot . <EoL>
<BoL> Extract the ZipInfo object 'member ' to a physical file on the path targetpath . <EoL>
<BoL> Replace bad characters and remove trailing dots from parts . <EoL>
<BoL> Check for errors before writing a file to the archive . <EoL>
<BoL> Close the file , and for mode ' w ' , ' x ' and ' a ' write the ending records . <EoL>
<BoL> Extract a member from the archive to the current working directory , using its full name . <EoL>
<BoL> Extract all members from the archive to the current working directory . <EoL>
<BoL> Return the instance of ZipInfo given 'name ' . <EoL>
<BoL> Return a list of class ZipInfo instances for files in the archive . <EoL>
<BoL> Return a list of file names in the archive . <EoL>
<BoL> Return file-like object for 'name ' . <EoL>
<BoL> Print a table of contents for the zip file . <EoL>
<BoL> Return file bytes for name . <EoL>
<BoL> Set default password for encrypted files . <EoL>
<BoL> Read all the files and check the CRC . <EoL>
<BoL> Write a file into the archive . <EoL>
<BoL> Return the argument with an initial component of ~ or ~user replaced by that user 's home directory . <EoL>
<BoL> Get the compression method for filepath_or_buffer . <EoL>
<BoL> Check to see if a URL has a valid protocol . <EoL>
<BoL> Attempt to convert a path-like object to a string . <EoL>
<BoL> converts an absolute native path to a FILE URL . <EoL>
<BoL> Check for an s3 , s3n , or s3a url <EoL>
<BoL> OS-specific conversion from a file system path to a relative URL of the 'file ' scheme ; not recommended for general use . <EoL>
<BoL> Converts lists of lists/tuples into DataFrames with proper type inference and optional ( e.g . string to datetime ) conversion . Also enables iterating lazily over chunks of large files <EoL>
<BoL> Convert `` alignment_dict `` to an openpyxl v2 Alignment object <EoL>
<BoL> Convert `` border_dict `` to an openpyxl v2 Border object <EoL>
<BoL> Convert `` color_spec `` to an openpyxl v2 Color object <EoL>
<BoL> Convert `` fill_dict `` to an openpyxl v2 Fill object <EoL>
<BoL> Convert `` font_dict `` to an openpyxl v2 Font object <EoL>
<BoL> Convert `` number_format_dict `` to an openpyxl v2.1.0 number format initializer . <EoL>
<BoL> Convert `` protection_dict `` to an openpyxl v2 Protection object . <EoL>
<BoL> Convert `` side_spec `` to an openpyxl v2 Side object <EoL>
<BoL> Convert `` stop_seq `` to a list of openpyxl v2 Color objects , suitable for initializing the `` GradientFill `` `` stop `` parameter . <EoL>
<BoL> converts a style_dict to an openpyxl style object <EoL>
<BoL> Convert a style_dict to a set of kwargs suitable for initializing or updating-on-copy an openpyxl v2 style object <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> converts a style_dict to an xlsxwriter format dict <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> converts a style_dict to an xlwt style object <EoL>
<BoL> Save workbook to disk . <EoL>
<BoL> Forward fills blank entries in row , but only inside the same parent index <EoL>
<BoL> ( header , new_data ) for header rows in MultiIndex parsing <EoL>
<BoL> Adds engine to the excel writer registry . <EoL>
<BoL> Write a DataFrame to the feather-format <EoL>
<BoL> Return console size as tuple = ( width , height ) . <EoL>
<BoL> we by definition have DO NOT have a TZ <EoL>
<BoL> we by definition have a TZ <EoL>
<BoL> Formats a number in engineering notation , appending a letter representing the power of 1000 of the original number . Some examples : <EoL>
<BoL> Returns a function to be applied on each value to format it <EoL>
<BoL> Returns the float values converted into strings using the parameters given at initialisation , as a numpy array <EoL>
<BoL> given values and a date_format , return a string format <EoL>
<BoL> Return a formatter function for a range of timedeltas . These will all have the same format argument <EoL>
<BoL> Trims zeros , leaving just one before the decimal points if need be . <EoL>
<BoL> Glues together two sets of strings using the amount of space requested . The idea is to prettify . <EoL>
<BoL> Appends lines to a buffer . <EoL>
<BoL> For each index in each level the function returns lengths of indexes . <EoL>
<BoL> Perform ljust , center , rjust against string or list-like <EoL>
<BoL> internal . pprinter for iterables . you should probably use pprint_thing ( ) rather then calling this directly . <EoL>
<BoL> internal . pprinter for iterables . you should probably use pprint_thing ( ) rather then calling this directly . <EoL>
<BoL> Returns list of tables , potentially removing hidden elements <EoL>
<BoL> Parse the raw data into a list of lists . <EoL>
<BoL> Return a tree-like object that can be used to iterate over the DOM . <EoL>
<BoL> Return all tables from the parsed DOM . <EoL>
<BoL> Return the list of tbody elements from the parsed table element . <EoL>
<BoL> Return the td elements from a row element . <EoL>
<BoL> Return the footer of the table if any . <EoL>
<BoL> Return the header of a table . <EoL>
<BoL> Return the list of row elements from the parsed table element . <EoL>
<BoL> Return the text of an individual DOM node . <EoL>
<BoL> Raises -- -- -- ValueError * If a URL that lxml can not parse is passed . <EoL>
<BoL> Build an xpath expression to simulate bs4 's ability to pass in kwargs to search for attributes when using the lxml parser . <EoL>
<BoL> Get an iterator given an integer , slice or container . <EoL>
<BoL> Choose the parser based on the input flavor . <EoL>
<BoL> Try to read from a url , file or string . <EoL>
<BoL> Replace extra whitespace inside of a string with a single space . <EoL>
<BoL> Create a Table schema from `` data `` . <EoL>
<BoL> Pack object ` o ` and write it to ` stream ` <EoL>
<BoL> Pack object ` o ` and return packed bytes <EoL>
<BoL> Convert strings to complex number instance with specified numpy type . <EoL>
<BoL> convert the numpy values to a list <EoL>
<BoL> Decoder for deserializing numpy data types . <EoL>
<BoL> return my dtype mapping , whether number or name <EoL>
<BoL> return our implementation <EoL>
<BoL> Write a DataFrame to the parquet format . <EoL>
<BoL> Cast values to specified type <EoL>
<BoL> Infer types of values , possibly casting <EoL>
<BoL> Set the columns that should not undergo dtype conversions . <EoL>
<BoL> Alert a user about a malformed row . <EoL>
<BoL> Return a line from buffer , filling buffer if required . <EoL>
<BoL> Checks whether the file begins with the BOM character . <EoL>
<BoL> Try several cases to get lines : <EoL>
<BoL> Sets self._col_indices <EoL>
<BoL> Check if a line is empty or not . <EoL>
<BoL> Wrapper around iterating through ` self.data ` ( CSV source ) . <EoL>
<BoL> Iterate through the lines and remove any that are either empty or contain only one whitespace value <EoL>
<BoL> Read rows from self.f , skipping as specified . <EoL>
<BoL> Workhorse function for processing nested list into DataFrame <EoL>
<BoL> Check whether or not the 'usecols ' parameter is a callable . <EoL>
<BoL> Get the NaN values for a given column . <EoL>
<BoL> Check whether or not the ` columns ` parameter could be converted into a MultiIndex . <EoL>
<BoL> Generic reader of line files . <EoL>
<BoL> return a stringified and numeric for these values <EoL>
<BoL> Checks whether the 'name ' parameter for parsing is either an integer OR float that can SAFELY be cast to an integer without losing accuracy . Raises a ValueError if that is not the case . <EoL>
<BoL> Check if the ` names ` parameter contains duplicates . <EoL>
<BoL> Check whether or not the 'parse_dates ' parameter is a non-boolean scalar . Raises a ValueError if that is the case . <EoL>
<BoL> Validate the 'skipfooter ' parameter . <EoL>
<BoL> Validate the 'usecols ' parameter . <EoL>
<BoL> Validates that all usecols are present in a given list of names . If not , raise a ValueError that shows what usecols are missing . <EoL>
<BoL> return the axis for c <EoL>
<BoL> return a pretty representatgion of myself <EoL>
<BoL> return the metadata pathname for this key <EoL>
<BoL> Create a pytables index on the specified columns note : can not index Time64Col ( ) or ComplexCol currently ; PyTables must be > = 3.0 <EoL>
<BoL> retrieve our attributes <EoL>
<BoL> these are written transposed <EoL>
<BoL> return a list of my index cols <EoL>
<BoL> infer the axes of my storer return a boolean indicating if we have a valid storer or not <EoL>
<BoL> process axes filters <EoL>
<BoL> return a dict of the kinds allowable columns for this object <EoL>
<BoL> create and return the axes sniffed from the table : return boolean for success <EoL>
<BoL> eturn a single column from the table , generally only indexables are interesting <EoL>
<BoL> select coordinates ( row numbers ) from a table ; return the coordinates object <EoL>
<BoL> return the meta data array for this key <EoL>
<BoL> set our table type & indexables <EoL>
<BoL> update our table index info <EoL>
<BoL> set my pandas type & version <EoL>
<BoL> compute and set our version <EoL>
<BoL> validate against an existing table <EoL>
<BoL> take the input data_columns and min_itemize and create a data columns spec <EoL>
<BoL> create / validate metadata <EoL>
<BoL> validate the min_itemisze does n't contain items that are not in the axes this needs data_columns to be defined <EoL>
<BoL> validate that we can store the multi-index ; reset and return the new object <EoL>
<BoL> are we trying to operate on an old version ? <EoL>
<BoL> return a list of my values cols <EoL>
<BoL> we form the data into a 2-d including indexes , values , mask write chunk-by-chunk <EoL>
<BoL> write out a meta data array to the key as a fixed-format Series <EoL>
<BoL> we are going to write this as a frame table <EoL>
<BoL> these are written transposed <EoL>
<BoL> we have n indexable columns , with an arbitrary number of data axes <EoL>
<BoL> we are going to write this as a frame table <EoL>
<BoL> return the data for this obj <EoL>
<BoL> return a pretty representation of myself <EoL>
<BoL> Returns true if any axis is zero length . <EoL>
<BoL> support fully deleting the node in its entirety ( only ) - where specification must be None <EoL>
<BoL> retrieve our attributes <EoL>
<BoL> read an array for the specified node ( off of group <EoL>
<BoL> set our object attributes <EoL>
<BoL> validate against an existing storable <EoL>
<BoL> remove table keywords from kwargs and return raise if any keywords are passed which are not-None <EoL>
<BoL> are we trying to operate on an old version ? <EoL>
<BoL> write a 0-len array <EoL>
<BoL> compare 2 col items <EoL>
<BoL> set the data from this selection ( and convert to the correct dtype if we can ) <EoL>
<BoL> return the PyTables column class for this column <EoL>
<BoL> get the data for this column <EoL>
<BoL> infer this column from the table : create and return a new object <EoL>
<BoL> maybe set a string col itemsize : min_itemsize can be an integer or a dict with this columns name with an integer size <EoL>
<BoL> retrieve the metadata for this columns <EoL>
<BoL> set the data for this column <EoL>
<BoL> set the axis over which I index <EoL>
<BoL> set my state from the passed info <EoL>
<BoL> record the metadata <EoL>
<BoL> set the name of this indexer <EoL>
<BoL> set the position of this column in the Table <EoL>
<BoL> return the data & release the memory <EoL>
<BoL> set/update the info for this indexable with the key/value if there is a conflict raise/warn as needed <EoL>
<BoL> validate that we have the same order as the existing & same dtype <EoL>
<BoL> validate this column : return the compared against itemsize <EoL>
<BoL> validate that kind=category does not change the categories <EoL>
<BoL> set the meta data <EoL>
<BoL> get our object attributes <EoL>
<BoL> set our object attributes <EoL>
<BoL> compare 2 col items <EoL>
<BoL> set the values from this selection : take = take ownership <EoL>
<BoL> return the values & release the memory <EoL>
<BoL> retrieve our attributes <EoL>
<BoL> set the values from this selection : take = take ownership <EoL>
<BoL> set the kind for this column <EoL>
<BoL> set the kind for this column <EoL>
<BoL> where can be a : dict , list , tuple , string <EoL>
<BoL> generate the selection <EoL>
<BoL> generate the selection <EoL>
<BoL> we do n't support start , stop kwds in Sparse <EoL>
<BoL> write it as a collection of individual sparse series <EoL>
<BoL> read the indicies and the indexing array , calculate offset rows and return <EoL>
<BoL> write in a format that we can search later on ( but can not append to ) : write out the indicies and the values using _write_array ( e.g . a CArray ) create an indexing table so that we can search <EoL>
<BoL> we take a string-like that is object dtype and coerce to a fixed size string type <EoL>
<BoL> if we have bytes , decode them to unicode <EoL>
<BoL> Ensure that an index / column name is a str ( python 3 ) or unicode ( python 2 ) ; otherwise they may be np.string dtype . Non-string dtypes are passed through unchanged . <EoL>
<BoL> ensure that the where is a Term or a list of Term this makes sure that we are capturing the scope of variables that are passed create the terms here with a frame_level=2 ( we are 2 levels down ) <EoL>
<BoL> get/create the info for this name <EoL>
<BoL> for a tz-aware type , return an encoded zone <EoL>
<BoL> Check if a given group is a metadata group for a given parent_group . <EoL>
<BoL> coerce the values to a DatetimeIndex if tz is set preserve the input shape if possible <EoL>
<BoL> Simple passthrough to SQLAlchemy connectable <EoL>
<BoL> Infer datatype of the Series col . <EoL>
<BoL> Make the DataFrame 's column types align with the SQL table column types . <EoL>
<BoL> Return a list of SQL statements that creates a table reflecting the structure of a DataFrame . The first entry will be a CREATE TABLE statement while the rest will be CREATE INDEX statements . <EoL>
<BoL> Convert SQL and params args to DBAPI2.0 compliant format . <EoL>
<BoL> Returns a SQLAlchemy engine from a URI ( if con is a string ) else it just return con without modifying it . <EoL>
<BoL> Force non-datetime columns to be read as such . Supports both string formatted and integer timestamp columns . <EoL>
<BoL> Execute the given SQL query using the provided connection object . <EoL>
<BoL> Get the SQL db table schema for the given frame . <EoL>
<BoL> Check if DataBase has named table . <EoL>
<BoL> enter context manager <EoL>
<BoL> exit context manager <EoL>
<BoL> Map between numpy and state dtypes <EoL>
<BoL> close the handle if its open <EoL>
<BoL> Returns data label of Stata file <EoL>
<BoL> Reads lines from Stata file and returns as dataframe <EoL>
<BoL> Returns a dict , associating each variable name a dict , associating each value its corresponding label <EoL>
<BoL> Returns variable labels as a dict , associating each variable name with corresponding label <EoL>
<BoL> Python 3 compatibility shim <EoL>
<BoL> Generates the binary blob of GSOs that is written to the dta file . <EoL>
<BoL> Generates the GSO lookup table for the DataFRame <EoL>
<BoL> Python 3 compatibility shim <EoL>
<BoL> Checks column names to ensure that they are valid Stata column names . This includes checks for : * Non-string names * Stata keywords * Variables that start with numbers * Variables with names that are too long <EoL>
<BoL> Close the file if it was created by the writer . <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> Check for categorical columns , retain categorical information for Stata file and convert categorical data to int <EoL>
<BoL> No-op , forward compatibility <EoL>
<BoL> Helper to call encode before writing to file for Python 3 compat . <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> Write 5 zeros for expansion fields <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> No-op , future compatibility <EoL>
<BoL> Convert columns to StrLs if either very large or in the convert_strl variable <EoL>
<BoL> Surround val with < tag > < /tag > <EoL>
<BoL> Update map location for tag with file position <EoL>
<BoL> Update column names for conversion to strl if they might have been changed to comply with Stata naming rules <EoL>
<BoL> No-op in dta 117+ <EoL>
<BoL> Write the file heade <EoL>
<BoL> Called twice during file write . <EoL>
<BoL> Checks the dtypes of the columns of a pandas DataFrame for compatibility with the data types and ranges supported by Stata , and converts if necessary . <EoL>
<BoL> Converts from one of the stata date formats to a type in TYPE_MAP <EoL>
<BoL> Convert from datetime to SIF . http : //www.stata.com/help.cgi ? datetime <EoL>
<BoL> Converts dtype types to stata types . <EoL>
<BoL> Converts dtype types to stata types . <EoL>
<BoL> Open a binary file or no-op if file-like <EoL>
<BoL> Takes a char string and pads it with null bytes until it 's length chars <EoL>
<BoL> Takes a bytes instance and pads it with null bytes until it 's length chars . <EoL>
<BoL> Convert from SIF to datetime . <EoL>
<BoL> Return business hours in a day by seconds . <EoL>
<BoL> If n is positive , return tomorrow 's business day opening time . Otherwise yesterday 's business day 's opening time . <EoL>
<BoL> Slight speedups using calculated values <EoL>
<BoL> If n is positive , return yesterday 's business day opening time . Otherwise yesterday business day 's opening time . <EoL>
<BoL> Roll provided date backward to next offset only if not on offset <EoL>
<BoL> Roll provided date forward to next offset only if not on offset <EoL>
<BoL> oll ` other ` back to the most recent date that was on a fiscal year end . Return the date of that year-end , the number of full quarters elapsed between that year-end and other , and the remaining Timedelta since the most recent quarter-end . <EoL>
<BoL> Find the day in the same month as other that has the same weekday as self.weekday and is the last such day in the month . <EoL>
<BoL> Add days portion of offset to DatetimeIndex i <EoL>
<BoL> Add days portion of offset to DatetimeIndex i <EoL>
<BoL> Handle specific apply logic for child classes <EoL>
<BoL> Apply the correct day for each date in i <EoL>
<BoL> Return an array with the correct n for each date in i . <EoL>
<BoL> Add self to the given DatetimeIndex , specialized for case where self.weekday is non-null . <EoL>
<BoL> Find the day in the same month as other that has the same weekday as self.weekday and is the self.week'th such day in the month . <EoL>
<BoL> This method was ported from the work done by GM Arts , on top of the algorithm by Claus Tondering , which was based in part on the algorithm of Ouding ( 1940 ) , as quoted in `` Explanatory Supplement to the Astronomical Almanac '' , P. Kenneth Seidelmann , editor . <EoL>
<BoL> Increment the datetime ` other ` by the given number of days , retaining the time-portion of the datetime . <EoL>
<BoL> Return the : class : ` ~matplotlib.units.AxisInfo ` for *unit* . <EoL>
<BoL> Set the view limits to include the data range . <EoL>
<BoL> Return the time of day as a formatted string . <EoL>
<BoL> Sets the view limits to the nearest multiples of base that contain the data . <EoL>
<BoL> Convert seconds to 'D days HH : MM : SS.F ' <EoL>
<BoL> Convert : mod : ` datetime ` to the Gregorian date as UTC float days , preserving hours , minutes , seconds and microseconds . Return value is a : func : ` float ` . <EoL>
<BoL> Returns a default spacing between consecutive ticks for annual data . <EoL>
<BoL> Remove pandas ' formatters and converters <EoL>
<BoL> Returns true if the `` label_flags `` indicate there is at least one label for this level . <EoL>
<BoL> Returns the indices where the given period changes . <EoL>
<BoL> Register Pandas Formatters and Converters with matplotlib <EoL>
<BoL> Common post process unrelated to data <EoL>
<BoL> Manage style and color based on column number and its label . Returns tuple of appropriate style and kwds which `` color '' may be added . <EoL>
<BoL> get left ( primary ) or right ( secondary ) axes <EoL>
<BoL> check whether ax has data <EoL>
<BoL> Look for error keyword arguments and return the actual errorbar data or return the error DataFrame/dict <EoL>
<BoL> Common post process for each axes <EoL>
<BoL> Area plot <EoL>
<BoL> Vertical bar plot . <EoL>
<BoL> Make a horizontal bar plot . <EoL>
<BoL> Make a box plot of the DataFrame columns . <EoL>
<BoL> Draw one histogram of the DataFrame 's columns . <EoL>
<BoL> Plot DataFrame columns as lines . <EoL>
<BoL> Generate a pie plot . <EoL>
<BoL> Create a scatter plot with varying marker point size and color . <EoL>
<BoL> merge BoxPlot/KdePlot properties to passed kwds <EoL>
<BoL> Post process for each axes . Overridden in child classes <EoL>
<BoL> Area plot <EoL>
<BoL> Vertical bar plot <EoL>
<BoL> Horizontal bar plot <EoL>
<BoL> Boxplot <EoL>
<BoL> Histogram <EoL>
<BoL> Line plot <EoL>
<BoL> Pie chart <EoL>
<BoL> Returns a random color represented as a list of length 3 <EoL>
<BoL> Helper function to convert DataFrame and Series to matplotlib.table <EoL>
<BoL> Autocorrelation plot for time series . <EoL>
<BoL> Bootstrap plot on mean , median and mid-range statistics . <EoL>
<BoL> Lag plot for time series . <EoL>
<BoL> Plot a multidimensional dataset in 2D . <EoL>
<BoL> Reset the option store to its initial state <EoL>
<BoL> Temporarily set a parameter value using the with statement . Aliasing allowed . <EoL>
<BoL> Return DateOffset object associated with rule name <EoL>
<BoL> Checks whether 'args ' has length of at most 'compat_args ' . Raises a TypeError if that is not the case , similar to in Python when a function is called with too many arguments . <EoL>
<BoL> Check that the keys in ` arg_val_dict ` are mapped to their default values as specified in ` compat_args ` . <EoL>
<BoL> Checks whether 'kwargs ' contains any keys that are not in 'compat_args ' and raises a TypeError if there is one . <EoL>
<BoL> Initialize an _AssertRaisesContextManager instance . <EoL>
<BoL> Check that the Exception raised matches the expected Exception and expected error message regular expression . <EoL>
<BoL> Check to see if we can set a locale without throwing an exception . <EoL>
<BoL> Helper method for our assert_* methods that ensures that the two objects being compared have the right type before proceeding with the comparison . <EoL>
<BoL> Create a function for calling on an array . <EoL>
<BoL> Return a list of normalized locales that do not throw an `` Exception `` when set . <EoL>
<BoL> Generator which can be iterated over to get instances of all the various index classes . <EoL>
<BoL> Generator which can be iterated over to get instances of all the classes which represent time-seires . <EoL>
<BoL> checks attributes are equal . Both objects must have attribute . <EoL>
<BoL> checks classes are equal . <EoL>
<BoL> iter1 , iter2 : iterables that produce elements comparable with assert_almost_equal <EoL>
<BoL> Check that left and right ExtensionArrays are equal . <EoL>
<BoL> Check that the left and right SparseArray are equal . <EoL>
<BoL> Try to connect to the given url . True if succeeds , False if IOError raised <EoL>
<BoL> Decorator to capture stderr in a buffer so that it can be checked ( or suppressed ) during testing . <EoL>
<BoL> Decorator to capture stdout in a buffer so that it can be checked ( or suppressed ) during testing . <EoL>
<BoL> Open a compressed file and return a file object <EoL>
<BoL> Gets a temporary path and agrees to remove on close . <EoL>
<BoL> Checks if the set of unique elements of arr1 and arr2 are equivalent . <EoL>
<BoL> Get all the locales that are available on the system . <EoL>
<BoL> make a length k index or n categories <EoL>
<BoL> make a length k IntervalIndex <EoL>
<BoL> allows a decorator to take optional positional and keyword arguments . Assumes that taking a single , callable , positional argument means that it is decorating a function , i.e . something like this : : <EoL>
<BoL> Temporarily patch an attribute of an object . <EoL>
<BoL> Generate one random byte string . <EoL>
<BoL> Generate an array of byte strings . <EoL>
<BoL> Generate one random unicode string . <EoL>
<BoL> Generate an array of unicode strings . <EoL>
<BoL> Reset the display options for printing and representing objects . <EoL>
<BoL> Write an object to file specified by a py.path LocalPath and read it back <EoL>
<BoL> Write an object to file specified by a pathlib.Path and read it back <EoL>
<BoL> Pickle an object and then read it again . <EoL>
<BoL> Set default encoding ( as given by sys.getdefaultencoding ( ) ) to the given encoding ; restore on exit . <EoL>
<BoL> Context manager for temporarily setting a locale . <EoL>
<BoL> Context manager for temporarily setting a timezone . <EoL>
<BoL> Context manager for running bits of code while emulating an arbitrary stdin encoding . <EoL>
<BoL> Decorator to run the same function multiple times in parallel . <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> See : meth : ` .TypeEngine.coerce_compared_value ` for a description . <EoL>
<BoL> Construct a LargeBinary type . <EoL>
<BoL> Construct a new : class : ` .ColumnDefault ` . <EoL>
<BoL> Wrap callables that do n't accept a context . <EoL>
<BoL> Create a DDL statement . <EoL>
<BoL> Construct an enum . <EoL>
<BoL> internal init for : class : ` .Enum ` and subclasses . <EoL>
<BoL> Return a string based 'column specification ' for this : class : ` .ForeignKey ` . <EoL>
<BoL> Produce a copy of this : class : ` .ForeignKey ` object . <EoL>
<BoL> Return the : class : ` .Column ` in the given : class : ` .Table ` referenced by this : class : ` .ForeignKey ` . <EoL>
<BoL> Return True if the given : class : ` .Table ` is referenced by this : class : ` .ForeignKey ` . <EoL>
<BoL> Construct a : class : ` .types.JSON ` type . <EoL>
<BoL> Create a : class : ` .Unicode ` object . <EoL>
<BoL> Suggest a type for a 'coerced ' Python value in an expression . <EoL>
<BoL> Creates this sequence in the database . <EoL>
<BoL> Drops this sequence from the database . <EoL>
<BoL> Return a : class : ` .next_value ` function element which will render the appropriate increment function for this : class : ` .Sequence ` within any SQL expression . <EoL>
<BoL> Construct a ThreadLocalMetaData . <EoL>
<BoL> Bind to a Connectable in the caller 's thread . <EoL>
<BoL> Dispose all bound engines , in all thread contexts . <EoL>
<BoL> True if there is a bind for this thread . <EoL>
<BoL> Construct a : class : ` .TypeDecorator ` . <EoL>
<BoL> Provide a bound value processing function for the given : class : ` .Dialect ` . <EoL>
<BoL> Provide a result value processing function for the given : class : ` .Dialect ` . <EoL>
<BoL> Create a Unicode-converting Text type . <EoL>
<BoL> Return an immutable proxy for this : class : ` .Properties ` . <EoL>
<BoL> Return the contents of this : class : ` .KeyedTuple ` as a dictionary . <EoL>
<BoL> Return a list of string key names for this : class : ` .KeyedTuple ` . <EoL>
<BoL> Construct a new : class : ` .ScopedRegistry ` . <EoL>
<BoL> Clear the current scope , if any . <EoL>
<BoL> Return True if an object is present in the current scope . <EoL>
<BoL> Set the value for the current scope . <EoL>
<BoL> Return the contents of this : class : ` .KeyedTuple ` as a dictionary . <EoL>
<BoL> Generator : ( ( id ( o ) , o ) for o in iterable ) . <EoL>
<BoL> Given an iterator of which further sub-elements may also be iterators , flatten the sub-elements into a single iterator . <EoL>
<BoL> eturn True if any items of set\_ are present in iterable . <EoL>
<BoL> Copy the given dict and update with the given values . <EoL>
<BoL> Ensure basic interface compliance for an instance or dict of callables.A callable-holding shell . <EoL>
<BoL> Coerce to integer . <EoL>
<BoL> Return a callable that will evaluate a string as boolean , or one of a set of `` alternate '' string values . <EoL>
<BoL> Chop extraneous lines off beginning and end of a traceback . <EoL>
<BoL> Return an unordered sequence of all classes related to cls . <EoL>
<BoL> If 'key ' is present in dict 'kw ' , coerce its value to type 'type\_ ' if necessary . If 'flexi_bool ' is True , the string ' 0 ' is considered false when coercing to boolean . <EoL>
<BoL> Implement contextlib.nested , mostly for unit tests . <EoL>
<BoL> Create a base class with a metaclass . <EoL>
<BoL> Instantiate cls using the __dict__ of obj as constructor arguments . <EoL>
<BoL> Return a threadsafe counter function . <EoL>
<BoL> decode a slice object as sent to __getitem__ . <EoL>
<BoL> A signature-matching decorator factory.\ def % ( name ) s ( % ( args ) s ) : return % ( target ) s ( % ( fn ) s , % ( apply_kw ) s ) <EoL>
<BoL> Decorates a function and issues a deprecation warning on use . <EoL>
<BoL> Wrap a function with a warnings.warn and augmented docstring . <EoL>
<BoL> Return a ( key , value ) iterator for almost any dict-like object . <EoL>
<BoL> Given an instance or class , guess if it is or is acting as one of the basic collection types : list , set and dict . If the __emulates__ property is present , return that preferentially . <EoL>
<BoL> format_argspec_plus with considerations for typical __init__ methods <EoL>
<BoL> Returns a dictionary of formatted , introspected function arguments . <EoL>
<BoL> Produce a __repr__ ( ) based on direct association of the __init__ ( ) specification vs. same-named attributes present . <EoL>
<BoL> Return the argument signature for any callable . <EoL>
<BoL> Return the full set of inherited kwargs for the given ` cls ` . <EoL>
<BoL> Return the set of legal kwargs for the given ` func ` . <EoL>
<BoL> inspect.getargspec with considerations for typical __init__ methods <EoL>
<BoL> Expire all memoized properties for *instance* . <EoL>
<BoL> iterate all the keys and attributes associated with a class , without using getattr ( ) . <EoL>
<BoL> Construct a new named symbol . <EoL>
<BoL> Call the given function given each nonzero bit from n . <EoL>
<BoL> Decorate a method memoize its return value . <EoL>
<BoL> Return True if the two methods are the same implementation . <EoL>
<BoL> Decorate the given function to be a no-op after it is called exactly once . <EoL>
<BoL> Produce a wrapping function for the given cls or classmethod.\ def % ( name ) s ( % ( args ) s ) : return cls ( % ( apply_kw ) s ) <EoL>
<BoL> Parse a dotted identifier with accomodation for quoted names . <EoL>
<BoL> Assign a '_creation_order ' sequence to the given instance . <EoL>
<BoL> Adjust the incoming callable such that a 'self ' argument is not required . <EoL>
<BoL> Issue a warning . <EoL>
<BoL> executes the given function , catches all exceptions and converts to a warning . <EoL>
<BoL> Issue a warning with a paramterized string , limiting the number of registrations . <EoL>
<BoL> Augment functools.update_wrapper ( ) to work with objects with a `` __call__ ( ) `` method . <EoL>
<BoL> Initialize a queue object with a given maximum size . <EoL>
<BoL> Return True if the queue is empty , False otherwise ( not reliable ! ) . <EoL>
<BoL> Return True if the queue is full , False otherwise ( not reliable ! ) . <EoL>
<BoL> Remove and return an item from the queue . <EoL>
<BoL> Remove and return an item from the queue without blocking . <EoL>
<BoL> Put an item into the queue . <EoL>
<BoL> Put an item into the queue without blocking . <EoL>
<BoL> Return the approximate size of the queue ( not reliable ! ) . <EoL>
<BoL> sort the given list of items by dependency . <EoL>
<BoL> Return an : class : ` .Alias ` object . <EoL>
<BoL> Produce a `` BETWEEN `` predicate clause . <EoL>
<BoL> Return the clause `` expression COLLATE collation `` . <EoL>
<BoL> Create a JDBC url from a : class : ` ~sqlalchemy.engine.url.URL ` <EoL>
<BoL> Return kw arg dict to be sent to connect ( ) . <EoL>
<BoL> default dialect importer . <EoL>
<BoL> Need to determine how to get `` LIMIT `` / `` OFFSET `` into a `` UNION `` for Oracle . <EoL>
<BoL> Return the string text of the generated SQL or DDL . <EoL>
<BoL> utility method used for unit tests only . <EoL>
<BoL> Initialize collections related to CTEs only if a CTE is located , to save on the overhead of these collections otherwise . <EoL>
<BoL> special API to support the use case of 'nested result sets <EoL>
<BoL> Rewrite any `` a JOIN ( b JOIN c ) '' expression as `` a JOIN ( select * from b JOIN c ) AS anon '' , to support databases that ca n't parse a parenthesized join correctly ( i.e . sqlite < 3.7.16 ) . <EoL>
<BoL> Produce the internal string representation of this element . <EoL>
<BoL> eturn a dictionary of bind parameter keys and values <EoL>
<BoL> Called when a `` SELECT `` statement has no froms , and no `` FROM `` clause is to be appended . <EoL>
<BoL> Execute this compiled object . <EoL>
<BoL> Oracle does n't like `` FROM table AS alias `` <EoL>
<BoL> Called when building a `` SELECT `` statement , position is just before column list . <EoL>
<BoL> allow dialects to customize how GROUP BY is rendered . <EoL>
<BoL> allow dialects to customize how ORDER BY is rendered . <EoL>
<BoL> Render the value of a bind parameter as a quoted literal . <EoL>
<BoL> Execute this compiled object and return the result's scalar value . <EoL>
<BoL> Provide a hook for MySQL to add LIMIT to the UPDATE <EoL>
<BoL> Provide a hook to override the initial table clause in an UPDATE statement . <EoL>
<BoL> Look for `` LIMIT `` and OFFSET in a select statement , and if so tries to wrap it in a subquery with `` rownum `` criterion . <EoL>
<BoL> Format the remote table clause of a CREATE CONSTRAINT clause . <EoL>
<BoL> Retrieve the server version info from the given connection . <EoL>
<BoL> Create a random two-phase transaction ID . <EoL>
<BoL> Begin a two phase transaction on the given connection . <EoL>
<BoL> Prepare a two phase transaction on the given connection . <EoL>
<BoL> Recover list of uncommitted prepared two phase transaction identifiers on the given connection . <EoL>
<BoL> A convenience hook called before returning the final : class : ` .Engine ` . <EoL>
<BoL> kw arguments can be : SELECT col.column_name , col.data_type , col. % ( char_length_col ) s , col.data_precision , col.data_scale , col.nullable , col.data_default , com.comments\ FROM all_tab_columns % ( dblink ) s col LEFT JOIN all_col_comments % ( dblink ) s com ON col.table_name = com.table_name AND col.column_name = com.column_name AND col.owner = com.owner WHERE col.table_name = : table_name <EoL>
<BoL> Given a URL , return the : class : ` .Dialect ` that will be used . <EoL>
<BoL> kw arguments can be : <EoL>
<BoL> Given a DBAPI connection , return its isolation level . <EoL>
<BoL> Return information about primary keys in ` table_name ` . <EoL>
<BoL> Return a list of temporary view names on the given connection , if supported by the underlying backend . <EoL>
<BoL> eturn a callable which sets up a newly created DBAPI connection . <EoL>
<BoL> Given a DBAPI connection , set its isolation level . <EoL>
<BoL> Provide a database-specific : class : ` .TypeEngine ` object , given the generic object which comes from the types module . <EoL>
<BoL> Execute a string statement on the current cursor , returning a scalar result . <EoL>
<BoL> handle special 'expanding ' parameters , IN tuples that are rendered on a per-parameter basis for an otherwise fixed SQL statement string . <EoL>
<BoL> Initialize execution context for a DDLElement construct . <EoL>
<BoL> Initialize execution context for a ColumnDefault construct . <EoL>
<BoL> Return a dictionary of parameters applied to the current row . <EoL>
<BoL> eturn self.cursor.lastrowid , or equivalent , after an INSERT . <EoL>
<BoL> Return a 'result processor ' for a given type as present in cursor.description . <EoL>
<BoL> Return the DBAPI `` cursor.rowcount `` value , or in some cases an interpreted value . <EoL>
<BoL> Return a result object corresponding to this ExecutionContext . <EoL>
<BoL> Return True if the given identifier requires quoting . <EoL>
<BoL> Escape an identifier . <EoL>
<BoL> Return True if the given identifier requires quoting . <EoL>
<BoL> Canonicalize an escaped identifier . <EoL>
<BoL> Prepare a quoted schema name . <EoL>
<BoL> Prepare a quoted table and schema name . <EoL>
<BoL> Format table name and schema as a tuple . <EoL>
<BoL> Conditionally quote an identifier . <EoL>
<BoL> Quote an identifier . <EoL>
<BoL> Conditionally quote a schema . <EoL>
<BoL> Unpack 'schema.table.column'-like strings into components . <EoL>
<BoL> establish the default outputtypehandler established at the connection level . <EoL>
<BoL> create a two-phase transaction ID . <EoL>
<BoL> Implement iteration protocol . <EoL>
<BoL> Implement the next ( ) protocol . <EoL>
<BoL> Close this ResultProxy . <EoL>
<BoL> Fetch all rows , just like DB-API `` cursor.fetchall ( ) `` . <EoL>
<BoL> Fetch many rows , just like DB-API `` cursor.fetchmany ( size=cursor.arraysize ) `` . <EoL>
<BoL> Fetch one row , just like DB-API `` cursor.fetchone ( ) `` . <EoL>
<BoL> Fetch the first row and then close the result set unconditionally . <EoL>
<BoL> Return the current set of string keys for rows . <EoL>
<BoL> Return the collection of inserted parameters from this execution . <EoL>
<BoL> Return the collection of updated parameters from this execution . <EoL>
<BoL> Return `` lastrow_has_defaults ( ) `` from the underlying : class : ` .ExecutionContext ` . <EoL>
<BoL> Return `` postfetch_cols ( ) `` from the underlying : class : ` .ExecutionContext ` . <EoL>
<BoL> Return `` prefetch_cols ( ) `` from the underlying : class : ` .ExecutionContext ` . <EoL>
<BoL> Fetch the first column of the first row , and close the result set . <EoL>
<BoL> Return `` supports_sane_multi_rowcount `` from the dialect . <EoL>
<BoL> Return `` supports_sane_rowcount `` from the dialect . <EoL>
<BoL> A synonym for the : meth : ` .ARRAY.Comparator.all ` method . <EoL>
<BoL> A synonym for the : meth : ` .ARRAY.Comparator.any ` method . <EoL>
<BoL> Construct an : class : ` ~.postgresql.ENUM ` . <EoL>
<BoL> Look in the 'ddl runner ' for 'memos ' , then note our name in that collection . <EoL>
<BoL> Produce a Postgresql native : class : ` .postgresql.ENUM ` from plain : class : ` .Enum ` . <EoL>
<BoL> Emit `` CREATE TYPE `` for this : class : ` ~.postgresql.ENUM ` . <EoL>
<BoL> Emit `` DROP TYPE `` for this : class : ` ~.postgresql.ENUM ` . <EoL>
<BoL> Construct a new : class : ` .HSTORE ` . <EoL>
<BoL> Return a new : class : ` .CTE ` , or Common Table Expression instance . <EoL>
<BoL> Return a new : class : ` .Insert ` construct which represents an `` INSERT ... FROM SELECT `` statement . <EoL>
<BoL> Set the parameters for the statement . <EoL>
<BoL> Add one or more expressions following the statement keyword , i.e . <EoL>
<BoL> Make use of a : term : ` RETURNING ` clause for the purpose of fetching server-side expressions and defaults . <EoL>
<BoL> Add a : term : ` RETURNING ` or equivalent clause to this statement . <EoL>
<BoL> specify a fixed VALUES clause for an INSERT statement , or the SET clause for an UPDATE . <EoL>
<BoL> Add a table hint for a single table to this INSERT/UPDATE/DELETE statement . <EoL>
<BoL> Construct a : class : ` .JSON ` type . <EoL>
<BoL> Construct a UUID type . <EoL>
<BoL> Compare this : class : ` .ClauseList ` to the given : class : ` .ClauseList ` , including a comparison of all the clause items . <EoL>
<BoL> PostgreSQL-specific form of : class : ` .array_agg ` , ensures return type is : class : ` .postgresql.ARRAY ` and not the plain : class : ` .types.ARRAY ` , unless an explicit `` type_ `` is passed . <EoL>
<BoL> Called when a SELECT statement has no froms , and no FROM clause is to be appended . <EoL>
<BoL> convert the given name to a case insensitive identifier for the backend if it is an all-lowercase name . <EoL>
<BoL> Fetch the oid for schema.table_name.SELECT c.oid FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE ( % s ) AND c.relname = : table_name AND c.relkind in ( ' r ' , ' v ' , 'm ' , ' f ' ) <EoL>
<BoL> Return a list of temporary table names on the given connection , if supported by the underlying backend . <EoL>
<BoL> convert the given name to lowercase if it is detected as case insensitive . <EoL>
<BoL> Return a list of ENUM objects . <EoL>
<BoL> Return a list of FOREIGN TABLE names . <EoL>
<BoL> Return the OID for the given table name . <EoL>
<BoL> Return all view names in ` schema ` . <EoL>
<BoL> Mark a method as generative . <EoL>
<BoL> delete memoized collections when a FromClause is cloned . <EoL>
<BoL> Produce a : class : ` .Alias ` construct against this : class : ` .FunctionElement ` . <EoL>
<BoL> Execute this : class : ` .FunctionElement ` against an embedded 'bind ' . <EoL>
<BoL> Produce a FILTER clause against this function . <EoL>
<BoL> Produce an OVER clause against this function . <EoL>
<BoL> Execute this : class : ` .FunctionElement ` against an embedded 'bind ' and return a scalar value . <EoL>
<BoL> Produce a : func : ` ~.expression.select ` construct against this : class : ` .FunctionElement ` . <EoL>
<BoL> Produce a WITHIN GROUP ( ORDER BY expr ) clause against this function . <EoL>
<BoL> For types that define their return type as based on the criteria within a WITHIN GROUP ( ORDER BY ) expression , called by the : class : ` .WithinGroup ` construct . <EoL>
<BoL> Return a constant : class : ` .Null ` construct . <EoL>
<BoL> May be overridden by subclasses . <EoL>
<BoL> Soft close this : class : ` .ResultProxy ` . <EoL>
<BoL> Return True if this RowProxy contains the given key . <EoL>
<BoL> Return a list of tuples , each tuple containing a key/value pair . <EoL>
<BoL> Return the list of keys as strings represented by this RowProxy . <EoL>
<BoL> Return the bind params for this compiled object . <EoL>
<BoL> Return a : class : ` .Connection ` object . <EoL>
<BoL> Return a : class : ` .Connection ` object which may be part of an ongoing context . <EoL>
<BoL> Executes the given construct and returns a : class : ` .ResultProxy ` . <EoL>
<BoL> Executes and returns the first column of the first row . <EoL>
<BoL> Contruct a new : class : ` .CreateEnginePlugin ` . <EoL>
<BoL> Receive the : class : ` .Engine ` object when it is fully constructed . <EoL>
<BoL> parse and modify dialect kwargs <EoL>
<BoL> parse and modify pool kwargs <EoL>
<BoL> Return the string name of the currently selected schema from the given connection . <EoL>
<BoL> eturn a callable which sets up a newly created DBAPI connection . <EoL>
<BoL> Build DB-API compatible connection arguments . <EoL>
<BoL> Create a two-phase transaction ID . <EoL>
<BoL> Provide an implementation of `` connection.begin ( ) `` , given a DB-API connection . <EoL>
<BoL> Provide an implementation of `` connection.close ( ) `` , given a DBAPI connection . <EoL>
<BoL> Provide an implementation of `` connection.commit ( ) `` , given a DB-API connection . <EoL>
<BoL> Provide an implementation of `` cursor.execute ( statement , parameters ) `` . <EoL>
<BoL> Provide an implementation of `` cursor.executemany ( statement , parameters ) `` . <EoL>
<BoL> Release the named savepoint on a connection . <EoL>
<BoL> Provide an implementation of `` connection.rollback ( ) `` , given a DB-API connection . <EoL>
<BoL> Rollback a connection to the named savepoint . <EoL>
<BoL> Create a savepoint with the given name . <EoL>
<BoL> Return information about check constraints in ` table_name ` . <EoL>
<BoL> Return information about columns in ` table_name ` . <EoL>
<BoL> Return information about foreign_keys in ` table_name ` . <EoL>
<BoL> Return information about indexes in ` table_name ` . <EoL>
<BoL> Return information about the primary key constraint on table_name ` . <EoL>
<BoL> Return the `` comment '' for the table identified by ` table_name ` . <EoL>
<BoL> Return a list of table names for ` schema ` . <EoL>
<BoL> Return view definition . <EoL>
<BoL> Return a list of all view names available in the database . <EoL>
<BoL> Check the existence of a particular sequence in the database . <EoL>
<BoL> Check the existence of a particular table in the database . <EoL>
<BoL> Called during strategized creation of the dialect with a connection . <EoL>
<BoL> Return True if the given DB-API error indicates an invalid connection <EoL>
<BoL> Given a DBAPI connection , revert its isolation to the default . <EoL>
<BoL> Transform a generic type to a dialect-specific type . <EoL>
<BoL> Return a context manager delivering a : class : ` .Connection ` with a : class : ` .Transaction ` established . <EoL>
<BoL> Return a new : class : ` .Connection ` object . <EoL>
<BoL> Return a : class : ` .Connection ` object which may be part of some ongoing context . <EoL>
<BoL> Dispose of the connection pool used by this : class : ` .Engine ` . <EoL>
<BoL> Executes the given construct and returns a : class : ` .ResultProxy ` . <EoL>
<BoL> Return a new : class : ` .Engine ` that will provide : class : ` .Connection ` objects with the given execution options . <EoL>
<BoL> Return True if the given backend has a table of the given name . <EoL>
<BoL> Return a `` raw '' DBAPI connection from the connection pool . <EoL>
<BoL> Given a callable object or function , execute it , passing a : class : ` .Connection ` as the first argument . <EoL>
<BoL> Return a list of all table names available in the database . <EoL>
<BoL> Execute the given function within a transaction boundary . <EoL>
<BoL> Update the default execution_options dictionary of this : class : ` .Engine ` . <EoL>
<BoL> Return a new cursor generated from this ExecutionContext's connection . <EoL>
<BoL> Receive a DBAPI exception which occurred upon execute , result fetch , etc . <EoL>
<BoL> Return True if the last INSERT or UPDATE row contained inlined or database-side defaults . <EoL>
<BoL> Called after the execution of a compiled statement . <EoL>
<BoL> Called before an execution of a compiled statement . <EoL>
<BoL> Parse the given textual statement and return True if it refers to a `` committable '' statement <EoL>
<BoL> Close this : class : ` .Transaction ` . <EoL>
<BoL> Commit this : class : ` .Transaction ` . <EoL>
<BoL> Roll back this : class : ` .Transaction ` . <EoL>
<BoL> Prepare this : class : ` .TwoPhaseTransaction ` . <EoL>
<BoL> Decorator , memoize a function in a connection.info stash . <EoL>
<BoL> Compatibility method , adapts the result of get_primary_keys ( ) for those dialects which do n't implement get_pk_constraint ( ) . <EoL>
<BoL> Create a new Engine instance using a configuration dictionary . <EoL>
<BoL> Extract column names and data types from a cursor.description . <EoL>
<BoL> Given arguments , returns a new Engine instance . <EoL>
<BoL> Return the `` entry point '' dialect class . <EoL>
<BoL> Return the SQLAlchemy database dialect class corresponding to this URL 's driver name . <EoL>
<BoL> Translate url attributes into a dictionary of connection arguments . <EoL>
<BoL> Given arguments from the calling form \*multiparams , \**params , return a list of bind parameter structures , usually a list of dictionaries . <EoL>
<BoL> Return True if this event key is registered to listen . <EoL>
<BoL> Return True if the given target/ident/fn is set up to listen . <EoL>
<BoL> Register a listener function for the given target . <EoL>
<BoL> Decorate a function as a listener for the given target + identifier . <EoL>
<BoL> Remove an event listener . <EoL>
<BoL> Clear all class level listeners <EoL>
<BoL> Return an event collection which can be modified . <EoL>
<BoL> Execute this event . <EoL>
<BoL> Execute this event , but only if it has not been executed already for this collection . <EoL>
<BoL> Execute this event . <EoL>
<BoL> Return an event collection which can be modified . <EoL>
<BoL> Populate from the listeners in another : class : ` _Dispatch ` object . <EoL>
<BoL> Return an event collection which can be modified . <EoL>
<BoL> Create a 'join ' of this : class : ` ._Dispatch ` and another . <EoL>
<BoL> Populate from the listeners in another : class : ` _Dispatch ` object . <EoL>
<BoL> Create a : class : ` ._Dispatch ` class corresponding to an : class : ` .Events ` class . <EoL>
<BoL> Intercept high level execute ( ) events after execute . <EoL>
<BoL> Intercept high level execute ( ) events , receiving uncompiled SQL constructs and other objects prior to rendering into SQL . <EoL>
<BoL> Intercept begin ( ) events . <EoL>
<BoL> Intercept begin_twophase ( ) events . <EoL>
<BoL> Intercept commit ( ) events , as initiated by a : class : ` .Transaction ` . <EoL>
<BoL> Intercept commit_twophase ( ) events . <EoL>
<BoL> Intercept the creation of a new : class : ` .Connection ` . <EoL>
<BoL> Intercept when the : meth : ` .Engine.dispose ` method is called . <EoL>
<BoL> Intercept all exceptions processed by the : class : ` .Connection ` . <EoL>
<BoL> Intercept prepare_twophase ( ) events . <EoL>
<BoL> Intercept release_savepoint ( ) events . <EoL>
<BoL> Intercept rollback ( ) events , as initiated by a : class : ` .Transaction ` . <EoL>
<BoL> Intercept rollback_savepoint ( ) events . <EoL>
<BoL> Intercept rollback_twophase ( ) events . <EoL>
<BoL> Intercept savepoint ( ) events . <EoL>
<BoL> Intercept when the : meth : ` .Connection.execution_options ` method is called . <EoL>
<BoL> Intercept when the : meth : ` .Engine.execution_options ` method is called . <EoL>
<BoL> Called after CREATE statements are emitted . <EoL>
<BoL> Called after DROP statements are emitted . <EoL>
<BoL> Called after a : class : ` .SchemaItem ` is associated with a parent : class : ` .SchemaItem ` . <EoL>
<BoL> Called before CREATE statements are emitted . <EoL>
<BoL> Called before DROP statements are emitted . <EoL>
<BoL> Called before a : class : ` .SchemaItem ` is associated with a parent : class : ` .SchemaItem ` . <EoL>
<BoL> Called for each unit of 'column info ' retrieved when a : class : ` .Table ` is being reflected . <EoL>
<BoL> Receive connection arguments before a connection is made . <EoL>
<BoL> Receive a cursor to have execute ( ) called . <EoL>
<BoL> Receive a cursor to have execute ( ) with no parameters called . <EoL>
<BoL> Receive a cursor to have executemany ( ) called . <EoL>
<BoL> Called by subclasses to create a new ConnectionRecord . <EoL>
<BoL> Implementation for : meth : ` get ` , supplied by subclasses . <EoL>
<BoL> Implementation for : meth : ` return_conn ` , supplied by subclasses . <EoL>
<BoL> Mark all connections established within the generation of the given connection as invalidated . <EoL>
<BoL> Given a _ConnectionRecord , return it to the : class : ` .Pool ` . <EoL>
<BoL> Detect if creator accepts a single argument , or is sent as a legacy style no-arg function . <EoL>
<BoL> Add a : class : ` .PoolListener ` -like object to this pool . <EoL>
<BoL> Return a DBAPI connection from the pool . <EoL>
<BoL> Dispose of this pool . <EoL>
<BoL> Return a new : class : ` .Pool ` , of the same class as this one and configured with identical creation arguments . <EoL>
<BoL> Produce a DBAPI connection that is not referenced by any thread-local context . <EoL>
<BoL> Called when a connection returns to the pool . <EoL>
<BoL> Called when a connection is retrieved from the Pool . <EoL>
<BoL> Called when a DBAPI connection is closed . <EoL>
<BoL> Called when a detached DBAPI connection is closed . <EoL>
<BoL> Called at the moment a particular DBAPI connection is first created for a given : class : ` .Pool ` . <EoL>
<BoL> Called when a DBAPI connection is `` detached '' from a pool . <EoL>
<BoL> Called exactly once for the first time a DBAPI connection is checked out from a particular : class : ` .Pool ` . <EoL>
<BoL> Called when a DBAPI connection is to be `` invalidated '' . <EoL>
<BoL> Called before the `` reset '' action occurs for a pooled connection . <EoL>
<BoL> Called when a DBAPI connection is to be `` soft invalidated '' . <EoL>
<BoL> Constructs an _AssociationCollection . <EoL>
<BoL> Iterate over proxied values . <EoL>
<BoL> Not supported , use reversed ( mylist ) <EoL>
<BoL> Not supported , use sorted ( mylist ) <EoL>
<BoL> Iterate over proxied values . <EoL>
<BoL> Return a Python property implementing a view of a target attribute which references an attribute on members of the target . <EoL>
<BoL> Used by per-state lazy loaders to add options to the `` lazy load '' query from a parent query . <EoL>
<BoL> convert subquery eager loaders in the cache into baked queries . <EoL>
<BoL> Return the key that actually goes into the cache dictionary for this : class : ` .BakedQuery ` , taking into account the given : class : ` .Session ` . <EoL>
<BoL> Cloning version of _add_lazyload_options . <EoL>
<BoL> Add a criteria function to this : class : ` .BakedQuery ` . <EoL>
<BoL> Construct a new bakery . <EoL>
<BoL> Return a : class : ` .Result ` object for this : class : ` .BakedQuery ` . <EoL>
<BoL> Cancel any query caching that will occur on this BakedQuery object . <EoL>
<BoL> Add a criteria function to a : class : ` .BakedQuery ` cloned from this one . <EoL>
<BoL> Load the given primary key identity from the database . <EoL>
<BoL> Return all rows . <EoL>
<BoL> eturn the 'count ' . <EoL>
<BoL> Return the first row . <EoL>
<BoL> Retrieve an object based on identity . <EoL>
<BoL> Return exactly one result or raise an exception . <EoL>
<BoL> Return one or zero results , or raise an exception for multiple rows . <EoL>
<BoL> Specify parameters to be replaced into the string SQL statement . <EoL>
<BoL> Return the first element of the first result or None if no rows present . If multiple rows are returned , raises MultipleResultsFound . <EoL>
<BoL> Add a criteria function that will be applied post-cache . <EoL>
<BoL> Enable the use of baked queries for all lazyloaders systemwide . <EoL>
<BoL> Disable the use of baked queries for all lazyloaders systemwide . <EoL>
<BoL> Remove all custom compilers associated with a given : class : ` .ClauseElement ` type . <EoL>
<BoL> Reflect all : class : ` .Table ` objects for all current : class : ` .DeferredReflection ` subclasses <EoL>
<BoL> add an attribute to an existing declarative class . <EoL>
<BoL> A simple constructor that allows initialization from kwargs . <EoL>
<BoL> Return the : class : ` .Mapper ` for the given class or None if the class is not mapped . <EoL>
<BoL> Class decorator for : func : ` .declarative_base ` . <EoL>
<BoL> Decorator , allow a Python @ property to be used in query criteria . <EoL>
<BoL> Given a class , return True if any of the classes it inherits from has a mapped table , otherwise return False . <EoL>
<BoL> Given a class , configure the class declaratively , using the given registry , which can be any dictionary , and MetaData object . <EoL>
<BoL> Decorator that produces an : func : ` .orm.synonym ` attribute in conjunction with a Python descriptor . <EoL>
<BoL> Return a composite column-based property for use with a Mapper . <EoL>
<BoL> Create the Python descriptor that will serve as the access point on instances of the mapped class . <EoL>
<BoL> Propagate configuration arguments made on this composite to the target columns , for those that apply . <EoL>
<BoL> Establish events that populate/expire the composite attribute.After an insert or update , some columns may be expired due to server side defaults , or re-populated due to client side defaults . Pop out the composite value here so that it recreates . <EoL>
<BoL> Initialization which occurs after the : class : ` .CompositeProperty ` has been associated with its parent mapper . <EoL>
<BoL> Provided for userland code that uses attributes.get_history ( ) . <EoL>
<BoL> Perform instrumentation adjustments that need to occur after init ( ) has completed . <EoL>
<BoL> Called by Query for the purposes of constructing a SQL statement . <EoL>
<BoL> Perform subclass-specific initialization post-mapper-creation steps . <EoL>
<BoL> Hook called by the Mapper to the property to initiate instrumentation of the class attribute managed by this MapperProperty . <EoL>
<BoL> eturn an attribute of the class that is either present directly on the class , e.g . not on a superclass , or is from a superclass but this superclass is a non-mapped mixin , that is , not a descendant of the declarative base and is also not classically mapped . <EoL>
<BoL> Return True if the given object is a mapped class , : class : ` .Mapper ` , or : class : ` .AliasedClass ` . <EoL>
<BoL> Given a class , return the primary : class : ` .Mapper ` associated with the key . <EoL>
<BoL> Add a class to the _decl_class_registry associated with the given declarative class . <EoL>
<BoL> Redefine this object in terms of a polymorphic subclass . <EoL>
<BoL> Operate on an argument . <EoL>
<BoL> Reverse operate on an argument . <EoL>
<BoL> Create a new : class : ` .hybrid_method ` . <EoL>
<BoL> Provide a modifying decorator that defines a SQL-expression producing method . <EoL>
<BoL> Intercept begin ( ) events . <EoL>
<BoL> Intercept begin_twophase ( ) events . <EoL>
<BoL> Intercept commit ( ) events . <EoL>
<BoL> Intercept commit_twophase ( ) events . <EoL>
<BoL> Intercept high level execute ( ) events . <EoL>
<BoL> Intercept prepare_twophase ( ) events . <EoL>
<BoL> Intercept release_savepoint ( ) events . <EoL>
<BoL> Intercept rollback ( ) events . <EoL>
<BoL> Intercept rollback_savepoint ( ) events . <EoL>
<BoL> Intercept rollback_twophase ( ) events . <EoL>
<BoL> Intercept savepoint ( ) events . <EoL>
<BoL> Adapt a : class : ` .PoolListener ` to individual : class : ` event.Dispatch ` events . <EoL>
<BoL> Called when a connection returns to the pool . <EoL>
<BoL> Called when a connection is retrieved from the Pool . <EoL>
<BoL> Called once for each new DB-API connection or Pool 's `` creator ( ) `` . <EoL>
<BoL> Called exactly once for the first DB-API connection . <EoL>
<BoL> Return a : class : ` .Lateral ` object . <EoL>
<BoL> Return a literal clause , bound to a bind parameter . <EoL>
<BoL> Delegate a critical call to the underlying logger . <EoL>
<BoL> Delegate a debug call to the underlying logger . <EoL>
<BoL> Delegate an error call to the underlying logger . <EoL>
<BoL> Delegate an exception call to the underlying logger . <EoL>
<BoL> What 's the effective level for this logger ? <EoL>
<BoL> Delegate an info call to the underlying logger . <EoL>
<BoL> Is this logger enabled for level 'level ' ? <EoL>
<BoL> Delegate a log call to the underlying logger . <EoL>
<BoL> Delegate a warning call to the underlying logger . <EoL>
<BoL> create a logger for an instance that implements : class : ` .Identified ` . <EoL>
<BoL> Return a negation of the given clause , i.e . `` NOT ( clause ) `` . <EoL>
<BoL> Return a : class : ` .MapperOption ` that will indicate to the : class : ` .Query ` that the main table has been aliased . <EoL>
<BoL> Used by the `` baked lazy loader '' to see if this option can be cached . <EoL>
<BoL> same as process_query ( ) , except that this option may not apply to the given query . <EoL>
<BoL> Receive a collection append event . <EoL>
<BoL> Receive a remove event . <EoL>
<BoL> Receive a set event . <EoL>
<BoL> Construct a new : class : ` .Bundle ` . <EoL>
<BoL> Produce the `` row processing '' function for this : class : ` .Bundle ` . <EoL>
<BoL> Provide a copy of this : class : ` .Bundle ` passing a new label . <EoL>
<BoL> Indicate that the given attribute should be loaded using `` lazy '' loading with a `` baked '' query used in the load . <EoL>
<BoL> Indicate that the given attribute should be eagerly loaded from columns stated manually in the query . <EoL>
<BoL> Indicate an attribute should load using its default loader style . <EoL>
<BoL> Indicate that the given column-oriented attribute should be deferred , e.g . not loaded until accessed . <EoL>
<BoL> Indicate that the given attribute should be loaded using an immediate load with a per-attribute SELECT statement . <EoL>
<BoL> Indicate that the given attribute should be loaded using joined eager loading . <EoL>
<BoL> Indicate that the given attribute should be loaded using `` lazy '' loading . <EoL>
<BoL> Indicate that for a particular entity , only the given list of column-based attribute names should be loaded ; all others will be deferred . <EoL>
<BoL> Indicate that the given relationship attribute should remain unloaded . <EoL>
<BoL> Indicate that the given relationship attribute should disallow lazy loads . <EoL>
<BoL> Indicate an eager load should take place for all attributes specific to a subclass . <EoL>
<BoL> Indicate that the given attribute should be loaded using SELECT IN eager loading . <EoL>
<BoL> Indicate that the given attribute should be loaded using subquery eager loading . <EoL>
<BoL> Indicate that the given column-oriented attribute should be undeferred , e.g . specified within the SELECT statement of the entity as a whole . <EoL>
<BoL> Indicate that columns within the given deferred group name should be undeferred . <EoL>
<BoL> Apply an ad-hoc SQL expression to a `` deferred expression '' attribute . <EoL>
<BoL> Class-level path to the : func : ` .configure_mappers ` call . <EoL>
<BoL> If this mapper is to be a primary mapper ( i.e . the non_primary flag is not set ) , associate this Mapper with the given class_ and entity name . <EoL>
<BoL> Configure settings related to inherting and/or inherited mappers being present . <EoL>
<BoL> Configure an attribute on the mapper representing the 'polymorphic_on ' column , if applicable , and not already generated by _configure_properties ( which is typical ) . <EoL>
<BoL> Return an iterator of MapperProperty objects which will render into a SELECT . <EoL>
<BoL> given a with_polymorphic ( ) argument , return the set of mappers it represents . <EoL>
<BoL> assemble a WHERE clause which retrieves a given state by primary key , using a minimized set of tables . <EoL>
<BoL> Call the `` init ( ) `` method on all `` MapperProperties `` attached to this mapper . <EoL>
<BoL> generate/update a : class : ` .ColumnProprerty ` given a : class : ` .Column ` object . <EoL>
<BoL> given a list of mappers ( assumed to be within this mapper's inheritance hierarchy ) , construct an outerjoin amongst those mapper's mapped tables . <EoL>
<BoL> Set the given : class : ` .Mapper ` as the 'inherits ' for this : class : ` .Mapper ` , assuming this : class : ` .Mapper ` is concrete and does not already have an inherits . <EoL>
<BoL> determine whether a particular property should be implicitly present on the class . <EoL>
<BoL> Assemble a BakedQuery that can load the columns local to this subclass as a SELECT with IN . <EoL>
<BoL> Add the given dictionary of properties to this mapper , using ` add_property ` . <EoL>
<BoL> Add an individual MapperProperty to this mapper . <EoL>
<BoL> Iterate each element and its mapper in an object graph , for all relationships that meet the given cascade rule . <EoL>
<BoL> Return true if the given mapper shares a common inherited parent as this mapper . <EoL>
<BoL> eturn a MapperProperty associated with the given key . <EoL>
<BoL> Given a : class : ` .Column ` object , return the : class : ` .MapperProperty ` which maps this column . <EoL>
<BoL> Return the identity key for the given instance , based on its primary key attributes . <EoL>
<BoL> Return an identity-map key for use in storing/retrieving an item from an identity map . <EoL>
<BoL> Return an identity-map key for use in storing/retrieving an item from the identity map . <EoL>
<BoL> Return True if the this mapper inherits from the given mapper . <EoL>
<BoL> Iterate through the collection including this mapper and all descendant mappers . <EoL>
<BoL> Return the list of primary key values for the given instance . <EoL>
<BoL> Return the primary mapper corresponding to this mapper 's class key ( class ) . <EoL>
<BoL> Receive an object instance after that instance is deleted . <EoL>
<BoL> Receive an object instance after that instance is inserted . <EoL>
<BoL> Receive an object instance after that instance is updated . <EoL>
<BoL> Receive an object instance before that instance is deleted . <EoL>
<BoL> Receive an object instance before that instance is inserted into its table . <EoL>
<BoL> Receive an object instance before that instance is updated . <EoL>
<BoL> Receive an instance when its constructor has been called , and raised an exception . <EoL>
<BoL> Receive an instance when its constructor is called . <EoL>
<BoL> Receive a class when the mapper is first constructed , and has applied instrumentation to the mapped class . <EoL>
<BoL> Receive an object instance after it has been created via `` __new__ `` , and after initial attribute population has occurred . <EoL>
<BoL> Return a copy of this PropComparator which will use the given : class : ` .AliasedInsp ` to produce corresponding expressions . <EoL>
<BoL> Execute after an instance is attached to a session . <EoL>
<BoL> Execute after a transaction is begun on a connection <EoL>
<BoL> Execute after a bulk delete operation to the session . <EoL>
<BoL> Execute after a bulk update operation to the session . <EoL>
<BoL> Execute after a commit has occurred . <EoL>
<BoL> Execute after flush has completed , but before commit has been called . <EoL>
<BoL> Execute after flush has completed , and after the post-exec state occurs . <EoL>
<BoL> Execute after a rollback has occurred . <EoL>
<BoL> Execute right before commit is called . <EoL>
<BoL> Execute before flush process has started . <EoL>
<BoL> Produce an alias of the given element , usually an : class : ` .AliasedClass ` instance . <EoL>
<BoL> Backwards compat for impl.active_history <EoL>
<BoL> Retrieve a value from the given object . If a callable is assembled on this object 's attribute , and passive is False , the callable will be executed and the resulting value will be set as the new value for this attribute . <EoL>
<BoL> Return a list of tuples of ( state , obj ) for all objects in this attribute 's current state + history . <EoL>
<BoL> eturn the unchanged value of this attribute <EoL>
<BoL> Return the boolean value of a ` hasparent ` flag attached to the given state . <EoL>
<BoL> Initialize the given state 's attribute with an empty value . <EoL>
<BoL> set an attribute value on the given instance and 'commit ' it . <EoL>
<BoL> Set a boolean flag on the given item corresponding to whether or not it is attached to a parent object via the attribute represented by this `` InstrumentedAttribute `` . <EoL>
<BoL> Initialize this attribute with an empty collection . <EoL>
<BoL> Set an attribute value on the given instance and 'commit ' it . <EoL>
<BoL> Return True if this : class : ` .History ` has no changes and no existing , unchanged state . <EoL>
<BoL> Return True if this : class : ` .History ` has changes . <EoL>
<BoL> Return a collection of unchanged + deleted . <EoL>
<BoL> Return a collection of added + unchanged . <EoL>
<BoL> Return a collection of added + unchanged + deleted . <EoL>
<BoL> Apply listeners to synchronize a two-way relationship . <EoL>
<BoL> Create an QueryableAttribute / user descriptor hybrid.Presents the : class : ` .QueryableAttribute ` interface as a proxy on top of a Python descriptor / : class : ` .PropComparator ` combination.Delegate __getattr__ to the original descriptor and/or comparator . <EoL>
<BoL> Delete the value of an attribute , firing history events . <EoL>
<BoL> Mark an instance as 'dirty ' without any specific attribute mentioned . <EoL>
<BoL> Mark an attribute on an instance as 'modified ' . <EoL>
<BoL> Get the value of an attribute , firing any callables required . <EoL>
<BoL> Return a : class : ` .History ` record for the given object and attribute key . <EoL>
<BoL> TODO <EoL>
<BoL> Initialize a collection attribute and return the collection adapter . <EoL>
<BoL> Initialize a collection attribute and return the collection adapter . <EoL>
<BoL> Return a string describing an instance . <EoL>
<BoL> Set the value of an attribute , firing history events . <EoL>
<BoL> Set the value of an attribute with no history events . <EoL>
<BoL> Return a string describing an instance via its InstanceState . <EoL>
<BoL> Create a back reference with explicit keyword arguments , which are the same arguments one can send to : func : ` relationship ` . <EoL>
<BoL> Return a class attribute given an entity and string name . <EoL>
<BoL> Mark a method as generative , e.g . method-chained . <EoL>
<BoL> Given an object , return the primary Mapper associated with the object instance . <EoL>
<BoL> Given an object , return the : class : ` .InstanceState ` associated with the object . <EoL>
<BoL> Return a string describing an instance 's class via its InstanceState . <EoL>
<BoL> Remove all mappers from all classes . <EoL>
<BoL> Iterate over entities in the collection . <EoL>
<BoL> Count entities in the collection . <EoL>
<BoL> Add or restore an entity to the collection , firing no events . <EoL>
<BoL> Add an entity to the collection , firing mutation events . <EoL>
<BoL> Add or restore an entity to the collection , firing no events . <EoL>
<BoL> Empty the collection , firing a mutation event for each entity . <EoL>
<BoL> Empty the collection , firing no events . <EoL>
<BoL> Notify that a entity has entered the collection . <EoL>
<BoL> Notify that an entity is about to be removed from the collection . <EoL>
<BoL> Notify that a entity has been removed from the collection . <EoL>
<BoL> Remove an entity from the collection , firing mutation events . <EoL>
<BoL> Remove an entity from the collection , firing no events . <EoL>
<BoL> Create a new collection with keying provided by keyfunc . <EoL>
<BoL> Validate and convert a dict-like object into values for set ( ) ing . <EoL>
<BoL> Add an item by value , consulting the keyfunc for the key . <EoL>
<BoL> Remove an item by value , consulting the keyfunc for the key . <EoL>
<BoL> Special method to run 'commit existing value ' methods <EoL>
<BoL> Return a wrapper that converts a `` canned '' collection like set , dict , list into the Instrumented* version . <EoL>
<BoL> Run del events , may eventually be inlined into decorators . <EoL>
<BoL> Run set events , may eventually be inlined into decorators . <EoL>
<BoL> ensure all roles are present , and apply implicit instrumentation if needed <EoL>
<BoL> Tailored instrumentation wrappers for any dict-like mapping class . <EoL>
<BoL> Modify methods in a class and install instrumentation . <EoL>
<BoL> Route method args and/or return value through the collection adapter . <EoL>
<BoL> Tailored instrumentation wrappers for any list-like class . <EoL>
<BoL> search for _sa_instrument_role-decorated methods in method resolution order , assign to roles . <EoL>
<BoL> Allow anything set-like to participate in set binops . <EoL>
<BoL> Allow only set , frozenset and self.__class__-derived objects in binops . <EoL>
<BoL> apply ad-hoc instrumentation from decorators , class-level defaults and implicit role declarations <EoL>
<BoL> Tailored instrumentation wrappers for any set-like class . <EoL>
<BoL> see if this class has `` canned '' roles based on a known collection type ( dict , set , list ) . Apply those roles as needed to the `` roles '' dictionary , and also prepare `` decorator '' methods <EoL>
<BoL> A dictionary-based collection type with attribute-based keying . <EoL>
<BoL> Load a new collection , firing events based on prior like membership . <EoL>
<BoL> Mark the method as adding an entity to the collection . <EoL>
<BoL> Tag the method as the collection appender . <EoL>
<BoL> Tag the method as the collection converter . <EoL>
<BoL> Tag the method as instrumented . <EoL>
<BoL> Tag the method as the collection remover . <EoL>
<BoL> Tag the method as a `` linked to attribute '' event handler . <EoL>
<BoL> Tag the method as the collection remover . <EoL>
<BoL> Mark the method as removing an entity in the collection . <EoL>
<BoL> Mark the method as removing an entity in the collection . <EoL>
<BoL> Mark the method as replacing an entity in the collection . <EoL>
<BoL> A dictionary-based collection type with column-based keying . <EoL>
<BoL> A dictionary-based collection type with arbitrary keying . <EoL>
<BoL> Prepare a callable for future use as a collection class factory . <EoL>
<BoL> Initialize the inter-mapper relationships of all mappers that have been defined . <EoL>
<BoL> Initialize the inter-mapper relationships of all mappers that have been constructed thus far . <EoL>
<BoL> Create a new : class : ` .Session ` with no automation enabled by default . <EoL>
<BoL> Indicate a column-based mapped attribute that by default will not load unless accessed . <EoL>
<BoL> eturn True if the given object instance has a parent , according to the `` InstrumentedAttribute `` handled by this `` DependencyProcessor `` . <EoL>
<BoL> establish actions and dependencies related to a flush . <EoL>
<BoL> establish actions and dependencies related to a flush . <EoL>
<BoL> Establish column and other state for a given QueryContext . <EoL>
<BoL> Return a new class with AppenderQuery functionality layered over . <EoL>
<BoL> Return the : class : ` .Session ` to which the given instance belongs . <EoL>
<BoL> Construct a dynamically-loading mapper property . <EoL>
<BoL> A synonym for : func : ` joinedload ( ) ` . <EoL>
<BoL> A synonym for : func : ` joinedload_all ( ) ` <EoL>
<BoL> Receive a collection append event . <EoL>
<BoL> Receive a collection 'bulk replace ' event . <EoL>
<BoL> Receive a 'collection dispose ' event . <EoL>
<BoL> Receive a 'collection init ' event . <EoL>
<BoL> Receive a scalar `` init '' event . <EoL>
<BoL> Receive a 'modified ' event . <EoL>
<BoL> Receive a collection remove event . <EoL>
<BoL> Receive a scalar set event . <EoL>
<BoL> Receive an object instance after its attributes or some subset have been expired . <EoL>
<BoL> Called when the first instance of a particular mapping is called . <EoL>
<BoL> Receive an instance when its constructor is called . <EoL>
<BoL> Receive an instance when its constructor has been called , and raised an exception . <EoL>
<BoL> Receive an object instance after it has been created via `` __new__ `` , and after initial attribute population has occurred . <EoL>
<BoL> Receive an object instance when its associated state is being pickled . <EoL>
<BoL> Receive an object instance after one or more attributes have been refreshed from a query . <EoL>
<BoL> Receive an object instance after one or more attributes have been refreshed within the persistence of the object . <EoL>
<BoL> Receive an object instance after its associated state has been unpickled . <EoL>
<BoL> Called when an attribute is instrumented . <EoL>
<BoL> Called after the given class is instrumented . <EoL>
<BoL> Called before the given class is uninstrumented . <EoL>
<BoL> Called after a series of mappers have been configured . <EoL>
<BoL> Receive an object instance after a DELETE statement has been emitted corresponding to that instance . <EoL>
<BoL> Receive an object instance after an INSERT statement is emitted corresponding to that instance . <EoL>
<BoL> Receive an object instance after an UPDATE statement is emitted corresponding to that instance . <EoL>
<BoL> Called before a series of mappers have been configured . <EoL>
<BoL> Receive an object instance before a DELETE statement is emitted corresponding to that instance . <EoL>
<BoL> Receive an object instance before an INSERT statement is emitted corresponding to that instance . <EoL>
<BoL> Receive an object instance before an UPDATE statement is emitted corresponding to that instance . <EoL>
<BoL> Receive a class when the mapper is first constructed , before instrumentation is applied to the mapped class . <EoL>
<BoL> Called when a specific mapper has completed its own configuration within the scope of the : func : ` .configure_mappers ` call . <EoL>
<BoL> Receive the : class : ` .Query ` object before it is composed into a core : class : ` .Select ` object . <EoL>
<BoL> Execute after an instance is attached to a session . <EoL>
<BoL> Execute after a transaction is begun on a connection <EoL>
<BoL> Execute after a bulk delete operation to the session . <EoL>
<BoL> Execute after a bulk update operation to the session . <EoL>
<BoL> Execute after a commit has occurred . <EoL>
<BoL> Execute after flush has completed , but before commit has been called . <EoL>
<BoL> Execute after flush has completed , and after the post-exec state occurs . <EoL>
<BoL> Execute after a real DBAPI rollback has occurred . <EoL>
<BoL> Execute after any rollback has occurred , including `` soft '' rollbacks that do n't actually emit at the DBAPI level . <EoL>
<BoL> Execute when a new : class : ` .SessionTransaction ` is created . <EoL>
<BoL> Execute when the span of a : class : ` .SessionTransaction ` ends . <EoL>
<BoL> Execute before an instance is attached to a session . <EoL>
<BoL> Execute before commit is called . <EoL>
<BoL> Execute before flush process has started . <EoL>
<BoL> Intercept the `` deleted to detached '' transition for a specific object . <EoL>
<BoL> Intercept the `` deleted to persistent '' transition for a specific object . <EoL>
<BoL> Intercept the `` detached to persistent '' transition for a specific object . <EoL>
<BoL> Intercept the `` loaded as persistent '' transition for a specific object . <EoL>
<BoL> Intercept the `` pending to persistent '' '' transition for a specific object . <EoL>
<BoL> Intercept the `` pending to transient '' transition for a specific object . <EoL>
<BoL> Intercept the `` persistent to deleted '' transition for a specific object . <EoL>
<BoL> Intercept the `` persistent to detached '' transition for a specific object . <EoL>
<BoL> Intercept the `` persistent to transient '' transition for a specific object . <EoL>
<BoL> Intercept the `` transient to pending '' transition for a specific object . <EoL>
<BoL> Return the current : class : ` .Session ` , creating it using the : attr : ` .scoped_session.session_factory ` if not present . <EoL>
<BoL> Construct a new : class : ` .scoped_session ` . <EoL>
<BoL> econfigure the : class : ` .sessionmaker ` used by this : class : ` .scoped_session ` . <EoL>
<BoL> eturn a class property which produces a : class : ` .Query ` object against the class and the current : class : ` .Session ` when called . <EoL>
<BoL> Dispose of the current : class : ` .Session ` , if present . <EoL>
<BoL> Produce a new : class : ` .Session ` object using the configuration established in this : class : ` .sessionmaker ` . <EoL>
<BoL> ( Re ) configure the arguments for this sessionmaker . <EoL>
<BoL> Annotate a portion of a primaryjoin expression with a 'foreign ' annotation . <EoL>
<BoL> optional inlined form of add ( ) which can assume item is n't present in the map <EoL>
<BoL> eturn True if any InstanceStates present have been marked as 'modified ' . <EoL>
<BoL> prune unreferenced , non-dirty states . <EoL>
<BoL> All ClassManagers are non-zero regardless of attribute state . <EoL>
<BoL> eturn an iterator of all classbound attributes that are implement : class : ` .InspectionAttr ` . <EoL>
<BoL> Return True if the given attribute is fully initialized . <EoL>
<BoL> eturn an attribute on the class without tripping it . <EoL>
<BoL> Scan through all instrumented classes in our hierarchy searching for the given object as an attribute , and return the bottommost owner . <EoL>
<BoL> Install a default InstanceState if none is present . <EoL>
<BoL> Create a new ClassManager for a subclass of this ClassManager's class . <EoL>
<BoL> Dissasociate this manager from its class . <EoL>
<BoL> TODO <EoL>
<BoL> Mark this instance as the manager for its class . <EoL>
<BoL> Return a ( instance ) - > InstanceState callable . <EoL>
<BoL> emove all instrumentation established by this ClassManager . <EoL>
<BoL> Overridden by a subclass to test for conflicting factories . <EoL>
<BoL> Overridden by a subclass to do an extended lookup . <EoL>
<BoL> Build an __init__ decorator that triggers ClassManager events.\ def __init__ ( % ( apply_pos ) s ) : new_state = class_manager._new_state_if_none ( % ( self_arg ) s ) if new_state : return new_state._initialize_instance ( % ( apply_kw ) s ) else : return original__init__ ( % ( apply_kw ) s ) <EoL>
<BoL> Return True if the given attribute on the given instance is instrumented by the attributes package . <EoL>
<BoL> Register class instrumentation . <EoL>
<BoL> Unregister class instrumentation . <EoL>
<BoL> Apply a modification to the given : class : ` .Query ` . <EoL>
<BoL> Look up the given key in the given session 's identity map , check the object for expired state if found . <EoL>
<BoL> Return an ORM result as an iterator . <EoL>
<BoL> initiate a column-based attribute refresh operation . <EoL>
<BoL> Merge a result into this : class : ` .Query ` object 's Session . <EoL>
<BoL> Alter the state of the given instance so that it is : term : ` transient ` . <EoL>
<BoL> Make the given transient instance : term : ` detached ` . <EoL>
<BoL> Initial mapper compilation trigger . <EoL>
<BoL> Run init_instance hooks . <EoL>
<BoL> Decorate a method as the 'reconstructor ' hook . <EoL>
<BoL> Decorate a method as a 'validator ' for one or more named properties . <EoL>
<BoL> Produce a left outer join between left and right clauses . <EoL>
<BoL> Return an iterator of ( state , state.dict , mapper , connection ) . <EoL>
<BoL> finalize state on states that have been inserted or updated , including calling after_insert/after_update events . <EoL>
<BoL> Make an initial pass across a set of states for DELETE . <EoL>
<BoL> Make an initial pass across a set of states for UPDATE corresponding to post_update . <EoL>
<BoL> Make an initial pass across a set of states for INSERT or UPDATE . <EoL>
<BoL> Issue `` DELETE `` statements for a list of objects . <EoL>
<BoL> Issue UPDATE statements on behalf of a relationship ( ) which specifies post_update . <EoL>
<BoL> Issue `` INSERT `` and/or `` UPDATE `` statements for a list of objects . <EoL>
<BoL> Add a column to this collection . <EoL>
<BoL> add the given column to this collection , removing unaliased versions of this column as well as existing columns with the same key . <EoL>
<BoL> Parse the for_update argument of : func : ` .select ` . <EoL>
<BoL> Apply cloned traversal to the given list of elements , and return the new list . <EoL>
<BoL> chain ' an additional ClauseVisitor onto this ClauseVisitor . <EoL>
<BoL> traverse the given expression structure , returning an iterator of all elements . <EoL>
<BoL> determine if 'given ' corresponds to 'entity ' , in terms of an entity passed to Query that would match the same entity being referred to elsewhere in the query . <EoL>
<BoL> Create filtering criterion that relates this query 's primary entity to the given related instance , using established : func : ` .relationship ( ) ` configuration . <EoL>
<BoL> Indicate an attribute that populates from a query-time SQL expression . <EoL>
<BoL> A synonym for : func : ` relationship ` . <EoL>
<BoL> traverse and visit the given expression structure . <EoL>
<BoL> Annotate the primaryjoin and secondaryjoin structures with 'foreign ' annotations marking columns considered as foreign . <EoL>
<BoL> Annotate the primaryjoin and secondaryjoin structures with 'local ' annotations . <EoL>
<BoL> Annotate the primaryjoin and secondaryjoin structures with 'remote ' annotations marking columns considered as part of the 'remote ' side . <EoL>
<BoL> annotate 'remote ' in primaryjoin , secondaryjoin when the parent/child tables are entirely separate . <EoL>
<BoL> annotate 'remote ' in primaryjoin , secondaryjoin when the 'remote_side ' or '_local_remote_pairs' arguments are used . <EoL>
<BoL> annotate 'remote ' in primaryjoin , secondaryjoin when 'secondary ' is present . <EoL>
<BoL> annotate 'remote ' in primaryjoin , secondaryjoin when the parent/child tables have some set of tables in common , though is not a fully self-referential relationship . <EoL>
<BoL> annotate 'remote ' in primaryjoin , secondaryjoin when the relationship is detected as self-referential . <EoL>
<BoL> Check the foreign key columns collected and emit error messages . <EoL>
<BoL> provide deannotation for the various lists of pairs , so that using them in hashes does n't incur high-overhead __eq__ ( ) comparisons against original columns mapped . <EoL>
<BoL> Determine if this relationship is one to many , many to one , many to many . <EoL>
<BoL> Determine the 'primaryjoin ' and 'secondaryjoin ' attributes , if not passed to the constructor already . <EoL>
<BoL> Return True if the join condition contains column comparisons where both columns are in both tables . <EoL>
<BoL> emove the parententity annotation from our join conditions which can leak in here based on some declarative patterns and maybe others . <EoL>
<BoL> Return True if parent/child tables have some overlap . <EoL>
<BoL> Deep copy the given element , removing annotations . <EoL>
<BoL> Deep copy the given ClauseElement , annotating each element with the `` _orm_adapt '' flag . <EoL>
<BoL> Remove annotations that link a column to a particular mapping . <EoL>
<BoL> Annotate the given ClauseElement and copy its internals so that internal objects refer to the new annotated object . <EoL>
<BoL> given criterion containing bind params , convert selected elements to IS NULL . <EoL>
<BoL> Annotate a portion of a primaryjoin expression with a 'remote ' annotation . <EoL>
<BoL> Return True if left/right have some overlapping selectable <EoL>
<BoL> Produce a traversal of the given expression , delivering column comparisons to the given function . <EoL>
<BoL> Remove the restoration state taken before a transaction began . <EoL>
<BoL> Restore the restoration state taken before a transaction began . <EoL>
<BoL> Generate the full , unsorted collection of PostSortRecs as well as dependency pairs for this UOWTransaction . <EoL>
<BoL> Filter the given list of InstanceStates to those relevant to the given DependencyProcessor . <EoL>
<BoL> mark processed objects as clean / deleted after a successful flush ( ) . <EoL>
<BoL> eturn true if the given state is marked as deleted within this uowtransaction . <EoL>
<BoL> emove pending actions for a state from the uowtransaction . <EoL>
<BoL> eturn true if the given state is expired and was deleted previously . <EoL>
<BoL> Given an : class : ` .InstanceState ` , return the : class : ` .Session ` associated , if any . <EoL>
<BoL> Return the current pre-flush change history for this attribute , via the : class : ` .History ` interface . <EoL>
<BoL> Weakref callback cleanup . <EoL>
<BoL> Commit attributes . <EoL>
<BoL> commit all attributes unconditionally . <EoL>
<BoL> Mass / highly inlined version of commit_all ( ) . <EoL>
<BoL> __call__ allows the InstanceState to act as a deferred callable for loading expired attributes , which is also serializable ( picklable ) . <EoL>
<BoL> Remove the given attribute and any callables associated with it . <EoL>
<BoL> Return self.unmodified.intersection ( keys ) . <EoL>
<BoL> Convert from an _UnboundLoad ( ) object into a Load ( ) object . <EoL>
<BoL> eturn true if the source object has changes from an old to a new value on the given synchronize pairs <EoL>
<BoL> Establish event listeners on object attributes which handle cascade-on-set/append . <EoL>
<BoL> Return an `` OUTER JOIN `` clause element . <EoL>
<BoL> Splice a join into the center . <EoL>
<BoL> eturn an alias of this : class : ` .Join ` . <EoL>
<BoL> Create a : class : ` .Select ` from this : class : ` .Join ` . <EoL>
<BoL> determine if 'given ' `` is a '' mapper , in terms of the given would load rows of type 'mapper ' . <EoL>
<BoL> Runs a validation method on an attribute value to be set or appended . <EoL>
<BoL> Return True if the given object has a database identity . <EoL>
<BoL> Generate `` identity key '' tuples , as are used as keys in the : attr : ` .Session.identity_map ` dictionary . <EoL>
<BoL> Use random-ordering sets within the unit of work in order to detect unit of work sorting issues . <EoL>
<BoL> Return True if the given object was deleted within a session flush . <EoL>
<BoL> Create an 'OUT ' parameter for usage in functions ( stored procedures ) , for databases which support them . <EoL>
<BoL> Dispose of this pool . <EoL>
<BoL> Return a new DBAPI cursor for the underlying connection . <EoL>
<BoL> Separate this connection from its Pool . <EoL>
<BoL> Mark this connection as invalidated . <EoL>
<BoL> Invalidate the DBAPI connection held by this : class : ` ._ConnectionRecord ` . <EoL>
<BoL> Initializes a new proxy . <EoL>
<BoL> Activate a connection to the database . <EoL>
<BoL> Dispose the pool referenced by the given connect arguments . <EoL>
<BoL> Remove all current DB-API 2.0 managers . <EoL>
<BoL> Return a proxy for a DB-API module that automatically pools connections . <EoL>
<BoL> Create a new : class : ` .CreateSchema ` construct . <EoL>
<BoL> traverse and visit the given expression structure . <EoL>
<BoL> Create a new : class : ` .DropSchema ` construct . <EoL>
<BoL> sort a collection of : class : ` .Table ` objects based on dependency . <EoL>
<BoL> Return an `` EXCEPT `` of multiple selectables . <EoL>
<BoL> Return an `` EXCEPT ALL `` of multiple selectables . <EoL>
<BoL> Return an `` INTERSECT `` of multiple selectables . <EoL>
<BoL> Return an `` INTERSECT ALL `` of multiple selectables . <EoL>
<BoL> Return a `` UNION `` of multiple selectables . <EoL>
<BoL> Return a `` UNION ALL `` of multiple selectables . <EoL>
<BoL> Override the default _generate ( ) method to also clear out exported collections . <EoL>
<BoL> Append the given GROUP BY criterion applied to this selectable . <EoL>
<BoL> Append the given ORDER BY criterion applied to this selectable . <EoL>
<BoL> eturn a new selectable with the 'use_labels ' flag set to True . <EoL>
<BoL> eturn a 'scalar ' representation of this selectable , which can be used as a column expression . <EoL>
<BoL> eturn a new selectable with the 'autocommit ' flag set to True . <EoL>
<BoL> eturn a new selectable with the given list of GROUP BY criterion applied . <EoL>
<BoL> eturn a 'scalar ' representation of this selectable , embedded as a subquery with a label . <EoL>
<BoL> eturn a new selectable with the given LIMIT criterion applied . <EoL>
<BoL> eturn a new selectable with the given OFFSET criterion applied . <EoL>
<BoL> eturn a new selectable with the given list of ORDER BY criterion applied . <EoL>
<BoL> Add the given WHERE clause to a newly returned delete construct . <EoL>
<BoL> Return a : class : ` .False_ ` construct . <EoL>
<BoL> Construct a new : class : ` .Join ` . <EoL>
<BoL> append the given column expression to the columns clause of this select ( ) construct . <EoL>
<BoL> append the given correlation expression to this select ( ) construct . <EoL>
<BoL> append the given FromClause expression to this select ( ) construct's FROM clause . <EoL>
<BoL> append the given expression to this select ( ) construct 's HAVING criterion . <EoL>
<BoL> append the given columns clause prefix expression to this select ( ) construct . <EoL>
<BoL> append the given expression to this select ( ) construct 's WHERE criterion . <EoL>
<BoL> eturn a new select ( ) construct with the given column expression added to its columns clause . <EoL>
<BoL> eturn a new : class : ` .Select ` which will correlate the given FROM clauses to that of an enclosing : class : ` .Select ` . <EoL>
<BoL> eturn a new : class : ` .Select ` which will omit the given FROM clauses from the auto-correlation process . <EoL>
<BoL> Return a new select ( ) construct which will apply DISTINCT to its columns clause . <EoL>
<BoL> eturn a SQL EXCEPT of this select ( ) construct against the given selectable . <EoL>
<BoL> eturn a SQL EXCEPT ALL of this select ( ) construct against the given selectable . <EoL>
<BoL> eturn child elements as per the ClauseElement specification . <EoL>
<BoL> eturn a new select ( ) construct with the given expression added to its HAVING clause , joined to the existing clause via AND , if any . <EoL>
<BoL> eturn a SQL INTERSECT of this select ( ) construct against the given selectable . <EoL>
<BoL> eturn a SQL INTERSECT ALL of this select ( ) construct against the given selectable . <EoL>
<BoL> eturn a Set of all FromClause elements referenced by this Select . <EoL>
<BoL> Return a new : func ` .select ` construct with redundantly named , equivalently-valued columns removed from the columns clause . <EoL>
<BoL> eturn a new : func : ` .select ` construct with the given FROM expression merged into its list of FROM objects . <EoL>
<BoL> eturn a 'grouping ' construct as per the ClauseElement specification . <EoL>
<BoL> Add one or more expressions following the statement as a whole . <EoL>
<BoL> eturn a SQL UNION of this select ( ) construct against the given selectable . <EoL>
<BoL> eturn a SQL UNION ALL of this select ( ) construct against the given selectable . <EoL>
<BoL> eturn a new select ( ) construct with the given expression added to its WHERE clause , joined to the existing clause via AND , if any . <EoL>
<BoL> Add an indexing or other executional context hint for the given selectable to this : class : ` .Select ` . <EoL>
<BoL> Return a new : func : ` .select ` construct with its columns clause replaced with the given columns . <EoL>
<BoL> add a statement hint to this : class : ` .Select ` . <EoL>
<BoL> Produce a new : class : ` .TableClause ` . <EoL>
<BoL> Return a constant : class : ` .True_ ` construct . <EoL>
<BoL> eturn a new update ( ) construct with the given expression added to its WHERE clause , joined to the existing clause via AND , if any . <EoL>
<BoL> Compare this : class : ` BinaryExpression ` against the given : class : ` BinaryExpression ` . <EoL>
<BoL> Produce a conjunction of expressions joined by `` AND `` . <EoL>
<BoL> Produce a conjunction of expressions joined by `` OR `` . <EoL>
<BoL> Produce an ALL expression . <EoL>
<BoL> Produce an ANY expression . <EoL>
<BoL> eturn a new : class : ` .Exists ` construct , applying the given expression to the : meth : ` .Select.select_from ` method of the select statement contained . <EoL>
<BoL> eturn a new exists ( ) construct with the given expression added to its WHERE clause , joined to the existing clause via AND , if any . <EoL>
<BoL> Produce an additional FILTER against the function . <EoL>
<BoL> Produce an OVER clause against this filtered function . <EoL>
<BoL> Apply a WHERE clause to the SELECT statement referred to by this : class : ` .ScalarSelect ` . <EoL>
<BoL> Produce an OVER clause against this : class : ` .WithinGroup ` construct . <EoL>
<BoL> Deep copy the given ClauseElement , annotating each element with the given annotations dictionary . <EoL>
<BoL> Create a bound parameter in the INSERT statement to receive a 'prefetched ' default value . <EoL>
<BoL> Create a primary key expression in the INSERT statement and possibly a RETURNING clause for it . <EoL>
<BoL> create a set of tuples representing column/string pairs for use in an INSERT or UPDATE statement . <EoL>
<BoL> See : meth : ` .ColumnOperators.between ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.distinct ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.__inv__ ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.match ` . <EoL>
<BoL> See : meth : ` .ColumnOperators.__neg__ ` . <EoL>
<BoL> Produce a `` CASE `` expression . <EoL>
<BoL> Produce a `` CAST `` expression . <EoL>
<BoL> Return a : class : ` .Extract ` construct . <EoL>
<BoL> Produce a : class : ` .FunctionFilter ` object against a function . <EoL>
<BoL> Return a : class : ` Label ` object for the given : class : ` .ColumnElement ` . <EoL>
<BoL> Return a : class : ` .Tuple ` . <EoL>
<BoL> Associate a SQL expression with a particular type , without rendering `` CAST `` . <EoL>
<BoL> Produce a : class : ` .WithinGroup ` object against a function . <EoL>
<BoL> coerce the given value to : class : ` ._truncated_label ` . <EoL>
<BoL> eturn the intersection of sets a and b , counting any overlap between 'cloned ' predecessors . <EoL>
<BoL> expand the given set of ClauseElements to be the set of all 'cloned' predecessors . <EoL>
<BoL> locate Column objects within the given expression . <EoL>
<BoL> True if `` col `` is an instance of : class : ` .ColumnElement ` . <EoL>
<BoL> expand tables into individual columns in the given list of column expressions . <EoL>
<BoL> clone the given expression structure , allowing modifications by visitors . <EoL>
<BoL> Construct a new : class : ` .Exists ` against an existing : class : ` .Select ` object . <EoL>
<BoL> Construct a : class : ` .Function ` . <EoL>
<BoL> Construct a : class : ` .FunctionElement ` . <EoL>
<BoL> Return an : class : ` .Alias ` object derived from a : class : ` .Select ` . <EoL>
<BoL> Return a : class : ` .TableSample ` object . <EoL>
<BoL> Associate a callable with a particular func . name . <EoL>
<BoL> otate a comparison operator 180 degrees . <EoL>
<BoL> Convert the given value to an `` offset or limit '' clause . <EoL>
<BoL> Convert the `` offset or limit '' clause of a select construct to an integer . <EoL>
<BoL> Given an impl , adapt this type 's class to the impl assuming `` native '' . <EoL>
<BoL> Construct a new : class : ` .Variant ` . <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Support SchemaEventTarget <EoL>
<BoL> Return a new : class : ` .Variant ` which adds the given type + dialect name to the mapping , in addition to the mapping present in this : class : ` .Variant ` . <EoL>
<BoL> Suggest a type for a 'coerced ' Python value in an expression . <EoL>
<BoL> Return an ordered list of `` bound '' values in the given clause . <EoL>
<BoL> Given a target clause and a second to search within , return True if the target is plainly present in the search without any subqueries or aliases involved . <EoL>
<BoL> Given the columns clause and ORDER BY of a selectable , return a list of column expressions that can be added to the collist corresponding to the ORDER BY , without repeating those already in the collist . <EoL>
<BoL> Given a list of FROM clauses and a selectable , return the first index and element from the list of clauses which can be joined against the selectable . returns None , None if no match is found . <EoL>
<BoL> given a list of columns , return a 'reduced ' set based on natural equivalents . <EoL>
<BoL> traverse and yield only outer-exposed column elements , such as would be addressable in the WHERE clause of a SELECT if this element were in the columns clause . <EoL>
<BoL> Break up an 'order by ' expression into individual column-expressions , without DESC/ASC/NULLS FIRST/NULLS LAST <EoL>
<BoL> traverse and visit the given expression structure . <EoL>
<BoL> eceive pre-copied elements during a cloning traversal . <EoL>
<BoL> Return an optimized visit dispatch function for the cls for use by the compiler.Look for an attribute named `` visit_ '' + self.__visit_name__ on the visitor , and call it with the same kw params . <EoL>
<BoL> traverse the given expression structure , returning an iterator . <EoL>
<BoL> traverse the given expression structure , returning an iterator . <EoL>
<BoL> clone the given expression structure , allowing element replacement by a given replacement function . <EoL>
<BoL> traverse and visit the given expression structure using the depth-first iterator . <EoL>
<BoL> visit the given expression structure using the given iterator of objects . <EoL>
<BoL> Returns the current ABC cache token . <EoL>
<BoL> Return the name ( ID ) of the current chunk . <EoL>
<BoL> Return the size of the current chunk . <EoL>
<BoL> Read at most size bytes from the chunk . If size is omitted or negative , read until the end of the chunk . <EoL>
<BoL> Seek to specified position into the chunk . <EoL>
<BoL> Skip the rest of the chunk . If you are not interested in the contents of the chunk , this method should be called so that the file points to the start of the next chunk . <EoL>
<BoL> Return the docstring for the given node or None if no docstring can be found . If the node provided does not have docstrings a TypeError will be raised . <EoL>
<BoL> Parse the source into an AST node . Equivalent to compile ( source , filename , mode , PyCF_ONLY_AST ) . <EoL>
<BoL> Set the input delimiter . <EoL>
<BoL> Decode the Ascii85 encoded bytes-like object or ASCII string b . <EoL>
<BoL> Encode bytes-like object b using Ascii85 and return a bytes object . <EoL>
<BoL> Decode the Base16 encoded bytes-like object or ASCII string s . <EoL>
<BoL> Encode the bytes-like object s using Base16 and return a bytes object . <EoL>
<BoL> Decode the Base32 encoded bytes-like object or ASCII string s . <EoL>
<BoL> Encode the bytes-like object s using Base32 and return a bytes object . <EoL>
<BoL> Decode the base85-encoded bytes-like object or ASCII string b <EoL>
<BoL> Encode bytes-like object b in base85 format and return a bytes object . <EoL>
<BoL> Decode a file ; input and output are binary files . <EoL>
<BoL> Legacy alias of decodebytes ( ) . <EoL>
<BoL> Encode a file ; input and output are binary files . <EoL>
<BoL> Legacy alias of encodebytes ( ) . <EoL>
<BoL> Small main program <EoL>
<BoL> Decode bytes encoded with the standard Base64 alphabet . <EoL>
<BoL> Encode bytes-like object s using the standard Base64 alphabet . <EoL>
<BoL> Decode bytes using the URL- and filesystem-safe Base64 alphabet . <EoL>
<BoL> Encode bytes using the URL- and filesystem-safe Base64 alphabet . <EoL>
<BoL> Stop on the next line in or below the given frame . <EoL>
<BoL> Stop when returning from the given frame . <EoL>
<BoL> Stop after one line of code . <EoL>
<BoL> Start debugging from ` frame ` . <EoL>
<BoL> Stop when the line with the line no greater than the current one is reached or when returning from current frame <EoL>
<BoL> This method is called when there is the remote possibility that we ever need to stop in this function . <EoL>
<BoL> This method is called if an exception occurs , but only if we are to stop at or just below this level . <EoL>
<BoL> This method is called when we stop or break at this line . <EoL>
<BoL> This method is called when a return trap is set here . <EoL>
<BoL> Check whether we should break here because of ` b.funcname ` . <EoL>
<BoL> Determine which breakpoint for this file : line is to be acted upon . <EoL>
<BoL> Read at least wtd bytes ( or until EOF ) <EoL>
<BoL> binhex ( infilename , outfilename ) : create binhex-encoded copy of a file <EoL>
<BoL> hexbin ( infilename , outfilename ) - Decode binhexed file <EoL>
<BoL> Compress a block of data . <EoL>
<BoL> Decompress a block of data . <EoL>
<BoL> Return an iterator for one month . The iterator will yield datetime.date values and will always iterate through complete weeks , so it will yield dates outside the specified month . <EoL>
<BoL> Like itermonthdates ( ) , but will yield day numbers . For days outside the specified month the day number is 0 . <EoL>
<BoL> Like itermonthdates ( ) , but will yield ( day number , weekday number ) tuples . For days outside the specified month the day number is 0 . <EoL>
<BoL> Return an iterator for one week of weekday numbers starting with the configured first one . <EoL>
<BoL> Return a matrix ( list of lists ) representing a month 's calendar . Each row represents a week ; week entries are datetime.date values . <EoL>
<BoL> Return a matrix representing a month 's calendar . <EoL>
<BoL> Return a matrix representing a month 's calendar . Each row represents a week ; days outside this month are zero . <EoL>
<BoL> Return the data for the specified year ready for formatting . <EoL>
<BoL> Return the data for the specified year ready for formatting ( similar to yeardatescalendar ( ) ) . <EoL>
<BoL> Return the data for the specified year ready for formatting ( similar to yeardatescalendar ( ) ) . <EoL>
<BoL> Return a day as a table cell . <EoL>
<BoL> Return a formatted month as a table . <EoL>
<BoL> Return a month name as a table row . <EoL>
<BoL> Return a complete week as a table row . <EoL>
<BoL> Return a weekday name as a table header . <EoL>
<BoL> Return a header for a week as a table row . <EoL>
<BoL> Return a formatted year as a table of tables . <EoL>
<BoL> Return a formatted year as a complete HTML page . <EoL>
<BoL> Returns a formatted day . <EoL>
<BoL> Return a month 's calendar string ( multi-line ) . <EoL>
<BoL> Returns a single week in a string ( no newline ) . <EoL>
<BoL> Return a header for a week . <EoL>
<BoL> Returns a year 's calendar as a multi-line string . <EoL>
<BoL> Print a month 's calendar . <EoL>
<BoL> Print a single week ( no newline ) . <EoL>
<BoL> Print a year 's calendar . <EoL>
<BoL> Return a formatted month name . <EoL>
<BoL> Returns a formatted week day name . <EoL>
<BoL> Prints multi-column formatting for year calendars <EoL>
<BoL> Returns a string formatted from n strings , centered within n columns . <EoL>
<BoL> Return True for leap years , False for non-leap years . <EoL>
<BoL> Return number of leap years in range [ y1 , y2 ) . Assume y1 < = y2 . <EoL>
<BoL> Return weekday ( 0-6 ~ Mon-Sun ) and number of days ( 28-31 ) for year , month . <EoL>
<BoL> Return weekday ( 0-6 ~ Mon-Sun ) for year ( 1970- ... ) , month ( 1-12 ) , day ( 1-31 ) . <EoL>
<BoL> _factory is called with no arguments to create a new message obj <EoL>
<BoL> Parse all remaining data and return the root message object . <EoL>
<BoL> Push more data into the parser . <EoL>
<BoL> line is always bytes , not string <EoL>
<BoL> Dictionary style __contains__ method . <EoL>
<BoL> Dictionary style indexing . <EoL>
<BoL> Dictionary style len ( x ) support . <EoL>
<BoL> monkey patch for FieldStorage.__repr__ <EoL>
<BoL> Return the first value received . <EoL>
<BoL> Return list of received values . <EoL>
<BoL> Dictionary style get ( ) method , including 'value ' lookup . <EoL>
<BoL> Dictionary style keys ( ) method . <EoL>
<BoL> Overridable : return a readable & writable file . <EoL>
<BoL> Internal : read binary data . <EoL>
<BoL> Internal : read lines until EOF or outerboundary . <EoL>
<BoL> Internal : read lines until EOF . <EoL>
<BoL> Internal : read lines until outerboundary . Data is read as bytes : boundaries and line ends must be converted to bytes for comparisons . <EoL>
<BoL> Internal : read a part that is itself multipart . <EoL>
<BoL> Internal : read an atomic part . <EoL>
<BoL> Internal : read data in query string format . <EoL>
<BoL> Internal : skip lines until outer boundary if defined . <EoL>
<BoL> Constructor from field name and value . <EoL>
<BoL> Return printable representation . <EoL>
<BoL> Close the log file . <EoL>
<BoL> Write a log message to the log file . See initlog ( ) for docs . <EoL>
<BoL> Deprecated API . <EoL>
<BoL> Write a log message , if there is a log file . <EoL>
<BoL> Dummy function , assigned to log when logging is disabled . <EoL>
<BoL> Parse a query in the environment or from a file ( default stdin ) <EoL>
<BoL> Parse multipart input . <EoL>
<BoL> Parse a query given as a string argument . <EoL>
<BoL> Parse a query given as a string argument . <EoL>
<BoL> Dump the current directory as HTML . <EoL>
<BoL> Dump the shell environment as HTML . <EoL>
<BoL> Dump a list of environment variables used by CGI as HTML . <EoL>
<BoL> Dump the contents of a form as HTML . <EoL>
<BoL> Robust test CGI script , usable as main program . <EoL>
<BoL> Install an exception handler that formats tracebacks as HTML . <EoL>
<BoL> Return a nice HTML document describing a given traceback. < p > A problem occurred in a Python script . Here is the sequence of function calls leading up to the error , in the order they occurred. < /p > <EoL>
<BoL> Find the value for a given name in the given environment . <EoL>
<BoL> Return a string that resets the CGI and browser to a known state. < ! -- : spam Content-Type : text/html <EoL>
<BoL> Scan one logical line of Python and look up values of variables used . <EoL>
<BoL> Return a plain text document describing a given traceback.A problem occurred in a Python script . Here is the sequence of function calls leading up to the error , in the order they occurred . <EoL>
<BoL> Instantiate a line-oriented interpreter framework . <EoL>
<BoL> Repeatedly issue a prompt , accept input , parse an initial prefix off the received input , and dispatch to action methods , passing them the remainder of the line as argument . <EoL>
<BoL> Return the next possible completion for 'text ' . <EoL>
<BoL> Called on an input line when the command prefix is not recognized . <EoL>
<BoL> Interpret the argument as though it had been typed in response to the prompt . <EoL>
<BoL> Parse the line into a command name and a string containing the arguments . <EoL>
<BoL> Hook method executed just before the command line is interpreted , but after the input prompt is generated and issued . <EoL>
<BoL> Compile a command and determine whether it is incomplete . <EoL>
<BoL> Constructor . <EoL>
<BoL> Compile a command and determine whether it is incomplete . <EoL>
<BoL> Closely emulate the interactive Python interpreter . <EoL>
<BoL> Decode input and returns the resulting object . <EoL>
<BoL> Encodes input and returns the resulting object . <EoL>
<BoL> Decoding iterator . <EoL>
<BoL> Encoding iterator . <EoL>
<BoL> Return the next item from the asynchronous generator . When exhausted , raise StopAsyncIteration . <EoL>
<BoL> Raise GeneratorExit inside coroutine . <EoL>
<BoL> Send a value into the asynchronous generator . Return next yielded value or raise StopAsyncIteration . <EoL>
<BoL> Raise an exception in the asynchronous generator . Return next yielded value or raise StopAsyncIteration . <EoL>
<BoL> Script main program . <EoL>
<BoL> Initializes a new ProcessPoolExecutor instance . <EoL>
<BoL> Initializes a new ThreadPoolExecutor instance . <EoL>
<BoL> Iterate on the list *fs* , yielding finished futures one by one in reverse order . Before yielding a future , *waiter* is removed from its waiters and the future is removed from each set in the collection of sets *ref_collect* . <EoL>
<BoL> Specialized implementation of itertools.chain.from_iterable . Each item in *iterable* should be a list . This function is careful not to keep references to yielded objects . <EoL>
<BoL> Iterates over zip ( ) ed iterables in chunks . <EoL>
<BoL> Processes a chunk of an iterable passed to map . <EoL>
<BoL> Evaluates calls from call_queue and places the results in result_queue . <EoL>
<BoL> Helper to correctly register callbacks to __exit__ methods <EoL>
<BoL> Registers an arbitrary callback and arguments . <EoL>
<BoL> Immediately unwind the context stack <EoL>
<BoL> Enters the supplied context manager <EoL>
<BoL> Preserve the context stack by transferring it to a new instance <EoL>
<BoL> Registers a callback with the standard __exit__ method signature <EoL>
<BoL> Keeps a reference to the object x in the memo . <EoL>
<BoL> Used by pickle protocol 4 , instead of __newobj__ to allow classes with keyword-only arguments to be pickled correctly . <EoL>
<BoL> Return a list of slot names for a given class . <EoL>
<BoL> Register an extension code . <EoL>
<BoL> Unregister an extension code . For testing only . <EoL>
<BoL> Return a string representing the one-way hash of a password , with a salt prepended . <EoL>
<BoL> Generate a salt for the specified method . <EoL>
<BoL> The delimiter /should/ occur the same number of times on each row . <EoL>
<BoL> Looks for text enclosed between two identical quotes ( the probable quotechar ) which are preceded and followed by the same character ( the probable delimiter ) . <EoL>
<BoL> Returns a dialect ( or None ) corresponding to the sample <EoL>
<BoL> Return the type with the 'other ' byte order . Simple types like c_int and so on already have __ctype_be__ and __ctype_le__ attributes which contain the types , for more complicated types arrays and structures are supported . <EoL>
<BoL> Find a library or framework using dyld semantics <EoL>
<BoL> For a potential path iterator , add DYLD_IMAGE_SUFFIX semantics <EoL>
<BoL> A dylib name can take one of the following four forms : Location/Name.SomeVersion_Suffix.dylib Location/Name.SomeVersion.dylib Location/Name_Suffix.dylib Location/Name.dylib <EoL>
<BoL> Find a framework using dyld semantics in a very loose manner . <EoL>
<BoL> A framework name can take one of the following four forms : Location/Name.framework/Versions/SomeVersion/Name_Suffix Location/Name.framework/Versions/SomeVersion/Name Location/Name.framework/Name_Suffix Location/Name.framework/Name <EoL>
<BoL> Wrapper function that initializes curses and calls another function , restoring normal keyboard/screen behavior on error . The callable object 'func ' is then passed the main window 'stdscr' as its first argument , followed by any other arguments passed to wrapper ( ) . <EoL>
<BoL> Open the database file , filename , and return corresponding object . <EoL>
<BoL> Open or create database at path given by *file* . <EoL>
<BoL> Construct a text differencer , with optional filters . <EoL>
<BoL> Generate comparison results for a same-tagged range . <EoL>
<BoL> When replacing one block of lines with another , search the blocks for *similar* lines ; the best-matching pair ( if any ) is used as a synch point , and intraline difference marking is done on the similar pair . Lots of work , but often worth it . <EoL>
<BoL> Format `` ? '' output and deal with leading tabs . <EoL>
<BoL> Compare two sequences of lines ; generate the resulting delta . <EoL>
<BoL> Collects mdiff output into separate lists <EoL>
<BoL> Makes list of `` next '' links <EoL>
<BoL> Returns HTML markup of `` from '' / `` to '' text lines <EoL>
<BoL> Returns iterator that splits ( wraps ) mdiff text lines <EoL>
<BoL> Create unique anchor prefixes <EoL>
<BoL> Builds list of text lines by splitting text lines at wrap point <EoL>
<BoL> Returns from/to line lists with tabs expanded and newlines removed . <EoL>
<BoL> Return 1 for ignorable character : iff ` ch ` is a space or tab . <EoL>
<BoL> Return 1 for ignorable line : iff ` line ` is blank or contains a single ' # ' . <EoL>
<BoL> Construct a SequenceMatcher . <EoL>
<BoL> Find longest matching block in a [ alo : ahi ] and b [ blo : bhi ] . <EoL>
<BoL> Return number of ` ch ` characters at the start of ` line ` . <EoL>
<BoL> Find the n largest elements in a dataset . <EoL>
<BoL> Use SequenceMatcher to return list of the best `` good enough '' matches . <EoL>
<BoL> Compare ` a ` and ` b ` ( lists of strings ) ; return a ` Differ ` -style delta . <EoL>
<BoL> Generate one of the two sequences that generated a delta . <EoL>
<BoL> Return a formatted view of the bytecode operations . <EoL>
<BoL> Construct a Bytecode from the given traceback <EoL>
<BoL> Return formatted information about the code object . <EoL>
<BoL> Format instruction details for inclusion in disassembly output <EoL>
<BoL> Compile the source string , then disassemble the code object . <EoL>
<BoL> Helper to handle methods , functions , generators , strings and raw code objects <EoL>
<BoL> Helper to get optional details about const references <EoL>
<BoL> Helper to get optional details about named references <EoL>
<BoL> Simple test program to disassemble a file . <EoL>
<BoL> Attempts to compile the given source , first as an expression and then as a statement if the first approach fails . <EoL>
<BoL> Formatted details of methods , functions , or code . <EoL>
<BoL> Disassemble classes , methods , functions , generators , or code . <EoL>
<BoL> Disassemble a code object . <EoL>
<BoL> Disassemble a traceback ( default : last traceback ) . <EoL>
<BoL> Detect all offsets in a byte code which are jump targets . <EoL>
<BoL> Find the offsets in a byte code which are start of lines in the source . <EoL>
<BoL> Iterator for the opcodes in methods , functions or code <EoL>
<BoL> Return pretty representation of code flags . <EoL>
<BoL> Print details of methods , functions , or code to *file* . <EoL>
<BoL> Returns a gid , given a group name . <EoL>
<BoL> Returns an uid , given a user name . <EoL>
<BoL> Returns the first format from the 'format ' list that is unknown . <EoL>
<BoL> Create a zip file from all the files under 'base_dir ' . <EoL>
<BoL> Set final values for all the options that this command supports . <EoL>
<BoL> Set default values for all the options that this command supports . <EoL>
<BoL> A command 's raison d'etre : carry out the action it exists to perform , controlled by the options initialized in 'initialize_options ( ) ' , customized by other commands , the setup script , the command-line , and config files , and finalized in 'finalize_options ( ) ' . All terminal output and filesystem interaction should be done by 'run ( ) ' . <EoL>
<BoL> Given a Requirement , remove environment markers and return it . <EoL>
<BoL> Convert requirements in ` extras_require ` of the form ` `` extra '' : [ `` barbazquux ; { marker } '' ] ` to ` `` extra : { marker } '' : [ `` barbazquux '' ] ` . <EoL>
<BoL> Handle 'exclude ( ) ' for list/tuple attrs without a special handle <EoL>
<BoL> Convert feature name to corresponding option attribute name <EoL>
<BoL> Add/remove features and resolve dependencies between them <EoL>
<BoL> Set ` metadata.python_requires ` and fix environment markers in ` install_requires ` and ` extras_require ` . <EoL>
<BoL> Handle 'include ( ) ' for list/tuple attrs without a special handle <EoL>
<BoL> Move requirements in ` install_requires ` that are using environment markers ` extras_require ` . <EoL>
<BoL> Set feature 's inclusion status <EoL>
<BoL> Add -- with-X/ -- without-X options based on optional features <EoL>
<BoL> For a requirement , return the 'extras_require ' suffix for that requirement . <EoL>
<BoL> Remove items from distribution that are named in keyword arguments <EoL>
<BoL> Remove packages , modules , and extensions in named package <EoL>
<BoL> Return 1 if feature is included , 0 if excluded , 'None ' if unknown <EoL>
<BoL> Fetch an egg needed for building <EoL>
<BoL> Resolve pre-setup requirements <EoL>
<BoL> Return a ' { cmd : { opt : val } } ' map of all command-line options <EoL>
<BoL> Pluggable version of get_command_class ( ) <EoL>
<BoL> If there were any non-global `` display-only '' options ( -- help-commands or the metadata display options ) on the command line , display the requested info and return true ; else return false . <EoL>
<BoL> Return true if 'exclude_package ( package ) ' would do something <EoL>
<BoL> Add items to distribution that are named in keyword arguments <EoL>
<BoL> Request inclusion of feature named 'name <EoL>
<BoL> Yield all packages , modules , and extension names in distribution <EoL>
<BoL> Process features after parsing command line options <EoL>
<BoL> Parses configuration files from various levels and loads configuration . <EoL>
<BoL> Print list of available formats ( arguments to `` -- format '' option ) . <EoL>
<BoL> Take the full path 'path ' , and make it a relative path . <EoL>
<BoL> Return a string containing the major and minor Python version , leaving off the patchlevel . Sample return values could be ' 1.5' or ' 2.2 ' . <EoL>
<BoL> Recursively remove an entire directory tree . <EoL>
<BoL> Create all the empty directories under 'base_dir ' needed to put 'files' there . <EoL>
<BoL> Check that 'self.compiler ' really is a CCompiler object ; if not , make it one . <EoL>
<BoL> Dumps a file content into log.info . <EoL>
<BoL> Print 'msg ' to stdout if the global DEBUG ( taken from the DISTUTILS_DEBUG environment variable ) flag is true . <EoL>
<BoL> Select strings ( presumably filenames ) from 'self.files ' that match 'pattern ' , a Unix-style wildcard ( glob ) pattern . Patterns are not quite the same as implemented by the 'fnmatch ' module : '*' and ' ? ' match non-special characters , where `` special '' is platform- dependent : slash on Unix ; colon , slash , and backslash on DOS/Windows ; and colon on Mac OS . <EoL>
<BoL> Return 'pathname ' as a name that will work on the native filesystem , i.e . <EoL>
<BoL> Create a class object dynamically using the appropriate metaclass . <EoL>
<BoL> Call the __prepare__ method of the appropriate metaclass . <EoL>
<BoL> Add all the default files to self.filelist : - README or README.txt - setup.py - test/test*.py - all pure Python modules mentioned in setup script - all files pointed by package_data ( build_py ) - all files defined in data_files . <EoL>
<BoL> Create the source distribution ( s ) . <EoL>
<BoL> Create the directory tree that will become the source distribution archive . <EoL>
<BoL> Read the manifest file ( named by 'self.manifest ' ) and use it to fill in 'self.filelist ' , the list of files to include in the source distribution . <EoL>
<BoL> Print all possible values for the 'formats ' option ( used by the `` -- help-formats '' command-line option ) . <EoL>
<BoL> Returns rc file path . <EoL>
<BoL> Read and decode a PyPI HTTP response . <EoL>
<BoL> Reads the .pypirc file . <EoL>
<BoL> Creates a default .pypirc file . <EoL>
<BoL> Finalizes options . <EoL>
<BoL> Initialize options . <EoL>
<BoL> Replace sources with .pyx extensions to sources with the target language extension . This mechanism allows language authors to supply pre-converted sources but to prefer the .pyx sources . <EoL>
<BoL> Run a setup script in a somewhat controlled environment , and return the Distribution instance that drives things . This is useful if you need to find out the distribution meta-data ( passed as keyword args from 'script ' to 'setup ( ) ' , or the contents of the config files or command-line . <EoL>
<BoL> The gateway to the Distutils : do everything your setup script needs to do , in a highly flexible and user-driven way . Briefly : create a Distribution instance ; find and parse config files ; parse the command line ; run each Distutils command found there , customized by the options supplied to 'setup ( ) ' ( as keyword arguments ) , in config files , and on the command line . <EoL>
<BoL> Adds supports for rc and res files . <EoL>
<BoL> Find the version of an executable by running ` cmd ` in the shell . <EoL>
<BoL> Check if the current Python installation appears amenable to building extensions with GCC . <EoL>
<BoL> Tries to find 'executable ' in the directories listed in 'path ' . <EoL>
<BoL> Try to find out the versions of gcc , ld and dllwrap . <EoL>
<BoL> Try to determine if the gcc that would be used is from cygwin . <EoL>
<BoL> Create a file with the specified name and write 'contents ' ( a sequence of strings without line terminators ) to it . <EoL>
<BoL> Helper for remove_tree ( ) . <EoL>
<BoL> Reads the metadata values from a file object . <EoL>
<BoL> Write the PKG-INFO format data to a file object . <EoL>
<BoL> Write the PKG-INFO file into the release tree . <EoL>
<BoL> Populate the various data structures that keep tabs on the option table . Called by 'getopt ( ) ' before it can do anything worthwhile . <EoL>
<BoL> Generate help text ( a list of strings , one per suggested line of output ) from the option table for this FancyGetopt object . <EoL>
<BoL> Translate long option name 'long_option ' to the form it has as an attribute of some object : ie. , translate hyphens to underscores . <EoL>
<BoL> Returns the list of ( option , value ) tuples processed by the previous run of 'getopt ( ) ' . Raises RuntimeError if 'getopt ( ) ' has n't been called yet . <EoL>
<BoL> Parse command-line options in args . Store as attributes on object . <EoL>
<BoL> Return true if the option table for this parser has an option with long name 'long_option ' . <EoL>
<BoL> Set the aliases for this option parser . <EoL>
<BoL> Set the negative aliases for this option parser . 'negative_alias ' should be a dictionary mapping option names to option names , both the key and value must already be defined in the option table . <EoL>
<BoL> Ensure that 'os.environ ' has all the environment variables we guarantee that users can use in config files , command-line options , etc . Currently this includes : HOME - user 's home directory ( Unix only ) PLAT - description of the current platform , including hardware and OS ( see 'get_platform ( ) ' ) <EoL>
<BoL> Convert a 4-tuple 'help_options ' list as found in various command classes to the 3-tuple form required by FancyGetopt . <EoL>
<BoL> Read a file and parse its contents into a Message object model . <EoL>
<BoL> Return a version of the string escaped for inclusion in an RFC-822 header , by ensuring there are 8 spaces space after each newline . <EoL>
<BoL> Convert a string representation of truth to true ( 1 ) or false ( 0 ) . <EoL>
<BoL> Convert a long option name to a valid Python identifier by changing `` - '' to `` _ '' . <EoL>
<BoL> Reads a Setup file and returns Extension instances . <EoL>
<BoL> Create a new OptionDummy instance . The attributes listed in 'options ' will be initialized to None . <EoL>
<BoL> wrap_text ( text : string , width : int ) - > [ string ] <EoL>
<BoL> Copy the file 'src ' to 'dst ' ; both must be filenames . <EoL>
<BoL> Find all files under 'path ' <EoL>
<BoL> Find all files under 'dir ' and return the list of full filenames . <EoL>
<BoL> Translate a shell-like wildcard pattern to a compiled regular expression . <EoL>
<BoL> Return path to an MSVC executable program . <EoL>
<BoL> Get a list of devstudio directories ( include , lib or path ) . <EoL>
<BoL> Set environment variable 'name ' to an MSVC path type value . <EoL>
<BoL> Return the processor architecture . <EoL>
<BoL> Return a list of normalized paths with duplicates removed . <EoL>
<BoL> Return list of registry keys . <EoL>
<BoL> Return dict of registry keys and values . <EoL>
<BoL> Quote command-line arguments for DOS/Windows conventions . <EoL>
<BoL> Initialize the module as appropriate for NT <EoL>
<BoL> Initialize the module as appropriate for POSIX systems . <EoL>
<BoL> Expand Makefile-style variables -- `` $ { foo } '' or `` $ ( foo ) '' -- in 'string ' according to 'vars ' ( a dictionary mapping variable names to values ) . <EoL>
<BoL> Return full pathname of installed pyconfig.h file . <EoL>
<BoL> Return the value of a single variable using the dictionary returned by 'get_config_vars ( ) ' . Equivalent to get_config_vars ( ) .get ( name ) <EoL>
<BoL> With no arguments , return a dictionary of all configuration variables relevant for the current platform . <EoL>
<BoL> Return full pathname of installed Makefile from the Python build . <EoL>
<BoL> Return the directory containing installed Python header files . <EoL>
<BoL> Parse a config.h-style file . <EoL>
<BoL> Parse a Makefile-style file . <EoL>
<BoL> Return 'pathname ' with 'new_root ' prepended . <EoL>
<BoL> Invoke 2to3 on a list of Python files . <EoL>
<BoL> Split a string up according to Unix shell-like rules for quotes and backslashes . <EoL>
<BoL> Perform shell/Perl-style variable substitution on 'string ' . <EoL>
<BoL> Run the test case without results and without catching exceptions <EoL>
<BoL> A unittest suite for one or more doctest files . <EoL>
<BoL> Create a new DocTest containing the given examples . The DocTest 's globals are initialized with a copy of ` globs ` . <EoL>
<BoL> Check that every line in the given list starts with the given prefix ; if any line does not , then raise a ValueError . <EoL>
<BoL> Given the lines of a source string ( including prompts and leading indentation ) , check to make sure that every prompt is followed by a space character . If any line is not followed by a space character , then raise ValueError . <EoL>
<BoL> Return a dictionary containing option overrides extracted from option directives in the given source string . <EoL>
<BoL> Given a regular expression match from ` _EXAMPLE_RE ` ( ` m ` ) , return a pair ` ( source , want ) ` , where ` source ` is the matched example 's source code ( with prompts and indentation stripped ) ; and ` want ` is the example 's expected output ( with indentation stripped ) . <EoL>
<BoL> Extract all doctest examples from the given string , and collect them into a ` DocTest ` object . <EoL>
<BoL> Extract all doctest examples from the given string , and return them as a list of ` Example ` objects . Line numbers are 0-based , because it 's most common in doctests that nothing interesting appears on the same line as opening triple-quote , and so the first interesting line is called \ '' line 1\ '' then . <EoL>
<BoL> Divide the given string into examples and intervening text , and return them as a list of alternating Examples and strings . <EoL>
<BoL> Return True iff the actual output from an example ( ` got ` ) matches the expected output ( ` want ` ) . <EoL>
<BoL> Run the tests without collecting errors in a TestResult <EoL>
<BoL> Print a range of lines . <EoL>
<BoL> Call every command that was set for the current active breakpoint ( if there is one ) . <EoL>
<BoL> Check whether specified line seems to be executable . <EoL>
<BoL> Produce a reasonable default . <EoL>
<BoL> Custom displayhook for the exec in default ( ) , which prevents assignment of the _ variable in the builtins . <EoL>
<BoL> EOF Handles the receipt of EOF as a command . <EoL>
<BoL> a ( rgs ) Print the argument list of the current function . <EoL>
<BoL> alias [ name [ command [ parameter parameter ... ] ] ] Create an alias called 'name ' that executes 'command ' . <EoL>
<BoL> b ( reak ) [ ( [ filename : ] lineno | function ) [ , condition ] ] Without argument , list all breaks . <EoL>
<BoL> w ( here ) Print a stack trace , with the most recent frame at the bottom . <EoL>
<BoL> c ( ont ( inue ) ) Continue execution , only stop when a breakpoint is encountered . <EoL>
<BoL> cl ( ear ) filename : lineno\ncl ( ear ) [ bpnumber [ bpnumber ... ] ] With a space separated list of breakpoint numbers , clear those breakpoints . <EoL>
<BoL> commands [ bpnumber ] ( com ) ... ( com ) end ( Pdb ) <EoL>
<BoL> condition bpnumber [ condition ] Set a new condition for the breakpoint , an expression which must evaluate to true before the breakpoint is honored . If condition is absent , any existing condition is removed ; i.e. , the breakpoint is made unconditional . <EoL>
<BoL> d ( own ) [ count ] Move the current frame count ( default one ) levels down in the stack trace ( to a newer frame ) . <EoL>
<BoL> debug code Enter a recursive debugger that steps through the code argument ( which is an arbitrary expression or statement to be executed in the current environment ) . <EoL>
<BoL> disable bpnumber [ bpnumber ... ] Disables the breakpoints given as a space separated list of breakpoint numbers . Disabling a breakpoint means it can not cause the program to stop execution , but unlike clearing a breakpoint , it remains in the list of breakpoints and can be ( re- ) enabled . <EoL>
<BoL> display [ expression ] <EoL>
<BoL> enable bpnumber [ bpnumber ... ] Enables the breakpoints given as a space separated list of breakpoint numbers . <EoL>
<BoL> q ( uit ) \nexit Quit from the debugger . The program being executed is aborted . <EoL>
<BoL> h ( elp ) Without argument , print the list of available commands . <EoL>
<BoL> ignore bpnumber [ count ] Set the ignore count for the given breakpoint number . <EoL>
<BoL> interact <EoL>
<BoL> j ( ump ) lineno Set the next line that will be executed . <EoL>
<BoL> l ( ist ) [ first [ , last ] | . ] <EoL>
<BoL> longlist | ll List the whole source code for the current function or frame . <EoL>
<BoL> n ( ext ) Continue execution until the next line in the current function is reached or it returns . <EoL>
<BoL> p expression Print the value of the expression . <EoL>
<BoL> pp expression Pretty-print the value of the expression . <EoL>
<BoL> ( eturn ) Continue execution until the current function returns . <EoL>
<BoL> un [ args ... ] Restart the debugged python program . <EoL>
<BoL> etval Print the return value for the last return of a function . <EoL>
<BoL> s ( tep ) Execute the current line , stop at the first possible occasion ( either in a function that is called or in the current function ) . <EoL>
<BoL> source expression Try to get source code for the given object and display it . <EoL>
<BoL> tbreak [ ( [ filename : ] lineno | function ) [ , condition ] ] Same arguments as break , but sets a temporary breakpoint : it is automatically deleted when first hit . <EoL>
<BoL> u ( p ) [ count ] Move the current frame count ( default one ) levels up in the stack trace ( to an older frame ) . <EoL>
<BoL> unalias name Delete the specified alias . <EoL>
<BoL> undisplay [ expression ] <EoL>
<BoL> unt ( il ) [ lineno ] Without argument , continue execution until the line with a number greater than the current one is reached . <EoL>
<BoL> whatis arg Print the type of the argument . <EoL>
<BoL> Handles one command line during command list definition . <EoL>
<BoL> ( ! ) statement Execute the ( one-line ) statement in the context of the current stack frame . <EoL>
<BoL> Helper function for break/clear parsing -- may be overridden . <EoL>
<BoL> Interpret the argument as though it had been typed in response to the prompt . <EoL>
<BoL> Handle alias expansion and ' ; ; ' separator . <EoL>
<BoL> This method is called when there is the remote possibility that we ever need to stop in this function . <EoL>
<BoL> This function is called if an exception occurs , but only if we are to stop at or just below this level . <EoL>
<BoL> This function is called when we stop or break at this line . <EoL>
<BoL> This function is called when a return trap is set here . <EoL>
<BoL> val - > _TestClass object with associated value val . <EoL>
<BoL> get ( ) - > return TestClass 's associated value . <EoL>
<BoL> square ( ) - > square TestClass 's associated value <EoL>
<BoL> Essentially the only subtle case : <EoL>
<BoL> Return a string containing a traceback message for the given exc_info tuple ( as returned by sys.exc_info ( ) ) . <EoL>
<BoL> Return the compiler-flags associated with the future features that have been imported into the given namespace ( globs ) . <EoL>
<BoL> Return the module specified by ` module ` . <EoL>
<BoL> Debug a single doctest docstring . <EoL>
<BoL> Debug a single doctest docstring , in argument ` src ` <EoL>
<BoL> Extract script from text with examples . <EoL>
<BoL> Sets the unittest option flags . <EoL>
<BoL> Extract the test sources from a doctest docstring as a script . <EoL>
<BoL> Acquire a semaphore , decrementing the internal counter by one . <EoL>
<BoL> Release a semaphore , incrementing the internal counter by one . <EoL>
<BoL> Reset the internal flag to false . <EoL>
<BoL> Return true if and only if the internal flag is true . <EoL>
<BoL> Set the internal flag to true . <EoL>
<BoL> Block until the internal flag is true . <EoL>
<BoL> Dummy implementation of _thread.allocate_lock ( ) . <EoL>
<BoL> Release a semaphore , incrementing the internal counter by one . <EoL>
<BoL> Dummy implementation of _thread.get_ident ( ) . <EoL>
<BoL> Dummy implementation of _thread.stack_size ( ) . <EoL>
<BoL> Decode encoded word and return ( string , charset , lang , defects ) tuple . <EoL>
<BoL> Encode string using the CTE encoding that produces the shorter result . <EoL>
<BoL> Do our best to find the parameters in an invalid MIME header <EoL>
<BoL> Fold string to_encode into lines as encoded word , combining if allowed . Return the new value for last_ew , or None if ew_combine_allowed is False . <EoL>
<BoL> Fold TokenList 'part ' into the 'lines ' list as mime parameters . <EoL>
<BoL> Scan printables/quoted-pairs until endchars and return unquoted ptext . <EoL>
<BoL> Return string of contents of parse_tree folded according to RFC rules . <EoL>
<BoL> If input token contains ASCII non-printables , register a defect . <EoL>
<BoL> addr-spec = local-part `` @ '' domain <EoL>
<BoL> address = mailbox / group <EoL>
<BoL> address_list = ( address * ( `` , '' address ) ) / obs-addr-list obs-addr-list = * ( [ CFWS ] `` , '' ) address * ( `` , '' [ address / CFWS ] ) <EoL>
<BoL> angle-addr = [ CFWS ] `` < `` addr-spec `` > '' [ CFWS ] / obs-angle-addr obs-angle-addr = [ CFWS ] `` < `` obs-route addr-spec `` > '' [ CFWS ] <EoL>
<BoL> atext = < matches _atext_matcher > <EoL>
<BoL> atom = [ CFWS ] 1*atext [ CFWS ] <EoL>
<BoL> [ CFWS ] 1*attrtext [ CFWS ] <EoL>
<BoL> attrtext = 1* ( any non-ATTRIBUTE_ENDS character ) <EoL>
<BoL> bare-quoted-string = DQUOTE * ( [ FWS ] qcontent ) [ FWS ] DQUOTE <EoL>
<BoL> CFWS = ( 1* ( [ FWS ] comment ) [ FWS ] ) / FWS <EoL>
<BoL> comment = `` ( `` * ( [ FWS ] ccontent ) [ FWS ] `` ) '' ccontent = ctext / quoted-pair / comment <EoL>
<BoL> display-name = phrase <EoL>
<BoL> domain = dot-atom / domain-literal / obs-domain obs-domain = atom * ( `` . '' atom ) ) <EoL>
<BoL> domain-literal = [ CFWS ] `` [ `` * ( [ FWS ] dtext ) [ FWS ] `` ] '' [ CFWS ] <EoL>
<BoL> dot-atom = [ CFWS ] dot-atom-text [ CFWS ] <EoL>
<BoL> dot-text = 1*atext * ( `` . '' 1*atext ) <EoL>
<BoL> dtext = < printable ascii except \ [ ] > / obs-dtext obs-dtext = obs-NO-WS-CTL / quoted-pair <EoL>
<BoL> encoded-word = `` = ? '' charset `` ? '' encoding `` ? '' encoded-text `` ? = '' <EoL>
<BoL> [ CFWS ] 1*extended_attrtext [ CFWS ] <EoL>
<BoL> attrtext = 1* ( any non-ATTRIBUTE_ENDS character plus ' % ' ) <EoL>
<BoL> FWS = 1*WSP <EoL>
<BoL> group = display-name `` : '' [ group-list ] `` ; '' [ CFWS ] <EoL>
<BoL> group-list = mailbox-list / CFWS / obs-group-list obs-group-list = 1* ( [ CFWS ] `` , '' ) [ CFWS ] <EoL>
<BoL> Read everything up to one of the chars in endchars . <EoL>
<BoL> Read everything up to the next ' ; ' . <EoL>
<BoL> local-part = dot-atom / quoted-string / obs-local-part <EoL>
<BoL> mailbox = name-addr / addr-spec <EoL>
<BoL> mailbox-list = ( mailbox * ( `` , '' mailbox ) ) / obs-mbox-list obs-mbox-list = * ( [ CFWS ] `` , '' ) mailbox * ( `` , '' [ mailbox / CFWS ] ) <EoL>
<BoL> name-addr = [ display-name ] angle-addr <EoL>
<BoL> obs-local-part = word * ( `` . '' word ) <EoL>
<BoL> obs-route = obs-domain-list `` : '' obs-domain-list = * ( CFWS / `` , '' ) `` @ '' domain * ( `` , '' [ CFWS ] [ `` @ '' domain ] ) <EoL>
<BoL> attribute [ section ] [ `` * '' ] [ CFWS ] `` = '' value <EoL>
<BoL> phrase = 1*word / obs-phrase obs-phrase = word * ( word / `` . '' / CFWS ) <EoL>
<BoL> qcontent = qtext / quoted-pair <EoL>
<BoL> ctext = < printable ascii except \ ( ) > <EoL>
<BoL> quoted-string = [ CFWS ] < bare-quoted-string > [ CFWS ] <EoL>
<BoL> '* ' digits <EoL>
<BoL> token = [ CFWS ] 1*ttext [ CFWS ] <EoL>
<BoL> ttext = < matches _ttext_matcher > <EoL>
<BoL> unstructured = ( * ( [ FWS ] vchar ) *WSP ) / obs-unstruct obs-unstruct = * ( ( *LF *CR * ( obs-utext ) *LF *CR ) ) / FWS ) obs-utext = % d0 / obs-NO-WS-CTL / LF / CR <EoL>
<BoL> quoted-string / attribute <EoL>
<BoL> word = atom / quoted-string <EoL>
<BoL> disposition-type * ( `` ; '' parameter ) <EoL>
<BoL> mechanism <EoL>
<BoL> maintype `` / '' subtype * ( `` ; '' parameter ) <EoL>
<BoL> parameter * ( `` ; '' parameter ) <EoL>
<BoL> mime-version = [ CFWS ] 1*digit [ CFWS ] `` . '' [ CFWS ] 1*digit [ CFWS ] <EoL>
<BoL> Initialize a new instance . <EoL>
<BoL> Parse the next address . <EoL>
<BoL> Parse all addresses . <EoL>
<BoL> Parse an RFC 2822 addr-spec . <EoL>
<BoL> Parse an RFC 2822 atom . <EoL>
<BoL> Get a parenthesis-delimited fragment from self 's field . <EoL>
<BoL> Parse a header fragment delimited by special characters . <EoL>
<BoL> Get the complete domain name from an address . <EoL>
<BoL> Parse an RFC 2822 domain-literal . <EoL>
<BoL> Parse a sequence of RFC 2822 phrases . <EoL>
<BoL> Get a quote-delimited fragment from self 's field . <EoL>
<BoL> Parse a route address ( Return-path value ) . <EoL>
<BoL> Skip white space and extract comments . <EoL>
<BoL> Convert date to extended time tuple . <EoL>
<BoL> Turn a 10-tuple as returned by parsedate_tz ( ) into a POSIX timestamp . <EoL>
<BoL> Prepare string to be used in a quoted string . <EoL>
<BoL> Non-default values from right operand override those from left . <EoL>
<BoL> Create new Policy , possibly overriding some defaults . <EoL>
<BoL> Return a new instance with specified attributes changed . <EoL>
<BoL> + Headers are folded using the Header folding algorithm , which preserves existing line breaks in the value , and wraps each resulting line to the max_line_length . Non-ASCII binary data are CTE encoded using the unknown-8bit charset . <EoL>
<BoL> + Headers are folded using the Header folding algorithm , which preserves existing line breaks in the value , and wraps each resulting line to the max_line_length . <EoL>
<BoL> Based on policy , either raise defect or call register_defect . <EoL>
<BoL> + If the value contains binary data , it is converted into a Header object using the unknown-8bit charset . Otherwise it is returned unmodified . <EoL>
<BoL> Return the maximum allowed number of headers named 'name ' . <EoL>
<BoL> + The name is parsed as everything up to the ' : ' and returned unmodified . The value is determined by stripping leading whitespace off the remainder of the first line , joining all subsequent lines together , and stripping any trailing carriage return or linefeed characters . <EoL>
<BoL> + The name and value are returned unmodified . <EoL>
<BoL> Record 'defect ' on 'obj ' . <EoL>
<BoL> Given the header name and the value from the model , return a string containing linesep characters that implement the folding of the header according to the policy controls . <EoL>
<BoL> Given the header name and the value from the model , return binary data containing linesep characters that implement the folding of the header according to the policy controls . The value passed in by the email package may contain surrogateescaped binary data . <EoL>
<BoL> Given the header name and the value from the model , return the value to be returned to the application program that is requesting that header . <EoL>
<BoL> Given a list of linesep terminated strings constituting the lines of a single header , return the ( name , value ) tuple that should be stored in the model . <EoL>
<BoL> Given the header name and the value provided by the application program , return the ( name , value ) that should be stored in the model . <EoL>
<BoL> Return True if s contains surrogate-escaped binary data . <EoL>
<BoL> Decode a raw base64 string , returning a bytes object . <EoL>
<BoL> Encode a string with base64 . <EoL>
<BoL> Encode a single header line with Base64 encoding in a given charset . <EoL>
<BoL> Return the length of s when it is encoded with base64 . <EoL>
<BoL> Body-encode a string by converting it first to bytes . <EoL>
<BoL> Return the content-transfer-encoding used for body encoding . <EoL>
<BoL> Return the output character set . <EoL>
<BoL> Header-encode a string by converting it first to bytes . <EoL>
<BoL> Header-encode a string by converting it first to bytes . <EoL>
<BoL> Add a character set alias . <EoL>
<BoL> Add character set properties to the global registry . <EoL>
<BoL> Add a codec that map characters in the given charset to/from Unicode . <EoL>
<BoL> Set the Content-Transfer-Encoding header to 7bit or 8bit . <EoL>
<BoL> Do nothing . <EoL>
<BoL> Encode the message 's payload in quoted-printable . <EoL>
<BoL> Push some new data into this object . <EoL>
<BoL> Clone this generator with the exact same options . <EoL>
<BoL> Print the message object tree rooted at msg to the output file specified when the Generator instance was created . <EoL>
<BoL> Fold header according to policy . <EoL>
<BoL> Create a header instance for header 'name ' from 'value ' . <EoL>
<BoL> Create a header_factory that works with the Policy API . <EoL>
<BoL> Register cls as the specialized class for handling `` name '' headers . <EoL>
<BoL> A handy debugging aid <EoL>
<BoL> Iterate over the parts , returning string payloads line-by-line . <EoL>
<BoL> Iterate over the subparts with a given MIME type . <EoL>
<BoL> Return the entire formatted message as a string . <EoL>
<BoL> Return best candidate mime part for display as 'body ' of message . <EoL>
<BoL> Return an iterator over the non-main parts of a multipart . <EoL>
<BoL> Return an iterator over all immediate subparts of a multipart . <EoL>
<BoL> Convenience function to format and return a key=value pair . <EoL>
<BoL> Read a binary file and parse its contents into a Message object model . <EoL>
<BoL> Parse a bytes string into a Message object model . <EoL>
<BoL> Parse a string into a Message object model . <EoL>
<BoL> Try to identify a sound file type . <EoL>
<BoL> Parser of binary RFC 2822 and MIME email messages . <EoL>
<BoL> Create a message structure from the data in a binary file . <EoL>
<BoL> Create a message structure from a byte string . <EoL>
<BoL> Parser of RFC 2822 and MIME email messages . <EoL>
<BoL> Create a message structure from the data in a file . <EoL>
<BoL> Create a message structure from a string . <EoL>
<BoL> + Header folding is controlled by the refold_source policy setting . <EoL>
<BoL> + The same as fold if cte_type is 7bit , except that the returned value is bytes . <EoL>
<BoL> + If the value has a 'name ' attribute , it is returned to unmodified . <EoL>
<BoL> + The implementation for this class returns the max_count attribute from the specialized header class that would be used to construct a header of type 'name ' . <EoL>
<BoL> + The name is parsed as everything up to the ' : ' and returned unmodified . <EoL>
<BoL> + The name is returned unchanged . <EoL>
<BoL> Turn a match in the form =AB to the ASCII character with value 0xab <EoL>
<BoL> Return True if the octet should be escaped with body quopri . <EoL>
<BoL> Decode a quoted-printable string . <EoL>
<BoL> Encode with quoted-printable , wrapping at maxlinelen characters . <EoL>
<BoL> Return a body quoted-printable encoding length . <EoL>
<BoL> Return True if the octet should be escaped with header quopri . <EoL>
<BoL> Decode a string encoded with RFC 2045 MIME header ` Q ' encoding . <EoL>
<BoL> Encode a single header line with quoted-printable ( like ) encoding . <EoL>
<BoL> Return a header quoted-printable encoding length . <EoL>
<BoL> Turn a string in the form =AB to the ASCII character with value 0xab <EoL>
<BoL> Decode parameters list according to RFC 2231 . <EoL>
<BoL> Decode string according to RFC 2231 <EoL>
<BoL> Encode string according to RFC 2231 . <EoL>
<BoL> Turn a datetime into a date string as specified in RFC 2822 . <EoL>
<BoL> The inverse of parseaddr ( ) , this takes a 2-tuple of the form ( realname , email_address ) and returns the string value suitable for an RFC 2822 From , To or Cc header . <EoL>
<BoL> Return local time as an aware datetime object . <EoL>
<BoL> Remove quotes from a string . <EoL>
<BoL> 3.3 Generalized variable-length integers <EoL>
<BoL> 3.3 Generalized variable-length integers <EoL>
<BoL> 3.4 Bias adaptation <EoL>
<BoL> 3.2 Insertion unsort coding <EoL>
<BoL> 3.2 Insertion unsort coding <EoL>
<BoL> 3.1 Basic code point segregation <EoL>
<BoL> Return a pair ( index , pos ) , indicating the next occurrence of char in str . <EoL>
<BoL> Return the length of str , considering only characters below max . <EoL>
<BoL> Helper to support a clean default uninstall process on Windows <EoL>
<BoL> Returns a string specifying the bundled version of pip . <EoL>
<BoL> Changes anything not dundered or not a descriptor . <EoL>
<BoL> Extract all members from the value . <EoL>
<BoL> eturns index of highest bit , or -1 if value is zero or negative <EoL>
<BoL> Returns True if obj is a descriptor , False otherwise . <EoL>
<BoL> Returns True if a __dunder__ name , False otherwise . <EoL>
<BoL> Returns True if a _sunder_ name , False otherwise . <EoL>
<BoL> Make the given class un-picklable . <EoL>
<BoL> Class decorator for enumerations ensuring unique member values . <EoL>
<BoL> Clear the filecmp cache . <EoL>
<BoL> Compare two files . <EoL>
<BoL> Compare common files in two directories . <EoL>
<BoL> Close the sequence . <EoL>
<BoL> Return the line number in the current file . <EoL>
<BoL> Return the name of the file currently being read . Before the first line has been read , returns None . <EoL>
<BoL> Return the file number of the current file . When no file is currently opened , returns -1 . <EoL>
<BoL> Returns true the line just read is the first line of its file , otherwise returns false . <EoL>
<BoL> Returns true if the last line was read from sys.stdin , otherwise returns false . <EoL>
<BoL> Return the cumulative line number of the line that has just been read . <EoL>
<BoL> Close the current file so that the next iteration will read the first line from the next file ( if any ) ; lines not read from the file will not count towards the cumulative line count . <EoL>
<BoL> Return the subset of the list NAMES that match PAT . <EoL>
<BoL> Test whether FILENAME matches PATTERN , including case . <EoL>
<BoL> Translate a shell PATTERN to a regular expression . <EoL>
<BoL> Abort a file transfer . Uses out-of-band data . <EoL>
<BoL> Send new account name . <EoL>
<BoL> Close the connection without assuming anything about it . <EoL>
<BoL> Connect to host . Arguments are : - host : hostname to connect to ( string , default previous host ) - port : port to connect to ( integer , default previous port ) - timeout : the timeout to set against the ftp socket ( s ) - source_address : a 2-tuple ( host , port ) for the socket to bind to as its source address before connecting . <EoL>
<BoL> Change to a directory . <EoL>
<BoL> Set the debugging level . The required argument level means : 0 : no debugging output ( default ) 1 : print commands and responses but not body text etc . 2 : also print raw lines read and sent before stripping CR/LF <EoL>
<BoL> Delete a file . <EoL>
<BoL> List a directory in long form . <EoL>
<BoL> Get the welcome message from the server . ( this is read and squirreled away by connect ( ) ) <EoL>
<BoL> Login , default anonymous . <EoL>
<BoL> Create a new socket and send a PORT command for it . <EoL>
<BoL> Make a directory , return its full pathname . <EoL>
<BoL> List a directory in a standardized format by using MLSD command ( RFC-3659 ) . <EoL>
<BoL> Return a list of files in a given directory ( default the current ) . <EoL>
<BoL> Initiate a transfer over the data connection . <EoL>
<BoL> Return current working directory . <EoL>
<BoL> Quit , and close the connection . <EoL>
<BoL> Rename a file . <EoL>
<BoL> Retrieve data in binary mode . A new port is created for you . <EoL>
<BoL> Retrieve data in line mode . A new port is created for you . <EoL>
<BoL> Remove a directory . <EoL>
<BoL> Send a command and return the response . <EoL>
<BoL> Send an EPRT command with the current host and the given port number . <EoL>
<BoL> Send a PORT command with the current host and the given port number . <EoL>
<BoL> Use passive or active mode for data transfers . With a false argument , use the normal PORT mode , With a true argument , use the PASV command . <EoL>
<BoL> Retrieve the size of a file . <EoL>
<BoL> Store a file in binary mode . A new port is created for you . <EoL>
<BoL> Store a file in line mode . A new port is created for you . <EoL>
<BoL> Like ntransfercmd ( ) but returns only the socket . <EoL>
<BoL> Send a command and expect a response beginning with ' 2 ' . <EoL>
<BoL> Expect a response beginning with ' 2 ' . <EoL>
<BoL> Set up secure control connection by using TLS/SSL . <EoL>
<BoL> Switch back to a clear-text control connection . <EoL>
<BoL> Set up clear text data connection . <EoL>
<BoL> Set up secure data connection . <EoL>
<BoL> Copy file from one FTP-instance to another . <EoL>
<BoL> Parse the '150 ' response for a RETR request . Returns the expected transfer size or None ; size is not guaranteed to be present in the 150 message . <EoL>
<BoL> Parse the '227 ' response for a PASV request . Raises error_proto if it does not contain ' ( h1 , h2 , h3 , h4 , p1 , p2 ) ' Return ( 'host.addr.as.numbers ' , port # ) tuple . <EoL>
<BoL> Parse the '229 ' response for an EPSV request . Raises error_proto if it does not contain ' ( |||port| ) ' Return ( 'host.addr.as.numbers ' , port # ) tuple . <EoL>
<BoL> Parse the '257 ' response for a MKD or PWD request . <EoL>
<BoL> Default retrlines callback to print a line . <EoL>
<BoL> Test program . Usage : ftp [ -d ] [ -r [ file ] ] host [ -l [ dir ] ] [ -d [ dir ] ] [ -p ] [ file ] ... <EoL>
<BoL> Merges MROs in *sequences* to a single MRO using the C3 algorithm . <EoL>
<BoL> Computes the method resolution order using extended C3 linearization . <EoL>
<BoL> Calculates the method resolution order for a given class *cls* . <EoL>
<BoL> Returns the best matching implementation from *registry* for type *cls* . <EoL>
<BoL> getopt ( args , options [ , long_options ] ) - > opts , args <EoL>
<BoL> getopt ( args , options [ , long_options ] ) - > opts , args <EoL>
<BoL> Prompt for a password , with echo turned off . <EoL>
<BoL> Get the username from the environment or password database . <EoL>
<BoL> Prompt for password with echo off , using Windows getch ( ) . <EoL>
<BoL> Gets a C expression as used in PO files for plural forms and returns a Python function that implements an equivalent expression . <EoL>
<BoL> Escape all special characters . <EoL>
<BoL> Return an iterator which yields the paths matching a pathname pattern . <EoL>
<BoL> Read exactly *n* bytes from ` self._fp ` <EoL>
<BoL> Return the current file position . <EoL>
<BoL> new ( name , data=b '' ) - Return a new hashing object using the named algorithm ; optionally initialized with data ( which must be a bytes-like object ) . <EoL>
<BoL> Merge multiple sorted inputs into a single sorted output . <EoL>
<BoL> Find the n smallest elements in a dataset . <EoL>
<BoL> Create a new HMAC object . <EoL>
<BoL> Return a hash object for the current state . <EoL>
<BoL> Return a separate copy of this hashing object . <EoL>
<BoL> Return the hash value of this hashing object . <EoL>
<BoL> Like digest ( ) , but returns a string of hexadecimal digits instead . <EoL>
<BoL> Update this hashing object with the string msg . <EoL>
<BoL> Create a new hashing object and return it . <EoL>
<BoL> Connect to the host and port specified in __init__ . <EoL>
<BoL> Call data.encode ( `` latin-1 '' ) but show a better error message . <EoL>
<BoL> Parses only RFC2822 headers from a file pointer . <EoL>
<BoL> Return false if cookies should not be returned , given cookie domain . <EoL>
<BoL> Return false if cookies should not be returned , given cookie path . <EoL>
<BoL> Return true if ( and only if ) cookie should be returned to server . <EoL>
<BoL> Return true if ( and only if ) cookie should be accepted from server . <EoL>
<BoL> Return None , or the sequence of allowed domains ( as a tuple ) . <EoL>
<BoL> Return the sequence of blocked domains ( as a tuple ) . <EoL>
<BoL> If you override .return_ok ( ) , be sure to call this method . If it returns false , so should your subclass ( assuming your subclass wants to be more strict about which cookies to return ) . <EoL>
<BoL> Set the sequence of allowed domains , or None . <EoL>
<BoL> Set the sequence of blocked domains . <EoL>
<BoL> If you override .set_ok ( ) , be sure to call this method . If it returns false , so should your subclass ( assuming your subclass wants to be more strict about which cookies to accept ) . <EoL>
<BoL> Cookies are NOT loaded from the named file until either the .load ( ) or .revert ( ) method is called . <EoL>
<BoL> Load cookies from a file . <EoL>
<BoL> Save cookies to a file . <EoL>
<BoL> Return cookies as a string of `` \\n '' -separated `` Set-Cookie3 '' headers . <EoL>
<BoL> Iterates over nested mapping , depth-first , in sorted order by key . <EoL>
<BoL> Return True if domain A domain-matches domain B , according to RFC 2965 . <EoL>
<BoL> Return a tuple ( request-host , effective request-host name ) . <EoL>
<BoL> Escape any invalid characters in HTTP URL , and uppercase all escapes . <EoL>
<BoL> Returns time in seconds since epoch of time represented by a string . <EoL>
<BoL> Return True if text is a host domain name . <EoL>
<BoL> RFC 2965 , section 3.3.6 : <EoL>
<BoL> As for http2time , but parses the ISO 8601 formats : <EoL>
<BoL> Do the inverse ( almost ) of the conversion done by split_header_words . <EoL>
<BoL> Return True if text is a sort-of-like a host domain name . <EoL>
<BoL> Return string representation of Cookie in the LWP cookie file format . <EoL>
<BoL> Ad-hoc parser for Netscape protocol cookie-attributes . <EoL>
<BoL> Return reach of host h , as defined by RFC 2965 , section 1 . <EoL>
<BoL> Return request-host , as defined by RFC 2965 . <EoL>
<BoL> Path component of request-URI , as defined by RFC 2965 . <EoL>
<BoL> Parse header values into a list of lists containing key , value pairs . <EoL>
<BoL> Return a string representing time in seconds since epoch , t . <EoL>
<BoL> Return a string representing time in seconds since epoch , t . <EoL>
<BoL> Return unmatched part of re.Match object . <EoL>
<BoL> For blocking/accepting domains . <EoL>
<BoL> Quote a string for use in a cookie header . <EoL>
<BoL> Copy all data between two file objects . <EoL>
<BoL> Serve a GET request . <EoL>
<BoL> Serve a HEAD request . <EoL>
<BoL> Serve a POST request . <EoL>
<BoL> Guess the type of a file . <EoL>
<BoL> Test whether self.path corresponds to a CGI script . <EoL>
<BoL> Test whether argument path is an executable file . <EoL>
<BoL> Test whether argument path is a Python script . <EoL>
<BoL> Helper to produce a directory listing ( absent index.html ) . <EoL>
<BoL> Version of send_head that support CGI scripts <EoL>
<BoL> Translate a /-separated PATH to the local filename syntax . <EoL>
<BoL> Constructor . May be extended , do not override . <EoL>
<BoL> Handle one request , without blocking . <EoL>
<BoL> Called to clean up an individual request . <EoL>
<BoL> Return socket file number . <EoL>
<BoL> Finish one request by instantiating RequestHandlerClass . <EoL>
<BoL> Get the request and client address from the socket . <EoL>
<BoL> Handle an error gracefully . May be overridden . <EoL>
<BoL> Handle one request , possibly blocking . <EoL>
<BoL> Called if no new request arrives within self.timeout . <EoL>
<BoL> Call finish_request . <EoL>
<BoL> Handle one request at a time until shutdown . <EoL>
<BoL> Called by constructor to activate the server . <EoL>
<BoL> Override server_bind to store the server name . <EoL>
<BoL> Called to clean-up the server . <EoL>
<BoL> Called by the serve_forever ( ) loop . <EoL>
<BoL> Stops the serve_forever loop . <EoL>
<BoL> Called to shutdown and close an individual request . <EoL>
<BoL> Verify the request . May be overridden . <EoL>
<BoL> Common code for GET and HEAD commands . <EoL>
<BoL> Given a URL path , remove extra '/ 's and ' . ' path elements and collapse any '.. ' references and returns a collapsed path . <EoL>
<BoL> Test for executable file . <EoL>
<BoL> Internal routine to get nobody 's uid <EoL>
<BoL> Authobject to use with CRAM-MD5 authentication . <EoL>
<BoL> Append message to named mailbox . <EoL>
<BoL> Authenticate command - requires response processing . <EoL>
<BoL> ( typ , [ data ] ) = < instance > .capability ( ) Fetch capabilities list from server . <EoL>
<BoL> Checkpoint mailbox on server . <EoL>
<BoL> Close currently selected mailbox . <EoL>
<BoL> Copy 'message_set ' messages onto end of 'new_mailbox ' . <EoL>
<BoL> Create new mailbox . <EoL>
<BoL> Delete old mailbox . <EoL>
<BoL> Delete the ACLs ( remove any rights ) set for who on mailbox . <EoL>
<BoL> Send an RFC5161 enable string to the server . <EoL>
<BoL> Permanently remove deleted items from selected mailbox . <EoL>
<BoL> Fetch ( parts of ) messages . <EoL>
<BoL> Get the ACLs for a mailbox . <EoL>
<BoL> ( typ , [ data ] ) = < instance > .getannotation ( mailbox , entry , attribute ) Retrieve ANNOTATIONs . <EoL>
<BoL> Get the quota root 's resource usage and limits . <EoL>
<BoL> Get the list of quota roots for the named mailbox . <EoL>
<BoL> List mailbox names in directory matching pattern . <EoL>
<BoL> Identify client using plaintext password . <EoL>
<BoL> Force use of CRAM-MD5 authentication . <EoL>
<BoL> Shutdown connection to server . <EoL>
<BoL> List 'subscribed ' mailbox names in directory matching pattern . <EoL>
<BoL> Show my ACLs for a mailbox ( i.e . the rights that I have on mailbox ) . <EoL>
<BoL> Returns IMAP namespaces ala rfc2342 <EoL>
<BoL> Send NOOP command . <EoL>
<BoL> Setup connection to remote server on `` host : port '' ( default : localhost : standard IMAP4 port ) . This connection will be used by the routines : read , readline , send , shutdown . <EoL>
<BoL> Fetch truncated part of a message . <EoL>
<BoL> Assume authentication as `` user '' . <EoL>
<BoL> Read 'size ' bytes from remote . <EoL>
<BoL> Read line from remote . <EoL>
<BoL> Return most recent 'RECENT ' responses if any exist , else prompt server for an update using the 'NOOP ' command . <EoL>
<BoL> Rename old mailbox name to new . <EoL>
<BoL> Return data for response 'code ' if received , or None . <EoL>
<BoL> Search mailbox for matching messages . <EoL>
<BoL> Select a mailbox . <EoL>
<BoL> Send data to remote . <EoL>
<BoL> Set a mailbox acl . <EoL>
<BoL> ( typ , [ data ] ) = < instance > .setannotation ( mailbox [ , entry , attribute ] + ) Set ANNOTATIONs . <EoL>
<BoL> Set the quota root 's resource limits . <EoL>
<BoL> Close I/O established in `` open '' . <EoL>
<BoL> Return socket instance used to connect to IMAP4 server . <EoL>
<BoL> IMAP4rev1 extension SORT command . <EoL>
<BoL> Request named status conditions for mailbox . <EoL>
<BoL> Alters flag dispositions for messages in mailbox . <EoL>
<BoL> Subscribe to new mailbox . <EoL>
<BoL> IMAPrev1 extension THREAD command . <EoL>
<BoL> Execute `` command arg ... '' with messages identified by UID , rather than message number . <EoL>
<BoL> Unsubscribe from old mailbox . <EoL>
<BoL> Allow simple extension commands notified by server in CAPABILITY response . <EoL>
<BoL> Setup connection to remote server on `` host : port '' . <EoL>
<BoL> Setup a stream connection . This connection will be used by the routines : read , readline , send , shutdown . <EoL>
<BoL> Read 'size ' bytes from remote . <EoL>
<BoL> Read line from remote . <EoL>
<BoL> Send data to remote . <EoL>
<BoL> Close I/O established in `` open '' . <EoL>
<BoL> Parse an IMAP4 INTERNALDATE string . <EoL>
<BoL> GIF ( '87 and '89 variants ) <EoL>
<BoL> JPEG data in JFIF or Exif format <EoL>
<BoL> PBM ( portable bitmap ) <EoL>
<BoL> PGM ( portable graymap ) <EoL>
<BoL> PPM ( portable pixmap ) <EoL>
<BoL> Sun raster file <EoL>
<BoL> SGI image library <EoL>
<BoL> TIFF ( can be in Motorola or Intel byte order ) <EoL>
<BoL> X bitmap ( X10 or X11 ) <EoL>
<BoL> Always returns None . <EoL>
<BoL> Gross hack to contort loader to deal w/ load_* ( ) 's bad API . <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> Return the magic tag for .pyc files . <EoL>
<BoL> Return a module to initialize and into which to load . <EoL>
<BoL> Method to return the code object for fullname . <EoL>
<BoL> Abstract method which should return the value that __file__ is to be set to . <EoL>
<BoL> Abstract method which should return the source code for the module . <EoL>
<BoL> Optional method which when implemented should return whether the module is a package . <EoL>
<BoL> Return a module 's repr . <EoL>
<BoL> Compile 'data ' into a code object . <EoL>
<BoL> An abstract method that should find a module . <EoL>
<BoL> Method which returns the code object for the module . <EoL>
<BoL> Return the loaded module . <EoL>
<BoL> Return a loader for the module . <EoL>
<BoL> An optional method for clearing the finder 's cache , if any . This method is used by importlib.invalidate_caches ( ) . <EoL>
<BoL> Return ( loader , namespace portion ) for the path entry . <EoL>
<BoL> An optional method for clearing the finder 's cache , if any . This method is used by PathFinder.invalidate_caches ( ) . <EoL>
<BoL> Abstract method which when implemented should return the bytes for the specified path . The path must be a str . <EoL>
<BoL> Return the loader for the specified module . <EoL>
<BoL> Call the invalidate_caches ( ) method on all meta path finders stored in sys.meta_path ( where implemented ) . <EoL>
<BoL> Returns a list of all recognized module suffixes for this process <EoL>
<BoL> Make the module load lazily . <EoL>
<BoL> Construct a callable which returns the eager loader made lazy . <EoL>
<BoL> Trigger the load and then perform the deletion . <EoL>
<BoL> Trigger the load of the module and return the attribute . <EoL>
<BoL> Return the spec for the specified module . <EoL>
<BoL> Decorator to handle selecting the proper module for loaders . <EoL>
<BoL> Resolve a relative module name to an absolute one . <EoL>
<BoL> Set __loader__ on the returned module . <EoL>
<BoL> Set __package__ on the returned module . <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> **DEPRECATED** <EoL>
<BoL> Set default values for missing arguments . <EoL>
<BoL> Private method . Do n't use directly . <EoL>
<BoL> Get a BoundArguments object , that maps the passed ` args ` and ` kwargs ` to the function 's signature . Raises ` TypeError ` if the passed arguments can not be bound . <EoL>
<BoL> Get a BoundArguments object , that partially maps the passed ` args ` and ` kwargs ` to the function 's signature . Raises ` TypeError ` if the passed arguments can not be bound . <EoL>
<BoL> Constructs Signature for the given builtin function . <EoL>
<BoL> Constructs Signature for the given callable object . <EoL>
<BoL> Constructs Signature for the given python function . <EoL>
<BoL> Creates a customized copy of the Signature . Pass 'parameters ' and/or 'return_annotation ' arguments to override them in the new copy . <EoL>
<BoL> Get information about the arguments accepted by a code object . <EoL>
<BoL> Logic for inspecting an object given at command line <EoL>
<BoL> Private helper to transform signatures for unbound functions to bound methods . <EoL>
<BoL> Private helper function to get signature for builtin callables . <EoL>
<BoL> Private helper : constructs Signature for the given python function . <EoL>
<BoL> Private helper to parse content of '__text_signature__' and return a Signature based on it . <EoL>
<BoL> Private helper to get first parameter name from a __text_signature__ of a builtin method , which should be in the following format : ' ( $ param1 , ... ) ' . Assumptions are that the first argument wo n't have a default value or an annotation . <EoL>
<BoL> Private helper to calculate how 'wrapped_sig ' signature will look like after applying a 'functools.partial ' object ( or alike ) on it . <EoL>
<BoL> Private helper . Checks if `` cls `` has an attribute named `` method_name `` and returns it only if it is a pure python function . <EoL>
<BoL> Private helper to test if ` obj ` is a callable that might support Argument Clinic 's __text_signature__ protocol . <EoL>
<BoL> Private helper to test if ` obj ` is a duck type of FunctionType . A good example of such objects are functions compiled with Cython , which have all attributes that a pure Python function would have , but have their code statically compiled . <EoL>
<BoL> Private helper function . Takes a signature in Argument Clinic's extended signature format . <EoL>
<BoL> Return list of attribute-descriptor tuples . <EoL>
<BoL> Clean up indentation from docstrings . <EoL>
<BoL> Return the frame of the caller or None if this is not possible . <EoL>
<BoL> Return the entire source file and starting line number for an object . <EoL>
<BoL> Return an absolute path to the source or compiled file for an object . <EoL>
<BoL> Get information about the arguments accepted by a code object . <EoL>
<BoL> Get information about arguments passed into a particular frame . <EoL>
<BoL> Retrieve attributes without triggering dynamic lookup via the descriptor protocol , __getattr__ or __getattribute__ . <EoL>
<BoL> Arrange the given list of classes into a hierarchy of nested lists . <EoL>
<BoL> Get the mapping of free variables to their current values . <EoL>
<BoL> Get lines of comments immediately preceding an object 's source code . <EoL>
<BoL> Get the mapping of coroutine local variables to their current values . <EoL>
<BoL> Get current state of a coroutine object . <EoL>
<BoL> Get the documentation string for an object . <EoL>
<BoL> Get information about a frame or traceback object . <EoL>
<BoL> Get the mapping of generator local variables to their current values . <EoL>
<BoL> Get current state of a generator-iterator . <EoL>
<BoL> Get a list of records for a traceback 's frame and all lower frames . <EoL>
<BoL> Get the line number from a frame object , allowing for optimization . <EoL>
<BoL> Return the module name for a given file , or None . <EoL>
<BoL> Get a list of records for a frame and all higher ( calling ) frames . <EoL>
<BoL> Return the text of the source code for an object . <EoL>
<BoL> Return a list of source lines and starting line number for an object . <EoL>
<BoL> Return true if the object is an abstract base class ( ABC ) . <EoL>
<BoL> Return true if the object is an asynchronous generator . <EoL>
<BoL> Return true if the object is an asynchronous generator function . <EoL>
<BoL> Return true if the object is a coroutine . <EoL>
<BoL> Return true if the object is a data descriptor . <EoL>
<BoL> Return true if the object is a getset descriptor . <EoL>
<BoL> Return true if the object is a member descriptor . <EoL>
<BoL> Return true if the object is a method descriptor . <EoL>
<BoL> Return true if the object is any kind of function or method . <EoL>
<BoL> Return a list of records for the stack above the caller 's frame . <EoL>
<BoL> Return a list of records for the stack below the current exception . <EoL>
<BoL> Recursive helper function for getclasstree ( ) . <EoL>
<BoL> Network-only key function . <EoL>
<BoL> Remove an address from a larger block . <EoL>
<BoL> Compare two IP objects . <EoL>
<BoL> Generate Iterator over usable hosts in a network . <EoL>
<BoL> Tell if self is partly contained in other . <EoL>
<BoL> The subnets which join to make the current subnet . <EoL>
<BoL> The supernet containing the current network . <EoL>
<BoL> Instantiate a new IPv6 address object . <EoL>
<BoL> Compresses a list of hextets . <EoL>
<BoL> Expand a shortened IPv6 address . <EoL>
<BoL> Turn an IPv6 ip_str into an integer . <EoL>
<BoL> Make a ( netmask , prefix_len ) tuple from the given argument . <EoL>
<BoL> Convert an IPv6 hextet string into an integer . <EoL>
<BoL> Return the reverse DNS pointer name for the IPv6 address . <EoL>
<BoL> Turns a 128-bit integer into hexadecimal notation . <EoL>
<BoL> Instantiate a new IPv6 Network object . <EoL>
<BoL> Generate Iterator over usable hosts in a network . <EoL>
<BoL> Loops through the addresses , collapsing concurrent netblocks . <EoL>
<BoL> Count the number of zero bits on the right hand side . <EoL>
<BoL> Find a sequence of sorted deduplicated IPv # Address . <EoL>
<BoL> Helper to split the netmask and raise AddressValueError if needed <EoL>
<BoL> Collapse a list of IP objects . <EoL>
<BoL> Return a key suitable for sorting between networks and addresses . <EoL>
<BoL> Take an IP string/int and return an object of the correct type . <EoL>
<BoL> Summarize a network range given the first and last IP addresses . <EoL>
<BoL> Represent an address as 4 packed bytes in network ( big-endian ) order . <EoL>
<BoL> Represent an address as 16 packed bytes in network ( big-endian ) order . <EoL>
<BoL> Serialize `` obj `` as a JSON formatted stream to `` fp `` ( a `` .write ( ) `` -supporting file-like object ) . <EoL>
<BoL> Return a JSON representation of a Python string <EoL>
<BoL> Return an ASCII-only JSON representation of a Python string <EoL>
<BoL> Reduces a fixer 's pattern tree to a linear path and adds it to the matcher ( a common Aho-Corasick automaton ) . The fixer is appended on the matching states and called when they are reached <EoL>
<BoL> The main interface with the bottom matcher . <EoL>
<BoL> Internal function . Reduces a compiled pattern tree to an intermediate representation suitable for feeding the automaton . This also trims off any optional pattern elements ( like [ a ] , a* ) . <EoL>
<BoL> Drives the leaf_to_root method . The reason that leaf_to_root must be run multiple times is because we need to reject 'group ' matches ; for example the alternative form ( a | b c ) creates a group [ b c ] that needs to be matched . Since matching multiple linear patterns overcomes the automaton's capabilities , leaf_to_root merges each group into a single choice based on 'characteristic'ity , <EoL>
<BoL> Internal method . Returns a characteristic path of the pattern tree . This method must be run for all leaves until the linear subpatterns are merged into a single <EoL>
<BoL> Picks the most characteristic from a list of linear patterns Current order used is : names > common_names > common_chars <EoL>
<BoL> Tests test_func on all items of sequence and items of included sub-iterables <EoL>
<BoL> A parenthesised argument list , used by Call ( ) <EoL>
<BoL> Build an assignment statement <EoL>
<BoL> A node tuple for obj.att <EoL>
<BoL> A blank line <EoL>
<BoL> A function call <EoL>
<BoL> A comma leaf <EoL>
<BoL> A period ( . ) leaf <EoL>
<BoL> Return an import statement in the form : from package import name_leafs <EoL>
<BoL> Returns an import statement and calls a method of the module : <EoL>
<BoL> Compare two nodes for equality . <EoL>
<BoL> Constructor that prevents Base from being instantiated . <EoL>
<BoL> Return a canonical string representation . <EoL>
<BoL> Return a pretty string representation . <EoL>
<BoL> Compare two nodes for equality . <EoL>
<BoL> The whitespace and comments preceding this token in the input . <EoL>
<BoL> Return a cloned ( deep ) copy of self . <EoL>
<BoL> Return the line number which generated the invocant node . <EoL>
<BoL> Return the string immediately following the invocant node . This is effectively equivalent to node.next_sibling.prefix <EoL>
<BoL> Return a post-order iterator for the tree . <EoL>
<BoL> Return a pre-order iterator for the tree . <EoL>
<BoL> Remove the node from the tree . Returns the position of the node in its parent 's children before it was removed . <EoL>
<BoL> Replace this node with a new one in the parent . <EoL>
<BoL> A list comprehension of the form [ xp for fp in it if test ] . <EoL>
<BoL> Return a NAME leaf <EoL>
<BoL> A newline literal <EoL>
<BoL> Return a canonical string representation . <EoL>
<BoL> Return a pretty string representation . <EoL>
<BoL> Compare two nodes for equality . <EoL>
<BoL> The whitespace and comments preceding this node in the input . <EoL>
<BoL> Equivalent to 'node.children.append ( child ) ' . This method also sets the child 's parent attribute appropriately . <EoL>
<BoL> Return a cloned ( deep ) copy of self . <EoL>
<BoL> Equivalent to 'node.children.insert ( i , child ) ' . This method also sets the child 's parent attribute appropriately . <EoL>
<BoL> Return a post-order iterator for the tree . <EoL>
<BoL> Return a pre-order iterator for the tree . <EoL>
<BoL> Equivalent to 'node.children [ i ] = child ' . This method also sets the child 's parent attribute appropriately . <EoL>
<BoL> A string leaf <EoL>
<BoL> A numeric or string subscript <EoL>
<BoL> Will reuturn node if node will import name , or node will import * from package . <EoL>
<BoL> Follow an attribute chain . <EoL>
<BoL> Returns true if name is imported from package at the top level of the tree which node belongs to . To cover the case of an import like 'import foo ' , use None for the package and 'foo ' for the name . <EoL>
<BoL> Returns the node which binds variable name , otherwise None . <EoL>
<BoL> Find the indentation of *node* . <EoL>
<BoL> Find the top level namespace . <EoL>
<BoL> Returns true if node is in an environment where all that is required of it is being iterable ( ie , it does n't matter if it returns a list or an iterator ) . See test_map_nochange in test_fixers.py for some examples and tests . <EoL>
<BoL> Returns true if the node is an import statement . <EoL>
<BoL> Does the node represent a list literal ? <EoL>
<BoL> Check that something is n't an attribute or function name etc . <EoL>
<BoL> Does the node represent a tuple literal ? <EoL>
<BoL> Works like ` does_tree_import ` but adds an import statement if it was not imported . <EoL>
<BoL> Initializer . <EoL>
<BoL> Compiles a node , recursively . <EoL>
<BoL> Compiles a pattern string to a nested pytree . *Pattern object . <EoL>
<BoL> Converts raw node information to a Node or Leaf instance . <EoL>
<BoL> Tokenizes a string suppressing significant whitespace . <EoL>
<BoL> Parse a file and return the syntax tree . <EoL>
<BoL> Parse a stream and return the syntax tree . <EoL>
<BoL> Parse a stream and return the syntax tree . <EoL>
<BoL> Parse a string and return the syntax tree . <EoL>
<BoL> Parse a series of tokens and return the syntax tree . <EoL>
<BoL> Inquire whether file a was written since file b . <EoL>
<BoL> Normally , loads a pickled grammar by doing pkgutil.get_data ( package , pickled_grammar ) where *pickled_grammar* is computed from *grammar_source* by adding the Python version and using a `` .pickle `` extension . <EoL>
<BoL> Main program , when run as a script : produce grammar pickle files . <EoL>
<BoL> Copy the grammar . <EoL>
<BoL> Dump the grammar tables to a pickle file . <EoL>
<BoL> Load the grammar tables from a pickle file . <EoL>
<BoL> Load the grammar tables from a pickle bytes object . <EoL>
<BoL> Dump the grammar tables to standard output , for debugging . <EoL>
<BoL> Constructor . <EoL>
<BoL> Add a token ; return True iff this is the end of the program . <EoL>
<BoL> Turn a token into a label . ( Internal ) <EoL>
<BoL> Pop a nonterminal . ( Internal ) <EoL>
<BoL> Push a nonterminal . ( Internal ) <EoL>
<BoL> Prepare for parsing . <EoL>
<BoL> Shift a token . ( Internal ) <EoL>
<BoL> Imitates get_normal_name in tokenizer.c . <EoL>
<BoL> The detect_encoding ( ) function is used to detect the encoding that should be used to decode a Python source file . It requires one argument , readline , in the same way as the tokenize ( ) generator . <EoL>
<BoL> The tokenize ( ) function accepts two parameters : one representing the input stream , and one providing an output mechanism for tokenize ( ) . <EoL>
<BoL> Transform tokens back into Python source code . <EoL>
<BoL> Initializer . <EoL>
<BoL> Compare two nodes for equality . <EoL>
<BoL> Return a cloned ( deep ) copy of self . <EoL>
<BoL> Return a post-order iterator for the tree . <EoL>
<BoL> Return a pre-order iterator for the tree . <EoL>
<BoL> Constructor that prevents BasePattern from being instantiated . <EoL>
<BoL> Generator yielding all matches for this pattern . <EoL>
<BoL> Does this pattern exactly match a node ? <EoL>
<BoL> Does this pattern exactly match a sequence of nodes ? <EoL>
<BoL> A subclass can define this as a hook for optimizations . <EoL>
<BoL> Initializer . Takes optional type , content , and name . <EoL>
<BoL> Match the pattern 's content to the node 's children . <EoL>
<BoL> Override match ( ) to insist on a leaf node . <EoL>
<BoL> Initializer . <EoL>
<BoL> Initializer . Takes optional type , content , and name . <EoL>
<BoL> Match the pattern 's content to the node 's children . <EoL>
<BoL> Initializer . <EoL>
<BoL> Special optimized matcher for bare_name . <EoL>
<BoL> Helper to iteratively yield the matches . <EoL>
<BoL> Helper to recursively yield the matches . <EoL>
<BoL> Generator yielding matches for a sequence of nodes . <EoL>
<BoL> Does this pattern exactly match a node ? <EoL>
<BoL> Does this pattern exactly match a sequence of nodes ? <EoL>
<BoL> Optimize certain stacked wildcard patterns . <EoL>
<BoL> Convert raw node information to a Node or Leaf instance . <EoL>
<BoL> Generator yielding matches for a sequence of patterns and nodes . <EoL>
<BoL> Accepts a pytree Pattern Node and returns a set of the pattern types which will match first . <EoL>
<BoL> Accepts a list of fixers and returns a dictionary of head node type -- > fixer list . <EoL>
<BoL> Return a sorted list of all available fix names in the given package . <EoL>
<BoL> Return the fully qualified names for fixers in the package pkg_name . <EoL>
<BoL> Discard cache entries that are out of date . ( This is not checked upon each call ! ) <EoL>
<BoL> Clear the cache entirely . <EoL>
<BoL> Get the lines for a Python source file from the cache . Update the cache if it does n't contain an entry for this file already . <EoL>
<BoL> Seed the cache for filename with module_globals . <EoL>
<BoL> Update a cache entry and return its list of lines . If something 's wrong , print a message , discard the cache entry , and return an empty list . <EoL>
<BoL> strcoll ( string , string ) - > int . Compares two strings according to the locale . <EoL>
<BoL> strxfrm ( string ) - > string . Returns a string that behaves for cmp locale-aware . <EoL>
<BoL> Formats val according to the currency settings in the current locale . <EoL>
<BoL> Returns the locale-aware substitution of a % ? specifier ( percent ) . <EoL>
<BoL> Formats a string in the same way that the % formatting would use , but takes the current locale into account . Grouping is applied if the third parameter is true . <EoL>
<BoL> Return the charset that the user is likely using , according to the system configuration . <EoL>
<BoL> Convert float to string , taking the locale into account . <EoL>
<BoL> Optionally specify a formatter which will be used to format each individual record . <EoL>
<BoL> Format the specified records and return the result as a string . <EoL>
<BoL> Return the footer string for the specified records . <EoL>
<BoL> Return the header string for the specified records . <EoL>
<BoL> Determine if the specified record is to be logged . <EoL>
<BoL> Initialize the list of filters to be an empty list . <EoL>
<BoL> Format the specified record as text . <EoL>
<BoL> Return the message for this LogRecord . <EoL>
<BoL> Process the logging message and keyword arguments passed in to a logging call to insert contextual information . <EoL>
<BoL> Initialize the manager with the root node of the logger hierarchy . <EoL>
<BoL> Ensure that children of the placeholder ph are connected to the specified logger . <EoL>
<BoL> Ensure that there are either loggers or placeholders all the way from the specified logger to the root of the logger hierarchy . <EoL>
<BoL> Get a logger with the specified name ( channel name ) , creating it if it does n't yet exist . This name is a dot-separated hierarchical name , such as `` a '' , `` a.b '' , `` a.b.c '' or similar . <EoL>
<BoL> Set the factory to be used when instantiating a log record with this Manager . <EoL>
<BoL> Set the class to be used when instantiating a logger with this Manager . <EoL>
<BoL> Initialize with the specified logger being a child of this placeholder . <EoL>
<BoL> Add the specified logger as a child of this placeholder . <EoL>
<BoL> Initialize the logger with the name `` root '' . <EoL>
<BoL> Initialize the handler . <EoL>
<BoL> Acquire the module-level lock for serializing access to shared data . <EoL>
<BoL> Add a handler to the internal cleanup list using a weak reference . <EoL>
<BoL> Release the module-level lock acquired by calling _acquireLock ( ) . <EoL>
<BoL> Remove a handler reference from the internal cleanup list . <EoL>
<BoL> Implementation of showwarnings which redirects to logging , which will first check to see if the file parameter is None . <EoL>
<BoL> Associate 'levelName ' with 'level ' . <EoL>
<BoL> If capture is true , redirect all warnings to the logging package . If capture is False , ensure that warnings are not redirected to logging but to their original destinations . <EoL>
<BoL> Utility function which converts lists to tuples . <EoL>
<BoL> Default converter for the cfg : // protocol . <EoL>
<BoL> Configure an object with a user-supplied factory . <EoL>
<BoL> Convert values to an appropriate type . <EoL>
<BoL> Default converter for the ext : // protocol . <EoL>
<BoL> Resolve strings to objects using standard import and attribute syntax . <EoL>
<BoL> Add filters to a filterer from a list of names . <EoL>
<BoL> Add handlers to a logger from a list of names . <EoL>
<BoL> Perform configuration which is common to root and non-root loggers . <EoL>
<BoL> Do the configuration . <EoL>
<BoL> Configure a filter from a dictionary . <EoL>
<BoL> Configure a formatter from a dictionary . <EoL>
<BoL> Configure a handler from a dictionary . <EoL>
<BoL> Configure a non-root logger from a dictionary . <EoL>
<BoL> Configure a root logger from a dictionary . <EoL>
<BoL> Start a new thread to process the request . <EoL>
<BoL> Same as in BaseServer but as a thread . <EoL>
<BoL> Called by constructor to bind the socket . <EoL>
<BoL> Clear and close existing handlers <EoL>
<BoL> Create and return formatters <EoL>
<BoL> When ( re ) configuring logging , handle loggers which were in the previous configuration but are not in the new configuration . There 's no point deleting them as other threads may continue to hold references to them ; and by disabling them , you stop them doing any logging . <EoL>
<BoL> Install and return handlers <EoL>
<BoL> Create and install loggers <EoL>
<BoL> Resolve a dotted name to a global object . <EoL>
<BoL> Configure logging using a dictionary . <EoL>
<BoL> Read the logging configuration from a ConfigParser-format file . <EoL>
<BoL> Start up a socket server on the specified port , and listen for new configurations.Handler for a logging configuration request.Handle a request.A simple TCP socket-based logging config receiver . <EoL>
<BoL> Stop the listening server which was created with a call to listen ( ) . <EoL>
<BoL> Disable all logging calls of severity 'level ' and below . <EoL>
<BoL> Return the textual representation of logging level 'level ' . <EoL>
<BoL> Return the factory to be used when instantiating a log record . <EoL>
<BoL> Return the class to be used when instantiating a logger . <EoL>
<BoL> Use the specified filename for streamed logging <EoL>
<BoL> Emit a record . <EoL>
<BoL> When rotating , rotate the current log . <EoL>
<BoL> Modify the filename of a log file when rotating . <EoL>
<BoL> Initialize the handler with the buffer size . <EoL>
<BoL> Close the handler . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Override to implement custom flushing behaviour . <EoL>
<BoL> Should the handler flush its buffer ? <EoL>
<BoL> Initializes the handler with a specific host address and port . <EoL>
<BoL> Closes the socket . <EoL>
<BoL> Try to create a socket , using an exponential backoff with a max retry time . Thanks to Robert Olson for the original patch ( SF # 815911 ) which has been slightly refactored . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Handle an error during logging . <EoL>
<BoL> Pickles the record in binary format with a length prefix , and returns it ready for transmission across the socket . <EoL>
<BoL> The factory method of SocketHandler is here overridden to create a UDP socket ( SOCK_DGRAM ) . <EoL>
<BoL> Send a pickled string to a socket . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Default implementation of mapping the log record into a dict that is sent as the CGI data . <EoL>
<BoL> Flush , if appropriately configured , set the target to None and lose the buffer . <EoL>
<BoL> For a MemoryHandler , flushing means just sending the buffered records to the target , if there is one . Override if you want different behaviour . <EoL>
<BoL> Set the target handler for this handler . <EoL>
<BoL> Check for buffer full or a record at the flushLevel or higher . <EoL>
<BoL> Clean up this handler . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Return the event category for the record . <EoL>
<BoL> Return the event type for the record . <EoL>
<BoL> Return the message ID for the event record . <EoL>
<BoL> Initialise an instance , using the passed queue . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Enqueue a record . <EoL>
<BoL> Prepares a record for queuing . The object returned by this method is enqueued . <EoL>
<BoL> Initialise an instance with the specified queue and handlers . <EoL>
<BoL> Monitor the queue for records , and ask the handler to deal with them . <EoL>
<BoL> Dequeue a record and return it , optionally blocking . <EoL>
<BoL> This is used to enqueue the sentinel record . <EoL>
<BoL> Handle a record . <EoL>
<BoL> Prepare a record for handling . <EoL>
<BoL> Start the listener . <EoL>
<BoL> Stop the listener . <EoL>
<BoL> Open the specified file and use it as the stream for logging . <EoL>
<BoL> Do a rollover , as described in __init__ ( ) . <EoL>
<BoL> Determine if rollover should occur . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Determine the subject for the email . <EoL>
<BoL> Initializes the handler with a specific host address and port . <EoL>
<BoL> A factory method which allows subclasses to define the precise type of socket they want . <EoL>
<BoL> Send a pickled string to the socket . <EoL>
<BoL> Closes the socket . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Encode the facility and priority . You can pass in strings or integers - if strings are passed , the facility_names and priority_names mapping dictionaries are used to convert them to integers . <EoL>
<BoL> Map a logging level name to a key in the priority_names map . This is useful in two scenarios : when custom levels are being used , and in the case where you ca n't do a straightforward mapping by lowercasing the logging level name because of locale- specific issues ( see SF # 1524081 ) . <EoL>
<BoL> Work out the rollover time based on the specified time . <EoL>
<BoL> do a rollover ; in this case , a date/time stamp is appended to the filename when the rollover happens . <EoL>
<BoL> Determine the files to delete when rolling over . <EoL>
<BoL> Determine if rollover should occur . <EoL>
<BoL> Emit a record . <EoL>
<BoL> Reopen log file if needed . <EoL>
<BoL> Make a LogRecord whose attributes are defined by the specified dictionary , This function is useful for converting a logging event received over a socket connection ( which is sent as a dictionary ) into a LogRecord instance . <EoL>
<BoL> Set the factory to be used when instantiating a log record . <EoL>
<BoL> Set the class to be used when instantiating a logger . The class should define __init__ ( ) such that only a name argument is required , and the __init__ ( ) should call Logger.__init__ ( ) <EoL>
<BoL> Perform any cleanup actions in the logging system ( e.g . flushing buffers ) . <EoL>
<BoL> Return an absolute path . <EoL>
<BoL> Dummy to retain interface-compatibility with other operating systems . <EoL>
<BoL> Dummy to retain interface-compatibility with other operating systems . <EoL>
<BoL> Return the last access time of a file , reported by os.stat ( ) . <EoL>
<BoL> Return the metadata change time of a file , reported by os.stat ( ) . <EoL>
<BoL> Return the size of a file , reported by os.stat ( ) . <EoL>
<BoL> Return true if a path is absolute . <EoL>
<BoL> Return true if the pathname refers to a symbolic link . <EoL>
<BoL> Test whether a path exists . Returns True for broken symbolic links <EoL>
<BoL> Normalize a pathname . Will return the same result for equivalent paths . <EoL>
<BoL> Test whether two pathnames reference the same actual file <EoL>
<BoL> Test whether two open file objects reference the same file <EoL>
<BoL> Test whether two stat buffers reference the same file <EoL>
<BoL> Split a pathname into two parts : the directory leading up to the final bit , and the basename ( the filename , without colons , in that directory ) . The result ( s , t ) is such that join ( s , t ) yields the original argument . <EoL>
<BoL> Split a pathname into a drive specification and the rest of the path . Useful on DOS/Windows/NT ; on the Mac , the drive is always empty ( do n't use the volume name -- it does n't have the same syntactic and semantic oddities as DOS drive letters , such as there being a separate current directory per drive ) . <EoL>
<BoL> Return True if the keyed message exists , False otherwise . <EoL>
<BoL> Return the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Initialize a Babyl mailbox . <EoL>
<BoL> Return a count of messages in the mailbox . <EoL>
<BoL> Replace the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Append message to mailbox and return ( start , stop ) offsets . <EoL>
<BoL> Generate key-to- ( start , stop ) table of contents . <EoL>
<BoL> Write message contents and return ( start , stop ) . <EoL>
<BoL> Return ( start , stop ) or raise KeyError . <EoL>
<BoL> Called after writing each message to file f . <EoL>
<BoL> Called before writing the mailbox to file f . <EoL>
<BoL> Called before writing each message to file f . <EoL>
<BoL> Add message and return assigned key . <EoL>
<BoL> Delete all messages . <EoL>
<BoL> Flush and close the mailbox . <EoL>
<BoL> If the keyed message exists , remove it . <EoL>
<BoL> Write any pending changes to disk . <EoL>
<BoL> Return the keyed message , or default if it does n't exist . <EoL>
<BoL> Return a string representation or raise a KeyError . <EoL>
<BoL> Return a file-like representation or raise a KeyError . <EoL>
<BoL> Return a list of user-defined labels in the mailbox . <EoL>
<BoL> Return a Message representation or raise a KeyError . <EoL>
<BoL> Return a string representation or raise a KeyError . <EoL>
<BoL> Return a list of ( key , message ) tuples . Memory intensive . <EoL>
<BoL> Return an iterator over ( key , message ) tuples . <EoL>
<BoL> Return an iterator over keys . <EoL>
<BoL> Return an iterator over all messages . <EoL>
<BoL> Return a list of keys . <EoL>
<BoL> Lock the mailbox . <EoL>
<BoL> Delete the keyed message and return it , or default . <EoL>
<BoL> Delete an arbitrary ( key , message ) pair and return it . <EoL>
<BoL> Remove the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Unlock the mailbox if it is locked . <EoL>
<BoL> Change the messages that correspond to certain keys . <EoL>
<BoL> Return a list of messages . Memory intensive . <EoL>
<BoL> Initialize a BabylMessage instance . <EoL>
<BoL> Assume the non-format-specific state of message . <EoL>
<BoL> Copy Babyl-specific state to message insofar as possible . <EoL>
<BoL> Add label to list of labels on the message . <EoL>
<BoL> Return a list of labels on the message . <EoL>
<BoL> Return a Message representation of visible headers . <EoL>
<BoL> Remove label from the list of labels on the message . <EoL>
<BoL> Set the list of labels on the message . <EoL>
<BoL> Set the Message representation of visible headers . <EoL>
<BoL> Update and/or sensibly generate a set of visible headers . <EoL>
<BoL> Return True if the keyed message exists , False otherwise . <EoL>
<BoL> Initialize an MH instance . <EoL>
<BoL> Return a count of messages in the mailbox . <EoL>
<BoL> Replace the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Inspect a new MHMessage and update sequences appropriately . <EoL>
<BoL> Add message and return assigned key . <EoL>
<BoL> Create a folder and return an MH instance representing it . <EoL>
<BoL> Flush and close the mailbox . <EoL>
<BoL> Write any pending changes to the disk . <EoL>
<BoL> Return a bytes representation or raise a KeyError . <EoL>
<BoL> Return a file-like representation or raise a KeyError . <EoL>
<BoL> Return an MH instance for the named folder . <EoL>
<BoL> Return a Message representation or raise a KeyError . <EoL>
<BoL> Return a name-to-key-list dictionary to define each sequence . <EoL>
<BoL> Return an iterator over keys . <EoL>
<BoL> Return a list of folder names . <EoL>
<BoL> Lock the mailbox . <EoL>
<BoL> Re-name messages to eliminate numbering gaps . Invalidates keys . <EoL>
<BoL> Remove the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Delete the named folder , which must be empty . <EoL>
<BoL> Set sequences using the given name-to-key-list dictionary . <EoL>
<BoL> Unlock the mailbox if it is locked . <EoL>
<BoL> Initialize an MHMessage instance . <EoL>
<BoL> Copy MH-specific state to message insofar as possible . <EoL>
<BoL> Add sequence to list of sequences including the message . <EoL>
<BoL> Return a list of sequences that include the message . <EoL>
<BoL> Remove sequence from the list of sequences including the message . <EoL>
<BoL> Set the list of sequences that include the message . <EoL>
<BoL> Initialize an MMDF mailbox . <EoL>
<BoL> Replace the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Generate key-to- ( start , stop ) table of contents . <EoL>
<BoL> Format a message and blindly write to self._file . <EoL>
<BoL> Called after writing each message to file f . <EoL>
<BoL> Called before writing the mailbox to file f . <EoL>
<BoL> Called before writing each message to file f . <EoL>
<BoL> Add message and return assigned key . <EoL>
<BoL> Return a string representation or raise a KeyError . <EoL>
<BoL> Return a file-like representation or raise a KeyError . <EoL>
<BoL> Return a Message representation or raise a KeyError . <EoL>
<BoL> Return a string representation or raise a KeyError . <EoL>
<BoL> Remove the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Initialize an mboxMMDFMessage instance . <EoL>
<BoL> Copy mbox- or MMDF-specific state to message insofar as possible . <EoL>
<BoL> Set the given flag ( s ) without changing others . <EoL>
<BoL> Return as a string the flags that are set . <EoL>
<BoL> Return contents of `` From `` line . <EoL>
<BoL> Unset the given string flag ( s ) without changing others . <EoL>
<BoL> Set the given flags and unset all others . <EoL>
<BoL> Set `` From `` line , formatting and appending time_ if specified . <EoL>
<BoL> Return True if the keyed message exists , False otherwise . <EoL>
<BoL> Initialize a Mailbox instance . <EoL>
<BoL> Return a count of messages in the mailbox . <EoL>
<BoL> Replace the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Add message and return assigned key . <EoL>
<BoL> Flush and close the mailbox . <EoL>
<BoL> Write any pending changes to the disk . <EoL>
<BoL> Return a byte string representation or raise a KeyError . <EoL>
<BoL> Return a file-like representation or raise a KeyError . <EoL>
<BoL> Return a Message representation or raise a KeyError . <EoL>
<BoL> Return an iterator over keys . <EoL>
<BoL> Lock the mailbox . <EoL>
<BoL> Remove the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Unlock the mailbox if it is locked . <EoL>
<BoL> Return True if the keyed message exists , False otherwise . <EoL>
<BoL> Initialize a Maildir instance . <EoL>
<BoL> Return a count of messages in the mailbox . <EoL>
<BoL> Replace the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Create a file in the tmp subdirectory and open and return it . <EoL>
<BoL> Use TOC to return subpath for given key , or raise a KeyError . <EoL>
<BoL> Update table of contents mapping . <EoL>
<BoL> Add message and return assigned key . <EoL>
<BoL> Create a folder and return a Maildir instance representing it . <EoL>
<BoL> Delete old files in `` tmp '' . <EoL>
<BoL> Flush and close the mailbox . <EoL>
<BoL> If the keyed message exists , remove it . <EoL>
<BoL> Write any pending changes to disk . <EoL>
<BoL> Return a bytes representation or raise a KeyError . <EoL>
<BoL> Return a file-like representation or raise a KeyError . <EoL>
<BoL> Return a Maildir instance for the named folder . <EoL>
<BoL> Return a Message representation or raise a KeyError . <EoL>
<BoL> Return an iterator over keys . <EoL>
<BoL> Return a list of folder names . <EoL>
<BoL> Lock the mailbox . <EoL>
<BoL> Return the next message in a one-time iteration . <EoL>
<BoL> Remove the keyed message ; raise KeyError if it does n't exist . <EoL>
<BoL> Delete the named folder , which must be empty . <EoL>
<BoL> Unlock the mailbox if it is locked . <EoL>
<BoL> Initialize a MaildirMessage instance . <EoL>
<BoL> Copy Maildir-specific state to message insofar as possible . <EoL>
<BoL> Set the given flag ( s ) without changing others . <EoL>
<BoL> Return delivery date of message , in seconds since the epoch . <EoL>
<BoL> Return as a string the flags that are set . <EoL>
<BoL> Get the message 's `` info '' as a string . <EoL>
<BoL> Return 'new ' or 'cur ' . <EoL>
<BoL> Unset the given string flag ( s ) without changing others . <EoL>
<BoL> Set delivery date of message , in seconds since the epoch . <EoL>
<BoL> Set the given flags and unset all others . <EoL>
<BoL> Set the message 's `` info '' string . <EoL>
<BoL> Set subdir to 'new ' or 'cur ' . <EoL>
<BoL> Initialize a Message instance . <EoL>
<BoL> Copy format-specific state to message insofar as possible . <EoL>
<BoL> Context management protocol support . <EoL>
<BoL> Initialize a _PartialFile . <EoL>
<BoL> Iterate over lines . <EoL>
<BoL> Read size bytes using read_method , honoring start and stop . <EoL>
<BoL> Read bytes . <EoL>
<BoL> Read bytes . <EoL>
<BoL> Read a line . <EoL>
<BoL> Read multiple lines . <EoL>
<BoL> Change position , possibly with respect to start or stop . <EoL>
<BoL> Return the position with respect to start . <EoL>
<BoL> Initialize a _ProxyFile . <EoL>
<BoL> Read size bytes using read_method . <EoL>
<BoL> Close the file . <EoL>
<BoL> Change position . <EoL>
<BoL> Return the position . <EoL>
<BoL> Create a file if it does n't exist and open for reading and writing . <EoL>
<BoL> Create a temp file based on path and open for reading and writing . <EoL>
<BoL> Lock file f using lockf and dot locking . <EoL>
<BoL> Initialize a single-file mailbox . <EoL>
<BoL> Called after writing each message to file f . <EoL>
<BoL> Called before writing each message to file f . <EoL>
<BoL> Close file f , ensuring all changes are physically on disk . <EoL>
<BoL> Ensure changes to file f are physically on disk . <EoL>
<BoL> Unlock file f using lockf and dot locking . <EoL>
<BoL> Initialize an mbox mailbox . <EoL>
<BoL> Generate key-to- ( start , stop ) table of contents . <EoL>
<BoL> Called after writing each message to file f . <EoL>
<BoL> Read a mailcap file and return a dictionary keyed by MIME type . <EoL>
<BoL> Find a match for a mailcap entry . <EoL>
<BoL> Return a dictionary containing the mailcap database . <EoL>
<BoL> Return a list of all mailcap files found on the system . <EoL>
<BoL> Separate one key-value pair in a mailcap entry . <EoL>
<BoL> Parse one entry in a mailcap file and return a dictionary . <EoL>
<BoL> Read a mailcap file and return a dictionary keyed by MIME type . <EoL>
<BoL> Add a mapping between a type and an extension . <EoL>
<BoL> Guess the extensions for a file based on its MIME type . <EoL>
<BoL> Guess the extension for a file based on its MIME type . <EoL>
<BoL> Return a list of modules that appear to be missing . Use any_missing_maybe ( ) if you want to know which modules are certain to be missing , and which *may* be missing . <EoL>
<BoL> Return two lists , one with modules that are certainly missing and one with modules that *may* be missing . The latter names could either be submodules *or* just global names in the package . <EoL>
<BoL> Print a report to stdout , listing the found modules with their paths , as well as modules that are missing , or seem to be missing . <EoL>
<BoL> Returns a connection to the address of a ` Listener ` <EoL>
<BoL> Accept a connection on the bound socket or named pipe of ` self ` . <EoL>
<BoL> Close the bound socket or named pipe of ` self ` . <EoL>
<BoL> Returns pair of connection objects at either end of a pipe <EoL>
<BoL> Return a connection object connected to the socket given by ` address ` <EoL>
<BoL> Return a file descriptor from a file object . <EoL>
<BoL> Return the key associated to a given file descriptor . <EoL>
<BoL> Return the key associated to a registered file object . <EoL>
<BoL> Checks if the family is valid for the current environment . <EoL>
<BoL> Return the types of the address <EoL>
<BoL> Return an arbitrary free address for the given family <EoL>
<BoL> Return a wrapper for an fd . <EoL>
<BoL> Replacement for pickle.dump ( ) using ForkingPickler . <EoL>
<BoL> Receive a handle over a local connection . <EoL>
<BoL> Receive an array of fds over an AF_UNIX socket . <EoL>
<BoL> Send a handle over a local connection . <EoL>
<BoL> Send an array of fds over an AF_UNIX socket . <EoL>
<BoL> Get the fd . This should only be called once . <EoL>
<BoL> Return connection from which to receive identified resource . <EoL>
<BoL> Register resource , returning an identifier . <EoL>
<BoL> Stop the background thread and clear registered resources . <EoL>
<BoL> Make sure that semaphore tracker process is running . <EoL>
<BoL> Register name of semaphore with semaphore tracker . <EoL>
<BoL> Unregister name of semaphore with semaphore tracker . <EoL>
<BoL> Run semaphore tracker . <EoL>
<BoL> Return a synchronization wrapper for a RawArray <EoL>
<BoL> Returns a ctypes array allocated from shared memory <EoL>
<BoL> Returns a ctypes object allocated from shared memory <EoL>
<BoL> Return a synchronization wrapper for a Value <EoL>
<BoL> Run code for process object if this in not the main process <EoL>
<BoL> Returns prefix of command line used for spawning a child process <EoL>
<BoL> Return info about parent needed by child to unpickle process object <EoL>
<BoL> Set sys.modules [ '__main__ ' ] to module at main_path <EoL>
<BoL> Return whether commandline indicates we are forking <EoL>
<BoL> Try to get current process ready to unpickle process object <EoL>
<BoL> Run code specified by data received over pipe <EoL>
<BoL> Return a list of command-line arguments reproducing the current settings in sys.flags , sys.warnoptions and sys._xoptions . <EoL>
<BoL> Returns logger used by multiprocessing <EoL>
<BoL> Turn on logging and add a handler which prints to stderr <EoL>
<BoL> Dump the class data in the format of a .netrc file . <EoL>
<BoL> Return a ( user , account , password ) tuple for given host . <EoL>
<BoL> Internal : process a HEAD , BODY or ARTICLE command . <EoL>
<BoL> Internal : return one line from the server , stripping _CRLF . <EoL>
<BoL> Internal : get a response plus following text from the server . Raise various errors if the response indicates an error . <EoL>
<BoL> Internal : get the overview format . Queries the server if not already done , else returns the cached value . <EoL>
<BoL> Internal : get a response from the server . <EoL>
<BoL> Internal : send a command and get the response plus following text . Same return value as _getlongresp ( ) . <EoL>
<BoL> Internal : send a command and get the response plus following text . Same as _longcmd ( ) and _getlongresp ( ) , except that the returned ` lines ` are unicode strings rather than bytes objects . <EoL>
<BoL> Internal : send one command to the server ( through _putline ( ) ) . The ` line ` must be a unicode string . <EoL>
<BoL> Internal : send one line to the server , appending CRLF . The ` line ` must be a bytes-like object . <EoL>
<BoL> Internal : send a command and get the response . Same return value as _getresp ( ) . <EoL>
<BoL> Internal : process a STAT , NEXT or LAST command . <EoL>
<BoL> Internal : parse the response line of a STAT , NEXT , LAST , ARTICLE , HEAD or BODY command . <EoL>
<BoL> Process an ARTICLE command . Argument : - message_spec : article number or message id - file : filename string or file object to store the article in Returns : - resp : server response if successful - ArticleInfo : ( article number , message id , list of article lines ) <EoL>
<BoL> Process a BODY command . Argument : - message_spec : article number or message id - file : filename string or file object to store the body in Returns : - resp : server response if successful - ArticleInfo : ( article number , message id , list of body lines ) <EoL>
<BoL> Process a CAPABILITIES command . Not supported by all servers . Return : - resp : server response if successful - caps : a dictionary mapping capability names to lists of tokens ( for example { 'VERSION ' : [ ' 2 ' ] , 'OVER ' : [ ] , LIST : [ 'ACTIVE ' , 'HEADERS ' ] } ) <EoL>
<BoL> Process the DATE command . Returns : - resp : server response if successful - date : datetime object <EoL>
<BoL> Set the debugging level . Argument 'level ' means : 0 : no debugging output ( default ) 1 : print commands and responses but not body text etc . 2 : also print raw lines read and sent before stripping CR/LF <EoL>
<BoL> Get a description for a single group . <EoL>
<BoL> Get descriptions for a range of groups . <EoL>
<BoL> Get the server capabilities , as read by __init__ ( ) . If the CAPABILITIES command is not supported , an empty dict is returned . <EoL>
<BoL> Get the welcome message from the server ( this is read and squirreled away by __init__ ( ) ) . If the response code is 200 , posting is allowed ; if it 201 , posting is not allowed . <EoL>
<BoL> Process a GROUP command . Argument : - group : the group name Returns : - resp : server response if successful - count : number of articles - first : first article number - last : last article number - name : the group name <EoL>
<BoL> Process a HEAD command . Argument : - message_spec : article number or message id - file : filename string or file object to store the headers in Returns : - resp : server response if successful - ArticleInfo : ( article number , message id , list of header lines ) <EoL>
<BoL> Process a HELP command . Argument : - file : Filename string or file object to store the result in Returns : - resp : server response if successful - list : list of strings returned by the server in response to the HELP command <EoL>
<BoL> Process an IHAVE command . Arguments : - message_id : message-id of the article - data : file containing the article Returns : - resp : server response if successful Note that if the server refuses the article an exception is raised . <EoL>
<BoL> Process a LAST command . No arguments . Return as for STAT . <EoL>
<BoL> Process a LIST or LIST ACTIVE command . Arguments : - group_pattern : a pattern indicating which groups to query - file : Filename string or file object to store the result in Returns : - resp : server response if successful - list : list of ( group , last , first , flag ) ( strings ) <EoL>
<BoL> Process a NEWGROUPS command . Arguments : - date : a date or datetime object Return : - resp : server response if successful - list : list of newsgroup names <EoL>
<BoL> Process a NEWNEWS command . Arguments : - group : group name or '*' - date : a date or datetime object Return : - resp : server response if successful - list : list of message ids <EoL>
<BoL> Process a NEXT command . No arguments . Return as for STAT . <EoL>
<BoL> Process an OVER command . If the command is n't supported , fall back to XOVER . Arguments : - message_spec : - either a message id , indicating the article to fetch information about - or a ( start , end ) tuple , indicating a range of article numbers ; if end is None , information up to the newest message will be retrieved - or None , indicating the current article number must be used - file : Filename string or file object to store the result in Returns : - resp : server response if successful - list : list of dicts containing the response fields <EoL>
<BoL> Process a POST command . Arguments : - data : bytes object , iterable or file containing the article Returns : - resp : server response if successful <EoL>
<BoL> Process a QUIT command and close the socket . Returns : - resp : server response if successful <EoL>
<BoL> Process a SLAVE command . Returns : - resp : server response if successful <EoL>
<BoL> Process a STARTTLS command . Arguments : - context : SSL context to use for the encrypted connection <EoL>
<BoL> Process a STAT command . Argument : - message_spec : article number or message id ( if not specified , the current article is selected ) Returns : - resp : server response if successful - art_num : the article number - message_id : the message id <EoL>
<BoL> Process an XGTITLE command ( optional server extension ) Arguments : - group : group name wildcard ( i.e . news . * ) Returns : - resp : server response if successful - list : list of ( name , title ) strings <EoL>
<BoL> Process an XHDR command ( optional server extension ) . Arguments : - hdr : the header type ( e.g . 'subject ' ) - str : an article nr , a message id , or a range nr1-nr2 - file : Filename string or file object to store the result in Returns : - resp : server response if successful - list : list of ( nr , value ) strings <EoL>
<BoL> Process an XOVER command ( optional server extension ) Arguments : - start : start of range - end : end of range - file : Filename string or file object to store the result in Returns : - resp : server response if successful - list : list of dicts containing the response fields <EoL>
<BoL> Process an XPATH command ( optional server extension ) Arguments : - id : Message id of article Returns : resp : server response if successful path : directory path to article <EoL>
<BoL> Wrap a socket in SSL/TLS . Arguments : - sock : Socket to wrap - context : SSL context to use for the encrypted connection Returns : - sock : New , encrypted socket . <EoL>
<BoL> Parse a pair of ( date , time ) strings , and return a datetime object . <EoL>
<BoL> Parse the response to an OVER or XOVER command according to the overview format ` fmt ` . <EoL>
<BoL> Parse a list of string representing the response to LIST OVERVIEW.FMT and return a list of header/metadata names . <EoL>
<BoL> Format a date or datetime object as a pair of ( date , time ) strings in the format required by the NEWNEWS and NEWGROUPS commands . If a date object is passed , the time is assumed to be midnight ( 00h00 ) . <EoL>
<BoL> Takes a unicode string representing a munged header value and decodes it as a ( possibly non-ASCII ) readable value . <EoL>
<BoL> Return a builtin complex instance . Called for complex ( self ) . <EoL>
<BoL> ( x+y*i ) .conjugate ( ) returns ( x-y*i ) . <EoL>
<BoL> Format a paragraph of free-form text for inclusion in the help output at the current indentation level . <EoL>
<BoL> Return a comma-separated list of option strings & metavariables . <EoL>
<BoL> add_option ( Option ) add_option ( opt_str , ... , kwarg=val , ... ) <EoL>
<BoL> see OptionParser.destroy ( ) . <EoL>
<BoL> see OptionParser.destroy ( ) . <EoL>
<BoL> parse_args ( args : [ string ] = sys.argv [ 1 : ] , values : Values = None ) - > ( values : Values , args : [ string ] ) <EoL>
<BoL> Update the option values from an arbitrary dictionary , but only use keys from dict that already have a corresponding attribute in self . Any keys in dict without a corresponding attribute are silently ignored . <EoL>
<BoL> Update the option values from an arbitrary dictionary , using all keys from the dictionary regardless of whether they have a corresponding attribute in self or not . <EoL>
<BoL> _match_abbrev ( s : string , wordmap : { string : Option } ) - > string <EoL>
<BoL> Given a sequence of path names , returns the longest common sub-path . <EoL>
<BoL> Expand shell variables of form $ var and $ { var } . Unknown variables are left unchanged . <EoL>
<BoL> Test whether a path is absolute <EoL>
<BoL> Test whether a path is a mount point <EoL>
<BoL> Normalize case of pathname . Has no effect under Posix <EoL>
<BoL> Split a pathname . Returns tuple `` ( head , tail ) '' where `` tail '' is everything after the final slash . Either part may be empty . <EoL>
<BoL> Split a pathname into drive and path . On Posix , drive is always empty . <EoL>
<BoL> Join the two paths represented by the respective ( drive , root , parts ) tuples . Return a new ( drive , root , parts ) tuple . <EoL>
<BoL> Iterate over all child paths of ` parent_path ` matched by this selector . This can contain parent_path itself . <EoL>
<BoL> Like quote ( ) , but accepts a bytes object rather than a str , and does not perform string-to-bytes encoding . It always returns an ASCII string . quote_from_bytes ( b'abc def\x3f ' ) - > 'abc % 20def % 3f ' <EoL>
<BoL> Decode a long from a two 's complement little-endian binary string . <EoL>
<BoL> Encode a long to a two 's complement little-endian binary string . Note that 0 is a special case , returning an empty string , to save a byte in the LONG1 pickling context . <EoL>
<BoL> Produce a symbolic disassembly of a pickle . <EoL>
<BoL> Generate all the opcodes in a pickle . <EoL>
<BoL> Template ( ) returns a fresh pipeline template . <EoL>
<BoL> t.__repr__ ( ) implements repr ( t ) . <EoL>
<BoL> t.append ( cmd , kind ) adds a new step at the end . <EoL>
<BoL> t.clone ( ) returns a new pipeline template with identical initial state as the current one . <EoL>
<BoL> t.debug ( flag ) turns debugging on or off . <EoL>
<BoL> t.open ( file , rw ) returns a pipe or file object open for reading or writing ; the file is the other end of the pipeline . <EoL>
<BoL> t.open_r ( file ) and t.open_w ( file ) implement t.open ( file , ' r ' ) and t.open ( file , ' w ' ) respectively . <EoL>
<BoL> t.prepend ( cmd , kind ) adds a new step at the front . <EoL>
<BoL> t.reset ( ) restores a pipeline template to its initial state . <EoL>
<BoL> Return the finder-specific module spec . <EoL>
<BoL> Extend a package 's path . <EoL>
<BoL> Find a `` loader '' object for fullname <EoL>
<BoL> Get a resource from a package . <EoL>
<BoL> Retrieve a finder for the given path item <EoL>
<BoL> Get a `` loader '' object for module_or_name <EoL>
<BoL> Yield finders for the given module name <EoL>
<BoL> Yields ModuleInfo for all submodules on path , or , if path is None , all top-level modules on sys.path . <EoL>
<BoL> Yields ModuleInfo for all modules recursively on path , or , if path is None , all accessible modules . <EoL>
<BoL> Deprecated . Use the load ( ) function instead . <EoL>
<BoL> Deprecated . Use the dump ( ) function instead . <EoL>
<BoL> return the size of the next object . <EoL>
<BoL> read the object by reference . <EoL>
<BoL> Write 'value ' to a .plist file . 'fp ' should be a ( writable ) file object . <EoL>
<BoL> Return a bytes object with the contents for a .plist file . <EoL>
<BoL> Read a .plist file . 'fp ' should be ( readable ) file object . Return the unpacked root object ( which usually is a dictionary ) . <EoL>
<BoL> Read a .plist file from a bytes object . Return the unpacked root object ( which usually is a dictionary ) . <EoL>
<BoL> Read a .plist from a path or file . pathOrFile should either be a file name , or a readable binary file object . <EoL>
<BoL> Read a plist data from a bytes object . Return the root object . <EoL>
<BoL> Write 'value ' to a .plist file . 'pathOrFile ' may either be a file name or a ( writable ) file object . <EoL>
<BoL> Return 'value ' as a plist-formatted bytes object . <EoL>
<BoL> Authorisation <EoL>
<BoL> Return server capabilities ( RFC 2449 ) as a dictionary <EoL>
<BoL> Close the connection without assuming anything about it . <EoL>
<BoL> Delete message number 'which ' . <EoL>
<BoL> Request listing , return result . <EoL>
<BoL> Does nothing . <EoL>
<BoL> Send password , return response <EoL>
<BoL> Signoff : commit changes on server , unlock mailbox , close connection . <EoL>
<BoL> Retrieve whole message number 'which ' . <EoL>
<BoL> Not sure what this does . <EoL>
<BoL> Unmark all messages marked for deletion . <EoL>
<BoL> Get mailbox status . <EoL>
<BoL> Start a TLS session on the active connection as specified in RFC 2595 . <EoL>
<BoL> Retrieve message header of message number 'which' and first 'howmuch ' lines of message body . <EoL>
<BoL> Return message digest ( unique id ) list . <EoL>
<BoL> Send user name , return response <EoL>
<BoL> Try to enter UTF-8 mode ( see RFC 6856 ) . Returns server response . <EoL>
<BoL> The method unconditionally raises an exception since the STLS command does n't make any sense on an already established SSL/TLS session . <EoL>
<BoL> Format object for a specific context , returning a string and flags indicating whether the representation is 'readable' and whether the object represents a recursive construct . <EoL>
<BoL> Determine if saferepr ( object ) is readable by eval ( ) . <EoL>
<BoL> Determine if object requires a recursive representation . <EoL>
<BoL> Version of repr ( ) which can handle recursive data structures . <EoL>
<BoL> Run statement under profiler optionally saving results in filename <EoL>
<BoL> Run statement under profiler , supplying your own globals and locals , optionally saving results in filename . <EoL>
<BoL> Write the profile data to a file we know how to load back . <EoL>
<BoL> Expand all abbreviations that are unique . <EoL>
<BoL> Combine two caller lists in a single list . <EoL>
<BoL> Add together all the stats for two profile entries . <EoL>
<BoL> Sum the caller statistics to get total number of calls received . <EoL>
<BoL> Parent copy loop . Copies pty master - > standard output ( master_read ) standard input - > pty master ( stdin_read ) <EoL>
<BoL> Open pty master and return ( master_fd , tty_name ) . <EoL>
<BoL> Default read function . <EoL>
<BoL> Write all the data to a descriptor . <EoL>
<BoL> fork ( ) - > ( pid , master_fd ) Fork and make the child a session leader with a controlling terminal . <EoL>
<BoL> master_open ( ) - > ( master_fd , slave_name ) Open a pty master and return the fd , and the filename of the slave end . Deprecated , use openpty ( ) instead . <EoL>
<BoL> openpty ( ) - > ( master_fd , slave_fd ) Open a pty master/slave pair , using os.openpty ( ) if possible . <EoL>
<BoL> slave_open ( tty_name ) - > slave_fd Open the pty slave and acquire the controlling terminal , returning opened filedescriptor . Deprecated , use openpty ( ) instead . <EoL>
<BoL> Create a spawned process . <EoL>
<BoL> Byte-compile one Python source file to Python bytecode . <EoL>
<BoL> Compile several source files . <EoL>
<BoL> Backwards compatible interface . <EoL>
<BoL> Read a module file and return a dictionary of classes . <EoL>
<BoL> Raise an exception for unimplemented types . <EoL>
<BoL> Generate documentation for an object . <EoL>
<BoL> Format a section with a big heading . <EoL>
<BoL> Make a link for a class . <EoL>
<BoL> Produce html documentation for a data descriptor . <EoL>
<BoL> Produce HTML documentation for a data object . <EoL>
<BoL> Produce html documentation for a property . <EoL>
<BoL> Make a link to source file . <EoL>
<BoL> Produce HTML for a class tree as given by inspect.getclasstree ( ) . <EoL>
<BoL> Format an argument default value as text . <EoL>
<BoL> Format a page heading . <EoL>
<BoL> Generate an HTML index for a directory of modules . <EoL>
<BoL> Mark up some plain text , given a context of symbols to look for . Each context dictionary maps object names to anchor names . <EoL>
<BoL> Make a link for a module or package to display in an index . <EoL>
<BoL> Make a link for a module . <EoL>
<BoL> Format a list of items into a multi-column list . <EoL>
<BoL> Make a link for an identifier , given name-to-URL mappings . <EoL>
<BoL> Format an HTML page . <EoL>
<BoL> Format literal preformatted text . <EoL>
<BoL> Return unbuffered tuple of ( topic , xrefs ) . <EoL>
<BoL> Read one line , using input ( ) when appropriate . <EoL>
<BoL> Format a string in bold by overstriking . <EoL>
<BoL> Produce text documentation for a given class object . <EoL>
<BoL> Produce text documentation for a data descriptor . <EoL>
<BoL> Produce text documentation for a given module object . <EoL>
<BoL> Produce text documentation for a data object . <EoL>
<BoL> Produce text documentation for a property . <EoL>
<BoL> Produce text documentation for a function or method object . <EoL>
<BoL> Render in text a class tree as returned by inspect.getclasstree ( ) . <EoL>
<BoL> Format an argument default value as text . <EoL>
<BoL> Indent text by prepending a given prefix to each line . <EoL>
<BoL> Format a section with a given heading . <EoL>
<BoL> Given an object or a path to an object , get the object and its name . <EoL>
<BoL> Returns True if fn is a bound method , regardless of whether fn was implemented in Python or in C . <EoL>
<BoL> Split sequence s via predicate , and return pair ( [ true ] , [ false ] ) . <EoL>
<BoL> Start an HTTP server thread on a specific port.Process a request from an HTML browser.Start the server.Stop the server and this thread nicely <EoL>
<BoL> Print all the one-line module summaries that contain a substring . <EoL>
<BoL> Start the enhanced pydoc Web server and open a Web browser . <EoL>
<BoL> Wrap inspect.classify_class_attrs , with fixup for data descriptors . <EoL>
<BoL> Get a class name and qualify it with a module name if necessary . <EoL>
<BoL> Command-line interface ( looks at sys.argv to decide what to do ) . <EoL>
<BoL> Omit part of a string if needed to make it fit in a maximum length . <EoL>
<BoL> Produce a short description of the given thing . <EoL>
<BoL> Get the doc string or comments for an object . <EoL>
<BoL> Decide what method to use for paging through text . <EoL>
<BoL> Import a Python source file or compiled file given its path . <EoL>
<BoL> Check if an object is of a type that probably means it 's data . <EoL>
<BoL> Guess whether a path refers to a package directory . <EoL>
<BoL> Locate an object by name or dotted path , importing as necessary . <EoL>
<BoL> The first time this is called , determine what kind of pager to use . <EoL>
<BoL> Convert sys.path into a list of absolute , existing , unique paths . <EoL>
<BoL> Page through text by feeding it to another program . <EoL>
<BoL> Remove boldface formatting from text . <EoL>
<BoL> Simply print unformatted text . This is the ultimate fallback . <EoL>
<BoL> Do a series of global replacements on a string . <EoL>
<BoL> Import a module ; handle errors ; return None if the module is n't found . <EoL>
<BoL> Split a doc string into a synopsis line ( if any ) and the rest . <EoL>
<BoL> Remove the hexadecimal id from a Python object representation . <EoL>
<BoL> Get the one-line summary out of a module file . <EoL>
<BoL> Page through text by invoking a program on a temporary file . <EoL>
<BoL> Page through text on a text terminal . <EoL>
<BoL> Decide whether to show documentation on a variable . <EoL>
<BoL> Write HTML documentation to a file in the current directory . <EoL>
<BoL> Write out HTML documentation for all modules in a directory tree . <EoL>
<BoL> Read 'input ' , apply quoted-printable decoding , and write to 'output ' . <EoL>
<BoL> Read 'input ' , apply quoted-printable encoding , and write to 'output ' . <EoL>
<BoL> Return true if the byte ordinal ' c ' is a hexadecimal digit in ASCII . <EoL>
<BoL> Decide whether a particular byte ordinal needs to be quoted . <EoL>
<BoL> Quote a single character . <EoL>
<BoL> Get the integer value of a hexadecimal number . <EoL>
<BoL> Return a list of all non-overlapping matches in the string . <EoL>
<BoL> Return an iterator over all non-overlapping matches in the string . For each match , the iterator returns a match object . <EoL>
<BoL> Try to apply the pattern to all of the string , returning a match object , or None if no match was found . <EoL>
<BoL> Split the source string by the occurrences of the pattern , returning a list containing the resulting substrings . <EoL>
<BoL> Generate an overlap table for the following prefix . An overlap table is a table of the same size as the prefix which informs about the potential self-overlap for each index in the prefix : - if overlap [ i ] == 0 , prefix [ i : ] ca n't overlap prefix [ 0 : ... ] - if overlap [ i ] == k with 0 < k < = i , prefix [ i-k+1 : i+1 ] overlaps with prefix [ 0 : k ] <EoL>
<BoL> Return a 2-tuple containing ( new_string , number ) . <EoL>
<BoL> Create a new completer for the command line . <EoL>
<BoL> Compute matches when text contains a dot . <EoL>
<BoL> Return the next possible completion for 'text ' . <EoL>
<BoL> Compute matches when text is a simple name . <EoL>
<BoL> Runs the designated module in the __main__ namespace <EoL>
<BoL> Execute code located at the specified filesystem location <EoL>
<BoL> Initialize a new instance , passing the time and delay functions <EoL>
<BoL> Remove an event from the queue . <EoL>
<BoL> Check whether the queue is empty . <EoL>
<BoL> A variant that specifies the time as a relative time . <EoL>
<BoL> Enter a new event in the queue at an absolute time . <EoL>
<BoL> Execute events until the queue is empty . If blocking is False executes the scheduled events due to expire soonest ( if any ) and then return the deadline of the next scheduled call in the scheduler . <EoL>
<BoL> Return a random int in the range [ 0 , n ) . <EoL>
<BoL> Return a random byte string containing *nbytes* bytes . <EoL>
<BoL> Return a random text string , in hexadecimal . <EoL>
<BoL> Return a random URL-safe text string , in Base64 encoding . <EoL>
<BoL> Close the selector . <EoL>
<BoL> Return a mapping of file objects to selector keys . <EoL>
<BoL> Change a registered file object monitored events or attached data . <EoL>
<BoL> Register a file object . <EoL>
<BoL> Perform the actual selection , until some monitored file objects are ready or a timeout expires . <EoL>
<BoL> Unregister a file object . <EoL>
<BoL> Return a file descriptor from a file object . <EoL>
<BoL> Open a persistent dictionary for reading and writing . <EoL>
<BoL> Checks what gets registered as an unpacker . <EoL>
<BoL> Ensure that the parent directory of ` path ` exists <EoL>
<BoL> Returns a gid , given a group name . <EoL>
<BoL> Returns an uid , given a user name . <EoL>
<BoL> Create a zip file from all the files under 'base_dir ' . <EoL>
<BoL> Unpack tar/tar.gz/tar.bz2/tar.xz ` filename ` to ` extract_dir ` <EoL>
<BoL> Unpack zip ` filename ` to ` extract_dir ` <EoL>
<BoL> Change owner user and group of the given path . <EoL>
<BoL> Copy data and mode bits ( `` cp src dst '' ) . Return the file 's destination . <EoL>
<BoL> Copy data and metadata . Return the file 's destination . <EoL>
<BoL> Copy data from src to dst . <EoL>
<BoL> Copy mode bits from src to dst . <EoL>
<BoL> Copy file metadata <EoL>
<BoL> Return disk usage statistics about the given path . <EoL>
<BoL> Returns a list of supported formats for archiving and unarchiving . <EoL>
<BoL> Get the size of the terminal window . <EoL>
<BoL> Returns a list of supported formats for unpacking . <EoL>
<BoL> Function that can be used as copytree ( ) ignore parameter . <EoL>
<BoL> Recursively move a file or directory to another location . <EoL>
<BoL> Registers an archive format . <EoL>
<BoL> Unpack an archive . <EoL>
<BoL> Removes the pack format from the registry . <EoL>
<BoL> Convert a numeric value to an IntEnum member . If it 's not a known member , return the numeric value itself . <EoL>
<BoL> Return a set containing all existing file system items from sys.path . <EoL>
<BoL> \ % s [ -- user-base ] [ -- user-site ] <EoL>
<BoL> Set all module __file__ and __cached__ attributes to an absolute path <EoL>
<BoL> Process a .pth file within the site-packages directory : For each line in the file , either combine it with sitedir to a path and add that to known_paths , or execute it if it starts with 'import ' . <EoL>
<BoL> Add 'sitedir ' argument to sys.path if missing and handle .pth files in 'sitedi <EoL>
<BoL> Add site-packages to sys.path <EoL>
<BoL> Add a per user site-package to sys.path <EoL>
<BoL> Check if user site directory is safe for inclusion <EoL>
<BoL> Enable default readline configuration on interactive prompts , by registering a sys.__interactivehook__ . <EoL>
<BoL> Run custom site specific code , if available . <EoL>
<BoL> Run custom user specific code , if available . <EoL>
<BoL> Returns a list containing all global site-packages directories . <EoL>
<BoL> Returns the ` user base ` directory path . <EoL>
<BoL> Returns the user-specific site-packages directory path . <EoL>
<BoL> Add standard site-specific directories to the module search path . <EoL>
<BoL> Remove duplicate entries from sys.path along with making them absolute <EoL>
<BoL> Set 'copyright ' and 'credits ' in builtins <EoL>
<BoL> Define new builtins 'quit ' and 'exit ' . <EoL>
<BoL> Reset state variables to their post-DATA state . <EoL>
<BoL> Reset all state variables except the greeting . <EoL>
<BoL> Override this abstract method to handle messages from the client . <EoL>
<BoL> Internal 'rset ' command which ignores any SMTPServerDisconnected error . <EoL>
<BoL> Authentication command - requires response processing . <EoL>
<BoL> Authobject to use with CRAM-MD5 authentication . Requires self.user and self.password to be set . <EoL>
<BoL> Authobject to use with LOGIN authentication . Requires self.user and self.password to be set . <EoL>
<BoL> Authobject to use with PLAIN authentication . Requires self.user and self.password to be set . <EoL>
<BoL> Close the connection to the SMTP server . <EoL>
<BoL> Connect to the LMTP daemon , on either a Unix or a TCP socket . <EoL>
<BoL> SMTP 'DATA ' command -- sends message data to server . <EoL>
<BoL> Send a command , and return its response code . <EoL>
<BoL> SMTP 'ehlo ' command . Hostname to send for this command defaults to the FQDN of the local host . <EoL>
<BoL> Call self.ehlo ( ) and/or self.helo ( ) if needed . <EoL>
<BoL> SMTP 'expn ' command -- expands a mailing list . <EoL>
<BoL> Get a reply from the server . <EoL>
<BoL> Does the server support a given SMTP service extension ? <EoL>
<BoL> SMTP 'helo ' command . Hostname to send for this command defaults to the FQDN of the local host . <EoL>
<BoL> SMTP 'help ' command . Returns help text from server . <EoL>
<BoL> Log in on an SMTP server that requires authentication . <EoL>
<BoL> SMTP 'mail ' command -- begins mail xfer session . <EoL>
<BoL> SMTP 'noop ' command -- does n't do anything : > <EoL>
<BoL> Send a command to the server . <EoL>
<BoL> Terminate the SMTP session . <EoL>
<BoL> SMTP 'rcpt ' command -- indicates 1 recipient for this mail . <EoL>
<BoL> SMTP 'rset ' command -- resets session . <EoL>
<BoL> Send ` s ' to the server . <EoL>
<BoL> Set the debug output level . <EoL>
<BoL> Puts the connection to the SMTP server into TLS mode . <EoL>
<BoL> SMTP 'verify ' command -- checks for address validity . <EoL>
<BoL> Connect to a host on a given port . <EoL>
<BoL> Quote a subset of the email addresses defined by RFC 821 . <EoL>
<BoL> Quote data for email . <EoL>
<BoL> Guess the type of a sound file . <EoL>
<BoL> Recognize sound headers . <EoL>
<BoL> Constructor . May be extended , do not override . <EoL>
<BoL> Called to clean up an individual request . <EoL>
<BoL> Called by constructor to activate the server . <EoL>
<BoL> Called to clean-up the server . <EoL>
<BoL> Called to shutdown and close an individual request . <EoL>
<BoL> Internal routine to wait for children that have exited . <EoL>
<BoL> Wait for zombies after self.timeout seconds of inactivity . <EoL>
<BoL> Fork a new subprocess to process the request . <EoL>
<BoL> Collect the zombie child processes regularly in the ForkingMixIn . <EoL>
<BoL> accept ( ) - > ( socket object , address info ) <EoL>
<BoL> dup ( ) - > socket object <EoL>
<BoL> sendfile ( file [ , offset [ , count ] ] ) - > sent <EoL>
<BoL> Coerce types T and S to a common type , or raise TypeError . <EoL>
<BoL> Convert value to given numeric type T . <EoL>
<BoL> Return Real number x to exact ( numerator , denominator ) pair . <EoL>
<BoL> Iterate over values , failing if any are less than zero . <EoL>
<BoL> Return sum of square deviations of sequence data . <EoL>
<BoL> _sum ( data [ , start ] ) - > ( type , sum , count ) <EoL>
<BoL> Return the harmonic mean of data . <EoL>
<BoL> Return the sample arithmetic mean of data . <EoL>
<BoL> Return the median ( middle value ) of numeric data . <EoL>
<BoL> Return the 50th percentile ( median ) of grouped continuous data . <EoL>
<BoL> Return the high median of data . <EoL>
<BoL> Return the low median of numeric data . <EoL>
<BoL> Return the most common data point from discrete or nominal data . <EoL>
<BoL> Return the square root of the population variance . <EoL>
<BoL> Return the population variance of `` data `` . <EoL>
<BoL> Return the square root of the sample variance . <EoL>
<BoL> Return the sample variance of data . <EoL>
<BoL> capwords ( s [ , sep ] ) - > string <EoL>
<BoL> Raise CalledProcessError if the exit code is non-zero . <EoL>
<BoL> Return a list of command-line arguments reproducing the current optimization settings in sys.flags . <EoL>
<BoL> Run command with arguments and return a CompletedProcess instance . <EoL>
<BoL> Return true if the scope uses exec . Deprecated method . <EoL>
<BoL> Returns the single namespace bound to this name . <EoL>
<BoL> Return a list of namespaces bound to this name <EoL>
<BoL> Returns true if name binding introduces new namespace . <EoL>
<BoL> Generate the Python module containing build-time variables . <EoL>
<BoL> Initialize the module as appropriate for NT <EoL>
<BoL> Initialize the module as appropriate for POSIX systems . <EoL>
<BoL> Display all information sysconfig detains . <EoL>
<BoL> Parse a Makefile-style file . <EoL>
<BoL> Return the path of pyconfig.h . <EoL>
<BoL> Return the value of a single variable using the dictionary returned by 'get_config_vars ( ) ' . <EoL>
<BoL> With no arguments , return a dictionary of all configuration variables relevant for the current platform . <EoL>
<BoL> Return the path of the Makefile . <EoL>
<BoL> Return a path corresponding to the scheme . <EoL>
<BoL> Return a tuple containing the paths names . <EoL>
<BoL> Return a mapping containing an install scheme . <EoL>
<BoL> Return a string that identifies the current platform . <EoL>
<BoL> Return a tuple containing the schemes names . <EoL>
<BoL> Parse a config.h-style file . <EoL>
<BoL> check ( file_or_dir ) <EoL>
<BoL> Provide an iterator object . <EoL>
<BoL> Check if TarFile is still open , and if the operation 's mode corresponds to TarFile 's mode . <EoL>
<BoL> Write debugging output to sys.stderr . <EoL>
<BoL> Find the target member of a symlink or hardlink member in the archive . <EoL>
<BoL> Find an archive member by name from bottom to top . If tarinfo is given , it is used as the starting point . <EoL>
<BoL> Read through the entire archive file and look for readable members . <EoL>
<BoL> Add the file ` name ' to the archive . <EoL>
<BoL> Add the TarInfo object ` tarinfo ' to the archive . <EoL>
<BoL> Open bzip2 compressed tar archive name for reading or writing . Appending is not allowed . <EoL>
<BoL> Set file permissions of targetpath according to tarinfo . <EoL>
<BoL> Set owner of targetpath according to tarinfo . <EoL>
<BoL> Close the TarFile . In write-mode , two finishing zero blocks are appended to the archive . <EoL>
<BoL> Extract a member from the archive to the current working directory , using its full name . <EoL>
<BoL> Extract all members from the archive to the current working directory and set owner , modification time and permissions on directories afterwards . <EoL>
<BoL> Extract a member from the archive as a file object . <EoL>
<BoL> Return a TarInfo object for member ` name ' . <EoL>
<BoL> Return the members of the archive as a list of TarInfo objects . The list has the same order as the members in the archive . <EoL>
<BoL> Return the members of the archive as a list of their names . It has the same order as the list returned by getmembers ( ) . <EoL>
<BoL> Create a TarInfo object from the result of os.stat or equivalent on an existing file . <EoL>
<BoL> Open gzip compressed tar archive name for reading or writing . Appending is not allowed . <EoL>
<BoL> Print a table of contents to sys.stdout . <EoL>
<BoL> Make a character or block device called targetpath . <EoL>
<BoL> Make a directory called targetpath . <EoL>
<BoL> Make a fifo called targetpath . <EoL>
<BoL> Make a file called targetpath . <EoL>
<BoL> Make a ( symbolic ) link called targetpath . If it can not be created ( platform limitation ) , we try to make a copy of the referenced file instead of a link . <EoL>
<BoL> Make a file from a TarInfo object with an unknown type at targetpath . <EoL>
<BoL> Return the next member of the archive as a TarInfo object , when TarFile is opened for reading . Return None if there is no more available . <EoL>
<BoL> Open a tar archive for reading , writing or appending . Return an appropriate TarFile class . <EoL>
<BoL> Open uncompressed tar archive name for reading or writing . <EoL>
<BoL> Set modification time of targetpath according to tarinfo . <EoL>
<BoL> Open lzma compressed tar archive name for reading or writing . Appending is not allowed . <EoL>
<BoL> Construct a TarInfo object . name is the optional name of the member . <EoL>
<BoL> Replace fields with supplemental information from a previous pax extended or global header . <EoL>
<BoL> Round up a byte count by BLOCKSIZE and return it , e.g . _block ( 834 ) = > 1024 . <EoL>
<BoL> Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence for name . <EoL>
<BoL> Return a header block . info is a dictionary with file information , format must be one of the *_FORMAT constants . <EoL>
<BoL> Return a POSIX.1-2008 extended or global header sequence that contains a list of keyword , value pairs . The values must be strings . <EoL>
<BoL> Return the string payload filled with zero bytes up to the next 512 byte border . <EoL>
<BoL> Decode a single field from a pax record . <EoL>
<BoL> Split a name longer than 100 chars into a prefix and a name part . <EoL>
<BoL> Process a builtin type or an unknown type which will be treated as a regular file . <EoL>
<BoL> Process the blocks that hold a GNU longname or longlink member . <EoL>
<BoL> Process a GNU tar extended sparse header , version 0.0 . <EoL>
<BoL> Process a GNU tar extended sparse header , version 0.1 . <EoL>
<BoL> Process a GNU tar extended sparse header , version 1.0 . <EoL>
<BoL> Choose the right processing method depending on the type and call it . <EoL>
<BoL> Process an extended or global header as described in POSIX.1-2008 . <EoL>
<BoL> Process a GNU sparse header plus extra headers . <EoL>
<BoL> Return the object as a GNU header block sequence . <EoL>
<BoL> Return the object as a pax global header block sequence . <EoL>
<BoL> Return the object as a ustar header block . If it can not be represented this way , prepend a pax extended header sequence with supplement information . <EoL>
<BoL> Return the object as a ustar header block . <EoL>
<BoL> Construct a TarInfo object from a 512 byte bytes object . <EoL>
<BoL> Return the next TarInfo object from TarFile object tarfile . <EoL>
<BoL> Return the TarInfo 's attributes as a dictionary . <EoL>
<BoL> Return a tar header as a string of 512 byte blocks . <EoL>
<BoL> Read data from the file . <EoL>
<BoL> Seek to a position in the file . <EoL>
<BoL> Return the current file position . <EoL>
<BoL> Return size bytes from stream . If internal buffer is empty , read another block from the stream . <EoL>
<BoL> Write string s to the stream if a whole new block is ready to be written . <EoL>
<BoL> Construct a _Stream object . <EoL>
<BoL> Initialize for reading a gzip compressed fileobj . <EoL>
<BoL> Initialize for writing with gzip compression . <EoL>
<BoL> Return size bytes from the stream . <EoL>
<BoL> Close the _Stream object . No operation should be done on it afterwards . <EoL>
<BoL> Return the next size number of bytes from the stream . If size is not defined , return all bytes of the stream up to EOF . <EoL>
<BoL> Set the stream 's file pointer to pos . Negative seeking is forbidden . <EoL>
<BoL> Return the stream 's file pointer position . <EoL>
<BoL> Write string s to the stream . <EoL>
<BoL> Calculate the checksum for a member 's header by summing up all characters except for the chksum field which is treated as if it was filled with spaces . <EoL>
<BoL> Copy length bytes from fileobj src to fileobj dst . If length is None , copy the entire content . <EoL>
<BoL> Deprecated in this location ; use stat.filemode . <EoL>
<BoL> Return True if name points to a tar archive that we are able to handle , else return False . <EoL>
<BoL> Convert a python number to a number field . <EoL>
<BoL> Convert a number field to a python number . <EoL>
<BoL> Convert a null-terminated bytes object to a string . <EoL>
<BoL> Convert a string to a null-terminated bytes object . <EoL>
<BoL> Destructor -- close the connection . <EoL>
<BoL> Close the connection . <EoL>
<BoL> Read until one from a list of a regular expressions matches . <EoL>
<BoL> Return the fileno ( ) of the socket object used internally . <EoL>
<BoL> Fill raw queue from exactly one recv ( ) system call . <EoL>
<BoL> Return the socket object used internally . <EoL>
<BoL> Interaction function , emulates a very dumb telnet client . <EoL>
<BoL> Helper for mt_interact ( ) -- this executes in the other thread . <EoL>
<BoL> Print a debug message , when the debug level is > 0 . <EoL>
<BoL> Multithreaded version of interact ( ) . <EoL>
<BoL> Connect to a host . <EoL>
<BoL> Transfer from raw queue to cooked queue . <EoL>
<BoL> Get next char from raw queue . <EoL>
<BoL> Read all data until EOF ; block until connection closed . <EoL>
<BoL> Read readily available data . <EoL>
<BoL> Process and return data that 's already in the queues ( lazy ) . <EoL>
<BoL> Return any data available in the SB ... SE queue . <EoL>
<BoL> Read at least one byte of cooked data unless EOF is hit . <EoL>
<BoL> Read until a given string is encountered or until timeout . <EoL>
<BoL> Read everything that 's possible without blocking in I/O ( eager ) . <EoL>
<BoL> Return any data available in the cooked queue ( very lazy ) . <EoL>
<BoL> Set the debug level . <EoL>
<BoL> Provide a callback function called after each receipt of a telnet option . <EoL>
<BoL> Test whether data is available on the socket . <EoL>
<BoL> Write a string to the socket , doubling any IAC characters . <EoL>
<BoL> Test program for telnetlib . <EoL>
<BoL> Generate a list of candidate temporary directories which _get_default_tempdir will try . <EoL>
<BoL> Common setup sequence for all user-callable interfaces . <EoL>
<BoL> Calculate the default directory to use for temporary files . This routine should be called exactly once . <EoL>
<BoL> Look at the type of all args and divine their implied return type . <EoL>
<BoL> Code common to mkstemp , TemporaryFile , and NamedTemporaryFile . <EoL>
<BoL> Common parameter processing for most APIs in this module . <EoL>
<BoL> A bytes version of tempfile.gettempdir ( ) . <EoL>
<BoL> The default prefix for temporary directories . <EoL>
<BoL> The default prefix for temporary directories as bytes . <EoL>
<BoL> User-callable function to return a unique temporary file name . The file is not created . <EoL>
<BoL> Adds 'prefix ' to the beginning of selected lines in 'text ' . <EoL>
<BoL> Collapse and truncate the given text to fit in the given width . <EoL>
<BoL> Return the number of loops and time taken so that total time > = 0.2 . <EoL>
<BoL> Helper to print a traceback from the timed code . <EoL>
<BoL> Call timeit ( ) a few times . <EoL>
<BoL> Time 'number ' executions of the main statement . <EoL>
<BoL> Main program , used when run as a script . <EoL>
<BoL> Helper to reindent a multi-line statement . <EoL>
<BoL> Convenience function to create Timer object and call repeat method . <EoL>
<BoL> Convenience function to create Timer object and call timeit method . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return the resource value for a KEY given as string . <EoL>
<BoL> Construct a widget with the parent widget MASTER , a name WIDGETNAME and appropriate options . <EoL>
<BoL> Return the window path name of this widget . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Call Tcl configure command and return the result as a dict . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return the Tkinter instance of a widget identified by its Tcl name NAME . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return a newly created Tcl function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . Sets up information about children . <EoL>
<BoL> Internal function.Tk changed behavior in 8.4.2 , returning `` ? ? '' rather more often . <EoL>
<BoL> Call function once after given time . <EoL>
<BoL> Cancel scheduling of function identified with ID . <EoL>
<BoL> Call FUNC once if the Tcl main loop has no event to process . <EoL>
<BoL> The anchor value controls how to place the grid within the master when no row/column has any weight . <EoL>
<BoL> Return a tuple of integer coordinates for the bounding box of this widget controlled by the geometry manager grid . <EoL>
<BoL> Ring a display 's bell . <EoL>
<BoL> Bind to this widget at event SEQUENCE a call to function FUNC . <EoL>
<BoL> Bind to all widgets at an event SEQUENCE a call to function FUNC . <EoL>
<BoL> Set or get the list of bindtags for this widget . <EoL>
<BoL> Append STRING to the Tk clipboard . <EoL>
<BoL> Clear the data in the Tk clipboard . <EoL>
<BoL> Retrieve data from the clipboard on window 's display . <EoL>
<BoL> Configure column INDEX of a grid . <EoL>
<BoL> Configure resources of a widget . <EoL>
<BoL> Internal function . <EoL>
<BoL> Destroy this and all descendants widgets . <EoL>
<BoL> Bind a virtual event VIRTUAL ( of the form < < Name > > ) to an event SEQUENCE such that the virtual event is triggered whenever SEQUENCE occurs . <EoL>
<BoL> Unbind a virtual event VIRTUAL from SEQUENCE . <EoL>
<BoL> Generate an event SEQUENCE . Additional keyword arguments specify parameter of the event ( e.g . x , y , rootx , rooty ) . <EoL>
<BoL> Return a list of all virtual events or the information about the SEQUENCE bound to the virtual event VIRTUAL . <EoL>
<BoL> Direct input focus to this widget . <EoL>
<BoL> Return the widget which has currently the focus on the display where this widget is located . <EoL>
<BoL> Direct input focus to this widget even if the application does not have the focus . Use with caution ! <EoL>
<BoL> Return the widget which has currently the focus in the application . <EoL>
<BoL> Return the widget which would have the focus if top level for this widget gets the focus from the window manager . <EoL>
<BoL> Return a boolean value for Tcl boolean values true and false given as parameter . <EoL>
<BoL> Return value of Tcl variable NAME . <EoL>
<BoL> Return widget which has currently the grab in this application or None . <EoL>
<BoL> Release grab for this widget if currently set . <EoL>
<BoL> Set grab for this widget . <EoL>
<BoL> Set global grab for this widget . <EoL>
<BoL> Return None , `` local '' or `` global '' if this widget has no , a local or a global grab . <EoL>
<BoL> Return a tuple of column and row which identify the cell at which the pixel at position X and Y inside the master widget is located . <EoL>
<BoL> Set or get the status for propagation of geometry information . <EoL>
<BoL> Configure row INDEX of a grid . <EoL>
<BoL> Return a tuple of the number of column and rows in the grid . <EoL>
<BoL> Return a list of all slaves of this widget in its packing order . <EoL>
<BoL> Return a list of all existing image names . <EoL>
<BoL> Return a list of all available image types ( e.g . photo bitmap ) . <EoL>
<BoL> Return a list of all resource names of this widget . <EoL>
<BoL> Raise this widget in the stacking order . <EoL>
<BoL> Lower this widget in the stacking order . <EoL>
<BoL> Call the mainloop of Tk . <EoL>
<BoL> Set a VALUE ( second parameter ) for an option PATTERN ( first parameter ) . <EoL>
<BoL> Clear the option database . <EoL>
<BoL> Return the value for an option NAME for this widget with CLASSNAME . <EoL>
<BoL> Read file FILENAME into the option database . <EoL>
<BoL> Set or get the status for propagation of geometry information . <EoL>
<BoL> Return a list of all slaves of this widget in its packing order . <EoL>
<BoL> Return a list of all slaves of this widget in its packing order . <EoL>
<BoL> Quit the Tcl interpreter . All widgets will be destroyed . <EoL>
<BoL> Clear the current X selection . <EoL>
<BoL> Return the contents of the current X selection . <EoL>
<BoL> Specify a function COMMAND to call if the X selection owned by this widget is queried by another application . <EoL>
<BoL> Become owner of X selection . <EoL>
<BoL> Return owner of X selection . <EoL>
<BoL> Send Tcl command CMD to different interpreter INTERP to be executed . <EoL>
<BoL> Set Tcl variable NAME to VALUE . <EoL>
<BoL> Change the color scheme to light brown as used in Tk 3.6 and before . <EoL>
<BoL> The widget under mouse will get automatically focus . Can not be disabled easily . <EoL>
<BoL> Return the next widget in the focus order which follows widget which has currently the focus . <EoL>
<BoL> Return previous widget in the focus order . See tk_focusNext for details . <EoL>
<BoL> Set a new color scheme for all widget elements . <EoL>
<BoL> Set Tcl internal variable , whether the look and feel should adhere to Motif . <EoL>
<BoL> Unbind for this widget for event SEQUENCE the function identified with FUNCID . <EoL>
<BoL> Unbind for all widgets for event SEQUENCE all functions . <EoL>
<BoL> Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE all functions . <EoL>
<BoL> Enter event loop until all pending events have been processed by Tcl . <EoL>
<BoL> Enter event loop until all idle callbacks have been called . This will update the display of windows but not process events caused by the user . <EoL>
<BoL> Wait until the variable is modified . <EoL>
<BoL> Wait until the visibility of a WIDGET changes ( e.g . it appears ) . <EoL>
<BoL> Wait until a WIDGET is destroyed . <EoL>
<BoL> Return integer which represents atom NAME . <EoL>
<BoL> Return name of atom with identifier ID . <EoL>
<BoL> Return number of cells in the colormap for this widget . <EoL>
<BoL> Return a list of all widgets which are children of this widget . <EoL>
<BoL> Return window class name of this widget . <EoL>
<BoL> Return true if at the last color request the colormap was full . <EoL>
<BoL> Return the widget which is at the root coordinates ROOTX , ROOTY . <EoL>
<BoL> Return the number of bits per pixel . <EoL>
<BoL> Return true if this widget exists . <EoL>
<BoL> Return the number of pixels for the given distance NUMBER ( e.g . `` 3c '' ) as float . <EoL>
<BoL> Return geometry string for this widget in the form `` widthxheight+X+Y '' . <EoL>
<BoL> Return height of this widget . <EoL>
<BoL> Return identifier ID for this widget . <EoL>
<BoL> Return the name of all Tcl interpreters for this display . <EoL>
<BoL> Return true if this widget is mapped . <EoL>
<BoL> Return the window manager name for this widget . <EoL>
<BoL> Return the name of this widget . <EoL>
<BoL> Return the name of the parent of this widget . <EoL>
<BoL> Return the pathname of the widget given by ID . <EoL>
<BoL> Rounded integer value of winfo_fpixels . <EoL>
<BoL> Return the x coordinate of the pointer on the root window . <EoL>
<BoL> Return a tuple of x and y coordinates of the pointer on the root window . <EoL>
<BoL> Return the y coordinate of the pointer on the root window . <EoL>
<BoL> Return requested height of this widget . <EoL>
<BoL> Return requested width of this widget . <EoL>
<BoL> Return tuple of decimal values for red , green , blue for COLOR in this widget . <EoL>
<BoL> Return x coordinate of upper left corner of this widget on the root window . <EoL>
<BoL> Return y coordinate of upper left corner of this widget on the root window . <EoL>
<BoL> Return the screen name of this widget . <EoL>
<BoL> Return the number of the cells in the colormap of the screen of this widget . <EoL>
<BoL> Return the number of bits per pixel of the root window of the screen of this widget . <EoL>
<BoL> Return the number of pixels of the height of the screen of this widget in pixel . <EoL>
<BoL> Return the number of pixels of the height of the screen of this widget in mm . <EoL>
<BoL> Return the number of pixels of the width of the screen of this widget in mm . <EoL>
<BoL> Return one of the strings directcolor , grayscale , pseudocolor , staticcolor , staticgray , or truecolor for the default colormodel of this screen . <EoL>
<BoL> Return the number of pixels of the width of the screen of this widget in pixel . <EoL>
<BoL> Return information of the X-Server of the screen of this widget in the form `` XmajorRminor vendor vendorVersion '' . <EoL>
<BoL> Return the toplevel widget of this widget . <EoL>
<BoL> Return true if the widget and all its higher ancestors are mapped . <EoL>
<BoL> Return one of the strings directcolor , grayscale , pseudocolor , staticcolor , staticgray , or truecolor for the colormodel of this widget . <EoL>
<BoL> Return the X identifier for the visual for this widget . <EoL>
<BoL> Return a list of all visuals available for the screen of this widget . <EoL>
<BoL> Return the height of the virtual root window associated with this widget in pixels . If there is no virtual root window return the height of the screen . <EoL>
<BoL> Return the width of the virtual root window associated with this widget in pixel . If there is no virtual root window return the width of the screen . <EoL>
<BoL> Return the x offset of the virtual root relative to the root window of the screen of this widget . <EoL>
<BoL> Return the y offset of the virtual root relative to the root window of the screen of this widget . <EoL>
<BoL> Return the width of this widget . <EoL>
<BoL> Return the x coordinate of the upper left corner of this widget in the parent . <EoL>
<BoL> Return the y coordinate of the upper left corner of this widget in the parent . <EoL>
<BoL> Create a bitmap with NAME . <EoL>
<BoL> Configure the image . <EoL>
<BoL> Return the height of the image . <EoL>
<BoL> Return the type of the image , e.g . `` photo '' or `` bitmap '' . <EoL>
<BoL> Return the width of the image . <EoL>
<BoL> Unset the variable in Tcl . <EoL>
<BoL> Comparison for equality ( == ) . <EoL>
<BoL> Construct a boolean variable . <EoL>
<BoL> Return the name of the variable in Tcl . <EoL>
<BoL> Return the value of the variable as a bool . <EoL>
<BoL> Set the variable to VALUE . <EoL>
<BoL> Define a trace callback for the variable . <EoL>
<BoL> Define a trace callback for the variable . <EoL>
<BoL> Return all trace callback information . <EoL>
<BoL> Delete the trace callback for a variable . <EoL>
<BoL> Delete the trace callback for a variable . <EoL>
<BoL> Return all trace callback information . <EoL>
<BoL> Construct a button widget with the parent MASTER . <EoL>
<BoL> Flash the button . <EoL>
<BoL> Unmap this widget and do not use it for the packing order . <EoL>
<BoL> Unmap this widget . <EoL>
<BoL> Return information about the options for positioning this widget in a grid . <EoL>
<BoL> Unmap this widget but remember the grid options . <EoL>
<BoL> Return information about the packing options for this widget . <EoL>
<BoL> Invoke the command associated with the button . <EoL>
<BoL> Unmap this widget . <EoL>
<BoL> Return information about the placing options for this widget . <EoL>
<BoL> Apply first function SUBST to arguments , than FUNC . <EoL>
<BoL> Store FUNC , SUBST and WIDGET as members . <EoL>
<BoL> Construct a canvas widget with the parent MASTER . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Add tag NEWTAG to all items above TAGORID . <EoL>
<BoL> Add tag NEWTAG to all items . <EoL>
<BoL> Add tag NEWTAG to all items below TAGORID . <EoL>
<BoL> Add tag NEWTAG to item which is closest to pixel at X , Y . <EoL>
<BoL> Add tag NEWTAG to all items in the rectangle defined by X1 , Y1 , X2 , Y2 . <EoL>
<BoL> Add tag NEWTAG to all items which overlap the rectangle defined by X1 , Y1 , X2 , Y2 . <EoL>
<BoL> Add tag NEWTAG to all items with TAGORID . <EoL>
<BoL> Return a tuple of X1 , Y1 , X2 , Y2 coordinates for a rectangle which encloses all items with tags specified as arguments . <EoL>
<BoL> Return the canvas x coordinate of pixel position SCREENX rounded to nearest multiple of GRIDSPACING units . <EoL>
<BoL> Return the canvas y coordinate of pixel position SCREENY rounded to nearest multiple of GRIDSPACING units . <EoL>
<BoL> Return a list of coordinates for the item given in ARGS . <EoL>
<BoL> Create arc shaped region with coordinates x1 , y1 , x2 , y2 . <EoL>
<BoL> Create bitmap with coordinates x1 , y1 . <EoL>
<BoL> Create image item with coordinates x1 , y1 . <EoL>
<BoL> Create line with coordinates x1 , y1 , ... , xn , yn . <EoL>
<BoL> Create oval with coordinates x1 , y1 , x2 , y2 . <EoL>
<BoL> Create polygon with coordinates x1 , y1 , ... , xn , yn . <EoL>
<BoL> Create rectangle with coordinates x1 , y1 , x2 , y2 . <EoL>
<BoL> Create text with coordinates x1 , y1 . <EoL>
<BoL> Create window with coordinates x1 , y1 , x2 , y2 . <EoL>
<BoL> Delete characters of text items identified by tag or id in ARGS ( possibly several times ) from FIRST to LAST character ( including ) . <EoL>
<BoL> Delete items identified by all tag or ids contained in ARGS . <EoL>
<BoL> Delete tag or id given as last arguments in ARGS from items identified by first argument in ARGS . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return items above TAGORID . <EoL>
<BoL> Return all items . <EoL>
<BoL> Return all items below TAGORID . <EoL>
<BoL> Return item which is closest to pixel at X , Y . <EoL>
<BoL> Return all items in rectangle defined by X1 , Y1 , X2 , Y2 . <EoL>
<BoL> Return all items which overlap the rectangle defined by X1 , Y1 , X2 , Y2 . <EoL>
<BoL> Return all items with TAGORID . <EoL>
<BoL> Set focus to the first item specified in ARGS . <EoL>
<BoL> Return tags associated with the first item specified in ARGS . <EoL>
<BoL> Set cursor at position POS in the item identified by TAGORID . In ARGS TAGORID must be first . <EoL>
<BoL> Return position of cursor as integer in item specified in ARGS . <EoL>
<BoL> Insert TEXT in item TAGORID at position POS . ARGS must be TAGORID POS TEXT . <EoL>
<BoL> Return the resource value for an OPTION for item TAGORID . <EoL>
<BoL> Configure resources of an item TAGORID . <EoL>
<BoL> Raise an item TAGORID given in ARGS ( optional above another item ) . <EoL>
<BoL> Lower an item TAGORID given in ARGS ( optional below another item ) . <EoL>
<BoL> Move an item TAGORID given in ARGS . <EoL>
<BoL> Print the contents of the canvas to a postscript file . Valid options : colormap , colormode , file , fontmap , height , pageanchor , pageheight , pagewidth , pagex , pagey , rotate , width , x , y . <EoL>
<BoL> Scale item TAGORID with XORIGIN , YORIGIN , XSCALE , YSCALE . <EoL>
<BoL> Adjust the view of the canvas to GAIN times the difference between X and Y and the coordinates given in scan_mark . <EoL>
<BoL> Remember the current X , Y coordinates . <EoL>
<BoL> Adjust the end of the selection near the cursor of an item TAGORID to index . <EoL>
<BoL> Clear the selection if it is in this widget . <EoL>
<BoL> Set the fixed end of a selection in item TAGORID to INDEX . <EoL>
<BoL> Return the item which has the selection . <EoL>
<BoL> Set the variable end of a selection in item TAGORID to INDEX . <EoL>
<BoL> Bind to all items with TAGORID at event SEQUENCE a call to function FUNC . <EoL>
<BoL> Unbind for all items with TAGORID for event SEQUENCE the function identified with FUNCID . <EoL>
<BoL> Return the type of the item TAGORID . <EoL>
<BoL> Query and change the horizontal position of the view . <EoL>
<BoL> Adjusts the view in the window so that FRACTION of the total width of the canvas is off-screen to the left . <EoL>
<BoL> Shift the x-view according to NUMBER which is measured in `` units '' or `` pages '' ( WHAT ) . <EoL>
<BoL> Query and change the vertical position of the view . <EoL>
<BoL> Adjusts the view in the window so that FRACTION of the total height of the canvas is off-screen to the top . <EoL>
<BoL> Shift the y-view according to NUMBER which is measured in `` units '' or `` pages '' ( WHAT ) . <EoL>
<BoL> Construct a checkbutton widget with the parent MASTER . <EoL>
<BoL> Put the button in off-state . <EoL>
<BoL> Flash the button . <EoL>
<BoL> Toggle the button and invoke a command if given as resource . <EoL>
<BoL> Put the button in on-state . <EoL>
<BoL> Toggle the button . <EoL>
<BoL> Construct a float variable . <EoL>
<BoL> Return the value of the variable as a float . <EoL>
<BoL> Set the variable to VALUE . <EoL>
<BoL> Construct an entry widget with the parent MASTER . <EoL>
<BoL> Delete text from FIRST to LAST ( not included ) . <EoL>
<BoL> Return the text . <EoL>
<BoL> Insert cursor at INDEX . <EoL>
<BoL> Return position of cursor . <EoL>
<BoL> Insert STRING at INDEX . <EoL>
<BoL> Adjust the view of the canvas to 10 times the difference between X and Y and the coordinates given in scan_mark . <EoL>
<BoL> Remember the current X , Y coordinates . <EoL>
<BoL> Adjust the end of the selection near the cursor to INDEX . <EoL>
<BoL> Clear the selection if it is in this widget . <EoL>
<BoL> Set the fixed end of a selection to INDEX . <EoL>
<BoL> Return True if there are characters selected in the entry , False otherwise . <EoL>
<BoL> Set the selection from START to END ( not included ) . <EoL>
<BoL> Set the variable end of a selection to INDEX . <EoL>
<BoL> Construct a frame widget with the parent MASTER . <EoL>
<BoL> Construct an integer variable . <EoL>
<BoL> Return the value of the variable as an integer . <EoL>
<BoL> Construct a label widget with the parent MASTER . <EoL>
<BoL> Construct a labelframe widget with the parent MASTER . <EoL>
<BoL> Construct a listbox widget with the parent MASTER . <EoL>
<BoL> Activate item identified by INDEX . <EoL>
<BoL> Return a tuple of X1 , Y1 , X2 , Y2 coordinates for a rectangle which encloses the item identified by the given index . <EoL>
<BoL> Return the indices of currently selected item . <EoL>
<BoL> Delete items from FIRST to LAST ( included ) . <EoL>
<BoL> Get list of items from FIRST to LAST ( included ) . <EoL>
<BoL> Return index of item identified with INDEX . <EoL>
<BoL> Insert ELEMENTS at INDEX . <EoL>
<BoL> Return the resource value for an ITEM and an OPTION . <EoL>
<BoL> Configure resources of an ITEM . <EoL>
<BoL> Get index of item which is nearest to y coordinate Y . <EoL>
<BoL> Adjust the view of the listbox to 10 times the difference between X and Y and the coordinates given in scan_mark . <EoL>
<BoL> Remember the current X , Y coordinates . <EoL>
<BoL> Scroll such that INDEX is visible . <EoL>
<BoL> Set the fixed end oft the selection to INDEX . <EoL>
<BoL> Clear the selection from FIRST to LAST ( included ) . <EoL>
<BoL> Return 1 if INDEX is part of the selection . <EoL>
<BoL> Set the selection from FIRST to LAST ( included ) without changing the currently selected elements . <EoL>
<BoL> Return the number of elements in the listbox . <EoL>
<BoL> Construct menu widget with the parent MASTER . <EoL>
<BoL> Activate entry at INDEX . <EoL>
<BoL> Internal function . <EoL>
<BoL> Add hierarchical menu item . <EoL>
<BoL> Add checkbutton menu item . <EoL>
<BoL> Add command menu item . <EoL>
<BoL> Addd radio menu item . <EoL>
<BoL> Add separator . <EoL>
<BoL> Delete menu items between INDEX1 and INDEX2 ( included ) . <EoL>
<BoL> Return the resource value of a menu item for OPTION at INDEX . <EoL>
<BoL> Configure a menu item at INDEX . <EoL>
<BoL> Return the index of a menu item identified by INDEX . <EoL>
<BoL> Internal function . <EoL>
<BoL> Add hierarchical menu item at INDEX . <EoL>
<BoL> Add checkbutton menu item at INDEX . <EoL>
<BoL> Add command menu item at INDEX . <EoL>
<BoL> Addd radio menu item at INDEX . <EoL>
<BoL> Add separator at INDEX . <EoL>
<BoL> Invoke a menu item identified by INDEX and execute the associated command . <EoL>
<BoL> Display a menu at position X , Y . <EoL>
<BoL> Post the menu at position X , Y with entry ENTRY . <EoL>
<BoL> Return the type of the menu item at INDEX . <EoL>
<BoL> Unmap a menu . <EoL>
<BoL> Return the x-position of the leftmost pixel of the menu item at INDEX . <EoL>
<BoL> Return the y-position of the topmost pixel of the menu item at INDEX . <EoL>
<BoL> Internal function . <EoL>
<BoL> Inhibit setting of default root window . <EoL>
<BoL> Construct an optionmenu widget with the parent MASTER , with the resource textvariable set to VARIABLE , the initially selected value VALUE , the other menu values VALUES and an additional keyword argument command . <EoL>
<BoL> Destroy this widget and the associated menu . <EoL>
<BoL> Construct a panedwindow widget with the parent MASTER . <EoL>
<BoL> Add a child widget to the panedwindow in a new pane . <EoL>
<BoL> Remove the pane containing child from the panedwindow <EoL>
<BoL> Identify the panedwindow component at point x , y <EoL>
<BoL> Query a management option for window . <EoL>
<BoL> Query or modify the management options for window . <EoL>
<BoL> Returns an ordered list of the child panes . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return the x and y pair of the most recent proxy location <EoL>
<BoL> Remove the proxy from the display . <EoL>
<BoL> Place the proxy at the given x and y coordinates . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return the current x and y pair for the sash given by index . <EoL>
<BoL> Records x and y for the sash given by index ; <EoL>
<BoL> Place the sash given by index at the given coordinates <EoL>
<BoL> Create an image with NAME . <EoL>
<BoL> Display a transparent image . <EoL>
<BoL> Return the value of OPTION . <EoL>
<BoL> Return a new PhotoImage with the same image as this widget . <EoL>
<BoL> Return the color ( red , green , blue ) of the pixel at X , Y . <EoL>
<BoL> Put row formatted colors to image starting from position TO , e.g . image.put ( `` { red green } { blue yellow } '' , to= ( 4,6 ) ) <EoL>
<BoL> Return a new PhotoImage based on the same image as this widget but use only every Xth or Yth pixel . If y is not given , the default value is the same as x . <EoL>
<BoL> Write image to file FILENAME in FORMAT starting from position FROM_COORDS . <EoL>
<BoL> Return a new PhotoImage with the same image as this widget but zoom it with a factor of x in the X direction and y in the Y direction . If y is not given , the default value is the same as x . <EoL>
<BoL> Construct a radiobutton widget with the parent MASTER . <EoL>
<BoL> Put the button in off-state . <EoL>
<BoL> Flash the button . <EoL>
<BoL> Toggle the button and invoke a command if given as resource . <EoL>
<BoL> Put the button in on-state . <EoL>
<BoL> Construct a scale widget with the parent MASTER . <EoL>
<BoL> Return a tuple ( X , Y ) of the point along the centerline of the trough that corresponds to VALUE or the current value if None is given . <EoL>
<BoL> Get the current value as integer or float . <EoL>
<BoL> Return where the point X , Y lies . Valid return values are `` slider '' , `` though1 '' and `` though2 '' . <EoL>
<BoL> Set the value to VALUE . <EoL>
<BoL> Construct a scrollbar widget with the parent MASTER . <EoL>
<BoL> Marks the element indicated by index as active . <EoL>
<BoL> Return the fractional change of the scrollbar setting if it would be moved by DELTAX or DELTAY pixels . <EoL>
<BoL> Return the fractional value which corresponds to a slider position of X , Y . <EoL>
<BoL> Return the current fractional values ( upper and lower end ) of the slider position . <EoL>
<BoL> Return the element under position X , Y as one of `` arrow1 '' , '' slider '' , '' arrow2 '' or `` '' . <EoL>
<BoL> Set the fractional values of the slider position ( upper and lower ends as value between 0 and 1 ) . <EoL>
<BoL> Construct a spinbox widget with the parent MASTER . <EoL>
<BoL> Return a tuple of X1 , Y1 , X2 , Y2 coordinates for a rectangle which encloses the character given by index . <EoL>
<BoL> Delete one or more elements of the spinbox . <EoL>
<BoL> Returns the spinbox 's string <EoL>
<BoL> Alter the position of the insertion cursor . <EoL>
<BoL> Returns the name of the widget at position x , y <EoL>
<BoL> Returns the numerical index corresponding to index <EoL>
<BoL> Insert string s at index <EoL>
<BoL> Causes the specified element to be invoked <EoL>
<BoL> Internal function . <EoL>
<BoL> Compute the difference between the given x argument and the x argument to the last scan mark command <EoL>
<BoL> Records x and the current view in the spinbox window ; <EoL>
<BoL> Internal function . <EoL>
<BoL> Locate the end of the selection nearest to the character given by index , <EoL>
<BoL> Clear the selection <EoL>
<BoL> Sets or gets the currently selected element . <EoL>
<BoL> Construct a string variable . <EoL>
<BoL> Return value of variable as string . <EoL>
<BoL> Construct a text widget with the parent MASTER . <EoL>
<BoL> Return a tuple of ( x , y , width , height ) which gives the bounding box of the visible part of the character at the given index . <EoL>
<BoL> Return whether between index INDEX1 and index INDEX2 the relation OP is satisfied . OP is one of < , < = , == , > = , > , or ! = . <EoL>
<BoL> Counts the number of relevant things between the two indices . If index1 is after index2 , the result will be a negative number ( and this holds for each of the possible options ) . <EoL>
<BoL> Turn on the internal consistency checks of the B-Tree inside the text widget according to BOOLEAN . <EoL>
<BoL> Delete the characters between INDEX1 and INDEX2 ( not included ) . <EoL>
<BoL> Return tuple ( x , y , width , height , baseline ) giving the bounding box and baseline position of the visible part of the line containing the character at INDEX . <EoL>
<BoL> Return the contents of the widget between index1 and index2 . <EoL>
<BoL> Internal method <EoL>
<BoL> Get or Set the modified flag <EoL>
<BoL> Redo the last undone edit <EoL>
<BoL> Clears the undo and redo stacks <EoL>
<BoL> Inserts a separator ( boundary ) on the undo stack . <EoL>
<BoL> Undoes the last edit action <EoL>
<BoL> Return the text from INDEX1 to INDEX2 ( not included ) . <EoL>
<BoL> Return the value of OPTION of an embedded image at INDEX . <EoL>
<BoL> Configure an embedded image at INDEX . <EoL>
<BoL> Create an embedded image at INDEX . <EoL>
<BoL> Return all names of embedded images in this widget . <EoL>
<BoL> Return the index in the form line.char for INDEX . <EoL>
<BoL> Insert CHARS before the characters at INDEX . <EoL>
<BoL> Change the gravity of a mark MARKNAME to DIRECTION ( LEFT or RIGHT ) . Return the current value if None is given for DIRECTION . <EoL>
<BoL> Return all mark names . <EoL>
<BoL> Return the name of the next mark after INDEX . <EoL>
<BoL> Return the name of the previous mark before INDEX . <EoL>
<BoL> Set mark MARKNAME before the character at INDEX . <EoL>
<BoL> Delete all marks in MARKNAMES . <EoL>
<BoL> Creates a peer text widget with the given newPathName , and any optional standard configuration options . By default the peer will have the same start and end line as the parent widget , but these can be overridden with the standard configuration options . <EoL>
<BoL> Returns a list of peers of this widget ( this does not include the widget itself ) . <EoL>
<BoL> Replaces the range of characters between index1 and index2 with the given characters and tags specified by args . <EoL>
<BoL> Adjust the view of the text to 10 times the difference between X and Y and the coordinates given in scan_mark . <EoL>
<BoL> Remember the current X , Y coordinates . <EoL>
<BoL> Scroll such that the character at INDEX is visible . <EoL>
<BoL> Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS . Additional pairs of indices may follow in ARGS . <EoL>
<BoL> Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC . <EoL>
<BoL> Return the value of OPTION for tag TAGNAME . <EoL>
<BoL> Configure a tag TAGNAME . <EoL>
<BoL> Delete all tags in TAGNAMES . <EoL>
<BoL> Change the priority of tag TAGNAME such that it is lower than the priority of BELOWTHIS . <EoL>
<BoL> Return a list of all tag names . <EoL>
<BoL> Return a list of start and end index for the first sequence of characters between INDEX1 and INDEX2 which all have tag TAGNAME . The text is searched forward from INDEX1 . <EoL>
<BoL> Return a list of start and end index for the first sequence of characters between INDEX1 and INDEX2 which all have tag TAGNAME . The text is searched backwards from INDEX1 . <EoL>
<BoL> Change the priority of tag TAGNAME such that it is higher than the priority of ABOVETHIS . <EoL>
<BoL> Return a list of ranges of text which have tag TAGNAME . <EoL>
<BoL> Remove tag TAGNAME from all characters between INDEX1 and INDEX2 . <EoL>
<BoL> Unbind for all characters with TAGNAME for event SEQUENCE the function identified with FUNCID . <EoL>
<BoL> Return the value of OPTION of an embedded window at INDEX . <EoL>
<BoL> Configure an embedded window at INDEX . <EoL>
<BoL> Create a window at INDEX . <EoL>
<BoL> Return all names of embedded windows in this widget . <EoL>
<BoL> Obsolete function , use see . <EoL>
<BoL> This subcommand returns or sets platform specific attributes <EoL>
<BoL> Store NAME in WM_CLIENT_MACHINE property of this widget . Return current value . <EoL>
<BoL> Store list of window names ( WLIST ) into WM_COLORMAPWINDOWS property of this widget . <EoL>
<BoL> Store VALUE in WM_COMMAND property . <EoL>
<BoL> Deiconify this widget . If it was never mapped it will not be mapped . On Windows it will raise this widget and give it the focus . <EoL>
<BoL> Destroy this and all descendants widgets . This will end the application of this Tcl interpreter . <EoL>
<BoL> Set focus model to MODEL . <EoL>
<BoL> The window will be unmapped from the screen and will no longer be managed by wm . toplevel windows will be treated like frame windows once they are no longer managed by wm , however , the menu option configuration will be remembered and the menus will return once the widget is managed again . <EoL>
<BoL> Return identifier for decorative frame of this widget if present . <EoL>
<BoL> Set geometry to NEWGEOMETRY of the form =widthxheight+x+y . Return current value if None is given . <EoL>
<BoL> Set the group leader widgets for related widgets to PATHNAME . Return the group leader of this widget if None is given . <EoL>
<BoL> Set bitmap for the iconified widget to BITMAP . Return the bitmap if None is given . <EoL>
<BoL> Display widget as icon . <EoL>
<BoL> Set mask for the icon bitmap of this widget . Return the mask if None is given . <EoL>
<BoL> Set the name of the icon for this widget . Return the name if None is given . <EoL>
<BoL> Sets the titlebar icon for this window based on the named photo images passed through args . If default is True , this is applied to all future created toplevels as well . <EoL>
<BoL> Set the position of the icon of this widget to X and Y . Return a tuple of the current values of X and X if None is given . <EoL>
<BoL> Set widget PATHNAME to be displayed instead of icon . Return the current value if None is given . <EoL>
<BoL> The widget specified will become a stand alone top-level window . The window will be decorated with the window managers title bar , etc . <EoL>
<BoL> Set max WIDTH and HEIGHT for this widget . <EoL>
<BoL> Set min WIDTH and HEIGHT for this widget . <EoL>
<BoL> Instruct the window manager to ignore this widget if BOOLEAN is given with 1 . Return the current value if None is given . <EoL>
<BoL> Instruct the window manager that the position of this widget shall be defined by the user if WHO is `` user '' , and by its own policy if WHO is `` program '' . <EoL>
<BoL> Bind function FUNC to command NAME for this widget . <EoL>
<BoL> Internal function . It reads BASENAME.tcl and CLASSNAME.tcl into the Tcl Interpreter and calls exec on the contents of BASENAME.py and CLASSNAME.py if such a file exists in the home directory . <EoL>
<BoL> Report callback exception on sys.stderr . <EoL>
<BoL> Instruct the window manager whether this width can be resized in WIDTH or HEIGHT . Both values are boolean values . <EoL>
<BoL> Instruct the window manager that the size of this widget shall be defined by the user if WHO is `` user '' , and by its own policy if WHO is `` program '' . <EoL>
<BoL> Query or set the state of this widget as one of normal , icon , iconic ( see wm_iconwindow ) , withdrawn , or zoomed ( Windows only ) . <EoL>
<BoL> Set the title of this widget . <EoL>
<BoL> Instruct the window manager that this widget is transient with regard to widget MASTER . <EoL>
<BoL> Withdraw this widget from the screen such that it is unmapped and forgotten by the window manager . Re-draw it with wm_deiconify . <EoL>
<BoL> Construct a toplevel widget with the parent MASTER . <EoL>
<BoL> Construct a variable <EoL>
<BoL> Return value of variable . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . Calling it will raise the exception SystemExit . <EoL>
<BoL> Internal function . <EoL>
<BoL> Return a properly formatted dict built from Tcl list pairs . <EoL>
<BoL> Internal function . <EoL>
<BoL> Internal function . <EoL>
<BoL> Convert true and false to integer values 1 and 0 . <EoL>
<BoL> Run the main loop of Tcl . <EoL>
<BoL> Ask for multiple filenames to open <EoL>
<BoL> Ask for multiple filenames and return the open file objects <EoL>
<BoL> Simple test program . <EoL>
<BoL> Return font metrics . <EoL>
<BoL> Given the name of a tk named font , returns a Font representation . <EoL>
<BoL> process the data <EoL>
<BoL> add standard button box . <EoL>
<BoL> get a float from the user <EoL>
<BoL> get an integer from the user <EoL>
<BoL> get a string from the user <EoL>
<BoL> Get a subwidget name ( returns a String , not a Widget ! ) <EoL>
<BoL> Return the name of all subwidgets . <EoL>
<BoL> Bind balloon widget to another . One balloon widget may be bound to several widgets at the same time <EoL>
<BoL> Set configuration options for all subwidgets ( and self ) . <EoL>
<BoL> Set a variable without calling its action routine <EoL>
<BoL> Return the named subwidget ( which must have been created by the sub-class ) . <EoL>
<BoL> Return all subwidgets . <EoL>
<BoL> Add a button with given name to box . <EoL>
<BoL> This command calls the setmode method for all the entries in this Tree widget : if an entry has no child entries , its mode is set to none . Otherwise , if the entry has any hidden child entries , its mode is set to open ; otherwise its mode is set to close . <EoL>
<BoL> Close the entry given by entryPath if its mode is close . <EoL>
<BoL> Returns the current mode of the entry given by entryPath . <EoL>
<BoL> Returns a list of items whose status matches status . If status is not specified , the list of items in the `` on '' status will be returned . Mode can be on , off , default <EoL>
<BoL> Returns the current status of entryPath . <EoL>
<BoL> Open the entry given by entryPath if its mode is open . <EoL>
<BoL> Sets the status of entryPath to be status . A bitmap will be displayed next to the entry its status is on , off or default . <EoL>
<BoL> Returns the qualified path name for the widget . Normally used to set default options for subwidgets . See tixwidgets.py <EoL>
<BoL> Removes the selection anchor . <EoL>
<BoL> Set the selection anchor to the cell at ( x , y ) . <EoL>
<BoL> Delete columns between from_ and to inclusive . If to is not provided , delete only column at from_ <EoL>
<BoL> Delete rows between from_ and to inclusive . If to is not provided , delete only row at from_ <EoL>
<BoL> If any cell is being edited , de-highlight the cell and applies the changes . <EoL>
<BoL> Highlights the cell at ( x , y ) for editing , if the -editnotify command returns True for this cell . <EoL>
<BoL> Moves the range of columns from position FROM through TO by the distance indicated by OFFSET . For example , move_column ( 2 , 4 , 1 ) moves the columns 2,3,4 to columns 3,4,5 . <EoL>
<BoL> Moves the range of rows from position FROM through TO by the distance indicated by OFFSET . For example , move_row ( 2 , 4 , 1 ) moves the rows 2,3,4 to rows 3,4,5 . <EoL>
<BoL> Queries or sets the size of the column given by INDEX . <EoL>
<BoL> Queries or sets the size of the row given by INDEX . <EoL>
<BoL> Clears the cell at ( x , y ) by removing its display item . <EoL>
<BoL> This command calls the setmode method for all the entries in this Tree widget : if an entry has no child entries , its mode is set to none . Otherwise , if the entry has any hidden child entries , its mode is set to open ; otherwise its mode is set to close . <EoL>
<BoL> Close the entry given by entryPath if its mode is close . <EoL>
<BoL> Returns the current mode of the entry given by entryPath . <EoL>
<BoL> Open the entry given by entryPath if its mode is open . <EoL>
<BoL> This command is used to indicate whether the entry given by entryPath has children entries and whether the children are visible . <EoL>
<BoL> Tix maintains a list of directories under which the tix_getimage and tix_getbitmap commands will search for image files . <EoL>
<BoL> Returns the current value of the configuration option given by option . Option may be any of the options described in the CONFIGURATION OPTIONS section . <EoL>
<BoL> Query or modify the configuration options of the Tix application context . <EoL>
<BoL> Returns the file selection dialog that may be shared among different calls from this application . <EoL>
<BoL> Locates a bitmap file of the name name.xpm or name in one of the bitmap directories ( see the tix_addbitmapdir command above ) . <EoL>
<BoL> Locates an image file of the name name.xpm , name.xbm or name.ppm in one of the bitmap directories ( see the addbitmapdir command above ) . <EoL>
<BoL> Gets the options maintained by the Tix scheme mechanism . Available options include : <EoL>
<BoL> Resets the scheme and fontset of the Tix application to newScheme and newFontSet , respectively . <EoL>
<BoL> Imitates get_normal_name in tokenizer.c . <EoL>
<BoL> The tokenize ( ) generator requires one argument , readline , which must be a callable object which provides the same interface as the readline ( ) method of built-in file objects . Each call to the function should return one line of input as bytes . Alternatively , readline can be a callable function terminating with StopIteration : readline = open ( myfile , 'rb ' ) .__next__ # Example of alternate readline <EoL>
<BoL> Transform tokens back into Python source code . It returns a bytes object , encoded using the ENCODING token , which is the first token sequence output by tokenize . <EoL>
<BoL> Return True if the filename does not refer to a file we want to have reported . <EoL>
<BoL> Merge in the data from another CoverageResults <EoL>
<BoL> Write the coverage results . <EoL>
<BoL> Return a coverage results file in path . <EoL>
<BoL> Handler for call events . <EoL>
<BoL> Handler for call events . <EoL>
<BoL> Handler for call events . <EoL>
<BoL> Return dict where keys are line numbers in the line number table . <EoL>
<BoL> Return lineno dict for all code objects reachable from code . <EoL>
<BoL> Return dict where keys are lines in the line number table . <EoL>
<BoL> Return a dict of possible docstring positions . <EoL>
<BoL> Return a plausible module name for the path . <EoL>
<BoL> Return a plausible module name for the patch . <EoL>
<BoL> Format the stack ready for printing . <EoL>
<BoL> Create a StackSummary object from a supplied list of FrameSummary objects or old-style list of tuples . <EoL>
<BoL> Private API . force all lines in the stack to be loaded . <EoL>
<BoL> Format the exception . <EoL>
<BoL> Format the exception part of the traceback . <EoL>
<BoL> Create a TracebackException from an exception . <EoL>
<BoL> Extract the raw traceback from the current stack frame . <EoL>
<BoL> Return a StackSummary object representing a list of pre-processed entries from traceback . <EoL>
<BoL> Format a list of tuples or FrameSummary objects for printing . <EoL>
<BoL> Shorthand for 'format_list ( extract_stack ( f , limit ) ) ' . <EoL>
<BoL> A shorthand for 'format_list ( extract_tb ( tb , limit ) ) ' . <EoL>
<BoL> Print exception up to 'limit ' stack trace entries from 'tb ' to 'file ' . <EoL>
<BoL> This is a shorthand for 'print_exception ( sys.last_type , sys.last_value , sys.last_traceback , limit , file ) ' . <EoL>
<BoL> Print the list of tuples as returned by extract_tb ( ) or extract_stack ( ) as a formatted stack trace to the given file . <EoL>
<BoL> Print a stack trace from its invocation point . <EoL>
<BoL> Print up to 'limit ' stack trace entries from the traceback 'tb ' . <EoL>
<BoL> Walk a stack yielding the frame and line number for each frame . <EoL>
<BoL> Walk a traceback yielding the frame and line number for each frame . <EoL>
<BoL> Compute the differences with an old snapshot old_snapshot . Get statistics as a sorted list of StatisticDiff instances , grouped by group_by . <EoL>
<BoL> Write the snapshot into a file . <EoL>
<BoL> Create a new Snapshot instance with a filtered traces sequence , filters is a list of Filter or DomainFilter instances . If filters is an empty list , return a new Snapshot instance with a copy of the traces . <EoL>
<BoL> Load a snapshot from a file . <EoL>
<BoL> Group statistics by key_type . Return a sorted list of Statistic instances . <EoL>
<BoL> Get the traceback where the Python object *obj* was allocated . Return a Traceback instance . <EoL>
<BoL> Take a snapshot of traces of memory blocks allocated by Python . <EoL>
<BoL> Put terminal into a cbreak mode . <EoL>
<BoL> Put terminal into a raw mode . <EoL>
<BoL> Convert colortriples to hexstrings . <EoL>
<BoL> Delete all of pen 's drawings <EoL>
<BoL> does the work for clearstamp ( ) and clearstamps ( ) <EoL>
<BoL> Set delay value which determines speed of turtle animation . <EoL>
<BoL> Manages the correct rendering of the turtle with respect to its shape , resizemode , stretch and tilt etc . <EoL>
<BoL> Calculate transformed shape polygon according to resizemode and shapetransform . <EoL>
<BoL> move turtle forward by specified distance <EoL>
<BoL> Move the pen to the point end , thereby drawing a line if pen is down . All other methods for turtle movement depend on this one . <EoL>
<BoL> Closes current line item and starts a new one . Remark : if current line became too long , animation performance ( via _drawline ) slowed down considerably . <EoL>
<BoL> Computes transformed polygon shapes from a shape according to current position and heading . <EoL>
<BoL> Turns pen clockwise by angle . <EoL>
<BoL> Helper function for degrees ( ) and radians ( ) <EoL>
<BoL> Set turtle-mode to 'standard ' , 'world ' or 'logo ' . <EoL>
<BoL> Turns turtle animation on/off and set delay for update drawings . <EoL>
<BoL> Does the main part of the work for undo ( ) <EoL>
<BoL> Reverse a _goto . Used for undo ( ) <EoL>
<BoL> Perform a Turtle-data update . <EoL>
<BoL> Performs the writing for write ( ) <EoL>
<BoL> Move the turtle backward by distance . <EoL>
<BoL> Called just before drawing a shape to be filled . <EoL>
<BoL> Start recording the vertices of a polygon . <EoL>
<BoL> Draw a circle with given radius . <EoL>
<BoL> Delete the turtle 's drawings from the screen . Do not move turtle . <EoL>
<BoL> Delete stamp with given stampid <EoL>
<BoL> Delete all or first/last n of turtle 's stamps . <EoL>
<BoL> Create and return a clone of the turtle . <EoL>
<BoL> Return or set the pencolor and fillcolor . <EoL>
<BoL> Set angle measurement units to degrees . <EoL>
<BoL> Return the distance from the turtle to ( x , y ) in turtle step units . <EoL>
<BoL> Draw a dot with diameter size , using color . <EoL>
<BoL> Pull the pen down -- drawing when moving . <EoL>
<BoL> Fill the shape drawn after the call begin_fill ( ) . <EoL>
<BoL> Stop recording the vertices of a polygon . <EoL>
<BoL> Move the turtle forward by the specified distance . <EoL>
<BoL> Return or set the fillcolor . <EoL>
<BoL> Return fillstate ( True if filling , False else ) . <EoL>
<BoL> Return the lastly recorded polygon . <EoL>
<BoL> Return the current shape polygon as tuple of coordinate pairs . <EoL>
<BoL> Return the Turtleobject itself . <EoL>
<BoL> Return the TurtleScreen object , the turtle is drawing on . <EoL>
<BoL> Move turtle to an absolute position . <EoL>
<BoL> Return the turtle 's current heading . <EoL>
<BoL> Makes the turtle invisible . <EoL>
<BoL> Move turtle to the origin - coordinates ( 0,0 ) . <EoL>
<BoL> Return True if pen is down , False if it 's up . <EoL>
<BoL> Return True if the Turtle is shown , False if it 's hidden . <EoL>
<BoL> Turn turtle left by angle units . <EoL>
<BoL> Bind fun to mouse-click event on this turtle on canvas . <EoL>
<BoL> Bind fun to mouse-move event on this turtle on canvas . <EoL>
<BoL> Bind fun to mouse-button-release event on this turtle on canvas . <EoL>
<BoL> Return or set the pen 's attributes . <EoL>
<BoL> Return or set the pencolor . <EoL>
<BoL> Set or return the line thickness . <EoL>
<BoL> Pull the pen up -- no drawing when moving . <EoL>
<BoL> Return the turtle 's current location ( x , y ) , as a Vec2D-vector . <EoL>
<BoL> Set the angle measurement units to radians . <EoL>
<BoL> Delete the turtle 's drawings and restore its default values . <EoL>
<BoL> Set resizemode to one of the values : `` auto '' , `` user '' , `` noresize '' . <EoL>
<BoL> Turn turtle right by angle units . <EoL>
<BoL> Set the orientation of the turtle to to_angle . <EoL>
<BoL> Rotate the turtleshape to point in the specified direction <EoL>
<BoL> Set or disable undobuffer . <EoL>
<BoL> Set the turtle 's first coordinate to x <EoL>
<BoL> Set the turtle 's second coordinate to y <EoL>
<BoL> Set turtle shape to shape with given name / return current shapename . <EoL>
<BoL> Set/return turtle 's stretchfactors/outline . Set resizemode to `` user '' . <EoL>
<BoL> Set or return the current transformation matrix of the turtle shape . <EoL>
<BoL> Set or return the current shearfactor . <EoL>
<BoL> Makes the turtle visible . <EoL>
<BoL> Return or set the turtle 's speed . <EoL>
<BoL> Stamp a copy of the turtleshape onto the canvas and return its id . <EoL>
<BoL> Rotate the turtleshape by angle . <EoL>
<BoL> Set or return the current tilt-angle . <EoL>
<BoL> Return the angle of the line from the turtle 's position to ( x , y ) . <EoL>
<BoL> undo ( repeatedly ) the last turtle action . <EoL>
<BoL> Return count of entries in the undobuffer . <EoL>
<BoL> Write text at the current turtle position . <EoL>
<BoL> Return the turtle 's x coordinate . <EoL>
<BoL> Return the turtle 's y coordinate -- - No arguments . <EoL>
<BoL> Return the singleton screen object . If none exists at the moment , create a new one and return it , else return the existing one . <EoL>
<BoL> Adjust scrollbars according to window- and canvas-size . <EoL>
<BoL> 'forward ' method , which canvas itself has inherited ... <EoL>
<BoL> 'forward ' method , which canvas itself has inherited ... <EoL>
<BoL> 'forward ' method , which canvas itself has inherited ... <EoL>
<BoL> 'forward ' method , which canvas itself has inherited ... <EoL>
<BoL> 'forward ' method , which canvas itself has inherited ... <EoL>
<BoL> self-explanatory <EoL>
<BoL> Adjust canvas and scrollbars according to given canvas size . <EoL>
<BoL> 'forward ' method , which canvas itself has inherited ... <EoL>
<BoL> Add component to a shape of type compound . <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> move turtle to position end . <EoL>
<BoL> Turn turtle counterclockwise by specified angle if angle > 0 . <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> eset turtle to its initial values <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> dummy method - to be overwritten by child class <EoL>
<BoL> Set canvas ' backgroundcolor if color is not None , else return backgroundcolor . <EoL>
<BoL> eturn a blank image object <EoL>
<BoL> Return color string corresponding to args . <EoL>
<BoL> Create and return image item on canvas . <EoL>
<BoL> Create an invisible line item on canvas self.cv ) <EoL>
<BoL> Create an invisible polygon item on canvas self.cv ) <EoL>
<BoL> Delay subsequent canvas actions for delay ms . <EoL>
<BoL> Delete graphics item from canvas . If item is '' all '' delete all graphics items . <EoL>
<BoL> Configure image item as to draw image object at position ( x , y ) on canvas ) <EoL>
<BoL> eturn an image object containing the imagedata from a gif-file named filename . <EoL>
<BoL> Increment update counter . <EoL>
<BoL> Check if the string color is a legal Tkinter color string . <EoL>
<BoL> Set focus on canvas ( in order to collect key-events ) <EoL>
<BoL> Bind fun to mouse-click event on turtle . fun must be a function with two arguments , the coordinates of the clicked point on the canvas . num , the number of the mouse-button defaults to 1 <EoL>
<BoL> Bind fun to mouse-move-event ( with pressed mouse button ) on turtle . fun must be a function with two arguments , the coordinates of the actual mouse position on the canvas . num , the number of the mouse-button defaults to 1 <EoL>
<BoL> If key is given , bind fun to key-press event of key . <EoL>
<BoL> Bind fun to key-release event of key . Canvas must have focus . See method listen <EoL>
<BoL> Bind fun to mouse-button-release event on turtle . fun must be a function with two arguments , the coordinates of the point on the canvas where mouse button is released . num , the number of the mouse-button defaults to 1 <EoL>
<BoL> Bind fun to mouse-click event on canvas . fun must be a function with two arguments , the coordinates of the clicked point on the canvas . num , the number of the mouse-button defaults to 1 <EoL>
<BoL> Install a timer , which calls fun after t milliseconds . <EoL>
<BoL> eturns list of coordinate-pairs of points of item Example ( for insiders ) : <EoL>
<BoL> Resize the canvas the turtles are drawing on . Does not alter the drawing window . <EoL>
<BoL> Configure image item as to draw image object at center of canvas . Set item to the first item in the displaylist , so it will be drawn below any other item . <EoL>
<BoL> Return 'line ' or 'polygon ' or 'image ' depending on type of item . <EoL>
<BoL> Redraw graphics items on canvas <EoL>
<BoL> Return the width and height of the turtle window . <EoL>
<BoL> Write txt at pos in canvas with specified font and color . Return text item and x-coord of right bottom corner of text 's bounding box . <EoL>
<BoL> Adds a turtle shape to TurtleScreen 's shapelist . <EoL>
<BoL> Set or return backgroundcolor of the TurtleScreen . <EoL>
<BoL> Set background image or return name of current backgroundimage . <EoL>
<BoL> Delete all drawings and all turtles from the TurtleScreen . <EoL>
<BoL> Return the colormode or set it to 1.0 or 255 . <EoL>
<BoL> Return or set the drawing delay in milliseconds . <EoL>
<BoL> Return the Canvas of this TurtleScreen . <EoL>
<BoL> Return a list of names of all currently available turtle shapes . <EoL>
<BoL> Set focus on TurtleScreen ( in order to collect key-events ) <EoL>
<BoL> Starts event loop - calling Tkinter 's mainloop function . <EoL>
<BoL> Set turtle-mode ( 'standard ' , 'logo ' or 'world ' ) and perform reset . <EoL>
<BoL> Pop up a dialog window for input of a number . <EoL>
<BoL> Bind fun to mouse-click event on canvas . <EoL>
<BoL> Bind fun to key-release event of key . <EoL>
<BoL> Bind fun to key-press event of key if key is given , or to any key-press-event if no key is given . <EoL>
<BoL> Install a timer , which calls fun after t milliseconds . <EoL>
<BoL> Reset all Turtles on the Screen to their initial state . <EoL>
<BoL> Resize the canvas the turtles are drawing on . <EoL>
<BoL> Set up a user defined coordinate-system . <EoL>
<BoL> Pop up a dialog window for input of a string . <EoL>
<BoL> Turns turtle animation on/off and set delay for update drawings . <EoL>
<BoL> Return the list of turtles on the screen . <EoL>
<BoL> Perform a TurtleScreen update . <EoL>
<BoL> Return the height of the turtle window . <EoL>
<BoL> Return the width of the turtle window . <EoL>
<BoL> otate self counterclockwise by angle <EoL>
<BoL> Shut the turtlegraphics window . <EoL>
<BoL> Go into mainloop until the mouse is clicked.Screen.bye ( ) with two dummy-parameters <EoL>
<BoL> Set title of turtle-window <EoL>
<BoL> helper function for Scrolled Canvas <EoL>
<BoL> helper function for Scrolled Canvas <EoL>
<BoL> To reduce docstrings from TurtleScreen class for functions <EoL>
<BoL> To reduce docstrings from RawTurtle class for functions <EoL>
<BoL> Convert content of config-file into dictionary . <EoL>
<BoL> Get strings describing the arguments for the given object <EoL>
<BoL> Read in docstrings from lang-specific docstring dictionary . <EoL>
<BoL> Read config-files , change configuration-dict accordingly . <EoL>
<BoL> Create and write docstring-dictionary to file . <EoL>
<BoL> Calculate the most derived metaclass . <EoL>
<BoL> A thin wrapper around __getitem_inner__ to provide the latter with hashable arguments to improve speed . <EoL>
<BoL> NewType creates simple unique types with almost zero runtime overhead . <EoL>
<BoL> Override this in subclasses to interpret forward references . <EoL>
<BoL> Initializer . <EoL>
<BoL> Internal helper to extract the default arguments , by name . <EoL>
<BoL> Construct a __subclasshook__ callable that incorporates the associated __extra__ class in subclass checks performed against cls . <EoL>
<BoL> Helper for Generic.__new__ . <EoL>
<BoL> Internal helper : copy class __dict__ and clean slots class variables . ( They will be re-created if necessary by normal class machinery . ) <EoL>
<BoL> Helper for @ overload to raise when called . <EoL>
<BoL> An internal helper for Union creation and substitution : flatten Union's among parameters , then remove duplicates and strict subclasses . <EoL>
<BoL> An internal helper function : replace arg if it is a type variable found in tvars with corresponding substitution from args or with corresponding substitution sub-tree if arg is a generic type . <EoL>
<BoL> An internal helper function : calculate substitution tree for generic cls after replacing its type parameters with substitutions in tvars - > args ( if any ) . Repeat the same following __origin__ 's . <EoL>
<BoL> Internal wrapper caching __getitem__ of generic types with a fallback to original function for non-hashable arguments . <EoL>
<BoL> Check that the argument is a type , and return it ( internal helper ) . <EoL>
<BoL> Return the repr ( ) of an object , special-casing types ( internal helper ) . <EoL>
<BoL> Return type hints for an object . <EoL>
<BoL> Decorator to indicate that annotations are not type hints . <EoL>
<BoL> Decorator to give another decorator the @ no_type_check effect . <EoL>
<BoL> Stop holding a reference to the TestCase at index . <EoL>
<BoL> Run the tests without collecting errors in a TestResult <EoL>
<BoL> Used by discovery . <EoL>
<BoL> Used by discovery . Yields test suites it loads . <EoL>
<BoL> Find and return all test modules from the specified start directory , recursing into subdirectories to find them and return all tests found within them . <EoL>
<BoL> Return a sorted sequence of method names found within testCaseClass <EoL>
<BoL> Return a suite of all test cases contained in the given module <EoL>
<BoL> Return a suite of all test cases given a string specifier . <EoL>
<BoL> Return a suite of all test cases found using the given sequence of string specifiers . See 'loadTestsFromName ( ) ' . <EoL>
<BoL> Return a suite of all test cases contained in testCaseClass <EoL>
<BoL> Return -1 if x < y , 0 if x == y and 1 if x > y <EoL>
<BoL> Converts a sys.exc_info ( ) -style tuple of values into a string . <EoL>
<BoL> Called when an error has occurred . 'err ' is a tuple of values as returned by sys.exc_info ( ) . <EoL>
<BoL> Called when an expected failure/error occurred . <EoL>
<BoL> Called when an error has occurred . 'err ' is a tuple of values as returned by sys.exc_info ( ) . <EoL>
<BoL> Called when a test is skipped . <EoL>
<BoL> Called at the end of a subtest . 'err ' is None if the subtest ended successfully , otherwise it 's a tuple of values as returned by sys.exc_info ( ) . <EoL>
<BoL> Called when a test was expected to fail , but succeed . <EoL>
<BoL> Called once before any tests are executed . <EoL>
<BoL> Indicates that the tests should be aborted . <EoL>
<BoL> Called when the given test has been run <EoL>
<BoL> Called once after all tests are executed . <EoL>
<BoL> Tells whether or not this result was a success . <EoL>
<BoL> If args is empty , assertRaises/Warns is being used as a context manager , so check for a 'msg ' kwarg and return self . If args is not empty , call a callable passing positional and keyword arguments . <EoL>
<BoL> Returns a one-line description of the subtest , or None if no description has been provided . <EoL>
<BoL> Unconditionally skip a test . <EoL>
<BoL> Skip a test if the condition is true . <EoL>
<BoL> Filter the output of ` dir ( mock ) ` to only useful members . <EoL>
<BoL> Given a call ( or simply an ( args , kwargs ) tuple ) , return a comparison key suitable for matching with other calls . This is a best effort method which relies on the spec 's signature , if available , or falls back on the arguments themselves . <EoL>
<BoL> Create the child mocks for attributes and return value . <EoL>
<BoL> assert the mock has been called with the specified arguments . <EoL>
<BoL> assert that the mock was called at least once <EoL>
<BoL> assert that the mock was called only once . <EoL>
<BoL> assert that the mock was called exactly once and that that call was with the specified arguments . <EoL>
<BoL> assert that the mock was called with the specified arguments . <EoL>
<BoL> assert the mock has been called with the specified calls . The ` mock_calls ` list is checked for the calls . <EoL>
<BoL> assert that the mock was never called . <EoL>
<BoL> Attach a mock as an attribute of this one , replacing its name and parent . Calls to the attached mock will be recorded in the ` method_calls ` and ` mock_calls ` attributes of this one . <EoL>
<BoL> Set attributes on the mock through keyword arguments . <EoL>
<BoL> Add a spec to a mock . <EoL>
<BoL> Add a spec to a mock . <EoL>
<BoL> Add a spec to a mock . <EoL>
<BoL> For a call object that represents multiple calls , ` call_list ` returns a list of all the intermediate calls as well as the final call . <EoL>
<BoL> Given an arbitrary , possibly callable object , try to create a suitable signature object . Return a ( reduced func , signature ) tuple , or None . <EoL>
<BoL> Given an object , return True if the object is callable . For classes , return True if instances would be callable . <EoL>
<BoL> Return whether we should skip the first argument on spec 's ` entry ` attribute . <EoL>
<BoL> Perform the patch . <EoL>
<BoL> Undo the patch . <EoL>
<BoL> Activate a patch , returning any created mock . <EoL>
<BoL> Stop an active patch . <EoL>
<BoL> Patch the dict . <EoL>
<BoL> Unpatch the dict . <EoL>
<BoL> Stop all active patches . LIFO to unroll nested patches . <EoL>
<BoL> A helper function to create a mock to replace the use of ` open ` . It works for ` open ` called directly or used as a context manager . <EoL>
<BoL> Finds elements in only one or the other of two , sorted input lists . <EoL>
<BoL> Same behavior as sorted_list_difference but for lists of unorderable items ( like dicts ) . <EoL>
<BoL> safe : bytes object . <EoL>
<BoL> Clear the parse cache and the quoters cache . <EoL>
<BoL> splitattr ( '/path ; attr1=value1 ; attr2=value2 ; ... ' ) - > '/path ' , [ 'attr1=value1 ' , 'attr2=value2 ' , ... ] . <EoL>
<BoL> splithost ( '//host [ : port ] /path ' ) -- > 'host [ : port ] ' , '/path ' . <EoL>
<BoL> splitpasswd ( 'user : passwd ' ) - > 'user ' , 'passwd ' . <EoL>
<BoL> splitport ( 'host : port ' ) -- > 'host ' , 'port ' . <EoL>
<BoL> splitquery ( '/path ? query ' ) -- > '/path ' , 'query ' . <EoL>
<BoL> splittag ( '/path # tag ' ) -- > '/path ' , 'tag ' . <EoL>
<BoL> splittype ( 'type : opaquestring ' ) -- > 'type ' , 'opaquestring ' . <EoL>
<BoL> splituser ( 'user [ : passwd ] @ host [ : port ] ' ) -- > 'user [ : passwd ] ' , 'host [ : port ] ' . <EoL>
<BoL> splitvalue ( 'attr=value ' ) -- > 'attr ' , 'value ' . <EoL>
<BoL> to_bytes ( u '' URL '' ) -- > 'URL ' . <EoL>
<BoL> unwrap ( ' < URL : type : //host/path > ' ) -- > 'type : //host/path ' . <EoL>
<BoL> Make an HTTP connection using connection_class . <EoL>
<BoL> Add a header to be used by the HTTP interface only e.g . u.addheader ( 'Accept ' , 'sound/basic ' ) <EoL>
<BoL> Handle http errors . <EoL>
<BoL> Error 301 -- also relocated ( permanently ) . <EoL>
<BoL> Error 302 -- relocated ( temporarily ) . <EoL>
<BoL> Error 303 -- also relocated ( essentially identical to 302 ) . <EoL>
<BoL> Error 307 -- relocated , but turn POST into error . <EoL>
<BoL> Default error handling -- do n't raise an exception . <EoL>
<BoL> Use URLopener ( ) .open ( file ) instead of open ( file , ' r ' ) . <EoL>
<BoL> Use `` data '' URL . <EoL>
<BoL> Use local file or FTP depending on form of URL . <EoL>
<BoL> Use FTP protocol . <EoL>
<BoL> Use HTTP protocol . <EoL>
<BoL> Use HTTPS protocol . <EoL>
<BoL> Use local file . <EoL>
<BoL> Overridable interface to open unknown URL type . <EoL>
<BoL> Overridable interface to open unknown URL type . <EoL>
<BoL> Override this in a GUI environment ! <EoL>
<BoL> etrieve ( url ) returns ( filename , headers ) for a local object or ( tempfilename , headers ) for a remote object . <EoL>
<BoL> Default error handler : close the connection and raise OSError . <EoL>
<BoL> Return ( scheme , user , password , host/port ) given a URL or an authority . <EoL>
<BoL> Return True iff this host should n't be accessed using a proxy <EoL>
<BoL> Return the set of errors raised by the FTP class . <EoL>
<BoL> Return a dictionary of scheme - > proxy server URL mappings . <EoL>
<BoL> Return a dictionary of scheme - > proxy server URL mappings . <EoL>
<BoL> Return the IP address of the magic hostname 'localhost ' . <EoL>
<BoL> Return an empty email Message object . <EoL>
<BoL> Test if proxies should not be used for a particular host . <EoL>
<BoL> Return request-host , as defined by RFC 2965 . <EoL>
<BoL> Return the IP addresses of the current host . <EoL>
<BoL> OS-specific conversion from a relative URL of the 'file ' scheme to a file system path ; not recommended for general use . <EoL>
<BoL> Preconditions : - our agent applies to this entry - filename is URL decoded <EoL>
<BoL> check if this entry applies to the specified agent <EoL>
<BoL> using the parsed robots.txt decide if useragent can fetch url <EoL>
<BoL> Sets the time the robots.txt file was last fetched to the current time . <EoL>
<BoL> Returns the time the robots.txt file was last fetched . <EoL>
<BoL> Parse the input lines from a robots.txt file . <EoL>
<BoL> Reads the robots.txt URL and feeds it to the parser . <EoL>
<BoL> Sets the URL referring to a robots.txt file . <EoL>
<BoL> Decode uuencoded file <EoL>
<BoL> Uuencode file <EoL>
<BoL> uuencode/uudecode main program <EoL>
<BoL> Get the hardware address on Unix by running arp . <EoL>
<BoL> Get the hardware address on Unix by running ifconfig . <EoL>
<BoL> Get the hardware address on Unix by running ip . <EoL>
<BoL> Get the hardware address on Windows by running ipconfig.exe . <EoL>
<BoL> Get the hardware address on Unix by running lanscan . <EoL>
<BoL> Get the hardware address on Windows using NetBIOS calls . See http : //support.microsoft.com/kb/118623 for details . <EoL>
<BoL> Get the hardware address on Unix by running netstat . <EoL>
<BoL> Get a random node ID , with eighth bit set as suggested by RFC 4122 . <EoL>
<BoL> Get the hardware address on Unix using ctypes . <EoL>
<BoL> Get the hardware address on Windows using ctypes . <EoL>
<BoL> Get the hardware address as a 48-bit positive integer . <EoL>
<BoL> Generate a UUID from a host ID , sequence number , and the current time . <EoL>
<BoL> Generate a UUID from the MD5 hash of a namespace UUID and a name . <EoL>
<BoL> Generate a UUID from the SHA-1 hash of a namespace UUID and a name . <EoL>
<BoL> Installs or upgrades pip in a virtual environment <EoL>
<BoL> Create a virtual environment in a directory . <EoL>
<BoL> Create a configuration file indicating where the environment 's Python was copied from , and whether the system site-packages should be made available in the environment . <EoL>
<BoL> Create the directories for the environment . <EoL>
<BoL> Install scripts into the created environment from a directory . <EoL>
<BoL> Hook for post-setup modification of the venv . Subclasses may install additional packages or scripts here , add activation shell scripts , etc . <EoL>
<BoL> Replace variable placeholders in script text with context-specific variables . <EoL>
<BoL> Set up a Python executable in the environment . <EoL>
<BoL> Set up scripts into the created environment from a directory . <EoL>
<BoL> Try symlinking a file , and if that fails , fall back to copying . <EoL>
<BoL> Function to format a warning the standard way . <EoL>
<BoL> Function to format a warning the standard way . <EoL>
<BoL> Signal whether the frame is an internal CPython implementation detail . <EoL>
<BoL> Find the next frame that does n't involve CPython internals . <EoL>
<BoL> Hook to write a warning to a file ; replace if you like . <EoL>
<BoL> Hook to write a warning to a file ; replace if you like . <EoL>
<BoL> Clear the list of warning filters , so that no filters are active . <EoL>
<BoL> Insert a simple entry into the list of warnings filters ( at the front ) . <EoL>
<BoL> If alive then mark as dead and return func ( *args , **kwargs ) ; otherwise return None <EoL>
<BoL> If alive then mark as dead and return ( obj , func , args , kwargs ) ; otherwise return None <EoL>
<BoL> If alive then return ( obj , func , args , kwargs ) ; otherwise return None <EoL>
<BoL> Attempt to synthesize a controller base on existing controllers . <EoL>
<BoL> Return a browser launcher instance appropriate for the environment . <EoL>
<BoL> Register a browser connector and , optionally , connection . <EoL>
<BoL> Wrap any raised struct.errors in a ConversionError . <EoL>
<BoL> getDOMImplementation ( name = None , features = ( ) ) - > DOM implementation . <EoL>
<BoL> egisterDOMImplementation ( name , factory ) <EoL>
<BoL> Returns true iff this element is declared to have an EMPTY content model . <EoL>
<BoL> Returns true iff the named attribute is a DTD-style ID . <EoL>
<BoL> Returns true iff the identified attribute is a DTD-style ID . <EoL>
<BoL> Clone a node and give it the new owner document . Called by Node.cloneNode and Document.importNode <EoL>
<BoL> Parse a file into a DOM by filename or file object . <EoL>
<BoL> Parse a file into a DOM from a string . <EoL>
<BoL> Comment element factory . <EoL>
<BoL> Processing Instruction element factory . <EoL>
<BoL> Subelement factory which creates an element instance , and appends it to an existing parent . <EoL>
<BoL> Flush builder buffers and return toplevel document Element . <EoL>
<BoL> Add text to current element . <EoL>
<BoL> Close and return current Element . <EoL>
<BoL> Open new element and return it . <EoL>
<BoL> Parse XML document from string constant for its IDs . <EoL>
<BoL> Finish feeding data to parser . <EoL>
<BoL> Feed encoded data to parser . <EoL>
<BoL> Return an iterator over currently available ( event , elem ) pairs . <EoL>
<BoL> Write element tree or element structure to sys.stdout . <EoL>
<BoL> Parse XML document from sequence of string fragments . <EoL>
<BoL> Return True if *element* appears to be an Element . <EoL>
<BoL> Register a namespace prefix . <EoL>
<BoL> Receive notification of character data . <EoL>
<BoL> Signals the end of an element in namespace mode . <EoL>
<BoL> Signals the start of an element in namespace mode . <EoL>
<BoL> Begin the scope of a prefix-URI Namespace mapping . <EoL>
<BoL> Get the byte stream for this input source . <EoL>
<BoL> Set the byte stream ( a Python file-like object which does not perform byte-to-character conversion ) for this input source . <EoL>
<BoL> Set the character stream for this input source . ( The stream must be a Python 2.0 Unicode-wrapped file-like that performs conversion to Unicode strings . ) <EoL>
<BoL> Sets the character encoding of this InputSource . <EoL>
<BoL> Avoids weird error messages if someone does exception [ ix ] by mistake , since Exception has __getitem__ defined . <EoL>
<BoL> Creates an exception . The message is required , but the exception is optional . <EoL>
<BoL> The column number of the end of the text where the exception occurred . <EoL>
<BoL> Non-NS-aware implementation . <EoL>
<BoL> NS-aware implementation . <EoL>
<BoL> Allow an application to set the locale for errors and warnings . <EoL>
<BoL> Resolve the system identifier of an entity and return either the system identifier to read from as a string , or an InputSource to read from . <EoL>
<BoL> Creates and returns a SAX parser . <EoL>
<BoL> Replace substrings of a string using a dictionary . <EoL>
<BoL> This function takes an InputSource and an optional base URL and returns a fully resolved InputSource object ready for reading . <EoL>
<BoL> This method is called when the entire XML document has been passed to the parser through the feed method , to notify the parser that there are no more data . This allows the parser to do the final checks on the document and empty the internal data buffer . <EoL>
<BoL> This method gives the raw XML data in the data parameter to the parser and makes it parse the data , emitting the corresponding events . It is allowed for XML constructs to be split across several calls to feed . <EoL>
<BoL> This method is called by the parse implementation to allow the SAX 2.0 driver to prepare itself for parsing . <EoL>
<BoL> This method is called after close has been called to reset the parser so that it is ready to parse new documents . The results of calling parse or feed after close without calling reset are undefined . <EoL>
<BoL> A workaround to get special attributes on the ServerProxy without interfering with the magic __getattr__ <EoL>
<BoL> getparser ( ) - > parser , unmarshaller <EoL>
<BoL> gzip encoded data - > unencoded data <EoL>
<BoL> data - > gzip encoded data <EoL>
<BoL> Copy an application archive , modifying the shebang line . <EoL>
<BoL> Write a shebang line . <EoL>
<BoL> Create an application archive from SOURCE . <EoL>
<BoL> Run the zipapp command line interface . <EoL>
<BoL> Return ( filename , archivename ) for the path . <EoL>
<BoL> Put the bytes from filename into the archive under the name arcname . <EoL>
<BoL> Add all files from `` pathname '' to the ZIP archive . <EoL>
<BoL> Returns buffered bytes without advancing the position . <EoL>
<BoL> Read and return up to n bytes . If the argument is omitted , None , or negative , data is read and returned until EOF is reached.. <EoL>
<BoL> Read up to n bytes with at most one read ( ) system call . <EoL>
<BoL> Read and return a line from the stream . <EoL>
<BoL> Open the ZIP file with mode read ' r ' , write ' w ' , exclusive create ' x ' , or append ' a ' . <EoL>
<BoL> Return the per-file header as a bytes object . <EoL>
<BoL> Construct an appropriate ZipInfo for a file on the filesystem . <EoL>
<BoL> Return True if this archive member is a directory . <EoL>
<BoL> Return data from the `` End of Central Directory '' record , or None . <EoL>
<BoL> Read the ZIP64 end-of-archive records and use that to update endrec <EoL>
<BoL> Generate a CRC-32 table . <EoL>
<BoL> Decrypt a single character . <EoL>
<BoL> Compute the CRC32 primitive on one byte . <EoL>
<BoL> Quickly see if a file is a ZIP file by checking the magic number . <EoL>
