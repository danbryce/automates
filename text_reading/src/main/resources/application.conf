TextEngine {
  // Override the default values here
//  basePath = /org/clulab/aske_automates
//  masterRulesPath = ${OdinEngine.basePath}/grammars/master.yml
//  entityRulesPath = ${OdinEngine.basePath}/grammars/entities/grammar/entities.yml
//  avoidRulesPath = ${OdinEngine.basePath}/grammars/avoidLocal.yml
//  taxonomyPath = ${OdinEngine.basePath}/grammars/taxonomy.yml
//  maxHops = 15

//  documentFilter = "length"
  EdgeCaseParagraphPreprocessor = false
  enableExpansion = true
  validArgs = ["definition"] #which args are to be expanded


  entityFinder {
    enabled = true
    finderTypes = ["rulebased", "gazetteer"]

    // Rule-based
    entityRulesPath = ${TextEngine.basePath}/grammars/entities/grammar/entities.yml
    avoidRulesPath = ${TextEngine.basePath}/grammars/entities/grammar/avoid.yml
    maxHops = 15

    // grobid-quantities
    taxonomy = ${TextEngine.taxonomyPath}
    domain = "localhost"
    port = "8060"

    // Gazetteer
    lexicons = ["unit.tsv", "GreekLetter.tsv"]
  }


}

CommentEngine {
//  basePath = /org/clulab/aske_automates
  masterRulesPath = ${TextEngine.basePath}/grammars/comments/master.yml
  taxonomyPath = ${TextEngine.taxonomyPath}

  enableLexiconNER = true
  enableExpansion = false
  validArgs = ${TextEngine.validArgs}
  EdgeCaseParagraphPreprocessor = true
  documentFilter = "length"

  entityFinder {
    enabled = true
    finderTypes = ["grfn"]

    // GrFN-based string match
    grfnFile = ${apps.grfnFile}

  }
}

apps {
//  grfnFile = "./input/grfn/petpt_grfn.json"
  grfnFile = "./input/SIR/grfn/SIR-Gillespie-SD_GrFN.json"
//  inputDirectory = "../development_data/ASCE_PT_model_papers_jsons"
//  inputDirectory = "./input/petpt/text"
  inputDirectory = "/home/alexeeva/Repos/automates/text_reading/input/LREC/equations"

  inputType = "json"

  predictedEquations = "./input/equations/sir_ideal_downsampledModel/input/predictions.txt"

  numAlignments = 3
  commentTextAlignmentScoreThreshold = 0.0 //todo: change if the scoring function changes

  outputDirectory = "./input/LREC/equations"

  exportAs = ["serialized", "json"] // no other formats yet specified, but can be added!

  //=====AlignmentBaselineData=====
  baslineInputDirectory = "./input/LREC/Baseline"
  baselineOutputDirectory = "./output/LREC/Baseline"
  baselineEquationDir = "./input/LREC/Baseline/equations/"

}

alignment {
  alignerType = "pairwisew2v"
  w2vPath = "vectors.txt"
  relevantArgs = ["variable", "definition"]
}
